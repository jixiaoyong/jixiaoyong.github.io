import{_ as p,N as t,O as o,P as n,W as s,S as c,a6 as a,C as i}from"./framework-656811b8.js";const l={},u=a(`<h1 id="view的绘制" tabindex="-1"><a class="header-anchor" href="#view的绘制" aria-hidden="true">#</a> View的绘制</h1><p>View的绘制分为3部分：</p><ol><li><p>measure</p><p>测量，决定了View的测量宽、高。几乎所有情况下都等同于View的最终宽、高（如果View需要多次measure才能确定大小，或者重写了<code>layout()</code>方法，并修改了传入的值的话则不会相等）。</p></li><li><p>layout</p><p>布局，决定View的四个顶点坐标和实际的宽、高。</p></li><li><p>draw</p><p>绘制，决定了View的具体显示内容。</p></li></ol><p>其中通过ViewRootImpl类的<code>performTraversals()</code>依次调用<code>performXXX()</code>方法。</p><h1 id="measurespec" tabindex="-1"><a class="header-anchor" href="#measurespec" aria-hidden="true">#</a> MeasureSpec</h1><p>MeasureSpec是一个32位int值，高2位表示SpecMode，低30位表示SpecSize。</p><p>SpecMode有3种可能值：</p><ul><li>UNSPECIFIED 父容器没有限定View大小，可以是任意需要的大小</li><li>EXACTLY 父类指定了View的具体大小，View的最终大小就是这个值(match_parent或者具体数值)</li><li>AT_MOST View可以是这个值以内的任意大小(wrap_content)</li></ul><p>我们指定的View的LayoutParams和父容器（DecorView则是窗口的尺寸，普通View是父容器的MeasureSpec）一起决定了View的MeasureSpec，进而决定了View的宽高。</p><p>SpecSize决定于父容器的尺寸、以及View的margin和padding。</p><h1 id="view绘制流程" tabindex="-1"><a class="header-anchor" href="#view绘制流程" aria-hidden="true">#</a> View绘制流程</h1><p>final类型的<code>measure()</code>方法调用<code>onMeasure()</code>方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>forceLayout <span class="token operator">||</span> needsLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cacheIndex <span class="token operator">=</span> forceLayout <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> mMeasureCache<span class="token punctuation">.</span><span class="token function">indexOfKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sIgnoreMeasureCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// measure ourselves, this should set the measured dimension flag back</span>
                <span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>onMeasure()</code>调用了<code>setMeasuredDimension()</code>方法设置了View宽、高的测量值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">int</span> specMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> specSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>specMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">UNSPECIFIED</span><span class="token operator">:</span>
            result <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">//返回getSuggestedMinimumWidth/Height的大小</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">EXACTLY</span><span class="token operator">:</span>
            result <span class="token operator">=</span> specSize<span class="token punctuation">;</span><span class="token comment">//返回测量大小</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getSuggestedMinimumXXX()</code>的值：</p><p>如果View没有背景，则返回的是View的<code>android:miniWidth</code>指定的值；</p><p>如果View有背景，则返回的是背景的<code>minimumWidth</code>的值和<code>android:miniWidth</code>指定的值中最大的一个值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mBackground <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> mMinWidth <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>mMinWidth<span class="token punctuation">,</span> mBackground<span class="token punctuation">.</span><span class="token function">getMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mBackground <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> mMinHeight <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>mMinHeight<span class="token punctuation">,</span> mBackground<span class="token punctuation">.</span><span class="token function">getMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，我们知道，如果直接继承自View的控件必须重写<code>onMeasure()</code>方法，设置wrap_content时候控件的大小。这是因为：</p><p>wrap_content对应的specMode是AT_MOST模式，其宽高等于<code>specSize</code>。</p><p>根据ViewGroup的<code>getChildMeasureSpec()</code>方法，我们知道此时的<code>specSize</code>是父容器目前可以用的大小，即这种情况下wrap_content的效果和match_parent的效果是一样的。</p><p>要避免这种情况，就需要重写<code>onMeasure()</code>方法，在里面专门指定wrap_content时View对应的大小。</p><h1 id="获取view的宽高" tabindex="-1"><a class="header-anchor" href="#获取view的宽高" aria-hidden="true">#</a> 获取View的宽高</h1><p>由于View的绘制和Activity的生命周期不同步，所以在<code>onCreate()/onStart()/onResume()</code>中都无法有效获取View的宽高。使用以下方式则可以正常获取View的宽高：</p><ol><li><p>Activity/View#onWindowFocusChanged()</p><p>当前的Window获取或失去焦点的时候调用，此时View已经初始化完毕，可以获取宽、高。</p><p>Activity窗口焦点变化(onPause/onResume)时会被调用多次。</p></li><li><p>View#post(runnable)</p><p>该runnable在view的消息队列尾部，被执行时View已经初始化好了，可以在这里获取宽高。</p></li><li><p>ViewTreeObserver</p><p>注册onGlobalLayoutListener，当View树的状态变更，或者View树内部View可见性发生变化就会被回调。</p><p>当View树的状态变更可能被调用多次。</p></li><li><p>View#measure()</p><p>手动调用<code>measure()</code>方法获取宽高。</p></li></ol><h1 id="draw过程" tabindex="-1"><a class="header-anchor" href="#draw过程" aria-hidden="true">#</a> draw过程</h1><p>绘制过程分为以下几步：</p><ol><li>绘制背景 <code>background.draw(canvas);</code></li><li>绘制自身 <code>onDraw(canvas);</code></li><li>绘制children <code>dispatchDraw(canvas);</code></li><li>绘制装饰 <code>onDrawForeground(canvas);</code></li></ol><p><code>setWillNotDraw()</code>表示当前的ViewGroup不需要绘制任何内容，系统会对此进行优化（默认启用）。如果ViewGroup需要绘制内容时，则需要手动关闭这个标志。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWillNotDraw</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> willNotDraw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setFlags</span><span class="token punctuation">(</span>willNotDraw <span class="token operator">?</span> <span class="token constant">WILL_NOT_DRAW</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">DRAW_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="绘制两个图形重叠部分" tabindex="-1"><a class="header-anchor" href="#绘制两个图形重叠部分" aria-hidden="true">#</a> 绘制两个图形重叠部分</h1><p>android自定义view时两个图形重叠部分的绘制方式,一定要调用<code>canvas.saveLayer()</code> ，否则不生效。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">//这个步骤十分重要，将当前画布保存为新的一层</span>
        <span class="token keyword">int</span> save <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>mWidth<span class="token punctuation">,</span>mHeight<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">Canvas</span><span class="token punctuation">.</span><span class="token constant">ALL_SAVE_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Paint</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>mBackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RectF</span> backgroundRectF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>backgroundRectF<span class="token punctuation">,</span> mRadius<span class="token punctuation">,</span> mRadius<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>mForwardColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置二者重叠部分的绘制方式</span>
        paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PorterDuffXfermode</span><span class="token punctuation">(</span><span class="token class-name">PorterDuff<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">SRC_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RectF</span> progressRectF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mWidth <span class="token operator">*</span> mProgress<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>progressRectF<span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//restore to canvas</span>
        canvas<span class="token punctuation">.</span><span class="token function">restoreToCount</span><span class="token punctuation">(</span>save<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>paint.setXfermode()</code>可以设置的值参考下图：</p><figure><img src="http://jixiaoyong.github.io/images/20190408175100.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,36),r={href:"https://www.cnblogs.com/DarkMaster/p/4618872.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<h1 id="适配自定义view宽高-设置默认值" tabindex="-1"><a class="header-anchor" href="#适配自定义view宽高-设置默认值" aria-hidden="true">#</a> 适配自定义view宽高，设置默认值</h1><p>以其宽度为例，在<code>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</code>方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> widthMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> widthSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">EXACTLY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mWidth <span class="token operator">=</span> widthSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    mWidth <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token constant">AT_MOST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> widthSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1><p>《Android开发艺术探索》</p>`,5);function k(v,m){const e=i("ExternalLinkIcon");return t(),o("div",null,[u,n("p",null,[s("参考自"),n("a",r,[s("【原】使用Xfermode正确的绘制出遮罩效果 - sky0014 - 博客园 "),c(e)])]),d])}const h=p(l,[["render",k],["__file","e41787ec.html.vue"]]);export{h as default};
