import{_ as e,r as p,o,c,a as n,b as s,d as t,e as i}from"./app-bf457b07.js";const l={},u=i(`<blockquote><p>本文讨论的 Flutter 动画主要限定在：<em>随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态</em> 这一范围。</p></blockquote><p>根据之前的分析，关于 Flutter 中的 Widget 动画，大体可以分为三大类：</p><ul><li><p><strong>隐式动画</strong>，以 ImplicitlyAnimatedWidget 及其子类为代表。特点是当涉及到的属性变化后，这些 Widget 会 <em>自动渐变到新的属性</em>，使用者只能设置动画的 Duration、Tween、Curve 等，而无法主动终止、反向执行动画。</p><p>涉及到的类主要有 TweenAnimationBuilder 以及一系列以 AnimatedFoo 命名的类。</p></li><li><p><strong>显式动画</strong>，以 AnimatedWidget 及其子类为代表，需要配合 AnimationController 使用。特点是 <em>当 AnimationController 的值变化时，Widget 中对应的属性也会随之变化</em>。</p><p>涉及到的类主要有 AnimationBuilder/AnimatedWidget 以及一系列 FooTransition 命名的类。</p></li><li><p><strong>自定义动画</strong>，如果上述两种方式还无法满足需求，则可以使用 CustomPaint + CustomPainter + Listenable（比如 AnimationController）实现动画，特点是实现方式灵活，但同时也比上述两者难度高一些。</p></li></ul><p>Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图以供参考：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_select.png" alt="如何实现 Flutter 中的动画" tabindex="0" loading="lazy"><figcaption>如何实现 Flutter 中的动画</figcaption></figure><br><p>本文将着重分析<strong>使用 CustomPaint 实现自定义动画</strong>，涉及到的类以及他们的关系图如下：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/paint/flutter_paint_class_struct.png" alt="CustomPaint 自定义动画" tabindex="0" loading="lazy"><figcaption>CustomPaint 自定义动画</figcaption></figure><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p>先来看一个使用 CustomPaint 实现的动画（动画的内容是一个反复变大又缩小的蓝色小球）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 1. 创建 AnimationController 用来触发 CustomPaint 绘制</span>
late <span class="token keyword">final</span> <span class="token class-name">AnimationController</span> _controller <span class="token operator">=</span>
      <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>reverse<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 创建自定义的 CustomPainter 类</span>
<span class="token keyword">class</span> _SampleCustomPainter <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意这里给父类传入了 Listenable 类型的 repaint</span>
  <span class="token function">_SampleCustomPainter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>progress<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>repaint<span class="token punctuation">:</span> progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _paint <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> progress<span class="token punctuation">;</span>
  late <span class="token class-name">Paint</span> _paint<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里实现真正的绘制逻辑</span>
    <span class="token keyword">var</span> minSize <span class="token operator">=</span> size<span class="token punctuation">.</span>width <span class="token operator">&gt;</span> size<span class="token punctuation">.</span>height <span class="token operator">?</span> size<span class="token punctuation">.</span>height <span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token keyword">var</span> radius <span class="token operator">=</span> minSize <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0.2</span> <span class="token operator">+</span> <span class="token number">0.8</span> <span class="token operator">*</span> progress<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> _paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">CustomPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3. 使用 CustomPaint 和 CustomPainter 等实现动画</span>
<span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>
    painter<span class="token punctuation">:</span> <span class="token function">_SampleCustomPainter</span><span class="token punctuation">(</span>_controller<span class="token punctuation">)</span><span class="token punctuation">,</span>
    size<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是我们使用 CustomPaint 实现自定义动画的常见用法，接下来我们逐一分析上述涉及到的类的作用。</p><h3 id="custompaint" tabindex="-1"><a class="header-anchor" href="#custompaint" aria-hidden="true">#</a> CustomPaint</h3><blockquote><p>A widget that provides a canvas on which to draw during the paint phase.</p></blockquote><p>CustomPaint 继承自 SingleChildRenderObjectWidget，其内部持有 CustomPainter 并将其传入创建 RenderCustomPaint 以获取 Canvas 用于绘制内容。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CustomPaint</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>painter<span class="token punctuation">,</span><span class="token comment">// 绘制背景</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>foregroundPainter<span class="token punctuation">,</span><span class="token comment">// 绘制前景</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span><span class="token comment">// 优先取 child.Size，其为 null 才取这里的 size</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isComplex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">// 动画是否复杂到需要合成系统设置缓存</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>willChange <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">// 告诉光栅 raster 此 painting 是否会在下一帧变化</span>
    <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">,</span><span class="token comment">// 可选</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">RenderCustomPaint</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 CustomPaint 内部并没有太多逻辑，控制 CustomPainter 绘制的主要逻辑都在 RenderCustomPaint 中。</p><h3 id="rendercustompaint" tabindex="-1"><a class="header-anchor" href="#rendercustompaint" aria-hidden="true">#</a> RenderCustomPaint</h3><blockquote><p>Provides a canvas on which to draw during the paint phase.</p></blockquote><p>作为 RenderObject 的 RenderCustomPaint，负责实际计算 size、在 Flutter 框架 paint 阶段安排 painter、foregroundPainter 以及 child 的绘制。</p><p>以 CustomPaint 传入的 CustomPainter? painter 为例，在 RenderCustomPaint 的构造方法中它被赋值给_painter，随后当 attach 到 RenderObject Tree 时，对 CustomPainter 添加了监听：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RenderCustomPaint</span> <span class="token keyword">extends</span> <span class="token class-name">RenderProxyBox</span> <span class="token punctuation">{</span>

  <span class="token class-name">CustomPainter</span><span class="token operator">?</span> <span class="token keyword">get</span> painter <span class="token operator">=</span><span class="token operator">&gt;</span> _painter<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">PipelineOwner</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里对 CustomPainter 添加监听，只要值变化就 markNeedsPaint</span>
    _painter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _foregroundPainter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _painter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _foregroundPainter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码可以看出，RenderCustomPaint 对 CustomPainter 添加监听，只要值变化就执行 markNeedsPaint；</p><p>而如果是更新了 CustomPainter，则会执行 RenderCustomPainter.painter 方法，最终在_didUpdatePainter 方法中重写对新的 CustomPainter 添加监听以触发 markNeedsPaint：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">set</span> <span class="token function">painter</span><span class="token punctuation">(</span><span class="token class-name">CustomPainter</span><span class="token operator">?</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_painter <span class="token operator">==</span> value<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">CustomPainter</span><span class="token operator">?</span> oldPainter <span class="token operator">=</span> _painter<span class="token punctuation">;</span>
    _painter <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token function">_didUpdatePainter</span><span class="token punctuation">(</span>_painter<span class="token punctuation">,</span> oldPainter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_didUpdatePainter</span><span class="token punctuation">(</span><span class="token class-name">CustomPainter</span><span class="token operator">?</span> newPainter<span class="token punctuation">,</span> <span class="token class-name">CustomPainter</span><span class="token operator">?</span> oldPainter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Check if we need to repaint.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPainter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>oldPainter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// We should be called only for changes.</span>
      <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPainter <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
        newPainter<span class="token punctuation">.</span>runtimeType <span class="token operator">!=</span> oldPainter<span class="token punctuation">.</span>runtimeType <span class="token operator">||</span>
        newPainter<span class="token punctuation">.</span><span class="token function">shouldRepaint</span><span class="token punctuation">(</span>oldPainter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldPainter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
      newPainter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>markNeedsPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Check if we need to rebuild semantics.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPainter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>oldPainter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// We should be called only for changes.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span>
        <span class="token function">markNeedsSemanticsUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPainter <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
        newPainter<span class="token punctuation">.</span>runtimeType <span class="token operator">!=</span> oldPainter<span class="token punctuation">.</span>runtimeType <span class="token operator">||</span>
        newPainter<span class="token punctuation">.</span><span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span>oldPainter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">markNeedsSemanticsUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种方法最终都会直接触发 paint 阶段（跳过了 build 和 layout 阶段），最终由 Flutter Framework 调用 RenderCustomPainter.paint 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 先绘制背景</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_painter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_paintWithPainter</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>canvas<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> _painter<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_setRasterCacheHints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 再通过父类绘制 child</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 最后绘制前景</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_foregroundPainter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_paintWithPainter</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>canvas<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> _foregroundPainter<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_setRasterCacheHints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_paintWithPainter</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">,</span> <span class="token class-name">CustomPainter</span> painter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    late int debugPreviousCanvasSaveCount<span class="token punctuation">;</span>
    canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">!=</span> <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
      canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用 CustomPainter.paint 方法绘制内容</span>
    painter<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是 RenderCustomPaint 使用 CustomPainter 实现绘制的过程，大体分为 3 部分：</p><ul><li>在 attach 方法中监听从 CustomPaint 传入的 CustomPainter，一旦其有变化就执行 markNeedsPaint 方法，引导 Flutter 框架重新绘制内容。</li><li>如果中间通过 RenderCustomPainter.painter/foregroundPaint 更改 CustomPainter，则会重新监听以触发 markNeedsPaint。</li><li>当 Flutter 框架执行重绘时，会通过 RenderCustomPaint.paint 方法最终调用 CustomPainter.paint 方法绘制内容。</li></ul><p>除此之外，RenderCustomPainter 还通过 computeMinIntrinsicWidth/computeMaxIntrinsicHeight 等方法计算合适的 Size，以及使用 hitTestChildren/hitTestSelf 等处理点击事件等等。</p><h3 id="custompainter" tabindex="-1"><a class="header-anchor" href="#custompainter" aria-hidden="true">#</a> CustomPainter</h3><blockquote><p>The interface used by <em>CustomPaint</em> (in the widgets library) and <em>RenderCustomPaint</em> (in the rendering library).</p></blockquote><p>CustomPainter 提供 paint 方法让使用者使用 Canvas 绘制内容；继承自 Listenable，所以可以通过 addListener/removeListener 方法监听。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CustomPainter</span> <span class="token keyword">extends</span> <span class="token class-name">Listenable</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">CustomPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Listenable</span><span class="token operator">?</span> repaint <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> _repaint <span class="token operator">=</span> repaint<span class="token punctuation">;</span>

  <span class="token comment">// 可以看到，如果 repaint 不为 null，则会监听其变化</span>
  <span class="token keyword">final</span> <span class="token class-name">Listenable</span><span class="token operator">?</span> _repaint<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _repaint<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _repaint<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 点击事件以及语义等等，可以根据需要实现</span>
  bool<span class="token operator">?</span> <span class="token function">hitTest</span><span class="token punctuation">(</span><span class="token class-name">Offset</span> position<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token class-name">SemanticsBuilderCallback</span><span class="token operator">?</span> <span class="token keyword">get</span> semanticsBuilder <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  bool <span class="token function">shouldRebuildSemantics</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">CustomPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">shouldRepaint</span><span class="token punctuation">(</span>oldDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 子类必须实现的方法</span>
  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">CustomPainter</span> oldDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CustomPainter 有两种使用方式：</p><ul><li><p><strong>继承自 CustomPainter</strong>（推荐），可以传入 Listenable，这样 RenderCustomPaint 监听的便是这个 Listenable 对象。</p></li><li><p><strong>继承 Listenable 或其子类，并实现 CustomPainter 接口</strong>（<em>Dart 语言特性，会要求实现其所有方法属性</em>），这样监听的便是这个实现类对象本身。</p></li></ul><p>当通知 listener 时会通过 RenderCustomPaint 执行 markNeedsPaint，触发 Flutter Framework 重新安排绘制，最终执行 CustomPainter.paint 方法重新绘制内容。</p><p>无论哪种实现方式，都必须实现 shouldRepaint 和 paint 两个方法。</p><ul><li><p><code>bool shouldRepaint(covariant CustomPainter oldDelegate)</code> 每当新的 CustomPainter 提供给 RenderCustomPaint 时都会调用此方法，再判断是否调用 paint 方法。</p><p>如果前后 CustomPainter 的信息不同影响到绘制，则应该返回 true；否则返回 false 则可能导致 paint 方法被省略。</p><p>即使此方法返回 false，paint 也可能会被回调（Listenable 调用 listener 触发）；如果 size 变化等情况下会直接调用 paint 方法。</p></li><li><p><code>void paint(Canvas canvas, Size size)</code> 每当对象需要 paint 的时候都会调用。</p><p>传入的 Canvas 的坐标系以左上角为原点，范围无限大，但 box 的大小为 size，绘制的内容应当在 size 范围内，否则可能有性能问题，可以在最开始使用 Canvas.clipRect 限制绘制范围。</p></li></ul><h3 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas" aria-hidden="true">#</a> Canvas</h3><blockquote><p>An interface for recording graphical operations.</p></blockquote><p>当使用 PaintingContext.canvas 方法获取 Canvas 时，（如果 canvas 为 null）会创建 ui.PictureRecorder() 并以此创建 Canvas。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PaintingContext</span> <span class="token keyword">extends</span> <span class="token class-name">ClipContext</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Canvas</span> <span class="token keyword">get</span> canvas <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token function">_startRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>_currentLayer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _canvas<span class="token operator">!</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_startRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>_isRecording<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _currentLayer <span class="token operator">=</span> <span class="token class-name">PictureLayer</span><span class="token punctuation">(</span>estimatedBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _recorder <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>PictureRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _canvas <span class="token operator">=</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>_recorder<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _containerLayer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>_currentLayer<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PictureRecorder 使用 Canvas 记录图形操作的接口，在<code>PictureRecorder.endRecording</code>方法中使用其创建 Picture，后者被 SceneBuilder 用来在<code>SceneBuilder.build()</code>方法中创建 Scene。<br> 最终在<code>FlutterView.render</code>方法中，Scene 被 GPU 绘制在屏幕上。</p></blockquote><p>Canvas 有常用的方法：</p><ul><li><p><code>save()</code> 将当前的 transform 和 clip 等的复制保存在 save stack 上面，必须使用 <code>restore()</code>方法恢复</p></li><li><p><code>saveLayer()</code>，与 <code>save()</code>方法类似，但是执行以后，后续操作都是在一个新的 layer 上面进行，相当于一个独立的图层。</p><p>可以通过 Paint.colorFilter、Paint.blendMode 等属性配置其与之前图层的叠加方式。<br><strong>比较耗性能</strong>，好处是可以对后续操作绘制的内容统一处理（<em>比如，单独画两个圆，然后抗锯齿会分别执行两次，可能会出现毛刺，而使用 saveLayer 后这两个圆相当于一个整体，使用抗锯齿效果会很好</em>）。</p></li><li><p><code>restore()</code>，pop 掉当前的 save stack，save 和 saveLayer 方法与此方法一一对应。saveLayer 创建的 layer 会和之前的 layer 合并。</p></li><li><p><code>translate/scale/rotate</code> 对画布进行平移、缩放、旋转操作</p></li><li><p><code>clipRect/clipRRect/clipPath</code> 裁剪画布的绘制范围</p></li><li><p><code>drawColor/drawLine/drawRRect/drawRect...</code> 等等绘制各种形状</p><p>绘制文字应该使用 TextPainter，不推荐使用 drawParagraph</p></li><li><p><code>skew/transform</code> 倾斜/变换画布</p></li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>到这里我们差不过分析了刚开始的 demo 涉及到的类，总结一下他们各自的角色：</p><ul><li><p>AnimationController 对象（也即 Listenable 对象），用来监听 Flutter Framework 的帧刷新，根据设定的时长、曲线等通知 listener，以达到控制动画的效果。</p></li><li><p>CustomPaint，作为 SingleChildRenderObjectWidget，主要作用是将 CustomPainter、Widget child 等各类参数传递给 RenderCustomPaint。</p></li><li><p>RenderCustomPainter，作为 RenderProxyBox，优先以 Widget child 的大小为准，会监听传入的 CustomPainter 对象，并在其变化时触发 Flutter Framework 安排重新绘制（跳过 build 和 layout 阶段，直接进入 paint 阶段）；</p><p>当需要绘制时，会依次安排背景、child、前景的绘制。而这里的背景和前景都由传入的 CustomPainter 负责实际绘制。</p></li><li><p>CustomPainter，本身是 Listenable 的子类，可以被 RenderCustomPaint 监听，其 paint 方法实际负责绘制内容。</p><p>使用是可以继承此类（推荐），也可以当做接口实现所有方法。</p></li><li><p>Canvas，Paint 则是负责实际绘制。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到本文为止，我们分析了 Flutter 动画实现的各种方式及其原理：</p>`,51),r={href:"https://jixiaoyong.github.io/blog/posts/6ec43bd8.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://jixiaoyong.github.io/blog/posts/820d6240.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://jixiaoyong.github.io/blog/posts/47c43abe.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://jixiaoyong.github.io/blog/posts/62beedda.html",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),b={href:"https://api.flutter.dev/flutter/widgets/CustomPaint-class.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://api.flutter.dev/flutter/dart-ui/Canvas-class.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://stackoverflow.com/a/59650400/8389461",target:"_blank",rel:"noopener noreferrer"};function P(g,C){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("Flutter Widget 动画，是"),n("a",r,[s("AnimationController"),t(a)]),s("通过 Ticker 监听 Flutter 屏幕刷新，然后根据"),n("a",d,[s("Tween/Curve"),t(a)]),s("/Duration 等一系列参数计算出实时的值，Flutter 的 Widget 则根据这些值计算、修改对应属性从而实现动画效果。")]),n("p",null,[s("Flutter 内置的动画分为"),n("a",k,[s("隐式动画和显式动画"),t(a)]),s("两种，如果这些动画还无法满足需求，可以使用 CustomPaint 实现自定义动画（本文内容）。")]),n("blockquote",null,[n("p",null,[s("Flutter 中的"),n("a",m,[s("Hero 动画"),t(a)]),s("便是使用显式动画中的 AnimationBuilder、Tween 等实现的。")])]),v,n("p",null,[n("a",b,[s("CustomPaint api.flutter.dev"),t(a)])]),n("p",null,[n("a",f,[s("Canvas api.flutter.dev"),t(a)])]),n("p",null,[n("a",h,[s("What is Canvas.save and Canvas.restore? stackoverflow.com"),t(a)])])])}const y=e(l,[["render",P],["__file","adf541c0.html.vue"]]);export{y as default};
