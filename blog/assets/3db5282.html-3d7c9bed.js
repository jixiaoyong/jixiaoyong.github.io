import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-b04f94c7.js";const i={},u=p(`<p>Dart读取文件时，先在Dart代码创建File引用，通过与<code>IOService</code>跨<code>Isolate</code>通信（先通过IO Service而发送请求到native端，等到native执行完操作之后再回调结果）从而实现对文件的读写。</p><p>实现一个简单的读取文件的代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> filePath <span class="token operator">=</span>
      <span class="token string-literal"><span class="token string">r&quot;G:/21996.1.210529-1541.co_release_CLIENT_CONSUMER_x64FRE_en-us.iso&quot;</span></span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token function">printCurrentTimeMs</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;start run file.readAsBytes&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  file<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printCurrentTimeMs</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;file.readAsBytes() finish&quot;</span></span><span class="token punctuation">,</span>
        lastTimeMs<span class="token punctuation">:</span> startTime<span class="token punctuation">,</span>
        suffix<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\nfile.readAsBytes() result:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">value<span class="token punctuation">.</span>length</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printCurrentTimeMs</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;finish run file.readAsBytes&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

int <span class="token function">printCurrentTimeMs</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token operator">?</span> suffix<span class="token punctuation">,</span> int<span class="token operator">?</span> lastTimeMs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> currentTimeMs <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">;</span>
  <span class="token keyword">var</span> timeElapseString <span class="token operator">=</span>
      lastTimeMs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;, time elapse:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">currentTimeMs <span class="token operator">-</span> lastTimeMs</span><span class="token punctuation">}</span></span><span class="token string">ms &quot;</span></span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>
      &quot;$prefix current <span class="token function">time</span><span class="token punctuation">(</span>$currentTimeMs<span class="token punctuation">)</span>$timeElapseString$<span class="token punctuation">{</span>suffix <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">}</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> currentTimeMs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个过程如下：</p><figure><img src="https://jixiaoyong.github.io/images/202206041125613.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="过程分析" tabindex="-1"><a class="header-anchor" href="#过程分析" aria-hidden="true">#</a> 过程分析</h1><h2 id="dart端发起文件读写请求" tabindex="-1"><a class="header-anchor" href="#dart端发起文件读写请求" aria-hidden="true">#</a> Dart端发起文件读写请求</h2><p>其中<code>file.readAsBytes()</code> 是具体执行读取文件的地方，他的定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\io\\file_impl.dart</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们创建<code>File</code>时，实际上创建的是<code>_File</code> （<code>class _File extends FileSystemEntity implements File</code>）对象：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\io\\file_impl.dart</span>

<span class="token comment">// abstract class File implements FileSystemEntity</span>
<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">factory</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">IOOverrides</span><span class="token operator">?</span> overrides <span class="token operator">=</span> <span class="token class-name">IOOverrides</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>overrides <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">_File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> overrides<span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_File</code> 是<code>File</code> 的实现类，所以<code>file.readAsBytes()</code>实际调用的是<code>_File</code> 实现的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\io\\file_impl.dart</span>

<span class="token comment">// Read the file in blocks of size 64k.</span>
<span class="token keyword">const</span> int _blockSize <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> _File <span class="token keyword">extends</span> <span class="token class-name">FileSystemEntity</span> <span class="token keyword">implements</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span> <span class="token function">readDataChunked</span><span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 分段读取文件，每次只读取_blockSize大小的内容</span>
      <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BytesBuilder</span><span class="token punctuation">(</span>copy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> completer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 每次只异步读取一部分文本</span>
        file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>_blockSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            completer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">takeBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> completer<span class="token punctuation">.</span>completeError<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// May be character device, try to read it in chunks.</span>
          <span class="token keyword">return</span> <span class="token function">readDataChunked</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，无论是普通的文件格式，还是character device，最后都是调用了<code>_RandomAccessFile</code>的<code>open()</code>和<code>read(int bytes)</code>方法异步读取文件。</p>`,14),r=n("br",null,null,-1),k=n("br",null,null,-1),d={href:"https://www.cnblogs.com/qlee/archive/2011/07/27/2118406.html#:~:text=Character",target:"_blank",rel:"noopener noreferrer"},v=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; flutter\\bin\\cache\\pkg\\sky_engine\\lib\\io\\file_impl.dart</span>

<span class="token keyword">class</span> _RandomAccessFile <span class="token keyword">implements</span> <span class="token class-name">RandomAccessFile</span> <span class="token punctuation">{</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>

  bool _asyncDispatched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token comment">// 读取文件的信息</span>
  late _FileResourceInfo _resourceInfo<span class="token punctuation">;</span>
	<span class="token comment">// 对文件的操作引用</span>
  _RandomAccessFileOps _ops<span class="token punctuation">;</span>

  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">)</span>
  <span class="token function">_RandomAccessFile</span><span class="token punctuation">(</span>int pointer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> _ops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_RandomAccessFileOps</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _resourceInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_FileResourceInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_maybeConnectHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token comment">// 异步读取文件</span>
	<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span> <span class="token function">read</span><span class="token punctuation">(</span>int bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO(40614): Remove once non-nullability is sound.</span>
    <span class="token class-name">ArgumentError</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;bytes&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 异步读取文件，实际上是将发送指令到IO Service，然后等待返回结果</span>
    <span class="token keyword">return</span> <span class="token function">_dispatch</span><span class="token punctuation">(</span>_IOService<span class="token punctuation">.</span>fileRead<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> bytes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_isErrorResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">_exceptionFromResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;read failed&quot;</span></span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      _resourceInfo<span class="token punctuation">.</span><span class="token function">addRead</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 读取的文件内容</span>
      <span class="token class-name">Uint8List</span> result <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token comment">// 同步读取文件</span>
  <span class="token class-name">Uint8List</span> <span class="token function">readSync</span><span class="token punctuation">(</span>int bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO(40614): Remove once non-nullability is sound.</span>
    <span class="token class-name">ArgumentError</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;bytes&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_checkAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 同步读取文件是对文件直接操作</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> _ops<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">is</span> <span class="token class-name">OSError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;readSync failed&quot;</span></span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _resourceInfo<span class="token punctuation">.</span><span class="token function">addRead</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">&gt;</span></span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">FileMode</span> mode <span class="token operator">=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>read<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// FileMode  https://github.com/dart-lang/sdk/blob/main/sdk/lib/io/io_service.dart</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>read <span class="token operator">&amp;&amp;</span>
        mode <span class="token operator">!=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>write <span class="token operator">&amp;&amp;</span>
        mode <span class="token operator">!=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>append <span class="token operator">&amp;&amp;</span>
        mode <span class="token operator">!=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>writeOnly <span class="token operator">&amp;&amp;</span>
        mode <span class="token operator">!=</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>writeOnlyAppend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">ArgumentError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Invalid file mode for this operation&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">_dispatchWithNamespace</span><span class="token punctuation">(</span>
				<span class="token comment">// 请求操作为“打开文件”，参数为：null，文件路径，操作文件的mode</span>
        _IOService<span class="token punctuation">.</span>fileOpen<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> _rawPath<span class="token punctuation">,</span> mode<span class="token punctuation">.</span>_mode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_isErrorResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">_exceptionFromResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Cannot open file&quot;</span></span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
			<span class="token comment">// 从IO Service那里异步获得文件句柄response和path</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">_RandomAccessFile</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>_RandomAccessFile</code>中，除了同步读写文件是对返回的文件引用直接操作外，很多操作都能看到通过<code>_dispatch()</code>方法与<code>IO Service</code>通信，让我们看一下这个方法的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\io\\file_impl.dart</span>

<span class="token comment">// _RandomAccessFile</span>
<span class="token class-name">Future</span> <span class="token function">_dispatch</span><span class="token punctuation">(</span>int request<span class="token punctuation">,</span> <span class="token class-name">List</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span>bool markClosed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;File closed&quot;</span></span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_asyncDispatched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;An async operation is currently pending&quot;</span></span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>markClosed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Set closed to true to ensure that no more async requests can be issued</span>
      <span class="token comment">// for this file.</span>
      closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _asyncDispatched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 主要代码在这里，通过_IOService的_dispatch发送指令</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span>_IOService<span class="token punctuation">.</span>_dispatch<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _asyncDispatched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token comment">// open create之类的操作会调用这个方法，不过最后也是调用_IOService._dispatch(request, data)通信</span>
<span class="token keyword">static</span> <span class="token class-name">Future</span> <span class="token function">_dispatchWithNamespace</span><span class="token punctuation">(</span>int request<span class="token punctuation">,</span> <span class="token class-name">List</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_namespacePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 与IO Service进行异步通信，request标记请求操作的类型，data则是数据</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span>_IOService<span class="token punctuation">.</span>_dispatch<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m={href:"https://github.com/dart-lang/sdk/blob/main/sdk/lib/io/io_service.dart",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"external",-1),_=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">Future</span> <span class="token function">_dispatch</span><span class="token punctuation">(</span>int request<span class="token punctuation">,</span> <span class="token class-name">List</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),g=n("code",null,"external",-1),h=n("br",null,null,-1),f={href:"https://github.com/dart-lang/sdk/issues/4300",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>根据<code>external</code>的定义，<code>_dispatch</code>方法在不同的机器上面实现不同。我们只看和app相关的实现（在<code>sdk\\lib\\_internal\\vm</code>目录下，vm同级目录还有js等实现），具体的实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\bin\\io_service_patch.dart</span>

<span class="token comment">// _IOService</span>
<span class="token keyword">class</span> _IOService <span class="token punctuation">{</span>
	<span class="token comment">// 用于向IO Service发送消息</span>
  <span class="token keyword">static</span> _IOServicePorts _servicePorts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_IOServicePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// We use a static variable here to hold onto the last result of</span>
  <span class="token comment">// calling the IO Service frome the native.</span>
  <span class="token keyword">static</span> <span class="token class-name">RawReceivePort</span><span class="token operator">?</span> _receivePort<span class="token punctuation">;</span>
  <span class="token comment">// the other side(other isolate) will send message back with the _replyToPort</span>
  <span class="token keyword">static</span> late <span class="token class-name">SendPort</span> _replyToPort<span class="token punctuation">;</span>
  <span class="token comment">// a map holding the registered callbacks for each received message.</span>
  <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">Completer</span><span class="token punctuation">&gt;</span></span> _messageMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">Completer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> int _id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">/// [request] IO操作的类型，具体值在[sdk/lib/io/io_service.dart]中的_IOService类中定义</span>
  <span class="token comment">///           主要有对文件、目录、网络进行操作的请求</span>
  <span class="token comment">/// [data]    对应的数据，如果是文件，则是文件路径，如果是目录，则是目录路径等等</span>
  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span> <span class="token function">_dispatch</span><span class="token punctuation">(</span>int request<span class="token punctuation">,</span> <span class="token class-name">List</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    int id<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token comment">// create a special id to identify the request.</span>
      id <span class="token operator">=</span> <span class="token function">_getNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 通过_servicePorts获取一个新的SendPort以便向IOService发送消息，</span>
		<span class="token comment">// 这个SendPort是IO Service返回给dart用来向他发消息的</span>
    <span class="token keyword">final</span> <span class="token class-name">SendPort</span> servicePort <span class="token operator">=</span> _servicePorts<span class="token punctuation">.</span><span class="token function">_getPort</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_ensureInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Completer</span> completer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Completer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _messageMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> completer<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 向IOService发送消息，当request执行完毕之后，</span>
			<span class="token comment">// 会调用_replyToPort触发在root zone的回调_receivePort!.handler</span>
      <span class="token operator">*</span><span class="token operator">*</span>servicePort<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>id<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>_replyToPort<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _messageMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_ensureInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_receivePort <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _receivePort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawReceivePort</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;IO Service&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 其他地方可以使用_replyToPort来发消息触发_receivePort 执行handler方法</span>
      _replyToPort <span class="token operator">=</span> _receivePort<span class="token operator">!</span><span class="token punctuation">.</span>sendPort<span class="token punctuation">;</span>
      _receivePort<span class="token operator">!</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里处理IOService执行完方法返回的数据</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>data <span class="token operator">is</span> <span class="token class-name">List</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// data[0]就是我们在_dispatch方法中获取的id，</span>
        <span class="token comment">// 将处理结果data[1]通过Completer.complete返回</span>
        _messageMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 释放这个触发这个回调的SendPort</span>
        _servicePorts<span class="token punctuation">.</span><span class="token function">_returnPort</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，最后是通过<code>RawReceivePort</code>/<code>SendPort</code>进行<strong>跨Isolate通信</strong>。</p><p><code>_IOService</code>使用<code>_servicePorts</code>对native层发送消息触发IO操作，然后使用<code>_receivePort</code>监听，当IO操作完成时会通过<code>_replyToPort</code> 回调结果，会在 <code>_receivePort!.handler</code>方法中根据当时请求的<code>id</code>找到<code>Completer</code>将结果传递回去。</p><p>这样当时我们在 <code>file.readAsBytes()</code>时获取到的<code>Future</code>便会收到回调，从而完成文件操作的流程。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  file<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printCurrentTimeMs</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;file.readAsBytes() finish&quot;</span></span><span class="token punctuation">,</span>
        lastTimeMs<span class="token punctuation">:</span> startTime<span class="token punctuation">,</span>
        suffix<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\nfile.readAsBytes() result:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">value<span class="token punctuation">.</span>length</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是到目前为止涉及到的类关系示意图：</p><figure><img src="https://jixiaoyong.github.io/images//202206041127617.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="io-service中转" tabindex="-1"><a class="header-anchor" href="#io-service中转" aria-hidden="true">#</a> IO Service中转</h2><p>那么，这个IO Service是做什么的，他又是如何实现与dart中的调用方双向通信，以及执行调用方需要的功能呢？</p><p>位于<code>sdk\\lib\\_internal\\vm\\bin\\io_service_patch.dart</code>的_IOService是一个中转站，<strong>向上承接</strong>来自Dart代码的IO请求指令（先行返回Future），<strong>向下将这些指令转发</strong>至Native层的IO Service，并<strong>监听回调</strong>，当native层处理完这些IO指令之后，将结果通过Future返回给Dart调用方。</p><p>让我们再看一下他的具体实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\bin\\io_service_patch.dart</span>

<span class="token comment">// _IOService</span>
<span class="token keyword">class</span> _IOService <span class="token punctuation">{</span>
	<span class="token comment">// 用于向IO Service发送消息</span>
  <span class="token keyword">static</span> _IOServicePorts _servicePorts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_IOServicePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// We use a static variable here to hold onto the last result of</span>
  <span class="token comment">// calling the IO Service frome the native.</span>
  <span class="token keyword">static</span> <span class="token class-name">RawReceivePort</span><span class="token operator">?</span> _receivePort<span class="token punctuation">;</span>
  <span class="token comment">// the other side(other isolate) will send message back with the _replyToPort</span>
  <span class="token keyword">static</span> late <span class="token class-name">SendPort</span> _replyToPort<span class="token punctuation">;</span>
  <span class="token comment">// a map holding the registered callbacks for each received message.</span>
  <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">Completer</span><span class="token punctuation">&gt;</span></span> _messageMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">Completer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> int _id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">/// [request] IO操作的类型，具体值在[sdk/lib/io/io_service.dart]中的_IOService类中定义</span>
  <span class="token comment">///           主要有对文件、目录、网络进行操作的请求</span>
  <span class="token comment">/// [data]    对应的数据，如果是文件，则是文件路径，如果是目录，则是目录路径等等</span>
  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span> <span class="token function">_dispatch</span><span class="token punctuation">(</span>int request<span class="token punctuation">,</span> <span class="token class-name">List</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    int id<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token comment">// create a special id to identify the request.</span>
      id <span class="token operator">=</span> <span class="token function">_getNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 通过_servicePorts获取一个新的SendPort以便向IOService发送消息，</span>
		<span class="token comment">// 这个SendPort是IO Service返回给dart用来向他发消息的</span>
    <span class="token keyword">final</span> <span class="token class-name">SendPort</span> <span class="token operator">*</span><span class="token operator">*</span>servicePort<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">=</span> _servicePorts<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">_getPort</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token function">_ensureInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Completer</span> completer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Completer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _messageMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> completer<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 向IOService发送消息，当request执行完毕之后，</span>
			<span class="token comment">// 会调用_replyToPort触发在root zone的回调_receivePort!.handler</span>
      <span class="token operator">*</span><span class="token operator">*</span>servicePort<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>id<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>_replyToPort<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _messageMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_ensureInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_receivePort <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _receivePort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawReceivePort</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;IO Service&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 其他地方可以使用_replyToPort来发消息触发_receivePort 执行handler方法</span>
      _replyToPort <span class="token operator">=</span> _receivePort<span class="token operator">!</span><span class="token punctuation">.</span>sendPort<span class="token punctuation">;</span>
      _receivePort<span class="token operator">!</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里处理IOService执行完方法返回的数据</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>data <span class="token operator">is</span> <span class="token class-name">List</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// data[0]就是我们在_dispatch方法中获取的id，</span>
        <span class="token comment">// 将处理结果data[1]通过Completer.complete返回</span>
        _messageMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 释放这个触发这个回调的SendPort</span>
        _servicePorts<span class="token punctuation">.</span><span class="token function">_returnPort</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_messageMap<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到：</p><ul><li><code>_IOService</code>持有<code>_IOServicePorts _servicePorts</code>以便获取<code>SendPort servicePort</code>和native层通信，</li><li>在之前的代码分析中，我们已经知道<code>_IOService</code>还在<code>_ensureInitialize()</code>中监听着<code>RawReceivePort? _receivePort</code>的回调，</li><li>这样当<code>_IOService</code>在<code>_dispatch()</code>方法中将<code>_replyToPort</code>（<code>_receivePort</code>的SendPort）传递给<code>servicePort</code>后，一旦native通过<code>_replyToPort</code>发送处理结果，<code>_IOService</code>立马可以收到并通过<code>Completer.complete</code>返回给<strong>Dart中的调用方</strong>。</li></ul><aside> 💡 注意这里的\`SendPort **servicePort\`** ，他是从native层的\`_IOService\` 获取到的： 1. 在native层通过\`PortMap::CreatePort(MessageHandler* handler)\`创建好此\`Dart_Port port\` 2. \`MessageHandler\` 在创建\`Dart_Port port\`的时候就与之关联 3. 在Dart层的\`_IOService\` 这里监听 这样，当native层的\`MessageHandler\`执行指令之后，会将\`Dart_Port port\`传递给\`IOServiceCallback\`，后者将他和自身执行结果一并打包为native层的Message压入\`MessageHandler\`的\`消息queue\`中，然后由消息分发系统按照发送到Dart这里，按照\`SendPort **servicePort\`** 找到要执行的代码。 </aside><p>上述这些步骤能够实施的关键，在于<strong>Dart</strong>层的<code>_IOService</code>如何与<strong>native</strong>层的<code>_IOService</code>关联起来呢？</p><p>让我们来分析一下<code>SendPort servicePort</code>的获取过程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\bin\\io_service_patch.dart</span>

<span class="token keyword">class</span> _IOService <span class="token punctuation">{</span>
	<span class="token comment">// 用于向IO Service发送消息</span>
	<span class="token keyword">static</span> _IOServicePorts _servicePorts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_IOServicePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _IOServicePorts <span class="token punctuation">{</span>
  <span class="token comment">// We limit the number of IO Service ports per isolate so that we don&#39;t</span>
  <span class="token comment">// spawn too many threads all at once, which can crash the VM on Windows.</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> int maxPorts <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span> _ports <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span> _freePorts <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span> _usedPorts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">_IOServicePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SendPort</span> <span class="token function">_getPort</span><span class="token punctuation">(</span>int forRequestId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_freePorts<span class="token punctuation">.</span>isEmpty <span class="token operator">&amp;&amp;</span> _usedPorts<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> maxPorts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果没有可用的SendPort,就新建SendPort用于远程服务通信</span>
      <span class="token keyword">final</span> <span class="token class-name">SendPort</span> port <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">_newServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>
      _ports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
      _freePorts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_freePorts<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 有空闲SendPort，使用</span>
      <span class="token keyword">final</span> <span class="token class-name">SendPort</span> port <span class="token operator">=</span> _freePorts<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>_usedPorts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>forRequestId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _usedPorts<span class="token punctuation">[</span>forRequestId<span class="token punctuation">]</span> <span class="token operator">=</span> port<span class="token punctuation">;</span>
      <span class="token keyword">return</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// We have already allocated the max number of ports. Re-use an</span>
    <span class="token comment">// existing one.</span>
    <span class="token keyword">final</span> <span class="token class-name">SendPort</span> port <span class="token operator">=</span> _ports<span class="token punctuation">[</span>forRequestId <span class="token operator">%</span> maxPorts<span class="token punctuation">]</span><span class="token punctuation">;</span>
    _usedPorts<span class="token punctuation">[</span>forRequestId<span class="token punctuation">]</span> <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token keyword">return</span> port<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 释放掉占用的port</span>
  <span class="token keyword">void</span> <span class="token function">_returnPort</span><span class="token punctuation">(</span>int forRequestId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SendPort</span> port <span class="token operator">=</span> _usedPorts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>forRequestId<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_usedPorts<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _freePorts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;IOService_NewServicePort&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">SendPort</span> <span class="token function">_newServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里最后的关键方法是<code>SendPort _newServicePort()</code>，这是一个<code>external</code>方法，在native实现。</p><h2 id="native处理dart的指令" tabindex="-1"><a class="header-anchor" href="#native处理dart的指令" aria-hidden="true">#</a> Native处理Dart的指令</h2><h3 id="ioservice-newserviceport" tabindex="-1"><a class="header-anchor" href="#ioservice-newserviceport" aria-hidden="true">#</a> IOService_NewServicePort</h3><p><code>SendPort</code>是由<code>_newServicePort()</code>方法创建的，这是一个<code>external</code>方法，他的native层实现名称是<code>IOService_NewServicePort</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\bin\\io_service.cc</span>

<span class="token keyword">void</span> <span class="token function">FUNCTION_NAME</span><span class="token punctuation">(</span><span class="token class-name">IOService_NewServicePort</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Dart_NativeArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dart_SetReturnValue</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token class-name">Dart_Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 创建一个新的native port</span>
  <span class="token class-name">Dart_Port</span> service_port <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">IOService</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>service_port <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 【注意】这里根据service_port创建了Dart里面的SendPort对象</span>
    <span class="token comment">// Return a send port for the service port.</span>
    <span class="token class-name">Dart_Handle</span> send_port <span class="token operator">=</span> <span class="token class-name">Dart_NewSendPort</span><span class="token punctuation">(</span>service_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 将当前IOService对应的send_port返回给调用方</span>
    <span class="token class-name">Dart_SetReturnValue</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> send_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Dart_Port</span> <span class="token class-name">IOService</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意这里的参数</span>
  <span class="token comment">// 分别是 native port的名称，收到native port以后得回调方法，是否同时处理</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Dart_NewNativePort</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;IOService&quot;</span></span><span class="token punctuation">,</span> <span class="token class-name">IOServiceCallback</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\include\\dart_api.h</span>

<span class="token comment">/**
 * Returns a new SendPort with the provided port id.
 *
 * \\param port_id The destination port.
 *
 * \\return A new SendPort if no errors occurs. Otherwise returns
 *   an error handle.
 */</span>
DART_EXPORT <span class="token class-name">Dart_Handle</span> <span class="token class-name">Dart_NewSendPort</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> port_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在Dart层的<code>_IOService</code>的<code>SendPort _newServicePort()</code> 方法最后再这里调用了<code>IOService_NewServicePort</code>。</p><p>这里主要有3个步骤：</p><ol><li>使用<code>Dart_NewNativePort(&quot;IOService&quot;, IOServiceCallback, true);</code>创建<code>Dart_Port</code></li><li>使用<code>Dart_NewSendPort</code>将<code>Dart_Port</code>转化为<code>Dart_Handle</code>（也就是Dart中的<code>SendPort</code>）</li><li>返回上面创建好的<code>Dart_Handle</code>，Dart代码拿到返回的Dart_Handle也就是<code>SendPort servicePort</code>之后，就可以和native层的IO Service同通信。</li></ol><p>接下来我们看一下前2步分别是怎么实现的：</p><h3 id="dart-newnativeport" tabindex="-1"><a class="header-anchor" href="#dart-newnativeport" aria-hidden="true">#</a> Dart_NewNativePort</h3><p>再看一下<code>Dart_NewNativePort</code>的调用参数：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">Dart_NewNativePort</span><span class="token punctuation">(</span><span class="token string">&quot;IOService&quot;</span><span class="token punctuation">,</span> IOServiceCallback<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -&gt; runtime\\include\\dart_native_api.h</span>

<span class="token comment">//  Creates a new native port.  When messages are received on this</span>
<span class="token comment">//  native port, then they will be dispatched to the provided native</span>
<span class="token comment">//  message handler.</span>
<span class="token constant">DART_EXPORT</span> Dart_Port <span class="token function">Dart_NewNativePort</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">,</span>
                                         Dart_NativeMessageHandler handler<span class="token punctuation">,</span>
                                         bool handle_concurrently<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>IOServiceCallback</strong></p><p><code>Dart_NewNativePort</code>总共有3个参数，<code>Dart_NativeMessageHandler handler</code>是当这个<code>Dart_Port</code>收到消息的时候，会被回调的方法，也就是我们通过Dart端的<code>_IOService.dispatch</code>方法的**<code>servicePort**.send(&lt;dynamic&gt;[id, **_replyToPort**, request, data]);</code>语句执行向native发送IO指令时，在native这里真正负责执行的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\bin\\io_service.cc</span>

<span class="token keyword">void</span> <span class="token class-name">IOServiceCallback</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> dest_port_id<span class="token punctuation">,</span> <span class="token class-name">Dart_CObject</span><span class="token operator">*</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dart_Port</span> reply_port_id <span class="token operator">=</span> ILLEGAL_PORT<span class="token punctuation">;</span>
  <span class="token class-name">CObject</span><span class="token operator">*</span> response <span class="token operator">=</span> <span class="token class-name">CObject</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">IllegalArgumentError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">CObjectArray</span> <span class="token function">request</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 这里的参数顺序，与Dart层的_IOService(sdk\\lib\\_internal\\vm\\bin\\io_service_patch.dart)的_dispatch()中的</span>
	<span class="token comment">// **servicePort**.send(&lt;dynamic&gt;[id, **_replyToPort**, request, data]);</span>
	<span class="token comment">// 代码中的参数顺序一致</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token operator">-</span><span class="token operator">&gt;</span>type <span class="token operator">==</span> <span class="token class-name">Dart_CObject_kArray</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">request<span class="token punctuation">.</span></span>Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      request<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsSendPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      request<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CObjectInt32</span> <span class="token function">message_id</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CObjectSendPort</span> <span class="token operator">*</span><span class="token operator">*</span>reply_port<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CObjectInt32</span> <span class="token function">request_id</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CObjectArray</span> <span class="token function">data</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span>reply_port_id<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>reply_port<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里解析完收到的参数后，回去执行对应的文件操作</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">request_id<span class="token punctuation">.</span></span>Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token operator">*</span><span class="token function">IO_SERVICE_REQUEST_LIST</span><span class="token punctuation">(</span>CASE_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token function">UNREACHABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">CObjectArray</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token class-name">CObject</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">NewArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> request<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// response在上面的IO_SERVICE_REQUEST_LIST执行完毕后就会被赋值</span>
  <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>response<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>reply_port_id <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Dart_PostCObject</span><span class="token punctuation">(</span>reply_port_id<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>AsApiCObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token punctuation">}</span>

#define <span class="token operator">*</span><span class="token operator">*</span>CASE_REQUEST<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> method<span class="token punctuation">,</span> id<span class="token punctuation">)</span>                                         \\
  <span class="token keyword">case</span> <span class="token class-name">IOService</span><span class="token punctuation">:</span><span class="token punctuation">:</span>k##type##method##<span class="token class-name">Request</span><span class="token punctuation">:</span>                                    \\
    response <span class="token operator">=</span> type<span class="token punctuation">:</span><span class="token punctuation">:</span>method##<span class="token class-name">Request</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    \\
    <span class="token keyword">break</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IOService具体的执行是在<code>IO_SERVICE_REQUEST_LIST</code>根据解析到的参数执行对应的方法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\bin\\io_service.h</span>

<span class="token comment">// This list must be kept in sync with the list in sdk/lib/io/io_service.dart</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">IO_SERVICE_REQUEST_LIST</span><span class="token expression"><span class="token punctuation">(</span>V<span class="token punctuation">)</span>                                             </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Exists<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Create<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Delete<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Rename<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Copy<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                                                             </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Open<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>                                                             </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> ResolveSymbolicLinks<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>                                             </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Close<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>                                                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Position<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>                                                         </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> SetPosition<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Truncate<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                                                        </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Length<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>                                                          </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> LengthFromPath<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>                                                  </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> LastAccessed<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>                                                    </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> SetLastAccessed<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>                                                 </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> LastModified<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>                                                    </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> SetLastModified<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>                                                 </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Flush<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> ReadByte<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>                                                        </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> WriteByte<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>                                                       </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Read<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                                                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> ReadInto<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>                                                        </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> WriteFrom<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>                                                       </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> CreateLink<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> DeleteLink<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> RenameLink<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> LinkTarget<span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span>                                                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Identical<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>                                                       </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Stat<span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>                                                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>File<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>                                                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Socket<span class="token punctuation">,</span> Lookup<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>                                                        </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Socket<span class="token punctuation">,</span> ListInterfaces<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>                                                </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Socket<span class="token punctuation">,</span> ReverseLookup<span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span>                                                 </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> Create<span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span>                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> Delete<span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span>                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> Exists<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span>                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> CreateTemp<span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>                                                 </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> ListStart<span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span>                                                  </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> ListNext<span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">)</span>                                                   </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> ListStop<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>                                                   </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>Directory<span class="token punctuation">,</span> Rename<span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span>                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">V</span><span class="token punctuation">(</span>SSLFilter<span class="token punctuation">,</span> ProcessFilter<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述代码，可以得知，IOService主要处理的方法有四类：</p><ul><li><code>File</code></li><li><code>Directory</code></li><li><code>Socket</code></li><li><code>SSLFilter</code></li></ul><p>在<code>IOServiceCallback</code>方法中，我们注意到，程序最后执行的结果是通过<code>Dart_PostCObject</code>返回的，来看一下他是怎么实现的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\native_api_impl.cc</span>

<span class="token keyword">static</span> bool <span class="token class-name">PostCObjectHelper</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> port_id<span class="token punctuation">,</span> <span class="token class-name">Dart_CObject</span><span class="token operator">*</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">AllocOnlyStackZone</span> zone<span class="token punctuation">;</span>
  std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> msg <span class="token operator">=</span> <span class="token class-name">WriteApiMessage</span><span class="token punctuation">(</span>
      <span class="token class-name"><span class="token namespace">zone<span class="token punctuation">.</span></span>GetZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> port_id<span class="token punctuation">,</span> <span class="token class-name">Message</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kNormalPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Post the message at the given port.</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PostMessage</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token punctuation">}</span>

DART_EXPORT bool <span class="token class-name">Dart_PostCObject</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> port_id<span class="token punctuation">,</span> <span class="token class-name">Dart_CObject</span><span class="token operator">*</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">PostCObjectHelper</span><span class="token punctuation">(</span>port_id<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\port.cc</span>

bool <span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PostMessage</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span>
                          bool before_events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">MutexLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ports_ <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  auto it <span class="token operator">=</span> ports_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">TryLookup</span><span class="token punctuation">(</span>message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">dest_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> ports_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Ownership of external data remains with the poster.</span>
    message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">DropFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">MessageHandler</span><span class="token operator">*</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>handler<span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>handler <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span>handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">PostMessage</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> before_events<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\message_handler.cc</span>

<span class="token keyword">void</span> <span class="token class-name">MessageHandler</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PostMessage</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span>
                                 bool before_events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Message</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Priority</span> saved_priority<span class="token punctuation">;</span>

  <span class="token punctuation">{</span>
    <span class="token class-name">MonitorLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_trace_isolates</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Isolate</span><span class="token operator">*</span> source_isolate <span class="token operator">=</span> <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>source_isolate <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        OS<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrintErr</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&quot;[&gt;] Posting message:\\n&quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;\\tlen:        %&quot;</span></span> <span class="token class-name">Pd</span> <span class="token string-literal"><span class="token string">&quot;\\n\\tsource:     (%&quot;</span></span> <span class="token class-name">Pd64</span>
            <span class="token string-literal"><span class="token string">&quot;) %s\\n\\tdest:       %s\\n&quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;\\tdest_port:  %&quot;</span></span> <span class="token class-name">Pd64</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">,</span>
            message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> static_cast<span class="token generics"><span class="token punctuation">&lt;</span>int64_t<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source_isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">main_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            source_isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">dest_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        OS<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrintErr</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&quot;[&gt;] Posting message:\\n&quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;\\tlen:        %&quot;</span></span> <span class="token class-name">Pd</span>
            <span class="token string-literal"><span class="token string">&quot;\\n\\tsource:     &lt;native code&gt;\\n&quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;\\tdest:       %s\\n&quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;\\tdest_port:  %&quot;</span></span> <span class="token class-name">Pd64</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">,</span>
            message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">dest_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    saved_priority <span class="token operator">=</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// **将Message加入到MessageQueue中**</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsOOB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oob_queue_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Enqueue</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> before_events<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      queue_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Enqueue</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> before_events<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>paused_for_messages_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name"><span class="token namespace">ml<span class="token punctuation">.</span></span>Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pool_ <span class="token operator">!=</span> nullptr <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>task_running_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>delete_me_<span class="token punctuation">)</span><span class="token punctuation">;</span>
      task_running_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> bool launched_successfully <span class="token operator">=</span> pool_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Run</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageHandlerTask</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ASSERT</span><span class="token punctuation">(</span>launched_successfully<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Invoke any custom message notification.</span>
  <span class="token class-name">MessageNotify</span><span class="token punctuation">(</span>saved_priority<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码最后将结果包装成了Message打包进<code>MessageHandler</code>的<strong>消息队列</strong>中，这样便可以在Dart端通过消息分发接收到结果。</p><p><strong>Dart_NewNativePort</strong></p><p>再来看一下<code>Dart_NewNativePort</code>的实现如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\vm\\native_api_impl.cc</span>

DART_EXPORT Dart_Port <span class="token function">Dart_NewNativePort</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span>
                                         Dart_NativeMessageHandler handler<span class="token punctuation">,</span>
                                         <span class="token keyword">bool</span> handle_concurrently<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">&quot;&lt;UnnamedNativePort&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">PrintErr</span><span class="token punctuation">(</span><span class="token string">&quot;%s expects argument &#39;handler&#39; to be non-null.\\n&quot;</span><span class="token punctuation">,</span>
                 CURRENT_FUNC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ILLEGAL_PORT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 此方法位于sdk/runtime/vm/dart.cc</span>
  <span class="token comment">// Used to Indicate that a Dart API call is active.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Dart</span><span class="token double-colon punctuation">::</span><span class="token function">SetActiveApiCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ILLEGAL_PORT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 【注意，这里切换了isolate，退出当前isolate,直到Dart_NewNativePort执行完毕再切换回当前isolate】</span>
  <span class="token comment">// Start the native port without a current isolate.</span>
  <span class="token comment">//  这里的实现可以参考https://github.com/dart-lang/sdk/blob/d437877c500c77d6e08372ba2dbda9c598f5bd8e/runtime/vm/dart_api_impl.cc</span>
<span class="token operator">*</span><span class="token operator">*</span>IsolateLeaveScope <span class="token function">saver</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token comment">// 执行完IsolateLeaveScope 后，会切换出当前isolate直到下面的 return port_id;执行完毕，但是在此期间，下面的代码依旧是在当前isolate所在的IOThread也即系统线程下进行的</span>

  NativeMessageHandler<span class="token operator">*</span> nmh <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token function">NativeMessageHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
	<span class="token comment">// 创建一个Dart_Port并且添加到PortMap中</span>
  Dart_Port port_id <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">PortMap</span><span class="token double-colon punctuation">::</span><span class="token function">CreatePort</span><span class="token punctuation">(</span>nmh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>port_id <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 激活这个端口</span>
    <span class="token class-name">PortMap</span><span class="token double-colon punctuation">::</span><span class="token function">SetPortState</span><span class="token punctuation">(</span>port_id<span class="token punctuation">,</span> PortMap<span class="token double-colon punctuation">::</span>kLivePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 在Dart线程池中执行，在这里Run()中的代码会在一个新的线程中执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">*</span>nmh<span class="token operator">-&gt;</span>Run<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Dart</span><span class="token double-colon punctuation">::</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行完毕之后，在之前调用本方法的环境，回调handler，关闭Dart_Port</span>
      <span class="token class-name">PortMap</span><span class="token double-colon punctuation">::</span><span class="token function">ClosePort</span><span class="token punctuation">(</span>port_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      port_id <span class="token operator">=</span> ILLEGAL_PORT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Dart</span><span class="token double-colon punctuation">::</span><span class="token function">ResetActiveApiCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> port_id<span class="token punctuation">;</span>
  <span class="token comment">// 上面IsolateLeaveScope saver对象在构造方法中退出了调用方法的分支，执行到这里后saver对象被回收，执行析构函数，又将Isolate切换回来</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要的流程有：</p><ol><li>切换退出当前isolate</li><li>创建<code>NativeMessageHandler nmh</code>包裹要处理的回调</li><li>根据上面创建的<code>nmh</code>创建<code>Dart_Port port_id</code></li><li>执行**<code>nmh-&gt;Run()</code>**方法将<code>nmh</code>放到线程池中运行</li><li>当<code>nmh</code>执行完毕回调后，关闭<code>Dart_Port port_id</code></li></ol><p>也就是说，在Dart中向Native发送指令时，通过Dart的<code>_IOService._dispatch()</code>方法中执行<code>_servicePorts._getPort(id);</code>向Native层的IOService获取用于通信的<code>SendPort servicePort</code>时，会先通过Dart_NewNativePort创建一个<strong>NativeMessageHandler</strong>（会压入消息栈中），然后创建一个对应的<code>Dart_Port port_id</code>并返回给Dart用来触发消息。</p><p>让我们挨个分析一下：</p><p>1.退出当前isolate</p>`,49),y={href:"https://www.notion.so/IsolateLeaveScope-d62547a99c6d464bbd1bbf5baa45de18",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>2.创建<code>NativeMessageHandler nmh</code>包裹要处理的回调</p><p>3.根据上面创建的<code>nmh</code>创建<code>Dart_Port port_id</code></p><p>看一下<code>PortMap::CreatePort</code>的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\port.cc</span>

<span class="token class-name">Dart_Port</span> <span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreatePort</span><span class="token punctuation">(</span><span class="token class-name">MessageHandler</span><span class="token operator">*</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>handler <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">MutexLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ports_ <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ILLEGAL_PORT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>
  handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">CheckAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif

	<span class="token comment">// 不停的遍历，直到找到一个可用的port（类型为int64_t）</span>
  <span class="token keyword">const</span> <span class="token class-name">Dart_Port</span> port <span class="token operator">=</span> <span class="token class-name">AllocatePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 获取到的port 只能通过isolate_entry访问</span>
  <span class="token comment">// The MessageHandler::ports_ is only accessed by [PortMap], it is guarded</span>
  <span class="token comment">// by the [PortMap::mutex_] we already hold.</span>
  <span class="token class-name">MessageHandler</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PortSetEntry</span> isolate_entry<span class="token punctuation">;</span>
  isolate_entry<span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
  handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">ports_<span class="token punctuation">.</span></span>Insert</span><span class="token punctuation">(</span>isolate_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Entry</span> entry<span class="token punctuation">;</span>
  entry<span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
  entry<span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
  entry<span class="token punctuation">.</span>state <span class="token operator">=</span> kNewPort<span class="token punctuation">;</span>
  ports_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Insert</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_trace_isolates</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    OS<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrintErr</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;[+] Opening port: \\n&quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;\\thandler:    %s\\n&quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;\\tport:       %&quot;</span></span> <span class="token class-name">Pd64</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">,</span>
        handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> entry<span class="token punctuation">.</span>port<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Dart_Port</span> <span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">AllocatePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dart_Port</span> result<span class="token punctuation">;</span>

  <span class="token function">ASSERT</span><span class="token punctuation">(</span>mutex_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsOwnedByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Keep getting new values while we have an illegal port number or the port</span>
  <span class="token comment">// number is already in use.</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// Ensure port ids are representable in JavaScript for the benefit of</span>
    <span class="token comment">// vm-service clients such as Observatory.</span>
    <span class="token keyword">const</span> <span class="token class-name">Dart_Port</span> kMask1 <span class="token operator">=</span> <span class="token number">0xFFFFFFFFFFFFF</span><span class="token punctuation">;</span>
    <span class="token comment">// Ensure port ids are never valid object pointers so that reinterpreting</span>
    <span class="token comment">// an object pointer as a port id never produces a used port id.</span>
    <span class="token keyword">const</span> <span class="token class-name">Dart_Port</span> kMask2 <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span>prng_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NextUInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kMask1<span class="token punctuation">)</span> <span class="token operator">|</span> kMask2<span class="token punctuation">;</span>

    <span class="token comment">// The two special marker ports are used for the hashset implementation and</span>
    <span class="token comment">// cannot be used as actual ports.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token class-name">PortSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">:</span><span class="token punctuation">:</span>kFreePort <span class="token operator">||</span>
        result <span class="token operator">==</span> <span class="token class-name">PortSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">:</span><span class="token punctuation">:</span>kDeletedPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>static_cast<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectPtr</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>static_cast<span class="token generics"><span class="token punctuation">&lt;</span>uword<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IsWellFormed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ports_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Contains</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">ASSERT</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>ports_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Contains</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.执行**<code>nmh-&gt;Run()</code>**方法将<code>nmh</code>放到线程池中运行</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
<span class="token comment">// -&gt; runtime\\vm\\message_handler.cc</span>
<span class="token class-name">ThreadPool</span><span class="token operator">*</span> pool_<span class="token punctuation">;</span>
bool <span class="token class-name">MessageHandler</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPool</span><span class="token operator">*</span> pool<span class="token punctuation">,</span>
                         <span class="token class-name">StartCallback</span> start_callback<span class="token punctuation">,</span>
                         <span class="token class-name">EndCallback</span> end_callback<span class="token punctuation">,</span>
                         <span class="token class-name">CallbackData</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">MonitorLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_trace_isolates</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    OS<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrintErr</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;[+] Starting message handler:\\n&quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;\\thandler:    %s\\n&quot;</span></span><span class="token punctuation">,</span>
        <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>pool_ <span class="token operator">==</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>delete_me_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool_ <span class="token operator">=</span> pool<span class="token punctuation">;</span>
  start_callback_ <span class="token operator">=</span> start_callback<span class="token punctuation">;</span>
  end_callback_ <span class="token operator">=</span> end_callback<span class="token punctuation">;</span>
  callback_data_ <span class="token operator">=</span> data<span class="token punctuation">;</span>
  task_running_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token comment">// 在Dart VM Thread的线程池中执行MessageHandler,会是一个新的线程</span>
  bool result <span class="token operator">=</span> pool_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Run</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageHandlerTask</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pool_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    start_callback_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    end_callback_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    callback_data_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 会在“线程池”运行的时候执行对应的MessageHandler回调</span>
<span class="token keyword">class</span> <span class="token class-name">MessageHandlerTask</span> <span class="token punctuation">:</span> public <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Task</span> <span class="token punctuation">{</span>
 public<span class="token punctuation">:</span>
  explicit <span class="token class-name">MessageHandlerTask</span><span class="token punctuation">(</span><span class="token class-name">MessageHandler</span><span class="token operator">*</span> handler<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">handler_</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>handler <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  virtual <span class="token keyword">void</span> <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>handler_ <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 执行具体的逻辑</span>
    handler_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">TaskCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 private<span class="token punctuation">:</span>
  <span class="token class-name">MessageHandler</span><span class="token operator">*</span> handler_<span class="token punctuation">;</span>

  <span class="token function">DISALLOW_COPY_AND_ASSIGN</span><span class="token punctuation">(</span><span class="token class-name">MessageHandlerTask</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// -&gt; runtime\\include\\dart_api.h</span>

<span class="token comment">// A port is used to send or receive inter-isolate messages</span>
<span class="token keyword">typedef</span> int64_t <span class="token class-name">Dart_Port</span><span class="token punctuation">;</span>

<span class="token comment">// -&gt; runtime\\vm\\thread_pool.h</span>

<span class="token comment">// Runs a task on the thread pool.</span>
  template <span class="token generics"><span class="token punctuation">&lt;</span>typename <span class="token class-name">T</span><span class="token punctuation">,</span> typename<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">Args</span><span class="token punctuation">&gt;</span></span>
  bool <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token class-name">Args</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">RunImpl</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>forward<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Args</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>
bool <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">RunImpl</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Worker</span><span class="token operator">*</span> new_worker <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">MonitorLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool_monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shutting_down_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
		<span class="token comment">// 创建新的Worker</span>
    new_worker <span class="token operator">=</span> <span class="token class-name">ScheduleTaskLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>new_worker <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 在线程中执行task</span>
    new_worker<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">StartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>

<span class="token comment">// 创建一个Worker</span>
<span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Worker</span><span class="token operator">*</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ScheduleTaskLocked</span><span class="token punctuation">(</span><span class="token class-name">MonitorLocker</span><span class="token operator">*</span> ml<span class="token punctuation">,</span>
                                                   std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Enqueue the new task.</span>
  <span class="token class-name"><span class="token namespace">tasks_<span class="token punctuation">.</span></span>Append</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pending_tasks_<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>pending_tasks_ <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Notify existing idle worker (if available).</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count_idle_ <span class="token operator">&gt;=</span> pending_tasks_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">idle_workers_<span class="token punctuation">.</span></span>IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// If we have maxed out the number of threads running, we will not start a</span>
  <span class="token comment">// new one.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max_pool_size_ <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>count_idle_ <span class="token operator">+</span> count_running_<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> max_pool_size_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">idle_workers_<span class="token punctuation">.</span></span>IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Otherwise start a new worker.</span>
  auto new_worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">idle_workers_<span class="token punctuation">.</span></span>Append</span><span class="token punctuation">(</span>new_worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
  count_idle_<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> new_worker<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新建的Woker和ThreadPool绑定</span>
<span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Worker</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPool</span><span class="token operator">*</span> pool<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token function">pool_</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">join_id_</span><span class="token punctuation">(</span><span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kInvalidThreadJoinId<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// new_worker-&gt;StartThread();会调用下面的方法</span>
<span class="token keyword">void</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Worker</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  int result <span class="token operator">=</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;DartWorker&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">Worker</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Main</span><span class="token punctuation">,</span>
                               reinterpret_cast<span class="token generics"><span class="token punctuation">&lt;</span>uword<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">FATAL1</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Could not start worker thread: result = %d.&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// OSThread::Start每个端不一样，我们选择Android端的实现</span>
<span class="token comment">// -&gt; runtime\\vm\\os_thread_android.cc</span>

int <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">,</span>
                    <span class="token class-name">ThreadStartFunction</span> function<span class="token punctuation">,</span>
                    uword parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pthread_attr_t attr<span class="token punctuation">;</span>
  int result <span class="token operator">=</span> <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RETURN_ON_PTHREAD_FAILURE</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  result <span class="token operator">=</span> <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetMaxStackSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RETURN_ON_PTHREAD_FAILURE</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">ThreadStartData</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadStartData</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> function<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 声明系统线程类型</span>
  pthread_t tid<span class="token punctuation">;</span>
	<span class="token comment">// 调用系统创建线程的函数 https://blog.csdn.net/liangxanhai/article/details/7767430</span>
	<span class="token comment">// pthread_create参数含义：1. &amp;tid 指向线程的指针，2. &amp;attr 新建线程的属性 3. ThreadStart线程要执行的方法指针 4. data传给参数ThreadStart的参数</span>
  <span class="token comment">// 成功执行线程则返回0</span>
  result <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token class-name">ThreadStart</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RETURN_ON_PTHREAD_FAILURE</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  result <span class="token operator">=</span> <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RETURN_ON_PTHREAD_FAILURE</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dispatch to the thread start function provided by the caller. This trampoline</span>
<span class="token comment">// is used to ensure that the thread is properly destroyed if the thread just</span>
<span class="token comment">// exits.</span>
<span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token class-name">ThreadStart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data_ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_worker_thread_priority</span> <span class="token operator">!=</span> kMinInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setpriority</span><span class="token punctuation">(</span>PRIO_PROCESS<span class="token punctuation">,</span> <span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">FLAG_worker_thread_priority</span><span class="token punctuation">)</span> <span class="token operator">==</span>
        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">FATAL2</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Setting thread priority to %d failed: errno = %d\\n&quot;</span></span><span class="token punctuation">,</span>
             <span class="token class-name">FLAG_worker_thread_priority</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">ThreadStartData</span><span class="token operator">*</span> data <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token class-name">ThreadStartData</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>data_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> char<span class="token operator">*</span> name <span class="token operator">=</span> data<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ThreadStartFunction</span> function <span class="token operator">=</span> data<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uword parameter <span class="token operator">=</span> data<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">parameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  delete data<span class="token punctuation">;</span>

  <span class="token comment">// Set the thread name. There is 16 bytes limit on the name (including \\0).</span>
  <span class="token comment">// pthread_setname_np ignores names that are too long rather than truncating.</span>
  char truncated_name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>truncated_name<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>truncated_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;%s&quot;</span></span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_setname_np</span><span class="token punctuation">(</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> truncated_name<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 创建一个系统线程的包装类OSThread和新建的系统线程绑定</span>
  <span class="token comment">// Create new OSThread object and set as TLS for new thread.</span>
  <span class="token class-name">OSThread</span><span class="token operator">*</span> thread <span class="token operator">=</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreateOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 将线程切换到新创建的系统线程</span>
    <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetCurrent</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UnblockSIGPROF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Call the supplied thread start function handing it its parameters.</span>
		<span class="token comment">// 执行创建ThreadStartData时传入的方法，也就是ThreadPool::Worker::Main(uword args)</span>
    <span class="token function">function</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>

<span class="token class-name">OSThread</span><span class="token operator">*</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreateOSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>thread_list_lock_ <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">MutexLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span>thread_list_lock_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>creation_enabled_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">OSThread</span><span class="token operator">*</span> os_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">AddThreadToListLocked</span><span class="token punctuation">(</span>os_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> os_thread<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建了新的系统线程后，会执行下面的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>

<span class="token keyword">void</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Worker</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Main</span><span class="token punctuation">(</span>uword args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call the thread start hook here to notify the embedder that the</span>
  <span class="token comment">// thread pool thread has started.</span>
  <span class="token class-name">Dart_ThreadStartCallback</span> start_cb <span class="token operator">=</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_start_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start_cb <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">start_cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">OSThread</span><span class="token operator">*</span> os_thread <span class="token operator">=</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>os_thread <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Worker</span><span class="token operator">*</span> worker <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token class-name">Worker</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ThreadPool</span><span class="token operator">*</span> pool <span class="token operator">=</span> worker<span class="token operator">-</span><span class="token operator">&gt;</span>pool_<span class="token punctuation">;</span>
	<span class="token comment">// 将Worker和系统线程绑定</span>
  os_thread<span class="token operator">-</span><span class="token operator">&gt;</span>owning_thread_pool_worker_ <span class="token operator">=</span> worker<span class="token punctuation">;</span>
  worker<span class="token operator">-</span><span class="token operator">&gt;</span>os_thread_ <span class="token operator">=</span> os_thread<span class="token punctuation">;</span>

  <span class="token comment">// Once the worker quits it needs to be joined.</span>
  worker<span class="token operator">-</span><span class="token operator">&gt;</span>join_id_ <span class="token operator">=</span> <span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetCurrentThreadJoinId</span><span class="token punctuation">(</span>os_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">MonitorLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-</span><span class="token operator">&gt;</span>pool_monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>pool<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">idle_workers_<span class="token punctuation">.</span></span>ContainsForDebugging</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#endif

  pool<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">WorkerLoop</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>

  worker<span class="token operator">-</span><span class="token operator">&gt;</span>os_thread_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
  os_thread<span class="token operator">-</span><span class="token operator">&gt;</span>owning_thread_pool_worker_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

  <span class="token comment">// Call the thread exit hook here to notify the embedder that the</span>
  <span class="token comment">// thread pool thread is exiting.</span>
  <span class="token class-name">Dart_ThreadExitCallback</span> exit_cb <span class="token operator">=</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_exit_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exit_cb <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exit_cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\os_thread.h</span>
<span class="token comment">// OSThread</span>
<span class="token comment">// The ThreadPool::Worker which owns this OSThread. If this OSThread was not</span>
  <span class="token comment">// started by a ThreadPool it will be nullptr. This TLS value is not</span>
  <span class="token comment">// protected and should only be read/written by the OSThread itself.</span>
  <span class="token keyword">void</span><span class="token operator">*</span> owning_thread_pool_worker_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

  <span class="token comment">// thread_list_lock_ cannot have a static lifetime because the order in which</span>
  <span class="token comment">// destructors run is undefined. At the moment this lock cannot be deleted</span>
  <span class="token comment">// either since otherwise, if a thread only begins to run after we have</span>
  <span class="token comment">// started to run TLS destructors for a call to exit(), there will be a race</span>
  <span class="token comment">// on its deletion in CreateOSThread().</span>
  <span class="token keyword">static</span> <span class="token class-name">Mutex</span><span class="token operator">*</span> thread_list_lock_<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dart-newsendport" tabindex="-1"><a class="header-anchor" href="#dart-newsendport" aria-hidden="true">#</a> Dart_NewSendPort</h3><p>看一下<code>Dart_NewSendPort</code>如何将创建好的<code>Dart_Port service_port</code>转变为Dart的<code>SendPort</code>的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\dart_api_impl.cc</span>

DART_EXPORT <span class="token class-name">Dart_Handle</span> <span class="token class-name">Dart_NewSendPort</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> port_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">DARTSCOPE</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_CALLBACK_STATE</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>port_id <span class="token operator">==</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Api</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">NewError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;%s: illegal port_id %&quot;</span></span> <span class="token class-name">Pd64</span> <span class="token string-literal"><span class="token string">&quot;.&quot;</span></span><span class="token punctuation">,</span> CURRENT_FUNC<span class="token punctuation">,</span>
                         port_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token class-name">Api</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">NewHandle</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span>port_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\object.cc</span>

<span class="token class-name">SendPortPtr</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> id<span class="token punctuation">,</span> <span class="token class-name">Heap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Space</span> space<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">New</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">origin_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SendPortPtr</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span><span class="token class-name">Dart_Port</span> id<span class="token punctuation">,</span>
                          <span class="token class-name">Dart_Port</span> origin_id<span class="token punctuation">,</span>
                          <span class="token class-name">Heap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Space</span> space<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>id <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 创建新的SendPort并将Dart_Port id和当前的isolate id与之绑定</span>
  <span class="token class-name">SendPort</span><span class="token operator">&amp;</span> result <span class="token operator">=</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">ObjectPtr</span> raw <span class="token operator">=</span>
        <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Allocate</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kClassId<span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InstanceSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> space<span class="token punctuation">,</span>
                         <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ContainsCompressedPointers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NoSafepointScope</span> no_safepoint<span class="token punctuation">;</span>
    result <span class="token operator">^=</span> raw<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>StoreNonPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">.</span><span class="token function">untag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>id_<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>StoreNonPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">.</span><span class="token function">untag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>origin_id_<span class="token punctuation">,</span> origin_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我们发现，<code>Dart_NewNativePort</code>将要处理的事件<code>handler</code>封装起来，最后在<strong>非当前isolate</strong>的线程中执行。</p><h1 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h1><p>从上面的分析中，我们可以知道，在Dart中通过File进行文件操作，其实是通过Dart中的_IOService进行消息中转，将用户的IO指令发送到Native层的IOService中；</p><p>IOService通过一些列操作，得到一个<code>SendPort servicePort</code>，与此同时对应的IO操作已经压入消息栈中等待触发在单独的线程中执行；</p><p>之后在_IOService中<code>servicePort</code>将用户需要的IO操作和与自己通信的<code>_replyToPort = _receivePort!.sendPort;</code> 通过<code>send</code>方法触发<code>IOServiceCallback</code>执行对应的IO操作，并且在最后调用<code>Dart_PostCObject</code>方法将结果压入消息栈中，这会触发Dart层_IOService的_receivePort!.handler回调事件，然后根据事件失败或者成功，使用Completer通过Event loop一步步将事件上报，最终回调用户需要的命令。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,17),P={href:"https://blog.csdn.net/eieihihi/article/details/119601010",target:"_blank",rel:"noopener noreferrer"},O={href:"http://w4lle.com/2021/04/12/kidea-flutter/index.html",target:"_blank",rel:"noopener noreferrer"};function I(T,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("设备文件分为Block Device Driver和Character Device Drive两类。"),r,s(" Character Device Driver又被称为字符设备或裸设备raw devices; Block Device Driver通常成为块设备。"),k,s(" 而Block Device Driver是以固定大小长度来传送转移资料 ； Character Device Driver是以不定长度的字元传送资料。 "),n("a",d,[s("https://www.cnblogs.com/qlee/archive/2011/07/27/2118406.html#:~:text=Character"),t(a)])])]),v,n("p",null,[s("查阅"),n("a",m,[s("_IOService"),t(a)]),s("的源码后发现这是个"),b,s(" 方法.")]),_,n("blockquote",null,[n("p",null,[s("An "),g,s(" function is connected to its body by an implementation-specific mechanism. Attempting to invoke an external function that has not been connected to its body will throw a NoSuchMethodError or some subclass thereof."),h,s(" ****"),n("a",f,[s("https://github.com/dart-lang/sdk/issues/4300"),t(a)])])]),w,n("p",null,[s("见 "),n("a",y,[s("IsolateLeaveScope"),t(a)])]),S,n("p",null,[n("a",P,[s("09、Flutter FFI Dart Native API_又吹风_Bassy的博客-CSDN博客"),t(a)])]),n("p",null,[n("a",O,[s("快手-开眼快创 Flutter 实践 | w4lle's Notes"),t(a)])])])}const R=e(i,[["render",I],["__file","3db5282.html.vue"]]);export{R as default};
