import{_ as i,c as s,o as a,a as n}from"./app-MEinqLQU.js";const t={},e=n(`<blockquote><p>本文讨论的 Flutter 动画主要限定在：<em>随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态</em> 这一范围。</p></blockquote><p>Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类：</p><ul><li>Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Tween、Curve 等</li><li>基于底层实现，提供进一步封装的 Flutter 动画相关的 Widget 类，比如 AnimatedWidget、ImplicitlyAnimatedWidget 和他们的子类。</li></ul><p>他们的关系如下：</p><p>AnimationController 通过 Ticker 监听 Flutter 屏幕帧刷新：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct2.png" alt="Flutter 中 AnimationController 与 Ticker 关系" tabindex="0" loading="lazy"><figcaption>Flutter 中 AnimationController 与 Ticker 关系</figcaption></figure><p>每一帧刷新后，AnimationController 监听并根据 Duration 等计算出当前的 Animation.value；<br> 此外也可以通过 Tween 将 double 类型转化为其他的类型比如 Offset 等；<br> 上述两种方式中 value 都是随着时间线性变化，而 Curve 可以与 CurveTween、AnimationController 等结合使 value 实现非线性的变化。</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct1.png" alt="Flutter 各种动画底层类关系" tabindex="0" loading="lazy"><figcaption>Flutter 各种动画底层类关系</figcaption></figure><p>当随着时间变化，计算出当前的 Animation.value 时，便可以根据此值修改 Flutter Widget 的各个属性，从而实现动画的视觉效果。</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_widget.png" alt="Flutter 中与动画有关的 Widget" tabindex="0" loading="lazy"><figcaption>Flutter 中与动画有关的 Widget</figcaption></figure><p>从上图可以看到，Flutter 提供的动画 Widget 主要分为两大类：</p><ul><li><p>ImplicitlyAnimatedWidget 隐式动画，关于动画的开始、停止等都封装在 Widget 内部，只要 Widget 前后传入的值不同便可以自动从 old 渐变到 new，内置的这些类主要以 AnimatedFoo 命名。</p></li><li><p>AnimatedWidget，显式动画，需要使用者自己创建 Animation（一般是 AnimationController）并通过其管理动画，此类 Widget 主要是监听 AnimationController 的值并刷新 Widget 的内容。</p><p>此类 Widget 主要有三种使用方式：</p><ul><li>继承 AnimatedWidget</li><li>使用 AnimatedBuilder</li><li>使用各种内置的 AnimatedWidget 子类，一般以 FooTransition 命名。</li></ul></li></ul><p>对于 Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_select.png" alt="如何实现 Flutter 中的动画" tabindex="0" loading="lazy"><figcaption>如何实现 Flutter 中的动画</figcaption></figure><p>简单来说，Flutter 有一些内置的动画，在要写动画的时候，可以依次考虑（实现程度由易到难）：</p><ul><li>AnimatedFoo 参考<a href="https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916" target="_blank" rel="noopener noreferrer">文章</a>，设置新的状态，这些控件会自动从之前的状态切换到新状态</li><li>TweenAnimationBuilder 参考<a href="https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185" target="_blank" rel="noopener noreferrer">文章</a>，将任意属性在 Tween 指定的范围变化，和上面的 AnimatedFoo 都是属于<a href="https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html" target="_blank" rel="noopener noreferrer">Implicitly animated widgets</a>（隐式动画，由系统控件控制动画）。</li><li>FooTranslation</li><li>AnimatedBuilder / AnimatedWidget</li><li>CustomPainter</li></ul><br><p>本文主要分析 AnimationController 及其相关类。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h2><p>AnimationController 是 Flutter 中动画的基石，它继承自 Animation，根据不同的方法调用创建对应的 Simulation 并开始监听传入的 Ticker；</p><p>每当 Flutter 中帧刷新时，从_simulation 中获取当前 Animation._value 并对 listener 发出通知；</p><p>这样需要使用 Animation.value 的各个 Widget 便可以根据其值修改自身属性，实现动画视觉效果。</p><h3 id="animation" tabindex="-1"><a class="header-anchor" href="#animation"><span>Animation</span></a></h3><p>根据上述分析，我们首先来看一下 Animation 类：</p><blockquote><p>An animation with a value of type T</p></blockquote><p>Animation 主要的作用是持有 value 和 status，并允许其他对象监听二者的变化。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Listenable</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ValueListenable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /// The current value of the animation.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    T</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /// The current status of this animation.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    AnimationStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Animation 继承自 Listenable，实现 ValueListenable 接口，其他类可以通过 addListener/removeListener 或者 addStatusListener/removeStatusListener 监听 Animation 的 value 或者 status 变化。</p><p>Animation 共有 4 种状态：dismissed、forward、reverse、completed。</p><p>除此之外，Animation.drive 方法可以创建一个新的将传入的 Animatable 应用到自身的 Animation。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  @optionalTypeArgs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">drive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Animatable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; child) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 通过 Animatable.transform 将此 Animation.value 的值从 double 转化为 U</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，提供了将 <code>Animation&lt;double&gt;</code> 转化为 <code>Animation&lt;U&gt;</code> 类型的方法。</p><h4 id="其他子类" tabindex="-1"><a class="header-anchor" href="#其他子类"><span>其他子类</span></a></h4><p>除了后面要详细分析的 AnimationController 之外，Animation 还有如下子类：</p><table><thead><tr><th>class</th><th>说明</th></tr></thead><tbody><tr><td>AlwaysStoppedAnimation</td><td>永远停留在指定值的 animation</td></tr><tr><td><strong>ProxyAnimation</strong></td><td>代理 Animation，适用于动画可能会变化的情况，先使用 ProxyAnimation 应用一个 Animation，然后再修改为其他 Animation（不用手动添加移除 listener）</td></tr><tr><td>ReverseAnimation</td><td>返回和当前 animation 反方向的 Animation</td></tr><tr><td><strong>CurvedAnimation</strong></td><td>可以为传入的 animation 使用 Curve 的 animation，适用于将原先线性变化的 Animation 改为非线性的</td></tr><tr><td>TrainHoppingAnimation</td><td>监听传入的两个 Animation&lt;double&gt;，当第二个 Animation 的值超过第一个 Animation 的值时自动切换到第二个并回调 onSwitchedTrain。如果一开始两个 Animation 就在同一个值，则切换到第二个并不会调用 onSwitchedTrain。</td></tr><tr><td>CompoundAnimation</td><td>可以组合多个 Animation&lt;T&gt;的接口，当 Animation&lt;T&gt; next 处于运动状态时返回 next 的状态，否则返回 Animation&lt;T&gt; first 的状态。</td></tr></tbody></table><p>对于上述的 CompoundAnimation，子类只需重写 <code>double get value</code> 方法即可，其有三个子类：</p><ul><li><code>AnimationMean</code> 返回 first 和 next 值和的二分之一，值为 double</li><li><code>AnimationMax&lt;T extends num&gt;</code> 返回 first 和 next 中最大值</li><li><code>AnimationMin&lt;T extends num&gt;</code> 返回 first 和 next 中最小值</li></ul><h3 id="animationcontroller" tabindex="-1"><a class="header-anchor" href="#animationcontroller"><span>AnimationController</span></a></h3><blockquote><p>A controller for an animation.</p></blockquote><p>尽管有各种子类，但 Animation 最常用的子类是 AnimationController，使用者可以用它来控制、监听动画、创建其他动画。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> AnimationController</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Animation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> AnimationEagerListenerMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">AnimationLocalListenersMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">AnimationLocalStatusListenersMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h4><p>AnimationController 有两种构造方法，这两种构造方法主要会初始化以下变量：</p><ul><li>double value 当前值</li><li>Duration? duration,reverseDuration 动画正向、反向运行的时长，初始化时可以为 null，但在实际开始动画之前，至少保证 duration 不为 null</li><li>double lowerBound,double upperBound 当 value 触达此值时，animation 分别被认为是 dismissed、completed</li><li>Ticker? _ticker 由构造方法中必传的 TickerProvider vsync 创建</li></ul><p>他的两个构造方法分别是：</p><ul><li><p>AnimationController()</p><p>默认构造方法，double lowerBound,double upperBound 默认分别为 0.0，1.0</p></li><li><p>AnimationController.unbounded()</p><p>不限制 value 值的构造方法，double lowerBound,double upperBound 默认分别为 double.negativeInfinity，double.infinity。适用于没有预设编辑的物理模拟动画。</p></li></ul><p>在这两个构造方法内部，都会通过<code>_ticker = vsync.createTicker(_tick)</code>创建_ticker，并保证当_ticker 回调时执行<code>AnimationController._tick()</code>方法。</p><blockquote><p>这里的 TickerProvider 主要有 2 种：</p><ul><li>SingleTickerProviderStateMixin 适用于 State 中只有一个 AnimationController 的情况，性能更好</li><li>TickerProviderStateMixin 适用于 State 生命周期内有多个 AnimationController 的情况</li></ul></blockquote><br><p>除了从 Animation 继承的方法外，AnimationController 还提供了如下方法，用于操纵动画：</p><p><strong>操纵从<code>double? from</code>正向/反向开始动画</strong>：</p><ul><li>TickerFuture forward({ double? from })</li><li>TickerFuture reverse({ double? from })</li></ul><p><strong>操纵正向/反向开始朝向<code>double target</code>开始动画</strong>，此类动画还可以改变<em>Duration</em>和<em>Curve</em>：</p><ul><li>TickerFuture animateTo(double target, { Duration? duration, Curve curve = Curves.linear })</li><li>TickerFuture animateBack(double target, { Duration? duration, Curve curve = Curves.linear })</li></ul><p>上述四种方法，内部都是通过 <code>AnimationController._animateToInternal()</code>方法实现，而此方法内部又是执行 <code>AnimationController._startSimulation()</code>，除此之外，还有以下几类方法内部也是基于_startSimulation() 方法实现，主要区别在于不同方法方法创建了不同的 Simulation：</p><ul><li>TickerFuture repeat({ double? min, double? max, bool reverse = false, Duration? period })</li><li>TickerFuture fling({ double velocity = 1.0, SpringDescription? springDescription, AnimationBehavior? animationBehavior })</li><li>TickerFuture animateWith(Simulation simulation)</li></ul><h4 id="startsimulation" tabindex="-1"><a class="header-anchor" href="#startsimulation"><span>_startSimulation</span></a></h4><p><code>AnimationController._startSimulation()</code>方法是其实现动画的基石，其内部主要是开启了_ticker 并发出通知：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">TickerFuture</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _startSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> simulation) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(simulation </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">isAnimating);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _simulation </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> simulation;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _lastElapsedDuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.zero;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _value </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> simulation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">clamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(lowerBound, upperBound);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 开始 ticker</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> TickerFuture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _ticker</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _status </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (_direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> _AnimationDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.forward) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">      AnimationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.forward </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">      AnimationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.reverse;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    _checkStatusChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_ticker.start()</code>方法最终通过<code>SchedulerBinding.instance.scheduleFrameCallback()</code>方法监听 Flutter Framework 的帧刷新，并回调 <code>AnimationController._tick</code> 方法</p><h4 id="tick" tabindex="-1"><a class="header-anchor" href="#tick"><span>_tick</span></a></h4><p>在此方法内部根据当前时间和_simulation 获取_value 并发出通知。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _tick</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> elapsed) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _lastElapsedDuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> elapsed;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> elapsedInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> elapsed.inMicroseconds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.microsecondsPerSecond;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elapsedInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 通过_simulation 获取当前动画的_value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    _value </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _simulation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elapsedInSeconds).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">clamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(lowerBound, upperBound);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 如果动画已经结束了，就停止监听</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (_simulation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isDone</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(elapsedInSeconds)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      _status </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (_direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> _AnimationDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.forward) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        AnimationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.completed </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        AnimationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.dismissed;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      stop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(canceled</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    notifyListeners</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    _checkStatusChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h4><ul><li>void resync(TickerProvider vsync) 使用 vsync 重新创建新的_ticker</li><li>void stop({ bool canceled = true }) 停止动画，不会触发通知，默认标记动画为 canceled</li><li>void dispose() 释放资源，动画被标记为 canceled</li></ul><h3 id="simulation" tabindex="-1"><a class="header-anchor" href="#simulation"><span>Simulation</span></a></h3><p>从上面的分析中，我们看到 Simulation 在 AnimationController 动画中也起到很重要的作用：Simulation 主要是在一维空间对物理进行位置、速度等建模。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  /// Initializes the </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">[tolerance]</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> field for subclasses.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.tolerance </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Tolerance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.defaultTolerance });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 指定时间的位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> time);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 指定时间的速度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> time);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  /// Whether the simulation is &quot;done&quot; at the given time.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isDone</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> time);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 公差，如果两个数值相差小于等于此值则认为二者相等，用于 isDone 中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Tolerance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> tolerance;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> objectRuntimeType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Simulation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 AnimationController 中常用的子类有以下两种：</p><h4 id="interpolationsimulation" tabindex="-1"><a class="header-anchor" href="#interpolationsimulation"><span>_InterpolationSimulation</span></a></h4><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">_InterpolationSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">._begin, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">._end, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> duration, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">._curve, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> scale){...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其 x() 方法中除了 t 为 0.0 或 1.0 的情况外，其余时候依靠 Curve（默认为 Curves.linear）计算值。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeInSeconds) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (timeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _durationInSeconds).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">clamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (t </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _begin;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (t </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _end;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _begin </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (_end </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _begin) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _curve.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(t);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="repeatingsimulation" tabindex="-1"><a class="header-anchor" href="#repeatingsimulation"><span>_RepeatingSimulation</span></a></h4><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">_RepeatingSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> initialValue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.min, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.max, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.reverse, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> period, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.directionSetter){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>没有 Curve，其 double x(double timeInSeconds) 方法可以自动判断是否需要反向并修改方向（会触发 status 改变通知）：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeInSeconds) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(timeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> totalTimeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _initialT;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (totalTimeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _periodInSeconds) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> isPlayingReverse </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (totalTimeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _periodInSeconds).isOdd;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (reverse </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> isPlayingReverse) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      directionSetter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">_AnimationDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.reverse);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lerpDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(max, min, t)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      directionSetter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">_AnimationDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.forward);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lerpDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(min, max, t)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外比较特殊的是他的 isDone 方法一致返回 false，表示不会主动结束动画。</p><h4 id="springsimulation" tabindex="-1"><a class="header-anchor" href="#springsimulation"><span>SpringSimulation</span></a></h4><p>用于 fling 方法，创建弹性的模拟</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>经过上述分析，应该能了解 Flutter 动画中 AnimationController 的作用：</p><ul><li><p><strong>AnimationController</strong> 通过传入的 <strong>TickerProvider</strong> 创建并监听 <strong>Ticker</strong>，确保 Ticker 收到系统帧回调时触发 AnimationController._tick 方法；</p></li><li><p>提供 forward，reverse，animateTo，animateBack，repeat，fling，animateWith 等方法创建不同的 <strong>Simulation</strong> 并开启 Ticker，从而可以通过 <strong>SchedulerBinding</strong>.instance.scheduleFrameCallback 监听 Flutter 每一帧刷新。</p><p>并且在 animateTo，animateBack 方法中可以使用 <strong>Curve</strong> 实现非线性变化。</p></li><li><p>当 Flutter 帧刷新时，_tick 方法中通过_simulation 结合时间，lowerBound 和 upperBound 等获取当前值_value 和状态_status 并发出通知。</p></li><li><p>使用者可以通过 AnimationController 继承自父类 <strong>Animation</strong> 的 addListener/removeListener、addStatusListener/removeStatusListener 监听动画的值和状态</p></li><li><p>使用者可以从父类 <code>Animation&lt;double&gt;</code>继承的<code>Animation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child)</code>方法使用 <code>Animatable&lt;U&gt;</code>从 <code>Animation&lt;double&gt;</code>的 animation 创建一个新的<code>Animation&lt;U&gt;</code>，从而可以得到可以随时间变化过渡的 Offset、Size 等动画。</p></li><li><p>stop 方法可以停止动画</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://flutter.cn/docs/development/ui/animations" target="_blank" rel="noopener noreferrer">动画效果介绍 flutter.cn</a></p><p><a href="https://api.flutter.dev/flutter/animation/Animation-class.html" target="_blank" rel="noopener noreferrer">Animation api.flutter.dev</a></p><p><a href="https://api.flutter.dev/flutter/animation/AnimationController-class.html" target="_blank" rel="noopener noreferrer">AnimationController api.flutter.dev</a></p><p><a href="https://api.flutter.dev/flutter/scheduler/TickerProvider-class.html" target="_blank" rel="noopener noreferrer">TickerProvider api.flutter.dev</a></p><p><a href="https://api.flutter.dev/flutter/scheduler/SingleTickerProviderStateMixin-class.html" target="_blank" rel="noopener noreferrer">SingleTickerProviderStateMixin api.flutter.dev</a></p>`,89),l=[e];function h(r,k){return a(),s("div",null,l)}const d=i(t,[["render",h],["__file","6ec43bd8.html.vue"]]),o=JSON.parse('{"path":"/posts/6ec43bd8.html","title":"Flutter 动画分析之 AnimationController","lang":"zh-CN","frontmatter":{"permalink":"/posts/6ec43bd8.html","title":"Flutter 动画分析之 AnimationController","tag":"flutter","date":"2022-08-21T02:43:24.000Z","updated":"2023-12-30T08:17:02.000Z","abbrlink":"6ec43bd8","isOriginal":true,"description":"本文讨论的 Flutter 动画主要限定在：随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态 这一范围。 Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类： Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Twe...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/6ec43bd8.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Flutter 动画分析之 AnimationController"}],["meta",{"property":"og:description","content":"本文讨论的 Flutter 动画主要限定在：随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态 这一范围。 Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类： Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Twe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T03:36:59.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"flutter"}],["meta",{"property":"article:published_time","content":"2022-08-21T02:43:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T03:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flutter 动画分析之 AnimationController\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct2.png\\",\\"https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct1.png\\",\\"https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_widget.png\\",\\"https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_select.png\\"],\\"datePublished\\":\\"2022-08-21T02:43:24.000Z\\",\\"dateModified\\":\\"2024-06-04T03:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[{"level":3,"title":"Animation","slug":"animation","link":"#animation","children":[{"level":4,"title":"其他子类","slug":"其他子类","link":"#其他子类","children":[]}]},{"level":3,"title":"AnimationController","slug":"animationcontroller","link":"#animationcontroller","children":[{"level":4,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":4,"title":"_startSimulation","slug":"startsimulation","link":"#startsimulation","children":[]},{"level":4,"title":"_tick","slug":"tick","link":"#tick","children":[]},{"level":4,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]}]},{"level":3,"title":"Simulation","slug":"simulation","link":"#simulation","children":[{"level":4,"title":"_InterpolationSimulation","slug":"interpolationsimulation","link":"#interpolationsimulation","children":[]},{"level":4,"title":"_RepeatingSimulation","slug":"repeatingsimulation","link":"#repeatingsimulation","children":[]},{"level":4,"title":"SpringSimulation","slug":"springsimulation","link":"#springsimulation","children":[]}]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1661069353000,"updatedTime":1717472219000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":4},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":8.77,"words":2632},"filePathRelative":"_posts/Flutter动画分析之AnimationController.md","localizedDate":"2022年8月21日","excerpt":"<blockquote>\\n<p>本文讨论的 Flutter 动画主要限定在：<em>随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态</em> 这一范围。</p>\\n</blockquote>\\n<p>Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类：</p>\\n<ul>\\n<li>Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Tween、Curve 等</li>\\n<li>基于底层实现，提供进一步封装的 Flutter 动画相关的 Widget 类，比如 AnimatedWidget、ImplicitlyAnimatedWidget 和他们的子类。</li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
