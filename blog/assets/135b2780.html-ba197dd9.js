import{_ as t,r as p,o as e,c as o,a as s,b as n,d as c,e as i}from"./app-bf457b07.js";const l={},u={href:"https://github.com/enbandari/Kotlin-Tutorials",target:"_blank",rel:"noopener noreferrer"},r=i(`<ul><li><p>xx.map() &amp; xx.flatMap()</p><p>xx.flatMap() 用于返回<strong>可迭代</strong>的数组，而 xx.map() 则是任何<strong>可迭代</strong>数据都有的用来遍历的方法。</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">var</span> arr <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a c v de  fb s e  gf d&quot;</span></span><span class="token punctuation">)</span>
    arr<span class="token punctuation">.</span><span class="token function">flatMap</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>enum class 枚举类型</p><p>分为有参和无参，枚举变量以<code>,</code>分隔，如果 enum 还有方法或者伴生对象，则最后一个变量后为<code>;</code>，否则可为<code>,</code>、<code>;</code>或者没有。</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> City<span class="token punctuation">{</span>
    UK<span class="token punctuation">,</span>USA<span class="token punctuation">,</span>EU<span class="token punctuation">;</span>

    <span class="token comment">//以下为非必须代码，仅表示可以有这些功能</span>
    <span class="token keyword">fun</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">fun1</span><span class="token punctuation">(</span>s<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>City<span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 有参的情况如下</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">Country</span><span class="token punctuation">(</span><span class="token keyword">val</span> aName<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">CHINA</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;中国&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">JAPAN</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;日本&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USA</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;美国&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UK</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;英国&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 使用：通过 enum 的 valueOf() 方法获取枚举对象实例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var s = &quot;uk&quot;
var city = City.valueOf(s.toUpperCase())
//或者通过伴生对象：
var city = City.fun1(s)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>companion object 伴生对象</p><p>在类的定义，可以直接用<code>类名.方法名()</code>调用，相当于 java 中的静态方法</p><p>一个类中只能有一个伴生对象</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> xxx<span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">parse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Country <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>object 修饰的类</p><p>等同于只有一个实例的类，相当于 java 中的静态类，所有方法可以直接用类名调用</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> ClassName<span class="token punctuation">{</span>
    <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>fun ClassName.funName() 为类添加新的方法</p><p>对于不能直接修改的类，有需要对其增加一个方法，可以自定义一个<code>ClassName.funName()</code>的方法来达到这个目的。</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> Country<span class="token punctuation">.</span><span class="token function">sayNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//this 引用的是 country 对象</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        CHINA <span class="token operator">-&gt;</span> <span class="token number">1</span>
        JAPAN <span class="token operator">-&gt;</span> <span class="token number">2</span>
        USA <span class="token operator">-&gt;</span> <span class="token number">3</span>
        UK <span class="token operator">-&gt;</span> <span class="token number">4</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在使用时可以通过<code>Country</code>的对象调用<code>syaNum()</code>方法</p><ul><li><p>data class 数据类</p><p>可以有方法，方便复制。</p><p>必须至少有一个参数，并且参数都需要用 var/val 修饰</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">dataClass</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age <span class="token operator">:</span>Int<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>文件读取 <ul><li>resource 目录下的文件读取</li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResource</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;input&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>与 RxJava 结合</p><p>统计文本中字母个数，基于 RxJava 1.2.1</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> <span class="token operator">!</span>it<span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">groupBy</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">{</span>
                o <span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">{</span>
                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">o<span class="token punctuation">.</span>key</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">  ,&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function k(d,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[s("p",null,[n("这是我在学习 Bennyhuo（ "),s("a",u,[n("github"),c(a)]),n(" ）的 kotlin 入门视频时的一些笔记，比较偏基础，用于查缺补漏。")]),r])}const b=t(l,[["render",k],["__file","135b2780.html.vue"]]);export{b as default};
