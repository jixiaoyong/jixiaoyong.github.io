import{_ as i,c as s,o as a,a as e}from"./app-BOUgJc5J.js";const t={},n=e(`<img src="https://images.pexels.com/photos/159644/art-supplies-brushes-rulers-scissors-159644.jpeg?cs=srgb&amp;dl=art-supplies-arts-and-crafts-ballpens-159644.jpg&amp;fm=jpg" class="full-image"><p>Photo by **<a href="https://www.pexels.com/@pixabay?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels" target="_blank" rel="noopener noreferrer">Pixabay </a>**from <strong><a href="https://www.pexels.com/photo/pencils-in-stainless-steel-bucket-159644/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels" target="_blank" rel="noopener noreferrer">Pexels</a></strong></p><p><code>HashMap</code>使用由<code>Node&lt;K,V&gt;</code>（继承自<code>Map.Entry&lt;K,V&gt;</code>）组成的<strong>数组</strong><code>table</code>保存数据。</p><p>在<code>table</code>中保存数据时根据<code>key</code>的<code>hashCode</code>计算到一个<strong>随机保存位置（但都在<code>table</code>数组的大小范围内）</strong>，当存储的<strong>数据总量</strong>超过加载系数<code>loadFactor</code>规定的<strong>阈值</strong>时则对<code>table</code>进行<strong>扩容</strong>。</p><h2 id="hashmap-有以下全局变量" tabindex="-1"><a class="header-anchor" href="#hashmap-有以下全局变量"><span>HashMap 有以下全局变量</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//实际保存键值对的数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//Holds cached entrySet().用来遍历 HashMap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//本 HashMap 实际保存的键值对个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> modCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//HashMap 修改的次数，每次修改 HashMap 都会叠加，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//用来在遍历的过程中检查 HashMap 是否被改动过来，如果有则抛出异常 ConcurrentModificationException</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> threshold</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//是否扩容的阈值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> loadFactor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//加载系数，默认 0.75f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>loadFactor</code>：默认的负载因子<strong>0.75</strong>是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下：</p><p>如果内存空间很多而又对时间效率要求很高，可以降低负载因子 Load factor 的值；</p><p>相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子<code>loadFactor</code>的值，这个值可以大于 1。</p><p><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html" target="_blank" rel="noopener noreferrer">https://tech.meituan.com/2016/06/24/java-hashmap.html</a></p></blockquote><p>每个<code>Node</code>包含了以下信息：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> implements </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    V</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行<code>hashMap.put(&quot;k&quot;, &quot;v&quot;);</code>时，会先计算<code>key</code>的<code>hash</code>值</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> key) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //这里原始 hash 值 (32 位) 的高位和地位进行按位异或（不同为，相同为 0），</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //增加了随机性，避免因为 hashCode 计算得到的 hash 值（低位相同概率高）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //计算索引时（见下文↓）一直取低位值而可能导致的索引一直的重复问题。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-put-k-key-v-value" tabindex="-1"><a class="header-anchor" href="#v-put-k-key-v-value"><span><code>V put(K key, V value)</code></span></a></h2><p>使用<code>HashMap</code>保存数据时：</p><ol><li><p>使用<code>hash(Object key)</code>计算<code>key</code>的<code>hash</code>值</p></li><li><p>通过<code>hash</code>值计算<code>value</code>应该保存的位置<code>i</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> hash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//由于 table.length 限定为 2 的 n 次方，所以上面的等式相当于给 table.length 取余数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//即 i 永远&lt;=table.length</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此时会判断是否需要扩容 (<strong>只有<code>table</code>为空，或者当前存储的数据总数<code>size</code>大于阈值<code>threshold</code>时才会扩容</strong><code>resize()</code>)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> loadFactor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">阈值 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 容量 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 负载系数（默认为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接下来会插入数据</p><ul><li>指定位置为空（没有<em>hash 冲突</em>），或已有<code>key</code>相同的值：则直接插入<code>value</code></li><li>已经存在值并且数量大于 8：则将链表转化为红黑树（JDK1.8），否则以链表形式保存数据</li><li>在移除数据时，如果红黑树数量小于 6：则将红黑树转化为链表</li></ul></li></ol><blockquote><p>在 JDK1.7 中，数据以数组或链表形式保存，JDK1.8 中则新增了红黑树。</p><p>发生 hash 冲突时，JDK1.7 采用采用头插法，可能会产生逆序和环形链表；JDK1.8 采用尾插法，直接插入链表或红黑树尾部。</p><p>具体 JDK1.7 与 1.8 对比查看<a href="https://blog.csdn.net/qq_36520235/article/details/82417949" target="_blank" rel="noopener noreferrer">这里</a></p></blockquote><h2 id="v-get-object-key" tabindex="-1"><a class="header-anchor" href="#v-get-object-key"><span><code>V get(Object key)</code></span></a></h2><p>使用<code>HashMap</code>获取数据时：</p><ol><li><p>计算 key 的<code>hash值</code></p></li><li><p>查找对应位置的<code>node</code></p><ul><li><p><code>null</code>：返回<code>null</code></p></li><li><p><code>node</code>不为空且<code>key</code>一致：返回该<code>node</code></p></li><li><p><code>node</code>不为空且<code>key</code>不一致：</p><p>如果是<em>链表</em>：遍历链表查找是否存在与<code>key</code>一致的<code>node</code></p><p>如果是<em>树</em>：遍历树查找是否存在与<code>key</code>一致的<code>node</code></p></li></ul></li></ol><h2 id="v-remove-object-key" tabindex="-1"><a class="header-anchor" href="#v-remove-object-key"><span><code>V remove(Object key)</code></span></a></h2><p>使用<code>HashMap</code>移除数据时：</p><p>其大体过程与<code>get(Object key)</code>类似，遍历找到对应的<code>node</code>并删除。</p><h2 id="计算索引" tabindex="-1"><a class="header-anchor" href="#计算索引"><span>计算索引</span></a></h2><p>一个<code>key</code>对应的索引<code>index</code>是由这个<code>key</code>的<code>hash()</code>值对<code>HashMap</code>的数组长度<code>length</code>的余数：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>又有**在<code>Length</code>为 2<sup>n</sup>**时：</p><p>hash % 2<sup>n</sup> = hash &amp; ( 2<sup>n</sup> - 1)</p><blockquote><p>hash % 2<sup>n</sup> = hash - (hash / 2<sup>n</sup>) * 2<sup>n</sup><br> = hash - (hash&gt;&gt;n) * 2<sup>n</sup><br> = hash &amp; ( 2<sup>n</sup> - 1)</p></blockquote><p>而<code>HashMap</code>的长度<code>Length</code>又只能是 2<sup>n</sup>，所以：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (length </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="保存值" tabindex="-1"><a class="header-anchor" href="#保存值"><span>保存值</span></a></h2><ul><li><p>当<code>table</code>为空或者长度超过加载因子<code>DEFAULT_LOAD_FACTOR</code>规定的容量 (默认容量为 16，加载因子为 0.75) 时会自动扩容。</p></li><li><p>当<code>table[index]</code>为空时，直接新建<code>Node</code>并保存到<code>table[index]</code>中。</p></li><li><p>当<code>table[index]</code>不为空时：</p><ul><li>如果是同一个<code>key</code>则覆盖旧的值</li><li>如果是不同的<code>key</code>则先尝试以链表保存数据</li><li>如果是不同的<code>key</code>，并且链表长度超过<code>MIN_TREEIFY_CAPACITY</code>规定的长度（默认 64），则将链表转化为红黑树 (JDK1.8 新增)</li></ul></li></ul><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h2><p>在<a href="#HashMap%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">第一节</a>我们可以看到，<code>HashMap</code>的很多变量都被标记为<code>transient</code>，这表示在<code>Serializable</code>序列化时不主动去序列化这些值，那这样岂不是没法反序列化这些数据了？</p><p>其实在后面我们可以看到，<strong><code>HashMap</code>在<code>writeObject()</code>方法中主动保存了部分数据</strong>（原因是默认的<code>Serializable</code>由于不同 JVM 实现对同一对象如<code>String</code>的<code>HashCode</code>不一定一致，会导致严重的问题——<code>HashMap</code>基于<code>hash</code>值保存数据）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> buckets </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//容量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Write out the threshold, loadfactor, and any hidden stuff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">defaultWriteObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(buckets);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(size);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//保存 size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    internalWriteEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(s)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//保存 table 数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">* table 不为空则返回 table 长度</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">* 否则 threshold 不为空则返回 threshold</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">* 否则返回默认的 DEFAULT_INITIAL_CAPACITY</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (table </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            (threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> threshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            DEFAULT_INITIAL_CAPACITY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在<code>readObject()</code>恢复了这些值。</p><h2 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h2><table><thead><tr><th>位运算</th><th>符号</th><th>计算</th></tr></thead><tbody><tr><td>按位与</td><td>&amp;</td><td>相同为 1，不同为 0</td></tr><tr><td>按位或</td><td>|</td><td>有 1 则 1</td></tr><tr><td>按位异或</td><td>^</td><td>相同为 0，不同位 1</td></tr><tr><td>按位取反</td><td>~</td><td></td></tr><tr><td>左移</td><td>&lt;&lt;</td><td>相当于乘以 2<sup>n</sup></td></tr><tr><td>右移</td><td><code>&gt;&gt;</code></td><td>相当于除以 2<sup>n</sup></td></tr><tr><td>无符号右移</td><td><code>&gt;&gt;&gt;</code></td><td></td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.zhihu.com/question/28562088/answer/111668116" target="_blank" rel="noopener noreferrer">HashCode 计算扰动分析 - 关于 hashMap 的一些按位与计算的问题？ - 胖君的回答 - 知乎 </a></p><p><a href="http://baijiahao.baidu.com/s?id=1646023968436883100&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener noreferrer">一文读懂 Java 之 HashMap 索引位置计算</a></p><p><a href="https://blog.csdn.net/changhangshi/article/details/82114727" target="_blank" rel="noopener noreferrer">hashMap 在 jdk1.7 与 jdk1.8 中的原理及不同</a></p><p><a href="https://blog.csdn.net/qq_36520235/article/details/82417949" target="_blank" rel="noopener noreferrer">真实面试题之：Hashmap 的结构，1.7 和 1.8 有哪些区别</a></p><p><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html" target="_blank" rel="noopener noreferrer">Java 8 系列之重新认识 HashMap</a></p><p><a href="http://www.blogjava.net/killme2008/archive/2009/04/15/265721.html" target="_blank" rel="noopener noreferrer">java.util.HashMap 源码要点浅析</a></p><p><a href="https://coderanch.com/t/469720/java/HashMap-Entry-transient" target="_blank" rel="noopener noreferrer">Why HashMap.Entry is transient?</a></p><p><a href="https://segmentfault.com/q/1010000000630486" target="_blank" rel="noopener noreferrer">Java 中 HashMap 关键字 transient 的疑惑</a></p>`,47),h=[n];function l(p,k){return a(),s("div",null,h)}const r=i(t,[["render",l],["__file","ff927bd4.html.vue"]]),o=JSON.parse('{"path":"/posts/ff927bd4.html","title":"Java 笔记之 HashMap 保存数据","lang":"zh-CN","frontmatter":{"permalink":"/posts/ff927bd4.html","title":"Java 笔记之 HashMap 保存数据","tag":"java","abbrlink":"ff927bd4","date":"2019-12-15T08:41:35.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"Photo by **Pixabay **from Pexels HashMap使用由Node<K,V>（继承自Map.Entry<K,V>）组成的数组table保存数据。 在table中保存数据时根据key的hashCode计算到一个随机保存位置（但都在table数组的大小范围内），当存储的数据总量超过加载系数loadFactor规定的阈值时则对ta...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/ff927bd4.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Java 笔记之 HashMap 保存数据"}],["meta",{"property":"og:description","content":"Photo by **Pixabay **from Pexels HashMap使用由Node<K,V>（继承自Map.Entry<K,V>）组成的数组table保存数据。 在table中保存数据时根据key的hashCode计算到一个随机保存位置（但都在table数组的大小范围内），当存储的数据总量超过加载系数loadFactor规定的阈值时则对ta..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T03:36:59.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2019-12-15T08:41:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T03:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 笔记之 HashMap 保存数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-15T08:41:35.000Z\\",\\"dateModified\\":\\"2024-06-04T03:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"HashMap 有以下全局变量","slug":"hashmap-有以下全局变量","link":"#hashmap-有以下全局变量","children":[]},{"level":2,"title":"V put(K key, V value)","slug":"v-put-k-key-v-value","link":"#v-put-k-key-v-value","children":[]},{"level":2,"title":"V get(Object key)","slug":"v-get-object-key","link":"#v-get-object-key","children":[]},{"level":2,"title":"V remove(Object key)","slug":"v-remove-object-key","link":"#v-remove-object-key","children":[]},{"level":2,"title":"计算索引","slug":"计算索引","link":"#计算索引","children":[]},{"level":2,"title":"保存值","slug":"保存值","link":"#保存值","children":[]},{"level":2,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":2,"title":"位运算","slug":"位运算","link":"#位运算","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1653726847000,"updatedTime":1717472219000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":3},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":5.51,"words":1653},"filePathRelative":"_posts/JavaNote-HashMap保存数据.md","localizedDate":"2019年12月15日","excerpt":"<img src=\\"https://images.pexels.com/photos/159644/art-supplies-brushes-rulers-scissors-159644.jpeg?cs=srgb&amp;dl=art-supplies-arts-and-crafts-ballpens-159644.jpg&amp;fm=jpg\\" class=\\"full-image\\">\\n<p>Photo by **<a href=\\"https://www.pexels.com/@pixabay?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Pixabay </a>**from <strong><a href=\\"https://www.pexels.com/photo/pencils-in-stainless-steel-bucket-159644/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Pexels</a></strong></p>","autoDesc":true}');export{r as comp,o as data};
