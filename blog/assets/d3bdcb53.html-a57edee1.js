import{_ as a,r as t,o as e,c as p,a as n,b as i,d as o,e as c}from"./app-65563f13.js";const l={},u=c(`<p>Flutter 中的 scrollable widget 根据实现方式的不同，可以分为两大类：</p><ul><li>基于 RenderBox 的 box protocol 实现的，主要基于 Size 实现布局。常见的有 SingleChildScrollView。</li><li>基于 RenderSliver 的 sliver protocol 实现的，主要基于 SliverGeometry 实现布局。比如 CustomScrollView 及其子类 ListView、GridView 等继承自 ScrollView 的 Widget，以及基于 CustomScrollView 的 NestedScrollView、基于 Viewport 等的 PageView、TabBarView 等直接对 SliverFillViewport 等进行封装的 Widget。</li></ul><p>上述所有的 scrollable widget 其底层逻辑依然是对 Scrollable 的封装，其内部处理了 ScrollController、ScrollPosition（viewport 的 offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理 scrollable view 的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出 ScrollNotification）、RawGestureDetector（手势识别）等等一系列与 scroll 有关的逻辑，从而使得其他 scrollable view 能够比较方便的实现 scroll 效果。</p><p>本文只对 SingleChildScrollView 的源码实现做一简单分析：它是如何实现滚动效果，有什么优势和限制。</p><p>官方对其定义是：“A box in which a single widget can be scrolled”。明确表明，SingleChildScrollView 是遵守 box protocol 的 widget，在其内部也只能有一个<strong>box widget</strong>。</p><h2 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h2><p>下面是一个 SingleChildScrollView 的简单使用：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
            children<span class="token punctuation">:</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>
                <span class="token number">20</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
                      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
                      child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;item </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，SingleChildScrollView 中容纳了一个叫 Column 的 child，如果 Column 的高度无法在屏幕中完全展示，就 SingleChildScrollView 就会保证用户可以上下滑动，从而展示对应的内容；否则如果能够完全显示，则内容无法滑动。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><h3 id="singlechildscrollview" tabindex="-1"><a class="header-anchor" href="#singlechildscrollview" aria-hidden="true">#</a> SingleChildScrollView</h3><p><code>class SingleChildScrollView extends StatelessWidget {}</code></p><p>作为一个 StatelessWidget，SingleChildScrollView 的主要逻辑在他的<code>build()</code>方法中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AxisDirection</span> axisDirection <span class="token operator">=</span> <span class="token function">_getDirection</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Widget</span><span class="token operator">?</span> contents <span class="token operator">=</span> child<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>padding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      contents <span class="token operator">=</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> padding<span class="token operator">!</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里 scrollController 如果没有指定或者 primary 为 true 的话会使用上级最近的</span>
    <span class="token comment">// PrimaryScrollController</span>
    <span class="token keyword">final</span> <span class="token class-name">ScrollController</span><span class="token operator">?</span> scrollController <span class="token operator">=</span> primary
        <span class="token operator">?</span> <span class="token class-name">PrimaryScrollController</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> controller<span class="token punctuation">;</span>
    <span class="token comment">// 正如我们之前所说，SingleChildScrollView 实现其实也就是对 Scrollable 的</span>
    <span class="token comment">// 进一步封装，提供一些自己特有的内容，比如_SingleChildViewport</span>
    <span class="token class-name">Widget</span> scrollable <span class="token operator">=</span> <span class="token class-name">Scrollable</span><span class="token punctuation">(</span>
      dragStartBehavior<span class="token punctuation">:</span> dragStartBehavior<span class="token punctuation">,</span>
      axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
      controller<span class="token punctuation">:</span> scrollController<span class="token punctuation">,</span>
      physics<span class="token punctuation">:</span> physics<span class="token punctuation">,</span>
      restorationId<span class="token punctuation">:</span> restorationId<span class="token punctuation">,</span>
      viewportBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ViewportOffset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里使用了自定义的 Viewport 来实现布局逻辑</span>
        <span class="token keyword">return</span> <span class="token function">_SingleChildViewport</span><span class="token punctuation">(</span>
          axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
          offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span><span class="token comment">// offset 就是 Scrollable 处理的 ScrollPosition</span>
          clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> contents<span class="token punctuation">,</span><span class="token comment">// 就是我们传入的 child</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这里处理了滑动时键盘隐藏的问题</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyboardDismissBehavior <span class="token operator">==</span> <span class="token class-name">ScrollViewKeyboardDismissBehavior</span><span class="token punctuation">.</span>onDrag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scrollable <span class="token operator">=</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollUpdateNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> scrollable<span class="token punctuation">,</span>
        onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">ScrollUpdateNotification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">final</span> <span class="token class-name">FocusScopeNode</span> focusNode <span class="token operator">=</span> <span class="token class-name">FocusScope</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>notification<span class="token punctuation">.</span>dragDetails <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> focusNode<span class="token punctuation">.</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            focusNode<span class="token punctuation">.</span><span class="token function">unfocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> primary <span class="token operator">&amp;&amp;</span> scrollController <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> <span class="token class-name">PrimaryScrollController</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> scrollable<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> scrollable<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，正如之前所言，SingleChildScrollView 是依赖于封装 Scrollable 实现滑动效果。我们注意到在 Scrollable.viewportBuilder 中传入的是_SingleChildViewport，这个类处理了 Scrollable 传入的 ScrollPosition 也即这里的 ViewportOffset：</p><h3 id="singlechildviewport" tabindex="-1"><a class="header-anchor" href="#singlechildviewport" aria-hidden="true">#</a> _SingleChildViewport</h3><p>_SingleChildViewport 继承自 SingleChildRenderObjectWidget，主要逻辑是创建和更新 RenderObject——_RenderSingleChildViewport。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _SingleChildViewport <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  _RenderSingleChildViewport <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_RenderSingleChildViewport</span><span class="token punctuation">(</span>
      axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
      offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span><span class="token comment">// 此处的 offset 是来自于 Scrollable 的 ScrollPosition</span>
      clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> _RenderSingleChildViewport renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Order dependency: The offset setter reads the axis direction.</span>
    renderObject
      <span class="token punctuation">.</span><span class="token punctuation">.</span>axisDirection <span class="token operator">=</span> axisDirection
      <span class="token punctuation">.</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token comment">// 此处的 offset 是来自于 Scrollable 的 ScrollPosition</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span>clipBehavior <span class="token operator">=</span> clipBehavior<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见处理 offset 以便更新 content 实现滑动效果的主要逻辑在_RenderSingleChildViewport 这个 RenderObject 中。</p><h3 id="rendersinglechildviewport" tabindex="-1"><a class="header-anchor" href="#rendersinglechildviewport" aria-hidden="true">#</a> _RenderSingleChildViewport</h3><p>先看一下_RenderSingleChildViewport 的继承关系：<br><code>class _RenderSingleChildViewport extends RenderBox with RenderObjectWithChildMixin&lt;RenderBox&gt; implements RenderAbstractViewport{}</code></p><p>由上述代码可知，_RenderSingleChildViewport：</p><ul><li>是 RenderBox，也就是说其内部 lay out 遵守 box protocol</li><li>RenderObjectWithChildMixin&lt;RenderBox&gt;，RenderObjectWithChildMixin 为 RenderObject 提供一套管理单个 child 的模式，它的<strong>泛型指定了 child 的类型只能是 RenderBox</strong>，这也就是为什么我们之前说 SingleChildScrollView 的 child 只能是 box widget。</li><li>实现了 RenderAbstractViewport 接口，这个接口表示 render object 是内部比实际要大，提供了一些方法供 ScrollPosition 和其他 viewport 调用，来获取一些使此 viewport 在屏幕上可见的信息。</li></ul><p>在修改 axisDirection、offset、cacheExtent 等三个属性的时候会触发 markNeedsLayout() 方法重新进行 lay out；<br> 在修改 clipBehavior 属性的时候只会触发 markNeedsPaint() 和 markNeedsSemanticsUpdate() 方法。</p><p>此外，在每次设置 offset 的时候，都会对齐添加监听，这样当 Scrollable 中由于用户手势或者通过 ScrollController 调用 jumpTo/animateTo 等方法修改了 ScrollPosition 的时候，都会使得 Scrollab 的 viewport 也就是我们这里的_RenderSingleChildViewport 收到通知、从而进行对应处理：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">set</span> <span class="token function">offset</span><span class="token punctuation">(</span><span class="token class-name">ViewportOffset</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> _offset<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span>
    <span class="token comment">// 先移除已有的监听</span>
      _offset<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _offset <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span>
    <span class="token comment">// 再为新的 offset 添加监听</span>
      _offset<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">markNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_hasScrolled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">markNeedsSemanticsUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述在修改 offset 的时候添加/移除监听，在 attach/detach 方法中也有对应操作：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">PipelineOwner</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _offset<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _offset<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的分析我们也可以看出，除了设置修改 axisDirection、offset、cacheExtent 等属性的时候会触发 layout 外，其余时候只会触发重新 paint。</p><h4 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> layout</h4><p>一般来说 Flutter Widget 要展示在屏幕上需要经历 build、layout、paint 三步，在分析 SingleChildScrollView 如何根据 offset 的变化实现 scroll 效果之前，我们先看一下他是如何实现 layout 的。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">BoxConstraints</span> constraints <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraints<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      size <span class="token operator">=</span> constraints<span class="token punctuation">.</span>smallest<span class="token punctuation">;</span><span class="token comment">// 如果 child 为空，则按照父级的最小尺寸来</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有 child，就不限制主轴方向的尺寸，让 child 进行 layout（会得到最大的主轴尺寸）</span>
      child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">_getInnerConstraints</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">,</span> parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 在父级约束范围内尽可能满足 child 的尺寸</span>
      size <span class="token operator">=</span> constraints<span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用_viewportExtent 作为 offset 的 viewport 范围</span>
    offset<span class="token punctuation">.</span><span class="token function">applyViewportDimension</span><span class="token punctuation">(</span>_viewportExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新 viewport 的内容 content 的大小范围</span>
    offset<span class="token punctuation">.</span><span class="token function">applyContentDimensions</span><span class="token punctuation">(</span>_minScrollExtent<span class="token punctuation">,</span> _maxScrollExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token comment">// 只有横轴方向的约束，没有主轴方向的约束</span>
<span class="token class-name">BoxConstraints</span> <span class="token function">_getInnerConstraints</span><span class="token punctuation">(</span><span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token comment">// 如果是水平布局，就只限制高度，不限制宽度</span>
        <span class="token keyword">return</span> constraints<span class="token punctuation">.</span><span class="token function">heightConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token comment">// 如果是垂直布局，就只限制宽度，不限制高度</span>
        <span class="token keyword">return</span> constraints<span class="token punctuation">.</span><span class="token function">widthConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在 SingleChildScrollView 先让 child 在主轴方向尽可能自由布局，取得其最大值，然后自身在满足父级约束的情况下应用 child 的 size：如果 child.size 在父级约束内就直接应用，负责采用父级的约束。</p><p>这样最终的效果就是我们的 SingleChildScrollView 在 child 不超过父级约束的时候只占据 child 的内容，当 child 的内容大于父级约束时，SingleChildScrollView 自身的尺寸是父级给定的最大尺寸，而 child 本身在主轴方向上的尺寸是大于 SingleChildScrollView 的尺寸。这样也为我们后续通过监听 offset 修改显示部分 child 的内容实现滑动效果提供了可能。</p><blockquote><p>这也告诉我们 SingleChildScrollView 的父级需要指定指定主轴方向约束，否则会出现异常。<br> 比如在 Column 中直接使用 SingleChildScrollView 就会在内容过长的时候发生<em>overflowed</em>错误并且无法滑动 SingleChildScrollView，这是因为 SingleChildScrollView 和 child 都按照最长的尺寸布局，并且这个尺寸超过了父级约束。<br> 在 SingleChildScrollView 外层添加 Expanded 作为父级，相当于给他指定了一个约束（占据剩余空间），所以可以解决这个问题。</p></blockquote><p>之后，又根据_viewportExtent 以及_minScrollExtent/_maxScrollExtent 分别设置了 viewport 和 content 的范围，让我们看一下这三个值的来历：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token keyword">get</span> _viewportExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token keyword">return</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token keyword">return</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，_viewportExtent 是取值主轴方向的 size 大小，也就是 SingleChildScrollView 的尺寸。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token keyword">get</span> _minScrollExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  double <span class="token keyword">get</span> _maxScrollExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> size<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">-</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_minScrollExtent 默认返回 0.0；<br> _maxScrollExtent 返回的是主轴方向上 child 减去 SingleChildScrollView 之后的尺寸和 0.0 之间的最大值，换言之，如果 child 比 SingleChildScrollView 尺寸大，_maxScrollExtent 就是多出来的那一部分，也就是我们可以滑动的范围，否则为 0.0，也就是 SingleChildScrollView 不可滑动。</p><h4 id="paint" tabindex="-1"><a class="header-anchor" href="#paint" aria-hidden="true">#</a> paint</h4><p>到目前为止，我们的 SingleChildScrollView 顺利得到了尺寸，假设 child 尺寸大于 SingleChildScrollView 的最大尺寸，那么当用户滑动屏幕导致 offset 改变的时候，又是如何实现滑动效果的呢？</p><p>先看一个属性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// offset.pixels 表示 child 沿着与轴方向 axis direction 相反的方法 offset 的 pixels</span>
  <span class="token comment">// 比如 axis direction 是 down 的话，手指向上滑动屏幕此值增大，否则减小</span>
  <span class="token class-name">Offset</span> <span class="token keyword">get</span> _paintOffset <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_paintOffsetForPosition</span><span class="token punctuation">(</span>offset<span class="token punctuation">.</span>pixels<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据 position 计算出 child 实际在 SingleChildScrollView 中的 offset</span>
  <span class="token comment">// 以 child 的左上角在 SingleChildScrollView 左上角为 0.0，向上为负，向下为正</span>
  <span class="token class-name">Offset</span> <span class="token function">_paintOffsetForPosition</span><span class="token punctuation">(</span>double position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>axisDirection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axisDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>up<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> position <span class="token operator">-</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">+</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>position <span class="token operator">-</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">+</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span>position<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，_paintOffset 是根据 ScrollPosition 计算出来的真正的 child 和 SingleChildScrollView 的偏移 offset。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Offset</span> paintOffset <span class="token operator">=</span> _paintOffset<span class="token punctuation">;</span>

      <span class="token keyword">void</span> <span class="token function">paintContents</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可以看到这里，除了父级传入的 offset 外，还应用了 ScrollPosition 改变而变化的</span>
        <span class="token comment">// paintOffset。这样每次 Scrollable 修改 ScrollPosition 之后都会触发 paint</span>
        <span class="token comment">// 方法，使用新的 paintOffset 绘制 child</span>
        context<span class="token punctuation">.</span><span class="token function">paintChild</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> paintOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_shouldClipAtPaintOffset</span><span class="token punctuation">(</span>paintOffset<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> clipBehavior <span class="token operator">!=</span> <span class="token class-name">Clip</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _clipRectLayer<span class="token punctuation">.</span>layer <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">pushClipRect</span><span class="token punctuation">(</span>
          needsCompositing<span class="token punctuation">,</span>
          offset<span class="token punctuation">,</span>
          <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero <span class="token operator">&amp;</span> size<span class="token punctuation">,</span>
          paintContents<span class="token punctuation">,</span>
          clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
          oldLayer<span class="token punctuation">:</span> _clipRectLayer<span class="token punctuation">.</span>layer<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _clipRectLayer<span class="token punctuation">.</span>layer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">paintContents</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，我们可以得出以下结论：</p><p>_RenderSingleChildViewport 接收传入的 child，并监听传入的 Offset，当其变化时执行 markNeedPaint()；<br> 其先让 child 在主轴方向尽可能大的进行 layout，然后自身在父级约束条件下尽可能满足 child size，这样当 child 比父级给的约束大时，child 保持自身大小，而 viewport 的 size 则在父级给的最大尺寸内展示一部分 child 内容；<br> 当 Offset 变化时，按照 Offset.pixels 计算出对应的 paintOffset，重新绘制 child，展示另外一部分 child 的内容，从而实现滑动效果。</p><h4 id="hittest" tabindex="-1"><a class="header-anchor" href="#hittest" aria-hidden="true">#</a> hitTest</h4><p>_RenderSingleChildViewport 将 hitTest 直接转发给了 child：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  bool <span class="token function">hitTestChildren</span><span class="token punctuation">(</span><span class="token class-name">BoxHitTestResult</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span> required <span class="token class-name">Offset</span> position <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">addWithPaintOffset</span><span class="token punctuation">(</span>
        offset<span class="token punctuation">:</span> _paintOffset<span class="token punctuation">,</span>
        position<span class="token punctuation">:</span> position<span class="token punctuation">,</span>
        hitTest<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BoxHitTestResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Offset</span> transformed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">assert</span><span class="token punctuation">(</span>transformed <span class="token operator">==</span> position <span class="token operator">+</span> <span class="token operator">-</span>_paintOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> position<span class="token punctuation">:</span> transformed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>至此，SingleChildScrollView 基于 Scrollable、ScrollPosition 和_RenderSingleChildView 完成了支持内部单个 box widget 的滑动效果。</p><h2 id="优劣对比" tabindex="-1"><a class="header-anchor" href="#优劣对比" aria-hidden="true">#</a> 优劣对比</h2><p>相对于使用 Sliver 实现滑动效果的 Widget 来说，SingleChildScrollView 使用简单，使用的是 box protocol，适用于 child 通常是完全可见的，但是在某些特殊场景（比如竖屏变为横屏等）下可能显示不全的情况，SingleChildScrollView 可以保证在父级无法完整显示 child 的时候使其支持滑动。<br> SingleChildScrollView 使用起来也比较方便。</p><p>但是，正如上面分析的，无论 content 是否可见，SingleChildScrollView 都会将其 layout/paint（也就是说<strong>会将所有内容全部加载</strong>），这样如果 content 超出 viewport 的部分比较多就会非常<strong>耗费性能</strong>。</p><p>对于这种情况，就应该考虑使用 ListView/GridView/CustomScrollView 等基于 sliver protocol 的 scrollable widget。在 shrinkWrap 属性为 false 的情况下，viewport 会只创建<strong>屏幕可见部分 + viewport 前后缓存区域</strong>的内容，在 content 滑出这部分区域时 dispose，当其再次滑入时再 recreate，从而保证性能。</p><h2 id="进阶使用" tabindex="-1"><a class="header-anchor" href="#进阶使用" aria-hidden="true">#</a> 进阶使用</h2><h3 id="为-column-的-children-安全应用-spacedaround-center-等效果" tabindex="-1"><a class="header-anchor" href="#为-column-的-children-安全应用-spacedaround-center-等效果" aria-hidden="true">#</a> 为 Column 的 children 安全应用 spacedAround，center 等效果</h3><p>想要给 Column 的 children 设置 spacedAround 效果，又需要保证在父级空间不足时能够完整显示所有 children 的内容的话，就需要结合 SingleChildScrollView（空间不足时可滑动）、LayoutBuilder（获取父级约束信息）、ConstrainedBox（设置 Column 约束）来实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span><span class="token comment">// 获取父级约束信息</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> viewportConstraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span><span class="token comment">// 父级空间不足时可以滚动</span>
            child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
              constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>
        <span class="token comment">// 这里指定最小高度为父级高度，所以空间足够时 Column 可以按需分布 children，</span>
        <span class="token comment">// 空间不足时则将 children 一个个依次排列（互相之间 space 为 0）</span>
                minHeight<span class="token punctuation">:</span> viewportConstraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span><span class="token comment">// 默认主轴尺寸尽可能的小</span>
                mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceAround<span class="token punctuation">,</span>
                children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
                  <span class="token class-name">Container</span><span class="token punctuation">(</span>
                    <span class="token comment">// A fixed-height child.</span>
                    color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffeeee00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Yellow</span>
                    height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token class-name">Container</span><span class="token punctuation">(</span>
                    <span class="token comment">// Another fixed-height child.</span>
                    color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xff008000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Green</span>
                    height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用 ConstrainedBox 确保了 Column 主轴方向最小尺寸是父级大小：</p><ul><li>当父级尺寸大于 Column 的 children 尺寸时，多出的空隙由 Column 按照 MainAxisAlignment.spaceAround 原则分配，由于 SingleChildScrollView 的 child 尺寸和父级一致，所需不会滑动；</li><li>当父级尺寸小于 Column 的 children 尺寸时，Column 的尺寸为 children 的尺寸之和（相互之间没有间隙），此时 SingleChildScrollView 的 child 尺寸大于父级尺寸，所以可以上下滑动，保证了 Column 的 children 可以完全显示。</li></ul><h3 id="为-column-的-children-安全应用-expanded、space-等效果" tabindex="-1"><a class="header-anchor" href="#为-column-的-children-安全应用-expanded、space-等效果" aria-hidden="true">#</a> 为 Column 的 children 安全应用 Expanded、Space 等效果</h3><p>在一些场景下，需要用到 Expanded、Space 等填充 Column 剩余的空间以展示某些内容，比如一直位于屏幕下方的版权信息，但是当 Column 的 children 尺寸大于父级尺寸时，又会导致 children 内容无法完整显示，如果直接在 Column 上加一个 SingleChildScrollView 作为父级，又会因为 SingleChildScrollView 给 child 在主轴方向的尺寸无限制，而 Expanded 又要求占据所有剩余空间从而导致出错。</p><p>此时可以在上面例子的基础上增加 IntrinsicHeight/InstrinsicWidth 来解决此问题：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span><span class="token comment">// 获取父级约束信息</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> viewportConstraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span><span class="token comment">// 保证 child 超出父级限制时可以滑动</span>
            child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
              constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>
        <span class="token comment">// 这里指定最小高度为父级高度，所以空间足够时 Column 可以按需分布 children，</span>
        <span class="token comment">// 空间不足时则将 children 一个个依次排列（互相之间 space 为 0）</span>
                minHeight<span class="token punctuation">:</span> viewportConstraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              child<span class="token punctuation">:</span> <span class="token class-name">IntrinsicHeight</span><span class="token punctuation">(</span>
        <span class="token comment">// 当 minHeight:viewportConstraints.maxHeight 比 Column 想要的大时，</span>
        <span class="token comment">// 那么 Column 采用 viewportConstraints.maxHeight 的值</span>
        <span class="token comment">// 否则 Column 按照自己的内容大小来</span>
                child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
                    <span class="token class-name">Container</span><span class="token punctuation">(</span>
                      <span class="token comment">// A fixed-height child.</span>
                      color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffeeee00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Yellow</span>
                      height<span class="token punctuation">:</span> <span class="token number">320.0</span><span class="token punctuation">,</span>
                      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Expanded</span><span class="token punctuation">(</span>
                      <span class="token comment">// A flexible child that will grow to fit the viewport but</span>
                      <span class="token comment">// still be at least as big as necessary to fit its contents.</span>
                      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
                        color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffee0000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Red</span>
                        height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                        alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                        child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Flexible Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面例子中，作为 SingleChildScrollView 子级的 Column 内部能够使用 Expanded 的关键在于 InstrinsicHeight：它的定义是“一个将 child 调整为 child 固有高度的 widget”，也就是说，当<strong>child 可能有无限的高度时，与其无限拓展，它更希望将自己 size 定位一个更加合理的固有高度</strong>（Expanded、Spacer 等非 RenderObjectWidget 本身没有高度，所以在这里不会被计算）。</p><p>那么，当父级指定的最小约束 minHeight 大于 InstrinsicHeight.child 的最大固有高度时，child 将按照父级的最小高度设置；<br> 当父级指定的最大约束是 double.infinity 无限大时，InstrinsicHeight 会强制其 child 的大小为固有高度。</p><p>但是需要注意的是，IntrinsicHeight/InstrinsicWidth 因为至少需要对 child 进行两次 layout（一次获取 intrinsic dimensions，一次真正的执行 layout），所以会<strong>比较耗费性能</strong>。因此应当保证 Column 子级数量尽可能少，并且可以使用 SizeBox 给 child 指定大小以减轻计算 intrinsic dimensions 的压力。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>SingleChildScrollView 作为遵守 box protocol 的 scrollable widget，使用简单，适用于页面内容通常为全部可见，但特殊情况下可能无法完整显示因而需要支持滚动的情况。</p><p>其 child 只支持可以生成 RenderBox 的 Widget，会一次性创建所有 child 内容，在其内部使用 ListView 等时需要开启 shrinkWrap 从而导致其懒创建 item 失效，比较耗费性能。</p><p>因此，如果是大量 item、child 内容超出 viewport 部分时，应当考虑使用基于 Sliver 的 ListView/GridView/CustomScrollView 等。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,75),d={href:"https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",d,[i("SingleChildScrollView_api.flutter.dev"),o(s)])])])}const b=a(l,[["render",r],["__file","d3bdcb53.html.vue"]]);export{b as default};
