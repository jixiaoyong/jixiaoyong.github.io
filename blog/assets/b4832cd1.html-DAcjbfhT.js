import{_ as i,c as s,o as a,a as n}from"./app-BOA0_w3I.js";const e={},l=n(`<p>使用到的类有：</p><ul><li>android.support.design.widget.CoordinatorLayout</li><li>android.support.design.widget.AppBarLayout</li><li>android.support.design.widget.CollapsingToolbarLayout</li><li>android.support.v7.widget.Toolbar</li></ul><h2 id="效果预览" tabindex="-1"><a class="header-anchor" href="#效果预览"><span>效果预览</span></a></h2><p>如图：</p><figure><img src="http://jixiaoyong.github.io/blog/images/default/2018-02-22/coordinatorlayout.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="简要说明" tabindex="-1"><a class="header-anchor" href="#简要说明"><span>简要说明</span></a></h2><p>CoordinatorLayout 类，协调者布局，通过 Behavior 将一个子 view（<code>child</code>）的行为和另一个子 view（<code>dependency</code>）的活动联结起来，从而实现子 view 之间的联动。</p><p>AppBarLayout 类，是一个实现了材料设计的默认垂直布局的 ViewGroup，当其是 CoordinatorLayout 类的直接子 view 时，另外一个 CoordinatorLayout 的子 view 指定了 behavior 为 AppBarLayout.ScrollingViewBehavior 的实例（<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>）,且该子 view 需要是 NestedScrollingChild 的实现类。</p><p>CollapsingToolbarLayout 类，提供一个可以折叠的 toolbar 布局，可以在这个布局里面，设置 toolbar 以及和 toolbar 一起联动的子 view，本案例中是一张图片。</p><p>Toolbar 类，实现 toolbar 的效果。</p><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现"><span>具体实现</span></a></h2><p>源码：<a href="https://github.com/jixiaoyong/AndroidNote/tree/master/code/2018-02-22" target="_blank" rel="noopener noreferrer">github</a></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.AppBarLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">         &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.CollapsingToolbarLayout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">              app:layout_scrollFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;scroll|exitUntilCollapsed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">ImageView</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                  app:layout_collapseMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;parallax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.v7.widget.Toolbar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                  app:layout_collapseMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.CollapsingToolbarLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.AppBarLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.v4.view.ViewPager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            app:layout_behavior</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@string/appbar_scrolling_view_behavior&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">android.support.design.widget.CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>CoordinatorLayout 在最外层，注意其直接子 view 必须就是要实现联动的 view，否则联动失效。</li><li>CollapsingToolbarLayout 必须设置 layout_scrollFlags，其余属性可选。</li></ol><blockquote><p>layout_scrollFlags 说明如下：</p><p><strong>scroll</strong>：所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个 flag 的 view 将被固定在屏幕顶部。</p><p><strong>enterAlways</strong>：这个 flag 让任意向下的滚动都会导致该 view 变为可见，启用快速“返回模式”。</p><p><strong>enterAlwaysCollapsed</strong>：假设你定义了一个最小高度（minHeight）同时 enterAlways 也定义了，那么 view 将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p><p><strong>exitUntilCollapsed</strong>：当你定义了一个 minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p><p><strong>snap</strong>：当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部 25% 显示，它将折叠。相反，如果它的底部 75% 可见，那么它将完全展开。</p><p>作者：尹 star</p><p>链接：<a href="https://www.jianshu.com/p/5287d090e777" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/5287d090e777</a></p></blockquote><ol><li>CollapsingToolbarLayout 的子 view 需要指定 layout_collapseMode，还有一点需注意：<strong>和 toolbar 联动的子 view 高度需大于 toolbar 高度，否则无效果。</strong></li><li>ViewPager 就是本案例中触发子 view 联动效果的<code>dependency</code>，需要指定其 behavior：</li></ol><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其实际对应于 android.support.design.widget.AppBarLayout$ScrollingViewBehavior，这个是系统实现的一个 behavior，用于和嵌套滑动事件绑定，<strong>指定该 behavior 的子 view 需要是 NestedScrollingChild 的实现类</strong>（系统提供了 4 个实现类：NavigationMenuView、NestedScrollView、RecyclerView、SwipleRefreshLayout），所以 viewPager 中页面有上述 4 个类或其子类时，才能实现绑定效果。</p><h2 id="延伸" tabindex="-1"><a class="header-anchor" href="#延伸"><span>延伸</span></a></h2><p><strong>自定义 Behavior</strong></p><p>自定义 Behavior 有两个目的：</p><ol><li>将两个或多个子 view 绑定；</li><li>将一个子 view 与另一个子 view 的滑动事件绑定在一起</li></ol><p>两者的差异在于在实现<code>CoordinatorLayout.Behavior&lt;T&gt;</code> 类时候具体重写的方法不一样。</p><p><strong>目的 1</strong>：需要重写的方法有：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> layoutDependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dependency) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //如果 dependency 是要依赖的子 view（此处是 TempView 类）的实例，说明它就是我们所需要的 Dependency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TempView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//每次 dependency 位置发生变化，都会执行 onDependentViewChanged 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onDependentViewChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dependency) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //根据 dependency 的位置，设置 child 的位置，对 child 进行想要实现的变化</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//返回 true 表示改变了 child 的尺寸和位置参数，否则返回 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目的 2</strong>：需要重写的方法有：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//判断是否要开始根据 dependency 子 view 的行为改变 child 的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onStartNestedScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> coordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ImageView</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> directTargetChild</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> axes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ImageView </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> axes </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SCROLL_AXIS_VERTICAL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//子 view 是 ImageView，并且滑动的方向是垂直的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//当 dependency 子 view 滑动时，对 child 进行相应处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onNestedPreScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> CoordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> coordinatorLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ImageView</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">NonNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] consumed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">onNestedPreScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(coordinatorLayout, child, target, dx, dy, consumed, type);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h1 id="自定义-behavior-的总结" tabindex="-1"><a class="header-anchor" href="#自定义-behavior-的总结"><span>自定义 Behavior 的总结</span></a></h1><ol><li>确定 CoordinatorLayout 中 View 与 View 之间的依赖关系，通过 layoutDependsOn() 方法，返回值为 true 则依赖，否则不依赖。</li><li>当一个被依赖项 dependency 尺寸或者位置发生变化时，依赖方会通过 Byhavior 获取到，然后在 onDependentViewChanged 中处理。如果在这个方法中 child 尺寸或者位置发生了变化，则需要 return true。</li><li>当 Behavior 中的 View 准备响应嵌套滑动时，它不需要通过 layoutDependsOn() 来进行依赖绑定。只需要在 onStartNestedScroll() 方法中通过返回值告知 ViewParent，它是否对嵌套滑动感兴趣。返回值为 true 时，后续的滑动事件才能被响应。</li><li>嵌套滑动包括滑动 (scroll) 和 快速滑动 (fling) 两种情况。开发者根据实际情况运用就好了。</li><li>Behavior 通过 3 种方式绑定：1. xml 布局文件。2. 代码设置 layoutparam。3. 自定义 View 的注解。</li></ol><p>来源：<a href="http://blog.csdn.net/briblue/article/details/73076458" target="_blank" rel="noopener noreferrer">针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客</a></p></blockquote><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="http://blog.csdn.net/briblue/article/details/73076458" target="_blank" rel="noopener noreferrer">针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客</a></li><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0824/6565.html" target="_blank" rel="noopener noreferrer">CoordinatorLayout 自定义 Behavior 并不难，由简到难手把手带你撸三款！ - 泡在网上的日子</a></li><li><a href="https://www.jianshu.com/p/8c92d0a1e591" target="_blank" rel="noopener noreferrer">一步一步深入理解 CoordinatorLayout - 简书</a></li><li><a href="https://www.jianshu.com/p/5287d090e777" target="_blank" rel="noopener noreferrer">使用 CoordinatorLayout 打造一个炫酷的详情页 - 简书</a></li></ul>`,30),t=[l];function h(p,r){return a(),s("div",null,t)}const o=i(e,[["render",h],["__file","b4832cd1.html.vue"]]),k=JSON.parse('{"path":"/posts/b4832cd1.html","title":"Android 实现可折叠 toolbar","lang":"zh-CN","frontmatter":{"permalink":"/posts/b4832cd1.html","title":"Android 实现可折叠 toolbar","tag":"android","abbrlink":"b4832cd1","date":"2018-02-22T07:01:10.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"使用到的类有： android.support.design.widget.CoordinatorLayout android.support.design.widget.AppBarLayout android.support.design.widget.CollapsingToolbarLayout android.support.v7.widge...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/b4832cd1.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Android 实现可折叠 toolbar"}],["meta",{"property":"og:description","content":"使用到的类有： android.support.design.widget.CoordinatorLayout android.support.design.widget.AppBarLayout android.support.design.widget.CollapsingToolbarLayout android.support.v7.widge..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://jixiaoyong.github.io/blog/images/default/2018-02-22/coordinatorlayout.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T03:36:59.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:published_time","content":"2018-02-22T07:01:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T03:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android 实现可折叠 toolbar\\",\\"image\\":[\\"http://jixiaoyong.github.io/blog/images/default/2018-02-22/coordinatorlayout.gif\\"],\\"datePublished\\":\\"2018-02-22T07:01:10.000Z\\",\\"dateModified\\":\\"2024-06-04T03:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"效果预览","slug":"效果预览","link":"#效果预览","children":[]},{"level":2,"title":"简要说明","slug":"简要说明","link":"#简要说明","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]},{"level":2,"title":"延伸","slug":"延伸","link":"#延伸","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1653726847000,"updatedTime":1717472219000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":3},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":4.55,"words":1364},"filePathRelative":"_posts/Android实现可折叠toolbar.md","localizedDate":"2018年2月22日","excerpt":"<p>使用到的类有：</p>\\n<ul>\\n<li>android.support.design.widget.CoordinatorLayout</li>\\n<li>android.support.design.widget.AppBarLayout</li>\\n<li>android.support.design.widget.CollapsingToolbarLayout</li>\\n<li>android.support.v7.widget.Toolbar</li>\\n</ul>\\n<h2>效果预览</h2>\\n<p>如图：</p>\\n<figure><img src=\\"http://jixiaoyong.github.io/blog/images/default/2018-02-22/coordinatorlayout.gif\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{o as comp,k as data};
