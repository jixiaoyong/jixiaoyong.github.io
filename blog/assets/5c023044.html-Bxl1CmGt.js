import{_ as i,c as s,o as a,a as n}from"./app-B34IKLrY.js";const t={},l=n(`<p><a href="https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF" target="_blank" rel="noopener noreferrer">贝塞尔曲线</a>是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。</p><figure><img src="https://jixiaoyong.github.io/images/20200413215502.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本文代码链接：<a href="https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/view/BezierViewAnim.kt" target="_blank" rel="noopener noreferrer">https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/view/BezierViewAnim.kt</a></p><h2 id="贝塞尔曲线介绍" tabindex="-1"><a class="header-anchor" href="#贝塞尔曲线介绍"><span>贝塞尔曲线介绍</span></a></h2><p>下图是二阶贝塞尔曲线绘制方法介绍，只要各个点满足条件：AD/AB = BE/BC = DF/DE，那么当沿着当前线段移动 D、E 点时，F 点的运动轨迹就是一个贝塞尔曲线：</p><figure><img src="https://jixiaoyong.github.io/images/20200413215622.png" alt="图片来自：https://www.cnblogs.com/wjtaigwh/p/6647114.html" tabindex="0" loading="lazy"><figcaption>图片来自：<a href="https://www.cnblogs.com/wjtaigwh/p/6647114.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wjtaigwh/p/6647114.html</a></figcaption></figure><p>动图示意如下：</p><figure><img src="https://jixiaoyong.github.io/images/20200413222352.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以在下面的两个网站在线体验贝塞尔曲线：</p><p><a href="https://aaaaaaaty.github.io/bezierMaker.js/playground/playground.html" target="_blank" rel="noopener noreferrer">https://aaaaaaaty.github.io/bezierMaker.js/playground/playground.html</a></p><p><a href="https://bezier.method.ac/" target="_blank" rel="noopener noreferrer">https://bezier.method.ac/</a></p><h2 id="计算控制点坐标" tabindex="-1"><a class="header-anchor" href="#计算控制点坐标"><span>计算控制点坐标</span></a></h2><p>在绘制折线图时，我们获取的数据可以当做贝塞尔曲线的端点，Android 为我们提供了绘制二阶和三阶贝塞尔曲线的方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">quadTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y2)</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//二阶贝塞尔曲线：分别是控制点的 x、y 坐标和结束的的 x、y 坐标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cubicTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x3, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y3)</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//三阶贝塞尔曲线：分别是控制点 1、2 的 x、y 坐标和结束的的 x、y 坐标</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>Path.cubicTo()</code>方法为例，在绘制三阶贝塞尔曲线时，起点和终点已知，剩下工作就是计算两个控制点的坐标。</p><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1"><span>方法 1</span></a></h3><p>按照贝塞尔曲线的定义，计算各个点对应控制点的坐标，具体的计算原理我们可以参考<a href="https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html" target="_blank" rel="noopener noreferrer">这篇文章</a></p><p>假设起点、终点分别为<code>startPoint</code>，<code>endPoint</code>，起点前一个点为<code>beforePointF</code>，终点后一个点为<code>afterPoint</code>，那么终止点 1、2（<code>controlPoint1</code>、<code>controlPoint2</code>）的坐标满足（其中 a,b 为任意正数，比如 1/6）：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint1X </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> startPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (endPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> beforePointF.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint1Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> startPoint.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (endPoint.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> beforePointF.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint2X </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (afterPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> startPoint.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint2Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (afterPoint.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> startPoint.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里要处理特殊情况：第一个点 P<sub>0</sub>的前一个仍然为 P<sub>0</sub>，最后一个点 P<sub>n</sub>的后一个点仍为 P<sub>n</sub></p></blockquote><p>但这种情况绘制出来的贝塞尔曲线如下：</p><figure><img src="https://jixiaoyong.github.io/images/20200413220840.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到除了 P<sub>0</sub>和 P<sub>n</sub>外，其他点的曲线坐标和对应的点坐标不一致。</p><h3 id="方法-2" tabindex="-1"><a class="header-anchor" href="#方法-2"><span>方法 2</span></a></h3><p>为了解决方法 1 存在的问题，我们人为的在两个点之间加入两个控制点，这样在<code>startPoint</code>，<code>endPoint</code>之间的贝塞尔曲线首尾点的坐标必定落在起点和终点上（思路来自<a href="https://blog.csdn.net/laizuling/article/details/51162011" target="_blank" rel="noopener noreferrer">这里</a>）。</p><p>所以，两个控制点的坐标为：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint1X </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (startPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint1Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> startPoint.y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint2X </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (startPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> controlPoint2Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样绘制出来的曲线比较符合我们的要求。</p><p>所以，最终贝塞尔曲线 path 计算方法如下：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bezierPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">bezierPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(pointList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">pointList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">pointList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEachIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { index, startPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (index) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        pointList.lastIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            //在绘制 P(n-1) ~ P(n) 点的贝塞尔曲线时，已经绘制到了 P(n) 点，所以此处不用再绘制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pointList[index </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            bezierPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cubicTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                (startPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">                -</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">startPoint.y, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//为了解决 view 坐标原点在左上角而做的特殊处理，下同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                (startPoint.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endPoint.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">                -</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">endPoint.y,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                endPoint.x,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">                -</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">endPoint.y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给-path-添加渐变背景" tabindex="-1"><a class="header-anchor" href="#给-path-添加渐变背景"><span>给 Path 添加渐变背景</span></a></h2><p>我们可以使用<code>Paint.setShader(Shader shader)</code>方法，在绘制 Path 的时候绘制渐变背景。</p><p>渐变背景使用 Shader 实现。</p><p>为了确保绘制效果，我们需要在 Path 计算完成后，将其闭合，以确保绘制的背景在我们需要的范围内：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> shadowPaint </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Paint.ANTI_ALIAS_FLAG)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPaint.style </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Paint.Style.FILL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> shader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">            LinearGradient</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">500F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, Color.GREEN, Color.TRANSPARENT, Shader.TileMode.CLAMP)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPaint.shader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> shader</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> shadowPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lineTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(endPoint.x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">800F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lineTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(startPoint.x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">800F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lineTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(startPoint.x, startPoint.y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        shadowPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">drawPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(shadowPath, shadowPaint)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给-path-添加动画" tabindex="-1"><a class="header-anchor" href="#给-path-添加动画"><span>给 Path 添加动画</span></a></h2><p>为了让 Path 看起来是从起点慢慢绘制到终点去的，我们可以先计算 path 的总长度，然后结合<code>ValueAnimator</code>实时获得对应长度的 path 并绘制：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mValueAnimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ValueAnimator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ofFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mValueAnimator.duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mValueAnimator.repeatCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ValueAnimator.INFINITE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mValueAnimator.interpolator </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> AccelerateDecelerateInterpolator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mValueAnimator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addUpdateListener</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //获取从 0-1 的变化值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> animation.animatedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Float</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //不断刷新绘图，实现路径绘制</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mValueAnimator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>onDraw()</code>方法中绘制对应的 path：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mPathMeasure: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">PathMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PathMeasure</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bezierPath, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> totalPathLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mPathMeasure.length </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取 path 总长度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 按照进度绘制贝塞尔曲线</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> stopD </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> totalPathLength</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">mPathMeasure.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0F</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, stopD, dstPath, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//按照长度比例截取对应的 path 并赋值给 dstPath</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//bezier anim</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">drawPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(dstPath, bezierPaint) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//绘制对应的 path</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jixiaoyong.github.io/images/20200413222302.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ul><li>使用 canvas 绘制坐标时，需要注意 android 的坐标原点位于屏幕左上角。所以在绘制曲线图时可以先将坐标原点向下平移一段距离，再绘制对应坐标（可以绘制实际的 y 坐标负值）</li><li>在拼接贝塞尔曲线的 path 时候注意，<code>path.moveTo()</code>方法会将 path 切断</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html" target="_blank" rel="noopener noreferrer">https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html</a><br><a href="https://blog.csdn.net/laizuling/article/details/51162011" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/laizuling/article/details/51162011</a></p>`,45),h=[l];function e(k,p){return a(),s("div",null,h)}const d=i(t,[["render",e],["__file","5c023044.html.vue"]]),g=JSON.parse('{"path":"/posts/5c023044.html","title":"Android 笔记之贝塞尔曲线的应用","lang":"zh-CN","frontmatter":{"permalink":"/posts/5c023044.html","title":"Android 笔记之贝塞尔曲线的应用","tag":"android","abbrlink":"5c023044","date":"2020-04-10T01:49:03.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"贝塞尔曲线是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。 本文代码链接：https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/v...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/5c023044.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Android 笔记之贝塞尔曲线的应用"}],["meta",{"property":"og:description","content":"贝塞尔曲线是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。 本文代码链接：https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/v..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/20200413215502.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T16:00:22.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:published_time","content":"2020-04-10T01:49:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T16:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android 笔记之贝塞尔曲线的应用\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/20200413215502.jpg\\",\\"https://jixiaoyong.github.io/images/20200413215622.png\\",\\"https://jixiaoyong.github.io/images/20200413222352.webp\\",\\"https://jixiaoyong.github.io/images/20200413220840.jpg\\",\\"https://jixiaoyong.github.io/images/20200413222302.jpg\\"],\\"datePublished\\":\\"2020-04-10T01:49:03.000Z\\",\\"dateModified\\":\\"2024-05-31T16:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"贝塞尔曲线介绍","slug":"贝塞尔曲线介绍","link":"#贝塞尔曲线介绍","children":[]},{"level":2,"title":"计算控制点坐标","slug":"计算控制点坐标","link":"#计算控制点坐标","children":[{"level":3,"title":"方法 1","slug":"方法-1","link":"#方法-1","children":[]},{"level":3,"title":"方法 2","slug":"方法-2","link":"#方法-2","children":[]}]},{"level":2,"title":"给 Path 添加渐变背景","slug":"给-path-添加渐变背景","link":"#给-path-添加渐变背景","children":[]},{"level":2,"title":"给 Path 添加动画","slug":"给-path-添加动画","link":"#给-path-添加动画","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1653726847000,"updatedTime":1717171222000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":3},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":4.12,"words":1236},"filePathRelative":"_posts/Android自定义View之绘制贝塞尔曲线.md","localizedDate":"2020年4月10日","excerpt":"<p><a href=\\"https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">贝塞尔曲线</a>是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。</p>\\n<figure><img src=\\"https://jixiaoyong.github.io/images/20200413215502.jpg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{d as comp,g as data};
