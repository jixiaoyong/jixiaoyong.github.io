import{_ as t,r as p,o,c,a as n,b as s,d as e,e as i}from"./app-0ccbf06c.js";const r={},l=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本文介绍了数组、链表等数据结构。</p><p>设定所有排序：小 → 大。</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组（array）是一组具有相同类型元素的集合，用一段连续的内存来保存。使用下标来访问保存的元素，如<code>a[0]</code>。</p><p>数组是一种数据存储结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组大小固定，对指定下标元素读写快 O(1)，但是查找慢 O(N)，删除元素慢 O(N)。</p><h3 id="有序数组" tabindex="-1"><a class="header-anchor" href="#有序数组" aria-hidden="true">#</a> 有序数组</h3><p>在每次插入的时候对元素进行排序，就得到有序数组。</p><p>有序数组查找快 O(LogN)，但插入慢 O(N)，删除元素慢 O(N)。</p><p><strong>有序数组插入</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> sortArr<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sortArr<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> key
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> insertIndex <span class="token operator">=</span> <span class="token operator">++</span>size <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> sortArr<span class="token punctuation">[</span>insertIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sortArr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> sortArr<span class="token punctuation">[</span>insertIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        insertIndex<span class="token operator">--</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    sortArr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> key
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在有序数组要找到某个元素 t 可以使用二分查找，其思想是：</p><ol><li>选取一个中间值 n 将当前数组一分为二。</li><li>如果<code>t==n</code>那么查找结束，如果<code>t&lt;n</code>,那么在右半部分数组查找，否则在左半部分数组查找。</li><li>重复步骤<code>1</code>,<code>2</code>，直到找到 n 或者数组已经不可再分（不存在 n），结束查找。</li></ol><p><strong>二分法查找</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>array<span class="token operator">:</span> IntArray<span class="token punctuation">,</span> key<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> centerIndex <span class="token operator">=</span> array<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span>
    <span class="token keyword">var</span> centerKey <span class="token operator">=</span> array<span class="token punctuation">[</span>centerIndex<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">{</span>
        key <span class="token operator">==</span> centerKey <span class="token operator">-&gt;</span> centerIndex
        key <span class="token operator">&lt;</span> centerKey <span class="token operator">-&gt;</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> centerIndex<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>centerIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><p>链表的每个节点除了保存的数据外，还保存着下一个节点的引用<code>next</code>，最后一个元素中该引用为<code>null</code>。</p><p>链表的大小不固定，查找，删除，插入指定节点都需要 O(N)</p><p>链表有以下分类：</p><ul><li><p>单链表 每个节点只有指向下一个节点的引用，链表只保留第一个链节点的引用<code>first</code></p><figure><img src="https://jixiaoyong.github.io/images/20190101132535.png" alt="单链表" tabindex="0" loading="lazy"><figcaption>单链表</figcaption></figure></li><li><p>双向链表 每个节点保存有父节点和子节点的引用。双向链表也可以是双端链表。</p><figure><img src="https://jixiaoyong.github.io/images/20190101132614.png" alt="双向链表" tabindex="0" loading="lazy"><figcaption>双向链表</figcaption></figure></li></ul><p><strong>双端链表</strong> 双端链表保存第一个链节点<code>farst</code>和最后一个链节点<code>last</code>的引用。</p><figure><img src="https://jixiaoyong.github.io/images/20190101132649.png" alt="双端链表" tabindex="0" loading="lazy"><figcaption>双端链表</figcaption></figure><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2>`,25),u={href:"https://github.com/jixiaoyong/Notes-Files/tree/master/AndroidLearningResource/java_note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/link",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"链表",-1),k=n("h2",{id:"参考文献",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文献","aria-hidden":"true"},"#"),s(" 参考文献")],-1),v={href:"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"},m={href:"https://book.douban.com/subject/1144007/",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[n("a",u,[s("👉 点这里"),e(a)]),s(" 查看"),d,s("源码")]),k,n("p",null,[n("a",v,[s("数组--维基百科"),e(a)])]),n("p",null,[n("a",m,[s("Java 数据结构和算法（第二版）Robert Laforce 计晓云等译"),e(a)])])])}const f=t(r,[["render",b],["__file","9a784fe0.html.vue"]]);export{f as default};
