import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as n,b as a,d as t,e}from"./app-b04f94c7.js";const c={},u=e('<blockquote><p>本文讨论的 Flutter 动画主要限定在: <em>随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态</em> 这一范围。</p></blockquote><p>Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类：</p><ul><li>Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Tween、Curve 等</li><li>基于底层实现，提供进一步封装的 Flutter 动画相关的 Widget 类，比如 AnimatedWidget、ImplicitlyAnimatedWidget 和他们的子类。</li></ul><p>他们的关系如下：</p><p>AnimationController 通过 Ticker 监听 Flutter 屏幕帧刷新：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct2.png" alt="Flutter中AnimationController与Ticker关系" tabindex="0" loading="lazy"><figcaption>Flutter中AnimationController与Ticker关系</figcaption></figure><p>每一帧刷新后，AnimationController 监听并根据 Duration 等计算出当前的 Animation.value；<br> 此外也可以通过 Tween 将 double 类型转化为其他的类型比如 Offset 等；<br> 上述两种方式中 value 都是随着时间线性变化，而 Curve 可以与 CurveTween、AnimationController 等结合使 value 实现非线性的变化。</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct1.png" alt="Flutter各种动画底层类关系" tabindex="0" loading="lazy"><figcaption>Flutter各种动画底层类关系</figcaption></figure><p>当随着时间变化，计算出当前的 Animation.value 时，便可以根据此值修改 Flutter Widget 的各个属性，从而实现动画的视觉效果。</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_widget.png" alt="Flutter中与动画有关的Widget" tabindex="0" loading="lazy"><figcaption>Flutter中与动画有关的Widget</figcaption></figure><p>从上图可以看到，Flutter 提供的动画 Widget 主要分为两大类：</p><ul><li><p>ImplicitlyAnimatedWidget 隐式动画，关于动画的开始、停止等都封装在 Widget 内部，只要 Widget 前后传入的值不同便可以自动从 old 渐变到 new，内置的这些类主要以 AnimatedFoo 命名。</p></li><li><p>AnimatedWidget，显式动画，需要使用者自己创建 Animation（一般是 AnimationController）并通过其管理动画，此类 Widget 主要是监听 AnimationController 的值并刷新 Widget 的内容。</p><p>此类 Widget 主要有三种使用方式：</p><ul><li>继承 AnimatedWidget</li><li>使用 AnimatedBuilder</li><li>使用各种内置的 AnimatedWidget 子类，一般以 FooTransition 命名。</li></ul></li></ul><p>对于 Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_select.png" alt="如何实现Flutter中的动画" tabindex="0" loading="lazy"><figcaption>如何实现Flutter中的动画</figcaption></figure><p>简单来说，Flutter 有一些内置的动画，在要写动画的时候，可以依次考虑（实现程度由易到难）：</p>',15),r={href:"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916",target:"_blank",rel:"noopener noreferrer"},d={href:"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185",target:"_blank",rel:"noopener noreferrer"},k={href:"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"FooTranslation",-1),v=n("li",null,"AnimatedBuilder / AnimatedWidget",-1),b=n("li",null,"CustomPainter",-1),g=e(`<br><p>本文主要分析 AnimationController 及其相关类。</p><h1 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h1><p>AnimationController 是 Flutter 中动画的基石，它继承自 Animation，根据不同的方法调用创建对应的 Simulation 并开始监听传入的 Ticker；</p><p>每当 Flutter 中帧刷新时，从_simulation 中获取当前 Animation._value 并对 listener 发出通知；</p><p>这样需要使用 Animation.value 的各个 Widget 便可以根据其值修改自身属性，实现动画视觉效果。</p><h2 id="animation" tabindex="-1"><a class="header-anchor" href="#animation" aria-hidden="true">#</a> Animation</h2><p>根据上述分析，我们首先来看一下 Animation 类：</p><blockquote><p>An animation with a value of type T</p></blockquote><p>Animation 主要的作用是持有 value 和 status，并允许其他对象监听二者的变化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Listenable</span> <span class="token keyword">implements</span> <span class="token class-name">ValueListenable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/// The current value of the animation.</span>
    <span class="token class-name">T</span> <span class="token keyword">get</span> value<span class="token punctuation">;</span>
    <span class="token comment">/// The current status of this animation.</span>
    <span class="token class-name">AnimationStatus</span> <span class="token keyword">get</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Animation 继承自 Listenable，实现 ValueListenable 接口，其他类可以通过 addListener/removeListener 或者 addStatusListener/removeStatusListener 监听 Animation 的 value 或者 status 变化。</p><p>Animation 共有 4 种状态：dismissed、forward、reverse、completed。</p><p>除此之外，Animation.drive 方法可以创建一个新的将传入的 Animatable 应用到自身的 Animation。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@optionalTypeArgs</span>
  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> drive<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">is</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过Animatable.transform将此Animation.value的值从double转化为U</span>
    <span class="token keyword">return</span> child<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">as</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，提供了将 <code>Animation&lt;double&gt;</code> 转化为 <code>Animation&lt;U&gt;</code> 类型的方法。</p><h3 id="其他子类" tabindex="-1"><a class="header-anchor" href="#其他子类" aria-hidden="true">#</a> 其他子类</h3><p>除了后面要详细分析的 AnimationController 之外，Animation 还有如下子类：</p><table><thead><tr><th>class</th><th>说明</th></tr></thead><tbody><tr><td>AlwaysStoppedAnimation</td><td>永远停留在指定值的 animation</td></tr><tr><td><strong>ProxyAnimation</strong></td><td>代理 Animation，适用于动画可能会变化的情况，先使用 ProxyAnimation 应用一个 Animation，然后再修改为其他 Animation（不用手动添加移除 listener）</td></tr><tr><td>ReverseAnimation</td><td>返回和当前 animation 反方向的 Animation</td></tr><tr><td><strong>CurvedAnimation</strong></td><td>可以为传入的 animation 使用 Curve 的 animation，适用于将原先线性变化的 Animation 改为非线性的</td></tr><tr><td>TrainHoppingAnimation</td><td>监听传入的两个 Animation&lt;double&gt;，当第二个 Animation 的值超过第一个 Animation 的值时自动切换到第二个并回调 onSwitchedTrain。如果一开始两个 Animation 就在同一个值，则切换到第二个并不会调用 onSwitchedTrain。</td></tr><tr><td>CompoundAnimation</td><td>可以组合多个 Animation&lt;T&gt;的接口，当 Animation&lt;T&gt; next 处于运动状态时返回 next 的状态，否则返回 Animation&lt;T&gt; first 的状态。</td></tr></tbody></table><p>对于上述的 CompoundAnimation，子类只需重写 <code>double get value</code> 方法即可，其有三个子类：</p><ul><li><code>AnimationMean</code> 返回 first 和 next 值和的二分之一，值为 double</li><li><code>AnimationMax&lt;T extends num&gt;</code> 返回 first 和 next 中最大值</li><li><code>AnimationMin&lt;T extends num&gt;</code> 返回 first 和 next 中最小值</li></ul><h2 id="animationcontroller" tabindex="-1"><a class="header-anchor" href="#animationcontroller" aria-hidden="true">#</a> AnimationController</h2><blockquote><p>A controller for an animation.</p></blockquote><p>尽管有各种子类，但 Animation 最常用的子类是 AnimationController，使用者可以用它来控制、监听动画、创建其他动画。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AnimationController</span> <span class="token keyword">extends</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span> <span class="token class-name">AnimationEagerListenerMixin</span><span class="token punctuation">,</span> <span class="token class-name">AnimationLocalListenersMixin</span><span class="token punctuation">,</span> <span class="token class-name">AnimationLocalStatusListenersMixin</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>AnimationController 有两种构造方法，这两种构造方法主要会初始化以下变量：</p><ul><li>double value 当前值</li><li>Duration? duration,reverseDuration 动画正向、反向运行的时长，初始化时可以为 null，但在实际开始动画之前，至少保证 duration 不为 null</li><li>double lowerBound,double upperBound 当 value 触达此值时，animation 分别被认为是 dismissed、completed</li><li>Ticker? _ticker 由构造方法中必传的 TickerProvider vsync 创建</li></ul><p>他的两个构造方法分别是：</p><ul><li><p>AnimationController()</p><p>默认构造方法，double lowerBound,double upperBound 默认分别为 0.0，1.0</p></li><li><p>AnimationController.unbounded()</p><p>不限制 value 值的构造方法，double lowerBound,double upperBound 默认分别为 double.negativeInfinity，double.infinity。适用于没有预设编辑的物理模拟动画。</p></li></ul><p>在这两个构造方法内部，都会通过<code>_ticker = vsync.createTicker(_tick)</code>创建_ticker，并保证当_ticker 回调时执行<code>AnimationController._tick()</code>方法。</p><blockquote><p>这里的 TickerProvider 主要有 2 种：</p><ul><li>SingleTickerProviderStateMixin 适用于 State 中只有一个 AnimationController 的情况，性能更好</li><li>TickerProviderStateMixin 适用于 State 生命周期内有多个 AnimationController 的情况</li></ul></blockquote><br><p>除了从 Animation 继承的方法外，AnimationController 还提供了如下方法，用于操纵动画：</p><p><strong>操纵从<code>double? from</code>正向/反向开始动画</strong>：</p><ul><li>TickerFuture forward({ double? from })</li><li>TickerFuture reverse({ double? from })</li></ul><p><strong>操纵正向/反向开始朝向<code>double target</code>开始动画</strong>，此类动画还可以改变<em>Duration</em>和<em>Curve</em>：</p><ul><li>TickerFuture animateTo(double target, { Duration? duration, Curve curve = Curves.linear })</li><li>TickerFuture animateBack(double target, { Duration? duration, Curve curve = Curves.linear })</li></ul><p>上述四种方法，内部都是通过 <code>AnimationController._animateToInternal()</code>方法实现，而此方法内部又是执行 <code>AnimationController._startSimulation()</code>，除此之外，还有以下几类方法内部也是基于_startSimulation()方法实现，主要区别在于不同方法方法创建了不同的 Simulation：</p><ul><li>TickerFuture repeat({ double? min, double? max, bool reverse = false, Duration? period })</li><li>TickerFuture fling({ double velocity = 1.0, SpringDescription? springDescription, AnimationBehavior? animationBehavior })</li><li>TickerFuture animateWith(Simulation simulation)</li></ul><h3 id="startsimulation" tabindex="-1"><a class="header-anchor" href="#startsimulation" aria-hidden="true">#</a> _startSimulation</h3><p><code>AnimationController._startSimulation()</code>方法是其实现动画的基石，其内部主要是开启了_ticker 并发出通知：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">TickerFuture</span> <span class="token function">_startSimulation</span><span class="token punctuation">(</span><span class="token class-name">Simulation</span> simulation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>simulation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>isAnimating<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _simulation <span class="token operator">=</span> simulation<span class="token punctuation">;</span>
    _lastElapsedDuration <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
    _value <span class="token operator">=</span> simulation<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开始ticker</span>
    <span class="token keyword">final</span> <span class="token class-name">TickerFuture</span> result <span class="token operator">=</span> _ticker<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _status <span class="token operator">=</span> <span class="token punctuation">(</span>_direction <span class="token operator">==</span> _AnimationDirection<span class="token punctuation">.</span>forward<span class="token punctuation">)</span> <span class="token operator">?</span>
      <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>forward <span class="token punctuation">:</span>
      <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>reverse<span class="token punctuation">;</span>
    <span class="token function">_checkStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_ticker.start()</code>方法最终通过<code>SchedulerBinding.instance.scheduleFrameCallback()</code>方法监听 Flutter Framework 的帧刷新，并回调 <code>AnimationController._tick</code> 方法</p><h3 id="tick" tabindex="-1"><a class="header-anchor" href="#tick" aria-hidden="true">#</a> _tick</h3><p>在此方法内部根据当前时间和_simulation 获取_value 并发出通知。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">_tick</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> elapsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _lastElapsedDuration <span class="token operator">=</span> elapsed<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double elapsedInSeconds <span class="token operator">=</span> elapsed<span class="token punctuation">.</span>inMicroseconds<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span>microsecondsPerSecond<span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>elapsedInSeconds <span class="token operator">&gt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过_simulation获取当前动画的_value</span>
    _value <span class="token operator">=</span> _simulation<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span>elapsedInSeconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果动画已经结束了，就停止监听</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_simulation<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span>elapsedInSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _status <span class="token operator">=</span> <span class="token punctuation">(</span>_direction <span class="token operator">==</span> _AnimationDirection<span class="token punctuation">.</span>forward<span class="token punctuation">)</span> <span class="token operator">?</span>
        <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>completed <span class="token punctuation">:</span>
        <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>dismissed<span class="token punctuation">;</span>
      <span class="token function">stop</span><span class="token punctuation">(</span>canceled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_checkStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法" aria-hidden="true">#</a> 其他方法</h3><ul><li>void resync(TickerProvider vsync) 使用 vsync 重新创建新的_ticker</li><li>void stop({ bool canceled = true }) 停止动画，不会触发通知，默认标记动画为 canceled</li><li>void dispose() 释放资源，动画被标记为 canceled</li></ul><h2 id="simulation" tabindex="-1"><a class="header-anchor" href="#simulation" aria-hidden="true">#</a> Simulation</h2><p>从上面的分析中，我们看到 Simulation 在 AnimationController 动画中也起到很重要的作用：Simulation 主要是在一维空间对物理进行位置、速度等建模。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Simulation</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Initializes the [tolerance] field for subclasses.</span>
  <span class="token class-name">Simulation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tolerance <span class="token operator">=</span> <span class="token class-name">Tolerance</span><span class="token punctuation">.</span>defaultTolerance <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 指定时间的位置</span>
  double <span class="token function">x</span><span class="token punctuation">(</span>double time<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 指定时间的速度</span>
  double <span class="token function">dx</span><span class="token punctuation">(</span>double time<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// Whether the simulation is &quot;done&quot; at the given time.</span>
  bool <span class="token function">isDone</span><span class="token punctuation">(</span>double time<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 公差，如果两个数值相差小于等于此值则认为二者相等，用于isDone中</span>
  <span class="token class-name">Tolerance</span> tolerance<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">objectRuntimeType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Simulation&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 AnimationController 中常用的子类有以下两种：</p><h3 id="interpolationsimulation" tabindex="-1"><a class="header-anchor" href="#interpolationsimulation" aria-hidden="true">#</a> _InterpolationSimulation</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">_InterpolationSimulation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_begin<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_end<span class="token punctuation">,</span> <span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_curve<span class="token punctuation">,</span> double scale<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其 x()方法中除了 t 为 0.0 或 1.0 的情况外，其余时候依靠 Curve（默认为 Curves.linear）计算值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token function">x</span><span class="token punctuation">(</span>double timeInSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> double t <span class="token operator">=</span> <span class="token punctuation">(</span>timeInSeconds <span class="token operator">/</span> _durationInSeconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> _begin<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> _end<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token keyword">return</span> _begin <span class="token operator">+</span> <span class="token punctuation">(</span>_end <span class="token operator">-</span> _begin<span class="token punctuation">)</span> <span class="token operator">*</span> _curve<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeatingsimulation" tabindex="-1"><a class="header-anchor" href="#repeatingsimulation" aria-hidden="true">#</a> _RepeatingSimulation</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">_RepeatingSimulation</span><span class="token punctuation">(</span>double initialValue<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reverse<span class="token punctuation">,</span> <span class="token class-name">Duration</span> period<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>directionSetter<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有 Curve，其 double x(double timeInSeconds)方法可以自动判断是否需要反向并修改方向（会触发 status 改变通知）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token function">x</span><span class="token punctuation">(</span>double timeInSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>timeInSeconds <span class="token operator">&gt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> double totalTimeInSeconds <span class="token operator">=</span> timeInSeconds <span class="token operator">+</span> _initialT<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double t <span class="token operator">=</span> <span class="token punctuation">(</span>totalTimeInSeconds <span class="token operator">/</span> _periodInSeconds<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> bool isPlayingReverse <span class="token operator">=</span> <span class="token punctuation">(</span>totalTimeInSeconds <span class="token operator">~/</span> _periodInSeconds<span class="token punctuation">)</span><span class="token punctuation">.</span>isOdd<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>reverse <span class="token operator">&amp;&amp;</span> isPlayingReverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">directionSetter</span><span class="token punctuation">(</span>_AnimationDirection<span class="token punctuation">.</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ui<span class="token punctuation">.</span><span class="token function">lerpDouble</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">directionSetter</span><span class="token punctuation">(</span>_AnimationDirection<span class="token punctuation">.</span>forward<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ui<span class="token punctuation">.</span><span class="token function">lerpDouble</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外比较特殊的是他的 isDone 方法一致返回 false，表示不会主动结束动画。</p><h3 id="springsimulation" tabindex="-1"><a class="header-anchor" href="#springsimulation" aria-hidden="true">#</a> SpringSimulation</h3><p>用于 fling 方法，创建弹性的模拟</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>经过上述分析，应该能了解 Flutter 动画中 AnimationController 的作用：</p><ul><li><p><strong>AnimationController</strong> 通过传入的 <strong>TickerProvider</strong> 创建并监听 <strong>Ticker</strong>，确保 Ticker 收到系统帧回调时触发 AnimationController._tick 方法；</p></li><li><p>提供 forward，reverse，animateTo，animateBack，repeat，fling，animateWith 等方法创建不同的 <strong>Simulation</strong> 并开启 Ticker，从而可以通过 <strong>SchedulerBinding</strong>.instance.scheduleFrameCallback 监听 Flutter 每一帧刷新。</p><p>并且在 animateTo，animateBack 方法中可以使用 <strong>Curve</strong> 实现非线性变化。</p></li><li><p>当 Flutter 帧刷新时，_tick 方法中通过_simulation 结合时间，lowerBound 和 upperBound 等获取当前值_value 和状态_status 并发出通知。</p></li><li><p>使用者可以通过 AnimationController 继承自父类 <strong>Animation</strong> 的 addListener/removeListener、addStatusListener/removeStatusListener 监听动画的值和状态</p></li><li><p>使用者可以从父类 <code>Animation&lt;double&gt;</code>继承的<code>Animation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child)</code>方法使用 <code>Animatable&lt;U&gt;</code>从 <code>Animation&lt;double&gt;</code>的 animation 创建一个新的<code>Animation&lt;U&gt;</code>，从而可以得到可以随时间变化过渡的 Offset、Size 等动画。</p></li><li><p>stop 方法可以停止动画</p></li></ul><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,68),h={href:"https://flutter.cn/docs/development/ui/animations",target:"_blank",rel:"noopener noreferrer"},f={href:"https://api.flutter.dev/flutter/animation/Animation-class.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://api.flutter.dev/flutter/animation/AnimationController-class.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://api.flutter.dev/flutter/scheduler/TickerProvider-class.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://api.flutter.dev/flutter/scheduler/SingleTickerProviderStateMixin-class.html",target:"_blank",rel:"noopener noreferrer"};function y(S,x){const s=o("ExternalLinkIcon");return p(),l("div",null,[u,n("ul",null,[n("li",null,[a("AnimatedFoo 参考"),n("a",r,[a("文章"),t(s)]),a("，设置新的状态，这些控件会自动从之前的状态切换到新状态")]),n("li",null,[a("TweenAnimationBuilder 参考"),n("a",d,[a("文章"),t(s)]),a("，将任意属性在 Tween 指定的范围变化，和上面的 AnimatedFoo 都是属于"),n("a",k,[a("Implicitly animated widgets"),t(s)]),a("（隐式动画，由系统控件控制动画）。")]),m,v,b]),g,n("p",null,[n("a",h,[a("动画效果介绍 flutter.cn"),t(s)])]),n("p",null,[n("a",f,[a("Animation api.flutter.dev"),t(s)])]),n("p",null,[n("a",A,[a("AnimationController api.flutter.dev"),t(s)])]),n("p",null,[n("a",_,[a("TickerProvider api.flutter.dev"),t(s)])]),n("p",null,[n("a",w,[a("SingleTickerProviderStateMixin api.flutter.dev"),t(s)])])])}const F=i(c,[["render",y],["__file","6ec43bd8.html.vue"]]);export{F as default};
