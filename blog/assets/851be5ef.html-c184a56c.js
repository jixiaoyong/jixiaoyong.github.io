const t=JSON.parse('{"key":"v-1c9f5176","path":"/posts/851be5ef.html","title":"数据结构_总结","lang":"zh-CN","frontmatter":{"permalink":"/posts/851be5ef.html","title":"数据结构_总结","tag":"数据结构","abbrlink":"851be5ef","date":"2019-01-05T13:55:50.000Z","description":"前言 本文汇总了数据结构的优缺点及应用场景。 通用数据结构：数组、链表、树、哈希表 专用数据结构：栈、队列、优先级队列 排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序 图：邻接矩阵、邻接表 通用数据结构 这些数据结构使用关键字的值存储、查找数据 其速度如下： 哈希表 &gt; 树 &gt; 链表 &gt; 数组 数组：数据量小，大小可以预测时使用 链表：数据大小不可预知，或需要频繁插入删除元素时使用","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/851be5ef.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"数据结构_总结"}],["meta",{"property":"og:description","content":"前言 本文汇总了数据结构的优缺点及应用场景。 通用数据结构：数组、链表、树、哈希表 专用数据结构：栈、队列、优先级队列 排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序 图：邻接矩阵、邻接表 通用数据结构 这些数据结构使用关键字的值存储、查找数据 其速度如下： 哈希表 &gt; 树 &gt; 链表 &gt; 数组 数组：数据量小，大小可以预测时使用 链表：数据大小不可预知，或需要频繁插入删除元素时使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-18T09:15:35.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2019-01-05T13:55:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-18T09:15:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构_总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-01-05T13:55:50.000Z\\",\\"dateModified\\":\\"2023-04-18T09:15:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":2,"title":"优先级队列","slug":"优先级队列","link":"#优先级队列","children":[]},{"level":2,"title":"效率","slug":"效率","link":"#效率","children":[]}],"git":{"createdTime":1681809335000,"updatedTime":1681809335000,"contributors":[{"name":"Ji Xiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.1,"words":629},"filePathRelative":"_posts/数据结构_总结.md","localizedDate":"2019年1月5日","excerpt":"<h1> 前言</h1>\\n<p>本文汇总了数据结构的优缺点及应用场景。</p>\\n<p>通用数据结构：数组、链表、树、哈希表</p>\\n<p>专用数据结构：栈、队列、优先级队列</p>\\n<p>排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序</p>\\n<p>图：邻接矩阵、邻接表</p>\\n<h1> 通用数据结构</h1>\\n<p>这些数据结构使用关键字的值存储、查找数据</p>\\n<p>其速度如下：</p>\\n<p><code>哈希表 &gt; 树 &gt; 链表 &gt; 数组</code></p>\\n<p>数组：数据量小，大小可以预测时使用</p>\\n<p>链表：数据大小不可预知，或需要频繁插入删除元素时使用</p>","autoDesc":true}');export{t as data};
