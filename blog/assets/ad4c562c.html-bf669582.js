import{_ as p,r as c,o,c as i,a as n,b as s,d as e,e as t}from"./app-b6d82bb7.js";const l={},u=t(`<h3 id="启动一个-service" tabindex="-1"><a class="header-anchor" href="#启动一个-service" aria-hidden="true">#</a> 启动一个 Service</h3><ul><li><p>MyServices.java</p><p>必须继承自 Service，或者如 IntentService 本身就是等其子类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TAG&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onBind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TAG&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onCreate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TAG&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onDestroy: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>AndroidManifest.xml</p><p>注册 MyServices</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyServices<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cf.android666.myservices<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>MainActivity.java</p><p>在 java 中调用 Service，需要<code>ServiceConnection</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServiceConnection</span> mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;onServiceConnected: 服务绑定&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;onServiceDisconnected: 服务解绑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">MyServices</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mConnection<span class="token punctuation">,</span> <span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定 Service</span>
<span class="token comment">//startService(intent); 启动 service</span>
<span class="token function">unbindService</span><span class="token punctuation">(</span>mConnection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解绑 Service</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bindService()</code>和<code>startService()</code>的区别在于：</p><p>** <code>bindService()</code>将 service 和当前的 activity 绑定在一起，activity 销毁时，service 也会被销毁；</p><p>** <code>startService()</code>则只是“启动”service，在此后 service 的活动和 activity 无关，并一直存活。</p></li></ul><h2 id="service-具体分析" tabindex="-1"><a class="header-anchor" href="#service-具体分析" aria-hidden="true">#</a> Service 具体分析</h2><p>Service 在 AndroidManifest.xml 中的属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">&quot;.MyService&quot;</span><span class="token comment">//必须被指定</span>
android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span> <span class="token comment">//是否能被其他应用隐式调用</span>
<span class="token comment">//有 intent-filter 则默认为 true，否则默认 false；若手动指定为 false 则即使有 intent-filter 也无法隐式调用</span>
android<span class="token operator">:</span>process<span class="token operator">=</span><span class="token string">&quot;remote&quot;</span><span class="token operator">/</span><span class="token string">&quot;:remote&quot;</span><span class="token comment">//前者在共有的进程中进行，后者在名字为{packageName}:remote 的私有进程中进行，其他进行不可访问；如果不设置该属性，则 service 在应用自己的进程里面运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Service 默认运行在创建他的线程中，要是进行耗时操作，最好在 service 中单独创建一个线程，这样子可以在子线程工作，在主线程中更新工作进度。</p><p>Service 中的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//在初次创建服务时调用，并且直至服务死亡，只会被调用一次</span>
<span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//在绑定服务是才会被调用，必须实现该方法</span>
<span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span>

<span class="token comment">//每一次通过 startService() 方法启动 Service 的时候都会被调用</span>
<span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span>
  <span class="token comment">//1.intent 启动时，启动组件传递过来的 Intent</span>
  <span class="token comment">//2.flags 表示启动请求时是否有额外数据，可以是：</span>
  <span class="token comment">//  0：无</span>
  <span class="token comment">//  START_FLAG_REDELIVERY：表示该方法返回值为 START_REDELIVER_INTENT，在上个服务被杀死之前调用 stopSelf() 停止服务</span>
  <span class="token comment">//  START_FLAG_RETRY：在 onStartCommand() 被调用后一直无返回值时，会尝试重新调用 onStartCommand()</span>
  <span class="token comment">//3.当前服务 id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>onStartCommand()</code>方法的返回值意义如下：</p><p><code>START_STICKY </code>:service 在内存不足被杀死后，内存空闲时系统会重新创建 service，一旦成功创建会回调<code>onStartCommand()</code>方法，此时 intent 是 null，除非是挂起的 intent 如 pendingintent，无限期运行</p><p><code>START_NOT_STICKY</code>：service 因内存不足被杀死，内存再次空闲系统也不会再重新创建服务，最安全</p><p><code>START_REDELIVER_INTENT</code>：service 因内存不足被杀死，会重建服务并传递给最后一个 intent（最后一次调用<code>startService()</code> 时的 intent），用于连续作业，如下载等</p><h3 id="service-绑定服务的三种方式" tabindex="-1"><a class="header-anchor" href="#service-绑定服务的三种方式" aria-hidden="true">#</a> Service 绑定服务的三种方式</h3><h4 id="_1-拓展-binder-类" tabindex="-1"><a class="header-anchor" href="#_1-拓展-binder-类" aria-hidden="true">#</a> 1.拓展 Binder 类</h4><p><strong>要求客户端和服务在同一应用的同一进程内</strong>。客户端通过其访问 service 中的公共方法。</p><p>步骤如下：</p><ol><li>创建 BindService 服务端，在类中创建一个实现了 IBinder 接口的实力对象并提供公共方法给客户端使用</li><li>在 onBind() 回调方法返回此 Binder 实例</li><li>在客户端的 onServiceConnected() 方法接收 Binder，使用提供的方法绑定服务</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//service 服务端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>
  <span class="token class-name">LocalService</span> mService<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">LocalBinder</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> binder<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//服务中公共方法，可以被客户端通过 IBInder 获取实例调用</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span><span class="token punctuation">{</span>
    <span class="token class-name">LocalService</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">LocalService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//客户端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">ServiceConnection</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//绑定服务时被调用，实现客户端和服务端交互（IBinder）</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">LocalService<span class="token punctuation">.</span>LocalBinder</span> binder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocalService<span class="token punctuation">.</span>LocalBinder</span><span class="token punctuation">)</span>service<span class="token punctuation">;</span><span class="token comment">//获取服务端 IBinder</span>
        mService <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取服务实例，以调用服务的公共方法</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//取消绑定时回调，多数时候是 service 被意外销毁，如内存不足</span>
      <span class="token comment">//当客户端取消绑定时，系统“绝对不会”调用该方法。</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        mService <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//创建绑定对象</span>
    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">LocalService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//绑定服务</span>
    <span class="token comment">//参数 3 flags 则是指定绑定时是否自动创建 Service。0 代表不自动创建、BIND_AUTO_CREATE 则代表自动创建</span>
    <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>conn<span class="token punctuation">,</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用服务中的方法，最好先判断是否为 null</span>
    mService<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//解除绑定</span>
    <span class="token function">unbindService</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-messenger" tabindex="-1"><a class="header-anchor" href="#_2-messenger" aria-hidden="true">#</a> 2.Messenger</h4><p><strong>service 与不同进程通信（IPC）</strong> 。</p><p>步骤如下：</p><ol><li>Service 实现一个 Handler，接收客户端每个调用的回调</li><li>用 Handler 创建 Messenger 对象</li><li>用 Messenger 创建 IBinder 对象，并通过 onBind() 返回客户端</li><li>客户端使用 IBinder 实例化 Messenger，用其将 Message 对象发送给 Service</li><li>Service 在 Handler 接收并处理 Message</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MSG_WHAT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">//创建 Handler 接收、处理客户端 msg</span>
  <span class="token keyword">class</span> <span class="token class-name">IncomingHanler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//do sth with msg...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Messenger</span> messenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IncomingHanlder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> messenger<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//客户端</span>
<span class="token comment">//onCreate() 方法中：</span>
mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> className<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Messenger</span> mService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//给服务发消息</span>
<span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">MessengerService</span><span class="token punctuation">.</span><span class="token constant">MSG_WHAT</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 service 要在不同的进程中：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>AndroidMinafast.xml
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.messenger.MessengerService<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>:remote<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务与客户端双向通信</strong></p><p>服务端，修改 IncomingHandler，回复客户端消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">IncomingHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//回复消息</span>
    <span class="token class-name">Messenger</span> client <span class="token operator">=</span> msg<span class="token punctuation">.</span>replyTo<span class="token punctuation">;</span>
    <span class="token class-name">Message</span> replyMsg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">MessengerService</span><span class="token punctuation">.</span><span class="token constant">MSG_WHAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    replyMsg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
      client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>replyMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端，增加 Messenger 和 Handler 处理服务端回复</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RecyclerReplyMsgHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Hanlder</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//接收服务端返回的 msg</span>
  <span class="token comment">//do sth ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token class-name">Messenger</span> mRecevierReplyMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecyclerReplyMsgHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，在发送消息是需要将接收服务端回复的 Messenger 通过 Message 的 replyTo 传递给服务端</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//create msg...</span>
msg<span class="token punctuation">.</span>replyTo <span class="token operator">=</span> mRecevierReplyMsg<span class="token punctuation">;</span>
<span class="token comment">//send msg...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-aidl" tabindex="-1"><a class="header-anchor" href="#_3-aidl" aria-hidden="true">#</a> 3.AIDL</h4>`,33),d={href:"https://jixiaoyong.github.io/blog/posts/f931e8ae/",target:"_blank",rel:"noopener noreferrer"},r=t('<h2 id="绑定服务时的注意事项" tabindex="-1"><a class="header-anchor" href="#绑定服务时的注意事项" aria-hidden="true">#</a> 绑定服务时的注意事项</h2><ul><li>多个客户端可连接一个服务端，只有第一个客户端绑定时才会调用服务<code>onBind()</code>方法来检索 IBinder，此后无需调用就可将同一个 IBinder 传递给其他客户端</li><li><code>bindService()</code> 绑定服务是异步进行的</li><li>一般在 activity 可见生命周期内绑定 - 取消服务，不要在<code>onResume()</code>、<code>onPause()</code>期间执行绑定/解绑</li></ul><h2 id="service-绑定和启动转换" tabindex="-1"><a class="header-anchor" href="#service-绑定和启动转换" aria-hidden="true">#</a> Service 绑定和启动转换</h2><table><thead><tr><th>顺序</th><th>结果</th></tr></thead><tbody><tr><td>先绑定后启动 service</td><td>启动 service</td></tr><tr><td>先启动后绑定 service</td><td>会绑定宿主，但是宿主死后仍按照启动 service 方式存活</td></tr></tbody></table><h2 id="前台服务和通知" tabindex="-1"><a class="header-anchor" href="#前台服务和通知" aria-hidden="true">#</a> 前台服务和通知</h2><blockquote><ul><li><strong>startForeground(int id, Notification notification)</strong><br> 该方法的作用是把当前服务设置为前台服务，其中 id 参数代表唯一标识通知的整型数，需要注意的是提供给 startForeground() 的整型 ID 不得为 0，而 notification 是一个状态栏的通知。</li><li><strong>stopForeground(boolean removeNotification)</strong><br> 该方法是用来从前台删除服务，此方法传入一个布尔值，指示是否也删除状态栏通知，true 为删除。注意该方法并不会停止服务。但是，如果在服务正在前台运行时将其停止，则通知也会被删除。</li></ul></blockquote><p>文章参考：</p>',7),k={href:"http://blog.csdn.net/javazejian/article/details/52709857#t3",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("一般不会使用，具体使用可以参考"),n("a",d,[s("这篇文章"),e(a)])]),r,n("p",null,[n("a",k,[s("关于 Android Service 真正的完全详解，你需要知道的一切 - CSDN 博客"),e(a)])])])}const y=p(l,[["render",v],["__file","ad4c562c.html.vue"]]);export{y as default};
