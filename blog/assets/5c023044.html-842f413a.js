import{_ as o,r as p,o as c,c as i,a as n,b as a,d as t,e}from"./app-54b0e827.js";const l={},u={href:"https://baike.baidu.com/item/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF",target:"_blank",rel:"noopener noreferrer"},r=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/20200413215502.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),d={href:"https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/view/BezierViewAnim.kt",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"贝塞尔曲线介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#贝塞尔曲线介绍","aria-hidden":"true"},"#"),a(" 贝塞尔曲线介绍")],-1),h=n("p",null,"下图是二阶贝塞尔曲线绘制方法介绍，只要各个点满足条件：AD/AB = BE/BC = DF/DE，那么当沿着当前线段移动 D、E 点时，F 点的运动轨迹就是一个贝塞尔曲线：",-1),m=n("img",{src:"https://jixiaoyong.github.io/images/20200413215622.png",alt:"图片来自：https://www.cnblogs.com/wjtaigwh/p/6647114.html",tabindex:"0",loading:"lazy"},null,-1),v={href:"https://www.cnblogs.com/wjtaigwh/p/6647114.html",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"动图示意如下：",-1),g=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/20200413222352.webp",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),f=n("p",null,"可以在下面的两个网站在线体验贝塞尔曲线：",-1),P={href:"https://aaaaaaaty.github.io/bezierMaker.js/playground/playground.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://bezier.method.ac/",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="计算控制点坐标" tabindex="-1"><a class="header-anchor" href="#计算控制点坐标" aria-hidden="true">#</a> 计算控制点坐标</h2><p>在绘制折线图时，我们获取的数据可以当做贝塞尔曲线的端点，Android 为我们提供了绘制二阶和三阶贝塞尔曲线的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">quadTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token keyword">float</span> x2<span class="token punctuation">,</span> <span class="token keyword">float</span> y2<span class="token punctuation">)</span><span class="token comment">//二阶贝塞尔曲线：分别是控制点的 x、y 坐标和结束的的 x、y 坐标</span>
<span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">cubicTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token keyword">float</span> x2<span class="token punctuation">,</span> <span class="token keyword">float</span> y2<span class="token punctuation">,</span> <span class="token keyword">float</span> x3<span class="token punctuation">,</span> <span class="token keyword">float</span> y3<span class="token punctuation">)</span><span class="token comment">//三阶贝塞尔曲线：分别是控制点 1、2 的 x、y 坐标和结束的的 x、y 坐标</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>Path.cubicTo()</code>方法为例，在绘制三阶贝塞尔曲线时，起点和终点已知，剩下工作就是计算两个控制点的坐标。</p><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法 1</h3>`,5),_={href:"https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<p>假设起点、终点分别为<code>startPoint</code>，<code>endPoint</code>，起点前一个点为<code>beforePointF</code>，终点后一个点为<code>afterPoint</code>，那么终止点 1、2（<code>controlPoint1</code>、<code>controlPoint2</code>）的坐标满足（其中 a,b 为任意正数，比如 1/6）：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>        <span class="token keyword">val</span> controlPoint1X <span class="token operator">=</span> startPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> beforePointF<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> a
        <span class="token keyword">val</span> controlPoint1Y <span class="token operator">=</span> startPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> beforePointF<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> a

        <span class="token keyword">val</span> controlPoint2X <span class="token operator">=</span> endPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>afterPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> b
        <span class="token keyword">val</span> controlPoint2Y <span class="token operator">=</span> endPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>afterPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里要处理特殊情况：第一个点 P<sub>0</sub>的前一个仍然为 P<sub>0</sub>，最后一个点 P<sub>n</sub>的后一个点仍为 P<sub>n</sub></p></blockquote><p>但这种情况绘制出来的贝塞尔曲线如下：</p><figure><img src="https://jixiaoyong.github.io/images/20200413220840.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到除了 P<sub>0</sub>和 P<sub>n</sub>外，其他点的曲线坐标和对应的点坐标不一致。</p><h3 id="方法-2" tabindex="-1"><a class="header-anchor" href="#方法-2" aria-hidden="true">#</a> 方法 2</h3>`,7),A=n("code",null,"startPoint",-1),j=n("code",null,"endPoint",-1),z={href:"https://blog.csdn.net/laizuling/article/details/51162011",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>所以，两个控制点的坐标为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> controlPoint1X <span class="token operator">=</span> <span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
<span class="token keyword">val</span> controlPoint1Y <span class="token operator">=</span> startPoint<span class="token punctuation">.</span>y

<span class="token keyword">val</span> controlPoint2X <span class="token operator">=</span> <span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
<span class="token keyword">val</span> controlPoint2Y <span class="token operator">=</span> endPoint<span class="token punctuation">.</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样绘制出来的曲线比较符合我们的要求。</p><p>所以，最终贝塞尔曲线 path 计算方法如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> bezierPath <span class="token operator">=</span> <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
bezierPath<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>pointList<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>pointList<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>
pointList<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> startPoint <span class="token operator">-&gt;</span>
    <span class="token keyword">when</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pointList<span class="token punctuation">.</span>lastIndex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//在绘制 P(n-1) ~ P(n) 点的贝塞尔曲线时，已经绘制到了 P(n) 点，所以此处不用再绘制</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> endPoint <span class="token operator">=</span> pointList<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
            bezierPath<span class="token punctuation">.</span><span class="token function">cubicTo</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token operator">-</span>startPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token comment">//为了解决 view 坐标原点在左上角而做的特殊处理，下同</span>
                <span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token operator">-</span>endPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
                endPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
                <span class="token operator">-</span>endPoint<span class="token punctuation">.</span>y
            <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给-path-添加渐变背景" tabindex="-1"><a class="header-anchor" href="#给-path-添加渐变背景" aria-hidden="true">#</a> 给 Path 添加渐变背景</h2><p>我们可以使用<code>Paint.setShader(Shader shader)</code>方法，在绘制 Path 的时候绘制渐变背景。</p><p>渐变背景使用 Shader 实现。</p><p>为了确保绘制效果，我们需要在 Path 计算完成后，将其闭合，以确保绘制的背景在我们需要的范围内：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>        <span class="token keyword">val</span> shadowPaint <span class="token operator">=</span> <span class="token function">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span>
        shadowPaint<span class="token punctuation">.</span>style <span class="token operator">=</span> Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL
        <span class="token keyword">val</span> shader <span class="token operator">=</span>
            <span class="token function">LinearGradient</span><span class="token punctuation">(</span><span class="token number">0F</span><span class="token punctuation">,</span> <span class="token number">0F</span><span class="token punctuation">,</span> <span class="token number">0F</span><span class="token punctuation">,</span> <span class="token number">500F</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">,</span> Shader<span class="token punctuation">.</span>TileMode<span class="token punctuation">.</span>CLAMP<span class="token punctuation">)</span>

        shadowPaint<span class="token punctuation">.</span>shader <span class="token operator">=</span> shader

        <span class="token keyword">val</span> shadowPath <span class="token operator">=</span> <span class="token function">Path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        shadowPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">800F</span><span class="token punctuation">)</span>
        shadowPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">800F</span><span class="token punctuation">)</span>
        shadowPath<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>startPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
        shadowPath<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>shadowPath<span class="token punctuation">,</span> shadowPaint<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给-path-添加动画" tabindex="-1"><a class="header-anchor" href="#给-path-添加动画" aria-hidden="true">#</a> 给 Path 添加动画</h2><p>为了让 Path 看起来是从起点慢慢绘制到终点去的，我们可以先计算 path 的总长度，然后结合<code>ValueAnimator</code>实时获得对应长度的 path 并绘制：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> mValueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">1f</span><span class="token punctuation">)</span>
mValueAnimator<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">10000</span>
mValueAnimator<span class="token punctuation">.</span>repeatCount <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span>INFINITE
mValueAnimator<span class="token punctuation">.</span>interpolator <span class="token operator">=</span> <span class="token function">AccelerateDecelerateInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
mValueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span> <span class="token punctuation">{</span> animation <span class="token operator">-&gt;</span> <span class="token comment">//获取从 0-1 的变化值</span>
    progress <span class="token operator">=</span> animation<span class="token punctuation">.</span>animatedValue <span class="token keyword">as</span> Float
    <span class="token comment">//不断刷新绘图，实现路径绘制</span>
    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
mValueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>onDraw()</code>方法中绘制对应的 path：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> mPathMeasure<span class="token operator">:</span> PathMeasure <span class="token operator">=</span> <span class="token function">PathMeasure</span><span class="token punctuation">(</span>bezierPath<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> totalPathLength <span class="token operator">=</span> mPathMeasure<span class="token punctuation">.</span>length <span class="token comment">//获取 path 总长度</span>

<span class="token comment">// 按照进度绘制贝塞尔曲线</span>
<span class="token keyword">val</span> stopD <span class="token operator">=</span> progress <span class="token operator">*</span> totalPathLength
mPathMeasure<span class="token punctuation">.</span><span class="token function">getSegment</span><span class="token punctuation">(</span><span class="token number">0F</span><span class="token punctuation">,</span> stopD<span class="token punctuation">,</span> dstPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//按照长度比例截取对应的 path 并赋值给 dstPath</span>

<span class="token comment">//bezier anim</span>
canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>dstPath<span class="token punctuation">,</span> bezierPaint<span class="token punctuation">)</span> <span class="token comment">//绘制对应的 path</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jixiaoyong.github.io/images/20200413222302.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li><p>使用 canvas 绘制坐标时，需要注意 android 的坐标原点位于屏幕左上角。所以在绘制曲线图时可以先将坐标原点向下平移一段距离，再绘制对应坐标（可以绘制实际的 y 坐标负值）</p></li><li><p>在拼接贝塞尔曲线的 path 时候注意，<code>path.moveTo()</code>方法会将 path 切断</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,19),E={href:"https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html",target:"_blank",rel:"noopener noreferrer"},L=n("br",null,null,-1),V={href:"https://blog.csdn.net/laizuling/article/details/51162011",target:"_blank",rel:"noopener noreferrer"};function T(B,I){const s=p("ExternalLinkIcon");return c(),i("div",null,[n("p",null,[n("a",u,[a("贝塞尔曲线"),t(s)]),a("是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。")]),r,n("p",null,[a("本文代码链接："),n("a",d,[a("https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/view/BezierViewAnim.kt"),t(s)])]),k,h,n("figure",null,[m,n("figcaption",null,[a("图片来自："),n("a",v,[a("https://www.cnblogs.com/wjtaigwh/p/6647114.html"),t(s)])])]),b,g,f,n("p",null,[n("a",P,[a("https://aaaaaaaty.github.io/bezierMaker.js/playground/playground.html"),t(s)])]),n("p",null,[n("a",y,[a("https://bezier.method.ac/"),t(s)])]),w,n("p",null,[a("按照贝塞尔曲线的定义，计算各个点对应控制点的坐标，具体的计算原理我们可以参考"),n("a",_,[a("这篇文章"),t(s)])]),x,n("p",null,[a("为了解决方法 1 存在的问题，我们人为的在两个点之间加入两个控制点，这样在"),A,a("，"),j,a("之间的贝塞尔曲线首尾点的坐标必定落在起点和终点上（思路来自"),n("a",z,[a("这里"),t(s)]),a("）。")]),F,n("p",null,[n("a",E,[a("https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html"),t(s)]),L,n("a",V,[a("https://blog.csdn.net/laizuling/article/details/51162011"),t(s)])])])}const D=o(l,[["render",T],["__file","5c023044.html.vue"]]);export{D as default};
