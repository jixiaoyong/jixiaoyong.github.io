import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as p,e as s,a as n}from"./app-14d46302.js";const t={},o=s(`<p>基于Python3.x</p><p>Python文件默认格式<code>.py</code></p><p>首行默认以下命令：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># -*- coding: UTF-8 -*-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><ul><li><p><strong>数字</strong></p><p>整数int 1，2，3</p><p>长整数long 1112L</p><p>浮点数float （小数）1.23，3.14</p><p>复数complex 3.14j</p></li><li><p><strong>字符串</strong></p><p>&#39;abc&#39;，&quot;abc&quot;，&#39;&#39;&#39;abc‘’‘</p><p>&#39;x&#39;和&quot;x&quot; 区别不大</p><p>&#39;&#39;&#39;abc‘’‘ 文本可以跨行</p><p>字符串前面加r或者R表示字符串内部不需要转义，否则要用<code>\\</code> 转义</p><p>支持<code>a[0]</code>取值</p></li><li><p><strong>布尔值</strong></p><p><code>True</code> 和<code>False</code></p><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</p></li><li><p><strong>空值</strong></p><p><code>None</code></p></li><li><p><strong>变量</strong></p><p>命名规则：开头<code>aA_</code>，其后可以包含<code>aA_1</code></p></li><li><p><strong>常量</strong></p><p>不能变的变量</p></li></ul><h1 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h1>`,7),l=n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"列表list")]),n("p",null,"[1,2,3,3]"),n("p",null,"插入list.insert(1,'vaule')"),n("p",null,"删除list.pop() / list.pop(1)")]),n("li",null,[n("p",null,"**元组tuple **"),n("p",null,"(1,2,3,3)"),n("p",null,"与列表类似，但是一旦初始化就不能再修改"),n("hr")]),n("li",null,[n("p",null,[n("strong",null,"字典dict")]),n("p",{"a:1,b:vaule":""}),n("p",null,"键值对，读取快，相当于java的map")]),n("li",null,[n("p",null,[n("strong",null,"set")]),n("p",null,"set([1,2,3])"),n("p",null,"键的集合，不能有重复的，相当于java的set")])],-1),i=s(`<h1 id="逻辑语句" tabindex="-1"><a class="header-anchor" href="#逻辑语句" aria-hidden="true">#</a> 逻辑语句</h1><ul><li>if ... : ... elif ... : ... else : ...</li><li>for x in xs : ...</li><li>while x : ...</li></ul><h1 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数" aria-hidden="true">#</a> 自定义函数</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token keyword">return</span> n

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>return</strong></li></ul><p>可以没有return，默认返回None</p><p>可以return 多个值，实际上返回的是一个tuple</p><ul><li><strong>pass</strong></li></ul><p>不想执行任何语句，但是为了符合语法规范，可以用pass当做占位符</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">pass</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>抛出异常</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&#39;an error&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中TypeError需要继承自<code>error</code>或者<code>Exception</code></p><ul><li><strong>参数</strong></li></ul><p>位置参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>arg1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> 默认参数必须是参数中后面的几位；默认值必须不可变，如int，string等</p><p>可变参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>*args</code> 表示参数个数可变，可以输入list/tuple等，或者依次输入多个参数，用逗号分隔</p><p>关键词参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span><span class="token operator">**</span>keywords<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token string">&#39;city&#39;</span> <span class="token keyword">in</span> kw<span class="token punctuation">:</span>
		<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>**keywords</code> 表示接受关键词作为参数传入，可以传入dict，或者依次输入多个关键词参数</p><p>命名关键词参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun0</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span><span class="token operator">*</span>，name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
	<span class="token keyword">pass</span>
<span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token operator">*</span>args<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment">#如果命名关键词前面有可变参数，则不用*分隔</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>限制输入的关键字，限制只有name和age作为关键词参数</p><h1 id="使用其他文件的函数" tabindex="-1"><a class="header-anchor" href="#使用其他文件的函数" aria-hidden="true">#</a> 使用其他文件的函数</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#使用时 sys.fun()</span>
<span class="token keyword">import</span> sys
<span class="token comment">#使用时直接fun()</span>
<span class="token keyword">from</span> xxFile <span class="token keyword">import</span> fun
form sys <span class="token keyword">import</span> <span class="token operator">*</span>
form sys <span class="token keyword">import</span> fun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h1><ul><li><strong>定义类</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token triple-quoted-string string">&#39;&#39;&#39;doc for AClass
	you can use this by
	AClass.__doc__&#39;&#39;&#39;</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  	<span class="token comment">#默认的初始化方法</span>
  	<span class="token keyword">pass</span>
  <span class="token keyword">def</span> <span class="token function">aFun</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  	<span class="token keyword">pass</span>
<span class="token comment">#创建类对象</span>
a <span class="token operator">=</span> AClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#调用方法</span>
a<span class="token punctuation">.</span>aFun<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的类方法必须至少有一个参数，推荐命名为self，系统会自动传入类对象，无需手动传入。</p><ul><li><strong>继承</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;father&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;i am f&quot;</span><span class="token punctuation">)</span>
    
<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#子类方法不会自己调用父类方法，需要手动调用</span>
    <span class="token builtin">super</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">#调用父类方法2：</span>
    <span class="token comment">#Father.__init__(self)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;child&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;i am c&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>where<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;go to %s&#39;</span><span class="token operator">%</span>where<span class="token punctuation">)</span>

c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#father child</span>
c<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#i am c</span>
c<span class="token punctuation">.</span>go<span class="token punctuation">(</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">)</span> <span class="token comment">#go ro home</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类继承父类，则需要在子类定义时传入父类</p><p>子类如果有与父类同名方法，则优先调用子类方法，除非子类特别调用父类的方法</p>`,38),c=[o,l,i];function u(d,r){return e(),p("div",null,c)}const m=a(t,[["render",u],["__file","a8f97c56.html.vue"]]);export{m as default};
