import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-25485eb1.js";const l={},u=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d=n("code",null,"AIDL",-1),k={href:"https://jixiaoyong.github.io/blog/posts/f931e8ae/",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"AIDL",-1),m=t(`<p>在Android中，除了<code>Socket</code>、<code>Intent</code>中使用<code>Bundle</code>、本地文件共享，<code>ContentProvider</code>等等之外，还有一个独有的IPC方式即<code>Binder</code>。在日常编程中使用<code>Binder</code>的主要有<code>AIDL</code>和<code>Messenger</code>两种方式，而<code>Messenger</code>也是用<code>AIDL</code>来实现的。</p><h1 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h1><ol><li>新建一个AIDL文件</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// IBookManager.aidl</span>
<span class="token keyword">package</span> <span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IBookManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">getSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>用AndroidStudio自动生成一个Binder类</li></ol><p>使用<code>Build</code>-&gt;<code>Make Project</code>，会在<code>app/build/generated/aidl_source_output_dir/debug/compileDebugAidl/out</code>目录下生成<code>IBookManager.java</code>。</p><h1 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h1>`,7),v={href:"https://blog.csdn.net/qian520ao/article/details/78074983",target:"_blank",rel:"noopener noreferrer"},b=t(`<figure><img src="https://jixiaoyong.github.io/images/20190320205619.png" alt="AIDL从客户端(Client)发起请求至服务端(Server)的流程" tabindex="0" loading="lazy"><figcaption>AIDL从客户端(Client)发起请求至服务端(Server)的流程</figcaption></figure><p>下面我们对<code>IBookManager.java</code>这个文件简单分析一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * This file is auto-generated.  DO NOT MODIFY.
 * Original file: app/src/main/aidl/cf/android666/myapplication/IBookManager.aidl
 */</span>
<span class="token keyword">package</span> <span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBookManager</span> <span class="token keyword">extends</span>
  <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span><span class="token comment">//IInterface接口，所有可以在Binder中传输的接口都要继承自该接口</span>
  <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Local-side IPC implementation stub class.
     * 持有Binder对象
     * 获取客户端传过来的数据，根据方法 ID 执行相应操作。
     * 将传过来的数据取出来，调用本地写好的对应方法。
     * 将需要回传的数据写入 reply 流，传回客户端。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token constant">DESCRIPTOR</span> <span class="token operator">=</span> <span class="token string">&quot;cf.android666.myapplication.IBookManager&quot;</span><span class="token punctuation">;</span><span class="token comment">//是Binder的唯一标识，一般为当前Binder的类目</span>

        <span class="token doc-comment comment">/**
         * Construct the stub at attach it to the interface.
         */</span>
        <span class="token keyword">public</span> <span class="token class-name">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将Binder和指定的接口绑定，这样当queryLocalInterface时会返回与DESCRIPTOR一致的IInterface</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Cast an IBinder object into an cf.android666.myapplication.IBookManager interface,
         * generating a proxy if needed.
         * 将服务端的Binder转化为客户端需要的IInterface
         * 如果是相同的进程，则直接返回服务端的Stub对象本身（没有跨进程）；
         * 如果是不同的进程，则返回的是Stub.Proxy代理类对象
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager</span> <span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager</span><span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token doc-comment comment">/**
        * 客户端远程请求经过系统封装后调用该方法，
        * 生成 _data 和 _reply 数据流，并向 _data 中存入客户端的数据。
        * 通过 transact() 方法将它们传递给服务端，并请求服务端调用指定方法。
        * 接收 _reply 数据流，并从中取出服务端传回来的数据
        */</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> descriptor <span class="token operator">=</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">INTERFACE_TRANSACTION</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token class-name">TRANSACTION_getSth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从data中可以读取参数</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意，这里调用的是IBookManager的getSth()，也就是需要我们在使用该Binder时实现的方法</span>
                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以往reply中写入结果</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      
        <span class="token doc-comment comment">/**
        * Proxy类持有IBinder的引用
        * 
        */</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">cf<span class="token punctuation">.</span>android666<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IBookManager</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> mRemote<span class="token punctuation">;</span>

            <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _data <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _reply <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_getSth</span><span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里实际上是调用了远程的IBinder的transact()方法</span>
                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">TRANSACTION_getSth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FIRST_CALL_TRANSACTION</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是我们在AIDL中定义的getSth()方法的标志，用于在onTransact中区分调用的是哪个方法</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span><span class="token punctuation">;</span><span class="token comment">//这个是我们在AIDL中定义的方法,需要在服务端实现，并且会在客户端被调用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,4),y={href:"https://blog.csdn.net/qian520ao/article/details/78074983",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/qian520ao/article/details/78089877",target:"_blank",rel:"noopener noreferrer"};function g(w,I){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[d,s("是Android中用于IPC的语言，具体使用可以参见"),n("a",k,[s("这篇文章"),e(a)]),s("，这篇文章主要想总结一下"),r,s("具体为我们做了什么工作，主要参考书目《Android开发艺术探索》。")]),m,n("p",null,[s("AIDL从客户端(Client)发起请求至服务端(Server)相应的工作流程概览，图片来源("),n("a",v,[s("https://blog.csdn.net/qian520ao/article/details/78074983"),e(a)]),s(")")]),b,n("p",null,[n("a",y,[s("Android 深入浅出AIDL（二）"),e(a)])]),n("p",null,[n("a",f,[s("Android Binder之应用层总结与分析"),e(a)])])])}const B=p(l,[["render",g],["__file","2270057c.html.vue"]]);export{B as default};
