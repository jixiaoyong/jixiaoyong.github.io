import{_ as p,r as o,o as l,c,a as n,b as a,d as e,e as t}from"./app-65563f13.js";const i={},r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),u=n("p",null,[a("堆是一种特殊的二叉树，用他实现的优先级队列插入和删除时间复杂度都是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"L"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(LogN)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),a(" 。")],-1),d=t('<h2 id="特征" tabindex="-1"><a class="header-anchor" href="#特征" aria-hidden="true">#</a> 特征</h2><ol><li>堆是完全二叉树<a href="#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">*</a></li><li>常用数组实现</li><li>每个堆的节点都满足堆的条件，即堆的每个节点关键字都大于（或等于）子节点的关键字</li></ol><p><code>特征3</code>保证了根节点是堆中最大的值，以及顺着某一个节点一直到遇到叶节点的路径上的节点关键字是依次递减的，但是没法保证这个值是这个堆中的最小值，这是因为堆中每个节点的左右子节点的位置和大小无关，两条这样的路径之前的值的大小没有一定的关系。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h2>',4),m=n("p",null,[a("堆可以进行插入、移除，遍历等操作，时间复杂度都是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"L"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(LogN)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),a("。初次之外，利用堆根节点关键值最大这个属性，还可以进行堆排序,时间复杂度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"N"),n("mo",null,"∗"),n("mi",null,"L"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(N*LogN)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),a("。")],-1),k=t(`<p>对于在数组中保存的堆，设元素下标为<code>x</code>，则各个相关元素下标如下：</p><ul><li>父节点<code> (x-1)/2</code></li><li>左子节点 <code>2*x+1</code></li><li>右子节点 <code>2*x+2</code></li></ul><p>在插入，移除的时候为了保证满足堆的条件，需要对堆进行向上或向下的遍历，将修改的值移动到对应的位置，在这过程中涉及到复制和交换。如果每次比较都需要交换数据的话会复制很多次，而如果将最终要移动值保存在临时变量中，用一个值专门记录要移动到的下标，在每次符合条件时只复制参与对比的值，在最后再将要临时保存的值复制到目的下标，就会减少复制的次数。</p><p>如下图就将复制次数从 9 次减少到了 5 次。</p><figure><img src="https://jixiaoyong.github.io/images/20181225213813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h3><p>插入操作思路是，将元素插入到数组最后一位，然后依次向元素父节点遍历，将不满足的元素下沉，直到找到满足<code>堆特征3</code>（父节点关键字大于该点，并且子节点关键字小于该点）的下标，或者指向了根目录，将该元素插入该处。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> <span class="token comment">/**
     * 从下向上遍历
     * 如果父节点比插入值小，就将父节点移动到插入值的位置，将toIndex指向空出的地方
     * 依次查找，直到查找到父节点比插入值大，子节点比插入值小的地方，或者指向了根节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">checkUp</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> bottom <span class="token operator">=</span> headArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">//headArray是保存堆元素的数组</span>
        <span class="token keyword">var</span> toIndex <span class="token operator">=</span> index
        <span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token punctuation">(</span>toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>toIndex <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom<span class="token operator">!!</span><span class="token punctuation">.</span>key <span class="token operator">&gt;</span> headArray<span class="token punctuation">[</span>father<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> headArray<span class="token punctuation">[</span>father<span class="token punctuation">]</span><span class="token comment">//将父节点下沉</span>
            toIndex <span class="token operator">=</span> father
            father <span class="token operator">=</span> <span class="token punctuation">(</span>toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token punctuation">}</span>
        headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> bottom<span class="token comment">//将该值插入到对应下标</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移除" tabindex="-1"><a class="header-anchor" href="#移除" aria-hidden="true">#</a> 移除</h3><p>移除指的是将根节点推出堆中。</p><p>基本思路是将根节点推出，再将数组最后一个节点（同时也是堆的最后一个节点）移动到根节点空出的位置，再依次向下遍历，直到将该节点放到符合堆条件的位置或者到达叶子节点。</p><p>和插入相比，移除时要移动的节点要比较的稍微多些。</p><ul><li>该节点是叶节点 直接插入 ✅</li><li>有两个子节点 和两个叶子节点中最大的比较，如果小于则交换，并再和新的子节点比较</li><li>只有左节点 如果左节点大于本节点则交换，否则就是该位置</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 从上向下遍历
 * 如果遇到比当前值top大的就将其复制到当前位置toIndex，并记录下空出的位置为toIndex
 * 再以toIndex为起点向下比较，直到遇到top比父节点小，比子节点大的位置，或者叶子节点
 * 将top移动到该位置
 */</span>
<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">checkDown</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> toIndex <span class="token operator">=</span> index
    <span class="token keyword">var</span> top <span class="token operator">=</span> headArray<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!!</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>toIndex <span class="token operator">&lt;</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//非叶子节点</span>
        <span class="token keyword">var</span> leftIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> toIndex <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">var</span> rightIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> toIndex <span class="token operator">+</span> <span class="token number">2</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//只有左节点</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key <span class="token operator">&gt;</span> top<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span>
                toIndex <span class="token operator">=</span> leftIndex
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> headArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key <span class="token operator">&gt;=</span> headArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果左节点比较大</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key <span class="token operator">&gt;</span> top<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> headArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span>
                    toIndex <span class="token operator">=</span> leftIndex
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//如果右节点比较大</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>headArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token operator">!!</span><span class="token punctuation">.</span>key <span class="token operator">&gt;</span> top<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> headArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span>
                    toIndex <span class="token operator">=</span> rightIndex
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    headArray<span class="token punctuation">[</span>toIndex<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token comment">//将该节点移动到找到的下标处</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h3><p>利用堆<code>根节点关键值最大</code>这一特性，可以进行堆排序。</p><p>只需要将待排序的数组依次插入堆中，然后再依次移除即可。</p><p>这样需要有两倍与待排序数组大小的空间。如果每次插入时候只保存数据，不进行向上遍历，在每次移除数据时进行向下遍历，将当前剩余数据最大值选出来（其余数据仍然无序）从堆中移除根元素时都会在数组末尾空出一个位置，将该值存储在该位置即可，这样等完全插入、移除后就得到一个有序数组【从数组末尾开始依次减小】</p><p>堆排序和快速排序时间复杂度都是 <code>O(N*LogN)</code> ，但是由于向上、向下遍历耗时，实际上要比快速排序稍慢一些。但是堆排序堆数据初始分布不敏感一直都是 <code>O(N*LogN)</code> ，快速排序在某些情况下时间复杂度可达到 <code>O(N^2)</code> 。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2><h3 id="满二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a> 满二叉树</h3><p>满二叉树指除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树。</p>`,22),h=n("p",null,[a("如果一个二叉树的层数为 K，且节点总数是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("msup",null,[n("mn",null,"2"),n("mi",null,"k")]),n("mo",{stretchy:"false"},")"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"(2^k) -1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8491em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),a(" ，则它就是满二叉树。")],-1),v=t('<figure><img src="https://jixiaoyong.github.io/images/20181225210750.png" alt="满二叉树" tabindex="0" loading="lazy"><figcaption>满二叉树</figcaption></figure><h3 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h3><p>完全二叉树 如果将二叉树每层从左到右遍历，那么完全二叉树只有最后一层的右边会出现没有叶子节点的情况，即在前 1~n 之间没有“洞”。</p><p>如下图就是一个完全二叉树：</p><figure><img src="https://jixiaoyong.github.io/images/20181225211304.png" alt="完全二叉树" tabindex="0" loading="lazy"><figcaption>完全二叉树</figcaption></figure><p>但下图不是完全二叉树：</p><figure><img src="https://jixiaoyong.github.io/images/20181223211217.png" alt="不是完全二叉树" tabindex="0" loading="lazy"><figcaption>不是完全二叉树</figcaption></figure><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2>',8),g={href:"https://github.com/jixiaoyong/Notes-Files/blob/master/AndroidLearningResource/java_note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/tree/HeadClazz.kt",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),a(" 参考链接")],-1),y={href:"https://baike.baidu.com/item/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/u013812939/article/details/46798743",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"《Java 数据结构和算法 （第二版）》 Robert Lafore 陈维宁",-1);function w(I,_){const s=o("ExternalLinkIcon");return l(),c("div",null,[r,u,d,m,k,h,v,n("p",null,[n("a",g,[a("👉 点这里"),e(s)]),a(" 查看源码")]),b,n("p",null,[n("a",y,[a("满二叉树——百度百科"),e(s)])]),n("p",null,[n("a",x,[a("完全二叉树与满二叉树的区别"),e(s)])]),f])}const N=p(i,[["render",w],["__file","b3af796a.html.vue"]]);export{N as default};
