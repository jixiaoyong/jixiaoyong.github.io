import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-c00d03e9.js";const i={},u=n("code",null,"HashMap",-1),r={href:"https://jixiaoyong.github.io/blog/posts/ff927bd4.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://jixiaoyong.github.io/blog/posts/b0793c74.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"HashMap",-1),v=n("strong",null,"键值对",-1),m=n("code",null,"SpareArray",-1),b=n("code",null,"ArrayMap",-1),y=t(`<p><strong><code>SpareArray</code>以及他的衍生类</strong>都是以<strong>基本类型</strong>为<code>key</code>，因为避免了<em>自动装箱</em>，并且<strong>用数组直接保存 key、value</strong>（而非像<code>HashMap</code>那样将其封装为<code>Node</code>对象后再保存），因而节省了内存。</p><p><strong><code>ArrayMap</code><strong>则支持</strong>所有类型的 key</strong>，他是<strong>将<code>key</code>和<code>value</code>全部保存在一个数组中</strong>（<code>n</code>位为<code>key</code>，<code>n+1</code>位为<code>value</code>），避免了将其封装为<code>Node</code>对象带来的内存消耗。</p><p><strong>当要保存的数据量比较小（小于几千个）的时候，如果 KEY 是基本类型，推荐使用<code>SparseArray</code>及其衍生类以节省内存，如果 KEY 是其他类型则使用<code>ArrayMap</code>;否则使用<code>HashMap</code>更加高效</strong>。</p><h2 id="sparearray" tabindex="-1"><a class="header-anchor" href="#sparearray" aria-hidden="true">#</a> SpareArray</h2><p><code>SpareArray</code>以及他的衍生类主要用于<strong>以<code>基本类型</code>为<code>key</code>保存非大量数据的场景</strong>。</p><p>相比<code>HashMap</code>而言，他的优点主要在于<strong>没有对保存的数据二次封装</strong>，没有对基本类型的数据<strong>自动装箱</strong>，存储单个数据的成本小，也没有<code>hash</code>计算。</p><p>但他在添加数据时需要扩展数组 (涉及到新建、复制数组，<code>gc()</code>等)，<s>在删除数据时需要缩减数组</s> (查看<code>gc()</code>等源码发现他的数组只会增加，不会缩减)，以及通过二分法查找索引都会消耗性能。</p><blockquote><p>为了避免每次删除时都需要缩减数组，<code>SpareArray</code>在删除数组时只会将其赋值为<code>DELETED</code>，在下次调用其<code>private void gc()</code>方法时丢弃掉这些数据</p></blockquote><p>先看一下<code>SpareArray</code>的结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mGarbage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//是否调用 gc() 方法</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mKeys<span class="token punctuation">;</span><span class="token comment">//所有的 key</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mValues<span class="token punctuation">;</span><span class="token comment">//所有的 value</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> mSize<span class="token punctuation">;</span><span class="token comment">//所保存的数据个数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-put-int-key-e-value" tabindex="-1"><a class="header-anchor" href="#void-put-int-key-e-value" aria-hidden="true">#</a> void put(int key, E value)</h3><p>添加方法先用<strong>二分法</strong>查找<code>key</code>对应的位置：</p><ul><li>如果有，则直接覆盖</li><li>如果没有，则<strong>取反</strong>得到应该<code>插入的位置</code>，并分别插入<code>key</code>和<code>value</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先用二分法查找 key 对应的索引，找到的话返回对应索引，</span>
  <span class="token comment">// 否则返回 key 应该插入的位置的取反值</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">ContainerHelpers</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>mKeys<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果已存在值则直接覆盖</span>
        mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 对二分法查找到的值再取反，得到 key 应该插入的位置</span>
        i <span class="token operator">=</span> <span class="token operator">~</span>i<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mSize <span class="token operator">&amp;&amp;</span> mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">DELETED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
            mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>mGarbage <span class="token operator">&amp;&amp;</span> mSize <span class="token operator">&gt;=</span> mKeys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Search again because indices may have changed.</span>
            i <span class="token operator">=</span> <span class="token operator">~</span><span class="token class-name">ContainerHelpers</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>mKeys<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

      <span class="token comment">// public static &lt;T&gt; T[] insert(T[] array, int currentSize, int index, T element)</span>
      <span class="token comment">// Inserts an element into the array at the specified index,</span>
      <span class="token comment">// growing the array if there is no more room.</span>
        mKeys <span class="token operator">=</span> <span class="token class-name">GrowingArrayUtils</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mKeys<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> i<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mValues <span class="token operator">=</span> <span class="token class-name">GrowingArrayUtils</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mValues<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mSize<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="e-get-int-key" tabindex="-1"><a class="header-anchor" href="#e-get-int-key" aria-hidden="true">#</a> E get(int key)</h3><p>获取数据，先用<strong>二分法</strong>查找，如果找到就返回<code>对应的值</code>，否则返回<code>null</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token class-name">E</span> valueIfKeyNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">ContainerHelpers</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>mKeys<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">DELETED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> valueIfKeyNotFound<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-remove-int-key" tabindex="-1"><a class="header-anchor" href="#void-remove-int-key" aria-hidden="true">#</a> void remove(int key)</h3><p>删除<code>key</code>以及<code>对应的数据</code>。</p><p>同样先用<strong>二分法</strong>查找<code>对应位置</code>，有的话则标记为<code>DELETED</code>，<strong>等待下次<code>gc()</code>时丢弃</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">ContainerHelpers</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>mKeys<span class="token punctuation">,</span> mSize<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">DELETED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">DELETED</span><span class="token punctuation">;</span>
            mGarbage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gc" tabindex="-1"><a class="header-anchor" href="#gc" aria-hidden="true">#</a> gc()</h3><p>在上文中我们看到，删除数据时，<code>mGarbage</code>被标记为<code>true</code>，这样当下一次进行<code>put/valueAt/append/size</code>等涉及到数组大小查询、改动等时，就出触发<code>gc()</code>以便整理数组结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Log.e(&quot;SparseArray&quot;, &quot;gc start with &quot; + mSize);</span>

    <span class="token keyword">int</span> n <span class="token operator">=</span> mSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> mKeys<span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> mValues<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> val <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token comment">// 这里的操作只是将没有被删除的数据移动到了数组的前面</span>
      <span class="token comment">// 而保证了数组后面都是 DELETED 或 null，方便后续操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token constant">DELETED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                keys<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                values<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            o<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    mGarbage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    mSize <span class="token operator">=</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashmap-与-sparearray-及其衍生类对应关系" tabindex="-1"><a class="header-anchor" href="#hashmap-与-sparearray-及其衍生类对应关系" aria-hidden="true">#</a> HashMap 与 SpareArray 及其衍生类对应关系</h3>`,25),h={href:"https://android.jlelse.eu/app-optimization-with-arraymap-sparsearray-in-android-c0b7de22541a",target:"_blank",rel:"noopener noreferrer"},g=t(`<figure><img src="https://jixiaoyong.github.io/images/20191222131219.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="arraymap" tabindex="-1"><a class="header-anchor" href="#arraymap" aria-hidden="true">#</a> ArrayMap</h2><p><code>ArrayMap</code>实现了<code>Map&lt;K, V&gt;</code>接口，他的 API 和<code>HashMap</code>相差无几，但是由于<strong>没有对数据再包装</strong>，<strong>动态调整数组的大小</strong>，一定范围内他比<code>HashMap</code>内存效率高。</p><p>但是如果保存大量数据（超过千位）时，由于他需要<strong>二分法查找</strong>的影响会比<code>HashMap</code>慢很多。</p><blockquote><p><strong><code>ArrayMap</code>特殊之处在于将<code>key</code>，<code>value</code>保存到了同一个数组 mArray 中（n 位保存 key，n+1 位保存 value</strong>）。</p></blockquote><p>先看一下<code>ArrayMap</code>的结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mBaseCache<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> mBaseCacheSize<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mTwiceBaseCache<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> mTwiceBaseCacheSize<span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">boolean</span> mIdentityHashCode<span class="token punctuation">;</span><span class="token comment">//是否强制使用 System.identityHashCode(key) 获取 key 的 HashCode</span>
<span class="token comment">//System.identityHashCode(key) 方法无论类是否重写了 hashCode() 方法，</span>
<span class="token comment">//都会调用 Object.identityHashCode(key) 来获取对象的 hashCode</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mHashes<span class="token punctuation">;</span><span class="token comment">//存储所有 key 的 hash 值</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mArray<span class="token punctuation">;</span><span class="token comment">//存储 key 和 value，大小是 mHashes 的两倍</span>
<span class="token comment">//n 位保存 key，n+1 位保存 value</span>
<span class="token keyword">int</span> mSize<span class="token punctuation">;</span>
<span class="token class-name">MapCollections</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mCollections<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时：</p><ol><li><p>计算<code>key</code>的<code>hash值</code>，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hash <span class="token operator">=</span> mIdentityHashCode <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后使用<code>indexOf()</code>在<code>mHashes</code>中进行二分法查找对应的<code>index</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>index <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>indexOf()</code>方法会先用<strong>二分法</strong>查找<code>hash</code>对应的<code>index</code>,如果<code>index&lt;0</code>则返回<code>index</code>；否则在对比<code>mArray</code>中对应位置<code>mArray[index&lt;&lt;1]</code>的<code>key</code>与要<code>查询的key</code>：</p><ul><li>两者一致：返回<code>index</code></li><li>两者不一致：从<code>index</code>开始，<strong>先向后，再向前</strong>查询是否有相同的<code>key</code>,如果有返回<code>对应index</code></li><li>以上都没有找到：<strong>对<code>mHashes</code>中<code>最后一个与key的hash一致的后一位index</code>取反</strong>，并返回</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> mSize<span class="token punctuation">;</span>

    <span class="token comment">// Important fast case: if nothing is in here, nothing to look for.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearchHashes</span><span class="token punctuation">(</span>mHashes<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If the hash code wasn&#39;t found, then we have no entry for this key.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If the key at the returned index matches, that&#39;s what we want.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mArray<span class="token punctuation">[</span>index<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Search for a matching key after the index.</span>
    <span class="token keyword">int</span> end<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> mHashes<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> hash<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mArray<span class="token punctuation">[</span>end <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Search for a matching key before the index.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mHashes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> hash<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mArray<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Key not found -- return negative value indicating where a</span>
    <span class="token comment">// new entry for this key should go.  We use the end of the</span>
    <span class="token comment">// hash chain to reduce the number of array entries that will</span>
    <span class="token comment">// need to be copied when inserting.</span>
    <span class="token keyword">return</span> <span class="token operator">~</span>end<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="v-put-k-key-v-value" tabindex="-1"><a class="header-anchor" href="#v-put-k-key-v-value" aria-hidden="true">#</a> V put(K key, V value)</h3><p>当添加<code>item</code>时，按照前述规则，先在<code>mArray</code>中查找<code>key</code>对应的<code>索引index</code>：</p><ul><li><p><code>index &gt;= 0</code> ：已经有键为<code>key</code>的数据，直接覆盖旧值并返回</p></li><li><p><code>index &lt; 0 </code>：没有键为<code>key</code>的数据，对数组进行扩容，并保存对应数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>index <span class="token operator">=</span> <span class="token operator">~</span>index<span class="token punctuation">;</span><span class="token comment">//上文 indexOf() 中计算得出的 key 应该添加的位置</span>
mHashes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hash<span class="token punctuation">;</span>
mArray<span class="token punctuation">[</span>index<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
mArray<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="v-get-object-key" tabindex="-1"><a class="header-anchor" href="#v-get-object-key" aria-hidden="true">#</a> V get(Object key)</h3><p><code>get()</code>方法就比较简单了，先查找<code>key</code>的索引，然后取出<code>对应的数据value</code>并返回即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexOfKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>mArray<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-remove-object-key" tabindex="-1"><a class="header-anchor" href="#v-remove-object-key" aria-hidden="true">#</a> V remove(Object key)</h3><p><code>remove()</code>方法也会先使用<code>indexOfKey()</code>计算<code>key的index</code>，然后删除<code>对应位置的数据</code>。</p><p>此外，如果<code>mHashes.length &gt; (BASE_SIZE*2) &amp;&amp; mSize &lt; mHashes.length/3</code>的话，还会缩减<code>数组的大小</code>为<code>osize &gt; (BASE_SIZE*2) ? (osize + (osize&gt;&gt;1)) : (BASE_SIZE*2)</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...其他代码</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>mHashes<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token constant">BASE_SIZE</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mSize <span class="token operator">&lt;</span> mHashes<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...其他代码</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> n <span class="token operator">=</span> osize <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token constant">BASE_SIZE</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>osize <span class="token operator">+</span> <span class="token punctuation">(</span>osize<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">BASE_SIZE</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">allocArrays</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...其他代码</span>
<span class="token punctuation">}</span>

 <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">allocArrays</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//...其他代码</span>
   mHashes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
   mArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,20),f={href:"https://android.googlesource.com/platform/frameworks/base.git/+/master/core/java/com/android/internal/util/GrowingArrayUtils.java",target:"_blank",rel:"noopener noreferrer"},w={href:"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/util/SparseArray.java",target:"_blank",rel:"noopener noreferrer"},x={href:"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/util/ArrayMap.java",target:"_blank",rel:"noopener noreferrer"},j={href:"https://android.jlelse.eu/app-optimization-with-arraymap-sparsearray-in-android-c0b7de22541a",target:"_blank",rel:"noopener noreferrer"},_={href:"https://jixiaoyong.github.io/blog/posts/ff927bd4.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://jixiaoyong.github.io/blog/posts/b0793c74.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://extremej.itscoder.com/sparsearray_source_analyse/",target:"_blank",rel:"noopener noreferrer"};function E(H,z){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("日常开发中，常用的存储键值对的数据结构是"),u,s("，根据"),n("a",r,[s("Java 笔记之 HashMap 保存数据"),e(a)]),s("和"),n("a",d,[s("Java 笔记之计算 Java 对象的大小及其应用"),e(a)]),s("可以知道，"),k,s("存储"),v,s("会占用比较多的内存控件，而对于内存限制较大的 Android 平台来说，为了避免这种浪费，官方推荐我们使用"),m,s("和"),b,s("，本文对这两个类的实现进行分析比较。")]),y,n("p",null,[s("参考"),n("a",h,[s("下图"),e(a)])]),g,n("p",null,[n("a",f,[s("GrowingArrayUtils.java 源码"),e(a)])]),n("p",null,[n("a",w,[s("SparseArray.java 源码"),e(a)])]),n("p",null,[n("a",x,[s("ArrayMap.java 源码"),e(a)])]),n("p",null,[n("a",j,[s("App optimization with ArrayMap & SparseArray in Android"),e(a)])]),n("p",null,[n("a",_,[s("Java 笔记之 HashMap 保存数据"),e(a)])]),n("p",null,[n("a",S,[s("Java 笔记之计算 Java 对象的大小及其应用"),e(a)])]),n("p",null,[n("a",A,[s("SparseArray 的使用及实现原理"),e(a)])])])}const M=p(i,[["render",E],["__file","c2f123c.html.vue"]]);export{M as default};
