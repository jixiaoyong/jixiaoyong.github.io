import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-7684fb8c.js";const r={},l=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d={href:"https://github.com/JessYanCoding/AndroidAutoSize",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>本文主要简单分析其适配原理，以及在实际使用中遇到的一个问题，需要更深入了解原理可以阅读文末参考文献。</p><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><p>UI 给的设计稿一般都是以像素 px 为单位，而在 Android 开发中官方推荐的使用的单位是 dp。</p><blockquote><p>dp 是一个虚拟像素单位，1 dp 约等于中密度屏幕（160dpi；“基准”密度）上的 1 像素。对于其他每个密度，Android 会将此值转换为相应的实际像素数。</p><p>—— Android Developer</p></blockquote><p>根据 Android 官方的定义，dp 在屏幕上实际对应的像素 px 计算方式如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>px <span class="token operator">=</span> dp <span class="token operator">*</span> <span class="token punctuation">(</span>dpi <span class="token operator">/</span> <span class="token number">160</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 dpi 表示：<strong>屏幕每平方英寸有多少像素</strong>，可以通过屏幕对角线的像素数 px/屏幕尺寸 inch 计算。</p><p>而<code>DisplayMetrics.density</code> 字段表示根据当前像素密度指定将 <code>dp</code> 单位转换为像素时所必须使用的缩放系数，即上述方程等价于：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>px <span class="token operator">=</span> dp <span class="token operator">*</span> <span class="token punctuation">(</span>dpi <span class="token operator">/</span> <span class="token number">160</span><span class="token punctuation">)</span>
   <span class="token operator">=</span> dp <span class="token operator">*</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在 dpi 为 160 的屏幕上 1dp 占 1px，在 dpi 为 320 的屏幕上占 2px，那么就能保证同一 dp 的在不同 dpi 上占得像素是等比例变化的。</p><p>但是，在现实生活中面对千变万化的 Android 屏幕，根据 Jessyan 的文章可知由于每种屏幕宽/高对应的总 dp 数不一定都是相同的，所以即使使用了 dp 作为单位，还是会出现同一 dp 在有些屏幕上刚好占满全屏，在有的屏幕上会无法占满全屏或超出屏幕范围。</p><blockquote><p><strong>density</strong> 在每个设备上都是固定的，<strong>DPI / 160 = density</strong>，<strong>屏幕的总 px 宽度 / density = 屏幕的总 dp 宽度</strong></p><ul><li>设备 1，屏幕宽度为 <strong>1080px</strong>，<strong>480DPI</strong>，屏幕总 <strong>dp</strong> 宽度为 <strong>1080 / (480 / 160) = 360dp</strong></li><li>设备 2，屏幕宽度为 <strong>1440px</strong>，<strong>560DPI</strong>，屏幕总 <strong>dp</strong> 宽度为 <strong>1440 / (560 / 160) = 411dp</strong></li></ul><p>——Jessyan</p></blockquote><p>那么该怎么适配呢，再看一眼上述的公式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>屏幕的总 px 宽度 <span class="token operator">/</span> density <span class="token operator">=</span> 屏幕的总 dp 宽度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以适配<strong>屏幕宽度</strong>为例，要使得 dp 在不同屏幕上对应的像素等比例变化，就要<strong>保证屏幕的总 dp 宽度一致</strong>，而屏幕的总 px 宽度是物理条件无法更改，那么就只能<strong>更改 density</strong>。</p><p>以我们使用的设计稿宽度为 375dp 为例：</p><p>在分辨率为 2160*1080、尺寸为 5.99 英寸的屏幕上：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>density <span class="token operator">=</span> 1080px <span class="token operator">/</span> 375dp <span class="token operator">=</span> <span class="token number">2.88</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而在分辨率为 2400*1176、尺寸为 6.53 英寸的屏幕上：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>density <span class="token operator">=</span> 1176px <span class="token operator">/</span> 375dp <span class="token operator">=</span> <span class="token number">3.136</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就保证了，不管在什么样的屏幕上，375dp 始终都能够占满屏幕宽度，保证了布局在不同大小的屏幕上，在屏幕宽度上的比例一致性，也就解决屏幕适配的问题。</p><h2 id="获取状态栏高度的问题" tabindex="-1"><a class="header-anchor" href="#获取状态栏高度的问题" aria-hidden="true">#</a> 获取状态栏高度的问题</h2><p>上述的屏幕适配方案使用简单，且侵入小，在使用到项目中之后，除了部分字体等显示需要微调外，其余内容基本上都完美还原了设计稿的内容。</p>`,23),k=n("strong",null,"获取到的状态栏高度和实际高度不一致",-1),v={href:"http://blankj.com",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"BarUtils.getStatusBarHeight()",-1),g=t(`<p>对比两种代码发现获取状态栏高度的代码逻辑几乎一样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getStatusBarHeight</span><span class="token punctuation">(</span><span class="token class-name">Resources</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> resourceId <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;status_bar_height&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dimen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;android&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resources<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的是，两种方法使用到的 resources 一个是 APP 的，一个是系统的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 1. 我使用到的 resources，从当前 activity 获取</span>
resources<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">.</span>density
<span class="token comment">// 2. Blankj 使用的 resources，从系统获取</span>
Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>displayMetrics<span class="token punctuation">.</span>density
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过分别打印这两种 resources 可以发现，二者的 density 值不一样（以 2160*1080、尺寸为 5.99 英寸的屏幕为例）：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>context<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>DisplayMetrics<span class="token operator">:</span> DisplayMetrics<span class="token punctuation">{</span>density<span class="token operator">=</span><span class="token number">2.88</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2033</span><span class="token punctuation">,</span> scaledDensity<span class="token operator">=</span><span class="token number">2.88</span><span class="token punctuation">,</span> xdpi<span class="token operator">=</span><span class="token number">403.411</span><span class="token punctuation">,</span> ydpi<span class="token operator">=</span><span class="token number">403.411</span><span class="token punctuation">}</span>

Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>DisplayMetrics<span class="token operator">:</span> DisplayMetrics<span class="token punctuation">{</span>density<span class="token operator">=</span><span class="token number">2.7</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2033</span><span class="token punctuation">,</span> scaledDensity<span class="token operator">=</span><span class="token number">2.7</span><span class="token punctuation">,</span> xdpi<span class="token operator">=</span><span class="token number">403.411</span><span class="token punctuation">,</span> ydpi<span class="token operator">=</span><span class="token number">403.411</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),b={href:"https://github.com/JessYanCoding/AndroidAutoSize",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>又知道 android 中将像素和 dp 等单位转化的方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// android.util.TypedValue</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token keyword">int</span> unit<span class="token punctuation">,</span> <span class="token keyword">float</span> value<span class="token punctuation">,</span>
                                       <span class="token class-name">DisplayMetrics</span> metrics<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_PX</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_DIP</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value <span class="token operator">*</span> metrics<span class="token punctuation">.</span>density<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_SP</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value <span class="token operator">*</span> metrics<span class="token punctuation">.</span>scaledDensity<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_PT</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value <span class="token operator">*</span> metrics<span class="token punctuation">.</span>xdpi <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_IN</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value <span class="token operator">*</span> metrics<span class="token punctuation">.</span>xdpi<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">COMPLEX_UNIT_MM</span><span class="token operator">:</span>
            <span class="token keyword">return</span> value <span class="token operator">*</span> metrics<span class="token punctuation">.</span>xdpi <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">25.4f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析可知，通过 getStatusBarHeight() 获取到的状态栏是系统的状态栏 69px（即 25dp），但当使用 APP 内部的 density=2.88 计算时就会只有 24dp，和实际的状态栏高度不一致，所以使用状态栏高度来控制布局的时候就会展示异常。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,4),_={href:"http://jessyan.me/autosize-introduce/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.android.google.cn/training/multiscreen/screendensities#top_of_page",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s/X-aL2vb4uEhqnLzU5wjc4Q",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/JessYanCoding/AndroidAutoSize",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/gyf-dev/ImmersionBar/issues/298",target:"_blank",rel:"noopener noreferrer"};function P(I,D){const a=o("ExternalLinkIcon");return c(),i("div",null,[l,n("p",null,[s("最近在项目里面遇到了屏幕适配的问题，UI 要求 APP 在不同手机上展示效果和设计稿保持“像素级”同步，在对比了几种屏幕适配方案之后，选择了基于今日头条的"),n("a",d,[s("AndroidAutoSize"),e(a)]),s("适配方案。")]),u,n("p",null,[s("但是在后续使用到状态栏相关代码的时候发现"),k,s("，导致显示异常，而使用"),n("a",v,[s("Blankj"),e(a)]),s("的工具类 "),m,s("却可以获取到正确的高度。")]),g,n("p",null,[s("这是由于使用了"),n("a",b,[s("AndroidAutoSize"),e(a)]),s("适配方案后，APP 内部的 density 已经被改成了 2.88，而系统实际的 density 是 2.7。")]),h,n("p",null,[n("a",_,[s("骚年你的屏幕适配方式该升级了!-今日头条适配方案——jessyan"),e(a)])]),n("p",null,[n("a",y,[s("一种极低成本的 Android 屏幕适配方式——字节跳动"),e(a)])]),n("p",null,[n("a",f,[s("支持不同的像素密度——Android Developers"),e(a)])]),n("p",null,[n("a",x,[s("Android 目前稳定高效的 UI 适配方案——拉丁吴"),e(a)])]),n("p",null,[n("a",w,[s("AndroidAutoSize"),e(a)])]),n("p",null,[n("a",A,[s("请问两种获取屏幕密度的方式有什么区别，望解答多谢"),e(a)])])])}const q=p(r,[["render",P],["__file","76d69fc6.html.vue"]]);export{q as default};
