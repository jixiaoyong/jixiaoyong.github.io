import{_ as t,r as i,o as p,c as o,a as n,b as a,d as e,e as l}from"./app-7684fb8c.js";const c={},d=l(`<p>当 APP 的 minSdkVersion 低于 Android 5 时，在方法数大于 65536 时，需要将 APP 打包为多个 DEX 文件，此时需要添加 MultiDex 依赖。</p><p>官方方法如下：</p><p>1.<code>build.gradle</code></p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>android <span class="token punctuation">{</span>
    defaultConfig <span class="token punctuation">{</span>
        <span class="token punctuation">...</span>
        minSdkVersion <span class="token number">15</span>
        targetSdkVersion <span class="token number">28</span>
        multiDexEnabled <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
  compile <span class="token string">&#39;com.android.support:multidex:1.0.3&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.<code>MyApplication</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>方式❶：
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">MultiDexApplication</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

方式❷：
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">SomeOtherApplication</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachBaseContext</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">MultiDex</span><span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，为了避免一些启动期间需要的任何类未在主 DEX 文件中提供而导致<code>java.lang.NoClassDefFoundError</code>，还需要告诉 AS 将这些类添加到主 DEX 文件中：</p><p>3.<code>build.gradle</code></p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>android <span class="token punctuation">{</span>
    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            ❶ multiDexKeepFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;multidex-config.txt&#39;</span><span class="token punctuation">)</span>
            ❷ <span class="token function">multiDexKeepProguard</span><span class="token punctuation">(</span><span class="token string">&#39;multidex-config.pro&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//multidex-config.txt</span>
com<span class="token interpolation-string"><span class="token string">/example/</span></span>MyClass<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">com</span><span class="token interpolation-string"><span class="token string">/example/</span></span>MyOtherClass<span class="token punctuation">.</span><span class="token keyword">class</span>

<span class="token comment">//multidex-config.pro</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>MyClass</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>MyClassToo</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span><span class="token operator">**</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// All classes in the com.example package</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在实际运行中，Android 4.x 的系统会在 APP 安装后第一次启动时，在<code>MultiDex.install(this)</code>方法中进行 DEX 文件合并优化等耗时操作（主线程），往往会持续数十秒以上，从而导致 APP 第一次启动时长时间白屏，十分影响体验。</p><p>查阅相应的资料后大体有以下几种方案</p><ol><li><p>设置主 Activity 的背景为透明色</p><p>这样当用户点击 APP 图标启动 APP 时，在主 Activity 启动之前看到的一直是桌面的样子而非白屏，但这只是一种障眼法，用户可能会以为系统卡顿，体验并不好。</p></li><li><p>在 Application 中检测到是第一次启动的话，新开一个进程并在其中进行<code>MultiDex.install(this)</code></p><p>这种方法在主进程启动时，检测到尚未进行 MultidexOpt，则阻塞当前进程，新开一个进程，在其中加载一个 Activity，并在后台进程运行<code>MultiDex.install(this)</code>，当 MultidexOpt 完成后再关闭当前进程，返回主进程继续正常开启 APP。</p><p>由于主进程被阻塞的同时成为了后台进程，所以也不会触发 ANR，此外子进程中的过渡 Activity 也只用到了基本的类，所以基本不用担心会触发<code>java.lang.NoClassDefFoundError</code>，而且过渡 Activity 可以展示进度、提示等用户友好的页面，相对来说体验也好了很多。</p></li></ol><p>但是这种方法从子进程返回主进程涉及到进程间通信，以及主进程的主 Activity 启动时生命周期会出现异常 (异常 (<code>onCreate()</code> -&gt; <code>onStart()</code> -&gt; <code>onResume()</code> -&gt; <code>onPause()</code>-&gt;<code>onResume()</code>)，仍然不是很好的解决方法。</p><p>结合上述的分析后，可以看到这种问题的优化思路主要在于如何在避免<code>java.lang.NoClassDefFoundError</code>的同时，在后台可靠的通过<code>MultiDex.install(this)</code>执行 MultidexOpt 操作。</p><p>通过以上方案 1 和 2 的结合，可以有一个比较完美的解决方案：</p><ol><li>方案 2 中在过渡 Activity 的后台线程进行 MultidexOpt 操作思路是正确的，但是不需要再单独开一个进程，我们完全可以将其当做主进程的第一个 Activity，等待 MultidexOpt 操作完成后再跳转到主 Activity 并 finish 掉本 Activity，这样主 Activity 的生命周期也不会受影响。</li><li>这种情况下在部分低端机上，过渡 Activity 到主 Activity 跳转时会出现短暂黑屏，我们可以在过渡页面将 Activity 切换动画设置为渐变效果，并将主 Activity 背景设置为透明，待主 Activity 完全加载好后再将背景切换为普通模式。</li></ol><p>综上处理，我们的 Application 无需改动，甚至主 Activity 也可以不做改动，只需要添加一个过渡页面为启动 Activity，在其中后台进行 MultidexOpt，等 DEX 文件处理完毕后再加载主 Activity。对项目改动少并且逻辑较为简单。</p><p>注：</p><ol><li>MultiDexOpt 即执行<code>MultiDex.install(getApplication());</code>方法；</li><li>需要注意过渡 Activity 尽量少的使用类，并且要确保过渡 Activity 可能会调用到的类加载到了主 dex 文件中。</li></ol><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,20),u={href:"https://developer.android.google.cn/studio/build/multidex.html?hl=zh-CN",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.jianshu.com/p/c2d7b76ff063",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.zybuluo.com/946898963/note/1219741",target:"_blank",rel:"noopener noreferrer"};function k(m,b){const s=i("ExternalLinkIcon");return p(),o("div",null,[d,n("p",null,[n("a",u,[a("配置方法数超过 64K 的应用"),e(s)])]),n("p",null,[n("a",r,[a("Android MultiDex 初次启动 APP 优化方案优雅的实现"),e(s)])]),n("p",null,[n("a",v,[a("MultiDex 深入学习"),e(s)])])])}const y=t(c,[["render",k],["__file","caa169b7.html.vue"]]);export{y as default};
