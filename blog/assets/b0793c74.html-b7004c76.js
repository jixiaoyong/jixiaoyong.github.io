import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-e58551bb.js";const r={},i=n("h1",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),d={href:"https://www.javaworld.com/article/2077408/sizeof-for-java.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/ITer_ZC/article/details/41822719",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/u013380694/article/details/102739636",target:"_blank",rel:"noopener noreferrer"},m=t("<table><thead><tr><th>分类</th><th>大小（byte）</th><th>备注</th></tr></thead><tbody><tr><td>对象头</td><td>8</td><td>保存对象的 class 信息、ID、在虚拟机中的状态</td></tr><tr><td>Oop指针</td><td>4</td><td></td></tr><tr><td>数据区</td><td></td><td>对象实际包含的数据,引用类型大小为4 bytes</td></tr><tr><td>数组长度</td><td>4</td><td>只有数组对象才有</td></tr><tr><td>8比特对齐</td><td></td><td>将对象总大小对齐到8字节所需的填充</td></tr></tbody></table>",1),v=n("p",null,"此外，如果是（非静态）内部类的话，由于他默认持有外部类的引用，所以会比普通类的对象多4个byte。",-1),b={href:"https://stackoverflow.com/a/12193259/8389461",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jianshu.com/p/9d729c9c94c4",target:"_blank",rel:"noopener noreferrer"},g=n("img",{src:"https://jixiaoyong.github.io/images/20191221191518.webp",alt:"图片来自https://www.jianshu.com/p/9d729c9c94c4",tabindex:"0",loading:"lazy"},null,-1),_={href:"https://www.jianshu.com/p/9d729c9c94c4",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"其中，数据区占用的大小如下：",-1),f={href:"https://speakerdeck.com/romainguy/android-memories?slide=29",target:"_blank",rel:"noopener noreferrer"},w=n("img",{src:"https://jixiaoyong.github.io/images/20191221104050.png",alt:"Size of data from speakerdeck.com",tabindex:"0",loading:"lazy"},null,-1),j={href:"http://speakerdeck.com",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"#示例",-1),z={href:"https://speakerdeck.com/romainguy",target:"_blank",rel:"noopener noreferrer"},A={href:"https://speakerdeck.com/romainguy/android-memories?slide=34",target:"_blank",rel:"noopener noreferrer"},x=t(`<blockquote><p>一个空的class占用了4+8=12个byte的内存，再加上8比特对齐，实际占用大小为16比特。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Empty</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E=t("<p>占用大小：</p><table><thead><tr><th>Allocation</th><th>Size in bytes</th></tr></thead><tbody><tr><td>dlmalloc 引用</td><td>4</td></tr><tr><td>Object overhead（对象头）</td><td>8</td></tr></tbody></table><p>Total = 4 + 8 =12 bytes</p><p>经过<em>8-byte aligned</em>后： total = 16 bytes</p>",4),M={href:"https://speakerdeck.com/romainguy/android-memories?slide=34",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[s("此外还有"),n("strong",null,"包含了数据的对象"),s("大小计算方式如下：")],-1),I=n("img",{src:"https://jixiaoyong.github.io/images/20191221171816.png",alt:"图片来自https://speakerdeck.com/romainguy/android-memories?slide=42",tabindex:"0",loading:"lazy"},null,-1),H={href:"https://speakerdeck.com/romainguy/android-memories?slide=42",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.cnblogs.com/zhanjindong/p/3757767.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://speakerdeck.com/romainguy/android-memories?slide=54",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"width&padding = 8 ",-1),N=t(`<p>按照开头的公式：<code>数组大小 = 8 对象头 + 4 Oop指针 + 4 数组大小标记length + 数组数据占用大小 + 8比特对齐 </code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// arr0大小 = 8 + 4 + 4 + 0 + 8比特对齐(0) = 16 bytes</span>
<span class="token keyword">int</span> arr0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr1大小 = 8 + 4 + 4 + 4*1 + 8比特对齐(4) = 16 + 4 = 20 + 8比特对齐(4) = 24 bytes</span>
<span class="token keyword">int</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr1大小 = 8 + 4 + 4 + 4*10 + 8比特对齐(0) = 16 + 40 = 56 + 8比特对齐(0) = 56 bytes</span>
<span class="token keyword">int</span> arra10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="计算对象大小的工具" tabindex="-1"><a class="header-anchor" href="#计算对象大小的工具" aria-hidden="true">#</a> 计算对象大小的工具</h1>`,3),V={href:"https://stackoverflow.com/a/52682/8389461",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/cirosantilli/java-cheat/tree/a907ad2243dce2109c54d27323f9387065b5ca5c/instrument",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"可以参考文章：",-1),D={href:"https://blog.csdn.net/ITer_ZC/article/details/41822719",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.iteye.com/blog/brandnewuser-2113828",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.cnblogs.com/zhanjindong/p/3757767.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/cirosantilli/java-cheat/tree/a907ad2243dce2109c54d27323f9387065b5ca5c/instrument",target:"_blank",rel:"noopener noreferrer"},U=t(`<p><code>Sizeof.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span></span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sizeof</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        instrumentation <span class="token operator">=</span> inst<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instrumentation<span class="token punctuation">.</span><span class="token function">getObjectSize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Makefile</code></p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>//Makefile文件
<span class="token builtin-target builtin">.POSIX</span><span class="token punctuation">:</span>
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> all clean

<span class="token target symbol">all</span><span class="token punctuation">:</span>
	javac *.java
	jar -cfm Sizeof.jar META-INF/MANIFEST.MF Sizeof.class
<span class="token target symbol">	java -ea -javaagent</span><span class="token punctuation">:</span>Sizeof.jar Main

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.class *.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时先新建一个Java类，在其中调用<code>sizeof()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Sizeof</span><span class="token punctuation">.</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>	javac *.java //编译当前目录下的java文件
	jar <span class="token parameter variable">-cfm</span> Sizeof.jar META-INF/MANIFEST.MF Sizeof.class //将Sizeof.class打包为Sizeof.jar
	<span class="token function">java</span> <span class="token parameter variable">-ea</span> <span class="token parameter variable">-javaagent:Sizeof.jar</span> Main //输出sizeOf计算结果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用" aria-hidden="true">#</a> 实际应用</h1><h2 id="string最长为65534" tabindex="-1"><a class="header-anchor" href="#string最长为65534" aria-hidden="true">#</a> <code>String</code>最长为65534</h2><p><code>String s = “”;</code>中，在编译期最多可以有65534个字符</p>`,11),Y=t(`<p><s>原因是，Java中的UTF-8编码的Unicode字符串在常量池中以<code>CONSTANT_Utf8</code>类型表示，常量池中的所有字面量几乎都是通过<code>CONSTANT_Utf8_info</code>描述的。</s></p><p><s>这里面的<code>u2 length</code>表明了该类型存储数据的长度，而<code>u2</code>是无符号的16位整数，因此理论上允许的的最大长度是<code>2^16=65536</code>。而 Java class 文件是使用一种变体<code>UTF-8</code>格式来存放字符的，<code>null</code> 值使用两个字节来表示，因此只剩下<code> 65536－ 2 ＝ 65534</code>个字节。</s></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>CONSTANT_Utf8_info <span class="token punctuation">{</span>
u1 tag<span class="token punctuation">;</span>
u2 length<span class="token punctuation">;</span>
u1 bytes<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所以，在Java中，所有需要保存在常量池中的数据，长度最大不能超过65535，这当然也包括字符串的定义</strong></p><p>上面提到的这种String长度的限制是<em>编译期的限制</em>，也就是使用<code>String s= “”;</code>这种字面值方式定义的时候才会有的限制。</p><p>String在<em>运行期</em>有没有限制呢，答案是有的，就是我们前文提到的那个<code>Integer.MAX_VALUE </code>，这个值约等于4G，在运行期，如果String的长度超过这个范围，就可能会抛出异常。(在jdk 1.9之前）</p>`,6),B={href:"https://blog.csdn.net/u013380694/article/details/102739636",target:"_blank",rel:"noopener noreferrer"},R=t(`<p><strong>一个String对象,占用大小（JDK1.8）为24 bytes</strong>（不计算持有的char数组占用的大小）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//一个数组对象的引用，占用4 bytes</span>
<span class="token doc-comment comment">/** Cache the hash code for the string */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0   //一个int类型，占用4 bytes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),P=n("code",null,"对象头+引用",-1),X={href:"https://www.baeldung.com/java-size-of-object#1-objects-references-and-wrapper-classes",target:"_blank",rel:"noopener noreferrer"},Z=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>size = ( 12 对象头 + 4 value + 4 hash ) + 4 8byte对齐 = 24 bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="枚举类enum" tabindex="-1"><a class="header-anchor" href="#枚举类enum" aria-hidden="true">#</a> 枚举类enum</h2><h3 id="枚举类大小的计算" tabindex="-1"><a class="header-anchor" href="#枚举类大小的计算" aria-hidden="true">#</a> 枚举类大小的计算</h3><p>枚举类中的每个枚举都是该枚举类的一个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">EnumClazz</span><span class="token punctuation">{</span>
    <span class="token class-name">Day</span><span class="token punctuation">,</span><span class="token class-name">Hour</span><span class="token punctuation">,</span><span class="token class-name">Minute</span><span class="token punctuation">,</span><span class="token class-name">Second</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们用<code>javap</code>查看其编译后的字节码可以看到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//javac EnumClazz.java</span>
<span class="token comment">//javap EnumClazz.class</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EnumClazz</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnumClazz</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumClazz</span> <span class="token class-name">Day</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumClazz</span> <span class="token class-name">Hour</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumClazz</span> <span class="token class-name">Minute</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumClazz</span> <span class="token class-name">Second</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumClazz</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumClazz</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单计算一下这个<code>EnumClazz</code>的大小（不含引用对象的大小）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>enumClassSize <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">32</span> bytes
       对象头 <span class="token operator">+</span>  引用 <span class="token operator">+</span> 枚举类值的引用类型 <span class="token operator">*</span> <span class="token number">4</span>个 <span class="token operator">+</span> <span class="token number">4</span> 数组引用类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们再看一下每个枚举类的值（以<code>EnumClazz.Day</code>为例）的大小：</p><p><code>enum</code>类的每个值实际上都继承自<code>java.lang.Enum</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
        <span class="token comment">//枚举值名称</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token comment">//枚举值次序，从0开始</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ordinal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，我们可以计算<code>EnumClazz.Day</code>的大小：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>daySize <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span>比特对齐<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">24</span> bytes
     对象头 <span class="token operator">+</span> <span class="token class-name">Oop</span>引用 <span class="token operator">+</span> name <span class="token operator">+</span> ordinal <span class="token operator">+</span> <span class="token number">8</span>比特对齐
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，本例中<strong>每一个枚举类值占用24 bytes</strong>，由此可以计算出<code>EnumClazz</code>实际占用的大小应该是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>realSize <span class="token operator">=</span> enumClassSize <span class="token operator">+</span> daySize <span class="token operator">*</span> <span class="token number">4</span>  <span class="token operator">=</span> <span class="token number">128</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="android中是否应该使用枚举" tabindex="-1"><a class="header-anchor" href="#android中是否应该使用枚举" aria-hidden="true">#</a> Android中是否应该使用枚举</h3>`,17),W=n("em",null,"RomainGuy",-1),Q={href:"https://speakerdeck.com/romainguy/android-memories?slide=67",target:"_blank",rel:"noopener noreferrer"},$=n("img",{src:"https://jixiaoyong.github.io/images/20191221172243.png",alt:"https://speakerdeck.com/romainguy/android-memories?slide=67",tabindex:"0",loading:"lazy"},null,-1),nn={href:"https://speakerdeck.com/romainguy/android-memories?slide=67",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,"关于是否应该在Android中使用枚举类，可以参考下文：",-1),an={href:"https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/",target:"_blank",rel:"noopener noreferrer"},en={href:"https://stackoverflow.com/a/29972028/8389461",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>总结起来其结论就是：</p><p><strong>当需要用到枚举类的特性时，比如非连续判断，方法重载等时就使用枚举，否则就使用占用内存更小的常量类。</strong></p><h2 id="sparsearray-arraymap-vs-hashmap" tabindex="-1"><a class="header-anchor" href="#sparsearray-arraymap-vs-hashmap" aria-hidden="true">#</a> SparseArray&amp;ArrayMap VS HashMap</h2><p><code>HashMap</code>的数据是经过包装后保存在<code>HashMap.Node&lt;K,V&gt;</code>数组中。</p><p>下面是<code>HashMap</code>的结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span> <span class="token comment">//4+ bytes，保存HashMap的键值对等信息</span>
  <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span> <span class="token comment">//4+ bytes</span>
  <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
  <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
  <span class="token keyword">int</span> threshold<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
  <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
  
  <span class="token comment">//继承自AbstractMap</span>
  <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span>        keySet<span class="token punctuation">;</span> <span class="token comment">//4+ bytes</span>
  <span class="token keyword">transient</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span> <span class="token comment">//4+ bytes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),on=n("code",null,"android.util.SparseArray",-1),pn={href:"https://juejin.im/entry/57c3e8c48ac24700634bd3cf",target:"_blank",rel:"noopener noreferrer"},cn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mGarbage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mKeys<span class="token punctuation">;</span> <span class="token comment">//4+ bytes</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mValues<span class="token punctuation">;</span> <span class="token comment">//4+ bytes</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> mSize<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ln={href:"https://developer.android.google.cn/reference/android/util/SparseArray",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"SparseArray",-1),dn=n("code",null,"HashMap",-1),un=t("<ul><li>将<code>KEY</code>和<code>VALUE</code>直接保存在数组中，避免了将其包装为一个<code>Node</code>对象的开销</li><li>由于<code>SparseArray</code>类的key是<code>int</code>类型而非被自动装箱后的<code>Integer</code>对象，所以当同样使用<code>int</code>类型的<code>key</code>保存数据时，<code>SparseArray</code>类的<code>key</code>要占用更少的内存。</li></ul>",1),kn=n("code",null,"SparseArray",-1),mn={href:"https://developer.android.google.cn/reference/java/util/HashMap",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"HashMap",-1),bn=n("strong",null,"avoids auto-boxing keys",-1),hn=n("strong",null,"doesn't rely on an extra entry",-1),gn={href:"https://developer.android.google.cn/reference/android/util/SparseArray",target:"_blank",rel:"noopener noreferrer"},_n=t("<p>但是，<code>SparseArray</code>有以下局限性：</p><ul><li><p>在每次<code>put/get/remove</code>的时候都需要使用二分法(<code>ContainerHelpers.binarySearch(mKeys, mSize, key)</code>)查找是否已经存在<code>KEY</code>对应的值（有的话查找其位置）</p></li><li><p>在添加和删除item的时候都需要在数组中增删条目（耗时，尽管为了优化性能，<code>SparseArray</code>在删除时只是将对于的值标记为<code>DELETED</code>，在下次更新该<code>KEY</code>对于的值时直接覆盖，或者在<code>GC</code>时删除）。</p><p><code> private static final Object DELETED = new Object();</code></p><p>HashMap的删除涉及到数组、链表和红黑树（JDK1.8）</p></li><li><p><strong>在容纳数百个项目时性能会比HashMap小大约50%</strong>。</p></li></ul><blockquote><p>每当需要<strong>增长数组</strong>或<strong>获取数组大小</strong>或<strong>获取条目值</strong>时，都必须执行垃圾回收GC。</p></blockquote>",3),yn={href:"https://stackoverflow.com/a/31413003/8389461",target:"_blank",rel:"noopener noreferrer"},fn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SparseArray</span>          <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">SparseBooleanArray</span>   <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">SparseIntArray</span>       <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">SparseLongArray</span>      <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">LongSparseArray</span>      <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">LongSparseLongArray</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">//this is not a public class                                 </span>
                                    <span class="token comment">//but can be copied from  Android source code </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wn=n("code",null,"android.util.ArrayMap",-1),jn=n("code",null,"SparseArray",-1),Sn=n("strong",null,"两者占用内存小，但是慢并且最好不要用来存储大容量的数据",-1),zn=n("code",null,"SparseArray",-1),An=n("code",null,"HashMap",-1),xn={href:"https://blog.csdn.net/u010687392/article/details/47809295",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"ArrayMap",-1),Mn=n("code",null,"HashMap",-1),Cn={href:"https://speakerdeck.com/romainguy",target:"_blank",rel:"noopener noreferrer"},In={href:"https://speakerdeck.com/romainguy/android-memories?slide=94",target:"_blank",rel:"noopener noreferrer"},Hn=n("p",null,[s("保存1000个int对象的"),n("code",null,"SparseArray"),s(" 占用大小为：8072 bytes")],-1),Jn=n("p",null,[s("保存1000个对象的"),n("code",null,"HashMap<Integer,Integer>"),s(" 占用大小为：64136 bytes")],-1),On=n("p",null,"几乎相差8倍！",-1),Tn=t('<p>综上，<strong>当要保存的数据量比较小（小于几千个）的时候，如果KEY是基本类型，推荐使用<code>SparseArray</code>及其衍生类以节省内存，如果KEY是其他类型则使用<code>ArrayMap</code>;否则使用<code>HashMap</code>更加高效</strong>。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1><p>除文章中罗列的链接外：</p>',3),Nn={href:"https://blog.csdn.net/u013380694/article/details/102739636",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://www.javaworld.com/article/2077408/sizeof-for-java.html",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://speakerdeck.com/romainguy/android-memories",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://stackoverflow.com/a/31413003/8389461",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://blog.csdn.net/u010687392/article/details/47809295",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://juejin.im/entry/57c3e8c48ac24700634bd3cf",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://developer.android.google.cn/reference/android/util/SparseArray",target:"_blank",rel:"noopener noreferrer"};function Gn(Un,Yn){const a=p("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[n("strong",null,[s("注意 除非特殊说明，以下所说的计算Java对象大小，不涉及该对象所持有的对象本身的大小，只计算该Java对象本身的大小（其中引用类型对象大小只计算为4 bytes），如果要遍历计算Java对象大小（包含其持有对象的大小）可以参考"),n("a",d,[s("这篇文章 Sizeof for Java"),e(a)])])]),n("p",null,[s("一个Java对象在内存中的大小包括以下(以64位JVM启用压缩为例，综合"),n("a",u,[s("这里"),e(a)]),s("和"),n("a",k,[s("这里"),e(a)]),s("的信息整理)：")]),m,n("blockquote",null,[v,n("p",null,[n("a",b,[s("https://stackoverflow.com/a/12193259/8389461"),e(a)])])]),n("p",null,[s("可以参照"),n("a",h,[s("这张图"),e(a)])]),n("figure",null,[g,n("figcaption",null,[s("图片来自"),n("a",_,[s("https://www.jianshu.com/p/9d729c9c94c4"),e(a)])])]),y,n("p",null,[s("（图片来自于"),n("a",f,[s("android-memories"),e(a)]),s("）")]),n("figure",null,[w,n("figcaption",null,[s("Size of data from "),n("a",j,[s("speakerdeck.com"),e(a)])])]),S,n("p",null,[s("根据"),n("a",z,[s("Romain Guy"),e(a)]),s("在"),n("a",A,[s("SpeakerDeck"),e(a)]),s("中的说法：")]),x,n("blockquote",null,[E,n("p",null,[n("a",M,[s("https://speakerdeck.com/romainguy/android-memories?slide=34"),e(a)])])]),C,n("figure",null,[I,n("figcaption",null,[s("图片来自"),n("a",H,[s("https://speakerdeck.com/romainguy/android-memories?slide=42"),e(a)])])]),n("p",null,[s("对于数组的大小计算（参考"),n("a",J,[s("一个Java对象到底占用多大内存？"),e(a)]),s("和"),n("a",O,[s("romainguy/android-memories"),e(a)]),s("，后者关于数组大小的计算中"),T,s("的意义存疑）:")]),N,n("p",null,[s("具体的如何计算Java中Object大小，可以参考"),n("a",V,[s("stackoverflow的这个回答"),e(a)]),s("（"),n("a",K,[s("这里"),e(a)]),s("有一份Github上面的实现源码）")]),L,n("p",null,[n("a",D,[s("聊聊JVM（三）两种计算Java对象大小的方法"),e(a)])]),n("p",null,[n("a",q,[s("准确计算Java中对象的大小"),e(a)])]),n("p",null,[n("a",F,[s("一个Java对象到底占用多大内存？"),e(a)])]),n("p",null,[s("这里提供一个实例（"),n("a",G,[s("参考自这里"),e(a)]),s("）：")]),U,n("blockquote",null,[Y,n("p",null,[n("a",B,[s("https://blog.csdn.net/u013380694/article/details/102739636"),e(a)])])]),R,n("p",null,[s("再加上在64位JVM中，一个对象具有12 bytes的"),P,s("，要求对齐到8的倍数(来源"),n("a",X,[s("2.1. Objects, References and Wrapper Classes"),e(a)]),s(")，所以一个String对象的大小是：")]),Z,n("p",null,[s("关于Android中使用枚举和常量所占用的大小对比"),W,s("有"),n("a",Q,[s("下图"),e(a)]),s("的对比。")]),n("figure",null,[$,n("figcaption",null,[n("a",nn,[s("https://speakerdeck.com/romainguy/android-memories?slide=67"),e(a)])])]),sn,n("p",null,[n("a",an,[s("https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/"),e(a)])]),n("p",null,[n("a",en,[s("https://stackoverflow.com/a/29972028/8389461"),e(a)])]),tn,n("p",null,[s("再看看Android提供的"),on,s("类(具体分析可参考："),n("a",pn,[s("SparseArray 的使用及实现原理"),e(a)]),s(")")]),cn,n("p",null,[s("再结合"),n("a",ln,[s("官方的描述"),e(a)]),s("，"),rn,s("类很明显要比"),dn,s("占用更少的内存：")]),un,n("blockquote",null,[n("p",null,[kn,s(" is intended to be more memory-efficient than a "),n("a",mn,[vn,e(a)]),s(", because it "),bn,s(" and its data structure "),hn,s(" object for each mapping.")]),n("p",null,[n("a",gn,[s("https://developer.android.google.cn/reference/android/util/SparseArray"),e(a)])])]),_n,n("p",null,[s("此外，还有以下可以替换HashMap的(数据来自"),n("a",yn,[s("这里"),e(a)]),s(")：")]),fn,n("p",null,[s("此外，还有"),wn,s("其特性与"),jn,s("类似（"),Sn,s("），只不过它支持key值为其他类型，占用内存大小在"),zn,s("和"),An,s("之间(参考"),n("a",xn,[s("这里"),e(a)]),s(")，此外"),En,s("的API和"),Mn,s("类似。")]),n("blockquote",null,[n("p",null,[s("根据"),n("a",Cn,[s("Romain Guy"),e(a)]),s("的"),n("a",In,[s("计算"),e(a)]),s("：")]),Hn,Jn,On]),Tn,n("p",null,[n("a",Nn,[s("https://blog.csdn.net/u013380694/article/details/102739636"),e(a)])]),n("p",null,[n("a",Vn,[s("Sizeof for Java -- javaworld.com"),e(a)])]),n("p",null,[n("a",Kn,[s("RomainGuy-Android Memories"),e(a)]),s("（推荐）")]),n("p",null,[n("a",Ln,[s("SparseArray vs HashMap"),e(a)])]),n("p",null,[n("a",Dn,[s("Android内存优化（使用SparseArray和ArrayMap代替HashMap）"),e(a)])]),n("p",null,[n("a",qn,[s("SparseArray 的使用及实现原理"),e(a)])]),n("p",null,[n("a",Fn,[s("SparseArray -- developer.android.google.cn"),e(a)])])])}const Pn=o(r,[["render",Gn],["__file","b0793c74.html.vue"]]);export{Pn as default};
