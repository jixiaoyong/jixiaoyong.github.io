import{_ as e,r as t,o as p,c as o,a as n,b as s,d as l,e as c}from"./app-b46831ed.js";const i={},r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),u=n("p",null,"本文介绍两种高级排序：希尔排序和快速排序。",-1),d=n("p",null,[s("希尔排序的时间复杂度是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"N"),n("mo",null,"∗"),n("mo",{stretchy:"false"},"("),n("mi",null,"L"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"N"),n("msup",null,[n("mo",{stretchy:"false"},")"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(N*(LogN)^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},[n("span",{class:"mclose"},")"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("，简单易实现，在所有排序中可以优先使用。")],-1),k=n("p",null,[s("快速排序的时间复杂度是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"N"),n("mo",null,"∗"),n("mi",null,"L"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(N*LogN)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"L"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),s("，是所有通用排序中最快的。")],-1),m=c(`<p>排序方向：<code>小 → 大</code>。</p><h2 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h2><p>希尔排序基于插入排序（将左边无须的元素依次插入到右边有序数组中），不同的是希尔排序的增量逐渐减小到 1，而插入排序的增量一直是 1。</p><blockquote><p>增量 排序的时候进行比较的两个元素之间的间隔：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于数组<code>arr</code>中的元素来说，<code>1</code>和 <code>2</code>之间的增量是 1，而 <code>1</code>和 <code>3</code>之间的增量是 2，以此类推。</p></blockquote><p>由于插入排序在排序进行到后期，右边有序数组的大小变大，导致插入和移动的次数越来越多，而且如果数组恰好是反序的，会很耗时。</p><p>而希尔排序在刚开始排序时，先取一个适当的增量<code>n</code>，按照这个增量对数组<code>arr</code>进行插入排序，得到一个<em>基本有序</em>的数组，他内部有<code>n</code>个有序的子数组；再将增量<code>n</code>减一，在此进行插入排序；如此反复直到 n 为 1，排序完毕的数据即为有序数组。</p><figure><img src="https://jixiaoyong.github.io/images/20190103191850.png" alt="希尔排序——4 增量排序示意图" tabindex="0" loading="lazy"><figcaption>希尔排序——4 增量排序示意图</figcaption></figure><h3 id="增量的选择" tabindex="-1"><a class="header-anchor" href="#增量的选择" aria-hidden="true">#</a> 增量的选择</h3><p>可以想象，增量的计算对希尔排序效率有很大影响。</p><p>这些增量的集合称为<strong>间隔序列</strong>，一般要求这些增量之间互质，这样就不会对已经排序的数组再次排序。</p><p>一个常用的间隔序列计算公式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>h<span class="token operator">=</span>3h<span class="token operator">+</span><span class="token number">1</span>
计算的h值一般为：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>增量<code>h</code>要小于数组大小。</p><h3 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 希尔排序
 * 思路：
 * 1/3 将待排序数组分为 h 个间隔为 h 的小数组，
 * 2/3 对这些小数组进行插入排序，将排序结果写入原待排序数组
 * 3/3 按照 h=3*h+1 的算法减小 h 在此进行希尔排序，直至 h 为 1
 * --将大数组分为较小的数组，拍完序后再对这些&quot;有序&quot;的小数组进行排序
 * 小 - &gt; 大
 */</span>
<span class="token keyword">fun</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>intArray<span class="token operator">:</span> IntArray<span class="token punctuation">,</span> h<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> IntArray <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//间隔排序</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">0</span> until h<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//依次遍历 x,x+1,x+2 ... x+(h-1);形成 h 个有序子数组</span>

            <span class="token keyword">var</span> list <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            intArray<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">var</span> partSortArr <span class="token operator">=</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">var</span> listIndex <span class="token operator">=</span> <span class="token number">0</span>
            intArray<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    intArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> partSortArr<span class="token punctuation">[</span>listIndex<span class="token operator">++</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//将增量减小，再次减小排序，直到 h==1</span>
        <span class="token keyword">return</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>intArray<span class="token punctuation">,</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 获取希尔排序间隔
 * 对排序速度影响较大，要求互质，计算方式不唯一
 */</span>
<span class="token keyword">fun</span> <span class="token function">getShellSortH</span><span class="token punctuation">(</span>range<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 * 插入排序
 * 思路：
 * 1/2 先假设第一个数是已经排好序的
 * 2/2 将后面的数字依次与其比较，并插入到对应位置
 * small -&gt; big
 */</span>
<span class="token keyword">fun</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>intArray<span class="token operator">:</span> IntArray<span class="token punctuation">)</span><span class="token operator">:</span> IntArray <span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until intArray<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">0</span> until i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> intArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> temp <span class="token operator">=</span> intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> i downTo j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span>
                    <span class="token punctuation">}</span>
                    intArray<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> intArray<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
                intArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> intArray
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>快速排序在大多数情况下都是最快的。</p><h3 id="划分" tabindex="-1"><a class="header-anchor" href="#划分" aria-hidden="true">#</a> 划分</h3><p>划分指在一组数据中，指定一个值<code>C</code>,所有小于<code>C</code>的移动到左边，所有大于<code>C</code>的移动到右边。</p><p>选出来的这个值<code>C</code>，叫做<strong>枢纽</strong>。</p><h4 id="划分算法" tabindex="-1"><a class="header-anchor" href="#划分算法" aria-hidden="true">#</a> 划分算法</h4><ul><li>在数据左右两端各有一个指针指向当前元素：<code>left</code>，<code>right</code>；</li><li><code>left</code>指针向右移动查找比<code>C</code>大的值，<code>right</code>指针向左移动查找比<code>C</code>小的值，当遇到满足条件的元素则退出；</li><li>当两个指针都退出时，将其指向的元素交换位置，然后再分别移动指针，直到两个指针相遇，划分结束。</li></ul><h3 id="快速排序的思路" tabindex="-1"><a class="header-anchor" href="#快速排序的思路" aria-hidden="true">#</a> 快速排序的思路</h3><p>快速排序，选取一个枢纽，将数组<strong>划分</strong>为两个子数组，这样在枢纽<code>C</code>两边的数组满足：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[左边子数组所有元素] &lt; n &lt; [右边子数组所有元素]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样将得到的每个子数组都划分为两个子数组，直到子数组只有一个元素（一个元素就是有序的），这样就完成了整个快速排序。</p><h3 id="枢纽的选择" tabindex="-1"><a class="header-anchor" href="#枢纽的选择" aria-hidden="true">#</a> 枢纽的选择</h3><p>枢纽选择影响着快速排序的效率：</p><ul><li>最简单的，可以选取数组第一个或者最后一个元素</li><li>&quot;三数据项取中&quot;法，在数组首、尾、中取数排序，选中间的数作为枢纽。这样排序数组大小要&gt;3。</li></ul><h3 id="具体实现-1" tabindex="-1"><a class="header-anchor" href="#具体实现-1" aria-hidden="true">#</a> 具体实现</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 快速排序所用的数组，使用前先初始化
 */</span>
<span class="token keyword">lateinit</span> <span class="token keyword">var</span> quickArray<span class="token operator">:</span> IntArray

<span class="token comment">/**
 * 快速排序算法
 * #1 选择数组最右端元素作为枢纽
 * 思想是
 * 1/2 选出一个枢纽，先将其按大小划分为左右两部分
 * 2/2 在划分好的两个数组中，分别再找一个枢纽，重复步骤 1
 */</span>
<span class="token keyword">fun</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>left<span class="token operator">:</span> Int<span class="token punctuation">,</span> right<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * n 这个枢纽的取法很关键，决定了算法的速度
     * 除过这里用到的取法之外，还可以有&quot;三数据项取中&quot;法，在数组首、尾、中取数排序，选中间的数作为枢纽。这样排序数组要&gt;3
     * 对于这些小于 3 的数组可以用插入排序法进行排序
     */</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> quickArray<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
    <span class="token keyword">val</span> nIndex <span class="token operator">=</span> <span class="token function">devideArrayByN1</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">quickSort1</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> nIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">quickSort1</span><span class="token punctuation">(</span>nIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 划分算法决定了排序的准确性
 * 提出一个阈值，并以此将数组划分为两部分
 * 左边都小于枢纽，右边都大于枢纽
 */</span>
<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">devideArrayByN1</span><span class="token punctuation">(</span>left<span class="token operator">:</span> Int<span class="token punctuation">,</span> right<span class="token operator">:</span> Int<span class="token punctuation">,</span> n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">var</span> leftIndex <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">var</span> rightIndex <span class="token operator">=</span> right

    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;</span> rightIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;</span> rightIndex <span class="token operator">&amp;&amp;</span> quickArray<span class="token punctuation">[</span><span class="token operator">++</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;</span> rightIndex <span class="token operator">&amp;&amp;</span> quickArray<span class="token punctuation">[</span><span class="token operator">--</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">val</span> temp <span class="token operator">=</span> quickArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span>
        quickArray<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">=</span> quickArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span>
        quickArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> right downTo rightIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        quickArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> quickArray<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    quickArray<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">=</span> n
    <span class="token keyword">return</span> rightIndex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>希尔排序、快速排序的思路，都是将一个大的待排序数组，通过不同的方法拆分成小的子数组，这样比较、移动的次数要小很多。</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2>`,34),v={href:"https://github.com/jixiaoyong/Notes-Files/blob/master/AndroidLearningResource/java_note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/sort/SortUtils.kt",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,u,d,k,m,n("p",null,[n("a",v,[s("👉 点这里"),l(a)]),s(" 查看源码")])])}const f=e(i,[["render",b],["__file","2041f2cb.html.vue"]]);export{f as default};
