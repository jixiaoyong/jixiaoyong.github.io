import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-b427197f.js";const i={},u=n("p",null,[s("注解，"),n("em",null,"是描述 Java 代码的代码，它能够被编译器解析，向编译器、虚拟机说明一些事情，就像 java 中给程序员看的注释一样"),s("。")],-1),d={href:"http://jakewharton.github.io/butterknife/",target:"_blank",rel:"noopener noreferrer"},r=e('<p>实现<strong>注解（annotation）<strong>的思路：通过</strong>反射</strong>获取到类中使用注解的变量，方法，再调用不同的方法对这些变量，方法进行处理以达到目的。</p><p>主要涉及三方面：</p><ul><li>定义一个注解类</li><li>定义一个注解帮助类</li><li>使用注解</li></ul><h2 id="java-元注解" tabindex="-1"><a class="header-anchor" href="#java-元注解" aria-hidden="true">#</a> java 元注解</h2><p>java 语言有四个预留的注解，用来生成其他自定义的注解：</p><ul><li>@Target</li></ul>',6),k={href:"http://ElementType.xxx",target:"_blank",rel:"noopener noreferrer"},v=n("ol",null,[n("li",null,"CONSTRUCTOR 描述构造器"),n("li",null,"FIELD 描述域"),n("li",null,"LOCAL_VARIABLE 描述局部变量"),n("li",null,"METHOD 描述方法"),n("li",null,"PACKAGE 描述包"),n("li",null,"PARAMETER 描述参数"),n("li",null,"TYPE 描述类，接口，enum 声明")],-1),m=n("ul",null,[n("li",null,"@Retention")],-1),b={href:"http://RetentionPolicy.xxx",target:"_blank",rel:"noopener noreferrer"},h=e(`<ol><li>SOURCE 仅源文件有效，被编译器丢弃</li><li>CLASS 在 class 文件中有效，可能被虚拟机忽略</li><li>RUNTIME 在运行时有效，在 class 被装载时被获取</li></ol><ul><li>@Documented</li></ul><blockquote><p>用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API</p></blockquote><p>表示是否将注解信息添加在 java 文档中。有该注解则会被 Javadoc 工具文档化</p><p>是一个标记注解，没有值</p><ul><li>@Inherited</li></ul><p>表示该标记会被标记的 class 的子类继承，在查找该注解时，如果当前类没有，会自动向上到其父类中查找，直到<em>该注解类型被找到或是查找完了 Object 类还未找到</em></p><p>是一个标记注解，没有值</p><p><strong>注解不能继承其他注解或接口</strong></p><h2 id="内建注解" tabindex="-1"><a class="header-anchor" href="#内建注解" aria-hidden="true">#</a> 内建注解</h2><p>java 中常见的内建注解：</p><ul><li><code>@Override</code> 重写父类方法</li><li><code>@Deprecated</code> 不赞成使用的 api</li><li><code>@SuppressWarnings() </code> 忽略指定警告</li></ul><p>参数如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>deprecation</td><td>使用了过时的类或方法时的警告</td></tr><tr><td>unchecked</td><td>执行了未检查的转换时的警告</td></tr><tr><td>fallthrough</td><td>当 Switch 程序块进入进入下一个 case 而没有 Break 时的警告</td></tr><tr><td>path</td><td>在类路径、源文件路径等有不存在路径时的警告</td></tr><tr><td>serial</td><td>当可序列化的类缺少 serialVersionUID 定义时的警告</td></tr><tr><td>finally</td><td>任意 finally 子句不能正常完成时的警告</td></tr><tr><td>all</td><td>以上所有情况的警告</td></tr></tbody></table><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h2><h3 id="注解类" tabindex="-1"><a class="header-anchor" href="#注解类" aria-hidden="true">#</a> 注解类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">BindView</span> <span class="token punctuation">{</span>
    <span class="token comment">//注解参数只可以为 public 或者默认</span>
    <span class="token comment">//如果注解中的值不是 value，那么在进行注解的时候，需要给出对应的值的名字</span>
    <span class="token comment">//如@ViewInject(id = R.id.buy)</span>
    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//注解元素必须有明确的值，要不在定义注解时指定默认值，要不在使用注解时指定</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//指定默认值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注解参数支持数据类型如下：</p><p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br> 2.String 类型<br> 3.Class 类型<br> 4.enum 类型<br> 5.Annotation 类型 6.以上所有类型的数组</p></blockquote><h3 id="注解帮助类" tabindex="-1"><a class="header-anchor" href="#注解帮助类" aria-hidden="true">#</a> 注解帮助类</h3><p>主要提供使用注解的方法，代码中的注解替换为真正要实现的逻辑，为注解和使用注解的类搭建一个桥梁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//核心方法如下</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bindViews</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		<span class="token comment">//获取到使用注解的类</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  		<span class="token comment">//获取该类中的所有域变量</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  		<span class="token comment">//通过遍历，将使用到注解的变量初始化</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">//获取注解对象</span>
            <span class="token class-name">BindView</span> bindView <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">BindView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bindView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token comment">//获取注解的值</span>
                <span class="token keyword">int</span> viewId <span class="token operator">=</span> bindView<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>viewId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                      	<span class="token comment">//注解要实现的逻辑，此处为替代 clazz 中的 findViewById() 方法，注意 getMethod() 是获取该类及其实现的接口中所有的 public 方法</span>
                        <span class="token class-name">Method</span> findViewById <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;findViewById&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        findViewById<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Object</span> o <span class="token operator">=</span> findViewById<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> viewId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      	<span class="token comment">//修改要注解的类，到此注解目的达到</span>
                        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用注解" tabindex="-1"><a class="header-anchor" href="#使用注解" aria-hidden="true">#</a> 使用注解</h3><p>在类中通过<code>@xxx()</code> 使用注解，并通过帮助类真正实现注解逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//标记注解</span>
<span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>

<span class="token comment">//调用帮助类方法</span>
<span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">bindViews</span><span class="token punctuation">(</span><span class="token class-name">ASampleActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用初始化之后的变量</span>
textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;hello annotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,25),f={href:"http://www.importnew.com/23816.html",target:"_blank",rel:"noopener noreferrer"},w={href:"http://gityuan.com/2016/01/23/java-annotation/",target:"_blank",rel:"noopener noreferrer"};function y(g,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("Android 应用开发这方面比较火的是"),n("a",d,[s("Butter Knife"),t(a)]),s(" ,本文讲述如何自定义注解替换 findViewById()。")]),r,n("p",null,[s("说明注解所能修饰的范围。其值一般为 "),n("a",k,[s("ElementType.xxx"),t(a)]),s("，主要有：")]),v,m,n("p",null,[s("说明注解存活的生命周期，其值一般为 "),n("a",b,[s("RetentionPolicy.xxx"),t(a)]),s("，主要有")]),h,n("ul",null,[n("li",null,[n("a",f,[s("Java 核心技术点之注解 - ImportNew"),t(a)])]),n("li",null,[n("a",w,[s("java 注解--gityuan"),t(a)])])])])}const V=p(i,[["render",y],["__file","3f6454bb.html.vue"]]);export{V as default};
