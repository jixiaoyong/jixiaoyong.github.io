import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as n,b as a,d as e,e as l}from"./app-7c214084.js";const i={},r=l(`<h1 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h1><p><code>FLutter</code>中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致<code>Widget.build()</code>返回为<code>null</code>的错误会导致<code>Widget</code>构建失败，并返回<em>红底黄字</em>的错误原因<code>Widget</code>（在Release模式则会显示为<em>灰底区域</em>）；一般来说，Flutter中的错误都会被<code>FlutterError.onError</code>捕获并处理；对于异步方法产生异常等<code>Flutter框架</code>没有捕获的情况，会交由当前代码所在的<code>Zone</code>处理（这些异常可以使用<code>runZonedGuarded</code>捕获并处理）。</p><blockquote><p><strong>为什么 flutter 触发异常的时候不会崩溃？</strong><br> 这个和 <code>flutter</code> 的消息循环机制有关，任务分两种，一个是微任务 <code>microtask</code>，一个是事件 <code>event</code>，他们有自己的队列，每个任务是相互独立的，一旦某个任务触发异常，也就是导致这个任务后续代码无法执行，并不会影响其他任务执行</p></blockquote><p><em>本文基于Flutter (Channel stable, 2.2.3)</em></p><h1 id="详细说明" tabindex="-1"><a class="header-anchor" href="#详细说明" aria-hidden="true">#</a> 详细说明</h1><p>Flutter中的错误处理分为以下几种：</p><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> <code>try...catch</code></h2><p>对于普通的错误，可以通过<code>try...catch</code>来捕获：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>               <span class="token keyword">try</span> <span class="token punctuation">{</span>
                  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                  <span class="token keyword">var</span> three <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">RangeError</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这里是捕获RangeError类型的异常 </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这里是兜底的捕获异常 </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这里是无论如何都会执行的代码&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于，异步异常，可以使用<code>await</code>等待其执行完毕，将其变为同步任务，否则无法则捕获。</p><h2 id="errorwidget-builder" tabindex="-1"><a class="header-anchor" href="#errorwidget-builder" aria-hidden="true">#</a> <code>ErrorWidget.builder</code></h2><p>当在<code>Widget</code>构建过程中出现错误，导致<code>build()</code>方法返回<code>null</code>，<code>Flutter框架</code>会调用<code>ErrorWidget.builder</code>返回一个<code>Widget</code>替代<code>出错的Widget</code>。</p><p>默认情况下，<code>debug</code>模式返回的是红底黄字的错误提示，而<code>release</code>模式返回的是<code>灰色Widget</code>。</p><p>可以在<code>RunApp</code>方法中替换这个默认的错误界面：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> <span class="token class-name">BodyWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> widget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Widget在Build时出错的话，展示此Widget，</span>
        <span class="token comment">// 如果不定义的话，debug下为红底黄字错误信息，release会显示为灰色布局</span>
        <span class="token comment">// errorDetails在release模式下为空</span>
        <span class="token class-name">ErrorWidget</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span> errorDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">MainErrorWidget</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> errorDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> widget <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的<code>MainErrorWidget</code>是一个自定义的展示错误信息的页面。</p><ul><li><p><code>MainErrorWidget</code>的一种实现方式</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MainErrorWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token class-name">Widget</span><span class="token operator">?</span> parentWidget<span class="token punctuation">;</span>

  <span class="token class-name">FlutterErrorDetails</span> errorDetails<span class="token punctuation">;</span>

  <span class="token class-name">MainErrorWidget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentWidget<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3. 布局出现错误，展示错误页面,此处错误在release中也会调用FlutterError.onError&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Widget</span> error <span class="token operator">=</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&#39;布局出现错误，以下是错误信息:\\n</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">errorDetails</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span>
            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentWidget <span class="token operator">is</span> <span class="token class-name">Scaffold</span> <span class="token operator">||</span> parentWidget <span class="token operator">is</span> <span class="token class-name">Navigator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">debugPrint</span><span class="token punctuation">(</span>
          <span class="token string-literal"><span class="token string">&quot;widget</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">parentWidget<span class="token operator">?</span><span class="token punctuation">.</span>key<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">parentWidget</span></span><span class="token string">)  is Scaffold </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">parentWidget <span class="token operator">is</span> <span class="token class-name">Scaffold</span></span><span class="token punctuation">}</span></span><span class="token string"> or Navigator </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">parentWidget <span class="token operator">is</span> <span class="token class-name">Navigator</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// error = Container(child: error);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>需要注意的是，错误<code>Widget</code>在<code>Debug</code>和<code>Release</code>模式下有一些区别：</p><ul><li><code>Debug</code>模式下<code>ErrorWidget.builder</code>会返回错误详细信息<code>FlutterErrorDetails</code> ，<code>Release</code>下则不会；</li><li><code>Debug</code>模式下，<code>Widget</code>等出错会打印<code>Exception caught by widgets library ...</code> 等提示并输出错误堆栈信息，但是<code>Release</code>模式下不会；</li><li><code>Debug</code>模式下，出错不会调用<code>FlutterError.onError</code>，<code>Release</code>模式下会。</li></ul><h2 id="fluttererror-onerror" tabindex="-1"><a class="header-anchor" href="#fluttererror-onerror" aria-hidden="true">#</a> <code>FlutterError.onError</code></h2><p>上述几种情况都没有处理的，被Flutter框架引起的异常，会在这里被处理。</p><p>在<code>Flutter 2.2.3</code>中，<code>Debug</code>模式下如<code>onPressed</code>中的未捕获错误等都会被Widget等捕获，而不会走到这里来，在<code>Release</code>模式下则会调用<code>FlutterError.onError</code>。</p><p>在这里可以对错误进行处理，比如输出到控制台、交给Zone统一处理、直接结束掉APP等：</p><ul><li><code>FlutterError.dumpErrorToConsole(details);</code> 输出到控制台</li><li><code>exit(1);</code> 退出APP</li><li><code>Zone.current.handleUncaughtError(details.exception, details.stack);</code> 交给Zone统一处理</li><li><code>defaultOnError?.call(details);</code> 自己处理完异常后，也要把异常向上抛 【推荐】，其中<code>defaultOnError</code> 可以预先缓存<code>final defaultOnError = FlutterError.onError;</code></li></ul><h2 id="runzonedguarded-onerror" tabindex="-1"><a class="header-anchor" href="#runzonedguarded-onerror" aria-hidden="true">#</a> <code>runZonedGuarded(onError)</code></h2><p>上述几种情况都没有处理的异常，会被发送到这里处理，可以类比为<code>Android</code>中的<code>Thread.UncaughtExceptionHandler</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">runZonedGuarded</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token class-name">Object</span> error<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没有被Flutter捕获的错误,全局未捕获异常处理,类似于Android的Thread.UncaughtExceptionHandler</span>
    <span class="token comment">/// 比如异步的方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2. runZonedGuarded.onError </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">error</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zone可以理解为一个沙盒，其中的代码出错，包括异步的都可以捕获到。但是如果是另外一个沙盒中的错误则无法处理。</p><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h1>`,29),u={href:"https://flutter.cn/docs/testing/errors#define-a-custom-error-widget-for-build-phase-errors",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.fnzblog.site/Flutter%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const s=o("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[n("a",u,[a("Flutter 官网异常处理"),e(s)])]),n("p",null,[n("a",d,[a("Flutter异常处理"),e(s)])])])}const h=t(i,[["render",k],["__file","9e235953.html.vue"]]);export{h as default};
