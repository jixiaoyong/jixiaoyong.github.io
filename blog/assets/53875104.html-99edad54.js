import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-a6491e1b.js";const i={},u=t(`<h2 id="一个例子" tabindex="-1"><a class="header-anchor" href="#一个例子" aria-hidden="true">#</a> 一个例子</h2><p><strong>普通写法</strong>：</p><ol><li>定义一个接口 OnClickListener</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> ClickListener<span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>定义方法 SetOnClickListener</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">setOnCLickListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> ClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义的方法和 Java 中写法类似，在使用该方法时也类似：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> testInterface <span class="token operator">=</span> <span class="token function">TestInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

testInterface<span class="token punctuation">.</span><span class="token function">setOnCLickListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> TestInterface<span class="token punctuation">.</span><span class="token function">ClickListener</span><span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;not implemented&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//To change body of created functions use File | Settings | File Templates.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lambda 写法</strong>：</p><p>定义只需要一步：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//在初始化的时初始化 listener</span>
<span class="token keyword">class</span> <span class="token function">AClass</span><span class="token punctuation">(</span><span class="token keyword">var</span> listener <span class="token operator">:</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">//或者直接定义这个变量</span>
listener<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uri <span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token comment">//在需要用到方法时，listener 的方法，比如 onClickListener(){}</span>
listener<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>agrs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用起来也更加简洁：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> t <span class="token operator">=</span> TestInterface<span class="token punctuation">{</span> uri<span class="token operator">:</span> String <span class="token operator">-&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">//获取对象的同时初始化 listener</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>方法最后一个参数是 lambda 表达式时，lambda 表达式的方法<code>{}</code>可以放到<code>()</code>的后面，如果只有这一个参数时，<code>()</code>也可以省略</p></blockquote><p>当方法只有一个参数时，可以省略参数，还用<code>it</code>代替：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>testInterface<span class="token punctuation">.</span><span class="token function">setNewOnClickListener</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>甚至更加简洁，如果要执行的方法和 listener 定义的方法返回值类型相同，可以直接引用该方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>testInterface<span class="token punctuation">.</span><span class="token function">setNewOnClickListener</span><span class="token punctuation">(</span><span class="token operator">::</span>print<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> lambda</h2><p>lambda 在 Java8 中引进，可以很好的替代匿名内部类，使代码更加简洁。</p><p>lambda 表达式形式如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> sum <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),r=n("p",null,[s("lambda 表达式总是被大括号括着，完整语法形式的参数声明放在大括号内，并有可选的类型标注，函数体跟在一个 "),n("code",null,"->"),s(" 符号之后。如果推断出的该 lambda 的返回类型不是 "),n("code",null,"Unit"),s("，那么该 lambda 主体中的最后一个（或可能是单个）表达式会视为返回值。")],-1),d={href:"http://kotlincn.net",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.kotlincn.net/docs/reference/lambdas.html#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>使用 lambda 的形式如下<code>() -&gt; {}</code>,<code>()</code>内是参数，<code>{}</code>是函数具体的行为。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Java 8 方式：</span>
<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;In Java8, Lambda expression rocks !!&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m={href:"http://importNew.com",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.importnew.com/16436.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="小知识点" tabindex="-1"><a class="header-anchor" href="#小知识点" aria-hidden="true">#</a> 小知识点</h2><ul><li>xx.map()</li></ul><p>凡是<strong>可迭代</strong>的数据都可以使用<code>map()</code>函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
args<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以更简洁：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">::</span>print<span class="token punctuation">)</span>
<span class="token comment">//::print 表示引用该方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>xx.flatMap()</li></ul><p>返回<strong>可迭代</strong>的数组，可以和<code>xx.map()</code>一起使用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>args<span class="token punctuation">.</span><span class="token function">flatMap</span> <span class="token punctuation">{</span>
    it<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//把字符串按照&quot; &quot;切割</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function f(h,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[r,n("p",null,[n("a",d,[s("kotlincn.net"),e(a)]),s(),n("a",k,[s("高阶函数和 lambda 表达式"),e(a)])])]),v,n("p",null,[s("这个例子来自 "),n("a",m,[s("importNew.com"),e(a)]),s(","),n("a",b,[s("Java8 lambda 表达式 10 个示例"),e(a)])]),g])}const x=p(i,[["render",f],["__file","53875104.html.vue"]]);export{x as default};
