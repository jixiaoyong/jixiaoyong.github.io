import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as e,b as s,e as t}from"./app-e126c796.js";const i={},u=t(`<h1 id="尾递归优化" tabindex="-1"><a class="header-anchor" href="#尾递归优化" aria-hidden="true">#</a> 尾递归优化</h1><p>把递归通过编译器转化为迭代，从而避免Stack Overflow</p><p>“以时间换取空间”</p><p>普通递归：</p><p>调用函数之后，还需要使用其返回值供自己使用，即自身返回值依赖于下一级函数，一般是调用自身的代码后面，还有其他的代码要执行。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">fun1</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> BigInteger <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> BigInteger<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尾递归：</p><p>调用自身之后，无需再返回当前函数,将处理结果以其他形式返回。</p><p>普通递归和尾递归都存在栈溢出风险（未优化前，例子中的函数计算10000到100000的阶乘时会溢出），kotlin提供了一种尾递归优化的方法——<code>tailrec</code>，使得编译器在编译时将递归转化为迭代，从而避免栈溢出。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token keyword">var</span> value<span class="token operator">:</span> BigInteger <span class="token operator">=</span> BigInteger<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//尾递归，tailrec为kotlin中优化关键字</span>
<span class="token keyword">tailrec</span> <span class="token keyword">fun</span> <span class="token function">fun2</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">,</span> m<span class="token operator">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m<span class="token punctuation">.</span>value <span class="token operator">=</span> m<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>BigInteger<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        m<span class="token punctuation">.</span>value <span class="token operator">=</span> m<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">fun2</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本例中传入<code>fun2()</code>的<code>Result</code>实例保存了计算结果</p><h1 id="sealed-class-密封类" tabindex="-1"><a class="header-anchor" href="#sealed-class-密封类" aria-hidden="true">#</a> sealed class 密封类</h1><p>密封类的所有子类必须在一个文件(xx.kt)中，他的子类是有限的，所以当<code>when()</code>的时候不需要<code>else</code>。</p><p>某种意义上他们像是一种<code>enum class</code>，只不过他的子类可以有多个实例。</p><blockquote><p>Sealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a limited set, but cannot have any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances which can contain state.</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//sealed class</span>
<span class="token keyword">sealed</span> <span class="token keyword">class</span> Player<span class="token punctuation">{</span>

    <span class="token keyword">class</span> <span class="token function">Play</span><span class="token punctuation">(</span><span class="token keyword">var</span> arg<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">object</span> Stop <span class="token operator">:</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="kotlin抛出异常" tabindex="-1"><a class="header-anchor" href="#kotlin抛出异常" aria-hidden="true">#</a> kotlin抛出异常</h1><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>RemoteException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>List<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="kotlin中的泛型" tabindex="-1"><a class="header-anchor" href="#kotlin中的泛型" aria-hidden="true">#</a> kotlin中的泛型</h1><p><code>out</code> 协变，使用子类泛型的对象可以赋值给使用父类泛型的对象，相当于<code>extend</code>，用于方法的返回值（生产者）时使用</p><p><code>in</code> 逆变，使用父类泛型的对象可以赋值给使用子类泛型的对象，相当于<code>super</code>，用于方法的参数（消费者）时使用</p><p>不变，当泛型即当消费者，又当生产者时，不用<code>in</code>或者<code>out</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> from <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token function">copyArray</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span><span class="token keyword">to</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>from<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Any<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">in</span> Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//这里的from被out修饰，只能作为生产者调用get之类的方法，不能作为消费者调用set之类的方法</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="星号投射" tabindex="-1"><a class="header-anchor" href="#星号投射" aria-hidden="true">#</a> 星号投射</h1><blockquote><p>你对类型参数一无所知，但仍然希望以安全的方式使用它。</p></blockquote><p><strong>安全的使用</strong>，则表示该类<code>Group&lt;T&gt;</code>满足</p><blockquote><p>1.子类至少接收和父类一样范围的参数 &gt;= ---&gt; 父类入参为Noting 不能安全写入</p><p>2.子类最多返回和父类一样范围的参数 &lt;= ---&gt; 父类出参为Any? 可以安全读取</p></blockquote><p>则有以下三种实现方式</p><figure><img src="https://jixiaoyong.github.io/images/20191022194750.png" alt="in-out-star-projection-approaches" tabindex="0" loading="lazy"><figcaption>in-out-star-projection-approaches</figcaption></figure><p>其中：</p><p><code>Group&lt;in Noting&gt;</code> 的<code>fetch()</code>方法一直返回<code>Any?</code></p><p><code>Group&lt;out Any?&gt;</code> 的<code>T</code>需要与实际的<code>Group</code>的<code>T</code>保持一致，否则会报错</p><p><code>Group&lt;*&gt;</code> 既能<code>insert</code>正确返回对应的类型，也不用实时修改</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> TClass <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">readIn</span><span class="token punctuation">(</span>group<span class="token operator">:</span> Group<span class="token operator">&lt;</span><span class="token keyword">in</span> Nothing<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> d <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readOut</span><span class="token punctuation">(</span>group<span class="token operator">:</span> Group<span class="token operator">&lt;</span><span class="token keyword">out</span> Animal<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> d <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span>group<span class="token operator">:</span> Group<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> d <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">interface</span> Group<span class="token operator">&lt;</span>T <span class="token operator">:</span> Dog<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">insert</span><span class="token punctuation">(</span>member<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> Unit
    <span class="token keyword">fun</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="委托" tabindex="-1"><a class="header-anchor" href="#委托" aria-hidden="true">#</a> 委托</h1><p>委托是将重复出现的代码放到一个地方。</p><figure><img src="https://jixiaoyong.github.io/images/20191023194526.png" alt="委托示意图" tabindex="0" loading="lazy"><figcaption>委托示意图</figcaption></figure><ul><li>类委托 ：</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Interface <span class="token punctuation">{</span>	<span class="token keyword">fun</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token punctuation">}</span>
<span class="token keyword">class</span> A <span class="token operator">:</span> Interface
<span class="token keyword">class</span> <span class="token function">B</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Interface<span class="token punctuation">)</span> <span class="token operator">:</span> Interface <span class="token keyword">by</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样B便可以将<code>Interface</code>中方法的实现委托给类<code>A</code>的对象<code>a</code></p><ul><li>委托属性：</li></ul><p>将同一类型的属性的<code>get</code>、<code>set</code>方法放到一个地方实现，可以在加入<code>其它操作</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Delegate <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>

    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;get()&quot;</span></span><span class="token punctuation">)</span><span class="token comment">//其它操作</span>
        <span class="token keyword">return</span> name
    <span class="token punctuation">}</span>

    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">setValue</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> t<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; set()&quot;</span></span><span class="token punctuation">)</span>
        name <span class="token operator">=</span> t
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> ClassA <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> <span class="token function">Delegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> age<span class="token operator">:</span> String <span class="token keyword">by</span> <span class="token function">Delegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>委托类的初始化函数：</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">delegate</span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Delegate</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span>

<span class="token keyword">class</span> MyClass1 <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> delegate <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyClass1.name init&quot;</span></span><span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;MyClass1&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Delegate<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>myClass1<span class="token operator">:</span> T<span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string"> get()&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> name
    <span class="token punctuation">}</span>

    <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">setValue</span><span class="token punctuation">(</span>myClass1<span class="token operator">:</span> T<span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> t<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string"> set()&quot;</span></span><span class="token punctuation">)</span>
        name <span class="token operator">=</span> t
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> className <span class="token operator">=</span> <span class="token function">initializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Map委托：</li></ul><p>将类的<code>属性</code>名称和<code>map</code>中的<code>key</code>一一对应，从而将对于<code>value</code>赋值给<code>属性</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">ClassB</span><span class="token punctuation">(</span>map<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> map
    <span class="token keyword">val</span> age<span class="token operator">:</span> Int <span class="token keyword">by</span> map
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;shany&quot;</span></span><span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span> <span class="token keyword">to</span> <span class="token number">18</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token function">ClassB</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//shayn</span>
    <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment">//18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>veroable</li></ul><p>可以拦截赋值操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">ClassB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> name<span class="token operator">:</span>String <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">vetoable</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ThisIsInitialValue&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       property<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue <span class="token operator">-&gt;</span>
       <span class="token keyword">return</span><span class="token label symbol">@vetoable</span> <span class="token boolean">false</span> <span class="token comment">//返回true允许更改值，false不允许更改</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="中缀函数" tabindex="-1"><a class="header-anchor" href="#中缀函数" aria-hidden="true">#</a> 中缀函数</h1><p>需要满足三个条件：</p><ol><li>成员函数或拓展函数</li><li>只有一个参数</li><li>infix声明</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">infix</span> <span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>string<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

使用：
<span class="token keyword">val</span> s <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;bababbaab&quot;</span></span> div <span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="inline内联函数" tabindex="-1"><a class="header-anchor" href="#inline内联函数" aria-hidden="true">#</a> inline内联函数</h1><p><code>inline</code>修饰的函数在被调用时将字节码动态插入到被到调用的地方。</p><p><code>inline</code>修饰的函数的<code>lambda参数</code>如果运行在该函数内部的*<code>子函数/其他环境</code>*，则不允许这个lambda函数<strong>非局部返回</strong>（因为没有办法从该 <code>子函数/其他环境</code> 中直接退出lambda所在的外层函数），对于这种lambda函数需要添加**<code>crossinline</code>**修饰。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//**非局部返回**指从lambda2中执行return语句，推出的是整个func()</span>
<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">crossinline</span> lambda1<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>Unit<span class="token punctuation">,</span>  lambda2<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> f <span class="token operator">=</span> Runnable <span class="token punctuation">{</span>
        <span class="token function">lambda1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不可以调用非局部返回，所以用crossinline修饰</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">lambda2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以调用非局部返回</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin也存在Java泛型所具有的<strong>类型擦除</strong>问题，为了优化该问题，inline函数可以结合<code>reified</code>实现<strong>实体化类型参数</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">isInstanceOf</span><span class="token punctuation">(</span>value<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token operator">=</span> value <span class="token keyword">is</span> T <span class="token comment">//在这里仍然可以知道T是什么类型的，所以可以执行value is T </span>
<span class="token function">print</span><span class="token punctuation">(</span>isInstanceOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**原理:**内联函数会直接被插入到被调用的地方，而<code>reified</code>修饰的类型参数会保证将用户调用时写的类型<code>String</code>同时也写入到被调用的地方，如此便没有发生类型擦除。</p><h1 id="coroutines-协程" tabindex="-1"><a class="header-anchor" href="#coroutines-协程" aria-hidden="true">#</a> coroutines 协程</h1><p>协程可以看做是一个轻量级的thread，他运行在线程当中，由用户控制，没有上下文切换的开销。</p><p>在Android中使用协程，特别是在IO操作及网络请求等需要根据耗时操作更新界面的需求时，可以将IO操作和界面操作串行，避免切换线程、回调嵌套等导致代码可读性查的问题。</p><p>如配合支持协程的retrofit，我们可以将网络请求简化如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>        <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//这里是主线程</span>
            <span class="token function">showProgressOnMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">val</span> repos <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//这里是UI线程</span>
                retrofitApi<span class="token punctuation">.</span><span class="token function">getRepos</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jixiaoyong&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//这里是主线程</span>
            <span class="token function">updateUIOnMainThread</span><span class="token punctuation">(</span>repos<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kotlin协程需要单独添加依赖：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2&#39;</span>
implementation <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2&quot;</span></span> <span class="token comment">//Android可以再添加这个依赖，会有一些特殊方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个父协程总是等待所有的子协程执行结束， 父协程被取消的时候，所有它的子协程也会被递归的取消。</p><h2 id="协程中runblocking与coroutinescope的区别" tabindex="-1"><a class="header-anchor" href="#协程中runblocking与coroutinescope的区别" aria-hidden="true">#</a> 协程中<code>runBlocking</code>与<code>coroutineScope</code>的区别</h2><p>相同点：</p><p>依次执行内部代码，如果<code>代码1</code>是启动协程，那么启动该子协程后，继续执行<code>代码1</code>后面的代码直到最后一行（类似启动新线程，不会阻塞当前线程），然后再等待所有内部协程结束，才会退出。</p><p>不同点：</p>`,74),r={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,[n("code",null,"runBlocking")],-1),d=n("code",null,"线程",-1),v={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,[n("code",null,"coroutineScope")],-1),b=n("h2",{id:"协程的思维导图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#协程的思维导图","aria-hidden":"true"},"#"),s(" 协程的思维导图")],-1),g=n("iframe",{width:"853",height:"480",src:"https://embed.coggle.it/diagram/Xb_CZoumpCamgUAj/1235701ea5f157867e045f0f5ac28f886effdb5fa1e27b72afa5266e6e3e8891",frameborder:"0",allowfullscreen:""},null,-1),h=t(`<p>需要说明的是</p><p><code>Dispatchers.Unconfined</code> 非受限，不会限定协程运行的线程，而是随环境切换</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// main thread</span>
        <span class="token function">withContext</span><span class="token punctuation">(</span><span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//hello thread</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//hello thread</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="协程局部变量" tabindex="-1"><a class="header-anchor" href="#协程局部变量" aria-hidden="true">#</a> 协程局部变量</h2>`,4),f=n("code",null,"ThreadLocal",-1),y={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/index.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"ThreadContextElement",-1),x=n("code",null,'asContextElement("value")',-1),_=n("p",null,[s("直接修改"),n("code",null,"ThreadLocal"),s("的值，会在切换协程的时候失效（会被改为切换到的协程所使用的的值），当再次切回本协程时，被重置为上一个通过"),n("code",null,'asContextElement("value")'),s("方法更新的值或者"),n("code",null,"null"),s("（如果没有指定）。")],-1),q=n("p",null,[s("原理："),n("strong",null,[s("启动和恢复时保存"),n("code",null,"ThreadLocal"),s("在当前线程的值，并修改为 value，挂起和结束时修改当前线程"),n("code",null,"ThreadLocal"),s("的值为之前保存的值")])],-1),S={href:"https://johnnyshieh.me/posts/kotlin-coroutine-concurrency/",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> threadLocal <span class="token operator">=</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 声明线程局部变量</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// main</span>
    <span class="token function">async</span> <span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">asContextElement</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;launch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// launch</span>
        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//        threadLocal.asContextElement(&quot;hello&quot;) //如果使用这个方法更新，则 printValue(4) 会打印 hello</span>
        <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
        <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// launch</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// main</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">printValue</span><span class="token punctuation">(</span>number<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">number</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在android中使用" tabindex="-1"><a class="header-anchor" href="#在android中使用" aria-hidden="true">#</a> 在Android中使用</h2><p>Kotlin官方推荐一下两种方式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token number">1</span><span class="token punctuation">.</span> CoroutineScope
<span class="token keyword">class</span> Activity <span class="token operator">:</span> CoroutineScope <span class="token keyword">by</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继续运行……</span>
    
<span class="token number">2</span><span class="token punctuation">.</span> MainScope
<span class="token keyword">class</span> Activity <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> mainScope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mainScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继续运行……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,5),I={href:"https://typealias.com/guides/star-projections-and-how-they-work/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/u013064109/article/details/83507076",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.kotlincn.net/docs/reference/coroutines/coroutines-guide.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://johnnyshieh.me/posts/kotlin-coroutine-concurrency/",target:"_blank",rel:"noopener noreferrer"};function L(V,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[k,e(a)]),s("：会运行一个新的协程线程，并阻塞其所在"),d,s(",直到其内部所有协程/子协程执行完毕才会退出。设计用来以阻塞的方式执行协程代码，不应该在协程中使用。")]),n("p",null,[n("a",v,[m,e(a)]),s("：不会阻塞其所在线程，要在协程中使用，当其内部所有协程/子协程执行完毕才会退出。设计用来执行并行操作，一旦有子协程失败，则其他子协程都会被取消，整个代码块执行失败。")]),b,g,h,n("p",null,[s("通过"),f,s("、"),n("a",y,[w,e(a)]),s("，配合"),x,s("方法实现。和协程所在的线程没有关系。")]),_,n("blockquote",null,[q,n("p",null,[s("—— "),n("a",S,[s("Kotlin Coroutines(协程) 完全解析（五），协程的并发"),e(a)])])]),T,n("p",null,[n("a",I,[s("Star-Projections and How They Work"),e(a)])]),n("p",null,[n("a",C,[s("Kotlin的独门秘籍Reified实化类型参数(下篇)"),e(a)])]),n("p",null,[n("a",A,[s("Kotlin 协程官网"),e(a)])]),n("p",null,[n("a",B,[s("Kotlin Coroutines(协程) 完全解析（五），协程的并发"),e(a)])])])}const P=p(i,[["render",L],["__file","8a52763a.html.vue"]]);export{P as default};
