import{_ as p,r as o,o as c,c as l,a as s,b as n,d as e,e as t}from"./app-111ffeba.js";const i={},u=s("strong",null,"Image",-1),r=s("strong",null,"ImageCache",-1),d={href:"https://github.com/Baseflow/flutter_cached_network_image",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/fluttercandies/extended_image",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alibaba/power_image",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"本文对 extended_image 加载过程、原理做一简单分析。",-1),g=s("h2",{id:"extended-image",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#extended-image","aria-hidden":"true"},"#"),n(" extended_image")],-1),b={href:"https://github.com/fluttercandies/extended_image",target:"_blank",rel:"noopener noreferrer"},h=s("strong",null,"加载缓存网络图片",-1),w={href:"https://jixiaoyong.github.io/blog/posts/1912667a.html",target:"_blank",rel:"noopener noreferrer"},y=t('<p>extended_image 的架构图如下：</p><figure><img src="https://jixiaoyong.github.io/images/extended_image_class_structure.png" alt="extended_image_class_structure" tabindex="0" loading="lazy"><figcaption>extended_image_class_structure</figcaption></figure><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>因为 extended_image 的定位是官方 Image 的拓展版，所以大部分使用方式和官方类似。</p><h3 id="extendedimage" tabindex="-1"><a class="header-anchor" href="#extendedimage" aria-hidden="true">#</a> ExtendedImage</h3><p>他的构造函数分别是：</p><ul><li>ExtendedImage</li><li>ExtendedImage.asset</li><li>ExtendedImage.file</li><li>ExtendedImage.memory</li><li>ExtendedImage.network</li></ul><p>同样是在构造函数中指定并创建 ImageProvider，不过 extented_image 库的 ImageProvider 都是继承自官方 ImageProvider 并且混入了<strong>ExtendedImageProvider</strong>的子类。以<code>ExtendedImage.network</code>为例，创建的 ImageProvider 类型是<strong>ExtendedNetworkImageProvider</strong>。</p><p>其余的步骤和我们之前分析的官方 Image 组件类似，在 <strong>_ExtendedImageState</strong> 中使用 <strong>ImageProvider</strong> 获取并监听 <strong>ImageStream</strong>，当成功加载图片之后获得<code>ImageInfo? _imageInfo</code>并刷新页面，在<code>_ExtendedImageState.build</code>方法中，虽然 extended_image 增加了一些特有的加载中、加载失败、手势等封装，但最后还是使用<code>ImageInfo.image</code>创建<strong>ExtendedRawImage</strong>以展示图片内容。</p><p>如此可见，在从网络加载图片这部分内容来看，ExtendedImage 和 Image 的主要不同在于<strong>ExtendedNetworkImageProvider</strong>的实现：</p><h3 id="extendednetworkimageprovider" tabindex="-1"><a class="header-anchor" href="#extendednetworkimageprovider" aria-hidden="true">#</a> ExtendedNetworkImageProvider</h3>',11),_={href:"https://github.com/fluttercandies/extended_image_library",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>ExtendedNetworkImageProvider 继承自<strong>ImageProvider</strong>，混入了<strong>ExtendedImageProvider</strong>，后者提供了<code>get imageCache</code>/<code>instantiateImageCodec</code>/<code>resolveStreamForKey</code>等一系列通用方法。</p><p>下面是 ExtendedNetworkImageProvider 的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedNetworkImageProvider</span>
    <span class="token keyword">extends</span> <span class="token class-name">ImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExtendedNetworkImageProvider</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">with</span> <span class="token class-name">ExtendedImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExtendedNetworkImageProvider</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

 <span class="token keyword">factory</span> <span class="token class-name">ExtendedNetworkImageProvider</span><span class="token punctuation">(</span>
    <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    double scale<span class="token punctuation">,</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> headers<span class="token punctuation">,</span>
    bool cache<span class="token punctuation">,</span>
    int retries<span class="token punctuation">,</span>
    <span class="token class-name">Duration</span><span class="token operator">?</span> timeLimit<span class="token punctuation">,</span>
    <span class="token class-name">Duration</span> timeRetry<span class="token punctuation">,</span>
    <span class="token class-name">CancellationToken</span><span class="token operator">?</span> cancelToken<span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token operator">?</span> cacheKey<span class="token punctuation">,</span>
    bool printError<span class="token punctuation">,</span>
    bool cacheRawData<span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token operator">?</span> imageCacheName<span class="token punctuation">,</span>
    <span class="token class-name">Duration</span><span class="token operator">?</span> cacheMaxAge<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">network_image<span class="token punctuation">.</span></span>ExtendedNetworkImageProvider</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ExtendedNetworkImageProvider 是个抽象类，他的逻辑在<code>network_image.ExtendedNetworkImageProvider</code>中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;extended_network_image_provider.dart&#39;</span></span> <span class="token operator">as</span> image_provider<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ExtendedNetworkImageProvider</span>
    <span class="token keyword">extends</span> <span class="token class-name">ImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>ExtendedNetworkImageProvider</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">with</span> <span class="token class-name">ExtendedImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>ExtendedNetworkImageProvider</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>ExtendedNetworkImageProvider</span> <span class="token punctuation">{</span>

    <span class="token comment">// 此方法获取的图片会被 ImageProvider 缓存到 ImageCache 中</span>
    <span class="token metadata function">@override</span>
    <span class="token class-name">ImageStreamCompleter</span> <span class="token function">load</span><span class="token punctuation">(</span>
      <span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>ExtendedNetworkImageProvider</span> key<span class="token punctuation">,</span> <span class="token class-name">DecoderCallback</span> decode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span> chunkEvents <span class="token operator">=</span>
        <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">MultiFrameImageStreamCompleter</span><span class="token punctuation">(</span>
      codec<span class="token punctuation">:</span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span><span class="token comment">// 调用_loadAsync 方法加载图片</span>
        key <span class="token operator">as</span> <span class="token class-name">ExtendedNetworkImageProvider</span><span class="token punctuation">,</span>
        chunkEvents<span class="token punctuation">,</span>
        decode<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      scale<span class="token punctuation">:</span> key<span class="token punctuation">.</span>scale<span class="token punctuation">,</span>
      chunkEvents<span class="token punctuation">:</span> chunkEvents<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>
      informationCollector<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Codec</span><span class="token punctuation">&gt;</span></span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span>
    <span class="token class-name">ExtendedNetworkImageProvider</span> key<span class="token punctuation">,</span>
    <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span> chunkEvents<span class="token punctuation">,</span>
    <span class="token class-name">DecoderCallback</span> decode<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> md5Key <span class="token operator">=</span> cacheKey <span class="token operator">?</span><span class="token operator">?</span> <span class="token function">keyToMd5</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Codec</span><span class="token operator">?</span> result<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果需要缓存图片，就调用_loadCache 优先从缓存中读取，没有的话先从网络下载，</span>
        <span class="token comment">// 成功之后再缓存到本地缓存文件目录</span>
        <span class="token keyword">final</span> <span class="token class-name">Uint8List</span><span class="token operator">?</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_loadCache</span><span class="token punctuation">(</span>
          key<span class="token punctuation">,</span>
          chunkEvents<span class="token punctuation">,</span>
          md5Key<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 解析加载的图片信息</span>
          result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">instantiateImageCodec</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>printError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不需要缓存或者从缓存中读取/下载失败了，就从网络加载</span>
        <span class="token keyword">final</span> <span class="token class-name">Uint8List</span><span class="token operator">?</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_loadNetwork</span><span class="token punctuation">(</span>
          key<span class="token punctuation">,</span>
          chunkEvents<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">instantiateImageCodec</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>printError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果还是失败，就展示失败信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//result = await ui.instantiateImageCodec(kTransparentImage);</span>
      <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Codec</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">StateError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Failed to load </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">url</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码可以看到，如果需要缓存时，除了 ImageCache 本身的缓存外，ExtendedNetworkImageProvider 还会执行<code>_loadCache</code>尝试从本地文件中读取缓存：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">_loadCache</span><span class="token punctuation">(</span>
    <span class="token class-name">ExtendedNetworkImageProvider</span> key<span class="token punctuation">,</span>
    <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> chunkEvents<span class="token punctuation">,</span>
    <span class="token class-name">String</span> md5Key<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Directory</span> _cacheImagesDirectory <span class="token operator">=</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span>
        <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getTemporaryDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> cacheImageFolderName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Uint8List</span><span class="token operator">?</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 1. 先尝试从缓存文件中读取图片</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cacheImagesDirectory<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">File</span> cacheFlie <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>_cacheImagesDirectory<span class="token punctuation">.</span>path<span class="token punctuation">,</span> md5Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheFlie<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>cacheMaxAge <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">final</span> <span class="token class-name">DateTime</span> now <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">final</span> <span class="token class-name">FileStat</span> fs <span class="token operator">=</span> cacheFlie<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>cacheMaxAge<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>changed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cacheFlie<span class="token punctuation">.</span><span class="token function">deleteSync</span><span class="token punctuation">(</span>recursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            data <span class="token operator">=</span> <span class="token keyword">await</span> cacheFlie<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          data <span class="token operator">=</span> <span class="token keyword">await</span> cacheFlie<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// create folder</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> _cacheImagesDirectory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// load from network</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.1 缓存不存在或者读取失败，先仅从网络加载图片</span>
      data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_loadNetwork</span><span class="token punctuation">(</span>
        key<span class="token punctuation">,</span>
        chunkEvents<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// cache image file</span>
        <span class="token comment">// 2.2 如果从网络成功加载图片，则将图片写入文件缓存</span>
        <span class="token keyword">await</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>_cacheImagesDirectory<span class="token punctuation">.</span>path<span class="token punctuation">,</span> md5Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAsBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中执行到的<code>ExtendedNetworkImageProvider._loadNetwork()</code>方法只会使用<code>HttpClient</code>从网络中下载图片并返回。</p><h3 id="extendedimageprovider" tabindex="-1"><a class="header-anchor" href="#extendedimageprovider" aria-hidden="true">#</a> ExtendedImageProvider</h3><p>此外，之前提到的<code>ExtendedImageProvider</code>为 extended_image 库中的 ImageProvider 提供了一些通用的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// The cached raw image data 缓存图片原始数据，而不必每次都使用 ui.Image.toByteData() 获取</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExtendedImageProvider</span><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span> rawImageDataMap <span class="token operator">=</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExtendedImageProvider</span><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Uint8List</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/// The imageCaches to store custom ImageCache，缓存 ImageCache</span>
<span class="token comment">/// 可以指定一个 ImageCache 来缓存一些图片。这样可以一起处理它们，不会影响其他的图片缓存。</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ImageCache</span><span class="token punctuation">&gt;</span></span> imageCaches <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ImageCache</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">mixin</span> <span class="token class-name">ExtendedImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">on</span> <span class="token class-name">ImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    bool <span class="token keyword">get</span> cacheRawData<span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token operator">?</span> <span class="token keyword">get</span> imageCacheName<span class="token punctuation">;</span>
    <span class="token class-name">ImageCache</span> <span class="token keyword">get</span> imageCache <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>imageCacheName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> imageCaches<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>imageCacheName<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>imageCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还改动了<code>ExtendedImageProvider.resolveStreamForKey</code>方法以使用指定的 ImageCache。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">resolveStreamForKey</span><span class="token punctuation">(</span>
    <span class="token class-name">ImageConfiguration</span> configuration<span class="token punctuation">,</span>
    <span class="token class-name">ImageStream</span> stream<span class="token punctuation">,</span>
    <span class="token class-name">T</span> key<span class="token punctuation">,</span>
    <span class="token class-name">ImageErrorListener</span> handleError<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is an unusual edge case where someone has told us that they found</span>
    <span class="token comment">// the image we want before getting to this method. We should avoid calling</span>
    <span class="token comment">// load again, but still update the image cache with LRU information.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token punctuation">.</span>completer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">ImageStreamCompleter</span><span class="token operator">?</span> completer <span class="token operator">=</span> imageCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>
        key<span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> stream<span class="token punctuation">.</span>completer<span class="token operator">!</span><span class="token punctuation">,</span>
        onError<span class="token punctuation">:</span> handleError<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>completer<span class="token punctuation">,</span> stream<span class="token punctuation">.</span>completer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token class-name">ImageStreamCompleter</span><span class="token operator">?</span> completer <span class="token operator">=</span> imageCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>
      key<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">load</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>instantiateImageCodec<span class="token punctuation">)</span><span class="token punctuation">,</span>
      onError<span class="token punctuation">:</span> handleError<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>completer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stream<span class="token punctuation">.</span><span class="token function">setCompleter</span><span class="token punctuation">(</span>completer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所见，ExtendedImageProvider 的主要作用是借助<code>rawImageDataMap</code>提供了缓存图片原始数据的功能，此外还提供了一个 ImageCache 分组的方法，以便对一部分图片缓存统一处理。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>仅就从网络加载图片而言，extended_image 和 Flutter 官方 Image 组件的主要区别在于：在 ImageCache 之外，<strong>多了一层本地磁盘缓存</strong>，如果这二者都未命中缓存则从网络下载图片。</p><p>除此之外，extended_image 本身还提供了诸如图片缩放拖拽、滑动退出等图片操作常用的“大而全”的功能。这部分见仁见智，如果 APP 需求刚好需要用到这些功能的话，extended_image 是个不错的选择，但是如果只是想解决图片缓存问题的话，可能会显得有些臃肿。</p>`,17),I={href:"https://github.com/fluttercandies/extended_image",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/Baseflow/flutter_cache_manager",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/alibaba/power_image",target:"_blank",rel:"noopener noreferrer"},C=s("h2",{id:"参考资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),n(" 参考资料")],-1),P={href:"https://github.com/fluttercandies/extended_image",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/fluttercandies/extended_image_library",target:"_blank",rel:"noopener noreferrer"};function S(F,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[s("p",null,[n("Flutter 默认提供了"),u,n("用于从网络、文件等加载图片，并且使用"),r,n("统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了"),s("a",d,[n("flutter_cached_network_image"),e(a)]),n("、"),s("a",k,[n("extended_image"),e(a)]),n("等基于 Flutter 原生的解决方案，以及"),s("a",m,[n("power_image"),e(a)]),n("等基于混合开发的解决方案。")]),v,g,s("p",null,[s("a",b,[n("extended_image"),e(a)]),n("是基于官方 Image 的拓展组件，支持加载以及失败显示，缓存网络图片，缩放拖拽图片，图片浏览 (微信掘金效果)，滑动退出页面 (微信掘金效果)，编辑图片 (裁剪旋转翻转)，保存，绘制自定义效果等功能。")]),s("p",null,[n("本文主要对其"),h,n("的流程做一分析，因为这个库是官方 Image 的拓展，所以我们会在之前"),s("a",w,[n("对 Image 的分析"),e(a)]),n("基础上进行对比分析。")]),y,s("blockquote",null,[s("p",null,[n("这部分内容的代码在"),s("a",_,[n("extended_image_library"),e(a)]),n("中。")])]),f,s("p",null,[n("另外一个常用的图片库"),s("a",I,[n("flutter_cached_network_image"),e(a)]),n("则是借助"),s("a",x,[n("flutter_cache_manager"),e(a)]),n("实现缓存网络图片的功能，相对比较轻量。")]),s("p",null,[n("上述两种库都是基于 Flutter Image 组件实现图片加载、缓存，阿里巴巴出品的"),s("a",E,[n("power_image"),e(a)]),n("则是一款为 Flutter-Native 混合项目开发的图片加载库，借助 Texture 和 ffi 通过 Native 端已有的图片加载库完成图片加载、缓存的功能，Flutter 端只负责展示（以及 ImageCache 缓存）。")]),C,s("p",null,[s("a",P,[n("extended_image"),e(a)])]),s("p",null,[s("a",N,[n("extended_image_library"),e(a)])])])}const A=p(i,[["render",S],["__file","23ac516a.html.vue"]]);export{A as default};
