import{_ as i,r as p,o,c,a as n,b as s,d as t,e}from"./app-c3d2a24a.js";const l={},u=n("blockquote",null,[n("p",null,[s("本文讨论的 Flutter 动画主要限定在："),n("em",null,"随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态"),s(" 这一范围。")])],-1),d=n("p",null,[s("在之前的文章中，我们将 Flutter 中动画的实现分为 "),n("em",null,"底层实现"),s(" 和 "),n("em",null,"封装好的 Widget"),s(" 两大部分，目前已经分析了底层实现的部分：")],-1),r={href:"https://jixiaoyong.github.io/blog/posts/6ec43bd8.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://jixiaoyong.github.io/blog/posts/820d6240.html",target:"_blank",rel:"noopener noreferrer"},m=e('<p>而 Flutter 封装好的动画 Widget 主要分为两大类：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_widget.png" alt="Flutter 中与动画有关的 Widget" tabindex="0" loading="lazy"><figcaption>Flutter 中与动画有关的 Widget</figcaption></figure><ul><li><p><strong>ImplicitlyAnimatedWidget</strong> 隐式动画，关于动画的开始、停止等都封装在 Widget 内部，只要 Widget <em>前后传入的值不同</em> 便可以自动从 old 渐变到 new，内置的这些类主要以 <em>AnimatedFoo</em> 命名。</p></li><li><p><strong>AnimatedWidget</strong>，显式动画，需要使用者自己创建 Animation（一般是 AnimationController）并通过其 <em>主动管理动画</em>，此类 Widget 主要是监听 AnimationController 的值并刷新 Widget 的内容。</p><p>此类 Widget 主要有三种使用方式：</p><ul><li>继承 AnimatedWidget</li><li>使用 AnimatedBuilder</li><li>使用各种内置的 AnimatedWidget 子类，一般以 FooTransition 命名。</li></ul></li></ul><p>对于 Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_select.png" alt="如何实现 Flutter 中的动画" tabindex="0" loading="lazy"><figcaption>如何实现 Flutter 中的动画</figcaption></figure><p>简单来说，Flutter 有一些内置的动画，在要写动画的时候，可以依次考虑（实现程度由易到难）：</p>',6),v={href:"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916",target:"_blank",rel:"noopener noreferrer"},b={href:"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185",target:"_blank",rel:"noopener noreferrer"},g={href:"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"FooTranslation",-1),h=n("li",null,"AnimatedBuilder / AnimatedWidget",-1),y=n("li",null,"CustomPainter",-1),f=e(`<br><p>本文将对 Flutter 内置封装好的动画相关的 Widget 的实现和用法进行简单分析。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p>按照上述分析，Flutter 中的动画 Widget 可以大体分为 <em>隐式动画</em> 和 <em>显式动画</em> 两种。</p><h3 id="implicitlyanimatedwidget" tabindex="-1"><a class="header-anchor" href="#implicitlyanimatedwidget" aria-hidden="true">#</a> ImplicitlyAnimatedWidget</h3><blockquote><p>ImplicitlyAnimatedWidgets (and their subclasses) automatically animate changes in their properties whenever they change.</p></blockquote><p>隐式动画内部持有 AnimationController 以管理动画，默认没有动画，当使用不同的值重新构建 Widget 的时候，会执行动画，使用者只能设置 Duration 和 Curve，如果想要更深入的控制动画（比如暂停动画）则应该使用 AnimatedWidget。</p><p>ImplicitlyAnimatedWidget 主要分为 2 大类：</p><ul><li>TweenAnimationBuilder, which animates any property expressed by a Tween to a specified target value.</li><li>AnimatedFoo <ul><li>AnimatedAlign, which is an implicitly animated version of Align.</li><li>AnimatedContainer, which is an implicitly animated version of Container.</li><li>AnimatedDefaultTextStyle, which is an implicitly animated version of DefaultTextStyle.</li><li>AnimatedScale, which is an implicitly animated version of Transform.scale.</li><li>AnimatedRotation, which is an implicitly animated version of Transform.rotate.</li><li>AnimatedSlide, which implicitly animates the position of a widget relative to its normal position.</li><li>AnimatedOpacity, which is an implicitly animated version of Opacity.</li><li>AnimatedPadding, which is an implicitly animated version of Padding.</li><li>AnimatedPhysicalModel, which is an implicitly animated version of PhysicalModel.</li><li>AnimatedPositioned, which is an implicitly animated version of Positioned.</li><li>AnimatedPositionedDirectional, which is an implicitly animated version of PositionedDirectional.</li><li>AnimatedTheme, which is an implicitly animated version of Theme.</li><li>AnimatedCrossFade, which cross-fades between two given children and animates itself between their sizes.</li><li>AnimatedSize, which automatically transitions its size over a given duration.</li><li>AnimatedSwitcher, which fades from one widget to another.</li></ul></li></ul><p>我们简单分析一下 ImplicitlyAnimatedWidget 和 TweenAnimationBuilder：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ImplicitlyAnimatedWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">ImplicitlyAnimatedWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curve <span class="token operator">=</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>linear<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onEnd<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// The curve to apply when animating the parameters of this container.</span>
  <span class="token keyword">final</span> <span class="token class-name">Curve</span> curve<span class="token punctuation">;</span>

  <span class="token comment">/// The duration over which to animate the parameters of this container.</span>
  <span class="token keyword">final</span> <span class="token class-name">Duration</span> duration<span class="token punctuation">;</span>

  <span class="token comment">/// Called every time an animation completes.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// This can be useful to trigger additional actions (e.g. another animation)</span>
  <span class="token comment">/// at the end of the current animation.</span>
  <span class="token keyword">final</span> <span class="token class-name">VoidCallback</span><span class="token operator">?</span> onEnd<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">ImplicitlyAnimatedWidgetState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImplicitlyAnimatedWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>ImplicitlyAnimatedWidget.createState()</code>必须返回 ImplicitlyAnimatedWidgetState 或者 AnimatedWidgetBaseState 及其子类。</p></blockquote><p>ImplicitlyAnimatedWidget 作为 StatefulWidget，它的主要逻辑在 ImplicitlyAnimatedWidgetState 中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ImplicitlyAnimatedWidgetState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ImplicitlyAnimatedWidget</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span> <span class="token class-name">SingleTickerProviderStateMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// 隐式动画内部维护着自己的 AnimationController</span>
  <span class="token class-name">AnimationController</span> <span class="token keyword">get</span> controller <span class="token operator">=</span><span class="token operator">&gt;</span> _controller<span class="token punctuation">;</span>
  late <span class="token keyword">final</span> <span class="token class-name">AnimationController</span> _controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>
    duration<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>duration<span class="token punctuation">,</span>
    debugLabel<span class="token punctuation">:</span> kDebugMode <span class="token operator">?</span> widget<span class="token punctuation">.</span><span class="token function">toStringShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 驱动此隐式动画的 animation</span>
  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> animation <span class="token operator">=</span><span class="token operator">&gt;</span> _animation<span class="token punctuation">;</span>
  late <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> _animation <span class="token operator">=</span> <span class="token function">_createCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">CurvedAnimation</span> <span class="token function">_createCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>curve<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ImplicitlyAnimatedWidgetState 中，根据传入的 <em>Duration</em> 和 <em>Curve</em>，创建并持有了 <em>AnimationController</em> 和 <em>Animation&lt;double&gt;</em> 用于驱动隐式动画。</p><h4 id="initstate" tabindex="-1"><a class="header-anchor" href="#initstate" aria-hidden="true">#</a> initState</h4><p>在<code>ImplicitlyAnimatedWidgetState.initState</code>方法中：</p><ul><li>监听<code>_controller</code>的状态，当<code>AnimationStatus.completed</code>时回调<code>ImplicitlyAnimatedWidget.onEnd</code>方法；</li><li>此外还调用了<code>_constructTweens()</code>遍历 Tween，并调用由子类实现的<code>forEachTween()</code>方法（子类在此方法内部，获取到对应的 Tween，比如 Padding，从而在监听到<code>_controller</code>变化并触发 rebuilt 时使用<code>Animatable.evaluate()</code>方法获取并显示最新的属性，实现动画效果）；</li><li>最后还调用了<code>didUpdateTweens()</code>方法通知子类 Tweens 发生变化了。</li></ul><h4 id="constructtweens" tabindex="-1"><a class="header-anchor" href="#constructtweens" aria-hidden="true">#</a> _constructTweens</h4><p><code>_constructTweens()</code>方法会创建一个 TweenVisitor&lt;dynamic&gt;并传给子类 <code>forEachTween()</code>方法，子类可以使用其获取对应的 Tween 对象。</p><p><code>_constructTweens()</code>则在此过程中，使用<code>_shouldAnimateTween()</code>得知了子类中是否有 Tween 可以开始动画——<code>shouldStartAnimation</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  bool <span class="token function">_constructTweens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bool shouldStartAnimation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// forEachTween 方法由子类实现</span>
    <span class="token function">forEachTween</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> tween<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> targetValue<span class="token punctuation">,</span> <span class="token class-name">TweenConstructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tween <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">(</span>targetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断 targetValue 是否不等于 Tween.end</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_shouldAnimateTween</span><span class="token punctuation">(</span>tween<span class="token punctuation">,</span> targetValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
          shouldStartAnimation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tween <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> tween<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> shouldStartAnimation<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  bool <span class="token function">_shouldAnimateTween</span><span class="token punctuation">(</span><span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> tween<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> targetValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> targetValue <span class="token operator">!=</span> <span class="token punctuation">(</span>tween<span class="token punctuation">.</span>end <span class="token operator">?</span><span class="token operator">?</span> tween<span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="didupdatewidget" tabindex="-1"><a class="header-anchor" href="#didupdatewidget" aria-hidden="true">#</a> didUpdateWidget</h4><p>当 ImplicitlyAnimatedWidget 被重新创建时，会调用 ImplicitlyAnimatedWidgetState.didUpdateWidget 方法。</p><p>在此方法中，除了检查并更新 Curve、Duration、Tween 之外，最重要的是使用 AnimationController.forward() 开启了动画。也就是说——“<strong>ImplicitlyAnimatedWidget 第一次插入 Widget Tree 时没有动画，当再次被更新时会触发动画</strong>”。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">T</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果 Curve 变化则创建新的 CurveAnimation</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>curve <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>curve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>_animation <span class="token operator">as</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _animation <span class="token operator">=</span> <span class="token function">_createCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新 duration</span>
    _controller<span class="token punctuation">.</span>duration <span class="token operator">=</span> widget<span class="token punctuation">.</span>duration<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_constructTweens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果 Tween 可以开始，则更新其 begin 和 end 值</span>
      <span class="token function">forEachTween</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> tween<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> targetValue<span class="token punctuation">,</span> <span class="token class-name">TweenConstructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_updateTween</span><span class="token punctuation">(</span>tween<span class="token punctuation">,</span> targetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tween<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 当 Widget 更新后，开始动画</span>
      _controller
        <span class="token punctuation">.</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0.0</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">didUpdateTweens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="foreachtween" tabindex="-1"><a class="header-anchor" href="#foreachtween" aria-hidden="true">#</a> forEachTween</h4><p>子类必须实现此方法，使用传入的 TweenVisitor 创建自己对应的 Tween。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">forEachTween</span><span class="token punctuation">(</span><span class="token class-name">TweenVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="didupdatetweens" tabindex="-1"><a class="header-anchor" href="#didupdatetweens" aria-hidden="true">#</a> didUpdateTweens</h4><p>当 Tween 变化时会调用此方法通知子类，子类（可选）可以实现此方法。</p><br><p>到目前为止，我们的 AnimationController 已经控制动画开始执行，但是因为<strong>没有监听 AnimationController.value 的变化</strong>，所以还不能自动触发 ImplicitlyAnimatedWidgetState.build() 方法。</p><p>为了实现动画效果，子类可以选择<strong>自己主动监听 AnimationController</strong>；或者，<strong>继承 AnimatedWidgetBaseState</strong>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnimatedWidgetBaseState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ImplicitlyAnimatedWidget</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ImplicitlyAnimatedWidgetState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意此处监听了 AnimationController 的变化并自动触发 setState</span>
    controller<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_handleAnimationChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_handleAnimationChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* The animation ticked. Rebuild with new animation value */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ImplicitlyAnimatedWidget 的子类主要实现 AnimatedWidgetBaseState/ImplicitlyAnimatedWidgetState 的<code>forEachTween()</code>和<code>build()</code>方法即可。前者用于生成 Widget 所需的 Tween；后者则使用生成的 Tween&lt;T&gt;的<code>evaluate(animation)</code>方法计算对应的属性并展示。</p><p>以 AnimatedPadding 为例，它继承自 ImplicitlyAnimatedWidget，创建的_AnimatedPaddingState 继承自 AnimatedWidgetBaseState&lt;AnimatedPadding&gt;：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _AnimatedPaddingState <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidgetBaseState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnimatedPadding</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">EdgeInsetsGeometryTween</span><span class="token operator">?</span> _padding<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">forEachTween</span><span class="token punctuation">(</span><span class="token class-name">TweenVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建所需要的 Tween</span>
    _padding <span class="token operator">=</span> <span class="token function">visitor</span><span class="token punctuation">(</span>_padding<span class="token punctuation">,</span> widget<span class="token punctuation">.</span>padding<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">dynamic</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">EdgeInsetsGeometryTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> value <span class="token operator">as</span> <span class="token class-name">EdgeInsetsGeometry</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">EdgeInsetsGeometryTween</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 当 AnimationController 监听的 Ticker 时执行 setState 触发 rebuilt</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>
      <span class="token comment">// 使用 CurveAnimation 计算当前对应的 padding 值</span>
      padding<span class="token punctuation">:</span> _padding<span class="token operator">!</span>
        <span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> <span class="token class-name">EdgeInsetsGeometry</span><span class="token punctuation">.</span>infinity<span class="token punctuation">)</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>上述分析是继承 ImplicitlyAnimatedWidget 实现隐式动画的常用流程，Flutter 中内置的 AnimatedFoo 动画都是类似实现。</p><h4 id="tweenanimationbuilder" tabindex="-1"><a class="header-anchor" href="#tweenanimationbuilder" aria-hidden="true">#</a> TweenAnimationBuilder</h4><p>ImplicitlyAnimatedWidget 的子类（以 AnimatedFoo 命名的一众子类）提供了常见的动画效果，但是如果有特殊的动画效果需要实现，除了直接继承 ImplicitlyAnimatedWidget 之外，还可以使用 TweenAnimationBuilder 并传入 Tween 来实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>    <span class="token keyword">return</span> <span class="token class-name">TweenAnimationBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
      tween<span class="token punctuation">:</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> targetValue<span class="token punctuation">)</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> double size<span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IconButton</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>aspect_ratio<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Widget <strong>首次 build 的时候就会触发动画</strong>从 Tween.begin 过渡到 Tween.end；当再次提供一个有<strong>新 end 的 Tween 也可以随时触发新动画</strong>（新动画从动画当前值开始）。</p><p>需要注意：</p><ul><li>传入到 TweenAnimationBuilder 中的 Tween 被其持有（可能修改）,所以不应当再操作它；</li><li>当动画执行完毕会调用 TweenAnimationBuilder.onEnd 方法；</li><li>为了性能，应当将不需要每次更新的 subtree 传入到 TweenAnimationBuilder.child 中避免重绘。</li></ul><p>和其他 ImplicitlyAnimatedWidget 的子类一样，TweenAnimationBuilder 的主要逻辑也在继承自 AnimatedWidgetBaseState 的_TweenAnimationBuilderState 中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _TweenAnimationBuilderState<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidgetBaseState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TweenAnimationBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> _currentTween<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内部持有使用者传入的 Tween</span>
    _currentTween <span class="token operator">=</span> widget<span class="token punctuation">.</span>tween<span class="token punctuation">;</span>
    _currentTween<span class="token operator">!</span><span class="token punctuation">.</span>begin <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> _currentTween<span class="token operator">!</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentTween<span class="token operator">!</span><span class="token punctuation">.</span>begin <span class="token operator">!=</span> _currentTween<span class="token operator">!</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果 Tween 有效则开始动画</span>
      controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">forEachTween</span><span class="token punctuation">(</span><span class="token class-name">TweenVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>
      widget<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>end <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token string-literal"><span class="token string">&#39;Tween provided to TweenAnimationBuilder must have non-null Tween.end value.&#39;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    _currentTween <span class="token operator">=</span> <span class="token function">visitor</span><span class="token punctuation">(</span>_currentTween<span class="token punctuation">,</span> widget<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>end<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">dynamic</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> <span class="token class-name">StateError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Constructor will never be called because null is never provided as current tween.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用者实现 builder 创建对应的 Widget</span>
    <span class="token keyword">return</span> widget<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> _currentTween<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">,</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时需要注意，只有传入 TweenAnimationBuilder 的 Tween 是一个新的、并且 end 值和之前不一样的才会触发动画。如果 end 值一样则无动画、如果不是新的则 builder 的内容只会突然变化为 end 值对应状态而无动画。</p><h3 id="animatedwidget" tabindex="-1"><a class="header-anchor" href="#animatedwidget" aria-hidden="true">#</a> AnimatedWidget</h3><p>之前分析的 TweenAnimationBuilder 以及 ImplicitlyAnimatedWidget 的其他子类，基本上都只能定义动画的 Tween、Duration、Curve 等，动画的开始结束动都由这些 Widget 内部控制。</p><p>如果需要手动主动控制动画，可以选择使用 <strong>显式动画</strong> —— AnimatedWidget 及其子类：</p><p>其同样也分为 2 大类：</p><ul><li>AnimatedBuilder, which is useful for complex animation use cases and a notable exception to the naming scheme of AnimatedWidget subclasses.</li><li>FooTransition 子类 <ul><li>AlignTransition, which is an animated version of Align.</li><li>DecoratedBoxTransition, which is an animated version of DecoratedBox.</li><li>DefaultTextStyleTransition, which is an animated version of DefaultTextStyle.</li><li>PositionedTransition, which is an animated version of Positioned.</li><li>RelativePositionedTransition, which is an animated version of Positioned.</li><li>RotationTransition, which animates the rotation of a widget.</li><li>ScaleTransition, which animates the scale of a widget.</li><li>SizeTransition, which animates its own size.</li><li>SlideTransition, which animates the position of a widget relative to its normal position.</li><li>FadeTransition, which is an animated version of Opacity.</li><li>AnimatedModalBarrier, which is an animated version of ModalBarrier.</li></ul></li></ul><p>AnimatedWidget 比 ImplicitlyAnimatedWidget 简单许多，其接受一个 Listenable 对象，在_AnimatedState 中监听其并触发 rebuilt。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnimatedWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">AnimatedWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>listenable<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>listenable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Commonly an [Animation] or a [ChangeNotifier].</span>
  <span class="token keyword">final</span> <span class="token class-name">Listenable</span> listenable<span class="token punctuation">;</span>

  <span class="token comment">// 提供了 build 方法供子类根据不同的状态创建 Widget</span>
  <span class="token metadata function">@protected</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AnimatedWidget.listenable</code>通常是 AnimationController，当然也可以是其他实现 Listenable 的类（including ChangeNotifier and ValueNotifier）。</p><h4 id="animatedstate" tabindex="-1"><a class="header-anchor" href="#animatedstate" aria-hidden="true">#</a> _AnimatedState</h4><p>AnimatedWidget 的主要逻辑在对应的_AnimatedState 中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _AnimatedState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnimatedWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 监听 listenable，调用 setState 从而触发 rebuilt</span>
    widget<span class="token punctuation">.</span>listenable<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_handleChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">AnimatedWidget</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果 listenable 改变了则重写添加 listener</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>listenable <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>listenable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldWidget<span class="token punctuation">.</span>listenable<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_handleChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
      widget<span class="token punctuation">.</span>listenable<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_handleChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    widget<span class="token punctuation">.</span>listenable<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_handleChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The listenable&#39;s state is our build state, and it changed already.</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 注意这里使用了子类实现的 Widget.build 方法创建 Widget</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> widget<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，相对于隐式动画 ImplicitlyAnimatedWidget，显示动画 AnimatedWidget 的逻辑要简单的多，只是监听传入的 Listenable 并触发 rebuilt 即可。对于动画的控制则由 Listenable（通常是 AnimationController）处理。</p><p>也就是说，显示动画 AnimatedWidget 只是<strong>替子类做了监听/移除监听 Listenable 的值变化，并触发 rebuilt 的工作</strong>，如何获取变化的值，以及展示对应的 Widget 则需要子类自己处理。</p><p>他的子类 FooTransition 实现逻辑也比较简单，只需要在在 Widget.build 根据不同的状态创建创建不同属性的 Widget 即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RotationTransition</span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">RotationTransition</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> turns<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filterQuality<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>turns <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// AnimatedWidget 会监听 turns 的值变化，自动触发 rebuilt，</span>
      <span class="token comment">// 从而调用此 build() 方法更新 Widget</span>
       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> listenable<span class="token punctuation">:</span> turns<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> turns <span class="token operator">=</span><span class="token operator">&gt;</span> listenable <span class="token operator">as</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">FilterQuality</span><span class="token operator">?</span> filterQuality<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Alignment</span> alignment<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Transform</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>
      <span class="token comment">// 这里根据 turns 的值计算当前的角度</span>
      angle<span class="token punctuation">:</span> turns<span class="token punctuation">.</span>value <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2.0</span><span class="token punctuation">,</span>
      alignment<span class="token punctuation">:</span> alignment<span class="token punctuation">,</span>
      filterQuality<span class="token punctuation">:</span> filterQuality<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="animatedbuilder" tabindex="-1"><a class="header-anchor" href="#animatedbuilder" aria-hidden="true">#</a> AnimatedBuilder</h4><p>一般来说，Flutter 内置的以 FooTransition 命名的 AnimatedWidget 的子类可以满足基本的需求，但是如果想要实现更复杂的效果，除了直接继承 AnimatedWidget 之外，还可以使用 AnimatedBuilder 实现丰富的动画：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>
      animation<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Transform</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>
          angle<span class="token punctuation">:</span> _controller<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 AnimatedBuilder 的实现也比较简单：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AnimatedBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidget</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Creates an animated builder.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// The [animation] and [builder] arguments must not be null.</span>
  <span class="token keyword">const</span> <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token class-name">Listenable</span> animation<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>animation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">assert</span><span class="token punctuation">(</span>builder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> listenable<span class="token punctuation">:</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// Called every time the animation changes value.</span>
  <span class="token keyword">final</span> <span class="token class-name">TransitionBuilder</span> builder<span class="token punctuation">;</span>

  <span class="token comment">/// The child widget to pass to the [builder].</span>
  <span class="token comment">///</span>
  <span class="token comment">/// 可选，如果 AnimatedBuilder 要创建的一部分内容和动画无关，为了优化性能，</span>
  <span class="token comment">/// 可以将其传给 child，并在 builder 中直接复用</span>
  <span class="token keyword">final</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong>ImplicitlyAnimatedWidget 隐式动画</strong>，内部创建并监听 AnimationController 以维护动画，控制动画的开始和结束，用户可以通过传入 Duration、Curve、Tween 等决定动画的时长、曲线、开始和结束值等，当动画相关的属性变化时，隐式动画会自动播放，使用者不可以直接控制动画。<br> Flutter 内置的隐式动画为 TweenAnimationBuilder 和 AnimatedFoo。</p><p><strong>AnimatedWidget 显式动画</strong>，接受 Listenable（通常是 AnimationController）并监听其值变化，以触发 Widget 重新 build，其子类中一般会监听 Listenable 的值并计算设置 Widget 对应的属性。使用者需要负责创建、控制 Listenable 从而控制动画播放。Flutter 内置的显式动画为 AnimatedBuilder 和 FooTransition。</p><p>在使用 Flutter 实现<strong>Widget 动画</strong>时，可以按照以下顺序选择实现方式：</p><ol><li>AnimatedFoo，选择内置的隐式动画，以实现当 Padding、Alignment 等属性变化时自动渐变到新值的动画效果。</li><li>TweenAnimationBuilder/继承 ImplicitlyAnimatedWidget，当上一步无法满足需求时，可以考虑进一步自定义实现隐式动画。</li><li>FooTransition，如果不止要展示动画，还希望能够控制动画开始、结束，就使用内置的显式动画结合自己创建的 AnimationController 实现动画。</li><li>AnimationBuilder/AnimatedWidget，如果没有满足条件的内置显式动画，可以使用自定义实现显式动画。</li><li>CustomPainter，如果上述方法仍然无法满足动画需求，可以考虑使用 CustomPainter 自己绘制动画。</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,75),A={href:"https://flutter.cn/docs/development/ui/animations",target:"_blank",rel:"noopener noreferrer"},T={href:"https://api.flutter.dev/flutter/widgets/ImplicitlyAnimatedWidget-class.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://api.flutter.dev/flutter/widgets/AnimatedWidget-class.html",target:"_blank",rel:"noopener noreferrer"};function _(x,C){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,d,n("ul",null,[n("li",null,[n("a",r,[s("AnimationController"),t(a)])]),n("li",null,[n("a",k,[s("Tween&Curve"),t(a)])])]),m,n("ul",null,[n("li",null,[s("AnimatedFoo 参考"),n("a",v,[s("文章"),t(a)]),s("，设置新的状态，这些控件会自动从之前的状态切换到新状态")]),n("li",null,[s("TweenAnimationBuilder 参考"),n("a",b,[s("文章"),t(a)]),s("，将任意属性在 Tween 指定的范围变化，和上面的 AnimatedFoo 都是属于"),n("a",g,[s("Implicitly animated widgets"),t(a)]),s("（隐式动画，由系统控件控制动画）。")]),w,h,y]),f,n("p",null,[n("a",A,[s("动画效果介绍 flutter.cn"),t(a)])]),n("p",null,[n("a",T,[s("ImplicitlyAnimatedWidget"),t(a)])]),n("p",null,[n("a",W,[s("AnimatedWidget"),t(a)])])])}const B=i(l,[["render",_],["__file","47c43abe.html.vue"]]);export{B as default};
