const e=JSON.parse('{"key":"v-374c7c33","path":"/posts/f31c11c5.html","title":"JVM内存分配","lang":"zh-CN","frontmatter":{"permalink":"/posts/f31c11c5.html","title":"JVM内存分配","abbrlink":"f31c11c5","date":"2018-02-24T23:39:19.000Z","tag":"jvm","description":"本笔记基于《深入理解Java虚拟机：JVM高级特性与最佳实践》及部分在线博客整理。 JVM：java virtual machine，一个java程序（进程）拥有一个jvm实例 内存 JVM区域总体分两类，heap区和非heap区: heap区：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。 非heap区：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java虚拟机栈)、Local Method Statck(本地方 法栈)。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/f31c11c5.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"JVM内存分配"}],["meta",{"property":"og:description","content":"本笔记基于《深入理解Java虚拟机：JVM高级特性与最佳实践》及部分在线博客整理。 JVM：java virtual machine，一个java程序（进程）拥有一个jvm实例 内存 JVM区域总体分两类，heap区和非heap区: heap区：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。 非heap区：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java虚拟机栈)、Local Method Statck(本地方 法栈)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-11T09:53:08.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:published_time","content":"2018-02-24T23:39:19.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-11T09:53:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM内存分配\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-24T23:39:19.000Z\\",\\"dateModified\\":\\"2023-10-11T09:53:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.head","slug":"_1-head","link":"#_1-head","children":[]},{"level":2,"title":"2.stack","slug":"_2-stack","link":"#_2-stack","children":[{"level":3,"title":"java virtual machine stack","slug":"java-virtual-machine-stack","link":"#java-virtual-machine-stack","children":[]},{"level":3,"title":"native method stack","slug":"native-method-stack","link":"#native-method-stack","children":[]}]},{"level":2,"title":"3.method area","slug":"_3-method-area","link":"#_3-method-area","children":[]},{"level":2,"title":"4.program count","slug":"_4-program-count","link":"#_4-program-count","children":[]},{"level":2,"title":"1.java堆溢出","slug":"_1-java堆溢出","link":"#_1-java堆溢出","children":[]},{"level":2,"title":"2.虚拟机栈和本地方法栈溢出","slug":"_2-虚拟机栈和本地方法栈溢出","link":"#_2-虚拟机栈和本地方法栈溢出","children":[]},{"level":2,"title":"3.运行时常量池溢出","slug":"_3-运行时常量池溢出","link":"#_3-运行时常量池溢出","children":[]},{"level":2,"title":"4.方法区溢出","slug":"_4-方法区溢出","link":"#_4-方法区溢出","children":[]},{"level":2,"title":"5.本地直接内存溢出","slug":"_5-本地直接内存溢出","link":"#_5-本地直接内存溢出","children":[]},{"level":2,"title":"回收算法","slug":"回收算法","link":"#回收算法","children":[{"level":3,"title":"1.复制算法","slug":"_1-复制算法","link":"#_1-复制算法","children":[]},{"level":3,"title":"2.标记清除法","slug":"_2-标记清除法","link":"#_2-标记清除法","children":[]},{"level":3,"title":"3.标记压缩法","slug":"_3-标记压缩法","link":"#_3-标记压缩法","children":[]},{"level":3,"title":"4.引用计数算法","slug":"_4-引用计数算法","link":"#_4-引用计数算法","children":[]}]},{"level":2,"title":"回收过程","slug":"回收过程","link":"#回收过程","children":[]},{"level":2,"title":"对象引用","slug":"对象引用","link":"#对象引用","children":[{"level":3,"title":"强引用StrongReference","slug":"强引用strongreference","link":"#强引用strongreference","children":[]},{"level":3,"title":"软引用SoftReference","slug":"软引用softreference","link":"#软引用softreference","children":[]},{"level":3,"title":"弱引用WeakReference","slug":"弱引用weakreference","link":"#弱引用weakreference","children":[]},{"level":3,"title":"虚引用PhantomReference","slug":"虚引用phantomreference","link":"#虚引用phantomreference","children":[]}]}],"git":{"createdTime":1697017988000,"updatedTime":1697017988000,"contributors":[{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":6.34,"words":1902},"filePathRelative":"_posts/JVM内存知识整理.md","localizedDate":"2018年2月25日","excerpt":"<blockquote>\\n<p>本笔记基于《深入理解Java虚拟机：JVM高级特性与最佳实践》及部分在线博客整理。</p>\\n</blockquote>\\n<p>JVM：java virtual machine，一个java程序（进程）拥有一个jvm实例</p>\\n<h1> 内存</h1>\\n<p>JVM区域总体分两类，heap区和非heap区:</p>\\n<p><strong>heap区</strong>：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。<br>\\n<strong>非heap区</strong>：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java虚拟机栈)、Local Method Statck(本地方 法栈)。</p>","autoDesc":true}');export{e as data};
