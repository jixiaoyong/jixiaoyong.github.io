const e=JSON.parse('{"key":"v-93dad108","path":"/posts/f931e8ae.html","title":"Android中AIDL的使用","lang":"zh-CN","frontmatter":{"permalink":"/posts/f931e8ae.html","title":"Android中AIDL的使用","abbrlink":"f931e8ae","date":"2018-08-07T21:15:39.000Z","tag":"aidl","description":"AIDL（Android Interface Definition Language ，Android接口定义语言）用于Android IPC，适用于大量并发请求。 主要分为两部分： 服务端 创建Service监听Client的请求，通过创建AIDL将接口暴露给客户端 客户端 绑定到服务端获取BInder对象，将其转化为对应AIDL，并调用接口对应方法。 两者的连线就是AIDL，因此两个APP的AIDL必须一致，可以将AIDL文件放到一个Android Library中，或者打成aar文件供二者依赖。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/f931e8ae.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Android中AIDL的使用"}],["meta",{"property":"og:description","content":"AIDL（Android Interface Definition Language ，Android接口定义语言）用于Android IPC，适用于大量并发请求。 主要分为两部分： 服务端 创建Service监听Client的请求，通过创建AIDL将接口暴露给客户端 客户端 绑定到服务端获取BInder对象，将其转化为对应AIDL，并调用接口对应方法。 两者的连线就是AIDL，因此两个APP的AIDL必须一致，可以将AIDL文件放到一个Android Library中，或者打成aar文件供二者依赖。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-08T11:27:55.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"aidl"}],["meta",{"property":"article:published_time","content":"2018-08-07T21:15:39.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-08T11:27:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android中AIDL的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-08-07T21:15:39.000Z\\",\\"dateModified\\":\\"2023-04-08T11:27:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"支持的数据格式","slug":"支持的数据格式","link":"#支持的数据格式","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"AIDL","slug":"aidl","link":"#aidl","children":[]},{"level":2,"title":"服务端","slug":"服务端","link":"#服务端","children":[]},{"level":2,"title":"客户端","slug":"客户端","link":"#客户端","children":[]},{"level":2,"title":"监听并处理Binder死亡事件","slug":"监听并处理binder死亡事件","link":"#监听并处理binder死亡事件","children":[]},{"level":2,"title":"AIDL的权限验证","slug":"aidl的权限验证","link":"#aidl的权限验证","children":[]}],"git":{"createdTime":1680953275000,"updatedTime":1680953275000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":6.35,"words":1906},"filePathRelative":"_posts/Android中AIDL的使用.md","localizedDate":"2018年8月8日","excerpt":"<p>AIDL（Android Interface Definition Language ，Android接口定义语言）用于Android IPC，适用于<strong>大量并发</strong>请求。</p>\\n<p>主要分为两部分：</p>\\n<ol>\\n<li>服务端 创建Service监听Client的请求，通过创建AIDL将接口暴露给客户端</li>\\n<li>客户端 绑定到服务端获取BInder对象，将其转化为对应AIDL，并调用接口对应方法。</li>\\n</ol>\\n<p>两者的连线就是AIDL，因此两个APP的AIDL必须一致，可以将AIDL文件放到一个Android Library中，或者打成aar文件供二者依赖。</p>","autoDesc":true}');export{e as data};
