import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as a,d as e,e as p}from"./app-b57bd53e.js";const c={},r=p(`<p>本文为笔记性质，尚未成文。</p><h1 id="view的坐标" tabindex="-1"><a class="header-anchor" href="#view的坐标" aria-hidden="true">#</a> View的坐标</h1><p>Android中的坐标，以屏幕左上角顶点为原点(0,0)，以横轴为x轴，竖轴为y轴，数值依次递增。</p><p>View的坐标信息有以下几种，其坐标都是以父View的左上角顶点为原点：</p><ul><li><p>x，y 是View的左上角坐标。</p></li><li><p>translationX，translationY是View左上角顶点与父容器左上角顶点的偏移量，默认为0。</p></li><li><p>left，top 是分别是View左上角顶点的x轴，y轴坐标。</p><p>right，bottom分别是View右下角顶点的x轴，y轴坐标。</p></li></ul><blockquote><p>注意</p></blockquote><p>x = translationX + left；</p><p>y = translationY + top；</p><p>改变translationX/Y的值便可以更改<strong>View的位置</strong>。当View平移的时候，代表原始位置信息的left，right，top，bottom的值并不会变化。</p><p>在OnTouch事件中，我们可以从event得到两种值：</p><p>event.rawX,event.rawY 代表 相对于手机屏幕原点的坐标</p><p>event.X,event.Y 代表 相对于当前View左上角的坐标</p><p>TouchSlop则代表认为滑动开始的最小距离</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>ViewConfiguration<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scaledTouchSlop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="滑动" tabindex="-1"><a class="header-anchor" href="#滑动" aria-hidden="true">#</a> 滑动</h1><p>mScroller.startScroll()方法可以实现平滑的滑动</p><p>scrollX,scrollY表示的是<em>view的X，Y坐标减去view内容的X，Y坐标</em>。</p><p>所以scrollX&gt;0，则表示view内容向左移动，scrollX&lt;0表示view内容向右移动。类似于窗户(view)位置不变，景色(view内容)的scrollX&gt;0即景色向右移动，则在窗户中看到的效果是景色向窗户左边移动。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> mScroller <span class="token operator">=</span> <span class="token function">Scroller</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">smoothScrollBy</span><span class="token punctuation">(</span>destX<span class="token operator">:</span> Int<span class="token punctuation">,</span> destY<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span> scrollY<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">//destX, destY的值如果是正的话，会向左，上方移动</span>
    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span>currX<span class="token punctuation">,</span> mScroller<span class="token punctuation">.</span>currY<span class="token punctuation">)</span>
        <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scroller不能使View滑动，而只能配合View的computeScroll()方法实现是<strong>View的内容滑动</strong>的效果。</p><ul><li>mScroller.startScroll()记录下要滑动的数据，而invalidate()通知View重绘；</li><li>每次重绘都会调用computeScroll()方法，利用mScroller计算出接下来要scrollTo()的具体值并执行，再次postInvalidate()通知View重绘；</li><li>如此反复直到绘制滑动完毕。</li></ul><p>上述无论是translationX还是scrollX等引起的view变化，都不能改变View的定位（left，right，top，bottom值），而如果<strong>更改margin的值，则可以更改View的定位</strong>。</p><h1 id="window和windowmanager" tabindex="-1"><a class="header-anchor" href="#window和windowmanager" aria-hidden="true">#</a> Window和WindowManager</h1><p>WindowManager.LayoutParams.flags有三个常用选项：</p><ul><li>WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL // 只处理Window区域内的点击事件，之外的交给其他Window处理</li><li>WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE // 不接受输入事件，不获取焦点，同时会开启FLAG_NOT_TOUCH_MODAL，最终事件会传递给下层具有焦点的Window</li><li>WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED // 让Window显示在锁屏界面上</li></ul><p>WindowManager.LayoutParams.type代表Window的类型(三个)：</p><ul><li>应用Window 对应一个Activity。<code>z-ordered</code>:1~99</li><li>子Window 不能单独存在，附属在特定的父Window中，如Dialog。<code>z-ordered</code>:1000~1999</li><li>系统Window 需要系统权限，如Toast，状态栏等。<code>z-ordered</code>:2000~2999</li></ul><p><code>z-ordered</code>值大的Window会覆盖掉低值的Window。</p><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h1>`,29),d=n("br",null,null,-1),u={href:"https://www.jianshu.com/p/130fdd755471",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),k={href:"https://blog.csdn.net/qq_15807167/article/details/51637678",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),m={href:"https://www.cnblogs.com/dasusu/p/9159904.html",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),b=n("s",null,"滑动展示删除按钮",-1),_={href:"https://www.jianshu.com/p/9bfed6e127cc",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/jixiaoyong/DiyWidget/blob/master/diy-widget/src/main/java/cf/android666/applibrary/SwipeRecyclerView.kt",target:"_blank",rel:"noopener noreferrer"},g=n("h1",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),y={href:"https://blog.csdn.net/Holmofy/article/details/53959511",target:"_blank",rel:"noopener noreferrer"};function S(V,W){const s=o("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[a("recycleview滑动"),d,a(" ItemTouchHelper源码分析 "),n("a",u,[a("https://www.jianshu.com/p/130fdd755471"),e(s)]),w,a(" 嵌套滑动 "),n("a",k,[a("https://blog.csdn.net/qq_15807167/article/details/51637678"),e(s)]),h,n("a",m,[a("https://www.cnblogs.com/dasusu/p/9159904.html"),e(s)]),v,b,a(),n("a",_,[a("https://www.jianshu.com/p/9bfed6e127cc"),e(s)]),a(" >> 对应的demo："),n("a",f,[a("https://github.com/jixiaoyong/DiyWidget/blob/master/diy-widget/src/main/java/cf/android666/applibrary/SwipeRecyclerView.kt"),e(s)])]),g,n("p",null,[n("a",y,[a("View滑动效果常用属性详解：scroll、translation、LayoutParams"),e(s)])])])}const L=t(c,[["render",S],["__file","1b0362b.html.vue"]]);export{L as default};
