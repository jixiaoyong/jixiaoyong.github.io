import{_ as o,r as p,o as l,c as i,a as n,b as a,d as e,e as t}from"./app-77b42b64.js";const c={},r=t('<p>使用到的类有：</p><ul><li>android.support.design.widget.CoordinatorLayout</li><li>android.support.design.widget.AppBarLayout</li><li>android.support.design.widget.CollapsingToolbarLayout</li><li>android.support.v7.widget.Toolbar</li></ul><h2 id="效果预览" tabindex="-1"><a class="header-anchor" href="#效果预览" aria-hidden="true">#</a> 效果预览</h2><p>如图：</p><figure><img src="http://jixiaoyong.github.io/blog/images/default/2018-02-22/coordinatorlayout.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="简要说明" tabindex="-1"><a class="header-anchor" href="#简要说明" aria-hidden="true">#</a> 简要说明</h2><p>CoordinatorLayout 类，协调者布局，通过 Behavior 将一个子 view（<code>child</code>）的行为和另一个子 view（<code>dependency</code>）的活动联结起来，从而实现子 view 之间的联动。</p><p>AppBarLayout 类，是一个实现了材料设计的默认垂直布局的 ViewGroup，当其是 CoordinatorLayout 类的直接子 view 时，另外一个 CoordinatorLayout 的子 view 指定了 behavior 为 AppBarLayout.ScrollingViewBehavior 的实例（<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>）,且该子 view 需要是 NestedScrollingChild 的实现类。</p><p>CollapsingToolbarLayout 类，提供一个可以折叠的 toolbar 布局，可以在这个布局里面，设置 toolbar 以及和 toolbar 一起联动的子 view，本案例中是一张图片。</p><p>Toolbar 类，实现 toolbar 的效果。</p><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2>',11),u={href:"https://github.com/jixiaoyong/AndroidNote/tree/master/code/2018-02-22",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.CoordinatorLayout</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.AppBarLayout</span><span class="token punctuation">&gt;</span></span>

         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.CollapsingToolbarLayout</span>
              <span class="token attr-name"><span class="token namespace">app:</span>layout_scrollFlags</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scroll|exitUntilCollapsed<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>
                  <span class="token attr-name"><span class="token namespace">app:</span>layout_collapseMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parallax<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.Toolbar</span>
                  <span class="token attr-name"><span class="token namespace">app:</span>layout_collapseMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pin<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.CollapsingToolbarLayout</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.AppBarLayout</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.view.ViewPager</span>
            <span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/appbar_scrolling_view_behavior<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.CoordinatorLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>CoordinatorLayout 在最外层，注意其直接子 view 必须就是要实现联动的 view，否则联动失效。</li><li>CollapsingToolbarLayout 必须设置 layout_scrollFlags，其余属性可选。</li></ol>`,2),k=t("<p>layout_scrollFlags 说明如下：</p><p><strong>scroll</strong>：所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个 flag 的 view 将被固定在屏幕顶部。</p><p><strong>enterAlways</strong>：这个 flag 让任意向下的滚动都会导致该 view 变为可见，启用快速“返回模式”。</p><p><strong>enterAlwaysCollapsed</strong>：假设你定义了一个最小高度（minHeight）同时 enterAlways 也定义了，那么 view 将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p><p><strong>exitUntilCollapsed</strong>：当你定义了一个 minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p><p><strong>snap</strong>：当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部 25% 显示，它将折叠。相反，如果它的底部 75% 可见，那么它将完全展开。</p><p>作者：尹 star</p>",7),v={href:"https://www.jianshu.com/p/5287d090e777",target:"_blank",rel:"noopener noreferrer"},g=t(`<ol><li>CollapsingToolbarLayout 的子 view 需要指定 layout_collapseMode，还有一点需注意：<strong>和 toolbar 联动的子 view 高度需大于 toolbar 高度，否则无效果。</strong></li><li>ViewPager 就是本案例中触发子 view 联动效果的<code>dependency</code>，需要指定其 behavior：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实际对应于 android.support.design.widget.AppBarLayout$ScrollingViewBehavior，这个是系统实现的一个 behavior，用于和嵌套滑动事件绑定，<strong>指定该 behavior 的子 view 需要是 NestedScrollingChild 的实现类</strong>（系统提供了 4 个实现类：NavigationMenuView、NestedScrollView、RecyclerView、SwipleRefreshLayout），所以 viewPager 中页面有上述 4 个类或其子类时，才能实现绑定效果。</p><h2 id="延伸" tabindex="-1"><a class="header-anchor" href="#延伸" aria-hidden="true">#</a> 延伸</h2><p><strong>自定义 Behavior</strong></p><p>自定义 Behavior 有两个目的：</p><ol><li>将两个或多个子 view 绑定；</li><li>将一个子 view 与另一个子 view 的滑动事件绑定在一起</li></ol><p>两者的差异在于在实现<code>CoordinatorLayout.Behavior&lt;T&gt;</code> 类时候具体重写的方法不一样。</p><p><strong>目的 1</strong>：需要重写的方法有：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">layoutDependsOn</span><span class="token punctuation">(</span><span class="token class-name">CoordinatorLayout</span> parent<span class="token punctuation">,</span> <span class="token class-name">T</span> child<span class="token punctuation">,</span> <span class="token class-name">View</span> dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果 dependency 是要依赖的子 view（此处是 TempView 类）的实例，说明它就是我们所需要的 Dependency</span>
    <span class="token keyword">return</span> dependency <span class="token keyword">instanceof</span> <span class="token class-name">TempView</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//每次 dependency 位置发生变化，都会执行 onDependentViewChanged 方法</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDependentViewChanged</span><span class="token punctuation">(</span><span class="token class-name">CoordinatorLayout</span> parent<span class="token punctuation">,</span> <span class="token class-name">T</span> child<span class="token punctuation">,</span> <span class="token class-name">View</span> dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//根据 dependency 的位置，设置 child 的位置，对 child 进行想要实现的变化</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//返回 true 表示改变了 child 的尺寸和位置参数，否则返回 false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目的 2</strong>：需要重写的方法有：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//判断是否要开始根据 dependency 子 view 的行为改变 child 的状态</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartNestedScroll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CoordinatorLayout</span> coordinatorLayout<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ImageView</span> child<span class="token punctuation">,</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> directTargetChild<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> axes<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> child <span class="token keyword">instanceof</span> <span class="token class-name">ImageView</span> <span class="token operator">&amp;&amp;</span> axes <span class="token operator">==</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">SCROLL_AXIS_VERTICAL</span><span class="token punctuation">;</span><span class="token comment">//子 view 是 ImageView，并且滑动的方向是垂直的</span>
<span class="token punctuation">}</span>

<span class="token comment">//当 dependency 子 view 滑动时，对 child 进行相应处理</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CoordinatorLayout</span> coordinatorLayout<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ImageView</span> child<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> consumed<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>coordinatorLayout<span class="token punctuation">,</span> child<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> consumed<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),m=n("h1",{id:"自定义-behavior-的总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义-behavior-的总结","aria-hidden":"true"},"#"),a(" 自定义 Behavior 的总结")],-1),h=n("ol",null,[n("li",null,"确定 CoordinatorLayout 中 View 与 View 之间的依赖关系，通过 layoutDependsOn() 方法，返回值为 true 则依赖，否则不依赖。"),n("li",null,"当一个被依赖项 dependency 尺寸或者位置发生变化时，依赖方会通过 Byhavior 获取到，然后在 onDependentViewChanged 中处理。如果在这个方法中 child 尺寸或者位置发生了变化，则需要 return true。"),n("li",null,"当 Behavior 中的 View 准备响应嵌套滑动时，它不需要通过 layoutDependsOn() 来进行依赖绑定。只需要在 onStartNestedScroll() 方法中通过返回值告知 ViewParent，它是否对嵌套滑动感兴趣。返回值为 true 时，后续的滑动事件才能被响应。"),n("li",null,"嵌套滑动包括滑动 (scroll) 和 快速滑动 (fling) 两种情况。开发者根据实际情况运用就好了。"),n("li",null,"Behavior 通过 3 种方式绑定：1. xml 布局文件。2. 代码设置 layoutparam。3. 自定义 View 的注解。")],-1),b={href:"http://blog.csdn.net/briblue/article/details/73076458",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"参考文献",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文献","aria-hidden":"true"},"#"),a(" 参考文献")],-1),y={href:"http://blog.csdn.net/briblue/article/details/73076458",target:"_blank",rel:"noopener noreferrer"},_={href:"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0824/6565.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/8c92d0a1e591",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.jianshu.com/p/5287d090e777",target:"_blank",rel:"noopener noreferrer"};function C(V,x){const s=p("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[a("源码："),n("a",u,[a("github"),e(s)])]),d,n("blockquote",null,[k,n("p",null,[a("链接："),n("a",v,[a("https://www.jianshu.com/p/5287d090e777"),e(s)])])]),g,n("blockquote",null,[m,h,n("p",null,[a("来源："),n("a",b,[a("针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客"),e(s)])])]),w,n("ul",null,[n("li",null,[n("a",y,[a("针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客"),e(s)])]),n("li",null,[n("a",_,[a("CoordinatorLayout 自定义 Behavior 并不难，由简到难手把手带你撸三款！ - 泡在网上的日子"),e(s)])]),n("li",null,[n("a",f,[a("一步一步深入理解 CoordinatorLayout - 简书"),e(s)])]),n("li",null,[n("a",L,[a("使用 CoordinatorLayout 打造一个炫酷的详情页 - 简书"),e(s)])])])])}const B=o(c,[["render",C],["__file","b4832cd1.html.vue"]]);export{B as default};
