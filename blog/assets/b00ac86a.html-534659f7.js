import{_ as i,r as t,o,c,a,b as n,d as s,e as l}from"./app-a4c82ba1.js";const r={},u=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),p=a("p",null,"本文介绍了一个只需要更新 Markdown 文档到 Github，即可实时更新博客内容的方法。",-1),d={href:"https://juejin.im/post/5a1fa30c6fb9a045263b5d2a",target:"_blank",rel:"noopener noreferrer"},h=a("strong",null,"部署多个 hexo 工程到同一 Github 项目不同目录下",-1),b={href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://hexo.io/",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"Markdown文档",-1),g=a("code",null,"静态网页",-1),_=a("code",null,"user_name.github.io",-1),k=a("p",null,"但是受 Hexo 的限制，每次更新博客内容都需要在更新完 Markdown 文档后，都需要再次重新创建对应的静态网页、将更新提交到 Github。这样的步骤繁琐且没有意义，而且更换电脑后这些环境都需要重新设置一次。",-1),x={href:"https://www.travis-ci.org",target:"_blank",rel:"noopener noreferrer"},f=a("strong",null,"只需要将写好的 Markdown 文档推送到 Github 项目对应目录中，等待一会儿就可以看到更新后的博客了",-1),y={href:"https://juejin.im/post/5a1fa30c6fb9a045263b5d2a",target:"_blank",rel:"noopener noreferrer"},j=a("strong",null,"部署多个 hexo 工程到同一 Github 项目不同目录下",-1),G=l(`<blockquote><p><strong>懒——是第一生产力</strong></p></blockquote><h2 id="具体差异" tabindex="-1"><a class="header-anchor" href="#具体差异" aria-hidden="true">#</a> 具体差异</h2><h3 id="hexo-分支的结构" tabindex="-1"><a class="header-anchor" href="#hexo-分支的结构" aria-hidden="true">#</a> hexo 分支的结构</h3><p>因为有多个 hexo 项目，所以在 github 项目的 hexo 分支下，对不同的 hexo 项目分别新建文件夹存放。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- your_name.github.io //github项目，切换到hexo分支
  <span class="token parameter variable">--hexo_project1</span> //本地hexo项目1的所有文件
  <span class="token parameter variable">--hexo_project2</span> //本地hexo项目2的所有文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="travis-yml" tabindex="-1"><a class="header-anchor" href="#travis-yml" aria-hidden="true">#</a> .travis.yml</h3><p>重点修改<code>script:</code>和<code>after_script:</code>两部分：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token comment"># 1. 创建对应的静态博客内容</span>
  <span class="token punctuation">-</span> cd blog <span class="token comment"># 第一个本地 hexo 项目</span>
  <span class="token punctuation">-</span> hexo clean
  <span class="token punctuation">-</span> hexo generate
  <span class="token punctuation">-</span> cd ..
  <span class="token punctuation">-</span> cd imissyou <span class="token comment"># 第二个本地 hexo 项目</span>
  <span class="token punctuation">-</span> hexo clean
  <span class="token punctuation">-</span> hexo generate
  <span class="token punctuation">-</span> cd ..

<span class="token key atrule">after_script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> git config user.name &quot;jixiaoyong&quot;
  <span class="token punctuation">-</span> git config user.email &quot;jixiaoyong1995@gmail.com&quot;
  <span class="token punctuation">-</span> cd ..
  <span class="token punctuation">-</span> mkdir publish
  <span class="token punctuation">-</span> cd publish
  <span class="token comment"># 2. 在这里再拉取 master 分支的文件，并删除旧的博客内容</span>
  <span class="token punctuation">-</span> git clone https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>GH_TOKEN<span class="token punctuation">}</span>@github.com/jixiaoyong/jixiaoyong.github.io.git
  <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf ./jixiaoyong.github.io/blog/*
  <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf ./jixiaoyong.github.io/imissyou/*
    <span class="token comment"># 3. 将第 1 步生成的静态博客内容添加到 master 分支，并同步到 github 上面</span>
  <span class="token punctuation">-</span> cd ..
  <span class="token punctuation">-</span> cp <span class="token punctuation">-</span>rf jixiaoyong.github.io/blog/public/* publish/jixiaoyong.github.io/blog/
  <span class="token punctuation">-</span> cp <span class="token punctuation">-</span>rf jixiaoyong.github.io/imissyou/public/* publish/jixiaoyong.github.io/imissyou/
  <span class="token punctuation">-</span> cd publish/jixiaoyong.github.io/
  <span class="token punctuation">-</span> git add .
  <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m &quot;auto update by www.travis<span class="token punctuation">-</span>ci.org&quot;
  <span class="token punctuation">-</span> git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),w={href:"https://github.com/jixiaoyong/jixiaoyong.github.io/blob/hexo_blog/.travis.yml",target:"_blank",rel:"noopener noreferrer"},q=a("h2",{id:"更新博客内容",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#更新博客内容","aria-hidden":"true"},"#"),n(" 更新博客内容")],-1),H=a("p",null,[n("当以上内容都配置完成后，只要新建一个符合 hexo 要求的文档，并提交到 Github 对应项目的 hexo 分支中"),a("code",null,"source"),n("目录，Travis 便会自动帮我们创建并更新静态网页。")],-1),M=a("h2",{id:"参考文档",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),n(" 参考文档")],-1),N={href:"https://juejin.im/post/5a1fa30c6fb9a045263b5d2a",target:"_blank",rel:"noopener noreferrer"},E={href:"https://juejin.im/user/56efe6461ea493005565dafd",target:"_blank",rel:"noopener noreferrer"};function I(T,V){const e=t("ExternalLinkIcon");return o(),c("div",null,[u,a("blockquote",null,[p,a("p",null,[n("本文参考"),a("a",d,[n("这篇文章"),s(e)]),n(" 实现，并根据我的需求更改了部分内容，以实现"),h,n("。")])]),a("p",null,[n("Github 为我们提供了"),a("a",b,[n("Github Pages"),s(e)]),n(" 方便我们建立简单的网页来介绍项目，很多时候我们用他来搭建静态博客。")]),a("p",null,[n("通过"),a("a",m,[n("Hexo"),s(e)]),n("可以将我们写的"),v,n("格式化为"),g,n("，再将其部署到 Github 上面对应的"),_,n("上面，就可以拥有一个在线的静态博客。")]),k,a("p",null,[n("通过"),a("a",x,[n("travis"),s(e)]),n("提供的免费 CI 技术，可以让云服务器代替我们实现 Hexo 创建以及同步 Github 等步骤，每次更新博客时"),f,n("。")]),a("p",null,[n("具体搭建过程可以参考"),a("a",y,[n("这篇文章"),s(e)]),n(" 本文只讲述实现"),j,n("需要注意的地方：。")]),G,a("p",null,[n("文档链接："),a("a",w,[n(".travis.yml"),s(e)])]),q,H,M,a("p",null,[a("a",N,[n("Hexo 遇上 Travis-CI：可能是最通俗易懂的自动发布博客图文教程"),s(e)]),n(" （完全在该文档指导下完成，部分步骤有差异，感谢作者"),a("a",E,[n("MichaelX"),s(e)]),n(" ）")])])}const C=i(r,[["render",I],["__file","b00ac86a.html.vue"]]);export{C as default};
