import{_ as s,c as t,a,o as n}from"./app-3cnvzyR2.js";const l={};function e(h,i){return n(),t("div",null,i[0]||(i[0]=[a(`<p>今天重新学习类三种排序方法，按照排序速度依次是冒泡排序，选择排序和插入排序。<br> 以下示例皆为从小到大的排序</p><h2 id="_1-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_1-冒泡排序"><span>1.冒泡排序</span></a></h2><p>每一次比较都可能要交换元素。<br> 冒泡排序的思想是：<br> 每一轮开始的时候，将第一个元素（a）开始与其后的元素（b）依次进行比较，将较大的元素（设为 m）放到后面，并将 m 与其后的另外一个元素继续进行比较，直到最后一个没有排好序的元素。<br> 在接下来一轮的排序中，刚才以及之前选出来的、已经排好顺序的最大值不用参与排序。<br> 依次类推，总共遍历 n-1 轮，即可完成排序。<br> 具体代码如下：</p><pre><code> void bubble(int[] arr){
	int temp;
	for (int i = 0; i &lt; arr.length - 1; i++) {
		for (int j = 0; j &lt; arr.length - i - 1; j++) {
			if (arr[j] &gt; arr[j + 1]) {
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}

	System.out.println(&quot;\\n--bubble :&quot;);
	for (int i = 0; i &lt; arr.length; i++) {
		System.out.print(arr[i] + &quot; &quot;);
	}
}
</code></pre><h2 id="_2-选择排序" tabindex="-1"><a class="header-anchor" href="#_2-选择排序"><span>2.选择排序</span></a></h2><p>每次比较的时候不交换<br> 选择排序的思想：<br> 每次比较的时候找到的两个数中的较大值并记下其位置，等到当前一轮的遍历完成之后，将最后一个未排序元素与这一轮遍历找到的最大值交换<br> 最多交换 n-1 次<br> 代码如下：</p><pre><code>   void select(int[] arr){

	for (int i = 0; i &lt; arr.length; i++) {
		int maxIndex = 0;
		int temp = 0;

		for (int j = 1; j &lt; arr.length - i; j++) {
			if (arr[maxIndex] &lt; arr[j]) {
				maxIndex = j;
			}
		}

		temp = arr[maxIndex];
		arr[maxIndex] = arr[arr.length - i - 1];
		arr[arr.length - i - 1] = temp;
	}


	System.out.println(&quot;\\n--select :&quot;);

	for (int i = 0; i &lt; arr.length; i++) {
		System.out.print(arr[i] + &quot; &quot;);
	}
}
</code></pre><h2 id="_3-插入排序法" tabindex="-1"><a class="header-anchor" href="#_3-插入排序法"><span>3.插入排序法</span></a></h2><p>插入排序法思想：<br> 将待排序的元素分为有序和无序两种，刚开始排序的时候假设只有第一个元素是有序的，其余 n-1 个元素都是无序的；<br> 排序开始的时，将无序部分的一个元素（a）与有序部分的最后一个元素（b）进行比较，如果 a&lt;b，则将 a 与 b 交换，再将 a 与下一个有序元素进行比较；否则，将 a 加到 b 后面，作为有序部分的最后一个元素。<br> 接着再从无序部分取出一个元素与有序部分的元素依次比较，直达所有元素都为有序元素。<br> 遍历 n-1 次<br> 代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insertSort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] arr){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instertValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (instertValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">				arr[j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">				arr[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> instertValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">			}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">				break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">			}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* 第二种表示形式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	for (int i = 1; i &lt; arr.length; i++) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		int instertVal = arr[i];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		int index = i - 1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		while (index &gt;= 0 &amp;&amp; instertVal &lt; arr[index]) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			arr[index + 1] = arr[index];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			index--;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		arr[index + 1] = instertVal;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">--insertSort :&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const k=s(l,[["render",e]]),p=JSON.parse('{"path":"/posts/1fd30f6e.html","title":"Java 中三种常用的排序方法","lang":"zh-CN","frontmatter":{"permalink":"/posts/1fd30f6e.html","title":"Java 中三种常用的排序方法","abbrlink":"1fd30f6e","date":"2016-12-20T15:25:05.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"今天重新学习类三种排序方法，按照排序速度依次是冒泡排序，选择排序和插入排序。 以下示例皆为从小到大的排序 1.冒泡排序 每一次比较都可能要交换元素。 冒泡排序的思想是： 每一轮开始的时候，将第一个元素（a）开始与其后的元素（b）依次进行比较，将较大的元素（设为 m）放到后面，并将 m 与其后的另外一个元素继续进行比较，直到最后一个没有排好序的元素。 在...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/1fd30f6e.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Java 中三种常用的排序方法"}],["meta",{"property":"og:description","content":"今天重新学习类三种排序方法，按照排序速度依次是冒泡排序，选择排序和插入排序。 以下示例皆为从小到大的排序 1.冒泡排序 每一次比较都可能要交换元素。 冒泡排序的思想是： 每一轮开始的时候，将第一个元素（a）开始与其后的元素（b）依次进行比较，将较大的元素（设为 m）放到后面，并将 m 与其后的另外一个元素继续进行比较，直到最后一个没有排好序的元素。 在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T16:00:22.000Z"}],["meta",{"property":"article:published_time","content":"2016-12-20T15:25:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T16:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 中三种常用的排序方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-12-20T15:25:05.000Z\\",\\"dateModified\\":\\"2024-05-31T16:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"git":{"createdTime":1653726847000,"updatedTime":1717171222000,"contributors":[{"name":"jixiaoyong","username":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":4,"url":"https://github.com/jixiaoyong"},{"name":"JI,XIAOYONG","username":"","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.43,"words":730},"filePathRelative":"_posts/Java中三种常用的排序方法.md","localizedDate":"2016年12月20日","excerpt":"<p>今天重新学习类三种排序方法，按照排序速度依次是冒泡排序，选择排序和插入排序。<br>\\n以下示例皆为从小到大的排序</p>\\n<h2>1.冒泡排序</h2>\\n<p>每一次比较都可能要交换元素。<br>\\n冒泡排序的思想是：<br>\\n每一轮开始的时候，将第一个元素（a）开始与其后的元素（b）依次进行比较，将较大的元素（设为 m）放到后面，并将 m 与其后的另外一个元素继续进行比较，直到最后一个没有排好序的元素。<br>\\n在接下来一轮的排序中，刚才以及之前选出来的、已经排好顺序的最大值不用参与排序。<br>\\n依次类推，总共遍历 n-1 轮，即可完成排序。<br>\\n具体代码如下：</p>\\n<pre><code> void bubble(int[] arr){\\n\\tint temp;\\n\\tfor (int i = 0; i &lt; arr.length - 1; i++) {\\n\\t\\tfor (int j = 0; j &lt; arr.length - i - 1; j++) {\\n\\t\\t\\tif (arr[j] &gt; arr[j + 1]) {\\n\\t\\t\\t\\ttemp = arr[j];\\n\\t\\t\\t\\tarr[j] = arr[j + 1];\\n\\t\\t\\t\\tarr[j + 1] = temp;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tSystem.out.println(\\"\\\\n--bubble :\\");\\n\\tfor (int i = 0; i &lt; arr.length; i++) {\\n\\t\\tSystem.out.print(arr[i] + \\" \\");\\n\\t}\\n}\\n</code></pre>","autoDesc":true}');export{k as comp,p as data};
