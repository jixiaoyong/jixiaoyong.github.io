import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as a,e as s}from"./app-e126c796.js";const n={},c=s(`<h1 id="复制-删除-移动" tabindex="-1"><a class="header-anchor" href="#复制-删除-移动" aria-hidden="true">#</a> 复制，删除，移动</h1><p><code>cp</code>拷贝，<code>rm</code>删除，<code>mv</code>移动。</p><p><code>-r</code>表示递归 <code>-f</code>强制，无提示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> fromFilePath toFilePath
<span class="token function">rm</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> fromFilePath toFilePath
<span class="token function">mv</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> fromFilePath toFilePath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="切换目录" tabindex="-1"><a class="header-anchor" href="#切换目录" aria-hidden="true">#</a> 切换目录</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> - 返回上次所在目录
<span class="token builtin class-name">cd</span> ~ 切换到当前用户home路径下
<span class="token builtin class-name">cd</span> <span class="token builtin class-name">.</span> 当前路径
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> 上层路径
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/linux 切换到同一级的linux目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="新建文件、文件夹" tabindex="-1"><a class="header-anchor" href="#新建文件、文件夹" aria-hidden="true">#</a> 新建文件、文件夹</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> dirName 创建文件夹
<span class="token function">touch</span> fileName 创建文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux文件和目录名字除了“/”都合法，但是尽量不要用正则表达式之类的符号，因为有可能会在进行正则匹配时造成误删等问题</p><p>假设当前目录有文件<code>f1,f2,f3</code>和<code>f[123]</code><br> 执行：<code>rm f[123]</code>本来是希望删除<code>f[123]</code>,但是由于正则匹配，会先删除<code>f1,f2,f3</code>这三个文件。</p><h1 id="查看文件信息" tabindex="-1"><a class="header-anchor" href="#查看文件信息" aria-hidden="true">#</a> 查看文件信息</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">file</span> fileName 查看文件格式信息
<span class="token function">cat</span> fileName 以文本格式查看文件全部内容
<span class="token function">less</span> fileName 以分页形式查看文件内容，Q键退出
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="常用目录" tabindex="-1"><a class="header-anchor" href="#常用目录" aria-hidden="true">#</a> 常用目录</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/home 当前用户主目录，root用户为/root
/bin、/usr/bin 常用的可执行文件，root用户为/sbin
/media、/mnt 用户硬件挂载点
/etc 系统的配置文件，所有用户可见，root用户可以更改
/boot 系统内核，开机必备文件
/dev 系统的所有设备文件，如硬盘、光驱等
/var和/srv 系统运行时的用户数据
/proc 内存中的状态信息
/lib、/usr/lib、/usr/local/lib 库文件
/temp 临时文件，所有用户可见
/usr 程序相关文件unix system resource
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="文件相关" tabindex="-1"><a class="header-anchor" href="#文件相关" aria-hidden="true">#</a> 文件相关</h1><h2 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls</h2><p><strong><code>ls</code></strong> 展示当前目录下文件信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ls [-alhd] l 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>l</code>展示目录下的文件列表，<code>a </code>展示所有文件（包括隐藏文件），<code> h</code> 展示带单位的文件大小， <code>d</code>展示当前目录本身信息</p><h2 id="chmod" tabindex="-1"><a class="header-anchor" href="#chmod" aria-hidden="true">#</a> chmod</h2><p><strong><code>chmod</code></strong> 更改权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> mode fileName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>mode</code>组成如下：<code>[范围] [操作] [权限]</code></p><p><code>范围</code>：<code>u</code>用户、<code>g</code>群组、<code>o</code>其他、<code>a</code>以上所有（ugo）</p><p><code>操作</code>：<code>+</code> 增加、<code>-</code> 减去、<code>=</code> 等于</p><p><code>权限</code>：<code>r</code> 读权限<code>4</code>、<code> w</code> 写权限<code>2</code>、 <code>x</code> 执行权限<code>1</code> 、无权限 <code>0</code></p><p><strong>权限验证</strong> ： root用户可以访问任何用户文件，不受权限限制；普通用户需要验证权限</p><p><em>要读取文件夹中的内容，也需要执行权限<code>x</code></em></p><h2 id="文件权限与umask" tabindex="-1"><a class="header-anchor" href="#文件权限与umask" aria-hidden="true">#</a> 文件权限与umask</h2><p>Linux创建新项目时默认的权限分别是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>文件夹 777
文件 666
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，经过umask（此处为0022）遮盖后，变成了755 ，644，这才是真正创建后的结果</p><p>可以通过<code>umask查看</code>umask的值，一般只去其<strong>后3位</strong>，遮盖的原则是从原先的权限中<strong>减去</strong>umask中的权限：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>原始权限  ： r w x      7
umask	： -  w x      3
结   果  ： r - -      4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看、管理当前用户信息" tabindex="-1"><a class="header-anchor" href="#查看、管理当前用户信息" aria-hidden="true">#</a> 查看、管理当前用户信息</h2><p><code>users</code> 和<code>whoami</code>输出当前用户名</p><p>增、删、改用户：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>useradd / userdel / usermod username
group群组管理也类似
groupadd / groupmod ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>userdel -r username</code>在删除用户时，也会删除用户对应的主目录<code>home</code></p><p><code>groups</code> 查看用户所在群组，其中第一个是主要群组，其余是次要群组。</p><p><em>主要群组</em> 在用户创建新的文件时，文件群组权限一项默认为该群组</p><p><code>who</code> 、<code>w</code>可以查看用户相关信息</p><p><code>id</code> 查看某人或者自己相关的<code>UID、GID</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>finger [-s] username
查看用户相关信息
-s 仅显示用户账号、全名、登录时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GID</code> 系统 &lt;500 ，用户 &gt;500</p><h2 id="改密码" tabindex="-1"><a class="header-anchor" href="#改密码" aria-hidden="true">#</a> 改密码</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>passwd username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="文件打包、压缩和解压缩" tabindex="-1"><a class="header-anchor" href="#文件打包、压缩和解压缩" aria-hidden="true">#</a> 文件打包、压缩和解压缩</h2><p><code>.gz</code> 压缩后格式，<code>.tar </code>打包后格式，<code>tar.gz</code>先打包后压缩的格式（常用）</p><h3 id="gzip" tabindex="-1"><a class="header-anchor" href="#gzip" aria-hidden="true">#</a> gzip</h3><p>gzip压缩会删除源文件,</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gzip [-cdtv#] filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>#</code> 压缩等级</p><p><code>v</code> 显示压缩前后压缩比</p><p><code>t</code> 校验是否是gzip压缩的文件</p><p><code>c</code> 压缩文件并输出到屏幕</p><p><code>d</code> 解压文件</p><p>使用:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gizp file 将file压缩成file.gz，会删除file
gzip -c file &gt; file.gz 压缩文件file并输出到file.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tar" tabindex="-1"><a class="header-anchor" href="#tar" aria-hidden="true">#</a> tar</h3><p>打包，在压缩文件夹时，一般为了效率都会先打包，在压缩，由此形成的格式一般是类似<code>*.tar.gz*</code>的后缀。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>打包
tar [-jcv] -f outFileName.tar inDirPath
解包
tar [-jxv] -f inFileName.tar -C outputPath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>c</code> 建立打包文档</p><p><code>x</code> 解包<code> -C</code> 输出目录</p><p><code>t</code> 查看打包文件的内容</p><p><code>j</code> / <code>z</code> 使用<code>bz2</code> / <code>gzip</code> 压缩、解压</p><p><code>v</code> 输出信息</p><p><code>f</code> 后面紧跟要操作的文件</p><h1 id="bash-shell" tabindex="-1"><a class="header-anchor" href="#bash-shell" aria-hidden="true">#</a> bash shell</h1><p>bash是用户和内容交互的桥梁 <code>用户 ↔ bash ↔ Unix内核</code></p><p><code>env</code> 查看环境变量</p><p><code>type</code> 查看类型</p><p><code>which</code> 查看指令的位置</p><p><code>clear</code> 、 <code>cls</code> 清屏</p><p><strong>bash shell 设置</strong></p><h2 id="自定义变量" tabindex="-1"><a class="header-anchor" href="#自定义变量" aria-hidden="true">#</a> 自定义变量</h2><p><code>key=value</code> 增加一个值为<code>value</code>的变量<code>key</code></p><p>其中，如果value有空格的话需要用引号包住：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>双引号 可以用$KEY 引用其他KEY的值
单引号 内容是纯文本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>echo $KEY​ </code>可以输出<code>KEY</code>的值</p><p><code>set</code> 查看所有变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set | grep HIST 查看shell命令历史
set | grep PSI 提示符前面的内容，username-MBP:dirpath username$ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="别名配置" tabindex="-1"><a class="header-anchor" href="#别名配置" aria-hidden="true">#</a> 别名配置</h2><p><code>alias</code> 查看所有别名</p><p><code>alias newCmd=oldCmd</code>使用<code>newCmd</code>表示<code>oldCmd</code></p><p><code>unalias newCmd</code> 删除别名</p><p>如:<code>alias cls=clear</code>,执行<code>cls</code>就等于执行<code>clear</code></p><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p><code>export KEY=VALUE</code> 将值为<code>VALUE</code>的<code>KEY</code>添加到环境变量（本次shell有效）</p><p>此外还可以写到一些文件中，在开机、登录、注销登录时调用执行——自动执行脚本**<code>shell startup scripts</code>**</p><h2 id="shell-startup-scripts" tabindex="-1"><a class="header-anchor" href="#shell-startup-scripts" aria-hidden="true">#</a> shell startup scripts</h2><p>开机时执行：</p><ul><li><p><code>/etc/profile</code></p></li><li><p><code>/ect/profile.d/*.sh</code></p></li><li><p><code>~/.bash_profile , ~/.bash_login , ~/.profile</code>这三个只要其中一个成功执行了，后面的就不会执行，<code>~/.bash_profile</code>会执行<code>~/.bashrc</code></p></li><li><p><code>/etc/.bashrc</code></p></li></ul><p>未登录时会执行：</p><ul><li><code>~/.bashrc</code></li><li><code>/etc/bashrc</code></li><li><code>/etc/profile.d/*.sh</code></li></ul><p>注销时执行<code>~/bash_logout</code></p><p><strong>在修改了以上文件后，可以使用<code>source path_to_file</code>或者重新登录使其立即生效</strong></p><h1 id="标准输入输出等" tabindex="-1"><a class="header-anchor" href="#标准输入输出等" aria-hidden="true">#</a> 标准输入输出等</h1><table><thead><tr><th>代码编号</th><th>名称</th><th>代码</th><th>作用对象</th></tr></thead><tbody><tr><td>0</td><td>标准输入</td><td>stdin</td><td>键盘等</td></tr><tr><td>1</td><td>标准输出</td><td>stdout</td><td>屏幕等</td></tr><tr><td>2</td><td>标准错误</td><td>stderr</td><td>屏幕等</td></tr></tbody></table><p>定向</p><ul><li><code>&lt;</code>和<code>&lt;&lt;</code> 输入和 追加输入</li><li><code>&gt;</code> 和<code>&gt;&gt;</code> 输出 和追加输出</li></ul><p>使用：<code>ls -al | &gt;&gt; result.txt</code>将<code>ls</code>的内容追加输出到<code>result.txt</code>文件中。</p><p><code>|</code>叫做管道，可以将前者的<strong>标准输出</strong>当做后者的输入。</p><p><code>cmd0 &amp;&amp; cmd1</code> 前者执行成功才会执行后者；</p><p><code>cmd0 || cmd1</code> 前者执行失败才会执行后者。</p><h1 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h1><p>查询内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token punctuation">[</span>-cinv<span class="token punctuation">]</span> <span class="token string">&#39;key&#39;</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>c</code> 计算次数</p><p><code>i</code> 忽略大小写</p><p><code>n</code> 行号</p><p><code>v</code> 显示没有该字符的行号</p><p><code>&#39;key&#39; </code>可以是正则表达式</p><p><code>--color=auto</code> 对查找到的文本显示颜色</p><h1 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h1><p>排序，默认以第一列排序</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sort</span> <span class="token punctuation">[</span>-fbknrtu<span class="token punctuation">]</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>f</code> 忽略大小写</p><p><code>b</code>忽略最前面的空格（要是排序不生效时可以试一下，推荐）</p><p><code>k</code> 以第几列为标准排序，默认第一列</p><p><code>n</code> 以数组排序</p><p><code>r</code> 逆序</p><p><code>t</code> 待排序的文件的分隔符，默认是tab</p><p><code>M</code> 以英文月份排序</p><h1 id="wc" tabindex="-1"><a class="header-anchor" href="#wc" aria-hidden="true">#</a> wc</h1><p>统计字符数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wc</span> <span class="token punctuation">[</span>lwm<span class="token punctuation">]</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>l</code> 行</p><p><code>w</code> 词</p><p><code>m</code> 字符</p>`,130),i=[c];function o(l,t){return d(),a("div",null,i)}const u=e(n,[["render",o],["__file","d0edc1ed.html.vue"]]);export{u as default};
