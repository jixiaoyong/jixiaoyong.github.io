import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-749dd491.js";const i={},u=n("strong",null,"Image",-1),r=n("strong",null,"ImageCache",-1),k={href:"https://github.com/Baseflow/flutter_cached_network_image",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/fluttercandies/extended_image",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alibaba/power_image",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"本文对 Alibaba 中的 power_image 加载过程、原理做一简单分析。",-1),g=n("h2",{id:"power-image",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#power-image","aria-hidden":"true"},"#"),s(" power_image")],-1),b=n("p",null,[n("em",null,"power_image"),s("是阿里巴巴出品的 Flutter 混合开发图片加载库，通过"),n("em",null,"texture"),s("和"),n("em",null,"ffi"),s("技术借助原生图片加载库加载图片、Flutter 端展示图片。")],-1),w={href:"https://jixiaoyong.github.io/blog/posts/1912667a/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://jixiaoyong.github.io/blog/posts/23ac516a/",target:"_blank",rel:"noopener noreferrer"},f=n("em",null,"extende_image",-1),h=n("em",null,"flutter_cached_nework_image",-1),P={href:"https://mp.weixin.qq.com/s/yUm4UFggYLgDbj4_JCjEdg#at",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>而<em>power_image</em>能够较好的解决上述问题，其整体架构如下：</p><p>类结构图：<br><img src="https://jixiaoyong.github.io/images/flutter/power_image_class_structure.png" alt="类结构图" loading="lazy"></p><p>架构图：<br><img src="https://jixiaoyong.github.io/images/flutter/power_image_structure.png" alt="架构图" loading="lazy"></p><p><em>power_image</em>可以大体划分为<strong>Flutter 端图片展示</strong>和<strong>Native 图片加载</strong>两部分，下面分别分析。</p><h2 id="flutter-端图片展示" tabindex="-1"><a class="header-anchor" href="#flutter-端图片展示" aria-hidden="true">#</a> Flutter 端图片展示</h2><h3 id="powerimage" tabindex="-1"><a class="header-anchor" href="#powerimage" aria-hidden="true">#</a> PowerImage</h3><p><code>PowerImage</code>继承自<em>StatefulWidget</em>，提供多种创建方式：既可以使用预设的<code>PowerImage.network</code>、<code>PowerImage.file</code>等构造函数从网络、文件等获取图片；也可以使用<code>PowerImage.type</code>、<code>PowerImage.options</code>等自定义通道获取图片并展示；或者使用<code>PowerImage()</code>完全自定义。</p><p>除了<code>PowerImage()</code>构造函数之外，上述其余构造函数都根据传入的<code>String? renderingType</code>指定了 PowerImage 特定的<code>PowerImageProvider image</code>属性（是<em>ffi</em>还是<em>texture</em>）用于获取图片。</p><h3 id="powerimagestate" tabindex="-1"><a class="header-anchor" href="#powerimagestate" aria-hidden="true">#</a> PowerImageState</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerImageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerImage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">ImageErrorWidgetBuilder</span><span class="token operator">?</span> errorWidgetBuilder <span class="token operator">=</span> widget<span class="token punctuation">.</span>errorBuilder<span class="token punctuation">;</span>
    errorWidgetBuilder <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>image<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> <span class="token class-name">PowerTextureImageProvider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">PowerTextureImage</span><span class="token punctuation">(</span>
        provider<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>image <span class="token operator">as</span> <span class="token class-name">PowerTextureImageProvider</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>image<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> <span class="token class-name">PowerExternalImageProvider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">PowerExternalImage</span><span class="token punctuation">(</span>
        provider<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>image <span class="token operator">as</span> <span class="token class-name">PowerExternalImageProvider</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token class-name">ImageExt</span><span class="token punctuation">(</span>
      image<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>image<span class="token punctuation">,</span>
      imageBuilder<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>imageBuilder<span class="token punctuation">,</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 PowerImageState 的<code>build()</code>方法中，根据不同的<code>PowerImageProvider image</code>类型会返回不同的 Widget：</p><ul><li><code>image</code>是 <strong><em>PowerTextureImageProvider</em></strong> 类型：采用 <em>texture</em> 模式展示图片，返回**<em>PowerTextureImage</em><strong>，最终会返回经过封装的</strong><em>Texture</em>**对象。</li><li><code>image</code>是**<em>PowerExternalImageProvider</em><strong>类型：采用 <em>ffi</em> 模式展示图片，返回</strong><em>PowerExternalImage</em><strong>，最终返回的是</strong><em>RawImage</em>**对象，和使用 Flutter Image 展示图片的流程一致。</li><li>其他类型，按照自定义的规则展示。</li></ul><p>让我们来分别看一下**<em>PowerTextureImage</em><strong>和</strong><em>PowerExternalImage</em>**的实现：</p><h3 id="powertextureimage" tabindex="-1"><a class="header-anchor" href="#powertextureimage" aria-hidden="true">#</a> PowerTextureImage</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerTextureImage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">PowerTextureImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">PowerTextureImageProvider</span> provider<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">PowerTextureState</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">PowerTextureState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PowerTextureState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerTextureImage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ImageExt</span><span class="token punctuation">(</span>
      <span class="token comment">// 这里的 provider 实际上创建的是一个虚假的 ui.Image? dummy</span>
      image<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>provider<span class="token punctuation">,</span>
      frameBuilder<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>frameBuilder<span class="token punctuation">,</span>
      errorBuilder<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>errorBuilder<span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      fit<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>fit<span class="token punctuation">,</span>
      alignment<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>alignment<span class="token punctuation">,</span>
      <span class="token comment">// 注意，这里会创建一个封装的 Texture，真正展示图片内容</span>
      imageBuilder<span class="token punctuation">:</span> buildImage<span class="token punctuation">,</span>
      semanticLabel<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>semanticLabel<span class="token punctuation">,</span>
      excludeFromSemantics<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>excludeFromSemantics<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Widget</span> <span class="token function">buildImage</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ImageInfo</span><span class="token operator">?</span> imageInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>imageInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> imageInfo <span class="token operator">is!</span> <span class="token class-name">PowerTextureImageInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
        width<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
        height<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">PowerTextureImageInfo</span> textureImageInfo <span class="token operator">=</span> imageInfo<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ClipRect</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> <span class="token class-name">FittedBox</span><span class="token punctuation">(</span>
          fit<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>fit <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>contain<span class="token punctuation">,</span>
          alignment<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>alignment<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
            width<span class="token punctuation">:</span> textureImageInfo<span class="token punctuation">.</span>width<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> widget<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
            height<span class="token punctuation">:</span> textureImageInfo<span class="token punctuation">.</span>height<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> widget<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Texture</span><span class="token punctuation">(</span>
              <span class="token comment">// 注意，这里的 textureId 是从 provider 创建的 ImageInfo 中获取的</span>
              textureId<span class="token punctuation">:</span> textureImageInfo<span class="token punctuation">.</span>textureId<span class="token operator">!</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        width<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
        height<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="powerexternalimage" tabindex="-1"><a class="header-anchor" href="#powerexternalimage" aria-hidden="true">#</a> PowerExternalImage</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerExternalImage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">PowerExternalImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">PowerExternalImageProvider</span> provider<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">PowerExteralState</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">PowerExteralState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PowerExteralState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerExternalImage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ImageExt</span><span class="token punctuation">(</span>
      frameBuilder<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>frameBuilder<span class="token punctuation">,</span>
      errorBuilder<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>errorBuilder<span class="token punctuation">,</span>
      <span class="token comment">// provider 会根据 Native 数据创建含有对应的 ui.Image 的</span>
      <span class="token comment">// ImageInfo，展示对应图片</span>
      image<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>provider<span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      fit<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>fit<span class="token punctuation">,</span>
      alignment<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>alignment<span class="token punctuation">,</span>
      semanticLabel<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>semanticLabel<span class="token punctuation">,</span>
      excludeFromSemantics<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>excludeFromSemantics<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对比**<em>PowerTextureImage</em><strong>和</strong><em>PowerExternalImage</em>**的源码可以发现，二者最终还是创建了 ImageExt 对象，只不过 PowerTextureImage 中 ImageExt.imageBuilder 返回了 Texture，而 PowerExternalImage 中 ImageExt.imageBuilder 为 null。</p><p>再根据下面的<code>_ImageExtState.build</code>源码可以确定，当使用 PowerTextureImage 时 PowerImage 创建的是封装了的 <strong>Texture</strong>，而 PowerExternalImage 时则会使用 PowerExternalImageProvider 创建的 ImageInfo 创建 <strong>RawImage</strong>，这实际上与 Flutter 原有的 Image 组件一致。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// _ImageExtState.build</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token class-name">Widget</span> result<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>imageBuilder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> widget<span class="token punctuation">.</span>imageBuilder<span class="token operator">!</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> _imageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token class-name">RawImage</span><span class="token punctuation">(</span>
        image<span class="token punctuation">:</span> _imageInfo<span class="token operator">?</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的分析，可以知道，<strong><em>PowerImage</em><strong>使用从</strong><em>PowerImageProvider</em></strong> 获取的 <strong><em>ImageInfo</em></strong> 来展示图片，采用**<em>texture</em>**方案时，使用 ImageInfo 中的 textureId 并返回 Texture 对象展示图片；而使用 <strong><em>ffi</em></strong> 方案时，会使用 ImageInfo 中的<code>ui.Image image</code>对象传入 RawIamge 展示图片（这部分与 Flutter Image 组件逻辑一致）。</p><br><h3 id="powerimageprovider" tabindex="-1"><a class="header-anchor" href="#powerimageprovider" aria-hidden="true">#</a> PowerImageProvider</h3><p>PowerImageProvider 继承自<em>ImageProviderExt</em> -&gt; <em>ImageProvider</em>，是<em>power_image</em>的关键类之一，主要实现通过 Flutter/Native 跨端通信从 Native 获取/释放图片资源等，创建供 ImageExt 使用的 ImageInfo。</p><p>相对于 Flutter 官方的 ImageProvider，除了修改部分类为 power_image 对应的类之外，PowerImageProvider 主要有以下几点改变：</p><ul><li>工厂方法<code>PowerImageProvider.options</code>生产 PowerImageProvider：根据传入的 PowerImageRequestOptions 中<code>PowerImageRequestOptions.renderingType</code>的值，分别创建对应的**<em>PowerExternalImageProvider</em><strong>或者</strong><em>PowerTextureImageProvider</em>**。</li><li>重写<code>_loadAsync</code>方法，调用 Native 图片库加载图片，并根据返回值调用子类 <code>createImageInfo</code> 方法创建 PowerImageInfo。</li></ul><h4 id="loadasync" tabindex="-1"><a class="header-anchor" href="#loadasync" aria-hidden="true">#</a> _loadAsync</h4><p>通过重写<code>_loadAsync</code>方法，PowerImageProvider 实现了不同的子类分别创建 PowerImageInfo 展示图片、统一让 ImageCache 管理图片。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span>
      <span class="token class-name">PowerImageProvider</span> key<span class="token punctuation">,</span> <span class="token class-name">DecoderCallback</span><span class="token operator">?</span> decode<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 跨端通信获取图片资源，后面再详细分析</span>
      <span class="token class-name">PowerImageCompleter</span> powerImageCompleter <span class="token operator">=</span>
          <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">await</span> powerImageCompleter<span class="token punctuation">.</span>completer<span class="token operator">!</span><span class="token punctuation">.</span>future<span class="token punctuation">;</span>
      bool<span class="token operator">?</span> success <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;success&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token comment">// remove multiFrame image cache On Last Listener Removed</span>
      bool<span class="token operator">?</span> isMultiFrame <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;_multiFrame&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isMultiFrame <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _completer<span class="token operator">!</span>
          <span class="token punctuation">.</span><span class="token function">addOnLastListenerRemovedCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span>imageCache<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">evict</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      _completer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The network may be only temporarily unavailable, or the file will be</span>
        <span class="token comment">// added on the server later. Avoid having future calls to resolve</span>
        <span class="token comment">// fail to check the network again.</span>
        <span class="token keyword">final</span> <span class="token class-name">PowerImageLoadException</span> exception <span class="token operator">=</span>
            <span class="token class-name">PowerImageLoadException</span><span class="token punctuation">(</span>nativeResult<span class="token punctuation">:</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PowerImageMonitor</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anErrorOccurred</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 创建 ImageInfo</span>
      <span class="token keyword">return</span> <span class="token function">createImageInfo</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Depending on where the exception was thrown, the image cache may not</span>
      <span class="token comment">// have had a chance to track the key in the cache at all.</span>
      <span class="token comment">// Schedule a microtask to give the cache a chance to add the key.</span>
      <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span>imageCache<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">evict</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// chunkEvents.close();</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的分析中，我们得知，<em>texture</em>和<em>ffi</em>方案分别使用 ImageProvider 提供的 PowerImageInfo 中的<code>int? textureId</code>和<code>ui.Image image</code>展示图片，让我们分别看一下他们是如何获取的：</p><h4 id="powertextureimageprovider" tabindex="-1"><a class="header-anchor" href="#powertextureimageprovider" aria-hidden="true">#</a> PowerTextureImageProvider</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerTextureImageProvider</span> <span class="token keyword">extends</span> <span class="token class-name">PowerImageProvider</span> <span class="token punctuation">{</span>
  <span class="token class-name">PowerTextureImageProvider</span><span class="token punctuation">(</span><span class="token class-name">PowerImageRequestOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">createImageInfo</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    int<span class="token operator">?</span> textureId <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;textureId&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int<span class="token operator">?</span> width <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;width&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int<span class="token operator">?</span> height <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;height&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">PowerTextureImageInfo</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
        textureId<span class="token punctuation">:</span> textureId<span class="token punctuation">,</span> width<span class="token punctuation">:</span> width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">releaseImageRequest</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PowerTextureImageInfo</span> <span class="token keyword">extends</span> <span class="token class-name">PowerImageInfo</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span><span class="token operator">?</span> dummy<span class="token punctuation">;</span>
	<span class="token keyword">final</span> int<span class="token operator">?</span> textureId<span class="token punctuation">;</span>

	<span class="token comment">// 此方法使用一个通用的 ui.Image? dummy 创建 PowerTextureImageInfo</span>
	<span class="token comment">// 以便让 ImageCache 能够管理 texture 创建的图片</span>
	<span class="token keyword">static</span> <span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerTextureImageInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>int<span class="token operator">?</span> textureId<span class="token punctuation">,</span> int<span class="token operator">?</span> width<span class="token punctuation">,</span> int<span class="token operator">?</span> height<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dummy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">PowerTextureImageInfo</span><span class="token punctuation">(</span>
          textureId<span class="token punctuation">:</span> textureId<span class="token punctuation">,</span>
          width<span class="token punctuation">:</span> width<span class="token punctuation">,</span>
          height<span class="token punctuation">:</span> height<span class="token punctuation">,</span>
          image<span class="token punctuation">:</span> dummy<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    dummy <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_createImage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">PowerTextureImageInfo</span><span class="token punctuation">(</span>
        textureId<span class="token punctuation">:</span> textureId<span class="token punctuation">,</span>
        width<span class="token punctuation">:</span> width<span class="token punctuation">,</span>
        height<span class="token punctuation">:</span> height<span class="token punctuation">,</span>
        image<span class="token punctuation">:</span> dummy<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span><span class="token punctuation">&gt;</span></span> <span class="token function">_createImage</span><span class="token punctuation">(</span>int width<span class="token punctuation">,</span> int height<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span><span class="token punctuation">&gt;</span></span> completer <span class="token operator">=</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ui<span class="token punctuation">.</span><span class="token function">decodeImageFromPixels</span><span class="token punctuation">(</span><span class="token comment">// 使用指定的 Uint8List 创建 ui.Image</span>
    <span class="token class-name">Uint8List</span><span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span>width <span class="token operator">*</span> height <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> growable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    width<span class="token punctuation">,</span>
    height<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>PixelFormat</span><span class="token punctuation">.</span>rgba8888<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      completer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="powerexternalimageprovider" tabindex="-1"><a class="header-anchor" href="#powerexternalimageprovider" aria-hidden="true">#</a> PowerExternalImageProvider</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerExternalImageProvider</span> <span class="token keyword">extends</span> <span class="token class-name">PowerImageProvider</span> <span class="token punctuation">{</span>
  <span class="token class-name">PowerExternalImageProvider</span><span class="token punctuation">(</span><span class="token class-name">PowerImageRequestOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">createImageInfo</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span> completer <span class="token operator">=</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    int handle <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;handle&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int length <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;length&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int width <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;width&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int height <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;height&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    int<span class="token operator">?</span> rowBytes <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;rowBytes&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>PixelFormat</span> pixelFormat <span class="token operator">=</span>
        <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>PixelFormat</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;flutterPixelFormat&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取图片在内存中的指针</span>
    <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8</span><span class="token punctuation">&gt;</span></span> pointer <span class="token operator">=</span> <span class="token class-name">Pointer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">fromAddress</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取对应内存中的数据</span>
    <span class="token class-name">Uint8List</span> pixels <span class="token operator">=</span> pointer<span class="token punctuation">.</span><span class="token function">asTypedList</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据内存中的数据创建 ui.Image，这里会发生内存拷贝，大图片会出现内存峰值偏高</span>
    ui<span class="token punctuation">.</span><span class="token function">decodeImageFromPixels</span><span class="token punctuation">(</span>pixels<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> pixelFormat<span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Image</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ImageInfo</span> imageInfo <span class="token operator">=</span> <span class="token class-name">PowerImageInfo</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>
      completer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>imageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//释放 platform_image</span>
      <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">releaseImageRequest</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> rowBytes<span class="token punctuation">:</span> rowBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码可以看到：</p><ul><li><em>texture</em> 方案采用的 PowerTextureImageProvider 创建的 ImageInfo 对应的 <code>ui.Image image</code> 一个共享的占位符，并不能真正真正绘制内容，实际上图片信息在对应的<code>PowerTextureImageInfo.textureId</code>中；</li><li><em>ffi</em> 方案创建的 ImageInfo 则根据 native 内存中的图片数据创建了对应的 ui.Image，与 Flutter 默认的 ImageProvider 提供的 ImageInfo 一样可以被 RawImage 正常使用。</li></ul>`,36),x=n("em",null,"texture",-1),q=n("em",null,"ffi",-1),_=n("em",null,"ffi",-1),R={href:"https://jixiaoyong.github.io/blog/posts/1912667a.html",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"内存爆炸",-1),E=n("strong",null,"图片加载过程中的内存由 Native 端图片加载库管理",-1),C=t(`<p>到目前为止，我们分析了 PowerImage 根据 PowerImageProvider 获取的 ImageInfo 分别采用 ffi 和 texture 两种方案展示图片的过程。</p><br><p>接下来分析一下之前提到的 <code>PowerImageProvider._loadAsync</code> 方法中使用 PowerImageLoader 获取图片的过程。整个过程可以分为 <strong>flutter 端发起请求/处理回调</strong>、<strong>native 端接收请求/返回结果</strong>两部分，在这过程中 Flutter 和 Native 使用 MethodChannel（发送获取释放图片指令）和 EventChannel（接收图片成功加载的事件）进行通信。</p><h2 id="flutter-native-通信" tabindex="-1"><a class="header-anchor" href="#flutter-native-通信" aria-hidden="true">#</a> Flutter/Native 通信</h2><p>在上面分析<code>PowerImageProvider._loadAsync</code>方法时，我们注意到其中使用了**<em>PowerImageLoader</em>**获取图片信息 PowerImageCompleter：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// PowerImageProvider._loadAsync 省略部分代码</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span>
    <span class="token class-name">PowerImageProvider</span> key<span class="token punctuation">,</span> <span class="token class-name">DecoderCallback</span><span class="token operator">?</span> decode<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">PowerImageCompleter</span> powerImageCompleter <span class="token operator">=</span>
          <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">await</span> powerImageCompleter<span class="token punctuation">.</span>completer<span class="token operator">!</span><span class="token punctuation">.</span>future<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">createImageInfo</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是使用 PowerImageLoader 的单例加载图片，看一下具体的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerImageLoader</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存发起的图片请求</span>
    <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">PowerImageCompleter</span><span class="token punctuation">&gt;</span></span> completers <span class="token operator">=</span>
      <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">PowerImageCompleter</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">PowerImageChannel</span> channel <span class="token operator">=</span> <span class="token class-name">PowerImageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">PowerImageLoader</span> instance <span class="token operator">=</span> <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span>impl <span class="token operator">=</span> <span class="token class-name">PowerImagePlatformChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始化 PowerImageChannel 等，需要在加载图片之前（比如 runApp 之前执行）</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token class-name">PowerImageSetupOptions</span><span class="token operator">?</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _globalRenderType <span class="token operator">=</span> options<span class="token operator">?</span><span class="token punctuation">.</span>globalRenderType <span class="token operator">?</span><span class="token operator">?</span> defaultGlobalRenderType<span class="token punctuation">;</span>
        <span class="token class-name">PowerImageMonitor</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>errorCallback <span class="token operator">=</span> options<span class="token operator">?</span><span class="token punctuation">.</span>errorCallback<span class="token punctuation">;</span>
        <span class="token class-name">PowerImageMonitor</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>errorCallbackSamplingRate <span class="token operator">=</span> options<span class="token operator">?</span><span class="token punctuation">.</span>errorCallbackSamplingRate<span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    <span class="token class-name">PowerImageCompleter</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token class-name">PowerImageRequestOptions</span> options<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PowerImageRequest</span> request <span class="token operator">=</span> <span class="token class-name">PowerImageRequest</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 PowerImageRequest</span>
        <span class="token comment">// 发起图片请求</span>
        channel<span class="token punctuation">.</span><span class="token function">startImageRequests</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerImageRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>request<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用 completers 记录下刚刚发起的请求</span>
        <span class="token class-name">PowerImageCompleter</span> completer <span class="token operator">=</span> <span class="token class-name">PowerImageCompleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        completer<span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>
        completer<span class="token punctuation">.</span>completer <span class="token operator">=</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        completers<span class="token punctuation">[</span>request<span class="token punctuation">.</span><span class="token function">uniqueKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> completer<span class="token punctuation">;</span>
        <span class="token keyword">return</span> completer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 当上面 loadImage 发起的图片加载完成之后，会调用此方法，从 completers 中取回对应的请求，调用完成</span>
    <span class="token keyword">void</span> <span class="token function">onImageComplete</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token operator">?</span> uniqueKey <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;uniqueKey&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">PowerImageCompleter</span><span class="token operator">?</span> completer <span class="token operator">=</span> completers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>uniqueKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//todo null case</span>
        completer<span class="token operator">?</span><span class="token punctuation">.</span>completer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先创建了 PowerImageRequest 对象：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerImageRequest</span> <span class="token punctuation">{</span>
  <span class="token class-name">PowerImageRequest</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">PowerImageRequestOptions</span> options<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> imageWidth <span class="token operator">=</span> options<span class="token punctuation">.</span>imageWidth<span class="token punctuation">,</span>
        imageHeight <span class="token operator">=</span> options<span class="token punctuation">.</span>imageHeight<span class="token punctuation">,</span>
        imageType <span class="token operator">=</span> options<span class="token punctuation">.</span>imageType<span class="token punctuation">,</span>
        renderingType <span class="token operator">=</span> options<span class="token punctuation">.</span>renderingType<span class="token punctuation">,</span>
        src <span class="token operator">=</span> options<span class="token punctuation">.</span>src<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>imageType</code>表示获取图片的方式（比如<code>network</code>，<code>nativeAsset</code>，<code>file</code>，<code>asset</code>等）；</li><li><code>renderingType</code>表示图片渲染方式，比如<code>external</code>（即 ffi 方案）、<code>texture</code>。</li></ul><p>然后通过<code>PowerImageChannel</code>发送请求（实际的执行的类是<code>PowerImagePlatformChannel</code>）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PowerImagePlatformChannel</span> <span class="token keyword">extends</span> <span class="token class-name">PowerImageChannelImpl</span> <span class="token punctuation">{</span>

  <span class="token class-name">StreamSubscription</span><span class="token operator">?</span> _subscription<span class="token punctuation">;</span>

  <span class="token class-name">PowerImagePlatformChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    eventHandlers<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;onReceiveImageEvent&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将 onReceiveImageEvent 放到 eventHandlers 中，</span>
        <span class="token comment">// 上述 PowerImageLoader 发起的请求完成后会执行下述代码</span>
        <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onImageComplete</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听回调方法，监听 Native 端发送的图片加载结束事件</span>
    <span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">StreamSubscription</span><span class="token operator">?</span> <span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _subscription <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> eventChannel<span class="token punctuation">.</span><span class="token function">receiveBroadcastStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>onEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _subscription<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">EventHandler</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventHandlers <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">EventHandler</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 处理 Native 端发送的事件</span>
  <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>val <span class="token operator">is</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> event <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token operator">?</span> eventName <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;eventName&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">EventHandler</span><span class="token operator">?</span> eventHandler <span class="token operator">=</span> eventHandlers<span class="token punctuation">[</span>eventName<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">eventHandler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">//TODO 发来了不认识的事件，需要处理一下</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">registerEventHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventName<span class="token punctuation">,</span> <span class="token class-name">EventHandler</span> eventHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>eventName<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    eventHandlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> eventHandler<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">unregisterEventHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    eventHandlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@visibleForTesting</span>
  <span class="token keyword">final</span> <span class="token class-name">MethodChannel</span> methodChannel <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">MethodChannel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;power_image/method&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@visibleForTesting</span>
  <span class="token class-name">EventChannel</span> eventChannel <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">EventChannel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;power_image/event&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 主动发送请求到 Native 端</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">startImageRequests</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerImageRequest</span><span class="token punctuation">&gt;</span></span> requests<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> methodChannel<span class="token punctuation">.</span><span class="token function">invokeListMethod</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&#39;startImageRequests&#39;</span></span><span class="token punctuation">,</span> <span class="token function">encodeRequests</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">releaseImageRequests</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PowerImageRequest</span><span class="token punctuation">&gt;</span></span> requests<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> methodChannel<span class="token punctuation">.</span><span class="token function">invokeListMethod</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&#39;releaseImageRequests&#39;</span></span><span class="token punctuation">,</span> <span class="token function">encodeRequests</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结一下：</p><ul><li>使用<code>PowerImageLoader.setup</code>注册 MethodChannel 和 EventChannel</li><li>使用<code>PowerImageLoader.loadImage</code>向 Native 发起请求加载图片，将请求保存到<code>PowerImageLoader.completers</code>中并返回给调用者</li><li>当 Native 端处理完请求之后会回调 PowerImagePlatformChannel 中注册的 EventChannel，然后会执行<code>PowerImageLoader.instance.onImageComplete(event)</code>方法，使用返回的图片信息，从<code>PowerImageLoader.completers</code>找出并完成之前的请求</li></ul><br><p>以上分析为 Flutter 端向 Native 端发起请求的过程，下面以 Android 端为例分析一下 Native 端的处理过程：</p><p>首先是在 PowerImagePlugin 中向 Flutter 引擎注册对应的方法。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> PowerImagePlugin implements FlutterPlugin<span class="token punctuation">,</span> MethodCallHandler <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Override</span>
    <span class="token keyword">public</span> void <span class="token function">onAttachedToEngine</span><span class="token punctuation">(</span>FlutterPluginBinding flutterPluginBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sContext <span class="token operator">=</span> flutterPluginBinding<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 注册与 Flutter 端对应的方法</span>
        methodChannel <span class="token operator">=</span> new <span class="token function">MethodChannel</span><span class="token punctuation">(</span>
                flutterPluginBinding<span class="token punctuation">.</span><span class="token function">getBinaryMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;power_image/method&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodChannel<span class="token punctuation">.</span><span class="token function">setMethodCallHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventChannel <span class="token operator">=</span> new <span class="token function">EventChannel</span><span class="token punctuation">(</span>
                flutterPluginBinding<span class="token punctuation">.</span><span class="token function">getBinaryMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;power_image/event&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventChannel<span class="token punctuation">.</span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span>PowerImageEventSink<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PowerImageRequestManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">configWithTextureRegistry</span><span class="token punctuation">(</span>flutterPluginBinding<span class="token punctuation">.</span><span class="token function">getTextureRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PowerImageDispatcher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Flutter 端向 Native 发送消息时，Flutter 引擎会调用<code>PowerImagePlugin.onMethodCall</code>方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token comment">// PowerImagePlugin.onMethodCall</span>
    <span class="token annotation builtin">@Override</span>
    <span class="token keyword">public</span> void <span class="token function">onMethodCall</span><span class="token punctuation">(</span>MethodCall call<span class="token punctuation">,</span> Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;startImageRequests&quot;</span></span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span>arguments instanceof List<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                List arguments <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span> call<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>
                <span class="token comment">// 将请求结果返回，只是根据传参创建请求并保存，</span>
                <span class="token comment">// 将请求信息返回给 Flutter 端</span>
                List results <span class="token operator">=</span> PowerImageRequestManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">configRequestsWithArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 开始真正执行请求，找到上一步创建的请求 PowerImageBaseRequest</span>
                <span class="token comment">// 并执行 PowerImageBaseRequest.startLoading</span>
                PowerImageRequestManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startLoadingWithArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> new <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;startImageRequests require List arguments&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;releaseImageRequests&quot;</span></span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span>arguments instanceof List<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                List arguments <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span> call<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>
                <span class="token comment">// 立即执行释放请求</span>
                List results <span class="token operator">=</span> PowerImageRequestManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">releaseRequestsWithArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> new <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;stopImageRequests require List arguments&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">notImplemented</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于不同的调用请求：</p><ul><li><code>startImageRequests</code>：先根据请求参数创建好请求并返回给 Flutter 调用方；然后通过 PowerImageRequestManager 真正执行请求（最终会通过<code>PowerImagePlugin.PowerImageEventSink.getInstance().sendImageStateEvent</code>向 Flutter 通知结果）。</li><li><code>releaseImageRequests</code>：立即从<code>PowerImageRequestManager.requests</code>中去除对应的请求并尝试终止任务，并向 Flutter 返回结果。</li></ul><p>下面着重分析一下执行图片请求的逻辑（<code>startImageRequests</code>的情况）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>public <span class="token keyword">class</span> <span class="token class-name">PowerImageRequestManager</span> <span class="token punctuation">{</span>
  private <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">PowerImageBaseRequest</span><span class="token punctuation">&gt;</span></span> requests<span class="token punctuation">;</span>
  private <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TextureRegistry</span><span class="token punctuation">&gt;</span></span> textureRegistryWrf<span class="token punctuation">;</span>

  public <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">configRequestsWithArguments</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> results<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> renderType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arguments<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;renderingType&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PowerImageBaseRequest</span> request<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>RENDER_TYPE_EXTERNAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>renderType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ffi 方案</span>
                request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PowerImageExternalRequest</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>RENDER_TYPE_TEXTURE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>renderType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// texture 方案</span>
                request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PowerImageTextureRequest</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> textureRegistryWrf<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 保存创建的请求</span>
            requests<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestId<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            boolean success <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">configTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestInfo <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;success&quot;</span></span><span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>
            results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>requestInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public <span class="token keyword">void</span> <span class="token function">startLoadingWithArguments</span><span class="token punctuation">(</span><span class="token class-name">List</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arguments<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span> arg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> arguments<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> requestId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arg<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;uniqueKey&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 找出在 configRequestsWithArguments 方法中创建的请求并执行</span>
            <span class="token class-name">PowerImageBaseRequest</span> request <span class="token operator">=</span> requests<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">startLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见对于<em>ffi</em>和<em>texture</em>方案，分别涉及到**<em>PowerImageExternalRequest</em><strong>和</strong><em>PowerImageTextureRequest</em><strong>两个类。他们都继承自</strong><em>PowerImageBaseRequest</em>**类，其<code>startLoading</code>方法会调用<code>performLoadImage</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>public <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PowerImageBaseRequest</span> <span class="token punctuation">{</span>
    private <span class="token keyword">void</span> <span class="token function">performLoadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取图片</span>
        <span class="token class-name">PowerImageLoader</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>
                imageRequestConfig<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">PowerImageLoaderProtocol.PowerImageResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token metadata function">@Override</span>
                    public <span class="token keyword">void</span> <span class="token function">onResult</span><span class="token punctuation">(</span><span class="token class-name">PowerImageResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 加载到图片之后进行解析</span>
                        <span class="token class-name">PowerImageBaseRequest</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onLoadResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>PowerImageBaseRequest.performLoadImage</code>方法中：</p><ul><li>会先通过<code>PowerImageLoader.getInstance().handleRequest</code>方法获取图片；</li><li>然后调用<code>PowerImageBaseRequest.this.onLoadResult</code>方法也就是<em>PowerImageExternalRequest</em>和<em>PowerImageTextureRequest</em>的<code>onLoadResult()</code>方法。</li></ul><p>在他们的<code>onLoadResult(final PowerImageResult result)</code>方法中，入参 PowerImageResult 持有 FlutterImage 对象，后者持有加载的图片的 Drawable，他们根据各自的特点对图片进行处理后（<em>ffi</em>获取 Drawable 的 bitmap 对象，&lt;&gt;如果图片不是<code>ARGB_8888</code>则<em>会</em>发生一次 Bitmap 拷贝&gt;；<em>texture</em>使用 Bitmap 绘制到 Canvas 上面），通过<code>PowerImageBaseRequest.onLoadSuccess()</code>方法或者<code>PowerImageBaseRequest.onLoadFailed</code>返回结果。</p><p>其中：</p><ul><li>PowerImageExternalRequest 从获取到的图片生成 Bitmap 并返回其指针、宽高、大小等属性返回；</li><li>PowerImageTextureRequest 则将图片绘制到<code>Surface</code>中并返回<code>textureId</code>等信息。</li></ul><p>而对于<code>PowerImageLoader.getInstance().handleRequest()</code>，这里面的各个 PowerImageLoaderProtocol 由 Native 端通过<code>PowerImageLoader.getInstance().registerImageLoader</code><strong>注册具体的实现</strong>，<code>handleRequest()</code>方法正是调用他们获取图片。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> PowerImageLoader implements PowerImageLoaderProtocol <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PowerImageLoaderProtocol<span class="token operator">&gt;</span> imageLoaders<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">PowerImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageLoaders <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> static <span class="token keyword">class</span> Holder <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> static PowerImageLoader instance <span class="token operator">=</span> new <span class="token function">PowerImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> static PowerImageLoader <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> PowerImageLoader<span class="token punctuation">.</span>Holder<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在 Android 中调用此方法，注册获取&quot;network&quot;、&quot;nativeAsset&quot;、&quot;asset&quot;、&quot;file&quot;等图片的实现</span>
    <span class="token keyword">public</span> void <span class="token function">registerImageLoader</span><span class="token punctuation">(</span>PowerImageLoaderProtocol loader<span class="token punctuation">,</span> String imageType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageLoaders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>imageType<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 此方法调用上面 registerImageLoader 方法注册的 ImageLoader 获取图片</span>
    <span class="token annotation builtin">@Override</span>
    <span class="token keyword">public</span> void <span class="token function">handleRequest</span><span class="token punctuation">(</span>PowerImageRequestConfig request<span class="token punctuation">,</span> PowerImageResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        PowerImageLoaderProtocol imageLoader <span class="token operator">=</span> imageLoaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>imageType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imageLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> new <span class="token function">IllegalStateException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;PowerImageLoader for &quot;</span></span>
                    <span class="token operator">+</span> request<span class="token punctuation">.</span>imageType <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; has not been registered.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        imageLoader<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="native-端图片获取" tabindex="-1"><a class="header-anchor" href="#native-端图片获取" aria-hidden="true">#</a> Native 端图片获取</h2><p>上面提到，<em>power_image</em>默认的**<em>PowerImageLoaderProtocol</em>**有以下几种类：&quot;<code>network</code>&quot;、&quot;<code>nativeAsset</code>&quot;、&quot;<code>asset</code>&quot;、&quot;<code>file</code>&quot;，这些都需要使用者在 Native 端注册才能正常使用。</p><p>以&quot;<code>network</code>&quot;为例，在<code>MainActivity.onCreate</code>方法中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity<span class="token operator">:</span> <span class="token function">FlutterActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">..</span><span class="token punctuation">.</span>
            PowerImageLoader<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerImageLoader</span><span class="token punctuation">(</span>
            <span class="token function">PowerImageNetworkLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applic ationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;network&quot;</span></span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>PowerImageNetworkLoader</em><strong>继承自</strong><em>PowerImageLoaderProtocol</em></strong>，图片的加载逻辑在其<code>handleRequest</code>方法中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">PowerImageNetworkLoader</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> PowerImageLoaderProtocol <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token operator">:</span> PowerImageRequestConfig<span class="token punctuation">,</span> response<span class="token operator">:</span> PowerImageResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 Glide 加载图片 Drawable</span>
        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">srcString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> RequestListener<span class="token operator">&lt;</span>Drawable<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token operator">:</span> GlideException<span class="token operator">?</span><span class="token punctuation">,</span>model<span class="token operator">:</span> Any<span class="token punctuation">,</span>
                    target<span class="token operator">:</span> Target<span class="token operator">&lt;</span>Drawable<span class="token operator">&gt;</span><span class="token punctuation">,</span>isFirstResource<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
                    response<span class="token punctuation">.</span><span class="token function">onResult</span><span class="token punctuation">(</span>PowerImageResult<span class="token punctuation">.</span><span class="token function">genFailRet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Native 加载失败：&quot;</span></span> <span class="token operator">+</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span>message <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;null&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> Drawable<span class="token punctuation">,</span>model<span class="token operator">:</span> Any target<span class="token operator">:</span>Target<span class="token operator">&lt;</span>Drawable<span class="token operator">&gt;</span><span class="token punctuation">,</span>dataSource<span class="token operator">:</span> DataSource<span class="token punctuation">,</span>isFirstResource<span class="token operator">:</span>Boolean
                <span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token keyword">is</span> GifDrawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 动图</span>
                        <span class="token comment">// 加载成功，调用回调</span>
                        response<span class="token punctuation">.</span><span class="token function">onResult</span><span class="token punctuation">(</span>
                            PowerImageResult<span class="token punctuation">.</span><span class="token function">genSucRet</span><span class="token punctuation">(</span>
                                <span class="token function">GlideMultiFrameImage</span><span class="token punctuation">(</span>
                                    resource <span class="token keyword">as</span> GifDrawable<span class="token punctuation">,</span>
                                    <span class="token boolean">false</span>
                                <span class="token punctuation">)</span>
                            <span class="token punctuation">)</span>
                        <span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token keyword">is</span> BitmapDrawable<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 普通图片</span>
                            response<span class="token punctuation">.</span><span class="token function">onResult</span><span class="token punctuation">(</span>
                                PowerImageResult<span class="token punctuation">.</span><span class="token function">genSucRet</span><span class="token punctuation">(</span>
                                    <span class="token function">FlutterSingleFrameImage</span><span class="token punctuation">(</span>
                                        resource <span class="token keyword">as</span> BitmapDrawable
                                    <span class="token punctuation">)</span>
                                <span class="token punctuation">)</span>
                            <span class="token punctuation">)</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            response<span class="token punctuation">.</span><span class="token function">onResult</span><span class="token punctuation">(</span>PowerImageResult<span class="token punctuation">.</span><span class="token function">genFailRet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Native 加载失败：resource : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">resource</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>width <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> Target<span class="token punctuation">.</span>SIZE_ORIGINAL <span class="token keyword">else</span> request<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> Target<span class="token punctuation">.</span>SIZE_ORIGINAL <span class="token keyword">else</span> request<span class="token punctuation">.</span>height
            <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当 Flutter 端向 Native 发送消息时：</p><ul><li>Flutter 引擎会调用<code>PowerImagePlugin.onMethodCall</code>方法，先<strong>创建</strong>对应的请求**<em>PowerImageBaseRequest</em>**；</li><li>然后<code>PowerImageRequestManager.getInstance().startLoadingWithArguments</code><strong>执行</strong>刚刚上一步创建的请求，此方法内部执行<code>PowerImageBaseRequest.startLoading()</code>方法；</li><li>在**<em>PowerImageBaseRequest</em><strong>类内部，其<code>startLoading</code>方法会调用<code>performLoadImage</code>方法，后者又会调用<code>PowerImageLoader.getInstance().handleRequest()</code>方法</strong>请求加载图片**，并指定回调方法为<code>PowerImageBaseRequest.onLoadResult(result)</code>；</li><li><code>PowerImageLoader.handleRequest</code>方法内部通过请求的<code>imageType</code>找到 Native 端（比如 Android 在<code>MainActivity.onCreate</code>中注册的）<code>PowerImageLoaderProtocol imageLoader</code>，并执行其<code>handleRequest</code>方法<strong>处理加载图片</strong>请求；</li><li><code>PowerImageLoaderProtocol.handleRequest()</code>方法中<strong>调用原生的图片加载库</strong>获取 Drawable 并生成 PowerImageResult 回调<code>PowerImageResponse.onResult</code>方法，此方法会回调<code>PowerImageBaseRequest.this.onLoadResult(result)</code> ；</li><li>在**<em>PowerImageTextureRequest</em><strong>或者</strong><em>PowerImageExternalRequest</em>**的<code>onLoadResult</code>方法中对获取到的<code>PowerImageResult</code>进行处理之后回调<code>PowerImageBaseRequest</code>的<code>onLoadSuccess()</code>或者<code>onLoadFailed(final String errMsg)</code>方法返回图片请求结果。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong><em>power_image</em></strong> 是一个利用原生库加载/管理图片的比较适用于 Flutter/Native 混合开发的图片加载库，提供了 <strong><em>texture</em></strong> 和 <strong><em>ffi</em></strong> 两种加载图片的方式。</p>`,45),B=n("code",null,"ui.decodeImageFromPixels",-1),T=n("em",null,"ui.Image",-1),F={href:"https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ#:~:text=decodeImageFromPixels%C2%A0%E4%BC%9A%E6%9C%89%E5%86%85%E5%AD%98%E6%8B%B7%E8%B4%9D%EF%BC%8C%E5%9C%A8%E6%8B%B7%E8%B4%9D%E8%A7%A3%E7%A0%81%E5%90%8E%E7%9A%84%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E6%97%B6%EF%BC%8C%E5%86%85%E5%AD%98%E5%B3%B0%E5%80%BC%E4%BC%9A%E6%9B%B4%E5%8A%A0%E4%B8%A5%E9%87%8D",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.notion.so/ui-decodeImageFromPixels-a401c6cf1c92428bb3c3a37da1078a6b",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"根据官方的说法：",-1),M=n("ol",null,[n("li",null,"Texture 适用于日常场景，优先选择；"),n("li",null,[s("FFI 更适用于 "),n("ol",null,[n("li",null,"flutter <= 1.23.0-18.1.pre 版本中，在模拟器上显示图片"),n("li",null,"获取 ui.Image 图片数据"),n("li",null,"flutter 侧解码，解码前的数据拷贝影响较小。")])])],-1),N={href:"https://github.com/alibaba/power_image/issues/17",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"texture",-1),O={href:"https://github.com/flutter/flutter/issues/92397",target:"_blank",rel:"noopener noreferrer"},W=n("strong",null,"更推荐使用 ffi 方案",-1),H=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),j={href:"https://github.com/alibaba/power_image",target:"_blank",rel:"noopener noreferrer"},G={href:"https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ",target:"_blank",rel:"noopener noreferrer"},U={href:"https://mp.weixin.qq.com/s?__biz=MzU4MDUxOTI5NA==&mid=2247485142&idx=1&sn=b416f1d0c8f3fd2077075441154df090&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},z={href:"https://mp.weixin.qq.com/s/yUm4UFggYLgDbj4_JCjEdg#at",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/alibaba/power_image/issues/17",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.notion.so/ui-decodeImageFromPixels-a401c6cf1c92428bb3c3a37da1078a6b",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"ui.decodeImageFromPixels分析",-1);function Z(J,Q){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("Flutter 默认提供了"),u,s("用于从网络、文件等加载图片，并且使用"),r,s("统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了"),n("a",k,[s("flutter_cached_network_image"),e(a)]),s("、"),n("a",d,[s("extended_image"),e(a)]),s("等基于 Flutter 原生的解决方案，以及"),n("a",m,[s("power_image"),e(a)]),s("等基于混合开发的解决方案。")]),v,g,b,n("p",null,[s("无论是 Flutter "),n("a",w,[s("Image"),e(a)]),s(" 组件，还是第三方的"),n("a",I,[f,e(a)]),s("、"),h,s("都是在 Flutter 端加载解析图片，这些方案对一般纯 Flutter 开发的 APP 来说基本可以满足要求，但是对于大多数混合开发的 APP 来说，这些方案会在 Flutter 和 Native 同时存在两份图片资源造成内存浪费，此外根据"),n("a",P,[s("贝壳的分析"),e(a)]),s("，Flutter 端解决方案存在图片内存释放时机（Flutter 引擎持有的 SkImage 释放时机）以及超大图内存峰值等问题。")]),y,n("p",null,[s("这里需要注意，虽然 "),x,s(" 和 "),q,s(" 都采用了 ImageCache 来管理图片缓存，甚至 "),_,s(" 的内存也在 Flutter 侧管理，但是 PowerImage 本身不会出现我们之前在"),n("a",R,[s("Flutter Image"),e(a)]),s("中分析的加载大量高清网图会出现的"),L,s("，这是因为虽然在 ImageCache.putIfAbsent 方法中_pendingImages 同样保存了加载中的图片，但是实际这些"),E,s("，而非 Flutter，所以只要 Native 端图片加载库比较成熟，就可以避免这个问题。")]),C,n("p",null,[s("其中，texture 方案实际使用 Texture 组件展示图片；而 ffi 方案则只有图片获取在 Native 端，当使用"),B,s("方法从 Bitmap 内存指针创建"),T,s("之后（根据"),n("a",F,[s("阿里的描述"),e(a)]),s("，这里会发生一次内存拷贝，实际代码可以参考"),n("a",S,[s("这里"),e(a)]),s("），剩下按照和 Flutter Image 类似的步骤展示图片。")]),A,M,n("p",null,[s("此外，根据官方"),n("a",N,[s("power_image/issues/17"),e(a)]),s("的说法，“在 2.5.3 上 ffi 性能已经跟  "),D,s("不相上下了”，而且 textrue 方案在 Android 上较大尺寸可能会 crash（"),n("a",O,[s("flutter/flutter#92397"),e(a)]),s("），所以"),W,s("。")]),H,n("p",null,[n("a",j,[s("https://github.com/alibaba/power_image"),e(a)])]),n("p",null,[n("a",G,[s("Flutter 图片库高燃新登场"),e(a)])]),n("p",null,[n("a",U,[s("闲鱼 Flutter 图片框架架构演进（超详细）"),e(a)])]),n("p",null,[n("a",z,[s("Flutter 图片内存优化实践"),e(a)])]),n("p",null,[n("a",Y,[s("https://github.com/alibaba/power_image/issues/17"),e(a)])]),n("p",null,[n("a",K,[V,e(a)])])])}const $=p(i,[["render",Z],["__file","727d7800.html.vue"]]);export{$ as default};
