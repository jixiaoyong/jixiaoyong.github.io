import{_ as t,r as o,o as p,c,a as n,b as s,d as e,e as l}from"./app-7684fb8c.js";const i={},u=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d=n("code",null,"Flow",-1),r=n("strong",null,"异步返回多个值",-1),k=n("code",null,"RxJava",-1),v=n("em",null,"拥有尽可能简单的设计，对 Kotlin 以及挂起友好且遵从结构化并发",-1),m={href:"https://www.kotlincn.net/docs/reference/coroutines/flow.html",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"正文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正文","aria-hidden":"true"},"#"),s(" 正文")],-1),b=n("code",null,"List",-1),g={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Sequence",-1),w=n("code",null,"Flow",-1),_=l(`<h3 id="创建-flow" tabindex="-1"><a class="header-anchor" href="#创建-flow" aria-hidden="true">#</a> 创建 Flow</h3><ol><li><p><code>flow{...}</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 假装我们异步等待了 100 毫秒，也可以用 Thread.sleep() 但是会阻塞当前线程</span>
        <span class="token function">emit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 发射下一个值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.asFlow()</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>flowOf{}</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>因为<strong>流只会在被收集的时候才会被启动</strong>（指执行类似<code>flow{...}</code>中的内容），所以上述<code>simple()</code>在被调用时会尽快返回且不等待，所以无需<code>suspend</code>修饰。</p><h3 id="流的收集-末端流操作符" tabindex="-1"><a class="header-anchor" href="#流的收集-末端流操作符" aria-hidden="true">#</a> 流的收集/末端流操作符</h3><ul><li><p><code>collect{...}</code> 收集<code>emit</code>发送的值</p><p>配合<code>onEach{}</code>可以将<code>collect</code>中执行的代码放到<code>onEach</code>中。</p></li><li><p><code>collectLatest{...}</code> 收集<code>emit</code>发送的值，但每次新的<code>emit</code>到来时，取消之前的收集器，创建新的收集器（用新的值执行<code>{...}</code>中的代码）</p></li><li><p><code>launchIn</code> 指定在单独的协程中启动流的收集，这样就可以立即继续进一步执行代码，不会挂起后面的协程代码。</p></li><li><p><code>single()</code> 只接受 flow 发送的一个值，0 个或多个都会报错</p></li><li><p><code>first{...}</code> 查找符合条件的第一个值</p></li><li><p><code>reduce()</code> 求和</p></li><li><p><code>fold(initial,{...})</code> 在初始值<code>initial</code>的基础上求和</p></li><li><p><code>toList</code>、<code>toSet</code></p></li></ul><h3 id="过渡流操作符" tabindex="-1"><a class="header-anchor" href="#过渡流操作符" aria-hidden="true">#</a> 过渡流操作符</h3><p>过渡操作符应用于上游流，并返回下游流。就像流一样。这类操作符本身不是挂起函数。它运行的速度很快，返回新的转换流的定义。</p><ul><li><code>map{}</code></li><li><code>filter{}</code></li><li><code>take(n)</code> 限长操作符，只取前 n 个发射的值</li></ul><h3 id="流上下文" tabindex="-1"><a class="header-anchor" href="#流上下文" aria-hidden="true">#</a> 流上下文</h3><p>流默认运行在收集器提供的上下文中，但是可以通过<code>flowOn </code>更改：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token comment">// 在流构建器中改变消耗 CPU 代码上下文的正确方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="展平流" tabindex="-1"><a class="header-anchor" href="#展平流" aria-hidden="true">#</a> 展平流</h3><p>将嵌套有<code>Flow</code>的<code>Flow</code>（如<code>Flow&lt;Flow&lt;String&gt;&gt;</code>）<strong>展平</strong>为单个流（如<code>Flow&lt;String&gt;</code>）。</p><ul><li><p><code>flatMapConcat</code> 将收集到的流交给<code>{...}</code>处理后，等待内部流处理完毕后，再去请求下一个流</p></li><li><p><code>flatMapMerge</code> 先顺序收集所有流，再同时收集结果流</p></li><li><p><code>flatMapLatest{...}</code> 类似于<code>collectLatest{...}</code>，在新流发出的时候，立即取消<code>{...}</code>中所有的代码</p></li><li><p><code>flattenConcat</code> 依次展平流</p></li><li><p><code>flattenMerge{...}</code> 并发拼接，先执行<code>{...}</code>中的方法，再执行<code>collect</code>等方法，顺序会乱。</p></li></ul><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><ul><li><p><code>try/catch</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Emitting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">emit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 发射下一个值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>
            <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token function">check</span><span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>catch()</code></p><p><strong>透明捕获</strong>：只捕获上游异常，其之后的异常不会被处理。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// 发射一个异常</span>
    <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span>
        value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">//此处如有异常，不会被 catch 捕获</span>
             <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>声明式捕获</strong>：将<code>collect</code>的代码移动到<code>onEach</code>中，将其放到<code>catch</code>之前，从而使其被<code>catch</code>捕获。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>
        <span class="token function">check</span><span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span> <span class="token comment">//此处异常会被 catch 捕获</span>
        <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="流取消" tabindex="-1"><a class="header-anchor" href="#流取消" aria-hidden="true">#</a> 流取消</h3><ul><li><code>flow { ... }</code> 创建的流的繁忙循环默认可以取消</li><li>其他流如果需要取消，可以添加 <code>.onEach { currentCoroutineContext().ensureActive() }</code> 或者<code>.cancellable()</code></li></ul><h3 id="流完成" tabindex="-1"><a class="header-anchor" href="#流完成" aria-hidden="true">#</a> 流完成</h3><ul><li><p>命令式</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//监听流完成</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>声明式</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onCompletion</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">//监听流完成，在 collect 执行结束后才执行</span>
    <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>onCompletion</code>的可空参数 <code>Throwable</code> 可以用于确定流收集是正常完成（为<code>null</code>）还是有异常发生。他不会处理异常。</p></li></ul><h3 id="其余操作" tabindex="-1"><a class="header-anchor" href="#其余操作" aria-hidden="true">#</a> 其余操作</h3><ul><li><p><code>buffer()</code> 缓冲发射项，收集完成后再传给下一步</p></li><li><p><code>conflate()</code> 合并发射项，会丢弃来不及处理的中间值，只获取并处理最新的值</p></li><li><p><code>zip()</code> 合并两个流的值，两个流中的值一一对应</p><p>例如<code>(1,2,3) 3s发射一次,(a,b,c) 4s发射一次</code>直接拼接，合并之后为 <code>(1a,2b,3c)</code></p></li><li><p><code>combine()</code> 结合两个流的值，任意一个流中的值发生变化都会触发执行计算</p><p>例如<code>(1,2,3) 3s发射一次,(a,b,c) 4s发射一次</code>直接拼接，合并之后为 <code>(1a,2a,2b,3b,3c)</code></p></li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,23),x={href:"https://www.kotlincn.net/docs/reference/coroutines/flow.html",target:"_blank",rel:"noopener noreferrer"};function y(q,F){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[d,s("是 Kotlin 协程库中的库，用于"),r,s("，官方介绍是参考"),k,s("等响应式流实现的，但是“"),v,s("”。本文主要参考"),n("a",m,[s("Flow 中文文档"),e(a)]),s("，梳理了学习过程中的要点和理解，以便日后查验。")]),h,n("p",null,[s("对于异步返回多个值的需求，集合（如"),b,s("等）只能一次性返回多个值，而序列（ "),n("a",g,[f,e(a)]),s(" ）只支持阻塞代码，"),w,s("则支持挂起函数异步返回多个值。")]),_,n("p",null,[n("a",x,[s("Kotlin Flow 中文文档"),e(a)])])])}const E=t(i,[["render",y],["__file","10414aef.html.vue"]]);export{E as default};
