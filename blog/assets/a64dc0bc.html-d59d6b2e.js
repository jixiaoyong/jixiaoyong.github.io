const t=JSON.parse('{"key":"v-0041f05e","path":"/posts/a64dc0bc.html","title":"LeetCode笔记--重建二叉树","lang":"zh-CN","frontmatter":{"permalink":"/posts/a64dc0bc.html","title":"LeetCode笔记--重建二叉树","abbrlink":"a64dc0bc","date":"2020-02-20T11:14:24.000Z","tag":"数据结构与算法","description":"二叉树的遍历根据根节点与左右子节点的遍历顺序的不同分为三种： 前序遍历 根左右：先遍历根节点，再左子树，再右子树（先从根节点开始，记录左节点直到没有） 第一个为根节点 中序遍历 左根右：先左子树，再根子树，再右子树（从树的最左边的节点开始遍历） 后序遍历 左右根：先左子树，后右子树，再根节点 最后一个为根节点 在遍历的时候，当父节点只有一个子节点时，依然要遵循以上三种遍历的先后顺序（没有该子节点则不写内容），以保证某一侧的子树（“左边的子树”或“右边的子树”）所有节点都被完全遍历，之后才可以根据遍历的规则切换到下一子树。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/a64dc0bc.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"LeetCode笔记--重建二叉树"}],["meta",{"property":"og:description","content":"二叉树的遍历根据根节点与左右子节点的遍历顺序的不同分为三种： 前序遍历 根左右：先遍历根节点，再左子树，再右子树（先从根节点开始，记录左节点直到没有） 第一个为根节点 中序遍历 左根右：先左子树，再根子树，再右子树（从树的最左边的节点开始遍历） 后序遍历 左右根：先左子树，后右子树，再根节点 最后一个为根节点 在遍历的时候，当父节点只有一个子节点时，依然要遵循以上三种遍历的先后顺序（没有该子节点则不写内容），以保证某一侧的子树（“左边的子树”或“右边的子树”）所有节点都被完全遍历，之后才可以根据遍历的规则切换到下一子树。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-07T08:38:28.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:published_time","content":"2020-02-20T11:14:24.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-07T08:38:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode笔记--重建二叉树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-20T11:14:24.000Z\\",\\"dateModified\\":\\"2023-04-07T08:38:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1680856708000,"updatedTime":1680856708000,"contributors":[{"name":"Ji Xiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.34,"words":702},"filePathRelative":"_posts/LeetCode笔记--重建二叉树.md","localizedDate":"2020年2月20日","excerpt":"<p>二叉树的遍历根据根节点与左右子节点的遍历顺序的不同分为三种：</p>\\n<ul>\\n<li>\\n<p>前序遍历</p>\\n<p>根左右：先遍历根节点，再左子树，再右子树（先从根节点开始，记录左节点直到没有）</p>\\n<p>第一个为根节点</p>\\n</li>\\n<li>\\n<p>中序遍历</p>\\n<p>左根右：先左子树，再根子树，再右子树（从树的最左边的节点开始遍历）</p>\\n</li>\\n<li>\\n<p>后序遍历</p>\\n<p>左右根：先左子树，后右子树，再根节点</p>\\n<p>最后一个为根节点</p>\\n</li>\\n</ul>\\n<p>在遍历的时候，当父节点只有一个子节点时，依然要遵循以上三种遍历的先后顺序（没有该子节点则不写内容），以保证某一侧的子树（“左边的子树”或“右边的子树”）所有节点都被完全遍历，之后才可以根据遍历的规则切换到下一子树。</p>","autoDesc":true}');export{t as data};
