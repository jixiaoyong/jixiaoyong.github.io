import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-b04f94c7.js";const l={},r=n("p",null,"Android 的架构依次有：",-1),u=n("ul",null,[n("li",null,"MVC"),n("li",null,"MVP"),n("li",null,"MVVM"),n("li",null,"MVI"),n("li",null,"Clean Architecture")],-1),d=n("p",null,"上述架构循序渐进，当前主流设计模式是 MVVM，MVI 和 Clean Architecture，这三者的着重点各有不同，可以根据项目规模大小递进选择。",-1),k=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_0.png",alt:"https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md",tabindex:"0",loading:"lazy"},null,-1),v={href:"https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md",target:"_blank",rel:"noopener noreferrer"},g=t('<h1 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h1><p><strong>MVC</strong>，<strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller，是 Android 最原始的开发方式，通过 Controller（一般为 Activity，Fragment 等）来根据用户输入处理 Model（数据/业务逻辑，比如网络请求/数据读写），并将结果更新到 View（用户界面，包括 XML，Activity，Fragment 等）上面。</p><p>在 Android 开发中，MVC 通常被用于实现应用程序的 UI 层。例如，在一个简单的应用程序中，<strong>View</strong> 可以是 Activity 或 Fragment，<strong>Controller</strong> 可以是 Activity 或 Fragment 的内部类，<strong>Model</strong> 可以是 POJO 类（类似 data class）。</p><p>但是实际开发时，<strong>View 通常会持有 Controller 和 Model 的引用产生耦合，并且几乎所有的逻辑都写在 Controller（比如 Activity/Fragment）</strong>，随着项目的进行，经常在 Activity 中即负责 View 的展示，又负责业务逻辑及数据更新，导致其臃肿难以维护。</p><h1 id="mvp" tabindex="-1"><a class="header-anchor" href="#mvp" aria-hidden="true">#</a> MVP</h1><p>因而，<strong>MVP</strong>应运而生，<strong>M</strong>odel-<strong>V</strong>iew-<strong>P</strong>resenter：</p><ul><li>Presenter 持有 View 的<strong>抽象接口</strong>和 Model，负责二者之间的通信，处理用户的输入，将 Model 的数据处理为 View 可使用的状态；</li><li>View 只需持有 Presenter 并实现抽象接口对应的方法即可；</li><li>Model 则负责存储数据，暴露访问数据的接口，请求数据等。</li></ul><p>这样将 View 和 Model 隔离，V 和 P 一一对应，复杂的视图可以组合复用多个 P。并且此时的 Presenter 不再和 Android API 关联，更容易单元测试和维护。</p><p>二者的区别如下图，MVP 相对于 MVC，<strong>将 V 和 M 解耦</strong>，使得 V 可以比较专注于 View 的逻辑：</p>',9),h=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_1.png",alt:"https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42",tabindex:"0",loading:"lazy"},null,-1),b={href:"https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42",target:"_blank",rel:"noopener noreferrer"},f={href:"https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/antoniolg/androidmvp",target:"_blank",rel:"noopener noreferrer"},y={href:"http://antonioleiva.com/mvp-android/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p><strong>Model</strong>，这里是请求后台提供登录相关数据：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> LoginInteractor <span class="token punctuation">{</span>

    <span class="token keyword">public</span> void <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String username<span class="token punctuation">,</span> <span class="token keyword">final</span> String password<span class="token punctuation">,</span> <span class="token keyword">final</span> OnLoginFinishedListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Mock login. I&#39;m creating a handler to delay the answer a couple of seconds</span>
        new <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>View</strong>，这一层一般使用 Activity/Fragment/View 实现，会持有 Presenter 的引用来操作数据，同时为了让 Presenter 可以不直接和 View 关联，需要有一个<strong>抽象接口</strong>将二者隔离：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> LoginView <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">setUsernameError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">setPasswordError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">navigateToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 View 中除了正常的逻辑之外，还需要实现这个<code>LoginView</code>接口以便 Presenter 调用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> LoginActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LoginView <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
		<span class="token comment">// 实现 LoginView 接口方法，这里可能会用到 View 中的 UI Element</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且，View 中还会初始化并持有 Presenter，以通过他来响应用户的交互：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">LoginActivity</span> <span class="token operator">:</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LoginView</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> val presenter <span class="token operator">=</span> <span class="token class-name">LoginPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">LoginInteractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment">// 在其他的某个方法里面响用户操作，比如调用 presenter.login()</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Presenter</strong>，负责 View 和 Model 的交互，将从 Model 中检索到的<strong>数据</strong>转化为 View 使用的<strong>状态</strong>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 注意这里传入了 View 的抽象类 LoginView，以及 Model：LoginInteractor</span>
<span class="token keyword">class</span> <span class="token function">LoginPresenter</span><span class="token punctuation">(</span><span class="token keyword">var</span> loginView<span class="token operator">:</span> LoginView<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">val</span> loginInteractor<span class="token operator">:</span> LoginInteractor<span class="token punctuation">)</span> <span class="token operator">:</span>
    LoginInteractor<span class="token punctuation">.</span><span class="token function">OnLoginFinishedListener</span> <span class="token punctuation">{</span>

		<span class="token comment">// View 会调用这个方法，而 Presenter 则在这里与 Model/View 交互</span>
        <span class="token keyword">fun</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">,</span> password<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            loginView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            loginInteractor<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>

		<span class="token comment">// 在 View 被销毁时调用此方法，避免在 Activity Destroy 之后更新 UI 导致 APP 崩溃</span>
		<span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        loginView <span class="token operator">=</span> <span class="token keyword">null</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 MVP 对于简单的项目来说，增加了没必要的复杂性（View 抽象类，Presenter 单独出来等），代码量增加，<strong>Presenter 持有 View 在执行耗时任务时可能导致内存泄露，Activity destroy 之后如果 Presenter 访问 View 可能会导致崩溃</strong>，并且 View 和 Presenter 存在一定的耦合（当 View 中出现诸如 view 类变化等时需要同步修改 Presenter）。</p><h1 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h1><p>由此，进化出 MVVM，<strong>M</strong>odel-<strong>V</strong>iew-<strong>V</strong>iewModel，使用 ViewModel 将 View 和 Model 关联起来，同时<strong>ViewModel 不持有 View 的引用</strong>，而是 View 通过 ViewModel 操作 Model，View 监听 ViewModel 暴露出来的数据并更新 UI。</p>`,13),V=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_2.png",alt:"https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7d",tabindex:"0",loading:"lazy"},null,-1),M={href:"https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7d",target:"_blank",rel:"noopener noreferrer"},A={href:"https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,[s("在 MVVM 中"),n("strong",null,"ViewModel 只负责处理和提供数据，不再关心 View"),s("，便于测试，避免内存泄露；")],-1),C=n("strong",null,"View",-1),L=n("code",null,"点击页面event",-1),D=n("strong",null,"ViewModel",-1),P=n("strong",null,"Model",-1),x=n("code",null,"数据state",-1),E=n("code",null,"页面ui",-1),R=n("strong",null,"二者的耦合很低",-1),U={href:"https://blog.csdn.net/u011033906/article/details/118113466",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.android.com/topic/libraries/data-binding/two-way?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/husaynhakeem/TicTacToe-MVVM",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;CheckBox
        android:id=&quot;@+id/myCheckBox&quot;
        android:checked=&quot;@={viewmodel.isChecked}&quot; // 数据双向绑定
		android:onClick=&quot;@{() -&gt; viewmodel.onClicked(1,2)}&quot; // 绑定事件
    /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="mvi" tabindex="-1"><a class="header-anchor" href="#mvi" aria-hidden="true">#</a> MVI</h1><p>而为了<strong>进一步降低 MVVM 中 ViewModel 和 View 的耦合</strong>问题（MVVM 中 View 要调用 ViewModel 方法触发数据处理，数据可以双向绑定），简化数据流的管理，进一步演化出了 MVI（<strong>M</strong>odel-<strong>V</strong>iew-<strong>I</strong>ntent）：</p><p>将用户操作通过 <strong>Intent</strong> 传递给 <strong>ViewModel</strong>，ViewModel 据此更新数据，并将数据传递给 <strong>View</strong> 展示，在这个过程中<strong>事件和数据是单向</strong>的。</p><blockquote><p>⚠️ 注意，这里的 Intent 表示意图、事件，并非 Android 中 Activity 之间传递的<code>Intent</code>类</p></blockquote>`,5),B=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_3.png",alt:"https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3",tabindex:"0",loading:"lazy"},null,-1),N={href:"https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3",target:"_blank",rel:"noopener noreferrer"},T={href:"https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,[s("MVI 和 MVVM 的最大区别在于，UI 层不再直接调用 VM 的各个方法执行业务逻辑（比如下载数据）而是通过"),n("strong",null,[s("V 给 VM 发送 Intent（比如 viewModel.setEvent），"),n("strong",null,"由 VM 内部根据不同的 Intent 执行不同的逻辑，从而使得"),s("V 和 VM 的耦合降低，"),n("strong",null,"此外"),s("MVI 中的数据是单向流动的")]),s("。")],-1),q={href:"https://github.com/myofficework000/MVI-JetpackCompose-Github",target:"_blank",rel:"noopener noreferrer"},O=t(`<p><strong>UI</strong> 给 VM 发送 <strong>Intent</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Composable</span>
<span class="token keyword">fun</span> <span class="token function">ReposScreenDestination</span><span class="token punctuation">(</span>UserId<span class="token operator">:</span> String<span class="token punctuation">,</span> navController<span class="token operator">:</span> NavController<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> viewModel <span class="token operator">=</span> getViewModel<span class="token operator">&lt;</span>ReposViewModel<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token function">parametersOf</span><span class="token punctuation">(</span>UserId<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token function">ReposScreen</span><span class="token punctuation">(</span>
        state <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>viewState<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        effectFlow <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>effect<span class="token punctuation">,</span>
		<span class="token comment">// View 中的事件都通过发送 Intent 给 ViewModel 处理</span>
        onEventSent <span class="token operator">=</span> <span class="token punctuation">{</span> event <span class="token operator">-&gt;</span> viewModel<span class="token punctuation">.</span><span class="token function">setEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        onNavigationRequested <span class="token operator">=</span> <span class="token punctuation">{</span> navigationEffect <span class="token operator">-&gt;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>navigationEffect <span class="token keyword">is</span> ReposContract<span class="token punctuation">.</span>Effect<span class="token punctuation">.</span>Navigation<span class="token punctuation">.</span>Back<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                navController<span class="token punctuation">.</span><span class="token function">popBackStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>VM</strong> 内部根据不同的 Intent 处理逻辑：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">ReposViewModel</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> userId<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> githubRepository<span class="token operator">:</span> GithubRepository <span class="token comment">// 这里实际处理各种读、写数据的操作</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> BaseViewModel<span class="token operator">&lt;</span>ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">,</span> ReposContract<span class="token punctuation">.</span>State<span class="token punctuation">,</span> ReposContract<span class="token punctuation">.</span>Effect<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">init</span> <span class="token punctuation">{</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

		<span class="token comment">// ViewModel 一般只会对外暴露一个 State 供 View 使用</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setInitialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ReposContract<span class="token punctuation">.</span><span class="token function">State</span><span class="token punctuation">(</span>
        user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        reposList <span class="token operator">=</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        isUserLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isReposLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

		<span class="token comment">// ViewModel 通过这一个方法处理所有来自 View 的事件，调用内部方法</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleEvents</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>BackButtonClicked <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                setEffect <span class="token punctuation">{</span> ReposContract<span class="token punctuation">.</span>Effect<span class="token punctuation">.</span>Navigation<span class="token punctuation">.</span>Back <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>Retry <span class="token operator">-&gt;</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

		<span class="token comment">// ViewModel 要实现的逻为内部方法，可以自由修改实现</span>
    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">getRepos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 ViewModel 暴露出来的数据，在 View 中使用如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">Scaffold</span><span class="token punctuation">(</span>
        topBar <span class="token operator">=</span> <span class="token punctuation">{</span> ReposTopBar <span class="token punctuation">{</span>
            <span class="token function">onEventSent</span><span class="token punctuation">(</span>ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>BackButtonClicked<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 根据不同的 state 展示 UI</span>
        <span class="token keyword">when</span> <span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>isUserLoading <span class="token operator">||</span> state<span class="token punctuation">.</span>isReposLoading <span class="token operator">-&gt;</span> <span class="token function">Progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// View 通过 Intent 和 ViewModel 交互</span>
            state<span class="token punctuation">.</span>isError <span class="token operator">-&gt;</span> NetworkError <span class="token punctuation">{</span> <span class="token function">onEventSent</span><span class="token punctuation">(</span>ReposContract<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>Retry<span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">.</span>user<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> user <span class="token operator">-&gt;</span>
                    <span class="token function">ReposList</span><span class="token punctuation">(</span>
                        header <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">ReposListHeader</span><span class="token punctuation">(</span>userDetail <span class="token operator">=</span> user<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        reposList <span class="token operator">=</span> state<span class="token punctuation">.</span>reposList
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析上述代码的逻辑，可以看出，在 MVI 中，<strong>V</strong>iew 发送将用户操作使用<strong>I</strong>ntent 给<strong>V</strong>iewModel 处理，并从 ViewModel 获取到处理后的状态更新界面，此外 ViewModel 还负责使用 Repository 实际处理 Data，大体的逻辑示意如下：</p>`,7),H=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_4.png",alt:"https://www.scaler.com/topics/mvi-architecture-android/",tabindex:"0",loading:"lazy"},null,-1),K={href:"https://www.scaler.com/topics/mvi-architecture-android/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.scaler.com/topics/mvi-architecture-android/",target:"_blank",rel:"noopener noreferrer"},J=t('<h1 id="clean-architecture" tabindex="-1"><a class="header-anchor" href="#clean-architecture" aria-hidden="true">#</a> Clean Architecture</h1><p>通过观察上述分析，我们不难发现，无论是 MVVM 还是 MVI 中，随着业务发展，VM 处理的逻辑会日益增长，繁重。在 MVVM/MVI 的基础之上，通过对业务逻辑的进一步抽象，可以实现<strong>Clean Architecture</strong>模式：</p><p>这也是 Android 官方如今力推的模式，将 Android APP 分为三部分：</p><ul><li><strong>UI Layer</strong>，应用层，用于和用户交互，由 View（下图的 UI elements）和 ViewModel/单纯类（下图中的 State holders）等组成，和 Android API 强关联，发起 event，展示新的 state。</li><li><strong>Domain Layer</strong>（复杂项目可选），业务逻辑层，对于复杂项目，可以将一些重要的业务抽象出来（比如登录逻辑：检验密码，请求登录，更新登录状态等流程），也包括一些之前使用工具类实现的方法（比如格式化日期等）。这部分的代码与 Android API 没有任何关联，是平台无关的抽象逻辑，<strong>与 Data Layer 通过抽象接口解耦</strong>（Domain Layer 只通过 repository 的抽象类与 Data 交互，而 Data Layer 则负责实现具体逻辑，比如请求数据库，网络等）。不依赖于具体的技术或框架，方便移植。</li><li><strong>Data Layer</strong>，数据层，这一层负责实现上一层调用的抽象接口，真正实现对数据的增删改查。</li></ul><p>上述三者中，<strong>UI Layer 依赖于 Domain Layer 处理业务逻辑，Data Layer 依赖于基础框架（网络，数据库等）来访问数据，而 Domain Layer 则不依赖上述二者方便调试和复用</strong>。</p>',5),X={href:"https://github.com/SmartDengg/android-clean-architecture-boilerplate",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,[n("strong",null,"Domain layer"),s("相当于将一些常用，复杂的逻辑单独提取出来（比如过滤新闻列表，提供日期格式化工具），避免 UI 过于繁重。这个层"),n("strong",null,"单纯处理业务逻辑，主线程安全，无生命周期，可以复用"),s("。一定程度上减轻了 ViewModel 的负担。")],-1),W=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_5.png",alt:"Android Clean Arhictecture",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Android Clean Arhictecture")],-1),Y={href:"https://developer.android.com/topic/architecture?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Z=n("p",null,"在上图中，UI elements 用来向用户展示 UI，State holder 则使用 ViewModel/普通类等类管理数据，对 UI 暴露 data，并处理逻辑。这二者组合实现了在屏幕上展示应用数据，并在用户交互等情况下导致数据变化时，将最新数据展示到 UI 上。",-1),$=n("p",null,[s("在 Clean Architecture 中"),n("strong",null,"Presentation/UI Layer"),s("，"),n("strong",null,"Domain Layer"),s("和"),n("strong",null,"Data Layer"),s("这三者的层级关系，可以看下图：")],-1),nn=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_6.png",alt:"https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29",tabindex:"0",loading:"lazy"},null,-1),sn={href:"https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29",target:"_blank",rel:"noopener noreferrer"},an={href:"https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29",target:"_blank",rel:"noopener noreferrer"},en=t("<p>一个重要的原则就是，高层模块（圆圈内部）不应该依赖底层模块（圆圈外部），两者应该依赖于抽象。</p><p>这个架构满足了以下常见架构原则：</p><ul><li>关注点分离</li><li>数据驱动 UI（更新）</li><li>单一数据来源</li><li>单向数据流</li></ul><blockquote><p>Keep in mind that you don&#39;t own implementations of Activity and Fragment; rather, these are just glue classes that represent the contract between the Android OS and your app. The OS can destroy them at any time based on user interactions or because of system conditions like low memory.</p><p>开发者并不实际拥有/控制 Activity 和 Fragment，系统可以在必要时候回收他们，因此要尽量减少对其的依赖，只在这里处理和 UI、操作系统相关的逻辑，将<strong>关注点分离</strong>。</p></blockquote><p><strong>从数据驱动 UI</strong>：应该使用数据模型 data models（最好是持久模型）驱动 UI，这些数据模型独立于 UI 和其他组件，实现在操作系统销毁 APP 进程时他们也被销毁后，用户不会丢失数据（可以从本地，网络恢复）。</p><p><strong>单一事实来源</strong> Single source of truth：应用中定义的数据类型，应该分配一个单一事实来源（SSOT），这种情况下 SSOT 唯一持有/修改数据，对外暴露无可修改数据，在接受函数或事件时更新数据，比如数据库，ViewModel 等。这样将对数据修改集中到一个地方，方便定位问题。</p><p><strong>单向数据流</strong> Unidirectional Data Flow：在 UDF 中，数据 state 只会沿一个方向流动，而 event 沿着相反方向修改数据。这样保证数据一致性，不容易出错，便于调试。比如 jetpack compose 中，每个 composable 函数从上一级接受数据，并将事件暴露给上一级（数据向下，事件向上）</p>",7),tn=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_7.png",alt:"https://developer.android.com/topic/architecture/ui-layer",tabindex:"0",loading:"lazy"},null,-1),on={href:"https://developer.android.com/topic/architecture/ui-layer",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://developer.android.com/topic/architecture/ui-layer",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://developer.android.com/topic/architecture/ui-layer/state-production?hl=zh-cn#initializing-state-production",target:"_blank",rel:"noopener noreferrer"},ln=n("strong",null,"警告：请避免在 ViewModel 的 init 块或构造函数中启动异步操作",-1),rn={href:"https://github.com/android10/Android-CleanArchitecture-Kotlin",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,"下面代码的整体架构如下：",-1),dn=n("img",{src:"https://jixiaoyong.github.io/images/blog/android_architecture/android_architecture_8.png",alt:"https://fernandocejas.com/2018/05/07/architecting-android-reloaded/",tabindex:"0",loading:"lazy"},null,-1),kn={href:"https://fernandocejas.com/2018/05/07/architecting-android-reloaded/",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://fernandocejas.com/2018/05/07/architecting-android-reloaded",target:"_blank",rel:"noopener noreferrer"},mn=t(`<p>在<strong>UI Layer</strong>中，使用 Activity/Fragment 等与 ViewModel 交互：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MovieDetailsFragment <span class="token operator">:</span> <span class="token function">BaseFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">val</span> movieDetailsViewModel<span class="token operator">:</span> MovieDetailsViewModel <span class="token keyword">by</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>

				<span class="token comment">// 监听 ViewModel 的状态，刷新 UI</span>
        <span class="token function">with</span><span class="token punctuation">(</span>movieDetailsViewModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">observe</span><span class="token punctuation">(</span>movieDetails<span class="token punctuation">,</span> <span class="token operator">::</span>renderMovieDetails<span class="token punctuation">)</span>
            <span class="token function">failure</span><span class="token punctuation">(</span>failure<span class="token punctuation">,</span> <span class="token operator">::</span>handleFailure<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
				<span class="token comment">// 调用 ViewModel 的方法传递用户 event</span>
				moviePlay<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> movieDetailsViewModel<span class="token punctuation">.</span><span class="token function">playMovie</span><span class="token punctuation">(</span>trailer<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>Domain Layer</strong>，使用 <code>XXXUseCase</code> 提取<strong>通用的业务逻辑</strong>传递给 ViewModel，将 ViewModel 和 DataLayer 隔离解耦：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MovieDetailsViewModel</span><span class="token punctuation">(</span>
		<span class="token comment">// 这里传入的两个参数都是 UseCase，而非 Repository</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> getMovieDetails<span class="token operator">:</span> GetMovieDetails<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> playMovie<span class="token operator">:</span> PlayMovie
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">BaseViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> _movieDetails<span class="token operator">:</span> MutableLiveData<span class="token operator">&lt;</span>MovieDetailsView<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">MutableLiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 对 View 只暴露这个状态</span>
    <span class="token keyword">val</span> movieDetails<span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>MovieDetailsView<span class="token operator">&gt;</span> <span class="token operator">=</span> _movieDetails

    <span class="token keyword">fun</span> <span class="token function">loadMovieDetails</span><span class="token punctuation">(</span>movieId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token function">getMovieDetails</span><span class="token punctuation">(</span><span class="token function">Params</span><span class="token punctuation">(</span>movieId<span class="token punctuation">)</span><span class="token punctuation">,</span> viewModelScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token operator">::</span>handleFailure<span class="token punctuation">,</span><span class="token operator">::</span>handleMovieDetails<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">playMovie</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">playMovie</span><span class="token punctuation">(</span>PlayMovie<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> viewModelScope<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下 UseCase 的代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> UseCase<span class="token operator">&lt;</span><span class="token keyword">out</span> Type<span class="token punctuation">,</span> <span class="token keyword">in</span> Params<span class="token operator">&gt;</span> <span class="token keyword">where</span> Type <span class="token operator">:</span> Any <span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">// 这里 UseCase 跟具体的 Repository 交互</span>
<span class="token keyword">class</span> <span class="token function">GetMovieDetails</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> moviesRepository<span class="token operator">:</span> MoviesRepository<span class="token punctuation">)</span> <span class="token operator">:</span>
    UseCase<span class="token operator">&lt;</span>MovieDetails<span class="token punctuation">,</span> Params<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span>params<span class="token operator">:</span> Params<span class="token punctuation">)</span> <span class="token operator">=</span> moviesRepository<span class="token punctuation">.</span><span class="token function">movieDetails</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>

    <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Params</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>Data Layer</strong>，暴露给 Domain Layer 的也是一个<strong>抽象类</strong>（重要，这样对 Domain Layer 屏蔽了底层的实现：网络、数据库、本地缓存），具体的实例则通过 DI 插入：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> MoviesRepository <span class="token punctuation">{</span><span class="token comment">// MoviesRepository 类是一个抽象类</span>
    <span class="token keyword">fun</span> <span class="token function">movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;</span><span class="token operator">&gt;</span>
    <span class="token keyword">fun</span> <span class="token function">movieDetails</span><span class="token punctuation">(</span>movieId<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> MovieDetails<span class="token operator">&gt;</span>

    <span class="token keyword">class</span> <span class="token function">Network</span><span class="token punctuation">(</span>
				<span class="token comment">// 下面这两个是实际实现网络/数据库读取的工具类</span>
        <span class="token keyword">private</span> <span class="token keyword">val</span> networkHandler<span class="token operator">:</span> NetworkHandler<span class="token punctuation">,</span>
        <span class="token keyword">private</span> <span class="token keyword">val</span> service<span class="token operator">:</span> MoviesService
    <span class="token punctuation">)</span> <span class="token operator">:</span> MoviesRepository <span class="token punctuation">{</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token operator">&lt;</span>Failure<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里真正实现 MoviesRepository 的逻辑，比如请求网络/数据库数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),gn={href:"https://fernandocejas.com/2018/05/07/architecting-android-reloaded/",target:"_blank",rel:"noopener noreferrer"},hn=n("p",null,"通过使用 Clean Architecture，我们将 Android APP 分为 UI Layer，Domain Layer，Data Layer 三部分，其中 Domain Layer 是 APP 的主要业务逻辑，不依赖于其他部分，和 Android API 无关，可移植，是 APP 的中心，而 UI Layer 专注处理与用户的交互，而 Data Layer 则实际负责数据读写，这部分的实现可以自由切换。",-1),bn=n("h1",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),fn=n("p",null,"从 MVC、MVP，到 MVVM、MVI，再到结合 Clean Architecture，随着 Android 开发架构的演进，代码层级越多，抽象越深，带来的是不同层级之间耦合降低，各个层级的关注点分离，更容易测试和维护。",-1),wn=n("h1",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),yn={href:"https://developer.android.com/topic/architecture",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://proandroiddev.com/how-to-architect-android-apps-a-deep-dive-into-principles-not-rules-2f1eb7f26402",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165",target:"_blank",rel:"noopener noreferrer"},An={href:"https://fernandocejas.com/blog/engineering/2014-09-03-architecting-android-the-clean-way/",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/android10/Android-CleanArchitecture-Kotlin",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://fernandocejas.com/2018/05/07/architecting-android-reloaded/",target:"_blank",rel:"noopener noreferrer"};function Ln(Dn,Pn){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,u,d,n("figure",null,[k,n("figcaption",null,[n("a",v,[s("https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md"),e(a)])])]),n("p",null,[s("source: "),n("a",m,[s("https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md"),e(a)])]),g,n("figure",null,[h,n("figcaption",null,[n("a",b,[s("https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42"),e(a)])])]),n("p",null,[s("source: "),n("a",f,[s("https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42"),e(a)])]),n("p",null,[s("关于 MVP 的代码实现，可以参考这个"),n("a",w,[s("项目"),e(a)]),s("。下面是一个简单的示例代码，参考了这个"),n("a",y,[s("文章"),e(a)]),s("：")]),_,n("figure",null,[V,n("figcaption",null,[n("a",M,[s("https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7d"),e(a)])])]),n("p",null,[s("source: "),n("a",A,[s("https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7"),e(a)])]),I,n("p",null,[s("页面的更新和用户事件处理都由 "),C,s(" 自己处理（比如用户"),L,s("之后，View 调用 "),D,s(" 请求通过"),P,s("请求网络/数据库，得到并更新"),x,s("后，View 监听到数据并刷新"),E,s("），"),R,s("。而且 Jetpack 官方提供了 LiveData/StateFlow 等可以监听 Activity 等的生命周期，降低了内存泄露风险（参考："),n("a",U,[s("https://blog.csdn.net/u011033906/article/details/118113466"),e(a)]),s("）。")]),n("p",null,[s("ViewModel 提供数据的读写方法之后，通过使用 DataBinding，可以实现 View 和 ViewMode"),n("strong",null,[s("l"),n("a",S,[s("双向数据绑定"),e(a)])]),s("（具体的代码实现可以参考"),n("a",j,[s("TicTacToe-MVVM"),e(a)]),s("）。")]),F,n("figure",null,[B,n("figcaption",null,[n("a",N,[s("https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3"),e(a)])])]),n("p",null,[s("source: "),n("a",T,[s("https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3"),e(a)])]),z,n("p",null,[s("代码实现如下（参考自："),n("a",q,[s("https://github.com/myofficework000/MVI-JetpackCompose-Github"),e(a)]),s("）：")]),O,n("figure",null,[H,n("figcaption",null,[n("a",K,[s("https://www.scaler.com/topics/mvi-architecture-android/"),e(a)])])]),n("p",null,[s("source: "),n("a",G,[s("https://www.scaler.com/topics/mvi-architecture-android/"),e(a)])]),J,n("blockquote",null,[n("p",null,[s("💡 注意 Clean Architecture 是一种架构思想，本文只介绍基于 MVVM/MVI 的实现，基于 MVP 的实现可参考 "),n("a",X,[s("android-clean-architecture-boilerplate"),e(a)]),s("。")])]),Q,W,n("p",null,[s("source: "),n("a",Y,[s("https://developer.android.com/topic/architecture?hl=zh-cn"),e(a)])]),Z,$,n("figure",null,[nn,n("figcaption",null,[n("a",sn,[s("https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29"),e(a)])])]),n("p",null,[s("source: "),n("a",an,[s("https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29"),e(a)])]),en,n("figure",null,[tn,n("figcaption",null,[n("a",on,[s("https://developer.android.com/topic/architecture/ui-layer"),e(a)])])]),n("p",null,[s("source: "),n("a",pn,[s("https://developer.android.com/topic/architecture/ui-layer"),e(a)])]),n("blockquote",null,[n("p",null,[s("⚠️ "),n("a",cn,[ln,e(a)]),s("。异步操作不应是创建对象时的附带效应，因为异步代码在对象完全初始化之前可能会对该对象执行读写操作。这也称为对象泄露，可能会导致细微且难以诊断的错误。使用 Compose 状态时，这一点尤为重要。当 ViewModel 存储了 Compose 状态字段时，请勿在更新 Compose 状态字段的 ViewModel 的 init 块中启动协程，否则可能会出现 IllegalStateException。")])]),n("p",null,[s("看一个 Clean Architecture 在 Andorid 中代码实现（"),n("a",rn,[s("Android-CleanArchitecture-Kotlin"),e(a)]),s("）：")]),un,n("figure",null,[dn,n("figcaption",null,[n("a",kn,[s("https://fernandocejas.com/2018/05/07/architecting-android-reloaded/"),e(a)])])]),n("p",null,[s("source: "),n("a",vn,[s("https://fernandocejas.com/2018/05/07/architecting-android-reloaded"),e(a)])]),mn,n("p",null,[s("上述代码的详细分析可以参考作者的文章"),n("a",gn,[s("《构建 Android...重装上阵》"),e(a)]),s("，这里简要分析一下：")]),hn,bn,fn,wn,n("p",null,[s("《Android 架构指南》"),n("a",yn,[s("https://developer.android.com/topic/architecture"),e(a)])]),n("p",null,[s("《The Clean Architectur uncle-bob》"),n("a",_n,[s("https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"),e(a)])]),n("p",null,[s("《How to architect Android apps: a deep dive into principles, not rules 如何构建 Android 应用程序：深入探讨原则，而不是规则》"),n("a",Vn,[s("https://proandroiddev.com/how-to-architect-android-apps-a-deep-dive-into-principles-not-rules-2f1eb7f26402"),e(a)])]),n("p",null,[s("《干净的架构  —  初学者指南》"),n("a",Mn,[s("https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165"),e(a)])]),n("p",null,[s("《Architecting Android...The clean way?》"),n("a",An,[s("https://fernandocejas.com/blog/engineering/2014-09-03-architecting-android-the-clean-way/"),e(a)])]),n("p",null,[s("《Android - Clean Architecture - Kotlin》"),n("a",In,[s("https://github.com/android10/Android-CleanArchitecture-Kotlin"),e(a)])]),n("p",null,[s("《构建 Android...重装上阵》"),n("a",Cn,[s("https://fernandocejas.com/2018/05/07/architecting-android-reloaded/"),e(a)])])])}const Rn=o(l,[["render",Ln],["__file","6f46f598.html.vue"]]);export{Rn as default};
