import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-77b42b64.js";const i={},u=e(`<p>Flutter 是 Google 提出的跨平台开发框架，使用 Dart 语言，支持 Android，IOS 系统。Flutter 一个重要的概念即是——<em>“万物皆控件（Widget）”</em>，像<code>Padding</code>,<code>Center</code>等都是 Widget。</p><p>Widget 和 Android 中的 View 很相似但又有不同，Widget 一旦生成便“一成不变”，直到下一次因为 Widget 更改或者 state 更新而被重新创建（Flutter’s framework creates a new tree of widget instances.），而 View 则只会被<code>drawn</code>一次，直到<code>invalidate</code>方法被调用。</p><p>本文主要记录一下 Flutter 中两个重要的控件：StatelessWidget 和 StatefulWidget，以及 Flutter 开发的一些基础知识。</p><h2 id="flutter-基础知识" tabindex="-1"><a class="header-anchor" href="#flutter-基础知识" aria-hidden="true">#</a> Flutter 基础知识</h2><p>Flutter 以 Dart 开发，其工程基本的结构如下：</p><ul><li>android</li><li>ios</li><li>lib <ul><li>main.dart</li></ul></li><li>pubspec.yaml //Flutter 工程的配置信息</li></ul><p>Flutter 项目启动后会首先加载<code>/lib/main.dart</code>中的<code>main()</code>方法。<br> 一个标准的 material app 的 main.dart 内容如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;./product_manager.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在 main() 方法中调用了 material 的 runApp() 方法，里面传入了要展示的 Widget——APP 的界面，相当于 Android 的 setContentView()</span>

<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>
        primarySwatch<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>deepOrange
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span><span class="token comment">//脚手架，一个预制的 APP 界面结构，也可以使用自定义 Widget</span>
        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
          title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;EasyList&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> <span class="token class-name">ProductManager</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//这里是自定义的控件，布局信息主要在这里展示</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="statelesswidget-statefulwidget" tabindex="-1"><a class="header-anchor" href="#statelesswidget-statefulwidget" aria-hidden="true">#</a> StatelessWidget &amp; StatefulWidget</h2><p>StatelessWidget 和 StateFulWidget 区别在于：前者一旦创建，状态便不会再更改，而后者则可以动态改变 State 从而使 flutter 改变其状态。但是两者都会在每一帧被 rebuild。</p><h3 id="statelesswidget" tabindex="-1"><a class="header-anchor" href="#statelesswidget" aria-hidden="true">#</a> StatelessWidget</h3><blockquote><p>A <code>StatelessWidget</code> is just what it sounds like—a widget with no state information.</p></blockquote><p>StatelessWidget 一旦创建便不会更改，其状态只和构造函数中的参数有关。下面是一个 StatelessWidget 示例，一般只需要重写其 build() 方法，返回要展示的控件即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">CustomerWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在这里构建一个页面并返回</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="statefulwidget" tabindex="-1"><a class="header-anchor" href="#statefulwidget" aria-hidden="true">#</a> StatefulWidget</h3><blockquote><p><code>StatefulWidget</code> has a <code>State</code> object that stores state data across frames and restores it.</p></blockquote><p>StatefulWidget 可以通过动态更改其包含的 State，从而使 flutter 在下一次更新界面时依据 state 更新 StateWidget，<em>本质上还是更新了一个可以在多帧之间存活的 State，在下一帧更新控件</em>。</p><p>下面是一个 StatefulWidget 的示例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ProductManager</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatefulWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ProductManagerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProductManagerState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductManager</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">CustomerWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以注意到 StatefulWidget 重写了<code>createState()</code>，而该方法返回了自定义的<code>ProductManagerState</code>类对象，在该类中<code>build()</code>方法实现和 StatelessWidget 中的方法类似，返回要展示的页面控件。</p><p>两者的不同之处在于，StatefulWidget 中可以调用<code>setState()</code>，更改其相应的<code>state</code>，以便告诉 flutter 在下一次 rebuild 的时候更新 UI。</p><p>StatelessWidget 要想实现动态更新其内容，可以在其外部包裹一层 StatefulWidget，通过 StatefulWidget 更改状态 state，将更改后的 state 传给 StatelessWidget，从而间接更新了 StatelessWidget 的状态。</p><p>可以通过对该方法就行包装，使得在 StatelessWidget 控件中调用 StatefulWidget 控件的<code>setState()</code>方法，达到刷新页面的效果：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// StatefulWidget</span>
  <span class="token keyword">void</span> <span class="token function">aFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// update UI</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token class-name">AStatelessWidget</span><span class="token punctuation">(</span>aFun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将该方法传入 StatelessWidget 中</span>
<span class="token comment">// StatelessWidget</span>
<span class="token keyword">final</span> <span class="token class-name">Function</span> aFun
<span class="token class-name">AStatelessWidget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aFun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收传入的方法</span>
<span class="token function">aFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行该方法，从而实现调用 StatelessWidget 中的方法也可以刷新 UI</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与-android-的对比" tabindex="-1"><a class="header-anchor" href="#与-android-的对比" aria-hidden="true">#</a> 与 Android 的对比</h2><h3 id="intent" tabindex="-1"><a class="header-anchor" href="#intent" aria-hidden="true">#</a> Intent</h3><p>Android 的 Intent 有两个主要作用：</p><ul><li>Activity 间跳转</li><li>组件间传递数据</li></ul><p>Flutter 对此相应：</p><ul><li>使用 Navigator 和<code>Route</code>s 实现在同一个“Activity”中不同的界面间（ “screen”or“page”）跳转（push，pop），Navigator 类似于 Android 中的 Activity 栈。</li><li>通过 Android 原生 Intent 组件获取到其他 App 传来的数据，然后中通过下面的方法实现 Android 和 Flutter 交互：</li></ul><p>示例代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token comment">//Android</span>
 <span class="token class-name">MethodChannel</span><span class="token punctuation">(</span><span class="token function">getFlutterView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;app.channel.shared.data&quot;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setMethodCallHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodChannel.MethodCallHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token metadata function">@Override</span>
        public <span class="token keyword">void</span> <span class="token function">onMethodCall</span><span class="token punctuation">(</span><span class="token class-name">MethodCall</span> methodCall<span class="token punctuation">,</span> <span class="token class-name">MethodChannel.Result</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>methodCall<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;getSharedText&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>sharedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sharedText <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//Flutter</span>
 <span class="token keyword">class</span> _SampleAppPageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SampleAppPage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> platform <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">MethodChannel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;app.channel.shared.data&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> dataShared <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;No data&quot;</span></span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getSharedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>dataShared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getSharedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> sharedData <span class="token operator">=</span> <span class="token keyword">await</span> platform<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;getSharedText&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataShared <span class="token operator">=</span> sharedData<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h3><p>Flutter 是单线程的，他的线程和 Android 的 UI 线程绑定，在进行网络请求，IO 操作等时，可以使用<code>sync/await</code> 在执行完耗时操作后，再去更新 state 刷新 UI。</p><blockquote><p>Since Flutter is single threaded and runs an event loop (like Node.js), you don’t have to worry about thread management or spawning background threads. If you’re doing I/O-bound work, such as disk access or a network call, then you can safely use async/await and you’re all set.</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> dataURL <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span></span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">http<span class="token punctuation">.</span></span>Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>dataURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    widgets <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果有特别频繁的 cpu 计算以至于能导致 UI 挂起，可以考虑使用<code>Isolate</code>s 利用 CPU 多核心处理任务，但是这样就不能和主线程共享数据，通过<code>ReceivePort</code>，<code>SendPort</code>等传递数据。</p><blockquote><p>Isolates(隔离) are separate execution threads that do not share any memory with the main execution memory heap. This means you can’t access variables from the main thread, or update your UI by calling <code>setState()</code>. Unlike Android threads, Isolates are true to their name, and cannot share memory (in the form of static fields, for example).</p></blockquote><h3 id="本地资源" tabindex="-1"><a class="header-anchor" href="#本地资源" aria-hidden="true">#</a> 本地资源</h3><p>截止 Flutter beta 2 仍然不能直接访问 Android assets 或者其他本地资源，但是 Android 可以访问 flutter 的 assets 资源：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>val flutterAssetStream <span class="token operator">=</span> assetManager<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;flutter_assets/assets/my_flutter_asset.png&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 Channel，flutter 可以间接访问 Android 资源，反之亦然。</p>`,42),d=n("p",null,"主要是通过 Channel 完成，可以称之为隧道。主要是 MethodChannel 和 MessageChannel 两种，第一种是调用方法，第二种是传递信息。首先通信的双方是 Flutter 和本地操作系统或者应用，而且方法的调用和消息的方法可以从任何一方发起，类似 RPC（远程过程调用）。",-1),r=n("p",null,"作者：黄马",-1),k={href:"https://juejin.im/post/5b35a75e51882574ea3a25e3",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",-1),v=e(`<h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><p>Flutter 生命周期没有 Android 中那么“重要”，可以重写 <code>didChangeAppLifecycleState()</code> 监听。</p><ul><li><code>inactive</code> — 应用处于非活动状态，不接受输入。iOS</li><li><code>paused</code> — 应用在后台运行，不可见，不接受输入。类似 Android 的<code>onPause()</code></li><li><code>resumed</code> — 应用可见，并接受输入。类似 Android 的<code>onPostResume()</code></li><li><code>suspending</code> — 应用请求暂停。类似 Android 的<code>onStop()</code></li></ul><h3 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h3><p>Flutter 有布局 Widget 如：</p><ul><li>Column 列</li><li>Row 行</li><li>Stack 左上角堆积，类似 FrameLayout</li></ul><h3 id="点击事件" tabindex="-1"><a class="header-anchor" href="#点击事件" aria-hidden="true">#</a> 点击事件</h3><p>FLutter 中的“<code>onClick()</code>”: <code>onPressed</code>,<code>onTap</code>等等。</p><p>添加点击事件，在 Widget 外面添加一个<code>GestureDetector</code>Widget：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>
  child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>
      padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;row tapped&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,11),h={href:"https://www.youtube.com/watch?v=GLSG_Wh_YWc",target:"_blank",rel:"noopener noreferrer"},b={href:"https://flutter.io/flutter-for-android/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.im/post/5b35a75e51882574ea3a25e3",target:"_blank",rel:"noopener noreferrer"};function f(S,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[d,r,n("p",null,[s("链接：掘金 "),n("a",k,[s("https://juejin.im/post/5b35a75e51882574ea3a25e3"),t(a)])]),m]),v,n("p",null,[n("a",h,[s("Flutter Tutorial for Beginners - Build iOS and Android Apps with Google's Flutter & Dart"),t(a)])]),n("p",null,[n("a",b,[s("Flutter for android"),t(a)])]),n("p",null,[n("a",g,[s("Flutter 访问本地资源"),t(a)])])])}const W=p(i,[["render",f],["__file","e35c106d.html.vue"]]);export{W as default};
