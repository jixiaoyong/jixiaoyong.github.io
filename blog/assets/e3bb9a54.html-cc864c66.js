import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as a,c as l,a as o,b as e,d as r,e as g}from"./app-43e1fc60.js";const s={},d={href:"http://gityuan.com/android/",target:"_blank",rel:"noopener noreferrer"},p=o("p",null,"Android系统大体分为4个模块，从底层开始依次是1.linux内核、2.系统库+Android运行时、3.框架层、4.应用层。",-1),c=o("figure",null,[o("img",{src:"https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/AndroidSystemArchitecture.png",alt:"",tabindex:"0",loading:"lazy"}),o("figcaption")],-1),u=o("p",null,"下图描述了Android系统从开机到Apk运行的整个流程。",-1),m=o("img",{src:"https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/androidBoot.jpg",alt:"系统启动框架图，来自gityuan.com",tabindex:"0",loading:"lazy"},null,-1),h={href:"http://xn--gityuan-295on32q.com",target:"_blank",rel:"noopener noreferrer"},_=g('<p>流程如下：<code>Loader</code> -&gt; <code>Kernel</code> -&gt; <code>Native</code>-&gt; <code>Framework</code> -&gt; <code>App</code></p><p><strong>Loader层</strong></p><ol><li>Boot ROM ：开机时，引导芯片从ROM读取读取初始化代码，加载引导程序到RAM中。</li><li>Boot Loader：是启动Android系统之前的引导程序，检查RAM、初始化硬件参数等。</li></ol><p><strong>Kernel层</strong>（即Android内核层，进入Android系统）</p><ol><li>swapper进程（pid=0）：Boot Loader启动swapper（idle）进程，是由内核创建的第一个进程，用来初始化进程管理、内存管理、驱动等等。</li><li>kthreadd进程（pid=2）：是Linux系统的内核进程，<strong>是所有内核进程的鼻祖</strong>。</li></ol><hr><p><strong>Syscall</strong>，在Native和Kernel之间的系统调用层。</p><hr><p><strong>Native层</strong></p><ol><li>init进程（pid=1）：由swapper进程创建，<strong>是所有用户进程鼻祖</strong></li><li>init进程孵化出用户守护进程、启动ServiceManager管理系统服务，启动开机动画Bootnaim。</li></ol><hr><p><strong>JNI</strong>，Java层和Native（C/C++）层之间。</p><hr><p><strong>Framework层</strong></p><ol><li>Zygote进程：由init进程fork生成，是<strong>Android系统第一个java进程，是所有java进程的父进程</strong></li><li>SystemServer进程：由Zygote进程fork而来，<strong>是Zygote孵化的第一个进程</strong>，负责启动和管理整个<strong>java framework</strong>，如ActivityManager、PowerManager...</li><li>MediaServer进程：由init进程fork而来，负责启动和管理整个<strong>C++ framework</strong></li></ol><p><strong>APP层</strong></p><ol><li>Launcher：<strong>Zygote进程孵化的第一个App进程</strong>，桌面App。</li><li>其他由Zygote进程孵化的系统进程（Browser、Phone...）和非系统app进程。</li></ol><p>扼要内容如图：</p><figure><img src="https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/AndroidBootImg.png" alt="系统启动示意图" tabindex="0" loading="lazy"><figcaption>系统启动示意图</figcaption></figure><p>Android常用的通信方式</p><ol><li>Binder</li><li>Socket</li><li>Handler</li></ol><p><strong>Binder/Socket用于进程间（都具有独立的地址空间）通信，而Handler消息机制用于同进程的线程间（共享内存空间）通信</strong></p><p>在Android系统中：</p><ul><li>Zygote进程 --&gt; Socket机制</li><li>SystemServer、MediaServer、App之间 --&gt; Binder IPC</li><li>同一进程不同线程间 --&gt; Handler</li></ul>',24);function f(y,A){const t=n("ExternalLinkIcon");return a(),l("div",null,[o("blockquote",null,[o("p",null,[e("说明：本文基于"),o("a",d,[e("Android系统开篇 - Gityuan博客 | 袁辉辉博客 "),r(t)]),e(" 的学习笔记整理")])]),p,c,u,o("figure",null,[m,o("figcaption",null,[e("系统启动框架图，"),o("a",h,[e("来自gityuan.com"),r(t)])])]),_])}const x=i(s,[["render",f],["__file","e3bb9a54.html.vue"]]);export{x as default};
