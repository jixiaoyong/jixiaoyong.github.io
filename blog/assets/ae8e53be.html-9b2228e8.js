import{_ as t,r as o,o as l,c as p,a as n,b as s,d as e,e as i}from"./app-16aa99a6.js";const c={},r=n("p",null,"Flutter 中的 scrollable widget 根据实现方式的不同，可以分为两大类：",-1),u={href:"https://jixiaoyong.github.io/blog/posts/d3bdcb53.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://jixiaoyong.github.io/blog/posts/60f8d92f.html",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>上述所有的 scrollable widget 其底层逻辑依然是对 Scrollable 的封装，其内部处理了 ScrollController、ScrollPosition（viewport 的 offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理 scrollable view 的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出 ScrollNotification）、RawGestureDetector（手势识别）等等一系列与 scroll 有关的逻辑，从而使得其他 scrollable view 能够比较方便的实现 scroll 效果。</p><p>本文只对 NestedScrollView 的源码实现做一简单分析：它是如何实现联动滚动效果，有什么优势和限制。</p><p>官方对其定义是：“A scrolling view inside of which can be nested other scrolling views, with their scroll positions being intrinsically linked.”。</p><p>顾名思义，NestedScrollView 是一个可以在<strong>内部嵌套其他 scrolling views 的滑动 View</strong>，按照所处位置的不同，使用<code>headerSliverBuilder</code>提供 header 部分的 scrolling views（限制只能是可以产生 RenderSliver 的 widget），而使用<code>body</code>提供在填充 header 之下所有区域的 widget（限制只能是产生 RenderBox 的 widget）。</p><h2 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h2><p>下面是一个 NestedScrollView 经典的使用方式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _tabBar <span class="token operator">=</span> <span class="token class-name">TabBar</span><span class="token punctuation">(</span>
      isScrollable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      tabs<span class="token punctuation">:</span> tabs
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Tab</span><span class="token punctuation">(</span>
                child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
                  height<span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>
                  child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tab</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
      body<span class="token punctuation">:</span> <span class="token class-name">DefaultTabController</span><span class="token punctuation">(</span><span class="token comment">// 此处的 controller 是给 TabBar 和 TabBarView 使用的</span>
          length<span class="token punctuation">:</span> tabs<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">NestedScrollView</span><span class="token punctuation">(</span>
            headerSliverBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> innerScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token comment">// 必须是能够产生 RenderSliver 的 Widget</span>
                <span class="token class-name">SliverAppBar</span><span class="token punctuation">(</span>
                  pinned<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                  toolbarHeight<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                  expandedHeight<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
                  bottom<span class="token punctuation">:</span> _tabBar<span class="token punctuation">,</span><span class="token comment">//在这里传入 TabBar</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            body<span class="token punctuation">:</span> <span class="token class-name">TabBarView</span><span class="token punctuation">(</span><span class="token comment">// body 必须是能产生 RenderBox 的 widget</span>
                children<span class="token punctuation">:</span> tabs
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span><span class="token comment">// 这里的列表滑动和 header 的滑动联动</span>
                          children<span class="token punctuation">:</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>
                              <span class="token number">100</span><span class="token punctuation">,</span>
                              <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
                                  height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
                                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello TabBarView </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">   </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，NestedScrollView 包括了 headerSliverBuilder 创建的 header 部分，以及 header 下面的 body 部分，二者的滑动效果联动在一起，好像是同一个 scrolling view。比如，当向上滑动 TabBarView 中列表时，会先向上滑动 header 内容，等到 header 无需再滑动才会向上滑动列表。而如果没有 NestedScrollView 的话，ListView 和 header 的滑动是独立的两个事件。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p>NestedScrollView 本质上还是对 CustomScrollView（的子类_NestedScrollViewCustomScrollView）的进一步封装。</p><p>它借助于_NestedScrollCoordinator 的<code>_outerController</code> 和<code>_innerController</code> 这两个分别传入_NestedScrollViewCustomScrollView（header 和 body 其实是他的 <code>slivers</code>，其最大滑动范围为 header 的 scrollExtent）和 body 中的 scrolling view（其最大滑动范围为内部滑动视图最大滑动范围之和）的 ScrollController，创建并应用_NestedScrollPosition；当用户滑动等事件发生，通过_NestedScrollViewCustomScrollView 的_NestedScrollPosition 接收外部所有的滑动事件全部归集到_NestedScrollCoordinator（比如 applyUserOffset 方法）统一处理，按照 ScrollPhysics 等分别修改 header 和 body 的 ScrollPosition，从而实现了这两处滑动事件的联动。</p><p>所以，在分析 NestedScrollView 的时候，主要涉及到以下类：</p><ul><li><strong>NestedScrollViewState</strong>：是 NestedScrollView 真正执行逻辑的类，将_NestedScrollCoordinator、_NestedScrollViewCustomScrollView、ScrollController 等组装在一起，对外暴露操纵_NestedScrollCoordinator 的方法</li><li>_NestedScrollViewCustomScrollView：继承自 CustomScrollView，主要作用是创建自定义的 NestedScrollViewViewport，后者又创建了 RenderNestedScrollViewViewport 主要用途是更新 SliverOverlapAbsorberHandle</li><li><strong>_NestedScrollCoordinator</strong>：处理_NestedScrollPosition 转发过来的滑动事件，将其分发给 header（其实是容纳 header 和 body 的_NestedScrollViewCustomScrollView）和 body。</li><li><strong>_NestedScrollController</strong>：给_NestedScrollCoordinator 的 inner 和 outer 的 ScrollController，内部创建_NestedScrollPosition。</li><li><strong>_NestedScrollPosition</strong>：给_NestedScrollCoordinator 的 inner 和 outer 的 ScrollPosition，会将 animateTo、jumpTo、pointerScroll、updateCanDrag、hold、drag 等和滑动有关的事件转发给_NestedScrollCoordinator 统一处理。</li><li>其余辅助类</li></ul><p>下面对这些类逐一分析：</p><h3 id="nestedscrollviewstate" tabindex="-1"><a class="header-anchor" href="#nestedscrollviewstate" aria-hidden="true">#</a> NestedScrollViewState</h3><p>NestedScrollView 是 StatefulWidget，其主要逻辑都在创建的 State——NestedScrollViewState 中。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NestedScrollView</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> <span class="token function">_buildSlivers</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ScrollController</span> innerController<span class="token punctuation">,</span> bool bodyIsScrolled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// _buildSlivers 的主轴尺寸为 header 的 scrollExtent+viewport 主轴尺寸，所以创建好的 viewport 滑动范围</span>
    <span class="token comment">// 为 header 的滑动 scrollExtent</span>
    <span class="token keyword">return</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">headerSliverBuilder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> bodyIsScrolled<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// header 部分</span>
      <span class="token class-name">SliverFillRemaining</span><span class="token punctuation">(</span><span class="token comment">//body 部分，其尺寸为所处的 viewport 的主轴尺寸</span>
        child<span class="token punctuation">:</span> <span class="token class-name">PrimaryScrollController</span><span class="token punctuation">(</span>
          controller<span class="token punctuation">:</span> innerController<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> body<span class="token punctuation">,</span><span class="token comment">// SliverFillRemaining 只能容纳可以产生 RenderBox 的 widget</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">NestedScrollViewState</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">NestedScrollViewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NestedScrollView._buildSlivers 方法将 headerSliverBuilder 创建的 header 和 body 放到一个列表中，会被 NestedScrollViewState 传入到自定义的 CustomScrollView——_NestedScrollViewCustomScrollView 中。</p><p>需要注意 SliverFillRemaining 默认会创建_SliverFillRemainingWithScrollable，后者创建的 RenderObject 是_SliverFillRemainingWithScrollable。在 RenderSliverFillRemainingWithScrollable.performLayout 方法会使用他所处 viewport 主轴方向的尺寸作为自己的 scrollExtent。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SliverConstraints</span> constraints <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraints<span class="token punctuation">;</span>
    <span class="token keyword">final</span> double extent <span class="token operator">=</span> constraints<span class="token punctuation">.</span>remainingPaintExtent <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>overlap<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>
        minExtent<span class="token punctuation">:</span> extent<span class="token punctuation">,</span>
        maxExtent<span class="token punctuation">:</span> extent<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> double paintedChildSize <span class="token operator">=</span> <span class="token function">calculatePaintOffset</span><span class="token punctuation">(</span>constraints<span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> extent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>paintedChildSize<span class="token punctuation">.</span>isFinite<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>paintedChildSize <span class="token operator">&gt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>
      scrollExtent<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>viewportMainAxisExtent<span class="token punctuation">,</span><span class="token comment">// 这里使用的是 viewport 的主轴尺寸</span>
      paintExtent<span class="token punctuation">:</span> paintedChildSize<span class="token punctuation">,</span>
      maxPaintExtent<span class="token punctuation">:</span> paintedChildSize<span class="token punctuation">,</span>
      hasVisualOverflow<span class="token punctuation">:</span> extent <span class="token operator">&gt;</span> constraints<span class="token punctuation">.</span>remainingPaintExtent <span class="token operator">||</span> constraints<span class="token punctuation">.</span>scrollOffset <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token function">setChildParentData</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">,</span> constraints<span class="token punctuation">,</span> geometry<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说无论 inner scrolling view 的尺寸如何，它（下面称其为 body）占用的 scrollExtent 都是所处的 viewport 的主轴尺寸 mainAxisExtent；再加上 headerSliverBuilder 方法创建的 header，导致_NestedScrollViewCustomScrollView 所创建的 viewport 的最大可滑动范围_maxScrollExtent（其值等于 header+body 的 scrollExtent）一定大于 viewport 的主轴方向尺寸 mainAxisExtent，从而计算出_NestedScrollViewCustomScrollView 的 ScrollPosition 的最大滑动范围（maxScrollExtent）为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>_outScrollPosition<span class="token punctuation">.</span>maxScrollExtent <span class="token operator">=</span> viewport<span class="token punctuation">.</span>_maxScrollExtent <span class="token operator">-</span> viewport<span class="token punctuation">.</span>mainAxisExtent
                <span class="token operator">=</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span>scrollExtent <span class="token operator">+</span> header<span class="token punctuation">.</span>scrollExtent<span class="token punctuation">)</span> <span class="token operator">-</span> viewport<span class="token punctuation">.</span>mainAxisExtent
                <span class="token operator">=</span> <span class="token punctuation">(</span>viewport<span class="token punctuation">.</span>mainAxisExtent <span class="token operator">+</span> header<span class="token punctuation">.</span>scrollExtent<span class="token punctuation">)</span> <span class="token operator">-</span> viewport<span class="token punctuation">.</span>mainAxisExtent
                <span class="token operator">=</span> header<span class="token punctuation">.</span>scrollExtent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，无论 NestedScrollView 的 body 内容尺寸如何，它为 header+body 分配的尺寸只比 viewport 的尺寸多出一个 header 的尺寸。这个也是 NestedScrollView 实现协调 header 和 body 滑动的基础。</p><p>让我们再看一下 NestedScrollViewState 的实现：</p><p>NestedScrollViewState 中一个重要的属性就是<code>_NestedScrollCoordinator? _coordinator</code>，它在<code>initState()</code>方法中初始化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NestedScrollViewState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedScrollView</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// inner 和 outer controller 都来自_coordinator</span>
  <span class="token class-name">ScrollController</span> <span class="token keyword">get</span> innerController <span class="token operator">=</span><span class="token operator">&gt;</span> _coordinator<span class="token operator">!</span><span class="token punctuation">.</span>_innerController<span class="token punctuation">;</span>
  <span class="token class-name">ScrollController</span> <span class="token keyword">get</span> outerController <span class="token operator">=</span><span class="token operator">&gt;</span> _coordinator<span class="token operator">!</span><span class="token punctuation">.</span>_outerController<span class="token punctuation">;</span>

  _NestedScrollCoordinator<span class="token operator">?</span> _coordinator<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _coordinator <span class="token operator">=</span> <span class="token function">_NestedScrollCoordinator</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">,</span>
      widget<span class="token punctuation">.</span>controller<span class="token punctuation">,</span><span class="token comment">// 注意这里传入了 widget 处获取的 controller</span>
      _handleHasScrolledBodyChanged<span class="token punctuation">,</span>
      widget<span class="token punctuation">.</span>floatHeaderSlivers<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能注意到，_NestedScrollCoordinator 中持有了 widget.controller，并且还会在 didChangeDependencies、didUpdateWidget 方法被调用时通过_NestedScrollCoordinator.setParent 方法更新，主要有两个作用：1. 获取 initialScrollOffset；2. 通过_outerPosition?.setParent 使得 widget.controller 可以监听 outerPosition 的变化。</p><p>然后，在 NestedScrollViewState.build 方法中，会创建_NestedScrollViewCustomScrollView 对象：</p><ul><li><p>将_coordinator!._outerController 作为其 controller，这样会创建，_outerPosition，后者会将_NestedScrollViewCustomScrollView 的事件转发给_coordinator，这样其接管了外层的滑动事件；</p></li><li><p>此外在 NestedScrollView._buildSlivers 方法中创建的 header 和 body 作为_NestedScrollViewCustomScrollView 也就是 CustomScrollView 的 slivers。</p><p>这也是创建 header 的<strong>NestedScrollView.headerSliverBuilder 只接受可以创建 RenderSliver 的 widget</strong>的原因。</p></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ScrollPhysics</span> scrollPhysics <span class="token operator">=</span> widget<span class="token punctuation">.</span>physics<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">applyTo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">ClampingScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">?</span><span class="token operator">?</span> widget<span class="token punctuation">.</span>scrollBehavior<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getScrollPhysics</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyTo</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">ClampingScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">const</span> <span class="token class-name">ClampingScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">_InheritedNestedScrollView</span><span class="token punctuation">(</span>
      state<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          _lastHasScrolledBody <span class="token operator">=</span> _coordinator<span class="token operator">!</span><span class="token punctuation">.</span>hasScrolledBody<span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">_NestedScrollViewCustomScrollView</span><span class="token punctuation">(</span>
            dragStartBehavior<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>dragStartBehavior<span class="token punctuation">,</span>
            scrollDirection<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>scrollDirection<span class="token punctuation">,</span>
            reverse<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>reverse<span class="token punctuation">,</span>
            physics<span class="token punctuation">:</span> scrollPhysics<span class="token punctuation">,</span>
            scrollBehavior<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>scrollBehavior <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">ScrollConfiguration</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>scrollbars<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 注意这里使用的从_coordinator 获取的_outerController</span>
            controller<span class="token punctuation">:</span> _coordinator<span class="token operator">!</span><span class="token punctuation">.</span>_outerController<span class="token punctuation">,</span>
            <span class="token comment">// 这里将 header 和 body 传入 slivers，</span>
            <span class="token comment">// _NestedScrollViewCustomScrollView 创建的 viewport 是继承自</span>
            <span class="token comment">// Viewport 的 NestedScrollViewViewport，其只接受可以创建</span>
            <span class="token comment">// RenderSliver 的 widget</span>
            slivers<span class="token punctuation">:</span> widget<span class="token punctuation">.</span><span class="token function">_buildSlivers</span><span class="token punctuation">(</span>
              context<span class="token punctuation">,</span>
              _coordinator<span class="token operator">!</span><span class="token punctuation">.</span>_innerController<span class="token punctuation">,</span>
              _lastHasScrolledBody<span class="token operator">!</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            handle<span class="token punctuation">:</span> _absorberHandle<span class="token punctuation">,</span>
            clipBehavior<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>clipBehavior<span class="token punctuation">,</span>
            restorationId<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>restorationId<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_NestedScrollViewCustomScrollView 继承自 CustomScrollView，主要作用是创建继承自 Viewport 的 NestedScrollViewViewport，而后者又主要负责创建和更新继承自 RenderViewport 的 RenderNestedScrollViewViewport——其在内部更新和维护 SliverOverlapAbsorberHandle。</p><blockquote><p><code>SliverOverlapAbsorberHandle</code>: Handle to provide to a <code>SliverOverlapAbsorber</code>, a <code>SliverOverlapInjector</code>, and an <code>NestedScrollViewViewport</code>, to shift overlap in a <code>NestedScrollView</code>.</p></blockquote><p>到目前位置，UI 展示部分的内容已经完成，我们的 NestedScrollView 可以将 header 和 body 显示在屏幕上面，但是如果要联动处理在 header 和 body 上面的滑动事件，还需要_NestedScrollCoordinator、_NestedScrollController 和_NestedScrollPosition 的配合。</p><h3 id="nestedscrollcontroller" tabindex="-1"><a class="header-anchor" href="#nestedscrollcontroller" aria-hidden="true">#</a> _NestedScrollController</h3><p>_NestedScrollController 继承自 ScrollController，其逻辑比较简单，主要添加了两项功能：</p><h4 id="创建-nestedscrollposition" tabindex="-1"><a class="header-anchor" href="#创建-nestedscrollposition" aria-hidden="true">#</a> 创建_NestedScrollPosition</h4><p>创建_NestedScrollPosition 的逻辑比较简单，主要是将 coordinator 也一并传入。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">ScrollPosition</span> <span class="token function">createScrollPosition</span><span class="token punctuation">(</span>
    <span class="token class-name">ScrollPhysics</span> physics<span class="token punctuation">,</span>
    <span class="token class-name">ScrollContext</span> context<span class="token punctuation">,</span>
    <span class="token class-name">ScrollPosition</span><span class="token operator">?</span> oldPosition<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_NestedScrollPosition</span><span class="token punctuation">(</span>
      coordinator<span class="token punctuation">:</span> coordinator<span class="token punctuation">,</span>
      physics<span class="token punctuation">:</span> physics<span class="token punctuation">,</span>
      context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>
      initialPixels<span class="token punctuation">:</span> initialScrollOffset<span class="token punctuation">,</span>
      oldPosition<span class="token punctuation">:</span> oldPosition<span class="token punctuation">,</span>
      debugLabel<span class="token punctuation">:</span> debugLabel<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在-scrollposition-变化时通知-coordinator" tabindex="-1"><a class="header-anchor" href="#在-scrollposition-变化时通知-coordinator" aria-hidden="true">#</a> 在 ScrollPosition 变化时通知 coordinator</h4><p>在 attach(ScrollPosition position) 中调用_scheduleUpdateShadow() 和_NestedScrollCoordinator 的 updateParent、updateCanDrag，对传入的 ScrollPosition 添加回调_scheduleUpdateShadow()。</p><p>在 detach(ScrollPosition position) 中调用_scheduleUpdateShadow()，对传入的 ScrollPosition 移除回调_scheduleUpdateShadow()。</p><p>而这个_scheduleUpdateShadow() 方法主要作用是异步执行 coordinator.updateShadow() 更新 NestedScrollView，实现滑动效果。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">_scheduleUpdateShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// We do this asynchronously for attach() so that the new position has had</span>
    <span class="token comment">// time to be initialized, and we do it asynchronously for detach() and from</span>
    <span class="token comment">// the position change notifications because those happen synchronously</span>
    <span class="token comment">// during a frame, at a time where it&#39;s too late to call setState. Since the</span>
    <span class="token comment">// result is usually animated, the lag incurred is no big deal.</span>
    <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token class-name">Duration</span> timeStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        coordinator<span class="token punctuation">.</span><span class="token function">updateShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nestedscrollposition" tabindex="-1"><a class="header-anchor" href="#nestedscrollposition" aria-hidden="true">#</a> _NestedScrollPosition</h3><p>在 inner scrolling widget 和 outer viewport 都使用_NestedScrollPosition，它追踪这些 viewport 使用的 offset，并且内部持有_NestedScrollCoordinator，所以此 class 上触发 activities 时，可以推迟或者影响 coordinator。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _NestedScrollPosition <span class="token keyword">extends</span> <span class="token class-name">ScrollPosition</span> <span class="token keyword">implements</span> <span class="token class-name">ScrollActivityDelegate</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> _NestedScrollCoordinator coordinator<span class="token punctuation">;</span> <span class="token comment">// 协调 inner 和 outer 滑动事件</span>
  <span class="token comment">// 是在 NestedScrollView 中传给_NestedScrollViewCustomScrollView 的 ScrollController</span>
  <span class="token class-name">ScrollController</span><span class="token operator">?</span> _parent<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span><span class="token class-name">ScrollController</span><span class="token operator">?</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _parent<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _parent <span class="token operator">=</span> value<span class="token punctuation">;</span>
    _parent<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将此 ScrollPosition 和_parent 绑定</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setparent" tabindex="-1"><a class="header-anchor" href="#setparent" aria-hidden="true">#</a> setParent</h4><p>_NestedScrollPosition.setParent 中，将自己和传入的 ScrollController 绑定在一起：</p><ul><li>将自身加入 ScrollController._positions</li><li>ScrollController 监听自身变化时执行 notifyListeners 通知监听者</li></ul><h4 id="absorb" tabindex="-1"><a class="header-anchor" href="#absorb" aria-hidden="true">#</a> absorb</h4><p>在 absorb 方法中将 activity 的 delegate 更新为当前 ScrollPosition：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">absorb</span><span class="token punctuation">(</span><span class="token class-name">ScrollPosition</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">absorb</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 部分 activity 会使用此来操作 scroll view</span>
    activity<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">updateDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applyclampeddragupdate" tabindex="-1"><a class="header-anchor" href="#applyclampeddragupdate" aria-hidden="true">#</a> applyClampedDragUpdate</h4><p>此方法返回的是没有使用的 delta，此方法不会主动创建 overscroll/underscroll，如果当前 ScrollPosition 在范围内，则不会发送 overscroll/underscroll；如果已经超出范围，则只会“减轻”这种情况，而不会“加重”。</p><p>之所以不会 overscroll，是因为 min 和 max 的取值限定了他们的范围，以一个垂直方向向下布局的滑动列表为例：</p><ul><li><p>delat &lt; 0，即向上滑动，范围是 min：-double.infinity ~ max：0（overscroll 时）或者 maxScrollExtent 和 pixels 中最大值（只能滑到最大范围）。</p><p>也就是说，向上滑动时，如果已经在顶部出现 overscroll（此时 pixels 应该为负值），那么最多滑动到 0（也就是恢复到初始位置），没有顶部 overscroll 时（此时 pixels 为正值，可能在 maxScrollExtent 范围内，也可能超出范围，即底部出现 overscroll），那么此时最多向上滑动 maxScrollExtent 和 pixels，也就是说要么不能超范围，要是超了范围，就不能再超了。</p><p>而最小滑动范围为-double.infinity，无论 pixels 正负，当其 delta 为负时，其值都只会增大，取值-double.infinity 是为了将 pixels 包含在内。</p></li><li><p>delta &gt; 0，即向下滑动，范围是 min：minScrollExtent 和 pixels 最小值 ~ double.infinity。</p><p>也就是说，向下滑动最小到初始位置，最大值不限定（因为此时可能 offset 已经由于某种原因超过 maxScrollExtent 了）。</p></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// Returns the amount of delta that was not used.</span>
  <span class="token comment">// Positive delta means going down (exposing stuff above), negative delta</span>
  <span class="token comment">// going up (exposing stuff below).</span>
  double <span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>double delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>delta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// If we are going towards the maxScrollExtent (negative scroll offset),</span>
    <span class="token comment">// then the furthest we can be in the minScrollExtent direction is negative</span>
    <span class="token comment">// infinity. For example, if we are already overscrolled, then scrolling to</span>
    <span class="token comment">// reduce the overscroll should not disallow the overscroll.</span>
    <span class="token comment">//</span>
    <span class="token comment">// If we are going towards the minScrollExtent (positive scroll offset),</span>
    <span class="token comment">// then the furthest we can be in the minScrollExtent direction is wherever</span>
    <span class="token comment">// we are now, if we are already overscrolled (in which case pixels is less</span>
    <span class="token comment">// than the minScrollExtent), or the minScrollExtent if we are not.</span>
    <span class="token comment">//</span>
    <span class="token comment">// In other words, we cannot, via applyClampedDragUpdate, _enter_ an</span>
    <span class="token comment">// overscroll situation.</span>
    <span class="token comment">//</span>
    <span class="token comment">// An overscroll situation might be nonetheless entered via several means.</span>
    <span class="token comment">// One is if the physics allow it, via applyFullDragUpdate (see below). An</span>
    <span class="token comment">// overscroll situation can also be forced, e.g. if the scroll position is</span>
    <span class="token comment">// artificially set using the scroll controller.</span>

    <span class="token comment">// delat &lt; 0，即向上滑动，范围是 min：-double.infinity ~ max：0</span>
    <span class="token comment">//（overscroll 时）或者 maxScrollExtent 和 pixels 中最大值（只能滑到最大范围）</span>
    <span class="token comment">// delta &gt; 0，即向下滑动，范围是 min：minScrollExtent 和 pixels 最小值 ~</span>
    <span class="token comment">// double.infinity（也就是说，向下滑动最小到初始位置，最大值不限定</span>
    <span class="token comment">// [因为此时可能 offset 已经由于某种原因超过 maxScrollExtent 了]）</span>
    <span class="token keyword">final</span> double min <span class="token operator">=</span> delta <span class="token operator">&lt;</span> <span class="token number">0.0</span>
      <span class="token operator">?</span> <span class="token operator">-</span>double<span class="token punctuation">.</span>infinity<span class="token comment">// 向上滑动</span>
      <span class="token punctuation">:</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minScrollExtent<span class="token punctuation">,</span> pixels<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向下滑动</span>
    <span class="token comment">// The logic for max is equivalent but on the other side.</span>
    <span class="token comment">// 这里的逻辑是，如果向下滑动，那么 max 为无限大；</span>
    <span class="token comment">// 如果向上滑动并且已经 overscroll 了，那么 max 是 0（即恢复初始位置），否则为 maxScrollExtent 即最大滑动范围</span>
    <span class="token keyword">final</span> double max <span class="token operator">=</span> delta <span class="token operator">&gt;</span> <span class="token number">0.0</span>
      <span class="token operator">?</span> double<span class="token punctuation">.</span>infinity<span class="token comment">// 向下滑动</span>
      <span class="token comment">// If pixels &lt; 0.0, then we are currently in overscroll. The max should be</span>
      <span class="token comment">// 0.0, representing the end of the overscrolled portion.</span>
      <span class="token comment">// pixels 比 maxScrollExtent 大可能是由于 jumpTo 等情况，此时 max 为 pixels 表示不能继续滑动超出此值</span>
      <span class="token punctuation">:</span> pixels <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token punctuation">:</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxScrollExtent<span class="token punctuation">,</span> pixels<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向上滑动</span>
    <span class="token keyword">final</span> double oldPixels <span class="token operator">=</span> pixels<span class="token punctuation">;</span>
    <span class="token comment">//newPixels 是可以应用到 ScrollPosition 的 pixels，其范围：</span>
    <span class="token comment">// 1. delta 为负，即向上滑动，pixels - delta = pixels + |delta| &gt; pixels，</span>

    <span class="token comment">// 1.1 当 pixels 小于 0 也就是存在 overscroll 时，其范围是 pixels + |delta|~0，</span>
    <span class="token comment">// 此时 overscroll 偏移量为 pixels + |delta|，newPixels 在 pixels + |delta|~0 之间，【不会再加深越界】</span>
    <span class="token comment">// 1.2 当 pixels 大于等于 0 也就是不存在 overscroll 时，其范围是 pixels + |delta|~maxScrollExtent</span>
    <span class="token comment">// 此时，newPixels 在 pixels + |delta|~maxScrollExtent 之间，最大为 maxScrollExtent【newPixels 不会越界】</span>

    <span class="token comment">// 2. delta 为正，即向下滑动，pixels - delta = pixels - |delta| &lt; pixels</span>

    <span class="token comment">// 2.1 当 pixels 小于 0 也就是存在 overscroll 时，pixels - delta = pixels - |delta| &lt; pixels，</span>
    <span class="token comment">// 其范围是（pixels 和 minScrollExtent 较小值）~double.infinity，也就是 delta 不会</span>
    <span class="token comment">// 被应用，newPixels 会等于 pixels，如果已经越界了，【不会再加深越界】</span>
    <span class="token comment">// 2.2 当 pixels 大于等于 0 也就是不存在 overscroll 时，其范围是 minScrollExtent~double.infinity，</span>
    <span class="token comment">// newPixels 会在 minScrollExtent 和 pixels 之间，【newPixels 的值不会越界】</span>
    <span class="token keyword">final</span> double newPixels <span class="token operator">=</span> <span class="token punctuation">(</span>pixels <span class="token operator">-</span> delta<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> double clampedDelta <span class="token operator">=</span> newPixels <span class="token operator">-</span> pixels<span class="token punctuation">;</span><span class="token comment">// 对比 ScrollPosition 变化的值</span>
    <span class="token comment">// position 的 pixels 为 0 且向下滑动时这里 clampedDelta 为 0，不执行剩余步骤</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clampedDelta <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> delta<span class="token punctuation">;</span>
    <span class="token comment">// 返回超出界限的值 overscroll，如果为 0 表示可以任意超出界限，不为 0 表示不可以应用到</span>
    <span class="token comment">//ScrollPosition 上的值，根据 physics 而不同</span>
    <span class="token keyword">final</span> double overscroll <span class="token operator">=</span> physics<span class="token punctuation">.</span><span class="token function">applyBoundaryConditions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newPixels<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 减去了 overscroll，所以这里 actualNewPixels 是真正可以应用的 pixels</span>
    <span class="token keyword">final</span> double actualNewPixels <span class="token operator">=</span> newPixels <span class="token operator">-</span> overscroll<span class="token punctuation">;</span>
    <span class="token comment">// offset 表示经过上述计算之后，ScrollPosition 实际将要产生的变化</span>
    <span class="token keyword">final</span> double offset <span class="token operator">=</span> actualNewPixels <span class="token operator">-</span> oldPixels<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 根据 physics 的不同，这里 offset 可能会导致 ScrollPosition 内部视觉上出现越界现象，此时 overscroll 为 0，</span>
      <span class="token comment">// 或者没有越界内容，overscroll 为 0 或者应用了 delta 之后会出现的越界值</span>
      <span class="token function">forcePixels</span><span class="token punctuation">(</span>actualNewPixels<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新 pixels</span>
      <span class="token function">didUpdateScrollPositionBy</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发出 ScrollUpdateNotification 通知</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// delta 为负时，offset 为正值；delta 为正值时，offset 为负值。总之 delta 绝对值减少了。</span>
    <span class="token keyword">return</span> delta <span class="token operator">+</span> offset<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applyfulldragupdate" tabindex="-1"><a class="header-anchor" href="#applyfulldragupdate" aria-hidden="true">#</a> applyFullDragUpdate</h4><p>此方法在满足 overscroll 条件时，会应用 overscroll，并发出 OverscrollNotification 通知。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token function">applyFullDragUpdate</span><span class="token punctuation">(</span>double delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>delta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> double oldPixels <span class="token operator">=</span> pixels<span class="token punctuation">;</span>
    <span class="token comment">// Apply friction:</span>
    <span class="token keyword">final</span> double newPixels <span class="token operator">=</span> pixels <span class="token operator">-</span> physics<span class="token punctuation">.</span><span class="token function">applyPhysicsToUserOffset</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">,</span>
      delta<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPixels <span class="token operator">==</span> newPixels<span class="token punctuation">)</span><span class="token comment">// 应用 delta 之后没有变化，返回</span>
      <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// delta must have been so small we dropped it during floating point addition</span>
    <span class="token comment">// Check for overscroll:</span>
    <span class="token comment">// 按照 physics 的规则，如果可以 overscroll 则返回 0，下面的 actualNewPixels 会展示出越界的效果</span>
    <span class="token comment">// 否则返回不能消耗的 delta，会发出 overscroll 通知</span>
    <span class="token keyword">final</span> double overscroll <span class="token operator">=</span> physics<span class="token punctuation">.</span><span class="token function">applyBoundaryConditions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newPixels<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果 physics 允许越界返回 overscroll 是 0，则这里 actualNewPixels 最终是越界的 pixels</span>
    <span class="token keyword">final</span> double actualNewPixels <span class="token operator">=</span> newPixels <span class="token operator">-</span> overscroll<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>actualNewPixels <span class="token operator">!=</span> oldPixels<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forcePixels</span><span class="token punctuation">(</span>actualNewPixels<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新当前 ScrollPosition 的 pixels 值</span>
      <span class="token function">didUpdateScrollPositionBy</span><span class="token punctuation">(</span>actualNewPixels <span class="token operator">-</span> oldPixels<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>overscroll <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 发出 overscroll 的 OverscrollNotification 通知，然后会有地方处理 overscroll</span>
      <span class="token comment">// 比如 Android 会触发在 ScrollableState.build 方法中的_configuration.buildOverscrollIndicator</span>
      <span class="token comment">// 对应的 ScrollBehavior.buildViewportChrome 创建蓝色波纹效果</span>
      <span class="token function">didOverscrollBy</span><span class="token punctuation">(</span>overscroll<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> overscroll<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applyclampedpointersignalupdate" tabindex="-1"><a class="header-anchor" href="#applyclampedpointersignalupdate" aria-hidden="true">#</a> applyClampedPointerSignalUpdate</h4><p>applyClampedPointerSignalUpdate 方法返回未使用的 delta，不考虑 ScrollPhysics 的影响。</p><h4 id="applynewdimensions" tabindex="-1"><a class="header-anchor" href="#applynewdimensions" aria-hidden="true">#</a> applyNewDimensions()</h4><p>此方法是_outerScrollPosition 接管 body 滑动事件的关键，也是<strong>body 中 scrolling view 使用了自己的 ScrollController 之后 NestedScrollView 就无法协调 header 和 body 滑动</strong>的原因。</p><p>在默认的 ScrollController 中，createScrollPosition() 方法创建的是 ScrollPositionWithSingleContext，当 content 或者 viewport 的尺寸变化之后会调用其 applyNewDimensions() 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// ScrollPositionWithSingleContext 类</span>
  <span class="token keyword">void</span> <span class="token function">applyNewDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">applyNewDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处的 context 一般是 ScrollableState</span>
    context<span class="token punctuation">.</span><span class="token function">setCanDrag</span><span class="token punctuation">(</span>physics<span class="token punctuation">.</span><span class="token function">shouldAcceptUserOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后会调用 ScrollableState 的 setCanDrag 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// ScrollableState 类</span>

  <span class="token comment">// 识别用户手势的属性，用于 RawGestureDetector.gestures</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">GestureRecognizerFactory</span><span class="token punctuation">&gt;</span></span> _gestureRecognizers <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">GestureRecognizerFactory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token metadata function">@protected</span>
  <span class="token keyword">void</span> <span class="token function">setCanDrag</span><span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> _lastCanDrag <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>value <span class="token operator">||</span> widget<span class="token punctuation">.</span>axis <span class="token operator">==</span> _lastAxisDirection<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _gestureRecognizers <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">GestureRecognizerFactory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// 其他方法</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新_gestureRecognizers 的方法</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见_gestureRecognizers 默认为空，只有主动调用 ScrollableState.setCanDrag(true) 之后滑动视图中的 Scrollable 才能识别手势并处理。</p><p>而在_NesetedScrollPosition 的方法中，并没有调用，而是：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// _NestedScrollPosition 类</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">applyNewDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">applyNewDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    coordinator<span class="token punctuation">.</span><span class="token function">updateCanDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// _NestedScrollCoordinator 类</span>
  <span class="token keyword">void</span> <span class="token function">updateCanDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_outerPosition<span class="token operator">!</span><span class="token punctuation">.</span>haveDimensions<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    double maxInnerExtent <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> _innerPositions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>position<span class="token punctuation">.</span>haveDimensions<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      maxInnerExtent <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
        maxInnerExtent<span class="token punctuation">,</span>
        position<span class="token punctuation">.</span>maxScrollExtent <span class="token operator">-</span> position<span class="token punctuation">.</span>minScrollExtent<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 注意这里只给_outerPosition 调用了 updateCanDrag 方法</span>
    _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">updateCanDrag</span><span class="token punctuation">(</span>maxInnerExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码分析可知，如果使用默认的_NestedScrollController 创建的_NestedScrollPosition，最后只有_outerPosition 更新了_gestureRecognizers 可以识别手势，而使用_innerScrollPosition 的 body 内部的 scrolling view 无法识别手势。</p><p>所以，当没有给 body 中的 scrolling view 主动设置 ScrollController 时，无论是在 header 还是 body 的手势事件都会由 ScrollPosition 来转发给_NestedScrollCoordinator 统一协调处理；而<strong>如果给 body 中的 scrolling view 主动设置 ScrollController</strong>，由于 ScrollController 默认创建的 ScrollPositionWithSingleContext 会按照实际情况更新_gestureRecognizers，<strong>从而当用户手势在 body 中 scrolling view 的范围时，手势事件会被其捕获并内部消耗，而非转发到_NestedScrollCoordinator 处理，所以就会使 NestedScrollView 失效</strong>。</p><br><p>此外还持有了_NestedScrollCoordinator，在 animateTo/jumpTo/pointerScroll/applyNewDimensions/hold/drag 等与滑动相关的方法被调用时执行_NestedScrollCoordinator 中对应的方法，这样就将 outer viewport 和 inner scrolling view 的滑动事件都归集到_NestedScrollCoordinator 统一处理。</p><h3 id="nestedscrollcoordinator" tabindex="-1"><a class="header-anchor" href="#nestedscrollcoordinator" aria-hidden="true">#</a> _NestedScrollCoordinator</h3><p>为了与_NestedScrollPosition 保持一致，方便接收其转发的事件，_NestedScrollCoordinator 也实现了 ScrollActivityDelegate 接口：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _NestedScrollCoordinator <span class="token keyword">implements</span> <span class="token class-name">ScrollActivityDelegate</span><span class="token punctuation">,</span> <span class="token class-name">ScrollHoldController</span> <span class="token punctuation">{</span>

  <span class="token keyword">final</span> <span class="token class-name">NestedScrollViewState</span> _state<span class="token punctuation">;</span><span class="token comment">// 用于获取 NestedScrollView 的 ScrollController</span>
  <span class="token class-name">ScrollController</span><span class="token operator">?</span> _parent<span class="token punctuation">;</span><span class="token comment">// 用户传入的 NestedScrollView 的 ScrollController</span>
  <span class="token keyword">final</span> bool _floatHeaderSlivers<span class="token punctuation">;</span><span class="token comment">// header 是否悬浮，是的话向“下”滑动时会先将 header 滑动出来</span>

  <span class="token comment">// 分别应用于 outer（即_NestedScrollViewCustomScrollView）和 inner（即 body 中的</span>
  <span class="token comment">// scrolling view）的 ScrollController</span>
  late _NestedScrollController _outerController<span class="token punctuation">;</span>
  late _NestedScrollController _innerController<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beginactivity" tabindex="-1"><a class="header-anchor" href="#beginactivity" aria-hidden="true">#</a> beginActivity</h4><p>beginActivity 用来对 outer 和 inner 应用 ScrollActivity，在 goIdle/goBallistic/animateTo/jumpTo/pointerScroll/drag/hold 等与滑动有关的方法中都有直接或间接的调用。</p><p>其中 outer activity 是直接指定的，而 inner activity 则是根据 innerActivityGetter 和 inner position 动态计算。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">beginActivity</span><span class="token punctuation">(</span><span class="token class-name">ScrollActivity</span> newOuterActivity<span class="token punctuation">,</span> _NestedScrollActivityGetter innerActivityGetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">beginActivity</span><span class="token punctuation">(</span>newOuterActivity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// outer 直接应用 ScrollActivity</span>
    bool scrolling <span class="token operator">=</span> newOuterActivity<span class="token punctuation">.</span>isScrolling<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> _innerPositions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 依次遍历 inner scrolling view 计算对应的 newInnerActivity</span>
      <span class="token keyword">final</span> <span class="token class-name">ScrollActivity</span> newInnerActivity <span class="token operator">=</span> <span class="token function">innerActivityGetter</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      position<span class="token punctuation">.</span><span class="token function">beginActivity</span><span class="token punctuation">(</span>newInnerActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>
      scrolling <span class="token operator">=</span> scrolling <span class="token operator">&amp;&amp;</span> newInnerActivity<span class="token punctuation">.</span>isScrolling<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _currentDrag<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _currentDrag <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scrolling<span class="token punctuation">)</span>
      <span class="token comment">// 如果都没有滑动，就表示当前 NestedScrollView 停止</span>
      <span class="token function">updateUserScrollDirection</span><span class="token punctuation">(</span><span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法的一种使用方式如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">goBallistic</span><span class="token punctuation">(</span>double velocity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">beginActivity</span><span class="token punctuation">(</span>
      <span class="token function">createOuterBallisticScrollActivity</span><span class="token punctuation">(</span>velocity<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 创建 outer activity</span>
      <span class="token punctuation">(</span>_NestedScrollPosition position<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 根据 position 创建 inner activity</span>
        <span class="token keyword">return</span> <span class="token function">createInnerBallisticScrollActivity</span><span class="token punctuation">(</span>
          position<span class="token punctuation">,</span>
          velocity<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 outer scroll activity 的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">ScrollActivity</span> <span class="token function">createOuterBallisticScrollActivity</span><span class="token punctuation">(</span>double velocity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This function creates a ballistic scroll for the outer scrollable.</span>
    <span class="token comment">//</span>
    <span class="token comment">// It assumes that the outer scrollable can&#39;t be overscrolled, and sets up a</span>
    <span class="token comment">// ballistic scroll over the combined space of the innerPositions and the</span>
    <span class="token comment">// outerPosition.</span>

    <span class="token comment">// First we must pick a representative inner position that we will care</span>
    <span class="token comment">// about. This is somewhat arbitrary. Ideally we&#39;d pick the one that is &quot;in</span>
    <span class="token comment">// the center&quot; but there isn&#39;t currently a good way to do that so we</span>
    <span class="token comment">// arbitrarily pick the one that is the furthest away from the infinity we</span>
    <span class="token comment">// are heading towards.</span>
    _NestedScrollPosition<span class="token operator">?</span> innerPosition<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>velocity <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 选择在正方向上离我们最远的 inner position</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> _innerPositions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>innerPosition <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>velocity <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>innerPosition<span class="token punctuation">.</span>pixels <span class="token operator">&lt;</span> position<span class="token punctuation">.</span>pixels<span class="token punctuation">)</span>
              <span class="token keyword">continue</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">assert</span><span class="token punctuation">(</span>velocity <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>innerPosition<span class="token punctuation">.</span>pixels <span class="token operator">&gt;</span> position<span class="token punctuation">.</span>pixels<span class="token punctuation">)</span>
              <span class="token keyword">continue</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        innerPosition <span class="token operator">=</span> position<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span>innerPosition <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 这里表示只有 outer 或者 velocity 为 0</span>
      <span class="token comment">// It&#39;s either just us or a velocity=0 situation.</span>
      <span class="token keyword">return</span> _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">createBallisticScrollActivity</span><span class="token punctuation">(</span>
        _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span>physics<span class="token punctuation">.</span><span class="token function">createBallisticSimulation</span><span class="token punctuation">(</span>
          _outerPosition<span class="token operator">!</span><span class="token punctuation">,</span>
          velocity<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        mode<span class="token punctuation">:</span> _NestedBallisticScrollActivityMode<span class="token punctuation">.</span>independent<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这里表示 NestedScrollView 中存在 inner 和 outer scrolling view，且 velocity 不为 0</span>
    <span class="token comment">// 在 innerPosition 和 outerPosition 组合的 space 之上设置 overscroll</span>
    <span class="token keyword">final</span> _NestedScrollMetrics metrics <span class="token operator">=</span> <span class="token function">_getMetrics</span><span class="token punctuation">(</span>innerPosition<span class="token punctuation">,</span> velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">createBallisticScrollActivity</span><span class="token punctuation">(</span>
      _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span>physics<span class="token punctuation">.</span><span class="token function">createBallisticSimulation</span><span class="token punctuation">(</span>metrics<span class="token punctuation">,</span> velocity<span class="token punctuation">)</span><span class="token punctuation">,</span>
      mode<span class="token punctuation">:</span> _NestedBallisticScrollActivityMode<span class="token punctuation">.</span>outer<span class="token punctuation">,</span>
      metrics<span class="token punctuation">:</span> metrics<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见在计算 outer scroll activity 的时候，需判断 body 内是不是有 inner scrolling view：</p><ul><li>没有，按照正常创建 BallisticScrollActivity 的流程创建</li><li>有，将 inner 的 space 也计入，然后以此计算 BallisticScrollActivity</li></ul><p>创建 inner scroll activity 的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">ScrollActivity</span> <span class="token function">createInnerBallisticScrollActivity</span><span class="token punctuation">(</span>_NestedScrollPosition position<span class="token punctuation">,</span> double velocity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> position<span class="token punctuation">.</span><span class="token function">createBallisticScrollActivity</span><span class="token punctuation">(</span>
      position<span class="token punctuation">.</span>physics<span class="token punctuation">.</span><span class="token function">createBallisticSimulation</span><span class="token punctuation">(</span>
        <span class="token function">_getMetrics</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> velocity<span class="token punctuation">)</span><span class="token punctuation">,</span>
        velocity<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      mode<span class="token punctuation">:</span> _NestedBallisticScrollActivityMode<span class="token punctuation">.</span>inner<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applyuseroffset" tabindex="-1"><a class="header-anchor" href="#applyuseroffset" aria-hidden="true">#</a> applyUserOffset</h4><p>applyUserOffset() 是_NestedScrollCoordinator 的重点，也是 NestedScrollView 能够实现协调 inner 和 outer 滑动事件的关键。</p><p>在看 applyUserOffset() 方法之前，先看一下 drag() 方法，在此方法中创建 ScrollDragController 时 delegate 传入的是_NestedScrollCoordinator。</p><p>当用户操作屏幕发生 drag 事件时，手势事件会被 ScrollableState 中的 RawGestureDetector 识别到：</p><ul><li>drag 开始时调用<code>_handleDragStart</code>，通过_NestedScrollPosition 转发调用<code>_NestedScrollCoordinator.drag</code>方法创建了<code>ScrollDragController drag</code></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// 此方法在 ScrollableState 中被 RawGestureDetector 通过</span>
  <span class="token comment">// ScrollableState._handleDragStart -&gt; _NestedScrollPosition.drag</span>
  <span class="token comment">// -&gt; _NestedScrollCoordinator.drag 链路调用</span>
  <span class="token class-name">Drag</span> <span class="token function">drag</span><span class="token punctuation">(</span><span class="token class-name">DragStartDetails</span> details<span class="token punctuation">,</span> <span class="token class-name">VoidCallback</span> dragCancelCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ScrollDragController</span> drag <span class="token operator">=</span> <span class="token class-name">ScrollDragController</span><span class="token punctuation">(</span>
      delegate<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
      details<span class="token punctuation">:</span> details<span class="token punctuation">,</span>
      onDragCanceled<span class="token punctuation">:</span> dragCancelCallback<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">beginActivity</span><span class="token punctuation">(</span>
      <span class="token class-name">DragScrollActivity</span><span class="token punctuation">(</span>_outerPosition<span class="token operator">!</span><span class="token punctuation">,</span> drag<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>_NestedScrollPosition position<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">DragScrollActivity</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> drag<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>_currentDrag <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _currentDrag <span class="token operator">=</span> drag<span class="token punctuation">;</span>
    <span class="token keyword">return</span> drag<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>drag 开始时更新时<code>_handleDragUpdate</code>，内部调用<code>ScrollDragController.update</code>,在 update 方法内部执行了<code>delegate.applyUserOffset</code>，此处的<code>delegate</code>就是我们之前传入的_NestedScrollCoordinator</li></ul><p>根据上述分析，在用户滑动屏幕时，会执行<code>_NestedScrollCoordinator.applyUserOffset</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">applyUserOffset</span><span class="token punctuation">(</span>double delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 scroll 方向</span>
    <span class="token function">updateUserScrollDirection</span><span class="token punctuation">(</span>
      delta <span class="token operator">&gt;</span> <span class="token number">0.0</span> <span class="token operator">?</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>forward <span class="token punctuation">:</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>reverse<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>delta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_innerPositions<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果没有 inner（body 内部没有 scrolling view），就由 outer 完全处理滑动事件</span>
      _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">applyFullDragUpdate</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Dragging &quot;up&quot;</span>
      <span class="token comment">// 先恢复 inner overscroll，然后是 outer view，以便 header 内容尽快 scroll out</span>
      double outerDelta <span class="token operator">=</span> delta<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> _innerPositions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>pixels <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// This inner position is in overscroll.</span>
          <span class="token comment">// 先从 overscrolled 恢复并返回剩余没有使用的 delta</span>
          <span class="token comment">// 因为 delta 是负值，如果“消耗”掉了一部分，那么 potentialOuterDelta 会比 delta 大</span>
          <span class="token keyword">final</span> double potentialOuterDelta <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// In case there are multiple positions in varying states of</span>
          <span class="token comment">// overscroll, the first to &#39;reach&#39; the outer view above takes</span>
          <span class="token comment">// precedence.此处 outerDelta 为剩余没有消耗的 delta</span>
          outerDelta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>outerDelta<span class="token punctuation">,</span> potentialOuterDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>outerDelta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果还有剩下的，让 outer view 消耗</span>
        <span class="token comment">// delta &lt; 0;所以如果 outer 有 underscroll 则会先恢复到 0 然后返回（现有限制下不会出现</span>
        <span class="token comment">// 此情况），否则最多可以向上滑动到 maxScrollExtent</span>
        <span class="token keyword">final</span> double innerDelta <span class="token operator">=</span> _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>
          outerDelta<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>innerDelta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 还有剩下的，让 inner 开始滑动</span>
          <span class="token comment">// 这里吧剩下的 innerDelta 完全给了 inner scroll position 的 applyFullDragUpdate 方法</span>
          <span class="token comment">// inner 会先向上滑动，如果 physics 支持 underscroll 会执行 underscroll，否则最多滑动</span>
          <span class="token comment">// 到 maxScrollExtent，然后发出 overscroll 的通知，让 Scrollable 绘制蓝色波纹（Android）</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> _innerPositions<span class="token punctuation">)</span>
            position<span class="token punctuation">.</span><span class="token function">applyFullDragUpdate</span><span class="token punctuation">(</span>innerDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Dragging &quot;down&quot; - delta is positive</span>
      double innerDelta <span class="token operator">=</span> delta<span class="token punctuation">;</span>
      <span class="token comment">// Apply delta to the outer header first if it is configured to float.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_floatHeaderSlivers<span class="token punctuation">)</span>
      <span class="token comment">// _floatHeaderSlivers 为 true，先让 outer 复现出来，最多向下滑动到 minScrollExtent</span>
        <span class="token comment">// 也就是恢复原位</span>
        innerDelta <span class="token operator">=</span> _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>innerDelta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Apply the innerDelta, if we have not floated in the outer scrollable,</span>
        <span class="token comment">// any leftover delta after this will be passed on to the outer</span>
        <span class="token comment">// scrollable by the outerDelta.</span>
        double outerDelta <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// it will go positive if it changes</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> overscrolls <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>_NestedScrollPosition<span class="token punctuation">&gt;</span></span> innerPositions <span class="token operator">=</span> _innerPositions<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// inner scrolling view 先消耗 delta</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _NestedScrollPosition position <span class="token keyword">in</span> innerPositions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 向下滑动 inner scrolling view</span>
          <span class="token comment">// 如果 inner physics 不支持 overscroll，则执行完 innerDelta 之后，最多会返回未执行的 overscroll</span>
          <span class="token comment">// 如果支持，则会消耗完 innerDelta，这里的 overscroll 为 0</span>
          <span class="token keyword">final</span> double overscroll <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>innerDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>
          outerDelta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>outerDelta<span class="token punctuation">,</span> overscroll<span class="token punctuation">)</span><span class="token punctuation">;</span>
          overscrolls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>overscroll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保存没有被使用的 overscroll</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outerDelta <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
          <span class="token comment">// 在此处，即使设置了 outer 的 physics 为 BouncingScrollPhysics，因为当 ScrollPosition 的</span>
          <span class="token comment">// offset 为 0 时，applyClampedDragUpdate 不会主动从 0 变为负值，所以无法应用 underscroll 效果</span>
          <span class="token comment">// 此处 outerDelta-=overscroll 的结果是 outerDelta 是 outer 消耗的那一部分内容</span>
          outerDelta <span class="token operator">-=</span> _outerPosition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">applyClampedDragUpdate</span><span class="token punctuation">(</span>outerDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 这里 outerDelta 是剩下的 delta</span>

        <span class="token comment">// Now deal with any overscroll 最后交给 inner 处理 overscroll</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> innerPositions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 此处的 remainingDelta 是未执行的 overscroll 减去了 outer 消耗的内容</span>
          <span class="token keyword">final</span> double remainingDelta <span class="token operator">=</span> overscrolls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> outerDelta<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>remainingDelta <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
            <span class="token comment">// 如果还有剩下的 overscroll，与 physics 等结合计算之后，继续消耗（之前在</span>
            <span class="token comment">// applyClampedDragUpdate 无法消耗，在这里也消耗不了，不过可以发送 overscroll</span>
            <span class="token comment">// 的通知，让 Scrollable 知道之后做出蓝色波纹（Android 机型）等效果）</span>
            innerPositions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">applyFullDragUpdate</span><span class="token punctuation">(</span>remainingDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析为何 inner 有 scrolling view 时，NestedScrollView.physics 为 BouncingScrollPhysics() 不生效：</p><p>从上述代码我们看到，可以产生 overscroll 效果的 applyFullDragUpdate 只有在 inner 中没有 scrolling view 的时候才会被_outerPosition 应用，其他两个场景都只有 inner position 应用。</p><p>而其余场景中，_outerPosition 和 inner position 都应用的是 applyClampedDragUpdate 方法：</p><ul><li>向下滑动 delta 大于 0，代码会执行到<code>outerDelta -= _outerPosition!.applyClampedDragUpdate(outerDelta)</code>，因为此时限制了 applyClampedDragUpdate 中的 newPixels 范围为（当 ScrollPosition 的 pixels 等于 0 时）minScrollExtent~double.infinity，所以 clampedDelta = newPixels - pixels 等于 minScrollExtent（也就是 0），跳过剩余步骤直接返回了 delta。所以没有执行 BouncingScrollPhysics() 逻辑</li><li>向上滑动 delta 小于 0，代码会执行<code>final double innerDelta = _outerPosition!.applyClampedDragUpdate(outerDelta,);</code>，在此方法中，如果有 overscroll 则会先恢复到 0，否则最多上划到 maxScrollExtent，所以也不会执行 BouncingScrollPhysics() 逻辑</li></ul><br><p>通过上述步骤，NestedScrollView 将 header 和 body 的滚动事件进行组合、分发。</p><h2 id="优劣对比" tabindex="-1"><a class="header-anchor" href="#优劣对比" aria-hidden="true">#</a> 优劣对比</h2><p>NestedScrollView 将 header 和 body 中可滑动 view（inner）的滑动事件组合起来：向上滑动时，先等达到 header 最大滑动范围之后，再将滑动分配给 inner 消耗；当向下滑动时，一般先恢复 inner 的 overscroll（如果_floatHeaderSlivers 为 true，会先尝试下滑 header），尝试将其恢复至 offset 为 0 的状态，再尝试将 header 向下滑动到初始位置，最后如果有 overscroll，会尝试应用到 inner 上面。</p><p>CustomScrollView 也支持在同一个页面内嵌套多个滑动列表并关联（在其 slivers 中传入多个 SliverList,SliverGrid 等），但是 CustomScrollView 不支持普通的滑动 view，比如 ListView 等，这些滑动布局会内部消耗掉滑动事件，从而无法与 CustomScrollView 内其余 sliver 正常联动。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>NestedScrollView 内部通过 NestedScrollViewState.build() 创建继承自 CustomScrollView 的_NestedScrollViewCustomScrollView。</p><p>通过 NestedScrollView._buildSlivers() 将 NestedScrollView.headerSliverBuilder 返回的 sliver 列表（下称 header）和被 SliverFillRemaining 包裹的 body 组合在一起，使得在_NestedScrollViewCustomScrollView 中创建的 viewport 的创建的_NestedScrollCoordinator.outerPosition 的_maxScrollExtent 为 NestedScrollView 的 header 的主轴尺寸，而_NestedScrollCoordinator._innerPositions 的_maxScrollExtent 则是与 body 实际内容一致。</p><p>_NestedScrollViewCustomScrollView 的 ScrollController 是_NestedScrollCoordinator._outerController，其创建了_NestedScrollCoordinator.outerPosition，所以整个 NestedScrollView 的滑动事件都会通过_NestedScrollCoordinator._outerController 转到给_NestedScrollCoordinator.applyUserOffset 方法。</p><p>在_NestedScrollCoordinator.applyUserOffset 方法中，根据滑动方向的不同，依次协调_NestedScrollCoordinator.outerPosition 和_NestedScrollCoordinator._innerPositions 处理用户 drag 等产生的 delta，修改这两个 ScrollPosition 的值，从而实现 header 和 body 的滑动联动。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,114),v={href:"https://api.flutter.dev/flutter/widgets/NestedScrollView-class.html",target:"_blank",rel:"noopener noreferrer"};function m(b,S){const a=o("ExternalLinkIcon");return l(),p("div",null,[r,n("ul",null,[n("li",null,[s("基于 RenderBox 的 box protocol 实现的，主要基于 Size 实现布局。常见的有"),n("a",u,[s("SingleChildScrollView"),e(a)]),s("。")]),n("li",null,[s("基于 RenderSliver 的 sliver protocol 实现的，主要基于 SliverGeometry 实现布局。比如 CustomScrollView 及其子类 ListView、GridView 等继承自"),n("a",d,[s("ScrollView"),e(a)]),s("的 Widget，以及基于 CustomScrollView 的 NestedScrollView、基于 Viewport 等的 PageView、TabBarView 等直接对 SliverFillViewport 等进行封装的 Widget。")])]),k,n("p",null,[n("a",v,[s("NestedScrollView_api.flutter.dev"),e(a)])])])}const h=t(c,[["render",m],["__file","ae8e53be.html.vue"]]);export{h as default};
