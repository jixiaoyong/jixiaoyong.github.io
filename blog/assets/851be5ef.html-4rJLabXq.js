import{_ as t,c as e,a as p,o as s}from"./app-3cnvzyR2.js";const n={};function i(o,a){return s(),e("div",null,a[0]||(a[0]=[p('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>本文汇总了数据结构的优缺点及应用场景。</p><p>通用数据结构：数组、链表、树、哈希表</p><p>专用数据结构：栈、队列、优先级队列</p><p>排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序</p><p>图：邻接矩阵、邻接表</p><h2 id="通用数据结构" tabindex="-1"><a class="header-anchor" href="#通用数据结构"><span>通用数据结构</span></a></h2><p>这些数据结构使用关键字的值存储、查找数据</p><p>其速度如下：</p><p><code>哈希表 &gt; 树 &gt; 链表 &gt; 数组</code></p><p>数组：数据量小，大小可以预测时使用</p><p>链表：数据大小不可预知，或需要频繁插入删除元素时使用</p><p>二叉搜索树：如果数组和链表都很慢时，优先考虑二叉树</p><p>平衡树：二叉搜索树很快，但是如果遇到数据是逆序的时候，就会很耗性能，而平衡树则不会</p><p>哈希表：在数据存储结构中最快，但是需要有额外的空间</p><p>下面是以上数据结构的速度：</p><figure><img src="https://jixiaoyong.github.io/images/20190105140704.png" alt="通用数据结构速度统计" tabindex="0" loading="lazy"><figcaption>通用数据结构速度统计</figcaption></figure><h2 id="专用数据结构" tabindex="-1"><a class="header-anchor" href="#专用数据结构"><span>专用数据结构</span></a></h2><p>包括栈、队列、优先级队列（堆），都是抽象数据结构 (ADT)，由更加基础的<code>通用数据结构</code>组成。</p><p>不能查找或者遍历，只能访问指定元素（头部，队列也可以访问尾部）。</p><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><p>先进后出 (FILO)，最后插入的数据在栈顶，每次只能访问栈顶元素。</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h3><p>先进先出 (FIFO)，最后插入的数据在队尾，最先插入的在队首，每次先弹出队首的元素。</p><h3 id="优先级队列" tabindex="-1"><a class="header-anchor" href="#优先级队列"><span>优先级队列</span></a></h3><p>是一种特殊的队列，不同的是优先级高的在队首，优先级低的在队尾，每次弹出优先级最高的元素（这意味着每次插入或弹出时要进行排序）。</p><h3 id="效率" tabindex="-1"><a class="header-anchor" href="#效率"><span>效率</span></a></h3><figure><img src="https://jixiaoyong.github.io/images/20190105141727.png" alt="专用数据结构效率比较" tabindex="0" loading="lazy"><figcaption>专用数据结构效率比较</figcaption></figure><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h2><p>排序包括冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序。</p><p>一般使用排序优先级：</p><p><code>插入排序 &gt; 希尔排序 &gt; 快速排序 &gt; 归并排序 &gt; 堆排序</code></p><p>归并排序：需要辅助存储空间</p><p>堆排序：需要一个堆的数据结构，比快速排序更适于非随机数据</p><p>快速排序：处理非随机数据时会慢到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>下面是排序算法比较：</p><figure><img src="https://jixiaoyong.github.io/images/20190105142406.png" alt="排序算法比较" tabindex="0" loading="lazy"><figcaption>排序算法比较</figcaption></figure>',37)]))}const m=t(n,[["render",i]]),c=JSON.parse('{"path":"/posts/851be5ef.html","title":"数据结构_总结","lang":"zh-CN","frontmatter":{"permalink":"/posts/851be5ef.html","title":"数据结构_总结","tag":"数据结构","abbrlink":"851be5ef","date":"2019-01-05T05:55:50.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"前言 本文汇总了数据结构的优缺点及应用场景。 通用数据结构：数组、链表、树、哈希表 专用数据结构：栈、队列、优先级队列 排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序 图：邻接矩阵、邻接表 通用数据结构 这些数据结构使用关键字的值存储、查找数据 其速度如下： 哈希表 > 树 > 链表 > 数组 数组：数据量小，大小可以预测时使...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/851be5ef.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"数据结构_总结"}],["meta",{"property":"og:description","content":"前言 本文汇总了数据结构的优缺点及应用场景。 通用数据结构：数组、链表、树、哈希表 专用数据结构：栈、队列、优先级队列 排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序 图：邻接矩阵、邻接表 通用数据结构 这些数据结构使用关键字的值存储、查找数据 其速度如下： 哈希表 > 树 > 链表 > 数组 数组：数据量小，大小可以预测时使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/20190105140704.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T16:00:22.000Z"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2019-01-05T05:55:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T16:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构_总结\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/20190105140704.png\\",\\"https://jixiaoyong.github.io/images/20190105141727.png\\",\\"https://jixiaoyong.github.io/images/20190105142406.png\\"],\\"datePublished\\":\\"2019-01-05T05:55:50.000Z\\",\\"dateModified\\":\\"2024-05-31T16:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"git":{"createdTime":1653726847000,"updatedTime":1717171222000,"contributors":[{"name":"jixiaoyong","username":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":5,"url":"https://github.com/jixiaoyong"},{"name":"JI,XIAOYONG","username":"","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":2.13,"words":640},"filePathRelative":"_posts/数据结构_总结.md","localizedDate":"2019年1月5日","excerpt":"<h2>前言</h2>\\n<p>本文汇总了数据结构的优缺点及应用场景。</p>\\n<p>通用数据结构：数组、链表、树、哈希表</p>\\n<p>专用数据结构：栈、队列、优先级队列</p>\\n<p>排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序</p>\\n<p>图：邻接矩阵、邻接表</p>\\n<h2>通用数据结构</h2>\\n<p>这些数据结构使用关键字的值存储、查找数据</p>\\n<p>其速度如下：</p>\\n<p><code>哈希表 &gt; 树 &gt; 链表 &gt; 数组</code></p>\\n<p>数组：数据量小，大小可以预测时使用</p>\\n<p>链表：数据大小不可预知，或需要频繁插入删除元素时使用</p>","autoDesc":true}');export{m as comp,c as data};
