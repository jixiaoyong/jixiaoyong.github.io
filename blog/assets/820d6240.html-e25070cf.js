import{_ as p,N as o,O as l,P as n,W as a,Q as e,a6 as t,C as c}from"./framework-e4c4bdea.js";const i={},u={href:"https://jixiaoyong.github.io/blog/posts/6ec43bd8/",target:"_blank",rel:"noopener noreferrer"},r=n("strong",null,"线性变化的 double 类型的 value",-1),d=t(`<p>下图是 Tween/Curve/AnimationController 等类的关系简单示意：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/animate/flutter_animate_struct1.png" alt="Flutter各种动画底层类关系" tabindex="0" loading="lazy"><figcaption>Flutter各种动画底层类关系</figcaption></figure><p>如上图所示：</p><ul><li><strong>Tween</strong> 和 <strong>CurveTween</strong> 都继承自 <strong>Animatable</strong>，可以按照给定的 Animation&lt;double&gt;生产 T 类型的值，从而可以<em>从 AnimationController 中衍生出其他类型的 Animation</em>；</li><li>而 <strong>Curve</strong> 继承自 <em>ParametricCurve</em>，除了之前文章中分析的传入 <code>AnimationController.animateTo</code> 和 <code>AnimationController.animateBack</code> 中从而作用于其创建的<code>_InterpolationSimulation.x()</code>方法之外，也可以被传入 CurveTween 或 CurvedAnimation 中，将 Curve 应用于 AnimationController。</li></ul><p>上述关于 Tween 和 CurveTween 和 AnimationController 作用的方式，其实现都是依赖于 <code>Animation&lt;T&gt; Animatable.animate(Animation&lt;double&gt; parent)</code> 方法，根据传入的 Animation&lt;double&gt;（一般会是 AnimationController 对象）创建新的 Animation&lt;T&gt;（实际上是继承自 Animation 的_AnimatedEvaluation，其 Animation.value 取自 <code>Animatable.evaluate(Animation&lt;double&gt;)</code>）。</p><h1 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h1><h2 id="animatable" tabindex="-1"><a class="header-anchor" href="#animatable" aria-hidden="true">#</a> Animatable</h2><blockquote><p>An object that can produce a value of type <code>T</code> given an <code>Animation&lt;double&gt;</code> as input.</p></blockquote><p>Animatable 根据传入的<code>Animation&lt;double&gt;</code>对象创建 T 类型的对象，也就是说其<em>将 Animation 产生的 double 类型“转化”为 T 类型</em>，从而使得 Flutter 支持更加丰富的动画。</p><blockquote><p>一般情况下这个<code>Animation&lt;double&gt;</code>的值范围是[0.0,1.0]，但是也可能超出此范围。</p></blockquote><p>而这一切都通过他的<code>animate</code>方法实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _AnimatedEvaluation<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此方法中，将接收 Animation&lt;double&gt;对象作为<code>parent</code>，将自身作为<code>_evaluatable</code>属性创建了 Animation 的子类_AnimatedEvaluation 并返回：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _AnimatedEvaluation<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span> <span class="token class-name">AnimationWithParentMixin</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">_AnimatedEvaluation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_evaluatable<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">final</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> _evaluatable<span class="token punctuation">;</span>

  <span class="token comment">// 主要逻辑，在这里调用Animatable.evaluate，最终调用transform(animation.value)方法获取Animation对应的值</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">T</span> <span class="token keyword">get</span> value <span class="token operator">=</span><span class="token operator">&gt;</span> _evaluatable<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下 Animatable 的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">T</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">transform</span><span class="token punctuation">(</span>animation<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">T</span> <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其<code>evaluate</code>方法内部通过其唯一的抽象方法<code>transform</code>方法实现，Animatable 的各个子类也只需要实现<code>transform</code>方法即可。</p><p>除了上述与 Animation 有关的三个方法外，Animatable 还有一个链接两个 Animatable 的方法——<code>Animatable.chain()</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">chain</span><span class="token punctuation">(</span><span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _ChainedEvaluation<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Animatable.animate 方法类似，不同的是此方法返回的是 Animatable&lt;T&gt;的子类——_ChainedEvaluation</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _ChainedEvaluation<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">_ChainedEvaluation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_evaluatable<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> _parent<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> _evaluatable<span class="token punctuation">;</span>

  <span class="token comment">// 关键方法，将parent.transform方法返回值传入Animatable _evaluatable.transform方法中并返回</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">T</span> <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _evaluatable<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>_parent<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以此方法作用是结合两个 Animatable 的效果。</p><br><p>Animatable 的主要作用是根据传入的 Animation 创建对应的 T 类型的值；其主要的子类有 Tween、CurveTween、TweenSequence。</p><p>TweenSequence 的作用于_chainedEvaluation 类似，只不过它可以将多个 Animatable 按照所占比重 weight 在 Animatable.transform 中应用。</p><h2 id="tween" tabindex="-1"><a class="header-anchor" href="#tween" aria-hidden="true">#</a> Tween</h2><blockquote><p>A linear interpolation (插值) between a beginning and ending value.</p></blockquote><p>Tween 是 Animatable 的主要子类之一，作用根据传入的 Animation（通常是 AnimationController）是在传入的<strong>begin 和 end 值之间创建线性的插值</strong>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// begin和end可以为空，但是必须在实际使用到之前赋非null值</span>
  <span class="token class-name">Tween</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 这两个值可以随时修改</span>
  <span class="token class-name">T</span><span class="token operator">?</span> begin<span class="token punctuation">;</span>
  <span class="token class-name">T</span><span class="token operator">?</span> end<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">T</span> <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> begin <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> end <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@protected</span>
  <span class="token class-name">T</span> <span class="token function">lerp</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认是按照当前的进度线性计算返回的值</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>begin <span class="token operator">as</span> <span class="token keyword">dynamic</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">as</span> <span class="token keyword">dynamic</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>begin <span class="token operator">as</span> <span class="token keyword">dynamic</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 Tween 的源码可以看到，它实现了父类 Animatable.transform 方法，并在 t 在(0.0,1.0)之间时调用 Tween.lerp 方法获取对应的值，默认线性的在 T 上应用加减乘运算，并返回结果。Tween 的子类只需要重写 Tween.lerp 方法而非 Animatable.transform 方法。</p><p>这也就要求：</p><ul><li><p>支持 <code>lerp</code> 静态方法的类通常有对应的 Tween 子类，一般以 <em>FooTween</em> 命名，比如 ColorTween 就是借助 Color.lerp 方法实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ColorTween</span> <span class="token keyword">extends</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token comment">// 如果需要渐变透明，请传入null而非Color.transparent，后者实际是黑色透明，会导致渐变为黑色</span>
<span class="token class-name">ColorTween</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Color</span><span class="token operator">?</span> begin<span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token operator">?</span> end <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">:</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token metadata function">@override</span>
<span class="token class-name">Color</span><span class="token operator">?</span> <span class="token function">lerp</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">lerp</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em>Tween&lt;T&gt;</em> 的类型 T 必须支持<code>+-*</code>三种运算，并且返回值还是 T；</p></li><li><p>对于 int 来说，因为 int*double=num 而非 int，有对应的特殊类：</p><ul><li>IntTween，使用 double.round 实现近似线性插值</li><li>StepTween，使用 double.floor 确保结果永远不会大于使用 Tween&lt;double&gt;的值</li></ul></li></ul><p>在使用时，如果 Tween 确定不会变化，就可以将其保存在<code>static final</code>对象中以便在需要的地方共享同一个对象，而非在 State.build 方法中实时创建。</p><h2 id="curvetween" tabindex="-1"><a class="header-anchor" href="#curvetween" aria-hidden="true">#</a> CurveTween</h2><p>CurveTween 继承自 Animatable&lt;double&gt;，常见的用法是传入<code>AnimationController.drive</code>方法中获取一个新的 Animation&lt;double&gt;:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CurveTween</span> <span class="token keyword">extends</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/// Creates a curve tween.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// The [curve] argument must not be null.</span>
  <span class="token class-name">CurveTween</span><span class="token punctuation">(</span><span class="token punctuation">{</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>curve <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>curve <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// The curve to use when transforming the value of the animation.</span>
  <span class="token class-name">Curve</span> curve<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  double <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>curve<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> curve<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;\${objectRuntimeType(this, &#39;</span></span><span class="token class-name">CurveTween</span><span class="token string-literal"><span class="token string">&#39;)}(curve: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">curve</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tween 和 CurveTween 的主要区别在于，Tween 需要 T?类型的 begin 和 end 来创建线性插值，而 CurveTween 则需要 Curve 以便为 Animation&lt;double&gt;创建（非）线性插值。</p><h2 id="curve" tabindex="-1"><a class="header-anchor" href="#curve" aria-hidden="true">#</a> Curve</h2><p>ParametricCurve&lt;T&gt;是 Curve 的父类，其提供 ParametricCurve.transform 方法将 double t（在[0.0,1.0]之间）转化为曲线在 t 处对应的值 T t：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ParametricCurve</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">T</span> <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>t <span class="token operator">&gt;=</span> <span class="token number">0.0</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;parametric value </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">t</span></span><span class="token string"> is outside of [0, 1] range.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">transformInternal</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@protected</span>
  <span class="token class-name">T</span> <span class="token function">transformInternal</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token class-name">UnimplementedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从其源码可以看出，ParametricCurve.transform 主要是检查入参是否合规，其主要逻辑在 ParametricCurve.transformInternal 中，一般子类只需要实现后者即可。</p><p>Curve 继承自 ParametricCurve&lt;double&gt;，也就是说它只能产生 double 类型的插值：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Curve</span> <span class="token keyword">extends</span> <span class="token class-name">ParametricCurve</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/// Abstract const constructor to enable subclasses to provide</span>
  <span class="token comment">/// const constructors so that they can be used in const expressions.</span>
  <span class="token keyword">const</span> <span class="token class-name">Curve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  double <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里当t为0.0或者1.0的时候直接返回t，避免了double运算后产生误差</span>
      <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回一个新的与之相反的curve</span>
  <span class="token class-name">Curve</span> <span class="token keyword">get</span> flipped <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">FlippedCurve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Curve 重写了父类的 transform 方法以规范对 double t 的处理，但还是建议子类只需要实现 <code>ParametricCurve.transformInternal</code> 方法。</p><p>我们以 Curve 的子类_Linear 为例，查看实现 Curve 的过程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _Linear <span class="token keyword">extends</span> <span class="token class-name">Curve</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _Linear<span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  double <span class="token function">transformInternal</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，Curve 及其子类定义了一个曲线（可能是线性变化，也可能不是），并提供了<code>double Curve.transform(double t)</code>供使用者获取指定时间 double t 时曲线上对应的值 double。</p>`,47),k={href:"https://api.flutter.dev/flutter/animation/Curves-class.html",target:"_blank",rel:"noopener noreferrer"},m=t('<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>经过上述分析，我们可以知道，无论是 Tween 还是 CurveTween，作为 Animatable，他们提供了<code>Animation&lt;T&gt; Animatable.animatee(Animation&lt;double&gt; parent)</code>方法，可以返回一个新的，相当于使用<code>Animatable&lt;T&gt;.transform(double parent.value)</code>计算<code>Animation&lt;T&gt;.value</code>的，Animation&lt;T&gt;。</p><p>而 Curve，只能通过<code>double transform(double t)</code>计算曲线在 t 位置的值的类，一般可以在 CurveTween、CurveAnimation 的构造方法或者 AnimationController 的 animateTo/animateBack 方法中，以便产生非线性的动画。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>',4),v={href:"https://api.flutter.dev/flutter/animation/Animatable-class.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://api.flutter.dev/flutter/animation/Tween-class.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://api.flutter.dev/flutter/animation/CurveTween-class.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://api.flutter.dev/flutter/animation/Curve-class.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://api.flutter.dev/flutter/animation/Curves-class.html",target:"_blank",rel:"noopener noreferrer"};function h(T,A){const s=c("ExternalLinkIcon");return o(),l("div",null,[n("p",null,[a("在上篇文章中，我们分析了 Flutter 中主要由"),n("a",u,[a("AnimationController"),e(s)]),a("控制动画的开始、结束，但是默认情况下其只能产生"),r,a("，如果想随时间变化，让 Widget 产生 Size、Offset 等属性的变化，亦或者控制这些值变化的速度快慢，这时候就需要用到 Tween 和 Curve 了。")]),d,n("p",null,[a("Flutter 为我们预置了很多丰富的 Curve，可以在这里预览： "),n("a",k,[a("Curves"),e(s)]),a("。")]),m,n("p",null,[n("a",v,[a("Animatable api.flutter.dev"),e(s)])]),n("p",null,[n("a",b,[a("Tween api.flutter.dev"),e(s)])]),n("p",null,[n("a",g,[a("CurveTween api.flutter.dev"),e(s)])]),n("p",null,[n("a",f,[a("Curve api.flutter.dev"),e(s)])]),n("p",null,[n("a",w,[a("Curves api.flutter.dev"),e(s)])])])}const y=p(i,[["render",h],["__file","820d6240.html.vue"]]);export{y as default};
