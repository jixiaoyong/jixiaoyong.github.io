const t=JSON.parse('{"key":"v-1cadefb2","path":"/posts/1f6681a0.html","title":"数据结构_Hash 表","lang":"zh-CN","frontmatter":{"permalink":"/posts/1f6681a0.html","title":"数据结构_Hash 表","tag":"数据结构","abbrlink":"1f6681a0","date":"2018-12-23T09:35:36.000Z","updated":"2023-12-30T08:17:02.000Z","description":"前言 Hash 表是一种可以快速插入和查找的数据结构，将数据保存在通过 hash 函数计算得到的下标中。 插入和删除 所需时间为 O(1)。在确定容量、无需遍历时效果最好。 当其大小接近容量时，效率会变得很差。 存储方式 Hash 表有两种存储方式 开放地址法 开放地址法，直接将数据存储在数组中。 当 hash 算出的地址已经被占用时，则走过一定的步长找到另外一个空位（在填充质数很大时就会很耗时）并保存数据。 链地址法 链地址法，创建保存数据的数组，该数组中不直接保存数据，而是保存一个用来存储这些数据的链表，将数据项直接存储的链表中。 当 hash 算法计算出的地址时，遍历数组中对应的链表找到空位并保存。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/1f6681a0.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"数据结构_Hash 表"}],["meta",{"property":"og:description","content":"前言 Hash 表是一种可以快速插入和查找的数据结构，将数据保存在通过 hash 函数计算得到的下标中。 插入和删除 所需时间为 O(1)。在确定容量、无需遍历时效果最好。 当其大小接近容量时，效率会变得很差。 存储方式 Hash 表有两种存储方式 开放地址法 开放地址法，直接将数据存储在数组中。 当 hash 算出的地址已经被占用时，则走过一定的步长找到另外一个空位（在填充质数很大时就会很耗时）并保存数据。 链地址法 链地址法，创建保存数据的数组，该数组中不直接保存数据，而是保存一个用来存储这些数据的链表，将数据项直接存储的链表中。 当 hash 算法计算出的地址时，遍历数组中对应的链表找到空位并保存。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-01T15:53:49.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2018-12-23T09:35:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T15:53:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构_Hash 表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-12-23T09:35:36.000Z\\",\\"dateModified\\":\\"2024-01-01T15:53:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"存储方式","slug":"存储方式","link":"#存储方式","children":[]},{"level":2,"title":"比较","slug":"比较","link":"#比较","children":[]},{"level":2,"title":"源码","slug":"源码","link":"#源码","children":[]}],"git":{"createdTime":1704124429000,"updatedTime":1704124429000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"_posts/数据结构_Hash表.md","localizedDate":"2018年12月23日","excerpt":"<h2> 前言</h2>\\n<p>Hash 表是一种可以快速插入和查找的数据结构，将数据保存在通过 hash 函数计算得到的下标中。</p>\\n<p>插入和删除 所需时间为 O(1)。在确定容量、无需遍历时效果最好。</p>\\n<p>当其大小接近容量时，效率会变得很差。</p>\\n<h2> 存储方式</h2>\\n<p>Hash 表有两种存储方式</p>\\n<ol>\\n<li>\\n<p>开放地址法</p>\\n<p>开放地址法，直接将数据存储在数组中。</p>\\n<p>当 hash 算出的地址已经被占用时，则走过一定的步长找到另外一个空位（在填充质数很大时就会很耗时）并保存数据。</p>\\n</li>\\n<li>\\n<p>链地址法</p>\\n<p>链地址法，创建保存数据的数组，该数组中不直接保存数据，而是保存一个用来存储这些数据的链表，将数据项直接存储的链表中。</p>\\n<p>当 hash 算法计算出的地址时，遍历数组中对应的链表找到空位并保存。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
