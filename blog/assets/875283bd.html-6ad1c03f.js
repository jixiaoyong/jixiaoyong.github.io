import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-b6af1138.js";const i={},u=t('<h1 id="为什么匿名内部类使用局部引用要用final" tabindex="-1"><a class="header-anchor" href="#为什么匿名内部类使用局部引用要用final" aria-hidden="true">#</a> 为什么<code>匿名内部类</code>使用<code>局部引用</code>要用<code>final</code>？</h1><p>先说结论：</p><p>由于 JAVA 匿名内部类的实现并不是真正的闭包，而是在生成内部类的时候<strong>将局部变量的引用拷贝了一份到内部类中</strong>。如果不将这个外部类设置为<code>final</code>的话，外部类或者内部类修改这个局部变量后，另外一处使用的仍然是修改前的值，这样就会产生问题，而如果将其修改为<code>final</code>则保证了局部变量与内部类使用的值是一致的。</p><h1 id="jdk1-8-后局部变量不要求用final了" tabindex="-1"><a class="header-anchor" href="#jdk1-8-后局部变量不要求用final了" aria-hidden="true">#</a> JDK1.8 后局部变量不要求用<code>final</code>了？</h1><p>不对，仍然是要求<code>final</code>的。</p><p>只不过编译器判断该局部变量不会再被修改时（<em>effectively final</em> 事实上的<code>final</code>），可以省略。</p>',6),d=n("p",null,[s("Any local variable, formal parameter, or exception parameter used but not declared in an inner class "),n("strong",null,"must either be declared final or be effectively final"),s(" (§4.12.4), or a compile-time error occurs where the use is attempted.")],-1),k=n("p",null,"Any local variable used but not declared in an inner class must be definitely assigned (§16 (Definite Assignment)) before the body of the inner class, or a compile-time error occurs.",-1),r={href:"https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.3",target:"_blank",rel:"noopener noreferrer"},v=t(`<h1 id="为什么外部类的全局变量不需要final" tabindex="-1"><a class="header-anchor" href="#为什么外部类的全局变量不需要final" aria-hidden="true">#</a> 为什么外部类的全局变量不需要<code>final</code>？</h1><p>因为全局变量是通过传入内部类的**外部类引用<code>this$0</code>**来引用的 (而非直接复制全局变量的值)，这样内部类和外部类持有的是同一个全部变量，自然不会存在两处更新不同步的问题。</p><h1 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OutClass</span> outClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outClass<span class="token punctuation">.</span><span class="token function">outMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 外部类</span>
<span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span>

    <span class="token comment">//全局变量</span>
    <span class="token keyword">public</span> <span class="token class-name">AnObj</span> anObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnObj</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//局部变量</span>
        <span class="token keyword">final</span> <span class="token class-name">AnObj</span> anObj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnObj</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//匿名内部类</span>
        <span class="token class-name">Inner</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//内部类访问外部类的全部变量和局部变量</span>
                <span class="token keyword">int</span> value <span class="token operator">=</span> anObj1<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> anObj<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inner:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        o<span class="token punctuation">.</span><span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//下面这两个类无需关注</span>
<span class="token keyword">interface</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AnObj</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AnObj</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//OutClass.class</span>
<span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AnObj</span> anObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnObj</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//可以看到，在编译之后，将外部类的引用和局部变量作为内部类的参数传入到内部类中</span>
        <span class="token keyword">new</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AnObj</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看内部类<code>OutClass$1</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//OutClass$1.class</span>
<span class="token keyword">class</span> <span class="token class-name">OutClass</span>$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token comment">/* synthetic */</span> <span class="token class-name">OutClass</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//这个是外部类的引用</span>
    <span class="token keyword">final</span> <span class="token comment">/* synthetic */</span> <span class="token class-name">AnObj</span> val$anObj1<span class="token punctuation">;</span><span class="token comment">//这个引用指向局部变量引用指向的内存空间</span>

    <span class="token class-name">OutClass</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">OutClass</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">AnObj</span> anObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">this</span>$<span class="token number">0</span> <span class="token operator">=</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val$anObj1 <span class="token operator">=</span> anObj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//在这里可以看出，内部类通过局部变量的备份引用访问的 this.val$anObj1.getI()，</span>
        <span class="token comment">//所以如果内部类所处的方法，修改了这个局部变量（假设将这个引用指向了另外一个 AnObj 对象），</span>
        <span class="token comment">//但这里的 this.val$anObj1 指向的仍然是旧的 AnObj 对象，从而出现了对“同一个局部变量”在内部类和内部类外部分别有不同值的问题，所以需要 final 来限制对局部变量的更改</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inner:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>val$anObj1<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">this</span>$<span class="token number">0.</span>anObj<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//但是再看外部类的全局变量，在内部类中仍然是通过外部类的引用 this.this$0来引用 anObj 的，所以无论何时，内部类中的外部类全局变量都是最新的，所做的更改也会实时更新到外部类中，所以不需要 final</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,9),m={href:"https://www.runoob.com/w3cnote/inner-lambda-final.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://stackoverflow.com/questions/4732544/why-are-only-final-variables-accessible-in-anonymous-class/4732617#4732617",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.zhihu.com/question/21395848/answer/110829597",target:"_blank",rel:"noopener noreferrer"};function f(w,y){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[d,k,n("p",null,[n("a",r,[s("https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.3"),e(a)])])]),v,n("p",null,[n("a",m,[s("https://www.runoob.com/w3cnote/inner-lambda-final.html"),e(a)])]),n("p",null,[n("a",b,[s("Why are only final variables accessible in anonymous class?--stackoverflow"),e(a)])]),n("p",null,[n("a",h,[s("java 为什么匿名内部类的参数引用时 final？ - 胖君的回答 - 知乎"),e(a)])])])}const _=p(i,[["render",f],["__file","875283bd.html.vue"]]);export{_ as default};
