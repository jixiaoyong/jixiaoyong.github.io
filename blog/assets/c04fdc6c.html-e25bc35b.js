import{_ as c,r as i,o as p,c as d,a as n,b as a,d as e,f as t,e as o}from"./app-7684fb8c.js";const l={},r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),u={href:"http://jixiaoyong.github.io/blog/posts/2822c354/",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Dagger 2",-1),v={href:"https://google.github.io/dagger/android",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Dagger 2 ",-1),g=n("code",null,"Android",-1),b=o(`<p>本文有关<code>Dagger 2</code>的使用分为<code>Activity</code>和<code>Fragment</code>两部分，二者的使用几乎没有差别，最后介绍一下在 Google 官方 Demo 中学到的一个小技巧，可以将几乎所有的和<code>Dagger 2</code>的逻辑放到一份代码里面，对<code>Android</code>工程的影响极小。</p><p>首先要添加相关依赖（Kotlin 环境）：</p><div class="language-gradle line-numbers-mode" data-ext="gradle"><pre class="language-gradle"><code><span class="token keyword">apply</span> <span class="token keyword">plugin</span><span class="token punctuation">:</span> <span class="token string">&#39;kotlin-kapt&#39;</span><span class="token comment">//引用该插件</span>
<span class="token keyword">implementation</span> <span class="token interpolation-string"><span class="token string">&quot;com.google.dagger:dagger:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.dagger2Version&quot;</span></span>
<span class="token keyword">implementation</span> <span class="token interpolation-string"><span class="token string">&quot;com.google.dagger:dagger-android-support:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.dagger2Version&quot;</span></span><span class="token comment">//Android 特需</span>
kapt <span class="token interpolation-string"><span class="token string">&quot;com.google.dagger:dagger-compiler:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.dagger2Version&quot;</span></span><span class="token comment">//注意如果是 kotlin 语言，这里需要时#kapt#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-activity-中的使用" tabindex="-1"><a class="header-anchor" href="#在-activity-中的使用" aria-hidden="true">#</a> 在 Activity 中的使用</h2><h3 id="application-范围内的-component" tabindex="-1"><a class="header-anchor" href="#application-范围内的-component" aria-hidden="true">#</a> Application 范围内的@Component</h3><p>首先创建整个应用程序使用的<code>@Component</code>，并将<code>AndroidInjectionModule</code>加入其中，实现<code>Inject</code>注入入口：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>AndroidInjectionModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> MainActivityModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">interface</span> AppComponent <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">inject</span><span class="token punctuation">(</span>application<span class="token operator">:</span> MainApplication<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AppComponent</code>的范围是整个应用程序都有效。</p><h3 id="创建单个-activity-的-subcomponent" tabindex="-1"><a class="header-anchor" href="#创建单个-activity-的-subcomponent" aria-hidden="true">#</a> 创建单个 Activity 的@Subcomponent</h3><p>创建某个<code>Activity</code>专属的<code>@Subcomponent</code>，用于提供<code>AndroidInjector.Builder</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Subcomponent</span>
<span class="token keyword">interface</span> MainActivitySubComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MainActivity<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">.</span>Builder
    <span class="token keyword">abstract</span> <span class="token keyword">class</span> Builder <span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Builder<span class="token operator">&lt;</span>MainActivity<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建单个-activity-的-module" tabindex="-1"><a class="header-anchor" href="#创建单个-activity-的-module" aria-hidden="true">#</a> 创建单个 Activity 的@Module</h3><p>创建属于整个<code>Activity</code>的<code>@Module</code>，注意这里要指明<code>@subcomponents</code>为刚刚创建的<code>MainActivitySubComponent</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Module</span><span class="token punctuation">(</span>includes <span class="token operator">=</span> <span class="token punctuation">[</span>MainActivityModule<span class="token punctuation">.</span>InnerModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> subcomponents <span class="token operator">=</span> <span class="token punctuation">[</span>MainActivitySubComponent<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> MainActivityModule <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Provides</span>
    <span class="token keyword">fun</span> <span class="token function">bindWaitForInjectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">WaitForInjectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token annotation builtin">@Module</span>
    <span class="token keyword">abstract</span> <span class="token keyword">class</span> InnerModule <span class="token punctuation">{</span>
        <span class="token annotation builtin">@Binds</span>
        <span class="token annotation builtin">@IntoMap</span>
        <span class="token annotation builtin">@ClassKey</span><span class="token punctuation">(</span>MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">bindInjectorFactory</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> MainActivitySubComponent<span class="token punctuation">.</span>Builder<span class="token punctuation">)</span><span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token comment">//注意这里是 Factory&lt;*&gt;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> WaitForInjectClass <span class="token comment">//一个供依赖注入的类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在<code>MainActivityModule</code>中提供了一个方法利用刚刚<code>MainActivitySubComponent</code>中提供的<code>MainActivitySubComponent.Builder</code>实例生成了一个<code>AndroidInjector.Factory</code>，而这个<code>Factory</code>就是我们后面要将<code>MainActivityModule</code>中的依赖实例通过<code>AppComponent</code>传递给<code>MainActivity</code>实例的关键。</p>`,15),h={href:"https://github.com/jixiaoyong/jixiaoyong.github.io/issues",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[a("然后，将"),n("code",null,"MainActivityModule"),a("加入到应用程序的"),n("code",null,"@Component"),a("——"),n("code",null,"AppComponent"),a("中。")],-1),A={id:"使-application-继承自-hasactivityinjector",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#使-application-继承自-hasactivityinjector","aria-hidden":"true"},"#",-1),_={href:"https://google.github.io/dagger/api/latest/dagger/android/HasActivityInjector.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"HasActivityInjector",-1),M=o(`<p>使当前<code>MainApplication</code>继承自<code>HasActivityInjector</code>，该接口只有一个方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/** Returns an {@link AndroidInjector} of {@link Activity}s. */</span>
AndroidInjector<span class="token operator">&lt;</span>Activity<span class="token operator">&gt;</span> <span class="token function">activityInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类是用来为相应的<code>Activity</code>提供一个<code>AndroidInjector</code>。由于我们已经在<code>AppComponent</code>中包括了<code>AndroidInjectionModule</code>，所以<code>Dagger 2</code>已经可以自动为我们注入<code>DispatchingAndroidInjector</code>依赖，所以接下来的代码如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainApplication <span class="token operator">:</span> HasActivityInjector<span class="token punctuation">,</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        DaggerAppComponent<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token annotation builtin">@Inject</span>
    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> dispatchActivityInjector<span class="token operator">:</span> DispatchingAndroidInjector<span class="token operator">&lt;</span>Activity<span class="token operator">&gt;</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">activityInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> dispatchActivityInjector<span class="token comment">//返回 Dagger 2 为我们注入的 dispatchActivityInjector 对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>onCreate()</code>方法中传入当前<code>Application</code>的依赖。</p><h3 id="在-activity-中使用自动注入依赖" tabindex="-1"><a class="header-anchor" href="#在-activity-中使用自动注入依赖" aria-hidden="true">#</a> 在 Activity 中使用自动注入依赖</h3><p>做完了以上所有内容，我们只需要在<code>Activity</code>中添加如下代码就可以实现自动注入：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Inject</span>
    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> waitForInjectClass<span class="token operator">:</span> WaitForInjectClass

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AndroidInjection<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//注意这里，在 super() 之前调用</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_dagger2_x_android_main<span class="token punctuation">)</span>

        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;TAG&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;The Class is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">waitForInjectClass</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),I={href:"https://gist.github.com/jixiaoyong/db7e5f18b7106ce9cb36b61bf7134340",target:"_blank",rel:"noopener noreferrer"},C=o('<h3 id="这一切是怎么实现的呢" tabindex="-1"><a class="header-anchor" href="#这一切是怎么实现的呢" aria-hidden="true">#</a> 这一切是怎么实现的呢？</h3><p>在<code>Android</code>程序运行时，<code>AndroidInjection.inject()</code>从<code>Application</code>中的<code>activityInjector()</code>方法获取到 <code>DispatchingAndroidInjector&lt;Activity&gt;</code> ，然后将<code>Activity</code>传入<code>inject(Activity)</code>。</p><p><code>DispatchingAndroidInjector</code> 通过<code>AppComponent</code>找到我们在<code>MainActivityModule</code>提供的对应的<code>AndroidInjector.Factory</code>，然后创建了 <code>AndroidInjector</code> ——这就是我们当前<code>Activity</code>对应的<code>MainActivitySubComponent</code>。</p><p>接下来便按照之前的逻辑，从<code>MainActivitySubComponent</code>中查找提供<code>waitForInjectClass</code>的实例方法完成注入。</p><h2 id="在-fragment-中的使用" tabindex="-1"><a class="header-anchor" href="#在-fragment-中的使用" aria-hidden="true">#</a> 在 Fragment 中的使用</h2><p><code>Dagger 2</code>在<code>Fragment</code>的使用和在<code>Activity</code>中的使用十分相似。</p><p>通过之前的代码我们可以知道，其基本的原理依旧是利用<code>@Component</code>和<code>@subcomponent</code>，<code>@Module</code>之间的关联关系将<code>Application</code>和<code>Activity</code>等的依赖注入通过<code>AndroidInjector</code>关联起来的：</p><p><code>MainActivitySubComponent</code>通过将<code>MainActivityModule</code>加入到<code>AppComponent</code>之中，然后当<code>MainActivity</code>之中需要使用到<code>MainActivitySubComponent</code>时，又通过<code>AndroidInjector</code>从<code>AppComponent</code>中拿到<code>MainActivityModule</code>中的<code>AndroidInjector.Factory</code>，通过该<code>Factory</code>和<code>MainActivitySubComponent</code>中的<code>Builder</code>产生关联，从而获取到了<code>MainActivitySubComponent</code>的实例供<code>Activity</code>使用。</p><p>在<code>Fragment</code>中我们也可以这样处理，只不过由于<code>Fragment</code>的特性，他的<code>@Module</code>不仅可以交给<code>Application</code>的<code>@Component</code>，也可以交给其他<code>Fragment</code>或者<code>Activity</code>的<code>@Component</code>，让其实现<code>HasFragmentInjector</code>即可，这取决于我们想要给<code>Fragment</code>绑定的依赖。</p><p>具体的实现一般分为下面几步：</p>',10),w=o("<li><p>创建<code>Application</code>的<code>@Component</code>并添加<code>AndroidInjectionModule</code></p></li><li><p>创建实现了<code>AndroidInjector&lt;MainFragment&gt;</code>的<code>MainFragmentSubComponent</code>，其内部有方法提供<code>AndroidInjector.Builder&lt;MainFragment&gt;</code></p></li><li><p>创建包含了提供<code>AndroidInjector.Factory&lt;*&gt;</code>的抽象方法的<code>MainFragmentModule</code>，指定其<code>subcomponents</code>为<code>MainFragmentSubComponent</code>；</p></li><li><p>将<code>MainFragmentSubComponent</code>加入到想要加入的类的<code>@Component</code>中，比如<code>AppComponent</code>类</p></li>",4),x=n("p",null,[a("在"),n("code",null,"Application"),a("（如果上一步是"),n("code",null,"Activity"),a("，则本步也是"),n("code",null,"Activity"),a("等）中参照在"),n("code",null,"Activity"),a("实现的步骤实现"),n("code",null,"HasFragmentInjector")],-1),F={href:"https://gist.github.com/jixiaoyong/a24e76ca29f4c8062bf5c6a98529d252",target:"_blank",rel:"noopener noreferrer"},S=o('<p>关于<code>Fragment</code>加入到<code>Activity</code>的 Demo 在官方文档有，这里就不再赘述了，其实只要掌握原理，其他用法的完全可以触类旁通。</p><h2 id="一个小技巧" tabindex="-1"><a class="header-anchor" href="#一个小技巧" aria-hidden="true">#</a> 一个小技巧</h2><p>通过观察上面的两份代码，我们发现虽然这<code>Dagger 2</code>已经替我们做了好多事情，我们只需要在需要使用依赖注入的类中使用诸如<code>AndroidInjection.inject(this)</code>这样的代码就可以了，但是如果<code>Activity</code>、<code>Fragment</code>类过多的时候，这样的重复性工作仍然是个不小的工作量，万一有某处遗忘了便会导致出错。</p>',3),B={href:"https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample",target:"_blank",rel:"noopener noreferrer"},D={href:"https://gist.github.com/jixiaoyong/9260c3ae2a70555e14f40c4b95364715",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),V={href:"https://google.github.io/dagger/android",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample",target:"_blank",rel:"noopener noreferrer"};function H(N,P){const s=i("ExternalLinkIcon");return p(),d("div",null,[r,n("p",null,[n("a",u,[a("上篇文章"),e(s)]),a("介绍了"),k,a(" 的基本使用，本文跟随"),n("a",v,[a("官方文档"),e(s)]),a("实践一下"),m,a("在"),g,a("中的使用，可以看做是官方文档的不完全翻译。")]),b,n("blockquote",null,[n("p",null,[a("此外还可以看到提供该 Factory 的方法是放到了另外一个抽象类里面然后再导入 MainActivityModule 中的，这是因为该方法的注解@Binds 要求方法是抽象的，而 MainActivityModule 要是需要给 Activity 提供依赖实例所必须的@Provides 又要求类不能是抽象的，否则就要求该方法是静态的。权衡之下我觉得这种方式是比较能接受的，当然也不排除有其他更优雅的解决方案，欢迎提"),n("a",h,[a("Issue"),e(s)]),a("告知。")])]),y,n("h3",A,[f,a(" 使 Application 继承自 "),n("a",_,[j,e(s)])]),M,n("p",null,[a("以上所有代码如下，或者也可以"),n("a",I,[a("在这里找到"),e(s)]),a("：")]),t(' <script src="https://gist.github.com/jixiaoyong/db7e5f18b7106ce9cb36b61bf7134340.js"><\/script> '),C,n("ul",null,[w,n("li",null,[x,n("p",null,[a("上述完整的代码如下，或者也可以"),n("a",F,[a("在这里找到"),e(s)]),a("：")]),t(' <script src="https://gist.github.com/jixiaoyong/a24e76ca29f4c8062bf5c6a98529d252.js"><\/script> ')])]),S,n("p",null,[a("这时就可以用到我在"),n("a",B,[a("Google 官方示例代码"),e(s)]),a("中学到的一个小技巧了 (针对本文中的例子做了一些修改)，或者你也可以"),n("a",D,[a("到这里查看源码"),e(s)]),a("：")]),t(' <script src="https://gist.github.com/jixiaoyong/9260c3ae2a70555e14f40c4b95364715.js"><\/script> '),q,n("p",null,[n("a",V,[a("Dagger 2 官方文档 Android 篇"),e(s)])]),n("p",null,[n("a",G,[a("Google 官方示例代码——GithubBrowserSample"),e(s)])])])}const $=c(l,[["render",H],["__file","c04fdc6c.html.vue"]]);export{$ as default};
