const e=JSON.parse('{"key":"v-374c7c33","path":"/posts/f31c11c5.html","title":"JVM 内存分配","lang":"zh-CN","frontmatter":{"permalink":"/posts/f31c11c5.html","title":"JVM 内存分配","tags":"jvm","abbrlink":"f31c11c5","date":"2018-02-24T15:39:19.000Z","updated":"2023-12-30T08:17:02.000Z","description":"本笔记基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》及部分在线博客整理。 JVM：java virtual machine，一个 java 程序（进程）拥有一个 jvm 实例 内存 JVM 区域总体分两类，heap 区和非 heap 区： heap 区：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代 - 养老区）。 非 heap 区：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java 虚拟机栈)、Local Method Statck(本地方 法栈)。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/f31c11c5.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"JVM 内存分配"}],["meta",{"property":"og:description","content":"本笔记基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》及部分在线博客整理。 JVM：java virtual machine，一个 java 程序（进程）拥有一个 jvm 实例 内存 JVM 区域总体分两类，heap 区和非 heap 区： heap 区：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代 - 养老区）。 非 heap 区：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java 虚拟机栈)、Local Method Statck(本地方 法栈)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-01T15:53:49.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:published_time","content":"2018-02-24T15:39:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T15:53:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 内存分配\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-24T15:39:19.000Z\\",\\"dateModified\\":\\"2024-01-01T15:53:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"内存","slug":"内存","link":"#内存","children":[]},{"level":2,"title":"内存划分","slug":"内存划分","link":"#内存划分","children":[{"level":3,"title":"1.head","slug":"_1-head","link":"#_1-head","children":[]},{"level":3,"title":"2.stack","slug":"_2-stack","link":"#_2-stack","children":[]},{"level":3,"title":"3.method area","slug":"_3-method-area","link":"#_3-method-area","children":[]},{"level":3,"title":"4.program count","slug":"_4-program-count","link":"#_4-program-count","children":[]}]},{"level":2,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[{"level":3,"title":"1.java 堆溢出","slug":"_1-java-堆溢出","link":"#_1-java-堆溢出","children":[]},{"level":3,"title":"2.虚拟机栈和本地方法栈溢出","slug":"_2-虚拟机栈和本地方法栈溢出","link":"#_2-虚拟机栈和本地方法栈溢出","children":[]},{"level":3,"title":"3.运行时常量池溢出","slug":"_3-运行时常量池溢出","link":"#_3-运行时常量池溢出","children":[]},{"level":3,"title":"4.方法区溢出","slug":"_4-方法区溢出","link":"#_4-方法区溢出","children":[]},{"level":3,"title":"5.本地直接内存溢出","slug":"_5-本地直接内存溢出","link":"#_5-本地直接内存溢出","children":[]}]},{"level":2,"title":"GC 垃圾回收","slug":"gc-垃圾回收","link":"#gc-垃圾回收","children":[{"level":3,"title":"回收算法","slug":"回收算法","link":"#回收算法","children":[]},{"level":3,"title":"回收过程","slug":"回收过程","link":"#回收过程","children":[]}]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[{"level":3,"title":"对象引用","slug":"对象引用","link":"#对象引用","children":[]}]},{"level":2,"title":"脑图","slug":"脑图","link":"#脑图","children":[]}],"git":{"createdTime":1704124429000,"updatedTime":1704124429000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":6.37,"words":1911},"filePathRelative":"_posts/JVM内存知识整理.md","localizedDate":"2018年2月24日","excerpt":"<blockquote>\\n<p>本笔记基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》及部分在线博客整理。</p>\\n</blockquote>\\n<p>JVM：java virtual machine，一个 java 程序（进程）拥有一个 jvm 实例</p>\\n<h2> 内存</h2>\\n<p>JVM 区域总体分两类，heap 区和非 heap 区：</p>\\n<p><strong>heap 区</strong>：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代 - 养老区）。<br>\\n<strong>非 heap 区</strong>：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java 虚拟机栈)、Local Method Statck(本地方 法栈)。</p>","autoDesc":true}');export{e as data};
