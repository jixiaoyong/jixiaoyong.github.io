import{_ as s,c as i,o as a,a as n}from"./app-6mClgp5V.js";const e={},l=n(`<p>Flutter 默认提供了<strong>Image</strong>用于从网络、文件等加载图片，并且使用<strong>ImageCache</strong>统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了<a href="https://github.com/Baseflow/flutter_cached_network_image" target="_blank" rel="noopener noreferrer">flutter_cached_network_image</a>、<a href="https://github.com/fluttercandies/extended_image" target="_blank" rel="noopener noreferrer">extended_image</a>等基于 Flutter 原生的解决方案，以及<a href="https://github.com/alibaba/power_image" target="_blank" rel="noopener noreferrer">power_image</a>等基于混合开发的解决方案。</p><p>本文对 extended_image 加载过程、原理做一简单分析。</p><h2 id="extended-image" tabindex="-1"><a class="header-anchor" href="#extended-image"><span>extended_image</span></a></h2><p><a href="https://github.com/fluttercandies/extended_image" target="_blank" rel="noopener noreferrer">extended_image</a>是基于官方 Image 的拓展组件，支持加载以及失败显示，缓存网络图片，缩放拖拽图片，图片浏览 (微信掘金效果)，滑动退出页面 (微信掘金效果)，编辑图片 (裁剪旋转翻转)，保存，绘制自定义效果等功能。</p><p>本文主要对其<strong>加载缓存网络图片</strong>的流程做一分析，因为这个库是官方 Image 的拓展，所以我们会在之前<a href="https://jixiaoyong.github.io/blog/posts/1912667a.html" target="_blank" rel="noopener noreferrer">对 Image 的分析</a>基础上进行对比分析。</p><p>extended_image 的架构图如下：</p><figure><img src="https://jixiaoyong.github.io/images/extended_image_class_structure.png" alt="extended_image_class_structure" tabindex="0" loading="lazy"><figcaption>extended_image_class_structure</figcaption></figure><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h2><p>因为 extended_image 的定位是官方 Image 的拓展版，所以大部分使用方式和官方类似。</p><h3 id="extendedimage" tabindex="-1"><a class="header-anchor" href="#extendedimage"><span>ExtendedImage</span></a></h3><p>他的构造函数分别是：</p><ul><li>ExtendedImage</li><li>ExtendedImage.asset</li><li>ExtendedImage.file</li><li>ExtendedImage.memory</li><li>ExtendedImage.network</li></ul><p>同样是在构造函数中指定并创建 ImageProvider，不过 extented_image 库的 ImageProvider 都是继承自官方 ImageProvider 并且混入了<strong>ExtendedImageProvider</strong>的子类。以<code>ExtendedImage.network</code>为例，创建的 ImageProvider 类型是<strong>ExtendedNetworkImageProvider</strong>。</p><p>其余的步骤和我们之前分析的官方 Image 组件类似，在 <strong>_ExtendedImageState</strong> 中使用 <strong>ImageProvider</strong> 获取并监听 <strong>ImageStream</strong>，当成功加载图片之后获得<code>ImageInfo? _imageInfo</code>并刷新页面，在<code>_ExtendedImageState.build</code>方法中，虽然 extended_image 增加了一些特有的加载中、加载失败、手势等封装，但最后还是使用<code>ImageInfo.image</code>创建<strong>ExtendedRawImage</strong>以展示图片内容。</p><p>如此可见，在从网络加载图片这部分内容来看，ExtendedImage 和 Image 的主要不同在于<strong>ExtendedNetworkImageProvider</strong>的实现：</p><h3 id="extendednetworkimageprovider" tabindex="-1"><a class="header-anchor" href="#extendednetworkimageprovider"><span>ExtendedNetworkImageProvider</span></a></h3><blockquote><p>这部分内容的代码在<a href="https://github.com/fluttercandies/extended_image_library" target="_blank" rel="noopener noreferrer">extended_image_library</a>中。</p></blockquote><p>ExtendedNetworkImageProvider 继承自<strong>ImageProvider</strong>，混入了<strong>ExtendedImageProvider</strong>，后者提供了<code>get imageCache</code>/<code>instantiateImageCodec</code>/<code>resolveStreamForKey</code>等一系列通用方法。</p><p>下面是 ExtendedNetworkImageProvider 的源码：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedNetworkImageProvider</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> factory</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> url, {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> scale,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> headers,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cache,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> retries,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeLimit,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> timeRetry,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    CancellationToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cancelToken,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheKey,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> printError,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheRawData,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCacheName,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheMaxAge,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> network_image.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ExtendedNetworkImageProvider 是个抽象类，他的逻辑在<code>network_image.ExtendedNetworkImageProvider</code>中：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;extended_network_image_provider.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> image_provider;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedNetworkImageProvider</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;image_provider.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;image_provider.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    implements</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> image_provider.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 此方法获取的图片会被 ImageProvider 缓存到 ImageCache 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ImageStreamCompleter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      image_provider.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">DecoderCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> decode) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StreamController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageChunkEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; chunkEvents </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        StreamController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageChunkEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> MultiFrameImageStreamCompleter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      codec</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _loadAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 调用_loadAsync 方法加载图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        key </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        decode,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key.scale,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      chunkEvents</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> chunkEvents.stream,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      informationCollector</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Future</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Codec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">_loadAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    StreamController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageChunkEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    DecoderCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> decode,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> md5Key </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">??</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> keyToMd5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key.url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Codec</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (cache) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 如果需要缓存图片，就调用_loadCache 优先从缓存中读取，没有的话先从网络下载，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 成功之后再缓存到本地缓存文件目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Uint8List</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _loadCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          md5Key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 解析加载的图片信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> instantiateImageCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(data, decode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (printError) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">          print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 如果不需要缓存或者从缓存中读取/下载失败了，就从网络加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Uint8List</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _loadNetwork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> instantiateImageCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(data, decode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (printError) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">          print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 如果还是失败，就展示失败信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      //result = await ui.instantiateImageCodec(kTransparentImage);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Future</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Codec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">StateError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Failed to load </span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码可以看到，如果需要缓存时，除了 ImageCache 本身的缓存外，ExtendedNetworkImageProvider 还会执行<code>_loadCache</code>尝试从本地文件中读取缓存：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Uint8List</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">_loadCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ExtendedNetworkImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    StreamController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageChunkEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> md5Key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Directory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cacheImagesDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Directory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getTemporaryDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).path, cacheImageFolderName));</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    Uint8List</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 1. 先尝试从缓存文件中读取图片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (_cacheImagesDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">existsSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheFlie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(_cacheImagesDirectory.path, md5Key));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (cacheFlie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">existsSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (key.cacheMaxAge </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> FileStat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheFlie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">statSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key.cacheMaxAge</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fs.changed)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            cacheFlie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">deleteSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheFlie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readAsBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheFlie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readAsBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // create folder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      await</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cacheImagesDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // load from network</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 2.1 缓存不存在或者读取失败，先仅从网络加载图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _loadNetwork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        chunkEvents,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // cache image file</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 2.2 如果从网络成功加载图片，则将图片写入文件缓存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        await</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(_cacheImagesDirectory.path, md5Key)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">writeAsBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中执行到的<code>ExtendedNetworkImageProvider._loadNetwork()</code>方法只会使用<code>HttpClient</code>从网络中下载图片并返回。</p><h3 id="extendedimageprovider" tabindex="-1"><a class="header-anchor" href="#extendedimageprovider"><span>ExtendedImageProvider</span></a></h3><p>此外，之前提到的<code>ExtendedImageProvider</code>为 extended_image 库中的 ImageProvider 提供了一些通用的方法：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/// The cached raw image data 缓存图片原始数据，而不必每次都使用 ui.Image.toByteData() 获取</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">dynamic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Uint8List</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; rawImageDataMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ExtendedImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">dynamic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Uint8List</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/// The imageCaches to store custom ImageCache，缓存 ImageCache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/// 可以指定一个 ImageCache 来缓存一些图片。这样可以一起处理它们，不会影响其他的图片缓存。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; imageCaches </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">mixin</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ExtendedImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cacheRawData;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCacheName;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ImageCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCache {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (imageCacheName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCaches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">putIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(imageCacheName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> PaintingBinding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.instance.imageCache;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还改动了<code>ExtendedImageProvider.resolveStreamForKey</code>方法以使用指定的 ImageCache。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> resolveStreamForKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ImageConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> configuration,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ImageStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> stream,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">    ImageErrorListener</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> handleError,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // This is an unusual edge case where someone has told us that they found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // the image we want before getting to this method. We should avoid calling</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // load again, but still update the image cache with LRU information.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (stream.completer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageStreamCompleter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> completer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">putIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        () </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> stream.completer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        onError</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> handleError,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">identical</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(completer, stream.completer));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ImageStreamCompleter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> completer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imageCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">putIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      () </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">PaintingBinding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.instance.instantiateImageCodec),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      onError</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> handleError,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (completer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCompleter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(completer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所见，ExtendedImageProvider 的主要作用是借助<code>rawImageDataMap</code>提供了缓存图片原始数据的功能，此外还提供了一个 ImageCache 分组的方法，以便对一部分图片缓存统一处理。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>仅就从网络加载图片而言，extended_image 和 Flutter 官方 Image 组件的主要区别在于：在 ImageCache 之外，<strong>多了一层本地磁盘缓存</strong>，如果这二者都未命中缓存则从网络下载图片。</p><p>除此之外，extended_image 本身还提供了诸如图片缩放拖拽、滑动退出等图片操作常用的“大而全”的功能。这部分见仁见智，如果 APP 需求刚好需要用到这些功能的话，extended_image 是个不错的选择，但是如果只是想解决图片缓存问题的话，可能会显得有些臃肿。</p><p>另外一个常用的图片库<a href="https://github.com/fluttercandies/extended_image" target="_blank" rel="noopener noreferrer">flutter_cached_network_image</a>则是借助<a href="https://github.com/Baseflow/flutter_cache_manager" target="_blank" rel="noopener noreferrer">flutter_cache_manager</a>实现缓存网络图片的功能，相对比较轻量。</p><p>上述两种库都是基于 Flutter Image 组件实现图片加载、缓存，阿里巴巴出品的<a href="https://github.com/alibaba/power_image" target="_blank" rel="noopener noreferrer">power_image</a>则是一款为 Flutter-Native 混合项目开发的图片加载库，借助 Texture 和 ffi 通过 Native 端已有的图片加载库完成图片加载、缓存的功能，Flutter 端只负责展示（以及 ImageCache 缓存）。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://github.com/fluttercandies/extended_image" target="_blank" rel="noopener noreferrer">extended_image</a></p><p><a href="https://github.com/fluttercandies/extended_image_library" target="_blank" rel="noopener noreferrer">extended_image_library</a></p>`,39),t=[l];function h(k,p){return a(),i("div",null,t)}const d=s(e,[["render",h],["__file","23ac516a.html.vue"]]),g=JSON.parse('{"path":"/posts/23ac516a.html","title":"Flutter 图片加载方案分析之 extended_image","lang":"zh-CN","frontmatter":{"permalink":"/posts/23ac516a.html","title":"Flutter 图片加载方案分析之 extended_image","tag":"flutter","date":"2022-08-01T09:42:35.000Z","updated":"2023-12-30T08:17:02.000Z","abbrlink":"23ac516a","isOriginal":true,"description":"Flutter 默认提供了Image用于从网络、文件等加载图片，并且使用ImageCache统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了flutter_cached_network_image、extended_image等基于 Flutter 原生的...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/23ac516a.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Flutter 图片加载方案分析之 extended_image"}],["meta",{"property":"og:description","content":"Flutter 默认提供了Image用于从网络、文件等加载图片，并且使用ImageCache统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了flutter_cached_network_image、extended_image等基于 Flutter 原生的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/extended_image_class_structure.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T03:36:59.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"flutter"}],["meta",{"property":"article:published_time","content":"2022-08-01T09:42:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T03:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flutter 图片加载方案分析之 extended_image\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/extended_image_class_structure.png\\"],\\"datePublished\\":\\"2022-08-01T09:42:35.000Z\\",\\"dateModified\\":\\"2024-06-04T03:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"extended_image","slug":"extended-image","link":"#extended-image","children":[]},{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[{"level":3,"title":"ExtendedImage","slug":"extendedimage","link":"#extendedimage","children":[]},{"level":3,"title":"ExtendedNetworkImageProvider","slug":"extendednetworkimageprovider","link":"#extendednetworkimageprovider","children":[]},{"level":3,"title":"ExtendedImageProvider","slug":"extendedimageprovider","link":"#extendedimageprovider","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1659347004000,"updatedTime":1717472219000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":4},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":5.71,"words":1712},"filePathRelative":"_posts/Flutter图片加载方案分析之extended_image.md","localizedDate":"2022年8月1日","excerpt":"<p>Flutter 默认提供了<strong>Image</strong>用于从网络、文件等加载图片，并且使用<strong>ImageCache</strong>统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了<a href=\\"https://github.com/Baseflow/flutter_cached_network_image\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">flutter_cached_network_image</a>、<a href=\\"https://github.com/fluttercandies/extended_image\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">extended_image</a>等基于 Flutter 原生的解决方案，以及<a href=\\"https://github.com/alibaba/power_image\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">power_image</a>等基于混合开发的解决方案。</p>","autoDesc":true}');export{d as comp,g as data};
