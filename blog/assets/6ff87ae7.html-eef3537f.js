import{_ as e,N as p,O as c,P as n,W as s,S as t,a6 as o,C as l}from"./framework-656811b8.js";const i={},u=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k={href:"https://github.com/hongyangAndroid/okhttputils",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"okhttputils",-1),r=n("p",null,"主要涉及类：",-1),v=n("ul",null,[n("li",null,"OkHttpUtils"),n("li",null,"OkHttpRequestBuilder"),n("li",null,"OkHttpRequest"),n("li",null,"RequestCall"),n("li",null,"Callback")],-1),m=n("h1",{id:"基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础","aria-hidden":"true"},"#"),s(" 基础")],-1),b={href:"https://github.com/square/okhttp",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 创建一个OkHttpClient客户端，在这里配置网络超时等全局配置</span>
<span class="token class-name">OkHttpClient</span> okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 创建一个网络请求，每个Http访问对应一个Request，详细配置了访问的URL，类型，参数等信息</span>
<span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request
        <span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 使用OkHttpClient客户端创建Call并执行该网络请求，分为阻塞和异步两种方式，异步会有对应回调</span>
okHttpClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然整体的逻辑已经很简单了，但是在实际使用的时候，不可能对每个网络请求都写一次上述代码，所以就需要对齐进行必要的封装以简化网络请求流程。</p><p>okhttputils就做到了这一点，并且将上述第二步常见网络请求的过程也加入链式调用中，使用起来更加连贯：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 全局配置唯一的OkHttpClient</span>
<span class="token class-name">OkHttpClient</span> okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OkHttpUtils</span><span class="token punctuation">.</span><span class="token function">initClient</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.在需要网络请求的时候，执行对应代码</span>
<span class="token class-name">OkHttpUtils</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zhy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>callback<span class="token punctuation">.</span></span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment">//回调方法</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>9~10</code>行相当于OKHttp步骤2创建网络请求，<code>11~14</code>则就是步骤3执行网络请求的过程。</p><p>每次使用网络请求时只需要选择<code>get</code>、<code>post</code>等方法获取并配置相应<code>builder</code>，然后选择<code>execute</code>执行即可。</p><h1 id="实现分析" tabindex="-1"><a class="header-anchor" href="#实现分析" aria-hidden="true">#</a> 实现分析</h1><p>那么okhttputils是如何实现这一点的呢？</p><p>首先看看<code>OkHttpUtils</code>的结构：</p><figure><img src="https://jixiaoyong.github.io/images/20190317141417.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到大体上可以将其分为3个部分：</p><ol><li>OkHttpClient相关</li><li>网络请求相关信息</li><li>与具体执行网络请求有关的方法</li></ol><h2 id="okhttpclient相关" tabindex="-1"><a class="header-anchor" href="#okhttpclient相关" aria-hidden="true">#</a> OkHttpClient相关</h2><p>我们先来看第一部分，OkHttpUtils本质上只是对OkHttpClient的方法进行了一次封装，所以其肯定要持有OkHttpClient对象，一般来说一个APP只需要一个OkHttpClient对象即可，所以可以看到OkHttpUtils做了双重锁定的单例处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OkHttpUtils</span> <span class="token function">initClient</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span> okHttpClient<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">OkHttpUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                mInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpUtils</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mInstance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们在第一次使用<code>OkHttpUtils</code>的时候初始化的<code>OkHttpClient</code>便会被保存到这里，之后的使用中就不需要再去反复创建了。</p><p>此外在<code>OkHttpUtils</code>的结构中可以注意到有一个<code>mPlatform</code>的变量，他会根据当前是Android还是其他平台的不同被初始化为Android主线程或者普通线程池，这个我们在后面回调网络请求状态的时候会用到。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Platform</span> mPlatform <span class="token operator">=</span> <span class="token function">findPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Platform</span> <span class="token function">findPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;android.os.Build&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Android</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ignored<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络请求相关信息" tabindex="-1"><a class="header-anchor" href="#网络请求相关信息" aria-hidden="true">#</a> 网络请求相关信息</h2><p>有了<code>OkHttpClient</code>对象之后，下一步便是创建一个适当的网络请求。</p><p>在<code>OkHttpUtils</code>中使用的是<code>OkHttpRequestBuilder &lt;T extends OkHttpRequestBuilder&gt;</code>的子类来收集、配置相关的一些属性。</p><p>在该类中，定义了一系列网络请求基本的参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> tag<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外还有一个抽象方法，用来创建执行网络请求的<code>RequestCall</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">RequestCall</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法在其子类中的实现一般是调用<code>OkHttpRequest</code>子类的<code>build</code>方法，可以看到<code>OkHttpRequestBuilder</code>只是将网络请求的相关参数传递到<code>OkHttpRequest</code>中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.zhy.http.okhttp.builder.GetBuilder</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">RequestCall</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        url <span class="token operator">=</span> <span class="token function">appendParams</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>OkHttpRequest</code>中，利用上述的参数可以并通过<code>generateRequest(Callback callback)</code>方法创建<code>Request</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.zhy.http.okhttp.request.OkHttpRequest</span>
<span class="token keyword">protected</span> <span class="token class-name">OkHttpRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> tag<span class="token punctuation">,</span>
                   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>params <span class="token operator">=</span> params<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Exceptions</span><span class="token punctuation">.</span><span class="token function">illegalArgument</span><span class="token punctuation">(</span><span class="token string">&quot;url can not be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">initBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化okhttp3.Request.Builder用于生成Request</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Request</span> <span class="token function">generateRequest</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">RequestBody</span> requestBody <span class="token operator">=</span> <span class="token function">buildRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RequestBody</span> wrappedRequestBody <span class="token operator">=</span> <span class="token function">wrapRequestBody</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于更新下载进度等，为okhttp3.Callback增加更多功能</span>
    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">buildRequest</span><span class="token punctuation">(</span>wrappedRequestBody<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在子类中使用okhttp3.Request.Builder对象生成对应的Request</span>
    <span class="token keyword">return</span> request<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的抽象方法<code>wrapRequestBody()</code>，<code>buildRequest()</code>的实现，也是<code>OkHttpRequest</code>各个子类主要的不同点。</p><blockquote><p><code>Callback</code>是在<code>okhttp3.Callback</code>的基础上增加了before，progress和对请求结果的处理等的回调。</p></blockquote><p><code>OkHttpRequest</code>类的<code>build</code>方法则只是将其自身传递给<code>okhttp3.Call</code>的封装类<code>RequestCall</code>，创建并返回该类的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.zhy.http.okhttp.request.OkHttpRequest</span>
<span class="token keyword">public</span> <span class="token class-name">RequestCall</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestCall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行网络请求" tabindex="-1"><a class="header-anchor" href="#执行网络请求" aria-hidden="true">#</a> 执行网络请求</h2><p><code>RequestCall</code>类则是对<code>okhttp3.Call</code>类的进一步封装，对外提供更多的接口：开始、取消网络请求<code>cancel()</code>,<code>readTimeOut()</code>…等接口。</p><p>当执行<code>RequestCall</code>的<code>execute</code>方法时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.zhy.http.okhttp.request.RequestCall</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">buildCall</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建okhttp3.Call对象，其所用的Request对象来自于okHttpRequest.generateRequest(callback)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">onBefore</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token function">getOkHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">OkHttpUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看其最后只是将<code>RequestCall</code>和<code>callback</code>传递给了<code>OkHttpUtils</code>类的<code>execute</code>方法，也就是说，最终还是调用了<code>okhttp3.Call</code>的<code>enqueue()</code>方法，在这里执行了真正的网络请求：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.zhy.http.okhttp.OkHttpUtils</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RequestCall</span> requestCall<span class="token punctuation">,</span> <span class="token class-name">Callback</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        callback <span class="token operator">=</span> <span class="token class-name">Callback</span><span class="token punctuation">.</span><span class="token constant">CALLBACK_DEFAULT</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Callback</span> finalCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> requestCall<span class="token punctuation">.</span><span class="token function">getOkHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    requestCall<span class="token punctuation">.</span><span class="token function">getCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">sendFailResultCallback</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> e<span class="token punctuation">,</span> finalCallback<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">sendFailResultCallback</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Canceled!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> finalCallback<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finalCallback<span class="token punctuation">.</span><span class="token function">validateReponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">sendFailResultCallback</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;request failed , reponse&#39;s code is : &quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> finalCallback<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">Object</span> o <span class="token operator">=</span> finalCallback<span class="token punctuation">.</span><span class="token function">parseNetworkResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sendSuccessResultCallback</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> finalCallback<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">sendFailResultCallback</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> e<span class="token punctuation">,</span> finalCallback<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而网络请求的回调，则是在本文最开始的<code>mPlatform</code>提供的线程中进行。这样保证了在Android中，<code>onBefore</code>、<code>onAfter</code>、<code>inProgress</code>等回调能够在UI线程进行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSuccessResultCallback</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Callback</span> callback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    mPlatform<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            callback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            callback<span class="token punctuation">.</span><span class="token function">onAfter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>在本文中，<code>okhttputils</code>将初始化<code>OkHttpClient</code>的动作提取出来，这样同一个应用只需要在最开始的时候配置一下诸如网络超时、cookie等既可。</p><p>在具体的实现中，通过<code>OkHttpRequestBuilder</code>收集网络请求的属性并传递给<code>OkHttpRequest</code>，在其子类中按照不同的需要实现生成<code>Request</code>的方法。</p><p><code>OkHttpRequestBuilder</code>的<code>build()</code>方法会生成<code>RequestCall</code>对象，<code>RequestCall</code>对象的<code>execute()</code>方法会调用<code>OkHttpRequestBuilder</code>对象的<code>generateRequest()</code>方法产生<code>Request</code>，并据此产生<code>Call</code>对象，最后通过该<code>Call</code>对象的enqueue方法执行网络请求。</p>`,45);function w(y,h){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("本文是对张鸿洋的OKHttp辅助类"),n("a",k,[d,t(a)]),s("简要分析，以便学习如何封装常见工具的思想，建议配合源码食用。")]),r,v,m,n("p",null,[n("a",b,[s("OkHttp"),t(a)]),s("是可以用于Android和Java的Http框架，经典的使用分为3步：")]),f])}const q=e(i,[["render",w],["__file","6ff87ae7.html.vue"]]);export{q as default};
