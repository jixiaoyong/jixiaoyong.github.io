import{_ as s,c as a,a as e,o as n}from"./app-3cnvzyR2.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p><strong>注意 除非特殊说明，以下所说的计算 Java 对象大小，不涉及该对象所持有的对象本身的大小，只计算该 Java 对象本身的大小（其中引用类型对象大小只计算为 4 bytes），如果要遍历计算 Java 对象大小（包含其持有对象的大小）可以参考<a href="https://www.javaworld.com/article/2077408/sizeof-for-java.html" target="_blank" rel="noopener noreferrer">这篇文章 Sizeof for Java</a></strong></p><p>一个 Java 对象在内存中的大小包括以下 (以 64 位 JVM 启用压缩为例，综合<a href="https://blog.csdn.net/ITer_ZC/article/details/41822719" target="_blank" rel="noopener noreferrer">这里</a>和<a href="https://blog.csdn.net/u013380694/article/details/102739636" target="_blank" rel="noopener noreferrer">这里</a>的信息整理)：</p><table><thead><tr><th>分类</th><th>大小（byte）</th><th>备注</th></tr></thead><tbody><tr><td>对象头</td><td>8</td><td>保存对象的 class 信息、ID、在虚拟机中的状态</td></tr><tr><td>Oop 指针</td><td>4</td><td></td></tr><tr><td>数据区</td><td></td><td>对象实际包含的数据，引用类型大小为 4 bytes</td></tr><tr><td>数组长度</td><td>4</td><td>只有数组对象才有</td></tr><tr><td>8 比特对齐</td><td></td><td>将对象总大小对齐到 8 字节所需的填充</td></tr></tbody></table><blockquote><p>此外，如果是（非静态）内部类的话，由于他默认持有外部类的引用，所以会比普通类的对象多 4 个 byte。</p><p><a href="https://stackoverflow.com/a/12193259/8389461" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/a/12193259/8389461</a></p></blockquote><p>可以参照<a href="https://www.jianshu.com/p/9d729c9c94c4" target="_blank" rel="noopener noreferrer">这张图</a></p><figure><img src="https://jixiaoyong.github.io/images/20191221191518.webp" alt="图片来自 https://www.jianshu.com/p/9d729c9c94c4" tabindex="0" loading="lazy"><figcaption>图片来自 <a href="https://www.jianshu.com/p/9d729c9c94c4" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/9d729c9c94c4</a></figcaption></figure><p>其中，数据区占用的大小如下：</p><p>（图片来自于<a href="https://speakerdeck.com/romainguy/android-memories?slide=29" target="_blank" rel="noopener noreferrer">android-memories</a>）</p><figure><img src="https://jixiaoyong.github.io/images/20191221104050.png" alt="Size of data from speakerdeck.com" tabindex="0" loading="lazy"><figcaption>Size of data from <a href="http://speakerdeck.com" target="_blank" rel="noopener noreferrer">speakerdeck.com</a></figcaption></figure><p>##示例</p><p>根据<a href="https://speakerdeck.com/romainguy" target="_blank" rel="noopener noreferrer">Romain Guy</a>在<a href="https://speakerdeck.com/romainguy/android-memories?slide=34" target="_blank" rel="noopener noreferrer">SpeakerDeck</a>中的说法：</p><blockquote><p>一个空的 class 占用了 4+8=12 个 byte 的内存，再加上 8 比特对齐，实际占用大小为 16 比特。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>占用大小：</p><table><thead><tr><th>Allocation</th><th>Size in bytes</th></tr></thead><tbody><tr><td>dlmalloc 引用</td><td>4</td></tr><tr><td>Object overhead（对象头）</td><td>8</td></tr></tbody></table><p>Total = 4 + 8 =12 bytes</p><p>经过<em>8-byte aligned</em>后：total = 16 bytes</p><p><a href="https://speakerdeck.com/romainguy/android-memories?slide=34" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/romainguy/android-memories?slide=34</a></p></blockquote><p>此外还有<strong>包含了数据的对象</strong>大小计算方式如下：</p><figure><img src="https://jixiaoyong.github.io/images/20191221171816.png" alt="图片来自 https://speakerdeck.com/romainguy/android-memories?slide=42" tabindex="0" loading="lazy"><figcaption>图片来自 <a href="https://speakerdeck.com/romainguy/android-memories?slide=42" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/romainguy/android-memories?slide=42</a></figcaption></figure><p>对于数组的大小计算（参考<a href="https://www.cnblogs.com/zhanjindong/p/3757767.html" target="_blank" rel="noopener noreferrer">一个 Java 对象到底占用多大内存？</a>和<a href="https://speakerdeck.com/romainguy/android-memories?slide=54" target="_blank" rel="noopener noreferrer">romainguy/android-memories</a>，后者关于数组大小的计算中<code>width&amp;padding = 8 </code>的意义存疑）:</p><p>按照开头的公式：<code>数组大小 = 8 对象头 + 4 Oop指针 + 4 数组大小标记length + 数组数据占用大小 + 8比特对齐 </code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// arr0 大小 = 8 + 4 + 4 + 0 + 8 比特对齐 (0) = 16 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr0 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// arr1 大小 = 8 + 4 + 4 + 4*1 + 8 比特对齐 (4) = 16 + 4 = 20 + 8 比特对齐 (4) = 24 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// arr1 大小 = 8 + 4 + 4 + 4*10 + 8 比特对齐 (0) = 16 + 40 = 56 + 8 比特对齐 (0) = 56 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arra10 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算对象大小的工具" tabindex="-1"><a class="header-anchor" href="#计算对象大小的工具"><span>计算对象大小的工具</span></a></h2><p>具体的如何计算 Java 中 Object 大小，可以参考<a href="https://stackoverflow.com/a/52682/8389461" target="_blank" rel="noopener noreferrer">stackoverflow 的这个回答</a>（<a href="https://github.com/cirosantilli/java-cheat/tree/a907ad2243dce2109c54d27323f9387065b5ca5c/instrument" target="_blank" rel="noopener noreferrer">这里</a>有一份 Github 上面的实现源码）</p><p>可以参考文章：</p><p><a href="https://blog.csdn.net/ITer_ZC/article/details/41822719" target="_blank" rel="noopener noreferrer">聊聊 JVM（三）两种计算 Java 对象大小的方法</a></p><p><a href="https://www.iteye.com/blog/brandnewuser-2113828" target="_blank" rel="noopener noreferrer">准确计算 Java 中对象的大小</a></p><p><a href="https://www.cnblogs.com/zhanjindong/p/3757767.html" target="_blank" rel="noopener noreferrer">一个 Java 对象到底占用多大内存？</a></p><p>这里提供一个实例（<a href="https://github.com/cirosantilli/java-cheat/tree/a907ad2243dce2109c54d27323f9387065b5ca5c/instrument" target="_blank" rel="noopener noreferrer">参考自这里</a>）：</p><p><code>Sizeof.java</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.instrument.Instrumentation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Instrumentation</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instrumentation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> premain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Instrumentation</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> inst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        instrumentation </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inst;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> instrumentation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getObjectSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(o);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Makefile</code></p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">//Makefile文件</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.POSIX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.PHONY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> all clean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	javac *.java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	jar -cfm Sizeof.jar META-INF/MANIFEST.MF Sizeof.class</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	java -ea -javaagent:Sizeof.jar Main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	rm -f *.class *.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时先新建一个 Java 类，在其中调用<code>sizeof()</code>方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用如下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	javac</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //编译当前目录下的java文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cfm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Sizeof.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> META-INF/MANIFEST.MF</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Sizeof.class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //将Sizeof.class打包为Sizeof.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ea</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -javaagent:Sizeof.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //输出sizeOf计算结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用"><span>实际应用</span></a></h2><h3 id="string最长为-65534" tabindex="-1"><a class="header-anchor" href="#string最长为-65534"><span><code>String</code>最长为 65534</span></a></h3><p><code>String s = “”;</code>中，在编译期最多可以有 65534 个字符</p><blockquote><p><s>原因是，Java 中的 UTF-8 编码的 Unicode 字符串在常量池中以<code>CONSTANT_Utf8</code>类型表示，常量池中的所有字面量几乎都是通过<code>CONSTANT_Utf8_info</code>描述的。</s></p><p><s>这里面的<code>u2 length</code>表明了该类型存储数据的长度，而<code>u2</code>是无符号的 16 位整数，因此理论上允许的的最大长度是<code>2^16=65536</code>。而 Java class 文件是使用一种变体<code>UTF-8</code>格式来存放字符的，<code>null</code> 值使用两个字节来表示，因此只剩下<code> 65536－ 2 ＝ 65534</code>个字节。</s></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CONSTANT_Utf8_info {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u1 tag;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u2 length;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u1 </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[length];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所以，在 Java 中，所有需要保存在常量池中的数据，长度最大不能超过 65535，这当然也包括字符串的定义</strong></p><p>上面提到的这种 String 长度的限制是<em>编译期的限制</em>，也就是使用<code>String s= “”;</code>这种字面值方式定义的时候才会有的限制。</p><p>String 在<em>运行期</em>有没有限制呢，答案是有的，就是我们前文提到的那个<code>Integer.MAX_VALUE </code>，这个值约等于 4G，在运行期，如果 String 的长度超过这个范围，就可能会抛出异常。(在 jdk 1.9 之前）</p><p><a href="https://blog.csdn.net/u013380694/article/details/102739636" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u013380694/article/details/102739636</a></p></blockquote><p><strong>一个 String 对象，占用大小（JDK1.8）为 24 bytes</strong>（不计算持有的 char 数组占用的大小）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** The value is used for character storage. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //一个数组对象的引用，占用 4 bytes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** Cache the hash code for the string */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // Default to 0   //一个 int 类型，占用 4 bytes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再加上在 64 位 JVM 中，一个对象具有 12 bytes 的<code>对象头+引用</code>，要求对齐到 8 的倍数 (来源<a href="https://www.baeldung.com/java-size-of-object#1-objects-references-and-wrapper-classes" target="_blank" rel="noopener noreferrer">2.1. Objects, References and Wrapper Classes</a>)，所以一个 String 对象的大小是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>size = ( 12 对象头 + 4 value + 4 hash ) + 4 8byte对齐 = 24 bytes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="枚举类-enum" tabindex="-1"><a class="header-anchor" href="#枚举类-enum"><span>枚举类 enum</span></a></h3><h4 id="枚举类大小的计算" tabindex="-1"><a class="header-anchor" href="#枚举类大小的计算"><span>枚举类大小的计算</span></a></h4><p>枚举类中的每个枚举都是该枚举类的一个对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Day</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Hour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Minute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Second</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们用<code>javap</code>查看其编译后的字节码可以看到：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//javac EnumClazz.java</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//javap EnumClazz.class</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;"> java.lang.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Enum</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">EnumClazz</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Day</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Hour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Minute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumClazz</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单计算一下这个<code>EnumClazz</code>的大小（不含引用对象的大小）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">enumClassSize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">       对象头 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  引用 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 枚举类值的引用类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 4个 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 数组引用类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们再看一下每个枚举类的值（以<code>EnumClazz.Day</code>为例）的大小：</p><p><code>enum</code>类的每个值实际上都继承自<code>java.lang.Enum</code>类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Enum</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Enum</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //枚举值名称</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //枚举值次序，从 0 开始</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ordinal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，我们可以计算<code>EnumClazz.Day</code>的大小：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">daySize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 8比特对齐(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     对象头 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Oop引用 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ordinal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 8比特对齐</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，本例中<strong>每一个枚举类值占用 24 bytes</strong>，由此可以计算出<code>EnumClazz</code>实际占用的大小应该是：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">realSize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enumClassSize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> daySize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">  =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bytes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="android-中是否应该使用枚举" tabindex="-1"><a class="header-anchor" href="#android-中是否应该使用枚举"><span>Android 中是否应该使用枚举</span></a></h4><p>关于 Android 中使用枚举和常量所占用的大小对比<em>RomainGuy</em>有<a href="https://speakerdeck.com/romainguy/android-memories?slide=67" target="_blank" rel="noopener noreferrer">下图</a>的对比。</p><figure><img src="https://jixiaoyong.github.io/images/20191221172243.png" alt="https://speakerdeck.com/romainguy/android-memories?slide=67" tabindex="0" loading="lazy"><figcaption><a href="https://speakerdeck.com/romainguy/android-memories?slide=67" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/romainguy/android-memories?slide=67</a></figcaption></figure><p>关于是否应该在 Android 中使用枚举类，可以参考下文：</p><p><a href="https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/" target="_blank" rel="noopener noreferrer">https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/</a></p><p><a href="https://stackoverflow.com/a/29972028/8389461" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/a/29972028/8389461</a></p><p>总结起来其结论就是：</p><p><strong>当需要用到枚举类的特性时，比如非连续判断，方法重载等时就使用枚举，否则就使用占用内存更小的常量类。</strong></p><h3 id="sparsearray-arraymap-vs-hashmap" tabindex="-1"><a class="header-anchor" href="#sparsearray-arraymap-vs-hashmap"><span>SparseArray&amp;ArrayMap VS HashMap</span></a></h3><p><code>HashMap</code>的数据是经过包装后保存在<code>HashMap.Node&lt;K,V&gt;</code>数组中。</p><p>下面是<code>HashMap</code>的结构：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractMap</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cloneable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes，保存 HashMap 的键值对等信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Set</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> entrySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> modCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> threshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> float</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> loadFactor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //继承自 AbstractMap</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Set</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        keySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Collection</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看 Android 提供的<code>android.util.SparseArray</code>类 (具体分析可参考：<a href="https://juejin.im/entry/57c3e8c48ac24700634bd3cf" target="_blank" rel="noopener noreferrer">SparseArray 的使用及实现原理</a>)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SparseArray</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cloneable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mGarbage </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] mKeys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] mValues</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4+ bytes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //4 bytes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再结合<a href="https://developer.android.google.cn/reference/android/util/SparseArray" target="_blank" rel="noopener noreferrer">官方的描述</a>，<code>SparseArray</code>类很明显要比<code>HashMap</code>占用更少的内存：</p><ul><li>将<code>KEY</code>和<code>VALUE</code>直接保存在数组中，避免了将其包装为一个<code>Node</code>对象的开销</li><li>由于<code>SparseArray</code>类的 key 是<code>int</code>类型而非被自动装箱后的<code>Integer</code>对象，所以当同样使用<code>int</code>类型的<code>key</code>保存数据时，<code>SparseArray</code>类的<code>key</code>要占用更少的内存。</li></ul><blockquote><p><code>SparseArray</code> is intended to be more memory-efficient than a <a href="https://developer.android.google.cn/reference/java/util/HashMap" target="_blank" rel="noopener noreferrer"><code>HashMap</code></a>, because it <strong>avoids auto-boxing keys</strong> and its data structure <strong>doesn&#39;t rely on an extra entry</strong> object for each mapping.</p><p><a href="https://developer.android.google.cn/reference/android/util/SparseArray" target="_blank" rel="noopener noreferrer">https://developer.android.google.cn/reference/android/util/SparseArray</a></p></blockquote><p>但是，<code>SparseArray</code>有以下局限性：</p><ul><li><p>在每次<code>put/get/remove</code>的时候都需要使用二分法 (<code>ContainerHelpers.binarySearch(mKeys, mSize, key)</code>) 查找是否已经存在<code>KEY</code>对应的值（有的话查找其位置）</p></li><li><p>在添加和删除 item 的时候都需要在数组中增删条目（耗时，尽管为了优化性能，<code>SparseArray</code>在删除时只是将对于的值标记为<code>DELETED</code>，在下次更新该<code>KEY</code>对于的值时直接覆盖，或者在<code>GC</code>时删除）。</p><p><code> private static final Object DELETED = new Object();</code></p><p>HashMap 的删除涉及到数组、链表和红黑树（JDK1.8）</p></li><li><p><strong>在容纳数百个项目时性能会比 HashMap 小大约 50%</strong>。</p></li></ul><blockquote><p>每当需要<strong>增长数组</strong>或<strong>获取数组大小</strong>或<strong>获取条目值</strong>时，都必须执行垃圾回收 GC。</p></blockquote><p>此外，还有以下可以替换 HashMap 的 (数据来自<a href="https://stackoverflow.com/a/31413003/8389461" target="_blank" rel="noopener noreferrer">这里</a>)：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SparseArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">          &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SparseBooleanArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SparseIntArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">       &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SparseLongArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LongSparseArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LongSparseLongArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">  &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //this is not a public class</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                    //but can be copied from  Android source code</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还有<code>android.util.ArrayMap</code>其特性与<code>SparseArray</code>类似（<strong>两者占用内存小，但是慢并且最好不要用来存储大容量的数据</strong>），只不过它支持 key 值为其他类型，占用内存大小在<code>SparseArray</code>和<code>HashMap</code>之间 (参考<a href="https://blog.csdn.net/u010687392/article/details/47809295" target="_blank" rel="noopener noreferrer">这里</a>)，此外<code>ArrayMap</code>的 API 和<code>HashMap</code>类似。</p><blockquote><p>根据<a href="https://speakerdeck.com/romainguy" target="_blank" rel="noopener noreferrer">Romain Guy</a>的<a href="https://speakerdeck.com/romainguy/android-memories?slide=94" target="_blank" rel="noopener noreferrer">计算</a>：</p><p>保存 1000 个 int 对象的<code>SparseArray</code> 占用大小为：8072 bytes</p><p>保存 1000 个对象的<code>HashMap&lt;Integer,Integer&gt;</code> 占用大小为：64136 bytes</p><p>几乎相差 8 倍！</p></blockquote><p>综上，<strong>当要保存的数据量比较小（小于几千个）的时候，如果 KEY 是基本类型，推荐使用<code>SparseArray</code>及其衍生类以节省内存，如果 KEY 是其他类型则使用<code>ArrayMap</code>;否则使用<code>HashMap</code>更加高效</strong>。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>除文章中罗列的链接外：</p><p><a href="https://blog.csdn.net/u013380694/article/details/102739636" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u013380694/article/details/102739636</a></p><p><a href="https://www.javaworld.com/article/2077408/sizeof-for-java.html" target="_blank" rel="noopener noreferrer">Sizeof for Java -- javaworld.com</a></p><p><a href="https://speakerdeck.com/romainguy/android-memories" target="_blank" rel="noopener noreferrer">RomainGuy-Android Memories</a>（推荐）</p><p><a href="https://stackoverflow.com/a/31413003/8389461" target="_blank" rel="noopener noreferrer">SparseArray vs HashMap</a></p><p><a href="https://blog.csdn.net/u010687392/article/details/47809295" target="_blank" rel="noopener noreferrer">Android 内存优化（使用 SparseArray 和 ArrayMap 代替 HashMap）</a></p><p><a href="https://juejin.im/entry/57c3e8c48ac24700634bd3cf" target="_blank" rel="noopener noreferrer">SparseArray 的使用及实现原理</a></p><p><a href="https://developer.android.google.cn/reference/android/util/SparseArray" target="_blank" rel="noopener noreferrer">SparseArray -- developer.android.google.cn</a></p>`,92)]))}const r=s(t,[["render",l]]),p=JSON.parse('{"path":"/posts/b0793c74.html","title":"Java 笔记之计算 Java 对象的大小及其应用","lang":"zh-CN","frontmatter":{"permalink":"/posts/b0793c74.html","title":"Java 笔记之计算 Java 对象的大小及其应用","tag":"java","abbrlink":"b0793c74","date":"2019-12-21T01:44:32.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"原理 注意 除非特殊说明，以下所说的计算 Java 对象大小，不涉及该对象所持有的对象本身的大小，只计算该 Java 对象本身的大小（其中引用类型对象大小只计算为 4 bytes），如果要遍历计算 Java 对象大小（包含其持有对象的大小）可以参考这篇文章 Sizeof for Java 一个 Java 对象在内存中的大小包括以下 (以 64 位 JV...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/b0793c74.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Java 笔记之计算 Java 对象的大小及其应用"}],["meta",{"property":"og:description","content":"原理 注意 除非特殊说明，以下所说的计算 Java 对象大小，不涉及该对象所持有的对象本身的大小，只计算该 Java 对象本身的大小（其中引用类型对象大小只计算为 4 bytes），如果要遍历计算 Java 对象大小（包含其持有对象的大小）可以参考这篇文章 Sizeof for Java 一个 Java 对象在内存中的大小包括以下 (以 64 位 JV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/20191221191518.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T03:36:59.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2019-12-21T01:44:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T03:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 笔记之计算 Java 对象的大小及其应用\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/20191221191518.webp\\",\\"https://jixiaoyong.github.io/images/20191221104050.png\\",\\"https://jixiaoyong.github.io/images/20191221171816.png\\",\\"https://jixiaoyong.github.io/images/20191221172243.png\\"],\\"datePublished\\":\\"2019-12-21T01:44:32.000Z\\",\\"dateModified\\":\\"2024-06-04T03:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"git":{"createdTime":1653726847000,"updatedTime":1717472219000,"contributors":[{"name":"jixiaoyong","username":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":5,"url":"https://github.com/jixiaoyong"},{"name":"JI,XIAOYONG","username":"","email":"jixiaoyong1995@gmail.com","commits":2}]},"readingTime":{"minutes":8.84,"words":2652},"filePathRelative":"_posts/JavaNoteSizeOfObject.md","localizedDate":"2019年12月21日","excerpt":"<h2>原理</h2>\\n<p><strong>注意 除非特殊说明，以下所说的计算 Java 对象大小，不涉及该对象所持有的对象本身的大小，只计算该 Java 对象本身的大小（其中引用类型对象大小只计算为 4 bytes），如果要遍历计算 Java 对象大小（包含其持有对象的大小）可以参考<a href=\\"https://www.javaworld.com/article/2077408/sizeof-for-java.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这篇文章 Sizeof for Java</a></strong></p>\\n<p>一个 Java 对象在内存中的大小包括以下 (以 64 位 JVM 启用压缩为例，综合<a href=\\"https://blog.csdn.net/ITer_ZC/article/details/41822719\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这里</a>和<a href=\\"https://blog.csdn.net/u013380694/article/details/102739636\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这里</a>的信息整理)：</p>","autoDesc":true}');export{r as comp,p as data};
