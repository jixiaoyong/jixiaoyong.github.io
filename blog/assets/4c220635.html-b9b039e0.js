import{_ as t,r as o,o as p,c,a as n,b as a,d as e,e as l}from"./app-c00d03e9.js";const i={},d=l(`<h2 id="flutter-ui-绘制与-inheritedwidget-解析" tabindex="-1"><a class="header-anchor" href="#flutter-ui-绘制与-inheritedwidget-解析" aria-hidden="true">#</a> Flutter UI 绘制与 InheritedWidget 解析</h2><p>Flutter 的<code>Widget</code>分为<code>StatefulWidget</code>和<code>StatelessWidget</code> ，二者都继承自<code>Widget</code>。</p><p>此外还有一种用来传输数据的<code>Widget</code>——<code>InheritedWidget</code>，与上述两者不太一样的是，他的继承关系是：<code>InheritedWidget</code>→<code>ProxyWidget</code> →<code>Widget</code> 。</p><p>Flutter 的渲染流程如图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_widget_element_renderobject_relationship.png" alt="flutter_widget_element_renderobject_relationship" tabindex="0" loading="lazy"><figcaption>flutter_widget_element_renderobject_relationship</figcaption></figure><p>可以简单理解为， <code>Widget</code>是配置信息，<code>Element</code>代表在树中详细的位置，而<code>RenderObject</code>则是实际渲染的对象。</p><p><code>StatelessWidget</code>和<code>StatefulWidget</code>在创建之后就不会再变化，而<code>StatefulWidget</code>因为有<code>State</code>，所以可以在<code>State</code>调用<code>setState()</code>方法之后，重新执行<code>State</code>的<code>build()</code>方法，从而更新界面。</p><p>如果<code>Widget</code>是<code>const</code>的，那么他就不会被<code>rebuild</code>。</p><h2 id="widget-rebuild-的过程" tabindex="-1"><a class="header-anchor" href="#widget-rebuild-的过程" aria-hidden="true">#</a> Widget Rebuild 的过程</h2><p>以 StatefulWidget 为例：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_render_flow_chart.png" alt="flutter_render_flow_chart" tabindex="0" loading="lazy"><figcaption>flutter_render_flow_chart</figcaption></figure><ol><li><p>调用<code>setState()</code>方法，会调用对应的<code>Element</code>的<code>markNeedsBuild()</code> 方法，通过<code>BuildOwner</code>的<code>scheduleBuildFor(Element element)</code> 方法将当前<code>Element</code>标记为<code>dirty</code>，以便在下次屏幕刷新时安排<code>rebuilt</code> 。</p></li><li><p>下一帧屏幕刷新，调用<code>BuildOwner</code>的<code>buildScope(Element context, [ VoidCallback? callback ])</code> 方法。这个方法会遍历<code>_dirtyElements</code> 中所有<code>dirty</code>的<code>element</code>执行<code>element.rebuild();</code> 方法，在其内部调用了<code>Element</code>的<code>performRebuild()</code> 方法。</p></li><li><p><code>Element</code>的<code>performRebuild()</code> 方法因各个<code>Element</code>的实现而异：</p><ol><li><p><code>StatelessElement</code> 、<code>InheritedElement</code>：与父类<code>ComponentElement</code> 保持一致</p></li><li><p><code>StatefulElement</code> ：判断有需要时调用<code>state.didChangeDependencies();</code> ，其余与父类<code>ComponentElement</code> 保持一致</p></li></ol></li></ol><p>而<code>ComponentElement</code> 的<code>performRebuild()</code> 主要做了 2 件事：<br> （1）<code>built = build();</code> ；（2）<code>_child = updateChild(_child, built, slot);</code></p><p>在这其中<code>build()</code>：</p><ol><li><code>StatelessElement</code>:<code>build() =&gt; widget.build(this);</code></li><li><code>StatefulElement</code> : <code>build() =&gt; state.build(this);</code></li><li><code>InheritedElement</code> :<code>build() =&gt; widget.child;</code></li></ol><p><code>updateChild</code> 会判断以下几种情况：</p><table><thead><tr><th></th><th>newWidget == null</th><th>newWidget != null</th></tr></thead><tbody><tr><td>child == null</td><td>return null</td><td>return new Element</td></tr><tr><td>child != null</td><td>remove old child, return null</td><td>Old child updated if possible, returns child or new Element</td></tr></tbody></table><p>其中，<code>old child updated</code> 的时候调用的是<code>child.update(newWidget);</code> 方法会触发<code>Widget</code>的<code>rebuild()</code> 。</p><p>这样就完成了一次 Rebuild。</p><h2 id="inheritedwidget-的-rebuild-过程" tabindex="-1"><a class="header-anchor" href="#inheritedwidget-的-rebuild-过程" aria-hidden="true">#</a> InheritedWidget 的 Rebuild 过程</h2><p><code>InheritedWidget</code>是持有状态的<code>Widget</code>，他的子<code>Widget</code>可以通过他来获取这些状态。</p><p>一般来说，<code>InheritedWidget</code>持有的状态是<code>final</code>的，如果要更新状态，就需要在其外部包裹一个<code>StatefulWidget</code>，通过<code>StatefulWidget</code>的<code>State.setState()</code>来触发<code>InheritedWidget</code>重建（实际上<code>InheritedElement</code>没有重新创建），从而更新那些依赖了<code>InheritedWidget</code>的子<code>Widget</code>。</p><p>下图是一个被<code>StatefulWidget</code>包裹的<code>InheritedWidget</code>在<code>setSate(){}</code>方法执行后的流程图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_render_flow_chart_with_inheritedwidget.png" alt="flutter_render_flow_chart_with_inheritedwidget" tabindex="0" loading="lazy"><figcaption>flutter_render_flow_chart_with_inheritedwidget</figcaption></figure><p>当外层<code>StatefulWidget</code>的<code>Element</code>执行到<code>updateChild(child,build,solt);</code>会调用<code>InheritedElement</code>的<code>update()</code> 方法。</p><p>这个方法内部会调用<code>updated(oldWidget)</code> 方法，在内部通过<code>notifyClients(oldWidget);</code> 方法，通知原先的<code>InheritedElement</code>的<code>_dependents</code> ，将其标记为<code>dirty</code>，准备<code>rebuild</code>。</p><p>在此之后，<code>update()</code>方法还会将当前<code>Element</code>标记为<code>dirty</code>，通过调用<code>rebuild();</code> 执行<code>performRebuild();</code></p><p>在<code>performRebuild()</code>方法中：</p><ul><li><code>built = build();</code> 中的<code>build</code>方法：<code>build() =&gt; widget.child;</code> 实际上取了<code>widget</code>的<code>child</code>。</li><li>然后执行<code>_child = updateChild(_child, built, slot);</code> 这个过程与普通<code>Widget</code>一致。</li></ul><p>需要注意的是，<code>updateChild</code> 中，如果子<code>Widget</code>不是<code>const</code> （或者被<code>InheritedWidget</code>外层的<code>widget</code>/<code>state</code>之类的持有）就会被认为<code>built!=_child</code> 从而导致<code>InheritedWidget</code>的子<code>Widget</code>重建。导致的结果就是：虽然<code>InheritedWidget</code>的确只标记了那些依赖了他的<code>Widget</code>，但是由于直接子<code>Widget</code>要重建，所以还是所有的<code>非const Widget</code>都重建了。</p><h3 id="inheritedwidget-的获取方式" tabindex="-1"><a class="header-anchor" href="#inheritedwidget-的获取方式" aria-hidden="true">#</a> InheritedWidget 的获取方式</h3><ul><li><code>T? dependOnInheritedWidgetOfExactType&lt;T extends InheritedWidget&gt;({ Object? aspect });</code> 获取指定类型的<code>InheritedWidget</code>，并且将自己注册到此<code>Widget</code>，以便当该<code>Widget</code>变化的时候，自己也能<code>rebuilt</code> 。复杂度<code>O(1)</code> 。</li><li><code>T? findAncestorWidgetOfExactType&lt;T extends Widget&gt;();</code> 只获取指定类型的<code>Widget</code> ，包括<code>InheritedWidget</code> ，仅获取该<code>Widget</code>执行一些操作，通常用在<code>interaction event handlers</code> 之类中。复杂度<code>(O(N)</code> 。</li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><p>根据上述理论，创建一个<code>InheritedWidget</code>来传递数据：</p><p>1、<code>AppColor.dart</code> 一个持有<code>color</code> 的<code>InheritedWidget</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AppColor</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>

  <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">)</span><span class="token operator">?</span> onColorChanged<span class="token punctuation">;</span>

  <span class="token class-name">AppColor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onColorChanged<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">AppColor</span> oldWidget<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
      color <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>color<span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token class-name">AppColor</span><span class="token operator">?</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppColor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义一些类，使用或未使用到<code>InheritedWidget</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NoName</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">NoName</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;NoName build </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token keyword">this</span><span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token class-name">Column</span><span class="token punctuation">(</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token comment">// 这里 AppColor 的_dependents 会加入 ColorfulContainer(dependencies: [AppColor])</span>
            <span class="token comment">// 因为他用了 context.dependOnInheritedWidgetOfExactType&lt;AppColor&gt;();</span>
            <span class="token comment">// 会将自己注册到 AppColor</span>
            <span class="token class-name">ColorfulContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ChangeStateButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This Text Should Not Rebuild&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ColorfulContainer</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token class-name">ColorfulContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> appColor <span class="token operator">=</span> <span class="token class-name">AppColor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;_ColorfulContainerState appColor?.color:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token operator">?</span><span class="token punctuation">.</span>color</span><span class="token punctuation">}</span></span><span class="token string"> appColor:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
      color<span class="token punctuation">:</span> appColor<span class="token operator">?</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello color </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token operator">?</span><span class="token punctuation">.</span>color</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ChangeStateButton</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChangeStateButton</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ChangeStateButtonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _ChangeStateButtonState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChangeStateButton</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialButton</span><span class="token punctuation">(</span>
      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意下面这个方法，只是查找到 InheritedWidget 的引用，并没有注册依赖</span>
        <span class="token comment">// 所以当 InheritedWidget 变化的时候并不会触发此控件重建</span>
        <span class="token comment">// 因为每次 onColorChanged 时 AppColor 都会重建，所以需要在这里获取最新的</span>
        <span class="token keyword">var</span> appColor <span class="token operator">=</span> context<span class="token punctuation">.</span>findAncestorWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppColor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&quot;_ChangeStateButtonState appColor?.color:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token operator">?</span><span class="token punctuation">.</span>color</span><span class="token punctuation">}</span></span><span class="token string"> appColor:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> color <span class="token operator">=</span> appColor<span class="token operator">?</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>
        <span class="token keyword">var</span> newColor <span class="token operator">=</span> color <span class="token operator">==</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blueAccent <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">;</span>
        appColor<span class="token operator">?</span><span class="token punctuation">.</span>onColorChanged<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&quot;_ChangeStateButtonState onPressed appColor?.color:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token operator">?</span><span class="token punctuation">.</span>color</span><span class="token punctuation">}</span></span><span class="token string"> appColor:</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">appColor<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Change State Button, Shlould NOT Rebuild&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、接下来实现一种基础的使用<code>InheritedWidget</code>的方法，这种方法会在<code>InheritedWidget</code>更新的时候，rebuilt <code>InheritedWidget</code>下面的所有子类，无论他们是否使用到了<code>InheritedWidget</code>（原因是上面说到的 Flutter rebuild 的机制导致的，实际上<code>InheritedWidget</code>本身只标记了<code>ColorfulContainer</code>为<code>dirty</code>）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AlwaysRebuildWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>

  <span class="token class-name">AlwaysRebuildWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlwaysRebuildWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_AlwaysRebuildWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _AlwaysRebuildWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlwaysRebuildWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  late <span class="token class-name">Color</span> _color<span class="token punctuation">;</span>
  <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token class-name">NoName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _color <span class="token operator">=</span> widget<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这种写法，AppColor 的_dependents 也只有 1 个。ColorfulContainer(dependencies: [AppColor])</span>
    <span class="token comment">// 所以每次 setState 引起 AlwaysRebuildWidget 重新绘制，引起 AppColor 重新创建，本应该会重建 ColorfulContainer</span>
    <span class="token comment">// 但是因为 build 方法重新执行了一次，所以 AppColor 和整个 NoName 都被重建，</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;AlwaysRebuildWidget build</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">widget<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">AppColor</span><span class="token punctuation">(</span>
        color<span class="token punctuation">:</span> _color<span class="token punctuation">,</span>
        onColorChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _color <span class="token operator">=</span> color<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 这种写法，AppColor 在 updateChild 的时候会判断 widget.child 与_child.widget 的 NoName 不一致</span>
        <span class="token comment">// （这是因为，AppColor 在 notifyClients 的时候修改了 NoName 的 child 之一 ColorfulContainer 为 dirty）</span>
        <span class="token comment">// 从而会更新 NoName，导致 NoName 下面所有的子 Widget 全部重新绘制</span>
         child<span class="token punctuation">:</span> <span class="token class-name">NoName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 按照上面分析的逻辑，在这里加上 const，那么依旧用的是之前的 NoName，就不会 repaint 整个的 NoName 了</span>
    <span class="token comment">// child: const NoName());</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、接下来实现一种使用<code>InheritedWidget</code>的方法，当<code>InheritedWidget</code>更新的时候，只会更新那些在<code>InheritedWidget</code>这里注册依赖了的<code>Widget</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SelectiveRebuildWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>

  <span class="token class-name">SelectiveRebuildWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectiveRebuildWidget</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_SelectiveRebuildWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _SelectiveRebuildWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectiveRebuildWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  late <span class="token class-name">Color</span> _color<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _color <span class="token operator">=</span> widget<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;SelectiveRebuildWidget build</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">widget<span class="token punctuation">.</span>child<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">widget<span class="token punctuation">.</span>hashCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">AppColor</span><span class="token punctuation">(</span>
      color<span class="token punctuation">:</span> _color<span class="token punctuation">,</span>
      onColorChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          _color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 这里的 AppColor 的_dependents 只有 1 个。ColorfulContainer(dependencies: [AppColor])</span>
      <span class="token comment">// 因为 setState 不会重新创建 SelectiveRebuildWidget，所以 widget.child 也没有被重新</span>
      <span class="token comment">// 创建（但是重新绘制了，导致 AppColor 也重新绘制）</span>
      <span class="token comment">// 所以 AppColor 的 child 还是之前的，按照 InheritedWidget 的规则，只有 ColorfulContainer 重新绘制了</span>
      child<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,43),u={href:"https://petercoding.com/flutter/2021/07/04/using-inherited-widget-in-flutter/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.cnblogs.com/lxlx1798/p/11190230.html?share_token=1bd95081-524b-4a3b-af65-686ab5c88ce4",target:"_blank",rel:"noopener noreferrer"},k={href:"https://stackoverflow.com/questions/54494398/inheritedwidget-confusion",target:"_blank",rel:"noopener noreferrer"},v={href:"https://medium.com/flutter/managing-flutter-application-state-with-inheritedwidgets-1140452befe1",target:"_blank",rel:"noopener noreferrer"},m={href:"https://stackoverflow.com/questions/53492705/does-using-const-in-the-widget-tree-improve-performance",target:"_blank",rel:"noopener noreferrer"},b={href:"https://api.flutter-io.cn/flutter/widgets/StatefulWidget-class.html",target:"_blank",rel:"noopener noreferrer"};function g(h,f){const s=o("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[n("a",u,[a("Using Inherited Widget In Flutter"),e(s)])]),n("p",null,[n("a",r,[a("【Flutter 学习】之 Widget 数据共享之 InheritedWidget 梁飞宇"),e(s)])]),n("p",null,[n("a",k,[a("InheritedWidget confusion"),e(s)])]),n("p",null,[n("a",v,[a("Managing Flutter Application State With InheritedWidgets"),e(s)])]),n("p",null,[n("a",m,[a("Does using const in the widget tree improve performance?"),e(s)])]),n("p",null,[n("a",b,[a("StatefulWidget"),e(s)])])])}const w=t(i,[["render",g],["__file","4c220635.html.vue"]]);export{w as default};
