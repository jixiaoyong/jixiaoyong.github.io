import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-4152d5c1.js";const i={},u=n("h2",{id:"isolate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#isolate","aria-hidden":"true"},"#"),s(" Isolate")],-1),r=n("p",null,"💡 本文基于 Dart 2.17.1",-1),k={href:"https://api.dart.cn/stable/2.17.1/dart-isolate/Isolate-class.html",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"code can access classes and values only from the same isolate",-1),m=n("strong",null,"sending values through ports",-1),v={href:"https://api.dart.cn/stable/2.17.1/dart-isolate/ReceivePort-class.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://api.dart.cn/stable/2.17.1/dart-isolate/SendPort-class.html",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),_={href:"https://github.com/dart-lang/sdk/issues/36097#issuecomment-746510375",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[s("The new isolate has its "),n("strong",null,"own memory and its own thread"),s(" working in parallel with the main isolate.")],-1),w=n("img",{src:"https://jixiaoyong.github.io/images/isolate_and_isolate_group.png",alt:"https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly",tabindex:"0",loading:"lazy"},null,-1),h={href:"https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly",target:"_blank",rel:"noopener noreferrer"},I=l(`<p>Isolate 创建会占用内存，可以使用<code>IsolateGroup</code>来解决，并且目前为止 Dart 和 Flutter 都默认支持在使用<code>Isolate.spawn</code>创建新 Isolate 的时候使用 IsolateGroup（<code>Isolate.spwanUri</code>创建的时候会创建<strong>单独</strong>的 IsolateGroup 和 Isolate）。</p><blockquote><p>💡 在创建 isolate 的时候可以添加<code>addOnExitListener</code> 或者<code>addErrorListener</code>之类的监听，但是可能在执行添加代码的时候<strong>isolate 就已经终止了</strong>而导致这些方法收不到回调。<br> 为了避免这种情况，可以在创建 isolate 的时候指定他的状态为**<code>paused</code>**。</p></blockquote><p>与 isolate 有关的类有：</p><ul><li><code>Isolate</code> 位置在<code>sdk\\lib\\isolate\\isolate.dart</code>。主要是<code>Isolate</code> 通用方法、属性的抽象描述，没有具体实现。</li><li><code>Isolate</code> 位置在<code>sdk\\lib\\_internal\\vm\\lib\\isolate_patch.dart</code>，是 app 等平台对应的具体实现，部分方法调用了 native 层的 Isolate 实现。</li><li><code>Isolate</code> 位置在<code>runtime\\vm\\isolate.h</code>以及<code>runtime\\vm\\isolate.cc</code>中，是 Isolate 的 native 层实现。</li></ul><p>他们的关系大致如图：</p><figure><img src="https://jixiaoyong.github.io/images/isolate_class_dart_and_native.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h2><h3 id="创建新-isolate-的方式" tabindex="-1"><a class="header-anchor" href="#创建新-isolate-的方式" aria-hidden="true">#</a> 创建新 Isolate 的方式：</h3><ul><li><code>Isolate(\`\`SendPort controlPort\`\`, {this.pauseCapability, this.terminateCapability});</code> 这种方式创建一种<strong>能力受限</strong>的 Isolate。The capabilities should be the subset of the capabilities that are available to the original isolate.本质上并没有在 native 层孵化一个新的 Isolate。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> newIsolate <span class="token operator">=</span> <span class="token class-name">Isolate</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>controlPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
  newIsolate<span class="token punctuation">.</span><span class="token function">addOnExitListener</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>controlPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
  newIsolate<span class="token punctuation">.</span><span class="token function">addErrorListener</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>controlPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    newIsolate<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;try kill new isolate&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// after this，the dart code finish</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;finish&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Isolate.spawn(\`\`void entryPoint(T message), T message,...)</code> 创建一个和当前 Isolate<strong>共享同一份代码</strong>的 Isolate，并执行 entryPoint 方法，一般在 message 中传入 SendPort 以便从 entryPoint 中向来时的 Isolate 发送消息，新建的 Isolate 和当前 Isolate 在同一个 IsolateGroup 中。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">spawnIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> receivePort <span class="token operator">=</span> <span class="token class-name">ReceivePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  receivePort<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;receivePort(</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>debugName</span><span class="token punctuation">}</span></span><span class="token string">) received msg: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个和当前的 isolate 共享同一份代码的 Isolate</span>
<span class="token keyword">var</span> isolate <span class="token operator">=</span> <span class="token class-name">Isolate</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Isolate initial function(</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>debugName</span><span class="token punctuation">}</span></span><span class="token string">) received msg: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>message <span class="token operator">as</span> <span class="token class-name">SendPort</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;HELLO_FORM_ISOLATE(</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>debugName</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> receivePort<span class="token punctuation">.</span>sendPort<span class="token punctuation">,</span>debugName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;another_isolate&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Isolate.spawnUri（Uri uri,List&lt;String&gt; args,var message,...）</code>* 指定的<code>uri</code>中创建并孵化一个 isolate，执行 uri 对应的 library 中的<code>main</code>方法（0~2 个入参），并传入无参、args 或 message 作为参数</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> receivePort <span class="token operator">=</span> <span class="token class-name">ReceivePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  receivePort<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;receivePort(</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token class-name">Isolate</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>debugName</span><span class="token punctuation">}</span></span><span class="token string">) received msg: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建一个和当前的 isolate 共享同一份代码的 Isolate</span>
  <span class="token keyword">var</span> isolate <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Isolate</span><span class="token punctuation">.</span><span class="token function">spawnUri</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>
          <span class="token string-literal"><span class="token string">r&quot;E:\\workspace\\others\\flutter_dart_source_code_analysis\\lib\\dart\\another_dart_file_to_spawn_uri.dart&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      receivePort<span class="token punctuation">.</span>sendPort<span class="token punctuation">,</span>
      debugName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;another_isolate&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    receivePort<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    isolate<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span>priority<span class="token punctuation">:</span> <span class="token class-name">Isolate</span><span class="token punctuation">.</span>immediate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;try kill new isolate&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><h4 id="pause" tabindex="-1"><a class="header-anchor" href="#pause" aria-hidden="true">#</a> <strong>pause</strong></h4><p><code>Capability pause([Capability? resumeCapability])</code>，暂停 Isolate，停止从*<code>event loop queue</code>* 中取（并处理）消息，但是依然可以往里面加入消息</p><p><em><code>resumeCapability</code></em> 是用来区分 pause 的，必须使用同一个*<code>resumeCapability</code>*来 resume isolate。</p><ul><li>使用同一个*<code>resumeCapability</code>*多次<code>pause</code>，只需一次<code>resume</code>就可以恢复<code>isolate</code></li><li>使用不同*<code>resumeCapability</code><em>多次<code>pause</code>，必须使用对应的</em><code>resumeCapability</code><em>依次<code>resume</code>才可以恢复<code>isolate</code> （<strong>注意</strong>：这里也只需要使用当时 pause isolate 的</em><code>resumeCapability</code>* 依次调用 resume 即可，而不用保持次数一致，比如，有 2 个*<code>resumeCapability</code> ，*调用 pause 次数分别为 a 1,b 2，那么要想 resume isolate，也只需要分别使用 a,b 调用一次 resume 即可）</li></ul><h4 id="ping" tabindex="-1"><a class="header-anchor" href="#ping" aria-hidden="true">#</a> ping</h4><p>使用 isolate 往<code>receivePort.sendPort</code>发送 response 消息，<strong>即使 isolate 当前被 pause 也可以正常发送</strong></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>isolate<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
isolate<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span>receivePort<span class="token punctuation">.</span>sendPort<span class="token punctuation">,</span> response<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;is isolate resume?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//receivePort 依然可以收到消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ping 可以正常发送的原因是：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\isolate\\isolate.dart</span>

<span class="token comment">// ping 方法是一个 external 方法</span>
<span class="token keyword">external</span> <span class="token keyword">void</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span> responsePort<span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token operator">?</span> response<span class="token punctuation">,</span> int priority <span class="token operator">=</span> immediate<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -&gt; sdk/lib/_internal/vm/lib/isolate_patch.dart</span>

<span class="token metadata function">@patch</span>
  <span class="token keyword">void</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span> responsePort<span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token operator">?</span> response<span class="token punctuation">,</span> int priority<span class="token punctuation">:</span> immediate<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// Make room for OOM message type.</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _PING
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> responsePort
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> priority
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>
    <span class="token function">_sendOOB</span><span class="token punctuation">(</span>controlPort<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Isolate_sendOOB&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_sendOOB</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -&gt; runtime/lib/isolate.cc</span>

<span class="token comment">// 创建了一个 oob 消息并压入 oob_queue_</span>
<span class="token function">DEFINE_NATIVE_ENTRY</span><span class="token punctuation">(</span><span class="token class-name">Isolate_sendOOB</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">GET_NON_NULL_NATIVE_ARGUMENT</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> arguments<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NativeArgAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">GET_NON_NULL_NATIVE_ARGUMENT</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> arguments<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NativeArgAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Make sure to route this request to the isolate library OOB mesage handler.</span>
  <span class="token class-name"><span class="token namespace">msg<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Smi</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">Smi</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kIsolateLibOOBMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Ensure message writer (and it&#39;s resources, e.g. forwarding tables) are</span>
  <span class="token comment">// cleaned up before handling interrupts.</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PostMessage</span><span class="token punctuation">(</span><span class="token class-name">WriteMessage</span><span class="token punctuation">(</span><span class="token comment">/* can_send_any_object */</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                                      <span class="token comment">/* same_group */</span> <span class="token boolean">false</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">port<span class="token punctuation">.</span></span>Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      <span class="token class-name">Message</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kOOBPriority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Drain interrupts before running so any IMMEDIATE operations on the current</span>
  <span class="token comment">// isolate happen synchronously.</span>
  <span class="token keyword">const</span> <span class="token class-name">Error</span><span class="token operator">&amp;</span> error <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>thread<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">HandleInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">error<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Exceptions</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PropagateError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UNREACHABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 MessageHandler 中有两种 MessageQueue：<code>oob_queue_</code>和<code>queue_</code> ，前者优先级高，即使 isolate 被 pause 也会执行</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\message_handler.h</span>

<span class="token comment">// 普通消息，暂停时不能处理</span>
<span class="token class-name">MessageQueue</span><span class="token operator">*</span> queue_<span class="token punctuation">;</span>
<span class="token comment">// 优先消息，即使处理消息时，优先处理 obb_queue 消息，如果为空再去考虑处理普通消息</span>
<span class="token comment">// 即使 isolate 被 pause 也可以被处理</span>
<span class="token class-name">MessageQueue</span><span class="token operator">*</span> oob_queue_<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像是<code>ping</code>/<code>kill</code>/<code>pause</code>/<code>addOnExitListener</code>/<code>removeOnExitListener</code>这些指令消息都是压入到<code>obb_queue_</code>中优先处理的。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p>先看一下常用的几个方法是怎么实现的。</p><h3 id="获取当前-isolate" tabindex="-1"><a class="header-anchor" href="#获取当前-isolate" aria-hidden="true">#</a> 获取当前 Isolate</h3><p>（<em>sdk/lib/isolate/isolate.dart</em>）<code>Isolate.current</code> →</p><p>(<em>sdk/lib/_internal/vm/lib/isolate_patch.dart</em>) <code>Isolate get current</code> → <code>Isolate._getCurrentIsolate()</code> → <code>_getPortAndCapabilitiesOfCurrentIsolate()</code></p><p>（<em>runtime/lib/isolate.cc</em>）<code>DEFINE_NATIVE_ENTRY(Isolate_getPortAndCapabilitiesOfCurrentIsolate, 0, 0)</code></p><p>先看一下<em>sdk/lib/_internal/vm/lib/isolate_patch.dart</em>中的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk/lib/_internal/vm/lib/isolate_patch.dart</span>

<span class="token keyword">static</span> <span class="token keyword">final</span> _currentIsolate <span class="token operator">=</span> <span class="token function">_getCurrentIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Isolate</span> <span class="token keyword">get</span> current <span class="token operator">=</span><span class="token operator">&gt;</span> _currentIsolate<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">Isolate</span> <span class="token function">_getCurrentIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span> portAndCapabilities <span class="token operator">=</span> <span class="token function">_getPortAndCapabilitiesOfCurrentIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 这里的参数分别是 SendPort，Capability，Capability</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Isolate</span><span class="token punctuation">(</span>portAndCapabilities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        pauseCapability<span class="token punctuation">:</span> portAndCapabilities<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        terminateCapability<span class="token punctuation">:</span> portAndCapabilities<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Isolate_getPortAndCapabilitiesOfCurrentIsolate&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">List</span> <span class="token function">_getPortAndCapabilitiesOfCurrentIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，最后是根据 native 端返回的信息，新建了一个 Isolate 引用，但是因为<code>_currentIsolate</code>是<code>static final</code>的，所以只会被调用一次，确保了在 Dart SDK 中调用<code>Isolate.current</code> 时获取的是当前唯一的 Isolate。</p><p>让我们看一下在 native 中是如何找到当前的 Isolate 的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; \\runtime\\lib\\isolate.cc</span>

<span class="token function">DEFINE_NATIVE_ENTRY</span><span class="token punctuation">(</span><span class="token class-name">Isolate_getPortAndCapabilitiesOfCurrentIsolate</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">Array</span><span class="token operator">&amp;</span> result <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">main_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span>
      <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Capability</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">Capability</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">pause_capability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">result<span class="token punctuation">.</span></span>SetAt</span><span class="token punctuation">(</span>
      <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Capability</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">Capability</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">terminate_capability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见是直接取的<strong>当前线程对应的 isolate</strong>对应的值，经过包装再返回到调用方。</p><h3 id="创建-isolate" tabindex="-1"><a class="header-anchor" href="#创建-isolate" aria-hidden="true">#</a> 创建 Isolate</h3><p>在 Dart 中创建 Isolate 有 3 种方式：</p><ul><li><code>Isolate(this.controlPort, {this.pauseCapability, this.terminateCapability});</code> <strong>*create</strong> an* <em>isolate，本质上只是将</em><code>controlPort</code> 等设置为传入的对象，并没有在 native 层新建 Isolate</li><li><code>Isolate.spawn</code> <strong>create</strong> and <strong>spawns</strong> an <em>isolate</em></li><li><code>Isolate.spawnUri</code> <strong>create</strong> and <strong>spawns</strong> an <em>isolate</em></li></ul><figure><img src="https://jixiaoyong.github.io/images/Isolate_spawn_spawnuri.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里分析一下后面两种方式，对比一下差异：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\isolate\\isolate.dart</span>

<span class="token comment">// Creates a new [Isolate] object with a restricted set of capabilities.</span>
<span class="token class-name">Isolate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>controlPort<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>pauseCapability<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminateCapability<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// Creates and spawns an isolate that shares the same code as the current</span>
<span class="token comment">/// isolate.</span>
<span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span> spawn<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
      <span class="token keyword">void</span> <span class="token function">entryPoint</span><span class="token punctuation">(</span><span class="token class-name">T</span> message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">T</span> message<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>bool paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      bool errorsAreFatal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      <span class="token metadata function">@Since</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2.3&quot;</span></span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/// Creates and spawns an isolate that runs the code from the library with</span>
  <span class="token comment">/// the specified URI.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// The isolate starts executing the top-level \`main\` function of the library</span>
  <span class="token comment">/// with the given URI.</span>
	<span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span> <span class="token function">spawnUri</span><span class="token punctuation">(</span>
      <span class="token class-name">Uri</span> uri<span class="token punctuation">,</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">,</span>
      <span class="token keyword">var</span> message<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>bool paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      bool errorsAreFatal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      bool<span class="token operator">?</span> checked<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> environment<span class="token punctuation">,</span>
      <span class="token metadata function">@Deprecated</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The packages/ dir is not supported in Dart 2&#39;</span></span><span class="token punctuation">)</span>
          <span class="token class-name">Uri</span><span class="token operator">?</span> packageRoot<span class="token punctuation">,</span>
      <span class="token class-name">Uri</span><span class="token operator">?</span> packageConfig<span class="token punctuation">,</span>
      bool automaticPackageResolution <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token metadata function">@Since</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2.3&quot;</span></span><span class="token punctuation">)</span>
          <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 APP 等来说，上述<code>Isolate.spawn</code>和<code>Isolate.spawnUri</code>的实现都在<code>vm</code>下面的<code>isolate_patch.dart</code>中（js 会返回<code>_unsupported()</code>）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\isolate_patch.dart</span>

  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span> spawn<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">entryPoint</span><span class="token punctuation">(</span><span class="token class-name">T</span> message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">T</span> message<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>bool paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      bool errorsAreFatal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`paused\` isn&#39;t handled yet.</span>
    <span class="token comment">// Check for the type of \`entryPoint\` on the spawning isolate to make</span>
    <span class="token comment">// error-handling easier.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entryPoint <span class="token operator">is!</span> _UnaryFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentError</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// The VM will invoke [_startIsolate] with entryPoint as argument.</span>

    <span class="token comment">// We do not inherit the package config settings from the parent isolate,</span>
    <span class="token comment">// instead we use the values that were set on the command line.</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">final</span> <span class="token class-name">RawReceivePort</span> readyPort <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">RawReceivePort</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Isolate.spawn ready&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token operator">*</span>_spawnFunction<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>readyPort<span class="token punctuation">.</span>sendPort<span class="token punctuation">,</span> script<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> message<span class="token punctuation">,</span>
          paused<span class="token punctuation">,</span> errorsAreFatal<span class="token punctuation">,</span> onExit<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> packageConfig<span class="token punctuation">,</span> debugName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token operator">*</span><span class="token operator">*</span>_spawnCommon<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>readyPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      readyPort<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span> <span class="token function">spawnUri</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">,</span> <span class="token keyword">var</span> message<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>bool paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      bool errorsAreFatal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      bool<span class="token operator">?</span> checked<span class="token punctuation">,</span>
      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> environment<span class="token punctuation">,</span>
      <span class="token class-name">Uri</span><span class="token operator">?</span> packageRoot<span class="token punctuation">,</span>
      <span class="token class-name">Uri</span><span class="token operator">?</span> packageConfig<span class="token punctuation">,</span>
      bool automaticPackageResolution <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>

    <span class="token comment">// Verify that no mutually exclusive arguments have been passed.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Resolve the uri against the current isolate&#39;s root Uri first.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// The VM will invoke [_startIsolate] and not \`main\`.</span>
    <span class="token keyword">final</span> packageConfigString <span class="token operator">=</span> packageConfig<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">RawReceivePort</span> readyPort <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">RawReceivePort</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Isolate.spawnUri ready&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token operator">*</span>_spawnUri<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>
          readyPort<span class="token punctuation">.</span>sendPort<span class="token punctuation">,</span>
          spawnedUri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          args<span class="token punctuation">,</span>
          message<span class="token punctuation">,</span>
          paused<span class="token punctuation">,</span>
          onExit<span class="token punctuation">,</span>
          onError<span class="token punctuation">,</span>
          errorsAreFatal<span class="token punctuation">,</span>
          checked<span class="token punctuation">,</span>
          <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token comment">/* environment */</span>
          packageConfigString<span class="token punctuation">,</span>
          debugName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token operator">*</span><span class="token operator">*</span>_spawnCommon<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>readyPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      readyPort<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token comment">//  Isolate.spawn call</span>
<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Isolate_spawnFunction&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_spawnFunction</span><span class="token punctuation">(</span>
      <span class="token class-name">SendPort</span> readyPort<span class="token punctuation">,</span>
      <span class="token class-name">String</span> uri<span class="token punctuation">,</span>
      <span class="token class-name">Function</span> topLevelFunction<span class="token punctuation">,</span>
      <span class="token keyword">var</span> message<span class="token punctuation">,</span>
      bool paused<span class="token punctuation">,</span>
      bool errorsAreFatal<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> packageConfig<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  Isolate.spawnUri call</span>
<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Isolate_spawnUri&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_spawnUri</span><span class="token punctuation">(</span>
      <span class="token class-name">SendPort</span> readyPort<span class="token punctuation">,</span>
      <span class="token class-name">String</span> uri<span class="token punctuation">,</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">,</span>
      <span class="token keyword">var</span> message<span class="token punctuation">,</span>
      bool paused<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onExit<span class="token punctuation">,</span>
      <span class="token class-name">SendPort</span><span class="token operator">?</span> onError<span class="token punctuation">,</span>
      bool errorsAreFatal<span class="token punctuation">,</span>
      bool<span class="token operator">?</span> checked<span class="token punctuation">,</span>
      <span class="token class-name">List</span><span class="token operator">?</span> environment<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> packageConfig<span class="token punctuation">,</span>
      <span class="token class-name">String</span><span class="token operator">?</span> debugName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听 Isolate spawn 状态，等成功之后将其处理后返回给 Dart 层的调用者</span>
<span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span> <span class="token function">_spawnCommon</span><span class="token punctuation">(</span><span class="token class-name">RawReceivePort</span> readyPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> completer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Isolate</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token keyword">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    readyPort<span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token punctuation">(</span>readyMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      readyPort<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>readyMessage <span class="token operator">is</span> <span class="token class-name">List</span> <span class="token operator">&amp;&amp;</span> readyMessage<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SendPort</span> controlPort <span class="token operator">=</span> readyMessage<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span> capabilities <span class="token operator">=</span> readyMessage<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token operator">*</span>completer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Isolate</span><span class="token punctuation">(</span>controlPort<span class="token punctuation">,</span>
            pauseCapability<span class="token punctuation">:</span> capabilities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            terminateCapability<span class="token punctuation">:</span> capabilities<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>readyMessage <span class="token operator">is</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// We encountered an error while starting the new isolate.</span>
        completer<span class="token punctuation">.</span><span class="token function">completeError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IsolateSpawnException</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&#39;Unable to spawn isolate: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">readyMessage</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// This shouldn&#39;t happen.</span>
        completer<span class="token punctuation">.</span><span class="token function">completeError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IsolateSpawnException</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&quot;Internal error: unexpected format for ready message: &quot;</span></span>
            <span class="token string-literal"><span class="token string">&quot;&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">readyMessage</span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，根据上述的代码，不管是<code>Isolate.spawnUri()</code> 还是<code>Isolate.spawn</code>，都是先调用<code>RawReceivePort</code>获取<code>RawReceivePort readyPort</code>，最后都是调用了<code>_spawnCommon(readyPort)</code> 方法，最终通过<code>new Isolate(controlPort, pauseCapability: capabilities[0], terminateCapability: capabilities[1])</code>方法创建了新的<code>Isolate</code> 。</p><p>这个方法的定义在<code>sdk/lib/isolate/isolate.dart</code>中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk/lib/isolate/isolate.dart</span>
<span class="token keyword">final</span> <span class="token class-name">SendPort</span> controlPort<span class="token punctuation">;</span>

<span class="token class-name">Isolate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>controlPort<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>pauseCapability<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>terminateCapability<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在 Dart 中，我们拿到的 Isolate 主要是<strong>持有一个和 native 中对应 SendPort</strong>。</p><p>通过上面的分析：</p><ul><li><code>Isolate.spawn</code>最后调用了<code>_spawnFunction</code>方法（native 层实现为<code>Isolate_spawnFunction</code>）；</li><li><code>Isolate.spawnUri</code>最后调用了<code>_spawnUri</code>方法（native 层实现为<code>Isolate_spawnUri</code>）。</li></ul><blockquote><p>💡 <code>new RawReceivePort()</code>方法主要是创建一个不存在于<code>_RawReceivePortImpl</code>的<code>static final _portMap = &lt;int, Map&lt;String, dynamic&gt;&gt;{};</code> 中的 SendPort（具体实现在<code>PortMap::CreatePort</code>中）。</p></blockquote><h4 id="isolate-spawnfunction" tabindex="-1"><a class="header-anchor" href="#isolate-spawnfunction" aria-hidden="true">#</a> Isolate_spawnFunction</h4><p><code>Isolate.spawn</code>最后调用了<code>_spawnFunction</code>方法，来看一下对应的<code>Isolate_spawnFunction</code> 的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

<span class="token function">DEFINE_NATIVE_ENTRY</span><span class="token punctuation">(</span><span class="token class-name">Isolate_spawnFunction</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 解析参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// closure_tuple_handle 对应我们在 Dart 中 Isolate.spawn() 中传入的 entryPoint</span>
    <span class="token comment">// 也就是 isolate 创建好以后执行的方法</span>

  std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IsolateSpawnState</span><span class="token punctuation">&gt;</span></span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IsolateSpawnState</span><span class="token punctuation">(</span>
      <span class="token class-name"><span class="token namespace">port<span class="token punctuation">.</span></span>Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">origin_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String2UTF8</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">)</span><span class="token punctuation">,</span>
      closure_tuple_handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message_buffer<span class="token punctuation">,</span> utf8_package_config<span class="token punctuation">,</span>
      paused<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fatal_errors<span class="token punctuation">,</span> on_exit_port<span class="token punctuation">,</span> on_error_port<span class="token punctuation">,</span>
      utf8_debug_name<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Since this is a call to Isolate.spawn, copy the parent isolate&#39;s code.</span>
  state<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>copy_parent_code <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token operator">*</span><span class="token operator">*</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Run</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpawnIsolateTask</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>
                                                         std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，<code>Isolate_spawnFunction</code>方法中主要还是解析收到的各种参数，最后在当前 isolate 对应的 IsolateGroup 的线程池中执行<code>SpawnIsolateTask</code>：</p><h5 id="spawnisolatetask" tabindex="-1"><a class="header-anchor" href="#spawnisolatetask" aria-hidden="true">#</a> SpawnIsolateTask</h5><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

<span class="token keyword">class</span> <span class="token class-name">SpawnIsolateTask</span> <span class="token punctuation">:</span> public <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Task</span> <span class="token punctuation">{</span>
	<span class="token class-name">SpawnIsolateTask</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token operator">*</span> parent_isolate<span class="token punctuation">,</span>
                   std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IsolateSpawnState</span><span class="token punctuation">&gt;</span></span> state<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token function">parent_isolate_</span><span class="token punctuation">(</span>parent_isolate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">state_</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent_isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">IncrementSpawnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span>
    <span class="token keyword">const</span> char<span class="token operator">*</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">debug_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>
                           <span class="token operator">?</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">:</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">debug_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    auto group <span class="token operator">=</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">RunHeavyweight</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">RunLightweight</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="runlightweight" tabindex="-1"><a class="header-anchor" href="#runlightweight" aria-hidden="true">#</a> RunLightWeight</h5><p>因为这里我们的<code>isolate→group</code>不为空，所以走的是<code>RunLightWeight</code>:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

<span class="token keyword">void</span> <span class="token class-name">RunLightweight</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The create isolate initialize callback is mandatory.</span>
    auto initialize_callback <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitializeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialize_callback <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FailedSpawn</span><span class="token punctuation">(</span>
          <span class="token string-literal"><span class="token string">&quot;Lightweight isolate spawn is not supported by this Dart embedder\\n&quot;</span></span><span class="token punctuation">,</span>
          <span class="token comment">/*has_current_isolate=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    char<span class="token operator">*</span> error <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

    auto group <span class="token operator">=</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token operator">*</span> isolate <span class="token operator">=</span> <span class="token class-name">CreateWithinExistingIsolateGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    parent_isolate_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">DecrementSpawnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parent_isolate_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FailedSpawn</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token comment">/*has_current_isolate=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span><span class="token operator">*</span> child_isolate_data <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">const</span> bool success <span class="token operator">=</span> <span class="token function">initialize_callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>child_isolate_data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FailedSpawn</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Dart_ShutdownIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span><span class="token operator">*</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_init_callback_data</span><span class="token punctuation">(</span>child_isolate_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注意这里的 Run 方法，在**RunHeavyweight 方法的最后也调用了</span>
    <span class="token comment">// 到时候会一起分析一下</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Run</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\dart_api_impl.cc</span>

<span class="token class-name">Isolate</span><span class="token operator">*</span> <span class="token class-name">CreateWithinExistingIsolateGroup</span><span class="token punctuation">(</span><span class="token class-name">IsolateGroup</span><span class="token operator">*</span> group<span class="token punctuation">,</span>
                                          <span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">,</span>
                                          char<span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">API_TIMELINE_DURATION</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_NO_ISOLATE</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  auto spawning_group <span class="token operator">=</span> group<span class="token punctuation">;</span>

  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token operator">*</span> isolate <span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token class-name">Isolate</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
      <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">CreateIsolate</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>spawning_group<span class="token punctuation">,</span> <span class="token comment">/*is_new_group=*/</span><span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>
                    <span class="token comment">/*isolate_data=*/</span>nullptr<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>

	<span class="token comment">// 因为执行到这里的都有 IsolateGroup，共享同一份代码</span>
  auto source <span class="token operator">=</span> spawning_group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> isolate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要进行了 2 步：</p><ul><li>使用<code>CreateWithinExistingIsolateGroup</code>创建 Isolate</li><li>使用全局的<code>initialize_callback</code> （也就是<code>Isolate::InitializeCallback()</code>）初始化 Isolate</li></ul><h6 id="isolate-initializecallback" tabindex="-1"><a class="header-anchor" href="#isolate-initializecallback" aria-hidden="true">#</a> Isolate::InitializeCallback()</h6><p>这其中的<code>Isolate::InitializeCallback()</code>是在<code>Dart::Init</code>的时候就已经设置了的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime/bin/main.cc</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> char<span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">// Initialize the Dart VM.</span>
  <span class="token class-name">Dart_InitializeParams</span> init_params<span class="token punctuation">;</span>
	init_params<span class="token punctuation">.</span>version <span class="token operator">=</span> DART_INITIALIZE_PARAMS_CURRENT_VERSION<span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>vm_snapshot_data <span class="token operator">=</span> vm_snapshot_data<span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>vm_snapshot_instructions <span class="token operator">=</span> vm_snapshot_instructions<span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span>init_params<span class="token punctuation">.</span>create_group <span class="token operator">=</span> <span class="token class-name">CreateIsolateGroupAndSetup</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token operator">*</span><span class="token operator">*</span>init_params<span class="token punctuation">.</span>initialize_isolate <span class="token operator">=</span> <span class="token class-name">OnIsolateInitialize</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  init_params<span class="token punctuation">.</span>shutdown_isolate <span class="token operator">=</span> <span class="token class-name">OnIsolateShutdown</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>cleanup_isolate <span class="token operator">=</span> <span class="token class-name">DeleteIsolateData</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>cleanup_group <span class="token operator">=</span> <span class="token class-name">DeleteIsolateGroupData</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>file_open <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">OpenFile</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>file_read <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ReadFile</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>file_write <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">WriteFile</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>file_close <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CloseFile</span><span class="token punctuation">;</span>
  init_params<span class="token punctuation">.</span>entropy_source <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">EntropySource</span><span class="token punctuation">;</span>

	error <span class="token operator">=</span> <span class="token class-name">Dart_Initialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\dart_api_impl.cc</span>

DART_EXPORT char<span class="token operator">*</span> <span class="token class-name">Dart_Initialize</span><span class="token punctuation">(</span><span class="token class-name">Dart_InitializeParams</span><span class="token operator">*</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StrDup</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;Dart_Initialize: &quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;Dart_InitializeParams is null.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>version <span class="token operator">!=</span> DART_INITIALIZE_PARAMS_CURRENT_VERSION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StrDup</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;Dart_Initialize: &quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;Invalid Dart_InitializeParams version.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\dart.cc</span>

char<span class="token operator">*</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Dart_InitializeParams</span><span class="token operator">*</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">init_state_<span class="token punctuation">.</span></span>SetInitializing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StrDup</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;Bad VM initialization state, &quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;already initialized or &quot;</span></span>
        <span class="token string-literal"><span class="token string">&quot;multiple threads initializing the VM.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  char<span class="token operator">*</span> retval <span class="token operator">=</span> <span class="token class-name">DartInit</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">init_state_<span class="token punctuation">.</span></span>ResetInitializing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retval<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name"><span class="token namespace">init_state_<span class="token punctuation">.</span></span>SetInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

char<span class="token operator">*</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">DartInit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Dart_InitializeParams</span><span class="token operator">*</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token class-name">OSThread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Zone</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">IsolateGroup</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Service</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ExitIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Unregister the VM isolate from this thread.</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetCreateGroupCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>create_group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetInitializeCallback_</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>initialize_isolate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetShutdownCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>shutdown_isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetCleanupCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>cleanup_isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetGroupCleanupCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>cleanup_group<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetRegisterKernelBlobCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>register_kernel_blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetUnregisterKernelBlobCallback</span><span class="token punctuation">(</span>params<span class="token operator">-</span><span class="token operator">&gt;</span>unregister_kernel_blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，上文的<code>Isolate::InitializeCallback()</code>实际上就是<code>OnIsolateInitialize</code>，它的主要作用就是在 isolate 创建好之后进行统一的初始化操作，绑定一些数据：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\bin\\main.cc</span>

<span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">OnIsolateInitialize</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> child_callback_data<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Dart_Isolate isolate <span class="token operator">=</span> <span class="token function">Dart_CurrentIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>isolate <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> isolate_group_data <span class="token operator">=</span>
      <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>IsolateGroupData<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">Dart_CurrentIsolateGroupData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> isolate_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">IsolateData</span><span class="token punctuation">(</span>isolate_group_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>child_callback_data <span class="token operator">=</span> isolate_data<span class="token punctuation">;</span>

  <span class="token function">Dart_EnterScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">*</span><span class="token operator">*</span>script_uri<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">=</span> isolate_group_data<span class="token operator">-&gt;</span>script_url<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token operator">*</span><span class="token operator">*</span>isolate_run_app_snapshot<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">=</span>
      isolate_group_data<span class="token operator">-&gt;</span><span class="token function">RunFromAppSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Dart_Handle <span class="token operator">*</span><span class="token operator">*</span>result<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token function">SetupCoreLibraries</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> isolate_data<span class="token punctuation">,</span>
                                          <span class="token comment">/*group_start=*/</span><span class="token boolean">false</span><span class="token punctuation">,</span>
                                          <span class="token comment">/*resolved_packages_config=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dart_IsError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate_run_app_snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token class-name">Loader</span><span class="token double-colon punctuation">::</span><span class="token function">InitForSnapshot</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> isolate_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dart_IsError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token double-colon punctuation">::</span><span class="token function">ResolveScript</span><span class="token punctuation">(</span><span class="token function">Dart_NewStringFromCString</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dart_IsError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate_group_data<span class="token operator">-&gt;</span><span class="token function">kernel_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Various core-library parts will send requests to the Loader to resolve</span>
      <span class="token comment">// relative URIs and perform other related tasks. We need Loader to be</span>
      <span class="token comment">// initialized for this to work because loading from Kernel binary</span>
      <span class="token comment">// bypasses normal source code loading paths that initialize it.</span>
      <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> resolved_script_uri <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token function">Dart_StringToCString</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token operator">&amp;</span>resolved_script_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dart_IsError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token class-name">Loader</span><span class="token double-colon punctuation">::</span><span class="token function">InitForSnapshot</span><span class="token punctuation">(</span>resolved_script_uri<span class="token punctuation">,</span> isolate_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dart_IsError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">Dart_ExitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

failed<span class="token operator">:</span>
  <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token double-colon punctuation">::</span><span class="token function">StrDup</span><span class="token punctuation">(</span><span class="token function">Dart_GetError</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Dart_ExitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="createwithinexistingisolategroup" tabindex="-1"><a class="header-anchor" href="#createwithinexistingisolategroup" aria-hidden="true">#</a> CreateWithinExistingIsolateGroup</h6><p><code>CreateWithinExistingIsolateGroup</code> → <code>CreateIsolate</code></p><p>再看一下创建 Isolate 的具体方法，这个在不同的 device 上面不一样，我们只关注 vm 下面的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\dart_api_impl.cc</span>

<span class="token keyword">static</span> <span class="token class-name">Dart_Isolate</span> <span class="token class-name">CreateIsolate</span><span class="token punctuation">(</span><span class="token class-name">IsolateGroup</span><span class="token operator">*</span> group<span class="token punctuation">,</span>
                                  bool is_new_group<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">,</span>
                                  <span class="token keyword">void</span><span class="token operator">*</span> isolate_data<span class="token punctuation">,</span>
                                  char<span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span><span class="token operator">*</span>CHECK_NO_ISOLATE<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  auto source <span class="token operator">=</span> group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token operator">*</span> <span class="token class-name">I</span> <span class="token operator">=</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreateIsolate</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> source<span class="token operator">-</span><span class="token operator">&gt;</span>flags<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">I</span> <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StrDup</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Isolate creation failed&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> reinterpret_cast<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dart_Isolate</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Thread</span><span class="token operator">*</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bool success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">StackZone</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// We enter an API scope here as InitializeIsolate could compile some</span>
    <span class="token comment">// bootstrap library files which call out to a tag handler that may create</span>
    <span class="token comment">// Api Handles when an error is encountered.</span>
    <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">EnterApiScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">Error</span><span class="token operator">&amp;</span> error_obj <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>
        <span class="token class-name">Z</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitializeIsolate</span><span class="token punctuation">(</span>
               source<span class="token operator">-</span><span class="token operator">&gt;</span>snapshot_data<span class="token punctuation">,</span> source<span class="token operator">-</span><span class="token operator">&gt;</span>snapshot_instructions<span class="token punctuation">,</span>
               source<span class="token operator">-</span><span class="token operator">&gt;</span>kernel_buffer<span class="token punctuation">,</span> source<span class="token operator">-</span><span class="token operator">&gt;</span>kernel_buffer_size<span class="token punctuation">,</span>
               is_new_group <span class="token operator">?</span> nullptr <span class="token punctuation">:</span> group<span class="token punctuation">,</span> isolate_data<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">error_obj<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_check_function_fingerprints</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">FLAG_precompiled_mode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Library</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CheckFunctionFingerprints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
#endif  <span class="token comment">// defined(DEBUG) &amp;&amp; !defined(DART_PRECOMPILED_RUNTIME).</span>
      success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">StrDup</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">error_obj<span class="token punctuation">.</span></span>ToErrorCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// We exit the API scope entered above.</span>
    <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">ExitApiScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_new_group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">InitGrowthControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// A Thread structure has been associated to the thread, we do the</span>
    <span class="token comment">// safepoint transition explicitly here instead of using the</span>
    <span class="token comment">// TransitionXXX scope objects as the reverse transition happens</span>
    <span class="token comment">// outside this scope in Dart_ShutdownIsolate/Dart_ExitIsolate.</span>
    <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_execution_state</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span>kThreadInNative<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">EnterSafepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>error <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Api</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CastIsolate</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">ShutdownIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> reinterpret_cast<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dart_Isolate</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要有两步：</p><ul><li><code>Dart::CreateIsolate</code>创建了<code>Isolate* I</code>；</li><li>然后调用<code>Dart::InitializeIsolate</code>初始化 isolate。</li></ul><p><strong>Dart::CreateIsolate：</strong></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\dart.cc</span>

<span class="token class-name">Isolate</span><span class="token operator">*</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreateIsolate</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name_prefix<span class="token punctuation">,</span>
                             <span class="token keyword">const</span> <span class="token class-name">Dart_IsolateFlags</span><span class="token operator">&amp;</span> api_flags<span class="token punctuation">,</span>
                             <span class="token class-name">IsolateGroup</span><span class="token operator">*</span> isolate_group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Create a new isolate.</span>
  <span class="token class-name">Isolate</span><span class="token operator">*</span> isolate <span class="token operator">=</span>
      <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitIsolate</span><span class="token punctuation">(</span>name_prefix<span class="token punctuation">,</span> isolate_group<span class="token punctuation">,</span> api_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> isolate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>💡 在 Dart 虚拟机启动（<code>Dart::DartInit</code>）的时候，也会调用<code>Dart::InitIsolate</code>创建虚拟机对应的 Isolate，执行 UI 操作：<br><code>vm_isolate_ = Isolate::InitIsolate(kVmIsolateName, group, api_flags, is_vm_isolate);</code></p></blockquote><p>在<code>Isolate::InitIsolate</code>方法中，先是用<code>isolate_group</code>创建了新的 Isolate，然后将其与<code>Thread</code>，<code>MessageHandler</code>，<code>SendPort</code>等绑定：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\isolate.cc</span>

<span class="token class-name">Isolate</span><span class="token operator">*</span> <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitIsolate</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name_prefix<span class="token punctuation">,</span>
                              <span class="token class-name">IsolateGroup</span><span class="token operator">*</span> isolate_group<span class="token punctuation">,</span>
                              <span class="token keyword">const</span> <span class="token class-name">Dart_IsolateFlags</span><span class="token operator">&amp;</span> api_flags<span class="token punctuation">,</span>
                              bool is_vm_isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建新的 Isolate</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Isolate</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Isolate</span><span class="token punctuation">(</span>isolate_group<span class="token punctuation">,</span> api_flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">BuildName</span><span class="token punctuation">(</span>name_prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_vm_isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// vm isolate object store is initialized later, after null instance</span>
    <span class="token comment">// is created (in Dart::Init).</span>
    <span class="token comment">// Non-vm isolates need to have isolate object store initialized is that</span>
    <span class="token comment">// exit_listeners have to be null-initialized as they will be used if</span>
    <span class="token comment">// we fail to create isolate below, have to do low level shutdown.</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">ASSERT</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span>
<span class="token comment">// Initialize metrics.</span>
#define <span class="token function">ISOLATE_METRIC_INIT</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> variable<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unit<span class="token punctuation">)</span>                        \\
  result<span class="token operator">-</span><span class="token operator">&gt;</span>metric_##variable##_<span class="token punctuation">.</span><span class="token function">InitInstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> name<span class="token punctuation">,</span> NULL<span class="token punctuation">,</span> <span class="token class-name">Metric</span><span class="token punctuation">:</span><span class="token punctuation">:</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ISOLATE_METRIC_LIST</span><span class="token punctuation">(</span>ISOLATE_METRIC_INIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
#undef ISOLATE_METRIC_INIT
#endif  <span class="token comment">// !defined(PRODUCT)</span>

  <span class="token comment">// First we ensure we enter the isolate. This will ensure we&#39;re participating</span>
  <span class="token comment">// in any safepointing requests from this point on. Other threads requesting a</span>
  <span class="token comment">// safepoint operation will therefore wait until we&#39;ve stopped.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Though the [result] isolate is still in a state where no memory has been</span>
  <span class="token comment">// allocated, which means it&#39;s safe to GC the isolate group until here.</span>
  <span class="token comment">// 创建一个 Thread 并和当前 isolate 绑定</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">EnterIsolate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    delete result<span class="token punctuation">;</span>
    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Setup the isolate message handler.</span>
  <span class="token class-name">MessageHandler</span><span class="token operator">*</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IsolateMessageHandler</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>handler <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 在这里绑定了 message handler</span>
  <span class="token operator">*</span><span class="token operator">*</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_message_handler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>

  <span class="token operator">*</span><span class="token operator">*</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_main_port</span><span class="token punctuation">(</span><span class="token class-name">PortMap</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreatePort</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">message_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>
  <span class="token comment">// Verify that we are never reusing a live origin id.</span>
  <span class="token class-name">VerifyOriginId</span> <span class="token function">id_verifier</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">main_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">VisitIsolates</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id_verifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif
  result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_origin_id</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">main_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_pause_capability</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NextUInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_terminate_capability</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NextUInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span>
  result<span class="token operator">-</span><span class="token operator">&gt;</span>debugger_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Debugger</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif

  <span class="token comment">// Now we register the isolate in the group. From this point on any GC would</span>
  <span class="token comment">// traverse the isolate roots (before this point, the roots are only pointing</span>
  <span class="token comment">// to vm-isolate objects, e.g. null)</span>
  <span class="token operator">*</span><span class="token operator">*</span>isolate_group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">RegisterIsolate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ServiceIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">NameEquals</span><span class="token punctuation">(</span>name_prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ServiceIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServiceIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetServiceIsolate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KernelIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">NameEquals</span><span class="token punctuation">(</span>name_prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">KernelIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KernelIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SetKernelIsolate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif  <span class="token comment">// !defined(DART_PRECOMPILED_RUNTIME)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_trace_isolates</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name_prefix <span class="token operator">==</span> nullptr <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>name_prefix<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;vm-isolate&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      OS<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrintErr</span><span class="token punctuation">(</span>
          <span class="token string-literal"><span class="token string">&quot;[+] Starting isolate:\\n&quot;</span></span>
          <span class="token string-literal"><span class="token string">&quot;\\tisolate:    %s\\n&quot;</span></span><span class="token punctuation">,</span>
          result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Add to isolate list. Shutdown and delete the isolate on failure.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TryMarkIsolateReady</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">LowLevelShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">LowLevelCleanup</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dart::InitializeIsolate</strong></p><p>这里主要是对 isolate 进行初始化，并在初始化完成后通知创建这个 isolate 的 isolate。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\vm\\dart.cc</span>

<span class="token class-name">ErrorPtr</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">InitializeIsolate</span><span class="token punctuation">(</span><span class="token keyword">const</span> uint8_t<span class="token operator">*</span> snapshot_data<span class="token punctuation">,</span>
                                 <span class="token keyword">const</span> uint8_t<span class="token operator">*</span> snapshot_instructions<span class="token punctuation">,</span>
                                 <span class="token keyword">const</span> uint8_t<span class="token operator">*</span> kernel_buffer<span class="token punctuation">,</span>
                                 intptr_t kernel_buffer_size<span class="token punctuation">,</span>
                                 <span class="token class-name">IsolateGroup</span><span class="token operator">*</span> source_isolate_group<span class="token punctuation">,</span>
                                 <span class="token keyword">void</span><span class="token operator">*</span> isolate_data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Initialize the new isolate.</span>
  <span class="token class-name">Thread</span><span class="token operator">*</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Isolate</span><span class="token operator">*</span> <span class="token class-name">I</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  auto IG <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>SUPPORT_TIMELINE<span class="token punctuation">)</span>
  <span class="token class-name">TimelineBeginEndScope</span> <span class="token function">tbes</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Timeline</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetIsolateStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             <span class="token string-literal"><span class="token string">&quot;InitializeIsolate&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">tbes<span class="token punctuation">.</span></span>SetNumArguments</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token namespace">tbes<span class="token punctuation">.</span></span>CopyArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;isolateName&quot;</span></span><span class="token punctuation">,</span> <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token class-name">I</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">StackZone</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">HandleScope</span> <span class="token function">handle_scope</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bool was_child_cloned_into_existing_isolate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>source_isolate_group <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If a static field gets registered in [IsolateGroup::RegisterStaticField]:</span>
    <span class="token comment">//</span>
    <span class="token comment">//   * before this block it will ignore this isolate. The [Clone] of the</span>
    <span class="token comment">//     initial field table will pick up the new value.</span>
    <span class="token comment">//   * after this block it will add the new static field to this isolate.</span>
    <span class="token punctuation">{</span>
      <span class="token class-name">SafepointReadRwLocker</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> source_isolate_group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">program_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span>set_field_table<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span>
                         source_isolate_group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">initial_field_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Clone</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">field_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">MarkReadyToUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token punctuation">}</span>

    was_child_cloned_into_existing_isolate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name">Error</span><span class="token operator">&amp;</span> error <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>
				<span class="token comment">// 从 IsolateGroup 中引用一些通用的变量（常量等等）</span>
        <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">InitIsolateFromSnapshot</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">I</span><span class="token punctuation">,</span> snapshot_data<span class="token punctuation">,</span> snapshot_instructions<span class="token punctuation">,</span>
                                kernel_buffer<span class="token punctuation">,</span> kernel_buffer_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">error<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> error<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">VerifyBuiltinVtables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">origin_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">DEBUG_ONLY</span><span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Verify</span><span class="token punctuation">(</span>kForbidMarked<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span>
  <span class="token keyword">const</span> bool kIsAotRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
#<span class="token keyword">else</span>
  <span class="token keyword">const</span> bool kIsAotRuntime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
#endif

  <span class="token keyword">if</span> <span class="token punctuation">(</span>kIsAotRuntime <span class="token operator">||</span> was_child_cloned_into_existing_isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TARGET_ARCH_IA32<span class="token punctuation">)</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_generic_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
           <span class="token class-name">Code</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_nongeneric_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
           <span class="token class-name">Code</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>TARGET_ARCH_IA32<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">I</span> <span class="token operator">!=</span> <span class="token class-name">Dart</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">vm_isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_generic_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
          nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SafepointWriteRwLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">program_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_generic_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
            nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_build_generic_method_extractor_code</span><span class="token punctuation">(</span>
              <span class="token class-name">Code</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>
                  <span class="token class-name">StubCode</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetBuildGenericMethodExtractorStub</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_nongeneric_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
          nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SafepointWriteRwLocker</span> <span class="token function">ml</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">program_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">build_nongeneric_method_extractor_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
            nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_build_nongeneric_method_extractor_code</span><span class="token punctuation">(</span>
              <span class="token class-name">Code</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>
                  <span class="token class-name">StubCode</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetBuildNonGenericMethodExtractorStub</span><span class="token punctuation">(</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
#endif  <span class="token comment">// !defined(TARGET_ARCH_IA32)</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_ic_miss_code</span><span class="token punctuation">(</span><span class="token class-name">StubCode</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SwitchableCallMiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Error</span><span class="token operator">&amp;</span> error <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot_data <span class="token operator">==</span> nullptr <span class="token operator">||</span> kernel_buffer <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    error <span class="token operator">^=</span> IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">PreallocateObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">error<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> error<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> auto<span class="token operator">&amp;</span> out_of_memory <span class="token operator">=</span>
      <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">out_of_memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  error <span class="token operator">^=</span> <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">PreallocateObjects</span><span class="token punctuation">(</span>out_of_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">error<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> error<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>was_child_cloned_into_existing_isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">InitGrowthControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_init_callback_data</span><span class="token punctuation">(</span>isolate_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FLAG_print_class_table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    IG<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">class_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span>
  <span class="token class-name">ServiceIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">MaybeMakeServiceIsolate</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">IsSystemIsolate</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">message_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_should_pause_on_start</span><span class="token punctuation">(</span>
        <span class="token class-name">FLAG_pause_isolates_on_start</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">message_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_should_pause_on_exit</span><span class="token punctuation">(</span><span class="token class-name">FLAG_pause_isolates_on_exit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#endif  <span class="token comment">// !defined(PRODUCT)</span>

  <span class="token class-name">ServiceIsolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SendIsolateStartupMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span>
  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">debugger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">NotifyIsolateCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
#endif

  <span class="token comment">// Create tag table.</span>
  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_tag_table</span><span class="token punctuation">(</span><span class="token class-name">GrowableObjectArray</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">GrowableObjectArray</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Set up default UserTag.</span>
  <span class="token keyword">const</span> <span class="token class-name">UserTag</span><span class="token operator">&amp;</span> default_tag <span class="token operator">=</span> <span class="token class-name">UserTag</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">UserTag</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">DefaultTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_current_tag</span><span class="token punctuation">(</span>default_tag<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">I</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">init_loaded_prefixes_set_storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token class-name">Error</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，如果是调用<code>Isolate.spawn()</code>的话，先从当前 isolate 获取对应的 Isolate Group，然后使用这个 Isolate Group 创建配置一个新的 isolate，这样在同一个 isolate group 中的 Isolate 可以共享常量，heap 等。</p><h4 id="isolate-spawnuri" tabindex="-1"><a class="header-anchor" href="#isolate-spawnuri" aria-hidden="true">#</a> Isolate_spawnUri</h4><p>如果是使用<code>Isolate.spawnUri()</code>的话，就会通过<code>Isolate_spawnUri</code>来创建 isolate。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

	<span class="token function">DEFINE_NATIVE_ENTRY</span><span class="token punctuation">(</span><span class="token class-name">Isolate_spawnUri</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 解析参数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token comment">// Canonicalize the uri with respect to the current isolate.</span>
  <span class="token keyword">const</span> <span class="token class-name">Library</span><span class="token operator">&amp;</span> root_lib <span class="token operator">=</span>
      <span class="token class-name">Library</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span>isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">object_store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">root_library</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  char<span class="token operator">*</span> error <span class="token operator">=</span> NULL<span class="token punctuation">;</span>
<span class="token comment">// 获取 canonical_uri</span>
  <span class="token keyword">const</span> char<span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span>canonical_uri <span class="token operator">=</span> <span class="token class-name">CanonicalizeUri</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> root_lib<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>canonical_uri <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name">String</span><span class="token operator">&amp;</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Handle</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">New</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ThrowIsolateSpawnException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> char<span class="token operator">*</span> utf8_package_config <span class="token operator">=</span>
      <span class="token class-name"><span class="token namespace">packageConfig<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NULL <span class="token punctuation">:</span> <span class="token class-name">String2UTF8</span><span class="token punctuation">(</span>packageConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> char<span class="token operator">*</span> utf8_debug_name <span class="token operator">=</span>
      <span class="token class-name"><span class="token namespace">debugName<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NULL <span class="token punctuation">:</span> <span class="token class-name">String2UTF8</span><span class="token punctuation">(</span>debugName<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IsolateSpawnState</span><span class="token punctuation">&gt;</span></span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">IsolateSpawnState</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>
      <span class="token class-name"><span class="token namespace">port<span class="token punctuation">.</span></span>Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonical_uri<span class="token punctuation">,</span> utf8_package_config<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arguments_buffer<span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>message_buffer<span class="token punctuation">,</span> paused<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fatal_errors<span class="token punctuation">,</span> on_exit_port<span class="token punctuation">,</span>
			<span class="token comment">// 注意下面这里的 group=nullptr</span>
      on_error_port<span class="token punctuation">,</span> utf8_debug_name<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*group=*/</span>nullptr<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// If we were passed a value then override the default flags state for</span>
  <span class="token comment">// checked mode.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">checked<span class="token punctuation">.</span></span>IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Dart_IsolateFlags</span><span class="token operator">*</span> flags <span class="token operator">=</span> state<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    flags<span class="token operator">-</span><span class="token operator">&gt;</span>enable_asserts <span class="token operator">=</span> checked<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Since this is a call to Isolate.spawnUri, don&#39;t copy the parent&#39;s code.</span>
  state<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>copy_parent_code <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  isolate<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Run</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpawnIsolateTask</span><span class="token punctuation">&gt;</span></span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>
                                                         std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>Isolate_spawnUri</code>还是执行了<code>SpawnIsolateTask</code> 。</p><h5 id="spawnisolatetask-1" tabindex="-1"><a class="header-anchor" href="#spawnisolatetask-1" aria-hidden="true">#</a> SpawnIsolateTask</h5><p>在<code>SpawnIsolateTask.Run</code>方法中，因为<code>spawnUri</code>中<code>IsolateSpawnState</code>的<code>IsolateGroup</code>为<code>nulltrp</code>，所以这里执行的是<code>RunHeavyweight(name)</code>：</p><h5 id="runheavyweight" tabindex="-1"><a class="header-anchor" href="#runheavyweight" aria-hidden="true">#</a> RunHeavyweight</h5><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt;</span>

<span class="token keyword">class</span> <span class="token class-name">SpawnIsolateTask</span> <span class="token punctuation">:</span> public <span class="token class-name">ThreadPool</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Task</span> <span class="token punctuation">{</span>

<span class="token keyword">void</span> <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span>
    <span class="token keyword">const</span> char<span class="token operator">*</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">debug_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nullptr<span class="token punctuation">)</span>
                           <span class="token operator">?</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                           <span class="token punctuation">:</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">debug_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    auto group <span class="token operator">=</span> state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">RunHeavyweight</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">RunLightweight</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">RunHeavyweight</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The create isolate group callback is mandatory.  If not provided we</span>
    <span class="token comment">// cannot spawn isolates.</span>
		<span class="token comment">// 在 Dart::DartInit 中已经被设置，在 Isolate 创建时会被回调</span>
    <span class="token operator">*</span><span class="token operator">*</span>auto create_group_callback <span class="token operator">=</span> <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">CreateGroupCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>create_group_callback <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FailedSpawn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Isolate spawn is not supported by this Dart embedder\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    char<span class="token operator">*</span> error <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

    <span class="token comment">// Make a copy of the state&#39;s isolate flags and hand it to the callback.</span>
    <span class="token class-name">Dart_IsolateFlags</span> api_flags <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">isolate_flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    api_flags<span class="token punctuation">.</span>is_system_isolate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token comment">// 创建 isolate</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Dart_Isolate</span> isolate <span class="token operator">=</span>
        <span class="token punctuation">(</span>create_group_callback<span class="token punctuation">)</span><span class="token punctuation">(</span>state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">script_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span>
                                state_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">package_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>api_flags<span class="token punctuation">,</span>
                                parent_isolate_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">init_callback_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
    parent_isolate_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">DecrementSpawnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parent_isolate_ <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">FailedSpawn</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token comment">/*has_current_isolate=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
		<span class="token comment">// 切换到指定的 isolate</span>
    <span class="token class-name">Dart_EnterIsolate</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这里也调用了 Run 方法</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Run</span><span class="token punctuation">(</span>reinterpret_cast<span class="token operator">&lt;</span><span class="token class-name">Isolate</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要创建 Isolate 的过程在<code>Isolate::CreateGroupCallback();</code>中，让我们看一下他是怎么来的：</p><h5 id="isolate-creategroupcallback" tabindex="-1"><a class="header-anchor" href="#isolate-creategroupcallback" aria-hidden="true">#</a> Isolate::CreateGroupCallback()</h5><p>他和上述<code>Isolate::InitializeCallback_</code>的来源一致，都是在<code>Dart_Initialize</code>中配置的，此外，还使用了<code>parent_isolate_-&gt;init_callback_data()</code>。</p><p>先看一下的<code>CreateIsolateGroupAndSetup</code>实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\bin\\main.cc</span>

<span class="token keyword">static</span> <span class="token class-name">Dart_Isolate</span> <span class="token class-name">CreateIsolateGroupAndSetup</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> script_uri<span class="token punctuation">,</span>
                                               <span class="token keyword">const</span> char<span class="token operator">*</span> main<span class="token punctuation">,</span>
                                               <span class="token keyword">const</span> char<span class="token operator">*</span> package_root<span class="token punctuation">,</span>
                                               <span class="token keyword">const</span> char<span class="token operator">*</span> package_config<span class="token punctuation">,</span>
                                               <span class="token class-name">Dart_IsolateFlags</span><span class="token operator">*</span> flags<span class="token punctuation">,</span>
                                               <span class="token keyword">void</span><span class="token operator">*</span> callback_data<span class="token punctuation">,</span>
                                               char<span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// The VM should never call the isolate helper with a NULL flags.</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>flags <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>flags<span class="token operator">-</span><span class="token operator">&gt;</span>version <span class="token operator">==</span> DART_FLAGS_CURRENT_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>package_root <span class="token operator">==</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  bool dontneed_safe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
#<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>DART_HOST_OS_LINUX<span class="token punctuation">)</span>
  <span class="token comment">// This would also be true in Linux, except that Google3 overrides the default</span>
  <span class="token comment">// ELF interpreter to one that apparently doesn&#39;t create proper mappings.</span>
  dontneed_safe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
#elif <span class="token function">defined</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>
  <span class="token comment">// If the snapshot isn&#39;t file-backed, madvise(DONT_NEED) is destructive.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Options</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">force_load_elf_from_memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dontneed_safe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#endif
  flags<span class="token operator">-</span><span class="token operator">&gt;</span>snapshot_is_dontneed_safe <span class="token operator">=</span> dontneed_safe<span class="token punctuation">;</span>

  int exit_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>EXCLUDE_CFE_AND_KERNEL_PLATFORM<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> DART_KERNEL_ISOLATE_NAME<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">CreateAndSetupKernelIsolate</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> package_config<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> error<span class="token punctuation">,</span>
                                       <span class="token operator">&amp;</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#endif  <span class="token comment">// !defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM)</span>

#<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> DART_DEV_ISOLATE_NAME<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">CreateAndSetupDartDevIsolate</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> package_config<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
                                        error<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
#endif  <span class="token comment">// !defined(DART_PRECOMPILED_RUNTIME)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> DART_VM_SERVICE_ISOLATE_NAME<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">CreateAndSetupServiceIsolate</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> package_config<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
                                        error<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  bool is_main_isolate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">CreateIsolateGroupAndSetupHelper</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>is_main_isolate<span class="token punctuation">,</span> script_uri<span class="token punctuation">,</span> main<span class="token punctuation">,</span>
                                          package_config<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> callback_data<span class="token punctuation">,</span>
                                          error<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里创建 Isolate 的时候，区分了几种情况：</p><ul><li>如果是 kernel-service（<code>DART_KERNEL_ISOLATE_NAME</code>）就执行<code>CreateAndSetupKernelIsolate</code></li><li>如果是 dartdev（<code>DART_DEV_ISOLATE_NAME</code>）就执行<code>CreateAndSetupDartDevIsolate</code></li><li>如果是 vm-service（<code>DART_VM_SERVICE_ISOLATE_NAME</code>）就执行<code>CreateAndSetupServiceIsolate</code></li><li>如果以上都不满足，就执行<code>CreateIsolateGroupAndSetupHelper</code></li></ul><p>显然，当我们在 Dart 代码中调用<code>Isolate.spawnUri</code>的时候，这里会执行的是<code>CreateIsolateGroupAndSetupHelper</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\bin\\main.cc</span>

<span class="token comment">// 调用方</span>
	<span class="token keyword">bool</span> is_main_isolate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">CreateIsolateGroupAndSetupHelper</span><span class="token punctuation">(</span>is_main_isolate<span class="token punctuation">,</span> script_uri<span class="token punctuation">,</span> main<span class="token punctuation">,</span>
                                          package_config<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> callback_data<span class="token punctuation">,</span>
                                          error<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns newly created Isolate on success, NULL on failure.</span>
<span class="token keyword">static</span> Dart_Isolate <span class="token function">CreateIsolateGroupAndSetupHelper</span><span class="token punctuation">(</span>
		<span class="token keyword">bool</span> is_main_isolate<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> script_uri<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> packages_config<span class="token punctuation">,</span>
    Dart_IsolateFlags<span class="token operator">*</span> flags<span class="token punctuation">,</span>
    <span class="token keyword">void</span><span class="token operator">*</span> callback_data<span class="token punctuation">,</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">,</span>
    <span class="token keyword">int</span><span class="token operator">*</span> exit_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">// 根据是 AOT 还是 JIT 获取 kernel_buffer，app_snapshot，isolate_run_app_snapshot 等数据</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span><span class="token punctuation">{</span></span></span>
<span class="token comment">// AOT: All isolates need to be run from AOT compiled snapshots.</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span><span class="token expression"><span class="token punctuation">{</span></span></span>
	<span class="token comment">// JIT: Main isolate starts from the app snapshot, if any. Other isolates</span>
  <span class="token comment">// use the core libraries snapshot.</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建 isolate_group_data</span>
	<span class="token keyword">auto</span> isolate_group_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">IsolateGroupData</span><span class="token punctuation">(</span>
      script_uri<span class="token punctuation">,</span> packages_config<span class="token punctuation">,</span> app_snapshot<span class="token punctuation">,</span> isolate_run_app_snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// copy_parent_code 为 true 的话，这里的 kernel_buffer 为 NULL</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>kernel_buffer <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kernel_buffer_ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      isolate_group_data<span class="token operator">-&gt;</span><span class="token function">SetKernelBufferAlreadyOwned</span><span class="token punctuation">(</span>
          std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>kernel_buffer_ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> kernel_buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      isolate_group_data<span class="token operator">-&gt;</span><span class="token function">SetKernelBufferNewlyOwned</span><span class="token punctuation">(</span>kernel_buffer<span class="token punctuation">,</span>
                                                    kernel_buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

	Dart_Isolate isolate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  IsolateData<span class="token operator">*</span> isolate_data <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>DART_PRECOMPILED_RUNTIME<span class="token punctuation">)</span></span></span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isolate_run_app_snapshot <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>isolate_snapshot_data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">uint8_t</span><span class="token operator">*</span> platform_kernel_buffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    intptr_t platform_kernel_buffer_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dfe<span class="token punctuation">.</span><span class="token function">LoadPlatform</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>platform_kernel_buffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>platform_kernel_buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>platform_kernel_buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      platform_kernel_buffer <span class="token operator">=</span> kernel_buffer<span class="token punctuation">;</span>
      platform_kernel_buffer_size <span class="token operator">=</span> kernel_buffer_size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>platform_kernel_buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>EXCLUDE_CFE_AND_KERNEL_PLATFORM<span class="token punctuation">)</span></span></span>
      <span class="token function">FATAL</span><span class="token punctuation">(</span>
          <span class="token string">&quot;Binary built with --exclude-kernel-service. Cannot run&quot;</span>
          <span class="token string">&quot; from source.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">&quot;platform_program cannot be NULL.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM)</span></span>
    <span class="token punctuation">}</span>
    <span class="token comment">// TODO(sivachandra): When the platform program is unavailable, check if</span>
    <span class="token comment">// application kernel binary is self contained or an incremental binary.</span>
    <span class="token comment">// Isolate should be created only if it is a self contained kernel binary.</span>
    isolate_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">IsolateData</span><span class="token punctuation">(</span>isolate_group_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    isolate <span class="token operator">=</span> <span class="token function">Dart_CreateIsolateGroupFromKernel</span><span class="token punctuation">(</span>
        script_uri<span class="token punctuation">,</span> name<span class="token punctuation">,</span> platform_kernel_buffer<span class="token punctuation">,</span> platform_kernel_buffer_size<span class="token punctuation">,</span>
        flags<span class="token punctuation">,</span> isolate_group_data<span class="token punctuation">,</span> isolate_data<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    isolate_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">IsolateData</span><span class="token punctuation">(</span>isolate_group_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// Creates a new isolate. The new isolate becomes the current isolate.</span>
    isolate <span class="token operator">=</span> <span class="token function">Dart_CreateIsolateGroup</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> name<span class="token punctuation">,</span> isolate_snapshot_data<span class="token punctuation">,</span>
                                      isolate_snapshot_instructions<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
                                      isolate_group_data<span class="token punctuation">,</span> isolate_data<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token operator">*</span><span class="token operator">*</span>isolate_data <span class="token operator">=</span> <span class="token keyword">new</span> IsolateData<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>isolate_group_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Creates a new isolate. The new isolate becomes the current isolate.</span>
  <span class="token operator">*</span><span class="token operator">*</span>isolate <span class="token operator">=</span> Dart_CreateIsolateGroup<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> name<span class="token punctuation">,</span> isolate_snapshot_data<span class="token punctuation">,</span>
                                    isolate_snapshot_instructions<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
                                    <span class="token operator">*</span><span class="token operator">*</span>isolate_group_data<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>isolate_data<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(DART_PRECOMPILED_RUNTIME)</span></span>

  Dart_Isolate created_isolate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> isolate_data<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> isolate_group_data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token operator">*</span>created_isolate <span class="token operator">=</span> IsolateSetupHelper<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>
        isolate<span class="token punctuation">,</span> is_main_isolate<span class="token punctuation">,</span> script_uri<span class="token punctuation">,</span> packages_config<span class="token punctuation">,</span>
        isolate_run_app_snapshot<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> error<span class="token punctuation">,</span> exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int64_t</span> end <span class="token operator">=</span> <span class="token function">Dart_TimelineGetMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Dart_TimelineEvent</span><span class="token punctuation">(</span><span class="token string">&quot;CreateIsolateGroupAndSetupHelper&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span>
                     Dart_Timeline_Event_Duration<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> created_isolate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到，<code>CreateIsolateGroupAndSetupHelper</code>按照是 JIT 还是 AOT 的编译方式，有不同的获取数据的方式，但不管哪种方式，最后都执行了一下三步：</p><ul><li>创建<code>IsolateData* isolate_data</code> 使用<code>isolate_group_data</code>创建 IsolateData</li><li>创建<code>Dart_Isolate isolate</code> 创建<code>Dart_Isolate</code>，将<code>script_uri</code>，<code>isolate_data</code>，和<code>isolate_group_data</code>等绑定</li><li>创建并返回<code>Dart_Isolate created_isolate</code>包装<code>isolate</code> ，进行数据绑定，并将 isolate 标记为<code>runnable</code></li></ul><h6 id="dart-createisolategroup" tabindex="-1"><a class="header-anchor" href="#dart-createisolategroup" aria-hidden="true">#</a> Dart_CreateIsolateGroup</h6><p>这里分析一下**<code>Dart_CreateIsolateGroup</code>的过程：**</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// --&gt; runtime/vm/dart_api_impl.cc#L1371</span>

DART_EXPORT <span class="token class-name">Dart_Isolate</span>
<span class="token class-name">Dart_CreateIsolateGroup</span><span class="token punctuation">(</span><span class="token keyword">const</span> char<span class="token operator">*</span> script_uri<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> char<span class="token operator">*</span> name<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> uint8_t<span class="token operator">*</span> snapshot_data<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> uint8_t<span class="token operator">*</span> snapshot_instructions<span class="token punctuation">,</span>
                        <span class="token class-name">Dart_IsolateFlags</span><span class="token operator">*</span> flags<span class="token punctuation">,</span>
                        <span class="token keyword">void</span><span class="token operator">*</span> isolate_group_data<span class="token punctuation">,</span>
                        <span class="token keyword">void</span><span class="token operator">*</span> isolate_data<span class="token punctuation">,</span>
                        char<span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">API_TIMELINE_DURATION</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Dart_IsolateFlags</span> api_flags<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Isolate</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">FlagsInitialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>api_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flags <span class="token operator">=</span> <span class="token operator">&amp;</span>api_flags<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> char<span class="token operator">*</span> non_null_name <span class="token operator">=</span> name <span class="token operator">==</span> nullptr <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;isolate&quot;</span></span> <span class="token punctuation">:</span> name<span class="token punctuation">;</span>
  std<span class="token punctuation">:</span><span class="token punctuation">:</span>unique_ptr<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IsolateGroupSource</span><span class="token punctuation">&gt;</span></span> <span class="token function">source</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">IsolateGroupSource</span><span class="token punctuation">(</span>script_uri<span class="token punctuation">,</span> non_null_name<span class="token punctuation">,</span> snapshot_data<span class="token punctuation">,</span>
                             snapshot_instructions<span class="token punctuation">,</span> nullptr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建 Isolate Group</span>
  auto group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IsolateGroup</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span> isolate_group_data<span class="token punctuation">,</span> <span class="token operator">*</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建 Isolate Group 持有的 Heap，由所有在这个 Isolate Group 下的 isolate 共享</span>
  group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">CreateHeap</span><span class="token punctuation">(</span>
      <span class="token comment">/*is_vm_isolate=*/</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">IsServiceOrKernelIsolateName</span><span class="token punctuation">(</span>non_null_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">IsolateGroup</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">RegisterIsolateGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 根据刚刚创建的 Isolate Group 创建 Isolate</span>
  <span class="token class-name">Dart_Isolate</span> isolate <span class="token operator">=</span> <span class="token class-name">CreateIsolate</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token comment">/*is_new_group=*/</span><span class="token boolean">true</span><span class="token punctuation">,</span>
                                       non_null_name<span class="token punctuation">,</span> isolate_data<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isolate <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    group<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_initial_spawn_successful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> isolate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="run-isolate-child" tabindex="-1"><a class="header-anchor" href="#run-isolate-child" aria-hidden="true">#</a> Run(Isolate* child)</h4><p>在上面的分析中，我们注意到，无论是<code>RunHeavyweight(const char* name)</code>还是<code>RunLightweight(const char* name)</code>方法，最后在创建了新的 isolate 之后，都执行了<code>Run(Isolate* child)</code>方法，在这里正式启动了 isolate：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

<span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span>Isolate<span class="token operator">*</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EnsureIsRunnable</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Dart_ShutdownIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    state_<span class="token operator">-&gt;</span><span class="token function">set_isolate</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state_<span class="token operator">-&gt;</span><span class="token function">origin_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// origin_id is set to parent isolate main port id when spawning via</span>
      <span class="token comment">// spawnFunction.</span>
      child<span class="token operator">-&gt;</span><span class="token function">set_origin_id</span><span class="token punctuation">(</span>state_<span class="token operator">-&gt;</span><span class="token function">origin_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
			<span class="token keyword">auto</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// TransitionNativeToVM is used to transition the safepoint state of a</span>
      <span class="token comment">// thread from &quot;running native code&quot; to &quot;running vm code&quot; and ensures</span>
      <span class="token comment">// that the state is reverted back to &quot;running native code&quot; when</span>
      <span class="token comment">// exiting the scope/frame.</span>
      TransitionNativeToVM <span class="token function">transition</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Create an empty zone and set is at the current zone for the Thread.</span>
      StackZone <span class="token function">zone</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// The class HandleScope is used to start a new handles scope in the</span>
      <span class="token comment">//  code.</span>
      HandleScope <span class="token function">hs</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

      success <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>EnqueueEntrypointInvocationAndNotifySpawner<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
      <span class="token function">Dart_ShutdownIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// All preconditions are met for this to always succeed.</span>
    <span class="token keyword">char</span><span class="token operator">*</span> error <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
		<span class="token comment">// Lets the VM run message processing for the isolate.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">*</span>Dart_RunLoopAsync<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>state_<span class="token operator">-&gt;</span><span class="token function">errors_are_fatal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state_<span class="token operator">-&gt;</span><span class="token function">on_error_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                           state_<span class="token operator">-&gt;</span><span class="token function">on_exit_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">&quot;Dart_RunLoopAsync() failed: %s. Please file a Dart VM bug report.&quot;</span><span class="token punctuation">,</span>
            error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里只是做了一些环境准备，然后在<code>EnqueueEntrypointInvocationAndNotifySpawner</code>方法中将 isolate 要运行的所有东西都准备好，然后再在<code>Dart_RunLoopAsync</code>方法中正式开始 isolate 处理 event queue.</p><p><strong>EnqueueEntrypointInvocationAndNotifySpawner</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\lib\\isolate.cc</span>

<span class="token keyword">bool</span> <span class="token function">EnqueueEntrypointInvocationAndNotifySpawner</span><span class="token punctuation">(</span>Thread<span class="token operator">*</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> isolate <span class="token operator">=</span> thread<span class="token operator">-&gt;</span><span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> zone <span class="token operator">=</span> thread<span class="token operator">-&gt;</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> is_spawn_uri <span class="token operator">=</span> state_<span class="token operator">-&gt;</span><span class="token function">is_spawn_uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Step 1) Resolve the entrypoint function.</span>
    <span class="token comment">// 查找 isolate 开始运行的第一个方法，比如 Isolate.spawn 的 spawn 或者 Isolate.spawnUri 的 main 方法</span>
    <span class="token keyword">auto</span><span class="token operator">&amp;</span> entrypoint_closure <span class="token operator">=</span> <span class="token class-name">Closure</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state_<span class="token operator">-&gt;</span><span class="token function">closure_tuple_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> result <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>
          zone<span class="token punctuation">,</span>
          <span class="token function">ReadObjectGraphCopyMessage</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> state_<span class="token operator">-&gt;</span><span class="token function">closure_tuple_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ReportError</span><span class="token punctuation">(</span>
            <span class="token string">&quot;Failed to deserialize the passed entrypoint to the new isolate.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      entrypoint_closure <span class="token operator">=</span> <span class="token class-name">Closure</span><span class="token double-colon punctuation">::</span><span class="token function">RawCast</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> result <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> state_<span class="token operator">-&gt;</span><span class="token function">ResolveFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ASSERT</span><span class="token punctuation">(</span>is_spawn_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ReportError</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to resolve entrypoint function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">ASSERT</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">auto</span><span class="token operator">&amp;</span> func <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">Cast</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      func <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">ImplicitClosureFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      entrypoint_closure <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">ImplicitStaticClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Step 2) Enqueue delayed invocation of entrypoint callback.</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> args_obj <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> state_<span class="token operator">-&gt;</span><span class="token function">BuildArgs</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args_obj<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ReportError</span><span class="token punctuation">(</span>
          <span class="token string">&quot;Failed to deserialize the passed arguments to the new isolate.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>args_obj<span class="token punctuation">.</span><span class="token function">IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> args_obj<span class="token punctuation">.</span><span class="token function">IsInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> message_obj <span class="token operator">=</span>
        <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> state_<span class="token operator">-&gt;</span><span class="token function">BuildMessage</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>message_obj<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ReportError</span><span class="token punctuation">(</span>
          <span class="token string">&quot;Failed to deserialize the passed arguments to the new isolate.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>message_obj<span class="token punctuation">.</span><span class="token function">IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> message_obj<span class="token punctuation">.</span><span class="token function">IsInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析参数，分别是 isolate 初始运行方法，参数 args、messgae、是否 spawn_uri</span>
    <span class="token keyword">const</span> Array<span class="token operator">&amp;</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> entrypoint_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> args_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> message_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> is_spawn_uri <span class="token operator">?</span> <span class="token class-name">Bool</span><span class="token double-colon punctuation">::</span><span class="token function">True</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Bool</span><span class="token double-colon punctuation">::</span><span class="token function">False</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> lib <span class="token operator">=</span> <span class="token class-name">Library</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">Library</span><span class="token double-colon punctuation">::</span><span class="token function">IsolateLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> entry_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;_startIsolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> entry_point <span class="token operator">=</span>
        <span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> lib<span class="token punctuation">.</span><span class="token function">LookupLocalFunction</span><span class="token punctuation">(</span>entry_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>entry_point<span class="token punctuation">.</span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>entry_point<span class="token punctuation">.</span><span class="token function">IsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> result <span class="token operator">=</span>
        <span class="token class-name">Object</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">DartEntry</span><span class="token double-colon punctuation">::</span><span class="token function">InvokeFunction</span><span class="token punctuation">(</span>entry_point<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">IsError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ReportError</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to enqueue delayed entrypoint invocation.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Step 3) Pause the isolate if required &amp; Notify parent isolate about</span>
    <span class="token comment">// isolate creation.</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> capabilities <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span><span class="token operator">&amp;</span> capability <span class="token operator">=</span> <span class="token class-name">Capability</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    capability <span class="token operator">=</span> <span class="token class-name">Capability</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-&gt;</span><span class="token function">pause_capability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    capabilities<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> capability<span class="token punctuation">)</span><span class="token punctuation">;</span>
    capability <span class="token operator">=</span> <span class="token class-name">Capability</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-&gt;</span><span class="token function">terminate_capability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    capabilities<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> capability<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> send_port <span class="token operator">=</span>
        <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token operator">-&gt;</span><span class="token function">main_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> message <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    message<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> send_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    message<span class="token punctuation">.</span><span class="token function">SetAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state_<span class="token operator">-&gt;</span><span class="token function">paused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      capability <span class="token operator">^=</span> capabilities<span class="token punctuation">.</span><span class="token function">At</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">bool</span> added <span class="token operator">=</span> isolate<span class="token operator">-&gt;</span><span class="token function">AddResumeCapability</span><span class="token punctuation">(</span>capability<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ASSERT</span><span class="token punctuation">(</span>added<span class="token punctuation">)</span><span class="token punctuation">;</span>
      isolate<span class="token operator">-&gt;</span><span class="token function">message_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">increment_paused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// If parent isolate died, we ignore the fact that we cannot notify it.</span>
      <span class="token comment">// 创建一个新的 Message 并将其压入 Isolate 的父 Isolate 对应的 MessageHandler 的 event queue 中</span>
      <span class="token class-name">PortMap</span><span class="token double-colon punctuation">::</span><span class="token function">PostMessage</span><span class="token punctuation">(</span><span class="token function">WriteMessage</span><span class="token punctuation">(</span><span class="token comment">/* can_send_any_object */</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                                        <span class="token comment">/* same_group */</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span>
                                        state_<span class="token operator">-&gt;</span><span class="token function">parent_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                        Message<span class="token double-colon punctuation">::</span>kNormalPriority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要做了 3 件事：</p><ul><li>查找 isolate 开始运行的第一个方法<code>entrypoint</code>，比如<code>Isolate.spawn</code>的<code>entrypoint</code>或者<code>Isolate.spawnUri</code>的<code>main</code>方法</li><li>解析参数，分别是 isolate 初始运行方法，参数<code>args</code>、<code>messgae</code>、是否<code>spawn_uri</code>等等，将其与上一步找到的<code>entrypoint</code>结合</li><li>（如果需要的话暂停创建好的 isolate），并通知 isolate 的父 isolate 当前 isolate 创建成功（附带当前 isolate 的<code>send_port</code>）</li></ul><p>至此，Isolate 的创建工作已经完成，在<code>Dart_RunLoopAsync</code>开始 isolate 处理消息：</p><p><strong>Dart_RunLoopAsync</strong></p><p>在这里主要是开始处理 event loop。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt;  runtime\\vm\\dart_api_impl.cc</span>

DART_EXPORT <span class="token keyword">bool</span> <span class="token function">Dart_RunLoopAsync</span><span class="token punctuation">(</span><span class="token keyword">bool</span> errors_are_fatal<span class="token punctuation">,</span>
                                   Dart_Port on_error_port<span class="token punctuation">,</span>
                                   Dart_Port on_exit_port<span class="token punctuation">,</span>
                                   <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> isolate <span class="token operator">=</span> thread<span class="token operator">-&gt;</span><span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_ISOLATE</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">api_top_scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token double-colon punctuation">::</span><span class="token function">StrDup</span><span class="token punctuation">(</span><span class="token string">&quot;There must not be an active api scope.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isolate<span class="token operator">-&gt;</span><span class="token function">is_runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> error_msg <span class="token operator">=</span> isolate<span class="token operator">-&gt;</span><span class="token function">MakeRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error_msg <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token double-colon punctuation">::</span><span class="token function">StrDup</span><span class="token punctuation">(</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  isolate<span class="token operator">-&gt;</span><span class="token function">SetErrorsFatal</span><span class="token punctuation">(</span>errors_are_fatal<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>on_error_port <span class="token operator">!=</span> ILLEGAL_PORT <span class="token operator">||</span> on_exit_port <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TransitionNativeToVM <span class="token function">transition</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    StackZone <span class="token function">zone</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>on_error_port <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> port <span class="token operator">=</span>
          <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>on_error_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      isolate<span class="token operator">-&gt;</span><span class="token function">AddErrorListener</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>on_exit_port <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> port <span class="token operator">=</span>
          <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SendPort</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>on_exit_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      isolate<span class="token operator">-&gt;</span><span class="token function">AddExitListener</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token double-colon punctuation">::</span><span class="token function">null_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">Dart_ExitIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span>isolate<span class="token operator">-&gt;</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\isolate.cc</span>
<span class="token keyword">void</span> <span class="token class-name">Isolate</span><span class="token double-colon punctuation">::</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">message_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">thread_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> ShutdownIsolate<span class="token punctuation">,</span>
                         <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uword<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Isolate::Run()</code>实际上是开启了处理消息队列：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt;</span>

<span class="token comment">// Runs this message handler on the thread pool.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Before processing messages, the optional StartFunction is run.</span>
  <span class="token comment">//</span>
  <span class="token comment">// A message handler will run until it terminates either normally or</span>
  <span class="token comment">// abnormally.  Normal termination occurs when the message handler</span>
  <span class="token comment">// no longer has any live ports.  Abnormal termination occurs when</span>
  <span class="token comment">// HandleMessage() indicates that an error has occurred during</span>
  <span class="token comment">// message processing.</span>

  <span class="token comment">// Returns false if the handler terminated abnormally, otherwise it</span>
  <span class="token comment">// returns true.</span>
<span class="token keyword">bool</span> <span class="token class-name">MessageHandler</span><span class="token double-colon punctuation">::</span><span class="token function">Run</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">,</span>
                         StartCallback start_callback<span class="token punctuation">,</span>
                         EndCallback end_callback<span class="token punctuation">,</span>
                         CallbackData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MonitorLocker <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG_trace_isolates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
        <span class="token string">&quot;[+] Starting message handler:\\n&quot;</span>
        <span class="token string">&quot;\\thandler:    %s\\n&quot;</span><span class="token punctuation">,</span>
        <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>pool_ <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>delete_me_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool_ <span class="token operator">=</span> pool<span class="token punctuation">;</span>
  start_callback_ <span class="token operator">=</span> start_callback<span class="token punctuation">;</span>
  end_callback_ <span class="token operator">=</span> end_callback<span class="token punctuation">;</span>
  callback_data_ <span class="token operator">=</span> data<span class="token punctuation">;</span>
  task_running_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> result <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>pool_<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Run</span><span class="token generic class-name"><span class="token operator">&lt;</span>MessageHandlerTask<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pool_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    start_callback_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    end_callback_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    callback_data_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\thread_pool.h</span>
<span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>
	<span class="token keyword">bool</span> <span class="token function">Run</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">RunImpl</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">unique_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Task<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>

<span class="token keyword">bool</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token function">RunImpl</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Task<span class="token operator">&gt;</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Worker<span class="token operator">*</span> new_worker <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    MonitorLocker <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool_monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shutting_down_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
		<span class="token comment">// 从线程池中获取 task，如果有空闲的/达到最大数量就尝试复用（此时这里返回 null）</span>
		<span class="token comment">// 否则创建新的并返回</span>
    new_worker <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>ScheduleTaskLocked<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>new_worker <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建一个新的 Worker 在新的系统线程运行 task</span>
    new_worker<span class="token operator">-&gt;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">StartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> ThreadPool<span class="token double-colon punctuation">::</span><span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">StartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建一个新的系统线程，运行指定的代码，</span>
	<span class="token comment">//  android 的实现在 runtime\\vm\\os_thread_android.cc</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">OSThread</span><span class="token double-colon punctuation">::</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token string">&quot;DartWorker&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span>Worker<span class="token double-colon punctuation">::</span>Main<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span>
                               <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uword<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">FATAL1</span><span class="token punctuation">(</span><span class="token string">&quot;Could not start worker thread: result = %d.&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过<code>ThreadPool::ScheduleTaskLocked</code>方法获取<code>new_worker</code>：</p><ul><li>如果已有的 worker 有空闲的或者已经达到最大数目了，就等待已有的 worker 执行任务</li><li>否则就创建新的 worker，并在新的线程运行</li></ul><p>在获取到 worker 之后，就执行<code>MessageHandlerTask</code>（见下文详细分析）。</p><p>我们主要关注 3 点：</p><ul><li><code>ScheduleTaskLocked</code> 分配 Worker</li><li><code>OSThread::Start</code>中使用<code>&amp;Worker::Main</code> 在新系统线程开启 Worker 循环</li><li><code>MessageHandlerTask</code> 执行具体的消息分发内容</li></ul><h5 id="scheduletasklocked" tabindex="-1"><a class="header-anchor" href="#scheduletasklocked" aria-hidden="true">#</a> <strong>ScheduleTaskLocked</strong></h5><p>先详细看一下获取<code>new_worker</code>的<code>ThreadPool::ScheduleTaskLocked</code>方法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>

ThreadPool<span class="token double-colon punctuation">::</span>Worker<span class="token operator">*</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token function">ScheduleTaskLocked</span><span class="token punctuation">(</span>MonitorLocker<span class="token operator">*</span> ml<span class="token punctuation">,</span>
                                                   std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Task<span class="token operator">&gt;</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Enqueue the new task.</span>
  tasks_<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pending_tasks_<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>pending_tasks_ <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Notify existing idle worker (if available).</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count_idle_ <span class="token operator">&gt;=</span> pending_tasks_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>idle_workers_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ml<span class="token operator">-&gt;</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// If we have maxed out the number of threads running, we will not start a</span>
  <span class="token comment">// new one.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max_pool_size_ <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>count_idle_ <span class="token operator">+</span> count_running_<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> max_pool_size_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idle_workers_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ml<span class="token operator">-&gt;</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Otherwise start a new worker.</span>
  <span class="token keyword">auto</span> new_worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  idle_workers_<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>new_worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
  count_idle_<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> new_worker<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的逻辑是：</p><p>将当前任务加入到<code>tasks_</code>队列中。</p><ul><li>如果空闲<code>count_idle_</code> 的 Worker 比等待中的任务数<code>pending_tasks_</code>多，那就发送通知，使用已有的 Worker 处理任务。</li><li>如果当前 Worker 数量已经最大了，那就将等待中的任务数 pending<em>tasks</em> 加一，等待有空闲的 Worker 处理任务。</li><li>否则，就新建一个 Worker（会对应创建一个新的系统线程）来处理任务。</li></ul><h5 id="worker-main" tabindex="-1"><a class="header-anchor" href="#worker-main" aria-hidden="true">#</a> &amp;<strong>Worker::Main</strong></h5><p>在<code>ThreadPool::RunImpl(std::unique_ptr&lt;Task&gt; task)</code>这里，StartThread 的第二个参数，**<code>&amp;Worker::Main</code>**启动了一个循环，不断的在任务队列<code>tasks_</code>中取出消息并执行：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\vm\\thread_pool.cc</span>

ThreadPool<span class="token double-colon punctuation">::</span><span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">Main</span><span class="token punctuation">(</span>uword args<span class="token punctuation">)</span><span class="token punctuation">{</span>
Worker<span class="token operator">*</span> worker <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Worker<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ThreadPool<span class="token operator">*</span> pool <span class="token operator">=</span> worker<span class="token operator">-&gt;</span>pool_<span class="token punctuation">;</span>

pool<span class="token operator">-&gt;</span><span class="token function">WorkerLoop</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">ThreadPool</span><span class="token double-colon punctuation">::</span><span class="token function">WorkerLoop</span><span class="token punctuation">(</span>Worker<span class="token operator">*</span> worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  WorkerList dead_workers_to_join<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MonitorLocker <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool_monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// worker 会从 task_取出一个 task 并运行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tasks_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">IdleToRunningLocked</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tasks_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Task<span class="token operator">&gt;</span> <span class="token function">task</span><span class="token punctuation">(</span>tasks_<span class="token punctuation">.</span><span class="token function">RemoveFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pending_tasks_<span class="token operator">--</span><span class="token punctuation">;</span>
        MonitorLeaveScope <span class="token function">mls</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token operator">*</span>task<span class="token operator">-&gt;</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
        <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        task<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">RunningToIdleLocked</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>running_workers_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ASSERT</span><span class="token punctuation">(</span>tasks_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">OnEnterIdleLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tasks_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>shutting_down_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ObtainDeadWorkersLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dead_workers_to_join<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">IdleToDeadLocked</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Sleep until we get a new task, we time out or we&#39;re shutdown.</span>
    <span class="token keyword">const</span> <span class="token keyword">int64_t</span> idle_start <span class="token operator">=</span> <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">GetCurrentMonotonicMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">auto</span> result <span class="token operator">=</span> ml<span class="token punctuation">.</span><span class="token function">WaitMicros</span><span class="token punctuation">(</span><span class="token function">ComputeTimeout</span><span class="token punctuation">(</span>idle_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// We have to drain all pending tasks.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tasks_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>shutting_down_ <span class="token operator">||</span> result <span class="token operator">==</span> Monitor<span class="token double-colon punctuation">::</span>kTimedOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ObtainDeadWorkersLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dead_workers_to_join<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">IdleToDeadLocked</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Before we transitioned to dead we obtained the list of previously died dead</span>
  <span class="token comment">// workers, which we join here. Since every death of a worker will join</span>
  <span class="token comment">// previously died workers, we keep the pending non-joined [dead_workers_] to</span>
  <span class="token comment">// effectively 1.</span>
  <span class="token function">JoinDeadWorkersLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dead_workers_to_join<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MessageHandlerTask</strong></p><p>无论是哪种 Worker，最后都是执行的<code>MessageHandlerTask</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// -&gt; runtime\\vm\\message_handler.cc</span>

<span class="token keyword">class</span> <span class="token class-name">MessageHandlerTask</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> ThreadPool<span class="token double-colon punctuation">::</span><span class="token class-name">Task</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">explicit</span> <span class="token function">MessageHandlerTask</span><span class="token punctuation">(</span>MessageHandler<span class="token operator">*</span> handler<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">handler_</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">ASSERT</span><span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">ASSERT</span><span class="token punctuation">(</span>handler_ <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
handler_<span class="token operator">-&gt;</span><span class="token function">TaskCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MessageHandler</span><span class="token double-colon punctuation">::</span><span class="token function">TaskCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  MessageStatus status <span class="token operator">=</span> kOK<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> run_end_callback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> delete_me <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  EndCallback end_callback <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  CallbackData callback_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// We will occasionally release and reacquire this monitor in this</span>
    <span class="token comment">// function. Whenever we reacquire the monitor we *must* process</span>
    <span class="token comment">// all pending OOB messages, or we may miss a request for vm</span>
    <span class="token comment">// shutdown.</span>
    MonitorLocker <span class="token function">ml</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>monitor_<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This method is running on the message handler task. Which means no</span>
    <span class="token comment">// other message handler tasks will be started until this one sets</span>
    <span class="token comment">// [task_running_] to false.</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>task_running_<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span></span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ShouldPauseOnStart</span><span class="token punctuation">(</span>kOK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_paused_on_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PausedOnStartLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// More messages may have come in before we (re)acquired the monitor.</span>
      status <span class="token operator">=</span> <span class="token function">HandleMessages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ShouldPauseOnStart</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Still paused.</span>
        <span class="token function">ASSERT</span><span class="token punctuation">(</span>oob_queue_<span class="token operator">-&gt;</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// No task in queue.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">PausedOnStartLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_paused_on_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      status <span class="token operator">=</span> <span class="token function">HandleMessages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ShouldPauseOnExit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Still paused.</span>
        <span class="token function">ASSERT</span><span class="token punctuation">(</span>oob_queue_<span class="token operator">-&gt;</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// No task in queue.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">PausedOnExitLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(PRODUCT)</span></span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> kOK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>start_callback_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Initialize the message handler by running its start function,</span>
        <span class="token comment">// if we have one.  For an isolate, this will run the isolate&#39;s</span>
        <span class="token comment">// main() function.</span>
        <span class="token comment">//</span>
        <span class="token comment">// Release the monitor_ temporarily while we call the start callback.</span>
        ml<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        status <span class="token operator">=</span> <span class="token function">start_callback_</span><span class="token punctuation">(</span>callback_data_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token class-name">Isolate</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        start_callback_ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        ml<span class="token punctuation">.</span><span class="token function">Enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Handle any pending messages for this message handler.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> kShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status <span class="token operator">=</span> <span class="token function">HandleMessages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> kOK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// The isolate exits when it encounters an error or when it no</span>
    <span class="token comment">// longer has live ports.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> kOK <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">HasLivePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>PRODUCT<span class="token punctuation">)</span></span></span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ShouldPauseOnExit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG_trace_service_pause_events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
              <span class="token string">&quot;Isolate %s paused before exiting. &quot;</span>
              <span class="token string">&quot;Use the Observatory to release it.\\n&quot;</span><span class="token punctuation">,</span>
              <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">PausedOnExitLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// More messages may have come in while we released the monitor.</span>
        <span class="token operator">*</span><span class="token operator">*</span>status <span class="token operator">=</span> <span class="token function">HandleMessages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ShouldPauseOnExit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// Still paused.</span>
          <span class="token function">ASSERT</span><span class="token punctuation">(</span>oob_queue_<span class="token operator">-&gt;</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// No task in queue.</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">PausedOnExitLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ml<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(PRODUCT)</span></span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG_trace_isolates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> kOK <span class="token operator">&amp;&amp;</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> Error<span class="token operator">&amp;</span> error <span class="token operator">=</span> <span class="token class-name">Error</span><span class="token double-colon punctuation">::</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sticky_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
              <span class="token string">&quot;[-] Stopping message handler (%s):\\n&quot;</span>
              <span class="token string">&quot;\\thandler:    %s\\n&quot;</span>
              <span class="token string">&quot;\\terror:    %s\\n&quot;</span><span class="token punctuation">,</span>
              <span class="token function">MessageStatusString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">ToCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token class-name">OS</span><span class="token double-colon punctuation">::</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
              <span class="token string">&quot;[-] Stopping message handler (%s):\\n&quot;</span>
              <span class="token string">&quot;\\thandler:    %s\\n&quot;</span><span class="token punctuation">,</span>
              <span class="token function">MessageStatusString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      pool_ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      <span class="token comment">// Decide if we have a callback before releasing the monitor.</span>
      end_callback <span class="token operator">=</span> end_callback_<span class="token punctuation">;</span>
      callback_data <span class="token operator">=</span> callback_data_<span class="token punctuation">;</span>
      run_end_callback <span class="token operator">=</span> end_callback_ <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      delete_me <span class="token operator">=</span> delete_me_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Clear task_running_ last.  This allows other tasks to potentially start</span>
    <span class="token comment">// for this message handler.</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>oob_queue_<span class="token operator">-&gt;</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    task_running_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The handler may have been deleted by another thread here if it is a native</span>
  <span class="token comment">// message handler.</span>

  <span class="token comment">// Message handlers either use delete_me or end_callback but not both.</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token operator">!</span>delete_me <span class="token operator">||</span> <span class="token operator">!</span>run_end_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>run_end_callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>end_callback <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">end_callback</span><span class="token punctuation">(</span>callback_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The handler may have been deleted after this point.</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>delete_me<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这里执行了<code>MessageHandler::HandleMessages</code>方法，来处理消息：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// -&gt; runtime\\vm\\message_handler.cc</span>

<span class="token literal-property property">MessageHandler</span><span class="token operator">:</span><span class="token operator">:</span>MessageStatus MessageHandler<span class="token operator">:</span><span class="token operator">:</span><span class="token function">HandleMessages</span><span class="token punctuation">(</span>
    <span class="token parameter">MonitorLocker<span class="token operator">*</span> ml<span class="token punctuation">,</span>
    bool allow_normal_messages<span class="token punctuation">,</span>
    bool allow_multiple_normal_messages</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">ASSERT</span><span class="token punctuation">(</span>monitor_<span class="token punctuation">.</span><span class="token function">IsOwnedByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Scheduling of the mutator thread during the isolate start can cause this</span>
  <span class="token comment">// thread to safepoint.</span>
  <span class="token comment">// We want to avoid holding the message handler monitor during the safepoint</span>
  <span class="token comment">// operation to avoid possible deadlocks, which can occur if other threads are</span>
  <span class="token comment">// sending messages to this message handler.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If isolate() returns nullptr [StartIsolateScope] does nothing.</span>
  ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  StartIsolateScope <span class="token function">start_isolate</span><span class="token punctuation">(</span><span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  auto idle_time_handler <span class="token operator">=</span>
      <span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> nullptr <span class="token operator">?</span> <span class="token function">isolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">idle_time_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> nullptr<span class="token punctuation">;</span>

  MessageStatus max_status <span class="token operator">=</span> kOK<span class="token punctuation">;</span>
  <span class="token literal-property property">Message</span><span class="token operator">:</span><span class="token operator">:</span>Priority min_priority <span class="token operator">=</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>allow_normal_messages <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">paused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> Message<span class="token operator">:</span><span class="token operator">:</span>kNormalPriority
                                            <span class="token operator">:</span> Message<span class="token operator">:</span><span class="token operator">:</span>kOOBPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token literal-property property">std</span><span class="token operator">:</span><span class="token operator">:</span>unique_ptr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> **message = DequeueMessage(min_priority);**
  while (message != nullptr) </span><span class="token punctuation">{</span>
    intptr_t message_len <span class="token operator">=</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG_trace_isolates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">OS</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
          <span class="token string">&quot;[&lt;] Handling message:\\n&quot;</span>
          <span class="token string">&quot;\\tlen:        %&quot;</span> Pd
          <span class="token string">&quot;\\n&quot;</span>
          <span class="token string">&quot;\\thandler:    %s\\n&quot;</span>
          <span class="token string">&quot;\\tport:       %&quot;</span> Pd64 <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>
          message_len<span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">dest_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Release the monitor_ temporarily while we handle the message.</span>
    <span class="token comment">// The monitor was acquired in MessageHandler::TaskCallback().</span>
    ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token literal-property property">Message</span><span class="token operator">:</span><span class="token operator">:</span>Priority saved_priority <span class="token operator">=</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Dart_Port saved_dest_port <span class="token operator">=</span> message<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">dest_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    MessageStatus status <span class="token operator">=</span> kOK<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
      DisableIdleTimerScope <span class="token function">disable_idle_timer</span><span class="token punctuation">(</span>idle_time_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
      status <span class="token operator">=</span> <span class="token function">HandleMessage</span><span class="token punctuation">(</span>std<span class="token operator">:</span><span class="token operator">:</span><span class="token function">move</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">&gt;</span> max_status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max_status <span class="token operator">=</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ml<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG_trace_isolates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">OS</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">PrintErr</span><span class="token punctuation">(</span>
          <span class="token string">&quot;[.] Message handled (%s):\\n&quot;</span>
          <span class="token string">&quot;\\tlen:        %&quot;</span> Pd
          <span class="token string">&quot;\\n&quot;</span>
          <span class="token string">&quot;\\thandler:    %s\\n&quot;</span>
          <span class="token string">&quot;\\tport:       %&quot;</span> Pd64 <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>
          <span class="token function">MessageStatusString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> message_len<span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> saved_dest_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// If we are shutting down, do not process any more messages.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> kShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">ClearOOBQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Remember time since the last message. Don&#39;t consider OOB messages so</span>
    <span class="token comment">// using Observatory doesn&#39;t trigger additional idle tasks.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FLAG_idle_timeout_micros <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>saved_priority <span class="token operator">==</span> Message<span class="token operator">:</span><span class="token operator">:</span>kNormalPriority<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>idle_time_handler <span class="token operator">!=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        idle_time_handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">UpdateStartIdleTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Some callers want to process only one normal message and then quit. At</span>
    <span class="token comment">// the same time it is OK to process multiple OOB messages.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>saved_priority <span class="token operator">==</span> Message<span class="token operator">:</span><span class="token operator">:</span>kNormalPriority<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>allow_multiple_normal_messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// We processed one normal message.  Allow no more.</span>
      allow_normal_messages <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Reevaluate the minimum allowable priority.  The paused state</span>
    <span class="token comment">// may have changed as part of handling the message.  We may also</span>
    <span class="token comment">// have encountered an error during message processing.</span>
    <span class="token comment">//</span>
    <span class="token comment">// Even if we encounter an error, we still process pending OOB</span>
    <span class="token comment">// messages so that we don&#39;t lose the message notification.</span>
    min_priority <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max_status <span class="token operator">==</span> kOK<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> allow_normal_messages <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">paused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token operator">?</span> Message<span class="token operator">:</span><span class="token operator">:</span>kNormalPriority
                        <span class="token operator">:</span> Message<span class="token operator">:</span><span class="token operator">:</span>kOOBPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
    message <span class="token operator">=</span> <span class="token function">DequeueMessage</span><span class="token punctuation">(</span>min_priority<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
  return max_status;
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MessageHandler::DequeueMessage</code>则是按照优先级，依次从<code>oob_queue_</code>和<code>queue_</code>中获取消息：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// -&gt; runtime\\vm\\message_handler.cc</span>

<span class="token literal-property property">std</span><span class="token operator">:</span><span class="token operator">:</span>unique_ptr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> MessageHandler::DequeueMessage(
    Message::Priority min_priority) </span><span class="token punctuation">{</span>
  <span class="token comment">// TODO(turnidge): Add assert that monitor_ is held here.</span>
  <span class="token literal-property property">std</span><span class="token operator">:</span><span class="token operator">:</span>unique_ptr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> message = oob_queue_-&gt;Dequeue();
  if ((message == nullptr) &amp;&amp; (min_priority &lt; Message::kOOBPriority)) </span><span class="token punctuation">{</span>
    message <span class="token operator">=</span> queue_<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
  return message;
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>oob_queue_</code>和<code>queue_</code> 的区别如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// -&gt;</span>

<span class="token keyword">class</span> <span class="token class-name">MessageHandler</span> <span class="token punctuation">{</span>
	MessageQueue<span class="token operator">*</span> queue_<span class="token punctuation">;</span>
  MessageQueue<span class="token operator">*</span> oob_queue_<span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\vm\\message.h</span>

<span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
	<span class="token comment">// A message processed at any interrupt point (stack overflow check) instead</span>
  <span class="token comment">// of at the top of the message loop. Control messages from dart:isolate or</span>
  <span class="token comment">// vm-service requests.</span>
  bool <span class="token function">IsOOB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> priority_ <span class="token operator">==</span> Message<span class="token operator">:</span><span class="token operator">:</span>kOOBPriority<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里消息处理的步骤也启动了。</p><p>总结一下，<code>Dart_RunLoopAsync</code>的主要功能是触发 isolate 的<code>message_handler</code>处理消息分发：</p><p><code>Dart_RunLoopAsync</code> → <code>Isolate::Run()</code> → <code>message_handler()-&gt;Run()</code> → <strong>pool_-&gt;</strong><code>Run&lt;MessageHandlerTask&gt;</code> <strong>→</strong> <code>ThreadPool::RunImpl</code></p><p>在<code>ThreadPool::RunImpl(std::unique_ptr&lt;Task&gt; task)</code>这里主要触发了 2 步：</p><ul><li><code>ScheduleTaskLocked</code>获取到<code>new_worker</code></li><li><code>new_worker</code>调用<code>ThreadPool::Worker::StartThread()</code>方法开启循环</li></ul><p>然后根据是否创建了<code>new_worker</code>有两种情况：</p><ul><li>有<code>new_worker</code>，使用在<code>OSThread::Start</code>方法中创建了一个新的系统线程，执行<code>ThreadPool::Worker::Main</code>（这个方法的主要作用使用<code>new_worker</code>从线程池中的取出任务执行）</li><li>没有<code>new_worker</code>，那么等待已有的 Worker 空闲时执行任务</li></ul><p>无论如何，这里的 Worker 要执行的任务都是在<code>MessageHandler::Run</code>方法中指定的<code>MessageHandlerTask</code> ，而这个任务的内容便是开启<code>MessageHandler::HandleMessages</code> 方法，按照优先级不断的依次从<code>oob_queue_</code>和<code>queue_</code>中获取消息并处理。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="https://jixiaoyong.github.io/images/Isolate_spawn_spawnuri_dart_and_native.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Isolate 是 Dart 代码运行的地方，拥有独立的 event loop，和全局变量，在自己单独的线程运行。</p><p>Isolate.spawn 默认会创建在同一个 IsolateGroup 中的 Isolate，他们之间共享 Heap（这里会发生 GC）和一个线程池。</p><p>Isolate.spawnUri 会从制定的 Uri 中创建一个新的 IsolateGroup 和对应的 Isolate，并执行 Uri 中的 main 方法。</p><p>Isolate 内部维持一个 Event Loop。</p>`,158);function S(T,E){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",k,[s("Isolate"),t(a)]),s(", an isolated Dart execution context.")]),n("p",null,[s("All Dart code runs in an isolate, and "),d,s(". Different isolates can communicate by "),m,s(" (see "),n("a",v,[s("ReceivePort"),t(a)]),s(", "),n("a",b,[s("SendPort"),t(a)]),s(").")]),n("blockquote",null,[n("p",null,[s("In Dart an isolate has its own event loop, its own global fields, can run in parallel with other isolates and have their own live-cycle."),g,s(" — "),n("a",_,[s("https://github.com/dart-lang/sdk/issues/36097#issuecomment-746510375"),t(a)])])]),f,n("figure",null,[w,n("figcaption",null,[n("a",h,[s("https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly"),t(a)])])]),n("p",null,[n("a",y,[s("https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly"),t(a)])]),I])}const R=p(i,[["render",S],["__file","a951661c.html.vue"]]);export{R as default};
