import{_ as o,N as i,O as c,P as n,W as e,S as a,a6 as t,C as l}from"./framework-656811b8.js";const r={},p=t(`<p>Android中绘制文字的方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted
     * based on the Align setting in the paint.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">text</span> The text to be drawn
     * <span class="token keyword">@param</span> <span class="token parameter">x</span> The x-coordinate of the origin of the text being drawn
     * <span class="token keyword">@param</span> <span class="token parameter">y</span> The y-coordinate of the baseline of the text being drawn
     * <span class="token keyword">@param</span> <span class="token parameter">paint</span> The paint used for the text (e.g. color, size, style)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Paint</span> paint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>y</code>是<strong>文字baseline的y坐标</strong>。</p>`,3),d=n("code",null,"Paint.FontMetrics",-1),u={href:"https://www.jianshu.com/p/c1575636741e",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://jixiaoyong.github.io/images/20200407220410.png",alt:"",loading:"lazy"},null,-1),h=n("p",null,[e("我们没法直接获取到"),n("code",null,"baseline的坐标"),e("，所以只能从另外一个角度考虑： 因为在绘制文字时，文字的上下中心（即上图中的"),n("code",null,"center"),e("）是确定的，我们只要计算出"),n("code",null,"center"),e("到"),n("code",null,"baseline"),e("之间的偏移量，就可以计算出"),n("code",null,"baseline的y坐标"),e("。")],-1),k={href:"http://www.imooc.com/article/277490?block_id=tuijian_wz",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>基线到中线的距离 = (descent + ascent) / 2 - descent = (ascent - descent) / 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>(descent + ascent) / 2</code>是中线center的值，而根据上图可知<code>(descent + ascent) / 2 - descent</code>的值就是baseline到center的距离。</p></blockquote><p>所以</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>baseline的y坐标 = 文字的上下高度中心 + baseline的竖坐标和文字上下实际中心的偏移量
                = center.y + 基线到中线的距离
                = center.y + (ascent - descent) / 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个<code>center.y</code>根据场景不同可以是一行的行中心（文字在一行居中显示），或者控件的上下中心（文字在控件上下居中）</p></blockquote><p>得出结论：</p><p>由于android绘制文字时，<strong>并不是从文字高度的中间开始绘制，而是从baseline开始绘制</strong>。所以在绘制文字时，为了使文字高度居中（在所指定的空间内居中，比如某一行，就在该行限定的高度内居中显示；某一控件，则整个控件的上下中间显示），需要在计算出来的<strong>文字上下中心的y坐标基础上加上baseline到文字中线的偏移量</strong>。</p><p>除此之外，也可以类比得到：<code>baseline.y = center.y + (bottom.y - top.y) / 2 - bottom.y</code></p>`,8),_=n("p",null,"基线（baeseline），坡顶（ascenter）,坡底（descenter）",-1),g=n("p",null,"上坡度（ascent），下坡度（descent）",-1),v=n("p",null,"行间距（leading）：坡底到下一行坡顶的距离",-1),w=n("p",null,"字体的高度＝上坡度＋下坡度＋行间距",-1),x={href:"https://blog.csdn.net/hanyongbai/article/details/84418369",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.jianshu.com/p/c1575636741e",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/hanyongbai/article/details/84418369",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.imooc.com/article/277490?block_id=tuijian_wz",target:"_blank",rel:"noopener noreferrer"},N={href:"https://blog.csdn.net/xuxingxing002/article/details/50971606",target:"_blank",rel:"noopener noreferrer"};function T(q,z){const s=l("ExternalLinkIcon");return i(),c("div",null,[p,n("p",null,[e("下图表示"),d,e("中存储的文字的各种信息（来源："),n("a",u,[e("简书"),a(s)]),e("）： "),b]),h,n("p",null,[e("又根据这个"),n("a",k,[e("文章"),a(s)]),e("：")]),m,n("blockquote",null,[_,g,v,w,n("p",null,[n("a",x,[e("https://blog.csdn.net/hanyongbai/article/details/84418369"),a(s)])])]),n("p",null,[e("参考文章： "),n("a",y,[e("https://www.jianshu.com/p/c1575636741e"),a(s)]),n("a",f,[e("https://blog.csdn.net/hanyongbai/article/details/84418369"),a(s)]),n("a",j,[e("http://www.imooc.com/article/277490?block_id=tuijian_wz"),a(s)]),n("a",N,[e("https://blog.csdn.net/xuxingxing002/article/details/50971606"),a(s)])])])}const B=o(r,[["render",T],["__file","e5860bb5.html.vue"]]);export{B as default};
