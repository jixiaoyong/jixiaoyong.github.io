const t=JSON.parse('{"key":"v-190a31c0","path":"/posts/26eab50a.html","title":"Android通过Hook启动未注册Activity","lang":"zh-CN","frontmatter":{"permalink":"/posts/26eab50a.html","title":"Android通过Hook启动未注册Activity","abbrlink":"26eab50a","date":"2018-01-16T00:10:41.000Z","tag":"android","description":"简介 hook是钩子的意思，hook的过程是通过反射、代理等改变系统原有的行为以达到自己的目的。 本文主要是通过hook android 中的ActivityManagerService和Handler.CallBack，欺骗系统调起activity的过程，在调用startActivity时将targetIntent通过proxy伪装为proxyIntent，等到通过系统验证，正式启动activity时，再讲proxyIntent恢复为targetIntent，从而实现调用未在AndroidManifest.xml中注册的activity。 需要注意，本方法只在Api&lt;26下有效。具体原因见后面。","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/26eab50a.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Android通过Hook启动未注册Activity"}],["meta",{"property":"og:description","content":"简介 hook是钩子的意思，hook的过程是通过反射、代理等改变系统原有的行为以达到自己的目的。 本文主要是通过hook android 中的ActivityManagerService和Handler.CallBack，欺骗系统调起activity的过程，在调用startActivity时将targetIntent通过proxy伪装为proxyIntent，等到通过系统验证，正式启动activity时，再讲proxyIntent恢复为targetIntent，从而实现调用未在AndroidManifest.xml中注册的activity。 需要注意，本方法只在Api&lt;26下有效。具体原因见后面。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-10T04:17:02.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:published_time","content":"2018-01-16T00:10:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-10T04:17:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android通过Hook启动未注册Activity\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-01-16T00:10:41.000Z\\",\\"dateModified\\":\\"2023-04-10T04:17:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.新建Activity等","slug":"_1-新建activity等","link":"#_1-新建activity等","children":[]},{"level":2,"title":"2.Utils.java实现hook具体逻辑","slug":"_2-utils-java实现hook具体逻辑","link":"#_2-utils-java实现hook具体逻辑","children":[]}],"git":{"createdTime":1681100222000,"updatedTime":1681100222000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.7,"words":811},"filePathRelative":"_posts/Android通过Hook启动未注册Activity.md","localizedDate":"2018年1月16日","excerpt":"<h1> 简介</h1>\\n<p>hook是钩子的意思，hook的过程是通过反射、代理等改变系统原有的行为以达到自己的目的。</p>\\n<p>本文主要是通过hook android 中的ActivityManagerService和Handler.CallBack，欺骗系统调起activity的过程，在调用startActivity时将targetIntent通过proxy伪装为proxyIntent，等到通过系统验证，正式启动activity时，再讲proxyIntent恢复为targetIntent，从而实现调用未在AndroidManifest.xml中注册的activity。</p>\\n<blockquote>\\n<p>需要注意，本方法只在Api&lt;26下有效。具体原因见后面。</p>\\n</blockquote>","autoDesc":true}');export{t as data};
