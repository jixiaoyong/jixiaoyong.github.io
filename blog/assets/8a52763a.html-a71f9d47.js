const n=JSON.parse('{"key":"v-301bc5b1","path":"/posts/8a52763a.html","title":"Kotlin 学习笔记 2","lang":"zh-CN","frontmatter":{"permalink":"/posts/8a52763a.html","title":"Kotlin 学习笔记 2","abbrlink":"8a52763a","date":"2018-02-11T03:38:43.000Z","updated":"2023-12-30T08:17:02.000Z","tag":"kotlin","description":"尾递归优化 把递归通过编译器转化为迭代，从而避免 Stack Overflow “以时间换取空间” 普通递归： 调用函数之后，还需要使用其返回值供自己使用，即自身返回值依赖于下一级函数，一般是调用自身的代码后面，还有其他的代码要执行。 fun fun1(n: Int): BigInteger { if (n == 0) return BigInteger.valueOf(1L) return n.toBigInteger().times(fun1(n - 1)) }","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/8a52763a.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Kotlin 学习笔记 2"}],["meta",{"property":"og:description","content":"尾递归优化 把递归通过编译器转化为迭代，从而避免 Stack Overflow “以时间换取空间” 普通递归： 调用函数之后，还需要使用其返回值供自己使用，即自身返回值依赖于下一级函数，一般是调用自身的代码后面，还有其他的代码要执行。 fun fun1(n: Int): BigInteger { if (n == 0) return BigInteger.valueOf(1L) return n.toBigInteger().times(fun1(n - 1)) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-01T00:13:21.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:published_time","content":"2018-02-11T03:38:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T00:13:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin 学习笔记 2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-11T03:38:43.000Z\\",\\"dateModified\\":\\"2024-01-01T00:13:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"协程中runBlocking与coroutineScope的区别","slug":"协程中runblocking与coroutinescope的区别","link":"#协程中runblocking与coroutinescope的区别","children":[]},{"level":2,"title":"协程的思维导图","slug":"协程的思维导图","link":"#协程的思维导图","children":[]},{"level":2,"title":"协程局部变量","slug":"协程局部变量","link":"#协程局部变量","children":[]},{"level":2,"title":"在 Android 中使用","slug":"在-android-中使用","link":"#在-android-中使用","children":[]}],"git":{"createdTime":1704068001000,"updatedTime":1704068001000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2485},"filePathRelative":"_posts/Kotlin学习笔记2.md","localizedDate":"2018年2月11日","excerpt":"<h1> 尾递归优化</h1>\\n<p>把递归通过编译器转化为迭代，从而避免 Stack Overflow</p>\\n<p>“以时间换取空间”</p>\\n<p>普通递归：</p>\\n<p>调用函数之后，还需要使用其返回值供自己使用，即自身返回值依赖于下一级函数，一般是调用自身的代码后面，还有其他的代码要执行。</p>\\n<div class=\\"language-kotlin line-numbers-mode\\" data-ext=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token keyword\\">fun</span> <span class=\\"token function\\">fun1</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">:</span> Int<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> BigInteger <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> BigInteger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">valueOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1L</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> n<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBigInteger</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">times</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">fun1</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
