import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-54b0e827.js";const i={},u=e('<blockquote><p>本文基于 Dart 2.17</p></blockquote><br><p>Dart App 中所有的代码都在一个 isolate 中运行（各个 isolate 之间的代码运行时是隔离的），一个 isolate 有自己的 heap，维持有一个消息队列 event_loop，处理两种消息：</p><ol><li><code>event queue</code> 执行用户点击、屏幕刷新、绘制，一般的 Future、IO、Stream 流等，每次执行完毕都会先检查执行 micro task queue 中的任务，直到其为空再执行下一个 event queue</li><li><code>microTask queue</code> 优先执行，一般执行跑完即弃的小任务，如 Dart 内部的微任务</li></ol><p>上述两种 event 会在普通的 Dart 同步方法执行完毕后执行，无论是 microTask 还是普通的 event，他们都是<strong>concurrency 并行</strong>执行（也就是说实际上还是<strong>上一个执行完毕，再执行另外一个</strong>），所以如果这些 event 中存在耗时长的方法，<strong>依旧会阻塞其他方法的执行</strong>，可能导致 UI 卡顿等情况。</p><br><p>在代码执行的过程中，各种事件（如用户点击、屏幕刷新、future、microtask 等）都会被当做一个个 event 放入到 event queue 中，然后不停的从 event loop 取出事件并执行：</p><figure><img src="https://jixiaoyong.github.io/images/dart/event_loop/dart_event_loop.png" alt="dart_event_loop" tabindex="0" loading="lazy"><figcaption>dart_event_loop</figcaption></figure><p>他们的执行顺序如下：</p><figure><img src="https://jixiaoyong.github.io/images/dart/event_loop/dart_event_loop_sequeue.png" alt="dart_event_loop_sequeue" tabindex="0" loading="lazy"><figcaption>dart_event_loop_sequeue</figcaption></figure><p>可以从下述例子详细看一下代码执行的时候各个方法执行过程：</p><figure><img src="https://jixiaoyong.github.io/images/dart/event_loop/dart_test_queue_code.png" alt="dart_test_queue_code" tabindex="0" loading="lazy"><figcaption>dart_test_queue_code</figcaption></figure><figure><img src="https://jixiaoyong.github.io/images/dart/event_loop/dart_test_queue_output.png" alt="dart_test_queue_output" tabindex="0" loading="lazy"><figcaption>dart_test_queue_output</figcaption></figure><br><p>本文根据 Dart SDK 源码分析一下 event loop 的实现。</p>',15),r={href:"https://gist.github.com/jixiaoyong/ac811902db42a51cf97e3290788ade4a",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="_1-同步方法" tabindex="-1"><a class="header-anchor" href="#_1-同步方法" aria-hidden="true">#</a> 1. 同步方法</h2><p>同步方法包括普通的方法，以及一下几种会按照同步方法立即执行的方式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token keyword">sync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am future created by Future.sync&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am future(</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">element</span></span><span class="token string">) created by Future.forEach&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">doWhile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repeatCounter<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;repeat (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">repeatCounter</span></span><span class="token string">/3) inner Future.doWhile&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-micro-task" tabindex="-1"><a class="header-anchor" href="#_2-micro-task" aria-hidden="true">#</a> 2. micro task</h2><p>microtask 会在同步方法执行完毕之后立即被执行，一般用来执行“即抛型”的方法，不应当执行耗时方法。microtask 列表会一直执行，直到 event loop 中没有 micro task 了，才会去执行 Future 等普通的 event。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, world! I am a microtask.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">microtask</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am microtask created by Future.microtask&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am future created by Future.value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am future created by Future.error&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Future.value([FutureOr&lt;T&gt;? value])</code> 比较特殊，如果<code>value</code> 是 future，那么他会在 value 执行完毕后返回他的值，如果<code>value</code>不是 future，他就会立即执行属于 microtask</p></blockquote><h3 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析" aria-hidden="true">#</a> 代码分析</h3><p>让我们看一下上述方法的具体实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\future.dart</span>

<span class="token keyword">factory</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">microtask</span><span class="token punctuation">(</span><span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">_complete</span><span class="token punctuation">(</span><span class="token function">computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_completeWithErrorCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> e<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，<code>Future.microtask</code>本质还是调用<code>scheduleMicrotask</code>实现的，其实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\schedule_microtask.dart</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;vm:entry-point&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;call&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _Zone currentZone <span class="token operator">=</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>_current<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>_rootZone<span class="token punctuation">,</span> currentZone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// No need to bind the callback. We know that the root&#39;s scheduleMicrotask</span>
    <span class="token comment">// will be invoked in the root zone.</span>
    <span class="token function">_rootScheduleMicrotask</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> _rootZone<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  _ZoneFunction implementation <span class="token operator">=</span> currentZone<span class="token punctuation">.</span>_scheduleMicrotask<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>_rootZone<span class="token punctuation">,</span> implementation<span class="token punctuation">.</span>zone<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      _rootZone<span class="token punctuation">.</span><span class="token function">inSameErrorZone</span><span class="token punctuation">(</span>currentZone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_rootScheduleMicrotask</span><span class="token punctuation">(</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> currentZone<span class="token punctuation">,</span> currentZone<span class="token punctuation">.</span><span class="token function">registerCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">bindCallbackGuarded</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Zone.scheduleMicrotask()</code>最后调用的是<code>_RootZone</code>的同名方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\zone.dart</span>

<span class="token keyword">class</span> _RootZone <span class="token keyword">extends</span> _Zone <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_rootScheduleMicrotask</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">_rootScheduleMicrotask</span><span class="token punctuation">(</span>
    <span class="token class-name">Zone</span><span class="token operator">?</span> self<span class="token punctuation">,</span> <span class="token class-name">ZoneDelegate</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Zone</span> zone<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">identical</span><span class="token punctuation">(</span>_rootZone<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bool hasErrorHandler <span class="token operator">=</span> <span class="token operator">!</span>_rootZone<span class="token punctuation">.</span><span class="token function">inSameErrorZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasErrorHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      f <span class="token operator">=</span> zone<span class="token punctuation">.</span><span class="token function">bindCallbackGuarded</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      f <span class="token operator">=</span> zone<span class="token punctuation">.</span><span class="token function">bindCallback</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">_scheduleAsyncCallback</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rootzone-scheduleasynccallback" tabindex="-1"><a class="header-anchor" href="#rootzone-scheduleasynccallback" aria-hidden="true">#</a> _RootZone._scheduleAsyncCallback</h4><p>这里调用了<code>_RootZone._scheduleAsyncCallback</code>方法，将传入的 callback 当做 microtask 执行。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\schedule_microtask.dart</span>

<span class="token comment">/// Schedules a callback to be called as a microtask.</span>
<span class="token comment">///</span>
<span class="token comment">/// The microtask is called after all other currently scheduled</span>
<span class="token comment">/// microtasks, but as part of the current system event.</span>
<span class="token keyword">void</span> <span class="token function">_scheduleAsyncCallback</span><span class="token punctuation">(</span>_AsyncCallback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _AsyncCallbackEntry newEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_AsyncCallbackEntry</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  _AsyncCallbackEntry<span class="token operator">?</span> lastCallback <span class="token operator">=</span> _lastCallback<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _nextCallback <span class="token operator">=</span> _lastCallback <span class="token operator">=</span> newEntry<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_isInCallbackLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _AsyncRun<span class="token punctuation">.</span><span class="token function">_scheduleImmediate</span><span class="token punctuation">(</span>_startMicrotaskLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    lastCallback<span class="token punctuation">.</span>next <span class="token operator">=</span> newEntry<span class="token punctuation">;</span>
    _lastCallback <span class="token operator">=</span> newEntry<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rootzone-startmicrotaskloop" tabindex="-1"><a class="header-anchor" href="#rootzone-startmicrotaskloop" aria-hidden="true">#</a> _RootZone._startMicrotaskLoop</h4><p>这里面的<code>_startMicrotaskLoop</code>方法是实际上处理 microtask 的地方：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\schedule_microtask.dart</span>

<span class="token comment">/// Whether we are currently inside the callback loop.</span>
<span class="token comment">///</span>
<span class="token comment">/// If we are inside the loop, we never need to schedule the loop,</span>
<span class="token comment">/// even if adding a first element.</span>
bool _isInCallbackLoop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">_microtaskLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> entry <span class="token operator">=</span> _nextCallback<span class="token punctuation">;</span> entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> entry <span class="token operator">=</span> _nextCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _lastPriorityCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> next <span class="token operator">=</span> entry<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    _nextCallback <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _lastCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">_startMicrotaskLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _isInCallbackLoop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// Moved to separate function because try-finally prevents</span>
    <span class="token comment">// good optimization.</span>
    <span class="token function">_microtaskLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    _lastPriorityCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    _isInCallbackLoop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_nextCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _AsyncRun<span class="token punctuation">.</span><span class="token function">_scheduleImmediate</span><span class="token punctuation">(</span>_startMicrotaskLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>_AsyncRun._scheduleImmediate</code>方法则是触发处理 microtask 的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\schedule_microtask.dart</span>

<span class="token keyword">class</span> _AsyncRun <span class="token punctuation">{</span>
  <span class="token comment">/// Schedule the given callback before any other event in the event-loop.</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_scheduleImmediate</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asyncrun-scheduleimmediate" tabindex="-1"><a class="header-anchor" href="#asyncrun-scheduleimmediate" aria-hidden="true">#</a> _AsyncRun._scheduleImmediate</h4><p><code>_AsyncRun._scheduleImmediate</code>方法的实现在<code>schedule_microtask_patch.dart</code>中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk/lib/_internal/vm/lib/schedule_microtask_patch.dart</span>

<span class="token metadata function">@patch</span>
<span class="token keyword">class</span> _AsyncRun <span class="token punctuation">{</span>
  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_scheduleImmediate</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> closure <span class="token operator">=</span> _ScheduleImmediate<span class="token punctuation">.</span>_closure<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>closure <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Microtasks are not supported&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">closure</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">_ScheduleImmediateClosure</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> _ScheduleImmediate <span class="token punctuation">{</span>
  <span class="token keyword">static</span> _ScheduleImmediateClosure<span class="token operator">?</span> _closure<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">_setScheduleImmediateClosure</span><span class="token punctuation">(</span>_ScheduleImmediateClosure closure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _ScheduleImmediate<span class="token punctuation">.</span>_closure <span class="token operator">=</span> closure<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">_ensureScheduleImmediate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _AsyncRun<span class="token punctuation">.</span><span class="token function">_scheduleImmediate</span><span class="token punctuation">(</span>_startMicrotaskLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scheduleimmediateclosure" tabindex="-1"><a class="header-anchor" href="#scheduleimmediateclosure" aria-hidden="true">#</a> _ScheduleImmediateClosure</h4><p>可以看到，microtask 实际上是使用<code>_ScheduleImmediateClosure</code>调用的，关于他主要有两个方法：</p><ol><li><code>_setScheduleImmediateClosure</code></li><li><code>_ensureScheduleImmediate</code></li></ol><p>让我们先看一下第一个方法<code>_setScheduleImmediateClosure</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\bin\\dartutils.cc</span>

<span class="token comment">// PrepareAsyncLibrary 方法会在 Dart 虚拟机启动的时候被调用</span>
<span class="token class-name">Dart_Handle</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">PrepareAsyncLibrary</span><span class="token punctuation">(</span><span class="token class-name">Dart_Handle</span> async_lib<span class="token punctuation">,</span>
                                           <span class="token class-name">Dart_Handle</span> isolate_lib<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dart_Handle</span> schedule_immediate_closure <span class="token operator">=</span> <span class="token class-name">Dart_Invoke</span><span class="token punctuation">(</span>
      isolate_lib<span class="token punctuation">,</span> <span class="token class-name">NewString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_getIsolateScheduleImmediateClosure&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RETURN_IF_ERROR</span><span class="token punctuation">(</span>schedule_immediate_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Dart_Handle</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> schedule_immediate_closure<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token class-name">Dart_Invoke</span><span class="token punctuation">(</span>async_lib<span class="token punctuation">,</span> <span class="token class-name">NewString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_setScheduleImmediateClosure&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                     args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要调用了 Dart 中的<code>_getIsolateScheduleImmediateClosure</code>方法创建了<code>schedule_immediate_closure</code>，然后通过<code>_setScheduleImmediateClosure</code>返回：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\isolate_patch.dart</span>

<span class="token comment">/// The embedder can execute this function to get hold of</span>
<span class="token comment">/// [_isolateScheduleImmediate] above.</span>
<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token class-name">Function</span> <span class="token function">_getIsolateScheduleImmediateClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> _isolateScheduleImmediate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/// The closure that should be used as scheduleImmediateClosure, when the VM</span>
<span class="token comment">/// is responsible for the event loop.</span>
<span class="token keyword">void</span> <span class="token function">_isolateScheduleImmediate</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_pendingImmediateCallback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>_pendingImmediateCallback <span class="token operator">==</span> callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _pendingImmediateCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/// The callback that has been registered through \`scheduleImmediate\`.</span>
_ImmediateCallback<span class="token operator">?</span> _pendingImmediateCallback<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这个方法会将传递进来的<code>callback</code>赋值给<code>_pendingImmediateCallback</code>。</p><p>而结合上面的代码，<code>_ensureScheduleImmediate</code> 方法主要也是用来触发<code>_ScheduleImmediateClosure</code>执行回调事件。</p><br><p>到目前为止，我们能确定的是：</p><ul><li>在 Dart VM 启动的时候，会创建一个<code>_ScheduleImmediateClosure</code>并保存在<code>_pendingImmediateCallback</code>;</li><li>当有新的 microtask 加入的时候，会触发<code>_startMicrotaskLoop</code>方法在<code>_microtaskLoop()</code>中实际处理一个 microtask（这里的<code>_startMicrotaskLoop</code>触发的实际是通过<code>_AsyncRun._scheduleImmediate(_startMicrotaskLoop)</code>将其使用<code>_pendingImmediateCallback</code> 包裹之后执行的）。</li></ul><h4 id="pendingimmediatecallback" tabindex="-1"><a class="header-anchor" href="#pendingimmediatecallback" aria-hidden="true">#</a> _pendingImmediateCallback</h4><p>现在的问题是，这个<code>_pendingImmediateCallback</code> 什么时候会被安排执行呢？</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\isolate_patch.dart</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">_runPendingImmediateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> callback <span class="token operator">=</span> _pendingImmediateCallback<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _pendingImmediateCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> _RawReceivePortImpl <span class="token keyword">implements</span> <span class="token class-name">RawReceivePort</span> <span class="token punctuation">{</span>

	<span class="token comment">// Called from the VM to retrieve  the handler and handle a message.</span>
  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token function">_handleMessage</span><span class="token punctuation">(</span>int id<span class="token punctuation">,</span> <span class="token keyword">var</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> handler <span class="token operator">=</span> _portMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;handler&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// TODO(floitsch): this relies on the fact that any exception aborts the</span>
    <span class="token comment">// VM. Once we have non-fatal global exceptions we need to catch errors</span>
    <span class="token comment">// so that we can run the immediate callbacks.</span>
    <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_runPendingImmediateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里的关键代码，在<code>_handleMessage</code>方法中，会先执行<code>RawReceivePort</code>原本的 handler 内容，然后，执行<code>_runPendingImmediateCallback()</code>。</p><p>在<code>_runPendingImmediateCallback</code>则会执行<code>_pendingImmediateCallback</code>的内容，也就是前面的<code>_startMicrotaskLoop</code>，处理 event loop 中的 micro task。</p><br><p>这也就证明了我们之前说的“<strong>microtask 会在同步方法之后立即执行，并在每次普通的 event loop 执行完毕之后，都会检查并执行 event loop 中的 microtask，之后才继续执行普通 event</strong>”。</p><p>在下面的分析中，我们也还可以看到，在 event 每次处理 Timer 事件之后，都会检查执行 micro task。</p><h2 id="_3-event" tabindex="-1"><a class="header-anchor" href="#_3-event" aria-hidden="true">#</a> 3. event</h2><blockquote><p>除了下面列出来的使用 Future 或者 Timer 等创建的方法外，屏幕点击、刷新等事件也在此类 event 中。</p></blockquote><p>当前 event loop 中没有 micro task 之后，就会执行一次此类普通 event，然后再检查一次 event loop，如果有 micro task 就执行 micro task 直到清空 micro task，否则继续执行下一个普通 event，直到 event loop 列表为空，退出 app。</p><p>先看几种会触发此类事件的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am future&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I am Future run immediately Future.any&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I am Future run delay, will be discard Future.any&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I am Future run immediately Future.wait 1/2&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I am Future run delay Future.wait 2/2&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及 Timer</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I am running inner(</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">timer<span class="token punctuation">.</span>tick</span><span class="token punctuation">}</span></span><span class="token string">/2) Timer.periodic&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">.</span>tick <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>
        <span class="token string-literal"><span class="token string">&quot;Hello, I will run asynchronously as soon as possible with Timer.run&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I will run asynchronously after 1 second with Timer&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分析-1" tabindex="-1"><a class="header-anchor" href="#代码分析-1" aria-hidden="true">#</a> 代码分析</h3><p>我们依次看一下上述几个方法的具体实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\future.dart</span>

<span class="token keyword">factory</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>computation <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>typeAcceptsNull<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">ArgumentError</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>
          <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;computation&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;The type parameter is not nullable&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>computation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">_complete</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">.</span><span class="token function">_complete</span><span class="token punctuation">(</span><span class="token function">computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">_completeWithErrorCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> e<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> any<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> completer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Completer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token keyword">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completer<span class="token punctuation">.</span>isCompleted<span class="token punctuation">)</span> completer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Object</span> error<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completer<span class="token punctuation">.</span>isCompleted<span class="token punctuation">)</span> completer<span class="token punctuation">.</span><span class="token function">completeError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> future <span class="token keyword">in</span> futures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 一旦有一个 future 执行完毕，就立即返回结果，并丢弃掉后续 future 的返回</span>
      future<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onValue<span class="token punctuation">,</span> onError<span class="token punctuation">:</span> onError<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> completer<span class="token punctuation">.</span>future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:recognized&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;other&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wait<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>bool eagerError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token class-name">T</span> successValue<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is a VM recognised method, and the _future variable is deliberately</span>
    <span class="token comment">// allocated in a specific slot in the closure context for stack unwinding.</span>
    <span class="token keyword">final</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _future <span class="token operator">=</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> values<span class="token punctuation">;</span> <span class="token comment">// Collects the values. Set to null on error.</span>
    int remaining <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// How many futures are we waiting for.</span>
    late <span class="token class-name">Object</span> error<span class="token punctuation">;</span> <span class="token comment">// The first error from a future.</span>
    late <span class="token class-name">StackTrace</span> stackTrace<span class="token punctuation">;</span> <span class="token comment">// The stackTrace that came with the error.</span>

    <span class="token comment">// Handle an error from any of the futures.</span>
    <span class="token keyword">void</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token class-name">Object</span> theError<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> theStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      remaining<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> valueList <span class="token operator">=</span> values<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>valueList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanUp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">in</span> valueList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// Ensure errors from cleanUp are uncaught.</span>
              <span class="token class-name">T</span> cleanUpValue <span class="token operator">=</span> value<span class="token punctuation">;</span>
              <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token keyword">sync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">cleanUp</span><span class="token punctuation">(</span>cleanUpValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        values <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> eagerError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          _future<span class="token punctuation">.</span><span class="token function">_completeError</span><span class="token punctuation">(</span>theError<span class="token punctuation">,</span> theStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          error <span class="token operator">=</span> theError<span class="token punctuation">;</span>
          stackTrace <span class="token operator">=</span> theStackTrace<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>eagerError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _future<span class="token punctuation">.</span><span class="token function">_completeError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// As each future completes, put its value into the corresponding</span>
      <span class="token comment">// position in the list of values.</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> future <span class="token keyword">in</span> futures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        int pos <span class="token operator">=</span> remaining<span class="token punctuation">;</span>
				<span class="token comment">// 在这里依次执行 future</span>
        future<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          remaining<span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> valueList <span class="token operator">=</span> values<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>valueList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            valueList<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              _future<span class="token punctuation">.</span><span class="token function">_completeWithValue</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>valueList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanUp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// Ensure errors from cleanUp are uncaught.</span>
              <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token keyword">sync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">cleanUp</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>eagerError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// If eagerError is false, and valueList is null, then</span>
              <span class="token comment">// error and stackTrace have been set in handleError above.</span>
              _future<span class="token punctuation">.</span><span class="token function">_completeError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> handleError<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Increment the &#39;remaining&#39; after the call to &#39;then&#39;.</span>
        <span class="token comment">// If that call throws, we don&#39;t expect any future callback from</span>
        <span class="token comment">// the future, and we also don&#39;t increment remaining.</span>
        remaining<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _future<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">_completeWithValue</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span>remaining<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The error must have been thrown while iterating over the futures</span>
      <span class="token comment">// list, or while installing a callback handler on the future.</span>
      <span class="token comment">// This is a breach of the \`Future\` protocol, but we try to handle it</span>
      <span class="token comment">// gracefully.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> eagerError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Throw a new Future.error.</span>
        <span class="token comment">// Don&#39;t just call \`_future._completeError\` since that would propagate</span>
        <span class="token comment">// the error too eagerly, not giving the callers time to install</span>
        <span class="token comment">// error handlers.</span>
        <span class="token comment">// Also, don&#39;t use \`_asyncCompleteError\` since that one doesn&#39;t give</span>
        <span class="token comment">// zones the chance to intercept the error.</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Don&#39;t allocate a list for values, thus indicating that there was an</span>
        <span class="token comment">// error.</span>
        <span class="token comment">// Set error to the caught exception.</span>
        error <span class="token operator">=</span> e<span class="token punctuation">;</span>
        stackTrace <span class="token operator">=</span> st<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> _future<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，除了<code>Future.wait</code>和<code>Future.any</code> <strong>这两个处理 Future 集合的方法外，<code>Future.delayed</code> 这个方法内部是实际上是</strong>通过 Timer 实现**的。</p><h4 id="future-then" tabindex="-1"><a class="header-anchor" href="#future-then" aria-hidden="true">#</a> Future.then</h4><p>在看 Timer 实现之前，先看一下<code>Futrue.then</code>的实现，他对应的实现是<code>_Future.then</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\future_impl.dart</span>

<span class="token keyword">class</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token comment">// Register callbacks to be called when this future completes.</span>
<span class="token comment">//</span>
<span class="token comment">// When this future completes with a value, the [onValue] callback will be called with that value.</span>
<span class="token comment">//  If this future is already completed, the callback will not be called immediately,</span>
<span class="token comment">// but will be scheduled in a later microtask</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> then<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">Function</span><span class="token operator">?</span> onError<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Zone</span> currentZone <span class="token operator">=</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>currentZone<span class="token punctuation">,</span> _rootZone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>onError <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
          onError <span class="token operator">is!</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">StackTrace</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          onError <span class="token operator">is!</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">ArgumentError</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>
            onError<span class="token punctuation">,</span>
            <span class="token string-literal"><span class="token string">&quot;onError&quot;</span></span><span class="token punctuation">,</span>
            <span class="token string-literal"><span class="token string">&quot;Error handler must accept one Object or one Object and a StackTrace&quot;</span></span>
                <span class="token string-literal"><span class="token string">&quot; as arguments, and return a value of the returned future&#39;s type&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      f <span class="token operator">=</span> currentZone<span class="token punctuation">.</span>registerUnaryCallback<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FutureOr</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>onError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This call also checks that onError is assignable to one of:</span>
        <span class="token comment">//   dynamic Function(Object)</span>
        <span class="token comment">//   dynamic Function(Object, StackTrace)</span>
        onError <span class="token operator">=</span> <span class="token function">_registerErrorHandler</span><span class="token punctuation">(</span>onError<span class="token punctuation">,</span> currentZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> _Future<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> _FutureListener<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> f<span class="token punctuation">,</span> onError<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 返回创建好的 Future</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_Futrue.then</code>只是对传入的回调的进行了包装，实际上是通过<code>_Future._addListener()</code>实现具体的逻辑：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\future_impl.dart</span>

bool <span class="token keyword">get</span> _mayComplete <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>_state <span class="token operator">&amp;</span> _completionStateMask<span class="token punctuation">)</span> <span class="token operator">==</span> _stateIncomplete<span class="token punctuation">;</span>
  bool <span class="token keyword">get</span> _isPendingComplete <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>_state <span class="token operator">&amp;</span> _statePendingComplete<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  bool <span class="token keyword">get</span> _mayAddListener <span class="token operator">=</span><span class="token operator">&gt;</span>
      _state <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>_statePendingComplete <span class="token operator">|</span> _stateIgnoreError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">_addListener</span><span class="token punctuation">(</span>_FutureListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span>_nextListener <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 如果是待完成的或者忽略错误的，将当前 listener 添加到链表头部；</span>
		<span class="token comment">// 在后文处理结果的时候，会从链表尾部开始读取</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_mayAddListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span>_nextListener <span class="token operator">=</span> _resultOrListeners<span class="token punctuation">;</span>
      _resultOrListeners <span class="token operator">=</span> listener<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_isChained<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Delegate listeners to chained source future.</span>
        <span class="token comment">// If the source is complete, instead copy its values and</span>
        <span class="token comment">// drop the chaining.</span>
        _Future source <span class="token operator">=</span> _chainSource<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span>_isComplete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				  <span class="token comment">// 如果依赖于 source，那么就添加为 source 的 listener</span>
          source<span class="token punctuation">.</span><span class="token function">_addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">_cloneResult</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>_isComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Handle late listeners asynchronously.</span>
      _zone<span class="token punctuation">.</span><span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// Propagates the value/error of [source] to its [listeners]</span>
        <span class="token function">_propagateToListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>_Future._addListener(_FutureListener listener)</code>中基本上做了如下判断：</p><ul><li>如果 Future 是延迟完成的，就添加监听。</li><li>如果 Future 已经完成了，就加入到 micro task 中，安排执行 listener 回调（<code>_propagateToListeners(this, listener)</code>）。</li></ul>`,63),d={href:"https://juejin.cn/post/6844904196819402759",target:"_blank",rel:"noopener noreferrer"},m=e(`<br><h3 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h3><p>我们再看一下 Timer 的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\timer.dart</span>

<span class="token comment">// Timer.run</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token keyword">factory</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span><span class="token punctuation">.</span>current <span class="token operator">==</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// No need to bind the callback. We know that the root&#39;s timer will</span>
      <span class="token comment">// be invoked in the root zone.</span>
      <span class="token keyword">return</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">createTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current
        <span class="token punctuation">.</span><span class="token function">createTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">bindCallbackGuarded</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token keyword">factory</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span><span class="token punctuation">.</span>current <span class="token operator">==</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// No need to bind the callback. We know that the root&#39;s timer will</span>
      <span class="token comment">// be invoked in the root zone.</span>
      <span class="token keyword">return</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">createPeriodicTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> boundCallback <span class="token operator">=</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>bindUnaryCallbackGuarded<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Timer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">createPeriodicTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> boundCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建-timer" tabindex="-1"><a class="header-anchor" href="#创建-timer" aria-hidden="true">#</a> 创建 Timer</h4><p>可以看到，Timer 的创建实际上是 Zone 通过两种方式创建的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\zone.dart</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Zone</span> <span class="token punctuation">{</span>

	<span class="token comment">/// Creates a [Timer] where the callback is executed in this zone.</span>
  <span class="token class-name">Timer</span> <span class="token function">createTimer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// Creates a periodic [Timer] where the callback is executed in this zone.</span>
  <span class="token class-name">Timer</span> <span class="token function">createPeriodicTimer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> period<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zone 是抽象类，他的实现是<code>_RootZone</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\zone.dart</span>

<span class="token keyword">class</span> _RootZone <span class="token keyword">extends</span> _Zone <span class="token punctuation">{</span>

<span class="token class-name">Timer</span> <span class="token function">createTimer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">_createTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Timer</span> <span class="token function">createPeriodicTimer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">_createPeriodicTimer</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里实际上是调用了 Timer 中对应的私有方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\async\\timer.dart</span>

	<span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">Timer</span> <span class="token function">_createTimer</span><span class="token punctuation">(</span>
      <span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token class-name">Timer</span> <span class="token function">_createPeriodicTimer</span><span class="token punctuation">(</span>
      <span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他们的具体实现在<code>timer_patch.dart</code>中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_patch.dart</span>

<span class="token metadata function">@patch</span>
<span class="token keyword">class</span> <span class="token class-name">Timer</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Timer</span> <span class="token function">_createTimer</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">factory</span> <span class="token operator">=</span> <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span>timerFactory<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">factory</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Timer interface not supported.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    int milliseconds <span class="token operator">=</span> duration<span class="token punctuation">.</span>inMilliseconds<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>milliseconds <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> milliseconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">factory</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@patch</span>
  <span class="token keyword">static</span> <span class="token class-name">Timer</span> <span class="token function">_createPeriodicTimer</span><span class="token punctuation">(</span>
      <span class="token class-name">Duration</span> duration<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">factory</span> <span class="token operator">=</span> <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span>timerFactory<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">factory</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Timer interface not supported.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    int milliseconds <span class="token operator">=</span> duration<span class="token punctuation">.</span>inMilliseconds<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>milliseconds <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> milliseconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">factory</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，无论是单次的还是循环的 Timer 都是使用<code>VMLibraryHooks.timerFactory</code>创建的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">_setupHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span>timerFactory <span class="token operator">=</span> _Timer<span class="token punctuation">.</span>_factory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

	<span class="token comment">// The Timer factory registered with the dart:async library by the embedder.</span>
  <span class="token keyword">static</span> <span class="token class-name">Timer</span> <span class="token function">_factory</span><span class="token punctuation">(</span>
      int milliSeconds<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">,</span> bool repeating<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>repeating<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> _Timer<span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>milliSeconds<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">_Timer</span><span class="token punctuation">(</span>milliSeconds<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token keyword">factory</span> <span class="token function">_Timer</span><span class="token punctuation">(</span>int milliSeconds<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_createTimer</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> milliSeconds<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">factory</span> _Timer<span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>int milliSeconds<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_createTimer</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> milliSeconds<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终都是调用的<code>_Timer._createTimer</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token keyword">static</span> _Timer <span class="token function">_createTimer</span><span class="token punctuation">(</span>
      <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span><span class="token punctuation">,</span> int milliSeconds<span class="token punctuation">,</span> bool repeating<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Negative timeouts are treated as if 0 timeout.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>milliSeconds <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      milliSeconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Add one because DateTime.now() is assumed to round down</span>
    <span class="token comment">// to nearest millisecond, not up, so that time + duration is before</span>
    <span class="token comment">// duration milliseconds from now. Using microsecond timers like</span>
    <span class="token comment">// Stopwatch allows detecting that the timer fires early.</span>
    int now <span class="token operator">=</span> <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span><span class="token function">timerMillisecondClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    int wakeupTime <span class="token operator">=</span> <span class="token punctuation">(</span>milliSeconds <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> now <span class="token punctuation">:</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> milliSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    _Timer timer <span class="token operator">=</span>
        <span class="token keyword">new</span> _Timer<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> wakeupTime<span class="token punctuation">,</span> milliSeconds<span class="token punctuation">,</span> repeating<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Enqueue this newly created timer in the appropriate structure and</span>
    <span class="token comment">// notify if necessary.</span>
    timer<span class="token punctuation">.</span><span class="token function">_enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> timer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建 timer 的时候，先获取了当前的时间戳，然后计算出 timer 的唤醒时间<code>wakeupTime</code> ，最后调用<code>_Timer._internal</code>创建 timer。</p><p><code>_Timer._internal</code>只是简单创建了 Timer:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>_Timer<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_callback<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_wakeupTime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_milliSeconds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_repeating<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> _id <span class="token operator">=</span> <span class="token function">_nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建根据需要创建好 Timer 之后，使用<code>_Timer._enqueue</code>方法把 Timer 放入到相应的队列中。</p><h4 id="timer-enqueue" tabindex="-1"><a class="header-anchor" href="#timer-enqueue" aria-hidden="true">#</a> timer._enqueue</h4><p>主要看一下<code>timer._enqueue()</code>方法的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

	<span class="token comment">// Timers are ordered by wakeup time. Timers with a timeout value of &gt; 0 do</span>
  <span class="token comment">// end up on the TimerHeap. Timers with a timeout of 0 are queued in a list.</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> _heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">_TimerHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> _Timer<span class="token operator">?</span> _firstZeroTimer<span class="token punctuation">;</span>
  <span class="token keyword">static</span> _Timer _lastZeroTimer <span class="token operator">=</span> _sentinelTimer<span class="token punctuation">;</span>

	<span class="token comment">// Adds a timer to the heap or timer list. Timers with the same wakeup time</span>
  <span class="token comment">// are enqueued in order and notified in FIFO order.</span>
  <span class="token keyword">void</span> <span class="token function">_enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_milliSeconds <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_firstZeroTimer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _lastZeroTimer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        _firstZeroTimer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _lastZeroTimer<span class="token punctuation">.</span>_indexOrNext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        _lastZeroTimer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// Every zero timer gets its own event.</span>
      <span class="token function">_notifyZeroHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      _heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_heap<span class="token punctuation">.</span><span class="token function">isFirst</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_notifyEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到无论是单次还是循环的 Timer 最后都是使用<code>_Timer._internal</code>创建的，然后再使用<code>_Timer._enqueue()</code>方法将 timer 添加到<code>heap</code>或者<code>timer list</code>中：</p><ul><li>如果 Timer 的<code>_milliSeconds</code>为 0，则会被添加到<code>_lastZeroTimer</code>中（并将上一个 timer 的_indexOrNext 指向自己），并在<code>_notifyZeroHandler()</code>方法发送_ZERO_EVENT 事件（最终会触发<code>_Timer._handleMessage</code> ）；</li><li>否则则将其加入到<code>_heap</code>中，如果他是第一个 timer，就通过<code>_notifyEventHandler()</code>启动处理 Timer 的 event handler（这个线程会在合适的时间唤起 Timer 执行<code>_Timer._handleMessage</code>方法）。</li></ul><p>在具体分析整个过程之前，我们先看一下几个属性的创建过程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token keyword">class</span> _Timer <span class="token keyword">implements</span> <span class="token class-name">Timer</span> <span class="token punctuation">{</span>

	<span class="token keyword">static</span> _RawReceivePortImpl<span class="token operator">?</span> _receivePort<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">SendPort</span><span class="token operator">?</span> _sendPort<span class="token punctuation">;</span>

<span class="token comment">// Tell the event handler to wake this isolate at a specific time.</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_scheduleWakeup</span><span class="token punctuation">(</span>int wakeupTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_receivePortActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_createTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span><span class="token function">eventHandlerSendData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> _sendPort<span class="token operator">!</span><span class="token punctuation">,</span> wakeupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _scheduledWakeupTime <span class="token operator">=</span> wakeupTime<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token comment">// Enqueue one message for each zero timer. To be able to distinguish from</span>
  <span class="token comment">// EventHandler messages we send a _ZERO_EVENT instead of a _TIMEOUT_EVENT.</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_notifyZeroHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_receivePortActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_createTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _sendPort<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>_ZERO_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token comment">// Create a receive port and register a message handler for the timer</span>
  <span class="token comment">// events.</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_createTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> receivePort <span class="token operator">=</span> _receivePort<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>receivePort <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>_sendPort <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> port <span class="token operator">=</span> <span class="token function">_RawReceivePortImpl</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Timer&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      port<span class="token punctuation">.</span>handler <span class="token operator">=</span> _handleMessage<span class="token punctuation">;</span>
      _sendPort <span class="token operator">=</span> port<span class="token punctuation">.</span>sendPort<span class="token punctuation">;</span>
      _receivePort <span class="token operator">=</span> port<span class="token punctuation">;</span>
      _scheduledWakeupTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      receivePort<span class="token punctuation">.</span><span class="token function">_setActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _receivePortActive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码我们可以看到：</p><ul><li><code>_sendPort</code>是<code>_receivePort</code>对应的 sendPort，后者的 handler 是<code>_handleMessage()</code>方法</li><li>无论是<code>_notifyEventHandler()</code>还是 <code>_notifyZeroHandler()</code>都会保证<code>_createTimerHandler()</code>被<strong>调用过</strong>。</li></ul><h5 id="milliseconds-0" tabindex="-1"><a class="header-anchor" href="#milliseconds-0" aria-hidden="true">#</a> _milliSeconds == 0</h5><p>先看一下<code>_milliSeconds</code>为 0 的情况：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token comment">// Enqueue one message for each zero timer. To be able to distinguish from</span>
  <span class="token comment">// EventHandler messages we send a _ZERO_EVENT instead of a _TIMEOUT_EVENT.</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_notifyZeroHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_receivePortActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_createTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _sendPort<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>_ZERO_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面的分析，<code>_sendPort!.send(_ZERO_EVENT)</code>发送的消息，通过<code>MessageHandler::PostMessage</code>处理，最后调用<code>_receivePort</code>的 handler 也就是在<code>_handleMessage(msg)</code>方法中执行。</p><h5 id="milliseconds-0-1" tabindex="-1"><a class="header-anchor" href="#milliseconds-0-1" aria-hidden="true">#</a> _milliSeconds ≠ 0</h5><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_notifyEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_handlingCallbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// While we are already handling callbacks we will not notify the event</span>
      <span class="token comment">// handler. _handleTimeout will call _notifyEventHandler once all pending</span>
      <span class="token comment">// timers are processed.</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If there are no pending timers. Close down the receive port.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_firstZeroTimer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _heap<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// No pending timers: Close the receive port and let the event handler</span>
      <span class="token comment">// know.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_sendPort <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_cancelWakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_shutdownTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Only zero timers are left. Cancel any scheduled wakeups.</span>
      <span class="token function">_cancelWakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Only send a message if the requested wakeup time differs from the</span>
    <span class="token comment">// already scheduled wakeup time.</span>
    <span class="token keyword">var</span> wakeupTime <span class="token operator">=</span> _heap<span class="token punctuation">.</span>first<span class="token punctuation">.</span>_wakeupTime<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_scheduledWakeupTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>wakeupTime <span class="token operator">!=</span> _scheduledWakeupTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_scheduleWakeup</span><span class="token punctuation">(</span>wakeupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token comment">// Tell the event handler to wake this isolate at a specific time.</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_scheduleWakeup</span><span class="token punctuation">(</span>int wakeupTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_receivePortActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_createTimerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span><span class="token function">eventHandlerSendData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> _sendPort<span class="token operator">!</span><span class="token punctuation">,</span> wakeupTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _scheduledWakeupTime <span class="token operator">=</span> wakeupTime<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，当_milliSeconds ≠ 0 的时候，会将其加入到<code>_heap</code>中，如果当前的 timer 是<code>_heap</code>中第一个，则调用<code>_notifyEventHandler()</code>告诉 event handler<strong>在指定的时间唤起 isolate</strong>。</p><p>这里主要的实现是<code>VMLibraryHooks.eventHandlerSendData</code>，他的实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\bin\\common_patch.dart</span>

<span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:entry-point&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;call&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">_setupHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span>eventHandlerSendData <span class="token operator">=</span> _EventHandler<span class="token punctuation">.</span>_sendData<span class="token punctuation">;</span>
  <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span>timerMillisecondClock <span class="token operator">=</span> _EventHandler<span class="token punctuation">.</span>_timerMillisecondClock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\bin\\eventhandler_patch.dart</span>

<span class="token metadata function">@patch</span>
<span class="token keyword">class</span> _EventHandler <span class="token punctuation">{</span>
  <span class="token metadata function">@patch</span>
  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;EventHandler_SendData&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_sendData</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">?</span> sender<span class="token punctuation">,</span> <span class="token class-name">SendPort</span> sendPort<span class="token punctuation">,</span> int data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;vm:external-name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;EventHandler_TimerMillisecondClock&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">external</span> <span class="token keyword">static</span> int <span class="token function">_timerMillisecondClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -&gt; runtime\\bin\\eventhandler.cc</span>

<span class="token comment">/*
 * Send data to the EventHandler thread to register for a given instance
 * args[0] a ReceivePort args[1] with a notification event args[2].
 */</span>
<span class="token keyword">void</span> <span class="token function">FUNCTION_NAME</span><span class="token punctuation">(</span><span class="token class-name">EventHandler_SendData</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Dart_NativeArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the id out of the send port. If the handle is not a send port</span>
  <span class="token comment">// we will get an error and propagate that out.</span>
  <span class="token class-name">Dart_Handle</span> handle <span class="token operator">=</span> <span class="token class-name">Dart_GetNativeArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Dart_Port</span> dart_port<span class="token punctuation">;</span>
  handle <span class="token operator">=</span> <span class="token class-name">Dart_SendPortGetId</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Dart_IsError</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Dart_PropagateError</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UNREACHABLE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Dart_Handle</span> sender <span class="token operator">=</span> <span class="token class-name">Dart_GetNativeArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  intptr_t id<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Dart_IsNull</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    id <span class="token operator">=</span> kTimerId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Socket</span><span class="token operator">*</span> socket <span class="token operator">=</span> <span class="token class-name">Socket</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetSocketIdNativeField</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>dart_port <span class="token operator">!=</span> ILLEGAL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">set_port</span><span class="token punctuation">(</span>dart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">Retain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// inc refcount before sending to the eventhandler.</span>
    id <span class="token operator">=</span> reinterpret_cast<span class="token generics"><span class="token punctuation">&lt;</span>intptr_t<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  int64_t data <span class="token operator">=</span> <span class="token class-name">DartUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">GetIntegerValue</span><span class="token punctuation">(</span><span class="token class-name">Dart_GetNativeArgument</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  event_handler<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token class-name">SendData</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> dart_port<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他的实现在 native 层的<code>EventHander</code>中名为<code>event handler</code>的子线程中<strong>通过异步 IO 执行任务</strong>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt;</span>

<span class="token keyword">class</span> <span class="token class-name">EventHandler</span> <span class="token punctuation">{</span>
 public<span class="token punctuation">:</span>
  <span class="token class-name">EventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token class-name">SendData</span><span class="token punctuation">(</span>intptr_t id<span class="token punctuation">,</span> <span class="token class-name">Dart_Port</span> dart_port<span class="token punctuation">,</span> int64_t data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">delegate_<span class="token punctuation">.</span></span>SendData</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> dart_port<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的系统实现不同，对于 Android 来说：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; runtime\\bin\\eventhandler_android.cc</span>

<span class="token keyword">void</span> <span class="token class-name">EventHandlerImplementation</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">SendData</span><span class="token punctuation">(</span>intptr_t id<span class="token punctuation">,</span>
                                          <span class="token class-name">Dart_Port</span> dart_port<span class="token punctuation">,</span>
                                          int64_t data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">WakeupHandler</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> dart_port<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">EventHandlerImplementation</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">WakeupHandler</span><span class="token punctuation">(</span>intptr_t id<span class="token punctuation">,</span>
                                               <span class="token class-name">Dart_Port</span> dart_port<span class="token punctuation">,</span>
                                               int64_t data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">InterruptMessage</span> msg<span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>dart_port <span class="token operator">=</span> dart_port<span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token comment">// WriteToBlocking will write up to 512 bytes atomically, and since our msg</span>
  <span class="token comment">// is smaller than 512, we don&#39;t need a thread lock.</span>
  <span class="token comment">// See: http://linux.die.net/man/7/pipe, section &#39;Pipe_buf&#39;.</span>
  <span class="token function">ASSERT</span><span class="token punctuation">(</span>kInterruptMessageSize <span class="token operator">&lt;</span> PIPE_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span>
  intptr_t result <span class="token operator">=</span>
      <span class="token class-name">FDUtils</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token class-name">WriteToBlocking</span><span class="token punctuation">(</span>interrupt_fds_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> kInterruptMessageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> kInterruptMessageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Interrupt message failure:&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">FATAL1</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Interrupt message failure. Wrote %&quot;</span></span> <span class="token class-name">Pd</span> <span class="token string-literal"><span class="token string">&quot; bytes.&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后系统会在时间到了之后，会调用<code>EventHandlerImplementation::HandleEvents</code>通过<code>_send_port</code>发送消息，并触发<code>_receivePort</code>的 hander 也就是<code>_handleMessage</code>方法处理消息。</p><h5 id="handlemessage" tabindex="-1"><a class="header-anchor" href="#handlemessage" aria-hidden="true">#</a> _handleMessage</h5><p>无论是_milliSeconds == 0 的时候<code>_sendPort!.send(_ZERO_EVENT);</code>，还是_milliSeconds != 0 通过<code>EventHandler</code>发送_TIMEOUT_EVENT 消息，最终都会使用<code>_handleMessage</code>处理消息：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>_Timer<span class="token punctuation">&gt;</span></span> pendingTimers<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> _ZERO_EVENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pendingTimers <span class="token operator">=</span> <span class="token function">_queueFromZeroEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>pendingTimers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>msg <span class="token operator">==</span> _TIMEOUT_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
      _scheduledWakeupTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Consumed the last scheduled wakeup now.</span>
      pendingTimers <span class="token operator">=</span> <span class="token function">_queueFromTimeoutEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">_runTimers</span><span class="token punctuation">(</span>pendingTimers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Notify the event handler or shutdown the port if no more pending</span>
    <span class="token comment">// timers are present.</span>
    <span class="token function">_notifyEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>_handleMessage</code>中按照 msg 的类型取出对应的<code>pendingTimers</code>然后再<code>_runTimers</code>中执行，在执行完毕或者遇到错误时，调用<code>_notifyEventHandler()</code>通知<code>event handler</code>或者关闭<code>TimerHandler</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; sdk\\lib\\_internal\\vm\\lib\\timer_impl.dart</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_runTimers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>_Timer<span class="token punctuation">&gt;</span></span> pendingTimers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If there are no pending timers currently reset the id space before we</span>
    <span class="token comment">// have a chance to enqueue new timers.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_heap<span class="token punctuation">.</span>isEmpty <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_firstZeroTimer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _idCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Fast exit if no pending timers.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingTimers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Trigger all of the pending timers. New timers added as part of the</span>
    <span class="token comment">// callbacks will be enqueued now and notified in the next spin at the</span>
    <span class="token comment">// earliest.</span>
    _handlingCallbacks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 在这里遍历处理所有的 pendingTimers</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingTimers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Next pending timer.</span>
        <span class="token keyword">var</span> timer <span class="token operator">=</span> pendingTimers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span>_indexOrNext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token comment">// One of the timers in the pending_timers list can cancel</span>
        <span class="token comment">// one of the later timers which will set the callback to</span>
        <span class="token comment">// null. Or the pending zero timer has been canceled earlier.</span>
        <span class="token keyword">var</span> callback <span class="token operator">=</span> timer<span class="token punctuation">.</span>_callback<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">.</span>_repeating<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Mark timer as inactive.</span>
            timer<span class="token punctuation">.</span>_callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">.</span>_milliSeconds <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> ms <span class="token operator">=</span> timer<span class="token punctuation">.</span>_milliSeconds<span class="token punctuation">;</span>
            int overdue <span class="token operator">=</span>
                <span class="token class-name">VMLibraryHooks</span><span class="token punctuation">.</span><span class="token function">timerMillisecondClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timer<span class="token punctuation">.</span>_wakeupTime<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>overdue <span class="token operator">&gt;</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              int missedTicks <span class="token operator">=</span> overdue <span class="token operator">~/</span> ms<span class="token punctuation">;</span>
              timer<span class="token punctuation">.</span>_wakeupTime <span class="token operator">+=</span> missedTicks <span class="token operator">*</span> ms<span class="token punctuation">;</span>
              timer<span class="token punctuation">.</span>_tick <span class="token operator">+=</span> missedTicks<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          timer<span class="token punctuation">.</span>_tick <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

          <span class="token function">callback</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// Re-insert repeating timer if not canceled.</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">.</span>_repeating <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>timer<span class="token punctuation">.</span>_callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timer<span class="token punctuation">.</span><span class="token function">_advanceWakeupTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            timer<span class="token punctuation">.</span><span class="token function">_enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
					<span class="token comment">// 每次执行完 event 之后，都要执行没有被执行的 micro task</span>
          <span class="token comment">// Execute pending micro tasks.</span>
          <span class="token function">_runPendingImmediateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      _handlingCallbacks <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// Re-queue timers we didn&#39;t get to.</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingTimers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> timer <span class="token operator">=</span> pendingTimers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span><span class="token function">_enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">_notifyEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到，这里依次遍历传入的 pendingTimers，并在每次执行完 event 后，去检查执行一下 micro task。</p><br><p>根据创建 Timer 的时候_milliSeconds 是否等于 0：会分别使用<code>MessageHandler</code><strong>执行</strong>或者在<strong>名为 event handler 的 IO 线程</strong>通过<code>isolate</code>中的<code>MessageHandler</code>来执行任务；最后都会触发 Timer 的<code>_handleMessage</code>方法在<code>_runTimers</code>方法中执行 callback。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>综上，dart 中的方法总共有 3 种，按照优先级从前到后依次是：</p><ol><li>普通的同步方法</li><li>micro task</li><li>其他 event：部分 Future、Timer、点击事件、屏幕刷新等</li></ol><p>在方法执行的时候：</p><ol><li>先执行完毕所有的同步方法；</li><li>然后判断是否有 micro task，有的话就立即执行；</li><li>否则，就执行普通的 event，每次执行完一个 event 就执行一次步骤 2；</li><li>直到当前 app 中既没有 micro task 也没有普通的 event，退出 app。</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,58),v={href:"https://github.com/dart-lang/sdk",target:"_blank",rel:"noopener noreferrer"},b={href:"https://web.archive.org/web/20170704074724/https://webdev.dartlang.org/articles/performance/event-loop",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844904196819402759#heading-0",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844904196819386375",target:"_blank",rel:"noopener noreferrer"},_={href:"https://dart.dev/",target:"_blank",rel:"noopener noreferrer"};function y(f,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("代码参考："),n("a",r,[s("https://gist.github.com/jixiaoyong/ac811902db42a51cf97e3290788ade4a"),t(a)])]),k,n("p",null,[s("具体可以参考"),n("a",d,[s("Flutter 之 Future 原理解析"),t(a)]),s("。")]),m,n("p",null,[n("a",v,[s("dart sdk"),t(a)])]),n("p",null,[n("a",b,[s("The Event Loop and Dart"),t(a)])]),n("p",null,[n("a",g,[s("Flutter 之 Future 原理解析 - 掘金"),t(a)])]),n("p",null,[n("a",h,[s("Flutter 之 Timer 原理解析 - 掘金"),t(a)])]),n("p",null,[n("a",_,[s("Dart 官网"),t(a)])])])}const E=p(i,[["render",y],["__file","db62c118.html.vue"]]);export{E as default};
