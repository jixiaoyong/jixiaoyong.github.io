import{_ as t,r as p,o,c as i,a as s,b as n,d as e,e as l}from"./app-b003f4e2.js";const c={},r=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本文介绍了二叉树，及其应用。</p><p>树，既能像链表那样快速插入和删除，又可以像数组那样快速查找。</p><figure><img src="https://jixiaoyong.github.io/images/20190103200423.png" alt="树" tabindex="0" loading="lazy"><figcaption>树</figcaption></figure><p>每棵树有且只有一个<strong>根</strong>，从根到任何一个节点<strong>有且只有一条路径</strong>；每个节点都可以有 0 个或者多个<strong>子节点</strong>，没有子节点的节点叫做<strong>叶子节点</strong>。</p><p><strong>层</strong>是指从根节点到该节点的“代”树，根节点的在<strong>0 层</strong>。</p><h2 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h2><p>一个节点只能有 0~2 个子节点的树叫做<strong>二叉树</strong>；</p><p>如果二叉树的左子节点的关键字小于该节点，右子节点的关键字大于该节点，则该二叉树称为<strong>二叉搜索树</strong>。</p><p>如下，是一个二叉树的节点：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">BinaryNode</span><span class="token punctuation">(</span><span class="token keyword">val</span> iId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> dData<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">var</span> left<span class="token operator">:</span> BinaryNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">var</span> right<span class="token operator">:</span> BinaryNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">iId</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">dData</span></span><span class="token string">}&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><p>遍历树指安装一定的顺序访问数的每个节点，按照访问节点的顺序不同，可以分为三种：</p><ul><li>前序遍历</li><li>中序遍历</li><li>后序遍历</li></ul><p>以中序遍历为例，其访问节点的顺序如下：</p><ol><li>调用自身遍历该节点的左子树；</li><li>访问这个节点；</li><li>调用自身遍历该节点的右子树。</li></ol><p>实现如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 中序遍历法
 * 使所有节点的关键值按照升序被访问
 */</span>
<span class="token keyword">fun</span> <span class="token function">inTraversing</span><span class="token punctuation">(</span>node<span class="token operator">:</span> BinaryNode<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token function">inTraversing</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">node</span></span><span class="token string">,&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">inTraversing</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最大值和最小值" tabindex="-1"><a class="header-anchor" href="#最大值和最小值" aria-hidden="true">#</a> 最大值和最小值</h3><p>二叉搜索树的最大值是右子树中最右端没有子节点的右子节点；</p><p>二叉搜索树的最小值是左子树中最左端没有子节点的左子节点。</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><p>二叉搜索树因为节点要满足<code>左子节点 &lt; 节点 &lt; 右子节点</code>这个条件，所以删除需要分以下几种情况：</p><p>按照要删除的节点子节点数目的不同，分为 3 种情况</p><ul><li><p>要删除的节点是叶节点 将其父节点的指向设为 null 即可</p></li><li><p>要删除的节点有且只有一个节点 将其父节点指向其子节点</p></li><li><p>要删除的节点有两个子节点 这时候可以找该子节点的右子树中最小的（或者左子树中最大的）节点并替换掉要删除的节点，</p><p>与此同时如果这个节点有右子节点（或对应的左子节点）则按照 2/3 的规则处理，这样就能保证这个树的结构不会出错</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">delete</span><span class="token punctuation">(</span>iId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查找 iId 对应的节点</span>
        <span class="token keyword">var</span> current <span class="token operator">=</span> root
        <span class="token keyword">var</span> parent <span class="token operator">=</span> root
        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">?</span><span class="token punctuation">.</span>iId <span class="token operator">!=</span> iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            parent <span class="token operator">=</span> current
            current <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iId <span class="token operator">&gt;</span> current<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                current<span class="token punctuation">.</span>right
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                current<span class="token punctuation">.</span>left
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/**
         * 按照要删除的节点子节点数目的不同，分为 3 种情况
         * 1/3 要删除的节点是叶节点 将其父节点的指向设为 null 即可
         * 2/3 要删除的节点有且只有一个节点 将其父节点指向其子节点
         * 3/3 要删除的节点有两个子节点 这时候可以找该子节点的右子树中最小的（或者左子树中最大的）节点并替换掉要删除的节点，
         *     与此同时如果这个节点有右子节点（或对应的左子节点）则按照 2/3 的规则处理，这样就能保证这个树的结构不会出错
         *     下面采用的是找该节点的右子树最小值，即右子节点或者右子节点的最后一个左子节点
         *     找到后用该子节点的值替换掉要删除的节点值，如果该子节点还有右子节点，将该子节点的父节点指向其右子节点
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//双子节点</span>

            <span class="token comment">// 当前点右子节点的左子节点为 null</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token operator">!!</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>iId <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right
                <span class="token punctuation">}</span>
                <span class="token comment">//TODO 是否需要将右节点的左子节点指向当前点的左子节点</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">var</span> cChildNode <span class="token operator">=</span> current<span class="token punctuation">.</span>right
            <span class="token keyword">var</span> cParentNode <span class="token operator">=</span> current<span class="token operator">!!</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>cChildNode<span class="token operator">?</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cParentNode <span class="token operator">=</span> cChildNode
                cChildNode <span class="token operator">=</span> cChildNode<span class="token punctuation">.</span>left
            <span class="token punctuation">}</span>

            <span class="token comment">//后继节点</span>
            cParentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> cChildNode<span class="token operator">!!</span><span class="token punctuation">.</span>right
            cChildNode<span class="token operator">!!</span><span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right
            cChildNode<span class="token operator">!!</span><span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>iId <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> cChildNode
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> cChildNode
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//叶子节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>iId <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>iId <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>iId <span class="token operator">&gt;</span> parent<span class="token punctuation">.</span>iId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>left
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="哈夫曼编码" tabindex="-1"><a class="header-anchor" href="#哈夫曼编码" aria-hidden="true">#</a> 哈夫曼编码</h2><p>哈夫曼编码用来对一段文本进行压缩，解压。</p><blockquote><p>压缩：用字符的编码替代字符</p><p>解压：用字符代替对应的编码</p></blockquote><p>实现思路如下：</p><ul><li><pre><code>         将字符按照出现的频次生成优先级队列；
</code></pre></li><li><pre><code>         依次**取出**两个最小的字符，为他们生成一个父节点（父节点频次为两个子节点之和）；
</code></pre></li><li><pre><code>         并将插入优先级队列中，依次循环直到优先级队列中只有一个节点——哈夫曼树的根节点；
</code></pre></li><li><pre><code>         从哈夫曼树的根开始，以向左为 0，向右为 1 对其叶子节点上的字符赋予编码。
</code></pre></li></ul><p>其过程如下图所示：</p><figure><img src="https://jixiaoyong.github.io/images/20190103203447.png" alt="哈夫曼编码示意图" tabindex="0" loading="lazy"><figcaption>哈夫曼编码示意图</figcaption></figure><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2>`,34),u={href:"https://github.com/jixiaoyong/Notes-Files/blob/master/AndroidLearningResource/java_note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/tree/BinaryTree.kt",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"二叉树",-1),k={href:"https://github.com/jixiaoyong/Notes-Files/blob/master/AndroidLearningResource/java_note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/tree/HuffmanCodeUtils.kt",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"哈夫曼编码",-1);function m(b,g){const a=p("ExternalLinkIcon");return o(),i("div",null,[r,s("p",null,[s("a",u,[n("👉 点这里"),e(a)]),n(" 查看"),d,n("源码")]),s("p",null,[s("a",k,[n("👉 点这里"),e(a)]),n(" 查看"),v,n("源码")])])}const f=t(c,[["render",m],["__file","101c73f.html.vue"]]);export{f as default};
