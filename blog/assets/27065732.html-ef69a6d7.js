import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as d,c as u,a as n,b as a,d as s,w as t,e as p}from"./app-67ad359b.js";const r={},k=n("blockquote",null,[n("p",null,"Google 大法 NB！！！(破音)")],-1),v=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),m={href:"https://developer.android.google.cn/jetpack/",target:"_blank",rel:"noopener noreferrer"},g=n("em",null,'"使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上"',-1),_={href:"https://github.com/googlesamples/android-sunflower",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"本文主要是结合 Sunflower 中的示例代码，分析 Jetpack 架构中各部分的作用，以及他们如何巧妙的搭配使用，方便指导日后对 Jetpack 的使用。",-1),b={href:"https://github.com/googlesamples/android-sunflower",target:"_blank",rel:"noopener noreferrer"},q={href:"https://developer.android.google.cn/jetpack/",target:"_blank",rel:"noopener noreferrer"},f=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://jixiaoyong.github.io/images/jetpack_donut.png"},null,-1),y=n("br",null,null,-1),w={style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}},x=n("p",null,"下图是 Sunflower 架构的简单示意图：",-1),M=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/20190124212220.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=n("code",null,"我的花园",-1),A=n("code",null,"植物目录",-1),D=n("code",null,"植物介绍",-1),L=n("strong",null,[n("code",null,"Navigation")],-1),B=n("strong",null,"XML",-1),X=n("code",null,"数据、事件（clickListener等），RecycleView的LayoutManager，Adapter等等",-1),N=n("strong",null,"DataBinding",-1),F=n("strong",null,"ViewModel",-1),G=n("strong",null,"LiveData",-1),R=n("code",null,"数据",-1),P=n("code",null,"LiveData",-1),C=n("code",null,"DataBinding",-1),E=n("code",null,"Adapter",-1),S=n("strong",null,"ListAdapter",-1),J=n("strong",null,"Paging",-1),I=n("code",null,"ItemView",-1),W=n("code",null,"ViewModel",-1),j=n("code",null,"XML",-1),z=n("code",null,"BindingAdapter",-1),U=n("code",null,"XML",-1),O=n("strong",null,[n("code",null,"View")],-1),T=n("code",null,"DataBinding",-1),H=n("strong",null,[n("code",null,"ViewModel")],-1),Q=n("code",null,"ViewModel",-1),K=n("strong",null,[n("code",null,"Model")],-1),Y=n("code",null,"数据库",-1),Z=n("strong",null,[n("code",null,"Lifecycle")],-1),$=p("<p><code>ViewModel</code>的数据来源——<code>Model</code>在这里的实现是一个<code>数据库</code>。每个<code>ViewModel</code>有一个<code>XXXViewModelFactory</code>类，用来使用数据类<code>XXXRepository</code>类的实例创建对应的<code>ViewModel</code>。<code>XXXViewModelFactory</code>向<code>Activity</code>等屏蔽了<code>ViewModel</code>的具体实现。</p><p><code>XXXRepository</code>类的出现时为了将<code>ViewModel</code>与数据的具体实现解耦合，这样<code>ViewModel</code>只需要关心他要的操作而不必关系数据来源的具体实现。在本例中，<code>XXXRepository</code>类对应封装了这数据库<code>AppDatabase</code>中对两个表的操作。</p>",2),nn=n("strong",null,[n("code",null,"Room")],-1),an=n("code",null,"表Entity",-1),sn=n("code",null,"数据访问对象DAO",-1),tn=n("code",null,"数据库DataBase",-1),en=n("code",null,"XXXRepository",-1),on=n("code",null,"ViewModel",-1),pn=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Entity    GardenPlanting    //表，定义了存储的数据项及其格式
@Dao    GardenPlantingDao    //数据访问对象，定义了例如插入数据、查询数据等操作
 GardenPlantingRepository    //对DAO的封装，将数据的的具体实现与ViewModel对数据的操作解耦
@Database     AppDatabase    //数据库，包括表和对表的操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ln=n("code",null,"SeedDatabaseWorker",-1),cn=p('<h1 id="具体实现分析" tabindex="-1"><a class="header-anchor" href="#具体实现分析" aria-hidden="true">#</a> 具体实现分析</h1><p>首先看一下**<code>View</code>**部分，Sunflower 只有简单的 3 个页面，全都是用<code>Fragment</code>实现，由<code>Activity</code>通过<code>Navigation</code>控制切换：</p><ul><li><code>GardenActivity</code> 主页面，唯一的一个 Activity</li><li><code>GardenFragment</code> 我的花园 界面，会显示用户在植物目录中选择并种植的植物信息</li><li><code>PlantListFragment</code> 植物目录 界面，所有的植物信息列表</li><li><code>PlantDetailFragment</code> 植物介绍 界面，当在“我的花园”或“植物列表”选择了某个植物后，会进入该界面显示植物详细介绍</li></ul><h2 id="navigation-控制界面切换" tabindex="-1"><a class="header-anchor" href="#navigation-控制界面切换" aria-hidden="true">#</a> Navigation 控制界面切换</h2>',4),dn={href:"https://developer.android.google.cn/topic/libraries/architecture/navigation/",target:"_blank",rel:"noopener noreferrer"},un=p("<blockquote><p>Navigation 是 APP 设计中的关键部分，可以用来定义用户从不同的界面切换、进入和推出的交互逻辑。</p></blockquote><p>和布局文件一样，我们可以在编译器的可视化界面中，直接预览、设计不同界面切换效果。他可以负责<code>Fragment</code>、<code>Activity</code>、<code>Navigation graphs</code> 与 <code>subgraphs</code> 以及<code>Custom destination types</code>，他们之间通过不同的<code>action</code>连接起来。</p>",2),rn=n("code",null,"Navigation",-1),kn=n("code",null,"AppBar",-1),vn=n("code",null,"ToolBar",-1),mn=n("code",null,"ViewModel",-1),gn=n("code",null,"Activity",-1),_n=n("code",null,"Fragment",-1),hn={href:"https://developer.android.google.cn/topic/libraries/architecture/navigation/navigation-pass-data",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"Bundle",-1),qn=n("code",null,"Safe Args",-1),fn=n("code",null,"Fragment",-1),yn=p(`<p>那么，在<code>Sunflower</code>中<code>Navigation</code>是怎么控制界面切换的呢？</p><p>首先，在<code>res/navigation/</code>目录下面新建一个<code>嵌套导航图(Nested navigation graphs)</code>,定义各个界面之前的切换关系：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">app:</span>startDestination</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/garden_fragment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
//app:startDestination定义了在这个导航图中首次启动展示的界面
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/garden_fragment<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.google.samples.apps.sunflower.GardenFragment<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/my_garden_title<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">tools:</span>layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@layout/fragment_garden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
//action定义了在各个界面的切换关系
        &lt;action
            android:id=&quot;@+id/action_garden_fragment_to_plant_detail_fragment&quot;
            app:destination=&quot;@id/plant_detail_fragment&quot;
            app:enterAnim=&quot;@anim/slide_in_right&quot;//enterAnim等指定执行action时的动画
          .../&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>
        <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
//argument定义了在切换界面时需要带的参数，需要androidx.navigation.safeargs的支持,具体见参考资料-Android Jetpack-Navigation 使用中参数的传递
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>plantId<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">app:</span>argType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>string<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>//参数类型小写
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fragment</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Activity 对应的 XML 中插入该导航：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fragment</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/garden_nav_fragment<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>androidx.navigation.fragment.NavHostFragment<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>defaultNavHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">app:</span>navGraph</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@navigation/nav_garden<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以在 Activity 或者 Fragment 中获取该导航的实力，用来切换界面了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//activity</span>
<span class="token keyword">val</span> navController <span class="token operator">=</span> Navigation<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>garden_nav_fragment<span class="token punctuation">)</span>
<span class="token comment">//fragment 或其他地方</span>
<span class="token keyword">val</span> direction <span class="token operator">=</span> GardenFragmentDirections<span class="token comment">//嵌套导航图中 Fragment 自动生成的类</span>
<span class="token punctuation">.</span><span class="token function">ActionGardenFragmentToPlantDetailFragment</span><span class="token punctuation">(</span>plantId<span class="token punctuation">)</span>
it<span class="token punctuation">.</span><span class="token function">findNavController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="databinding-绑定布局和数据" tabindex="-1"><a class="header-anchor" href="#databinding-绑定布局和数据" aria-hidden="true">#</a> DataBinding 绑定布局和数据</h2><p>Navigation 解决了不同的布局间交互的逻辑，DataBinding 则充当布局 View 和数据（ViewModel、LiveData）之间的桥梁，将二者联系起来。</p>`,9),wn={href:"https://developer.android.google.cn/topic/libraries/data-binding/",target:"_blank",rel:"noopener noreferrer"},xn=p(`<p>DataBinding 在 XML 中的形式如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>
            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewmodel<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.myapp.data.ViewModel<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ConstraintLayout...</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- UI layout&#39;s root element --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是原先的页面布局信息<code>&lt;ConstraintLayout... /&gt;</code>包裹在<code>&lt;layout... /&gt;</code>中，同时多了一个数据域<code>&lt;data... /&gt;</code>，我们可以在其中定义一些变量<code>&lt;variable... /&gt;</code>，并在布局中使用：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{viewmodel.userName}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Mn=n("code",null,"android:text",-1),Vn=n("code",null,"android:onClick",-1),An={href:"https://developer.android.google.cn/topic/libraries/data-binding/binding-adapters.html",target:"_blank",rel:"noopener noreferrer"},Dn=n("strong",null,"Binding adapters",-1),Ln=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@BindingAdapter</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;app:goneUnless&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">goneUnless</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> visible<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> View<span class="token punctuation">.</span>VISIBLE <span class="token keyword">else</span> View<span class="token punctuation">.</span>GONE
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就支持了<code>app:goneUnless</code>的解析，我们只要在 XML 中为组件加上这个属性就可以实现相应的效果：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
          <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{viewmodel.userName}<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">app:</span>goneUnless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{viewmodel.isGone}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们需要在对应的 Activity 或 Fragment 中，用如下代码将布局与页面绑定到一起：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//setContentView(R.layout.activity_main)</span>
<span class="token keyword">val</span> binding<span class="token operator">:</span> ActivityMainBinding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>
binding<span class="token punctuation">.</span>viewmodel <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>ActivityMainBinding</code>类是<code>DataBinding</code>根据 XML 文件的名字自动替我们生成的，规律是<code>XML文件名+Binding</code>的驼峰命名。</p><p>在 Sunflower 中有类似的应用有很多处：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token comment">&lt;!--
  ~ Copyright 2018 Google LLC ...
  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>
                <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hasPlantings<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>boolean<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span>
            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.recyclerview.widget.RecyclerView</span>
                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/garden_list<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name"><span class="token namespace">app:</span>isGone</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{!hasPlantings}<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name"><span class="token namespace">app:</span>layoutManager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>androidx.recyclerview.widget.LinearLayoutManager<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name"><span class="token namespace">tools:</span>listitem</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@layout/list_item_garden_planting<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="viewmodel-管理数据与页面的交互" tabindex="-1"><a class="header-anchor" href="#viewmodel-管理数据与页面的交互" aria-hidden="true">#</a> ViewModel 管理数据与页面的交互</h2><p><code>DataBinding</code>通过标记的形式将数据和组件绑定，在这个过程中他使用的数据则是来自于<code>ViewModel</code>的。在页面<code>Activity</code>(或<code>Fragment</code>) 中，我们可以处理这两者之间的关系。</p><p><code>ViewModel</code>是设计用来以一种可以感知生命周期（<code>lifecycle</code>）的方式存储和管理与 UI 相关的数据，它可以允许数据在诸如屏幕旋转的变化中存活下来，也就是说<code>VideModule</code>的数据生命周期可能要比他附着的<code>Activity</code>或<code>Fragment</code>的生命周期长。</p><p>同时，<code>UI controller</code>可以在<code>Activity</code>等不再需要数据时，自动调用<code>ViewModel</code>的<code>onCleared()</code>方法清除这些数据以避免内存泄漏。</p><p>下图是<code>ViewModel</code>和<code>Activity</code>的生命周期对比：</p>`,13),Bn=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://jixiaoyong.github.io/images/20190202161443.png"},null,-1),Xn=n("br",null,null,-1),Nn={style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}},Fn=n("br",null,null,-1),Gn=p(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> viewModel <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GardenPlantingListViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token function">PlantDetailViewModelFactory</span><span class="token punctuation">(</span>args<span class="token operator">:</span>Any<span class="token punctuation">)</span> <span class="token operator">:</span> ViewModelProvider<span class="token punctuation">.</span><span class="token function">NewInstanceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以将<code>ViewModel</code>于<code>LiveData</code>结合，这样在<code>Activity</code>等地方对<code>LiveData</code>进行订阅后，当<code>LiveData</code>的值发生变化时<code>Activity</code>等可以及时得到通知，而做出相应变化。此外<code>ViewModel</code>与<code>lifecycle</code>的结合可以保证在<code>Activity</code>等生命周期结束后数据得到及时的清理。</p><h2 id="room-保存数据" tabindex="-1"><a class="header-anchor" href="#room-保存数据" aria-hidden="true">#</a> Room 保存数据</h2><blockquote><p>Room 持久性库在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 强大功能的同时，能够流畅的访问数据库。——Android Developers</p></blockquote><p><code>Room</code>需要 3 个元素：</p><ul><li><code>Database</code> 数据库，可以提供对表格的操作方法<code>@DAO</code>。是一个继承自<code>RoomDatabase</code>的抽象类。</li><li><code>Entity</code> 表格，规定了每个表格可以保存的数据格式。是一个普通类。</li><li><code>Dao</code> 数据访问结构（<code>Data Access Object</code>），定义了对表格<code>@Entity</code>中的数据的操作。是一个接口或者抽象类。</li></ul><p>此外，还可以对<code>@DAO</code>进行进一步的封装得到一个<code>XXXRepository</code>类，<code>ViewModel</code>通过这个<code>XXXRepository</code>类来操作数据，从而将其与数据的具体实现解耦。</p><h2 id="workmanager-管理任务" tabindex="-1"><a class="header-anchor" href="#workmanager-管理任务" aria-hidden="true">#</a> WorkManager 管理任务</h2><p><code>WorkManager</code>用来管理即时或定时任务，官方定义是在指定约束条件成熟时可靠的在后台执行对应的任务。</p>`,9),Rn={href:"https://gist.github.com/jixiaoyong/041d8b0775e392302b4cd57a98b4f6fa",target:"_blank",rel:"noopener noreferrer"},Pn=n("p",null,"和他相关的有下面几个关键类：",-1),Cn=n("ul",null,[n("li",null,[n("code",null,"Worker"),a(" 定义要执行的任务内容")]),n("li",null,[n("code",null,"WorkRequest"),a(" 代表一项单独的任务，明确具体要执行的任务内容（Worker）、任务的类型（WorkRequest.Builder 的子类，决定任务一次性还是重复的）以及任务执行的条件（Constraints，如联网、电池电量等等）")]),n("li",null,"WorkManager 执行管理 WorkRequest，安排执行 Worker 中的工作内容。")],-1),En=n("h1",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),Sn={href:"https://developer.android.google.cn/jetpack/",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://blog.csdn.net/weixin_42215792/article/details/80395379",target:"_blank",rel:"noopener noreferrer"};function In(Wn,jn){const e=l("ExternalLinkIcon"),o=l("font"),c=l("center");return d(),u("div",null,[k,v,n("p",null,[n("a",m,[a("Jetpack"),s(e)]),a("是 Google 推出的一系列 Android 软件集合，"),g,a("。")]),n("p",null,[n("a",_,[a("Sunflower"),s(e)]),a("则是 Google 用来演示如何使用 Jetpack 进行 Android 开发的 Demo，有着非常优雅的架构与十分简洁的代码，可以帮助我们很好地学习 Jetpack 以及 MVVM 思想。")]),h,n("blockquote",null,[n("p",null,[a("本文中的大部分代码、示意图除非特殊注明外，皆来自 Google 的"),n("a",b,[a("Sunflower 工程"),s(e)]),a("或其他互联网资源，根据篇幅需要做了部分精简，所有权益归原作者所有。")])]),n("p",null,[a("下图是"),n("a",q,[a("Google Jetpack 官网"),s(e)]),a("对 Jetpack 的介绍图：")]),s(c,null,{default:t(()=>[f,a(),y,a(),n("div",w,[a("Jetpack 示意图 "),s(o,{style:{color:"#BEBEBE"}},{default:t(()=>[a("来自 GoogleJetpack 官网")]),_:1})])]),_:1}),a(" # 对 Sunflower 的整体分析 "),x,M,n("p",null,[a("可以看到，APP 的界面有"),V,a("、"),A,a("和"),D,a("三部分，这三者的切换逻辑通过"),s(o,{color:"#0288d1",size:"4"},{default:t(()=>[L]),_:1}),a("实现。")]),n("p",null,[a("每个界面的"),B,a("中的布局信息（包括"),X,a("）通过"),N,a("与"),F,a("中的可观察数据"),G,a("绑定在一起，只要数据库中的"),R,a("有更新，就会通过"),P,a("主动通知布局更新界面；同时"),C,a("还通过与"),E,a("（这些继承自"),S,a("的 Adapter 实现了"),s(o,{color:"#0288d1",size:"4"},{default:t(()=>[J]),_:1}),a("的作用）将"),I,a("的"),W,a("与布局"),j,a("中绑定在一起，通过"),z,a("对"),U,a("中的数据做预处理（加载 imgUrl 中的图片到 ImageView 等等）。")]),n("p",null,[a("在"),s(o,{color:"black",size:"5"},{default:t(()=>[O]),_:1}),a("中指定这些"),T,a("与"),s(o,{color:"black",size:"5"},{default:t(()=>[H]),_:1}),a("之间以及"),Q,a("与"),s(o,{color:"black",size:"5"},{default:t(()=>[K]),_:1}),Y,a("之间的逻辑关系，这些数据与操作都受着"),s(o,{color:"#0288d1",size:"4"},{default:t(()=>[Z]),_:1}),a("的影响。")]),$,n("p",null,[a("数据库使用"),s(o,{color:"#0288d1",size:"4"},{default:t(()=>[nn]),_:1}),a("实现，从底层开始依次分为"),an,a("，"),sn,a("和"),tn,a("三个层次。每个 DAO 对应一个包装类"),en,a("类供"),on,a("使用。")]),pn,s(o,{color:"#0288d1",size:"4"},{default:t(()=>[a("**`WorkManager`**")]),_:1}),a("则管理着一个从 Json 读取数据并加载到数据库中的后台任务"),ln,a("。"),cn,n("p",null,[a("先看一下"),n("a",dn,[a("Navigation"),s(e)]),a("的定义：")]),un,n("p",null,[a("通过官方文档可知，"),rn,a("可以和"),kn,a("，"),vn,a("等组合起来控制 Fragment 显示，此外可以通过"),mn,a("在绑定到同一个"),gn,a("的"),_n,a("之间共享数据，或者也可以通过"),n("a",hn,[bn,a("或"),qn,s(e)]),a("在两个"),fn,a("之间传递数据。")]),yn,n("p",null,[a("从"),n("a",wn,[a("官网"),s(e)]),a("的表述中我们知道，DataBinding 使用在 XML 中声明的方式（而非编程的方式），将布局中的组件捆绑到 APP 中使用到的数据上，这样当数据更新时，布局也会随之自动更新。")]),xn,n("p",null,[a("除了常见的"),Mn,a("，"),Vn,a("等通用的属性可以直接绑定外，我们还可以通过自定义"),n("a",An,[Dn,s(e)]),a("支持更多形式的属性绑定：")]),Ln,s(c,null,{default:t(()=>[Bn,a(),Xn,a(),n("div",Nn,[a("ViewModel 和 Activity 的生命周期对比图：左图 Activity 先经历了一次旋转，然后 finish，右边是与此相关的 ViewModel 的生命周期"),Fn,s(o,{style:{color:"#BEBEBE"}},{default:t(()=>[a("来自 GoogleJetpack 官网")]),_:1})])]),_:1}),a(" 此外，由于默认的获取 ViewModel 的方法只能调取无参构造函数，当需要向 ViewModel 传递参数时，就需要用到 Factory 工厂模式来创建 ViewModel： "),Gn,n("p",null,[a("具体使用可以参考这个"),n("a",Rn,[a("GIST"),s(e)]),a("。")]),Pn,Cn,En,n("p",null,[n("a",Sn,[a("Android Jetpack 官网"),s(e)])]),n("p",null,[n("a",Jn,[a("Android Jetpack-Navigation 使用中参数的传递"),s(e)])])])}const On=i(r,[["render",In],["__file","27065732.html.vue"]]);export{On as default};
