import{_ as o,r as p,o as l,c,a as n,b as s,d as t,e}from"./app-b410525b.js";const i={},r=e(`<blockquote><p>本文为笔记性质，尚未成文，待整理</p></blockquote><h2 id="异步流" tabindex="-1"><a class="header-anchor" href="#异步流" aria-hidden="true">#</a> 异步流</h2><ol><li>lazy 方式创建一个序列，只有在访问的时候才生产对应的项目</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Sequence<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> sequence<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">//会阻塞调用线程</span>
        <span class="token function">yield</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//生产一个项目</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u={start:"2"},k=n("p",null,"使用 Flow 流在不阻塞主线程的情况下，延迟生产多个值并返回",-1),d={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//flow 构建器中的代码直到流被收集的时候才运行，并且每次 collect 都会被启动</span>
<span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span> <span class="token comment">// 流构建器</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 假装我们在这里做了一些有用的事情，这里可以被取消</span>
        <span class="token function">emit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 发送下一个值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启动并发的协程以验证主线程并未阻塞</span>
    launch <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m not blocked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">k</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 收集这个流</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-of.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("使用 "),n("code",null,".asFlow()"),s(" 扩展函数，可以将各种集合与序列转换为流。")],-1),b=n("p",null,[s("可以使用操作符转换流，就像使用集合与序列一样。过渡操作符应用于上游流，并返回下游流。这些操作符也是冷操作符，就像流一样。这类操作符（"),n("code",null,"map"),s("、"),n("code",null,"fliter"),s("...）本身不是挂起函数，但是可以调用挂起函数"),n("code",null,"suspend"),s("。它运行的速度很快，返回新的转换流的定义。")],-1),f={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/transform.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"transform",-1),w={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/take.html",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This line will not execute&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Finally in numbers&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 只获取前两个</span>
        <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流构造器中的协程上下文默认和 collect 的协程上下文一致，如果强行转换上下文会出错。</p><p>而使用<code>flowOn()</code>则可以指定流创建的协程上下文：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 假装我们以消耗 CPU 的方式进行计算</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Emitting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">emit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 发射下一个值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">flowOn</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token comment">// 在流构建器中改变消耗 CPU 代码上下文的正确方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),q={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"buffer()",-1),I=n("code",null,"buffer()",-1),E=e(`<blockquote><p>It will use two coroutines for execution of the code. A coroutine <code>Q</code> that calls this code is going to execute <code>collect</code>, and the code before <code>buffer</code> will be executed in a separate new coroutine <code>P</code> concurrently with <code>Q</code></p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// buffer emissions, don&#39;t wait</span>
        <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are processing it for 300 ms</span>
            <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并-conflate" tabindex="-1"><a class="header-anchor" href="#合并-conflate" aria-hidden="true">#</a> 合并 conflate</h2>`,3),M={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/conflate.html",target:"_blank",rel:"noopener noreferrer"},z=e(`<p>当 collect 比构建慢的时候，就只会请求最新的值，而跳过中间生产的这些值。</p><p>比如，构建器生产了 1，2，... ,100 这些数，而 collect 读取的慢，第一次读的时候是 1，等处理完再读取的时候构建器生产的是 5，那么 collect 就读取 5，中间的 2，3，4 都会被丢弃。</p><p>Conflation is one way to speed up processing when both the emitter and collector are slow . The other way is to cancel a slow collector and restart it every time a new value is emitted.</p><p><code>collectLatest</code>可以保证每次都获取最新的值，如果 collect 比生产慢，那么当新的值生产出来时，collect 会被取消，并且去处理最新的值。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are asynchronously waiting 100 ms</span>
        <span class="token function">emit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// emit next value</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collectLatest</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token comment">// cancel &amp; restart on the latest value</span>
                    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Collecting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are processing it for 300 ms</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Collected in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//output</span>
Collecting <span class="token number">1</span>
Collecting <span class="token number">2</span>
Collecting <span class="token number">3</span>
Done <span class="token number">3</span>
Collected <span class="token keyword">in</span> <span class="token number">694</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组合多个流" tabindex="-1"><a class="header-anchor" href="#组合多个流" aria-hidden="true">#</a> 组合多个流</h2><p><code>zip</code>将两个流“压缩”为一个流：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">val</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> strs <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span>
    number<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span>
        <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token number">1</span> <span class="token operator">-&gt;</span> one
<span class="token number">2</span> <span class="token operator">-&gt;</span> two
<span class="token number">3</span> <span class="token operator">-&gt;</span> three
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),F={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"combine",-1),D=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// numbers 1..3 every 300 ms</span>
<span class="token keyword">val</span> strs <span class="token operator">=</span> <span class="token function">flowOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;two&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;three&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// strings every 400 ms</span>
<span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember the start time</span>
nums<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">b</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span> <span class="token comment">// compose a single string with &quot;combine&quot;</span>
    <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token comment">// collect and print</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ms from start&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//output</span>
<span class="token number">1</span> <span class="token operator">-&gt;</span> one at <span class="token number">452</span> ms from start
<span class="token number">2</span> <span class="token operator">-&gt;</span> one at <span class="token number">651</span> ms from start
<span class="token number">2</span> <span class="token operator">-&gt;</span> two at <span class="token number">854</span> ms from start
<span class="token number">3</span> <span class="token operator">-&gt;</span> two at <span class="token number">952</span> ms from start
<span class="token number">3</span> <span class="token operator">-&gt;</span> three at <span class="token number">1256</span> ms from start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-concat.html",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"flatMapConcat",-1),U=n("code",null,"Array<Array<Int>>",-1),A=n("code",null,"Array<Int>",-1),B=n("code",null,"flatMapConcat",-1),N={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"flatMapMerge",-1),J=n("code",null,"flatMapMerge",-1),L={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"flatMapLatest",-1),P={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-latest.html",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"collectLatest",-1),H=n("h2",{id:"流异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#流异常","aria-hidden":"true"},"#"),s(" 流异常")],-1),Q=n("p",null,"流的异常有如下捕获方式：",-1),V={href:"https://kotlinlang.org/docs/reference/exceptions.html",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"try/catch",-1),X={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html",target:"_blank",rel:"noopener noreferrer"},Z=n("li",null,[n("h4",{id:"声明式捕获-将-collect-的主要逻辑放到-oneach-中-保证-oneach-在-catch-之前",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#声明式捕获-将-collect-的主要逻辑放到-oneach-中-保证-oneach-在-catch-之前","aria-hidden":"true"},"#"),s(" 声明式捕获 将 collect 的主要逻辑放到 onEach 中，保证 onEach 在 catch 之前")])],-1),W=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>
            <span class="token function">check</span><span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Collected value&quot;</span></span> <span class="token punctuation">}</span>
        <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught e&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流完成" tabindex="-1"><a class="header-anchor" href="#流完成" aria-hidden="true">#</a> 流完成</h2><ol><li><p><code>try</code>/<code>finally</code></p></li><li><p><code>onCompletion()</code></p></li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onCompletion</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且他还可以判断是否是异常退出。但是只是判断，并不会处理、拦截异常，并且只能处理上游的异常。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">onCompletion</span> <span class="token punctuation">{</span> cause <span class="token operator">-&gt;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Flow completed exceptionally&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> cause <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught exception&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="launchin-this-与-collect" tabindex="-1"><a class="header-anchor" href="#launchin-this-与-collect" aria-hidden="true">#</a> launchIn(this) 与 collect</h2><p><code>collect</code>后的代码只有在 collect 执行完后才能执行，而<code>launchIn</code>可以指定其在单独的协程程序中启动流的集合，从而不会阻塞当前协程。</p><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h2>`,9),Y={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html",target:"_blank",rel:"noopener noreferrer"},nn=n("br",null,null,-1),sn=n("p",null,[n("code",null,"send"),s(" 发送 缓存区已满或不存在时调用方会被挂起")],-1),an=n("p",null,[n("code",null,"channel.receive()"),s(" 接收")],-1),tn=n("p",null,[n("code",null,"channel.close()"),s(" 关闭通道，表示没有更多的元素进入通道")],-1),en={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"CoroutineScope.produce",-1),pn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/index.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"ReceiveChannel<T>",-1),rn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"ReceiveChannel<E>.consumeEach",-1),kn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/index.html",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/cancel.html",target:"_blank",rel:"noopener noreferrer"},hn=e(`<p><code>tickerChannel</code> 定时返回<code>Unit</code>的<code>channel</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">val</span> tickerChannel <span class="token operator">=</span> <span class="token function">ticker</span><span class="token punctuation">(</span>delayMillis <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> initialDelayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 创建计时器通道</span>

    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>tickerChannel<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 每隔 1s 会打印一个 kotlin.Unit</span>
    <span class="token punctuation">}</span>

    tickerChannel<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 表明不再需要更多的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flow-channel-sequence-的区别" tabindex="-1"><a class="header-anchor" href="#flow-channel-sequence-的区别" aria-hidden="true">#</a> Flow/Channel/Sequence 的区别</h2><p><code>Flow</code>是用来异步返回多个值，其内部操作可以挂起</p><p><code>Channel</code> 用来在协程之间传递多个值（transfer a stream of values）</p><p><code>Sequence</code> 用来逐个在 item 中延迟执行完整操作，相比于<code>list</code>等整体执行完毕才进行下一级操作的“弓”字型，<code>Sequence</code>多级操作是逐个 item 依次完整执行多级操作的“几”字型。</p><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道</h2><p>管道指：1.一个协程在流中开始生产无穷多个元素 2.另一个或多个协程消费这些流</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">produceNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 从 1 开始生产整数</span>
    <span class="token keyword">val</span> squares <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token comment">// 对整数做平方</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span>squares<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 打印前 5 个数字</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done!&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 我们的操作已经结束了</span>
    coroutineContext<span class="token punctuation">.</span><span class="token function">cancelChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取消子协程</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">produceNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 从 1 开始的无限的整数流</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span>numbers<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> produce <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有缓冲的通道：如果发送先被调用，则它将被挂起直到接收被调用，如果接收先被调用，它将被挂起直到发送被调用。</p>`,10),mn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"capacity",-1),fn=n("em",null,"缓冲区大小",-1),gn=n("code",null,"BlockingQueue",-1),_n=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> channel <span class="token operator">=</span> Channel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 启动带缓冲的通道</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送和接收操作是 <em>公平的</em> 并且尊重调用它们的多个协程。它们遵守先进先出原则。</p>`,2),xn=n("code",null,"Unit",-1),wn=n("code",null,"tickerChannel.receive()",-1),yn=n("code",null,"null",-1),Cn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/index.html",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"TickerModel",-1),Sn=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> tickerChannel <span class="token operator">=</span>  <span class="token function">ticker</span><span class="token punctuation">(</span>delayMillis <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> initialDelayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>mode <span class="token operator">=</span> TickerMode<span class="token punctuation">.</span>FIXED_PERIOD<span class="token punctuation">)</span> <span class="token comment">//创建计时器通道 mode 默认为 TickerMode.FIXED_PERIOD</span>
 tickerChannel<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//第一次调用立马返回 Unit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>coroutineContext.cancelChildren()</code> // 取消所有的子协程来让主协程结束</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="异常的传播" tabindex="-1"><a class="header-anchor" href="#异常的传播" aria-hidden="true">#</a> 异常的传播</h3>`,4),In={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html",target:"_blank",rel:"noopener noreferrer"},En={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"Thread.uncaughtExceptionHandler",-1),Rn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,[s("协程内部使用 "),n("code",null,"CancellationException"),s(" 来进行取消，这个异常会被所有的处理者忽略，所以那些可以被 "),n("code",null,"catch"),s(" 代码块捕获的异常仅仅应该被用来作为额外调试信息的资源。")],-1),An=n("code",null,"CancellationException",-1),Bn={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/composing-suspending-functions.md#structured-concurrency-with-async",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html",target:"_blank",rel:"noopener noreferrer"},On={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html",target:"_blank",rel:"noopener noreferrer"},jn=n("p",null,"异常被抛出后，所有同级的子协程都会被关闭，然后异常传递给父协程，直到异常被处理。",-1),Pn=n("p",null,"一个协程的多个子协程抛出异常将会发生什么？通常的规则是“第一个异常赢得了胜利“。",-1),Gn=n("h3",{id:"监督",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#监督","aria-hidden":"true"},"#"),s(" 监督")],-1),Hn=n("p",null,"普通的取消 是一种双向机制，在协程的整个层次结构之间传播。",-1),Qn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html",target:"_blank",rel:"noopener noreferrer"},Vn=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>val supervisor = SupervisorJob()with(CoroutineScope(coroutineContext + supervisor)) {

}
supervisor取消的话，会取消掉所有子协程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="监督作业" tabindex="-1"><a class="header-anchor" href="#监督作业" aria-hidden="true">#</a> 监督作业</h5>`,2),Kn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job.html",target:"_blank",rel:"noopener noreferrer"},Zn=n("h5",{id:"监督作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#监督作用域","aria-hidden":"true"},"#"),s(" 监督作用域")],-1),Wn=n("em",null,"作用域",-1),Yn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html",target:"_blank",rel:"noopener noreferrer"},as=n("h5",{id:"监督协程中的异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#监督协程中的异常","aria-hidden":"true"},"#"),s(" 监督协程中的异常")],-1),ts=n("p",null,"常规的作业和监督作业之间的另一个重要区别是异常处理。每一个子作业应该通过异常处理机制处理自身的异常。这种差异来自于子作业的执行失败不会传播给它的父作业的事实。",-1),es=n("h3",{id:"协程的线程安全",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#协程的线程安全","aria-hidden":"true"},"#"),s(" 协程的线程安全")],-1),os=e(`<li><p>使用线程安全的数据结构</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以细粒度限制线程</p></li><li><p>以粗粒度限制线程</p><p>2、3 都是保证将对共享变量的操作限制在同一个线程中，从而保证线程安全。</p></li>`,3),ps=n("p",null,"互斥",-1),ls={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html",target:"_blank",rel:"noopener noreferrer"},cs=n("p",null,"Actors",-1),is={href:"https://en.wikipedia.org/wiki/Actor_model",target:"_blank",rel:"noopener noreferrer"},rs=n("em",null,"通道",-1),us=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 这个函数启动一个新的计数器 actor</span>
<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">counterActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> actor<span class="token operator">&lt;</span>CounterMsg<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// actor 状态</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>msg <span class="token keyword">in</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 即将到来消息的迭代器</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> IncCounter <span class="token operator">-&gt;</span> counter<span class="token operator">++</span>
            <span class="token keyword">is</span> GetCounter <span class="token operator">-&gt;</span> msg<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//1.要递增状态时</span>
counter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>IncCounter<span class="token punctuation">)</span>
<span class="token comment">//2.要获取当前状态时</span>
<span class="token comment">// 发送一条消息以用来从一个 actor 中获取计数值</span>
<span class="token keyword">val</span> response <span class="token operator">=</span> CompletableDeferred<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
counter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">GetCounter</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ks={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html",target:"_blank",rel:"noopener noreferrer"},hs=n("code",null," SendChannel .send()",-1),ms=n("code",null,"counter++",-1),vs=n("p",null,"actor 在高负载下比锁更有效，因为在这种情况下它总是有工作要做，而且根本不需要切换到不同的上下文。",-1),bs={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html",target:"_blank",rel:"noopener noreferrer"},gs=n("h2",{id:"select-表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#select-表达式","aria-hidden":"true"},"#"),s(" Select 表达式")],-1),_s={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.selects/select.html",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html",target:"_blank",rel:"noopener noreferrer"},ws=n("em",null,"同时",-1),ys=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">selectFizzBuzz</span><span class="token punctuation">(</span>fizz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span> buzz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;Unit&gt; 意味着该 select 表达式不返回任何结果</span>
        fizz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// 这是第一个 select 子句</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fizz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        buzz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// 这是第二个 select 子句</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;buzz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Cs={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/on-send.html",target:"_blank",rel:"noopener noreferrer"},Ss=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">produceNumbers</span><span class="token punctuation">(</span>side<span class="token operator">:</span> SendChannel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 生产从 1 到 10 的 10 个数值</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 延迟 100 毫秒</span>
        select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 发送到主通道</span>
            side<span class="token punctuation">.</span><span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 或者发送到 side 通道</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Is={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/on-await.html",target:"_blank",rel:"noopener noreferrer"},Es=n("iframe",{width:"853",height:"480",src:"https://embed.coggle.it/diagram/Xb_CZoumpCamgUAj/1235701ea5f157867e045f0f5ac28f886effdb5fa1e27b72afa5266e6e3e8891",frameborder:"0",allowfullscreen:""},null,-1),Ms=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),zs={href:"https://blog.csdn.net/u013064109/article/details/83507076",target:"_blank",rel:"noopener noreferrer"},Fs={href:"https://www.kotlincn.net/docs/reference/coroutines/flow.html",target:"_blank",rel:"noopener noreferrer"};function Rs(Ds,Ts){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,n("ol",u,[n("li",null,[k,n("p",null,[s("当流在一个可取消的挂起函数（例如 "),n("a",d,[s("delay"),t(a)]),s("）中挂起的时候取消，否则不能取消。")])])]),h,n("p",null,[n("a",m,[s("flowOf"),t(a)]),s(" 构建器定义了一个发射固定值集的流。")]),v,b,n("p",null,[s("在流转换操作符中，最通用的一种称为 "),n("a",f,[s("transform"),t(a)]),s("。它可以用来模仿简单的转换，例如 "),n("a",g,[s("map"),t(a)]),s(" 与 "),n("a",_,[s("filter"),t(a)]),s("，以及实施更复杂的转换。使用 "),x,s(" 操作符，我们可以 "),n("a",w,[s("发射"),t(a)]),s(" 任意值任意次")]),n("p",null,[s("限长过渡操作符（例如 "),n("a",y,[s("take"),t(a)]),s("）在流触及相应限制的时候会将它的执行取消。")]),C,n("p",null,[s("如果 flow 的生产和收集很消耗时间时，可以用"),n("a",q,[S,t(a)]),s("函数将"),I,s("之前的代码在一个单独的协程运行，collect 则在调用协程运行，这样将 flow 的构建、收集由串行转化为并行可以节约时间（如果构建运行的快，则会挂起直到 collect 赶上来）。")]),E,n("p",null,[n("a",M,[s("conflate"),t(a)]),s(" operator can be used to skip intermediate values when a collector is too slow to process them.")]),z,n("p",null,[s("当 flow 表示变量或操作的最新值时 (参见关于合并的相关章节) ，可能需要执行依赖于相应流的最新值的计算，并在任何上游流发出值时重新计算它。相应的操作符族称为联合操作符 "),n("a",F,[R,t(a)]),s("。即每个构建值发生变化时都会触发 collect。")]),D,n("p",null,[n("a",T,[$,t(a)]),s(" 可以将 flow 的内容“抹平”（即假设原先为"),U,s("，则押平后为："),A,s("）。串行执行，即先执行代码块，然后对其"),B,s("，然后 collect，之后再执行下一轮的 Flow 项目。")]),n("p",null,[n("a",N,[O,t(a)]),s(" 按顺序调用它的代码块，但是同时收集结果流，这相当于首先执行一个顺序映射，然后对结果调用 flattonmerge。并行执行，先依次对 Flow 项目调用代码块，然后哪个值先出来，就先对其调用 "),J,s("，然后 collect。")]),n("p",null,[n("a",L,[j,t(a)]),s(" 类似 "),n("a",P,[G,t(a)]),s(" ，每次新值出来就会取消还没有处理结束的旧流的操作。")]),H,Q,n("ol",null,[n("li",null,[n("p",null,[n("a",V,[K,t(a)]),s(" block")])]),n("li",null,[n("p",null,[s("透明捕获 "),n("a",X,[s("catch"),t(a)]),s(" ，只会捕获发送在他之前的异常")])]),Z]),W,n("p",null,[n("a",Y,[s("Channel"),t(a)]),s(" 类似于 BlockingQueue。但他的操作是挂起的。"),nn,s(" Channel 提供了在协程之间传递多个值的方法")]),sn,an,tn,n("p",null,[n("a",en,[on,t(a)]),s(" Launches new coroutine to produce a stream of values by sending them to a channel and returns a reference to the coroutine as a "),n("a",pn,[s("ReceiveChannel"),t(a)]),s(". This resulting object can be used to "),n("a",ln,[s("receive"),t(a)]),s(" elements produced by this coroutine. 在新的协程中生产并返回了一个"),cn,s("对象。")]),n("p",null,[n("a",rn,[un,t(a)]),s(" 遍历 ReceiveChannel 的 item 执行指定 action，并在块执行完毕后消耗掉这个 ReceiveChannel（调用 cancel()）。")]),n("p",null,[n("a",kn,[s("ReceiveChannel"),t(a)]),s("."),n("a",dn,[s("cancel()"),t(a)]),s(" 取消接收来自这个通道的剩余元素，关闭通道并从中删除所有缓存的元素。")]),hn,n("p",null,[s("带缓冲的通道： "),n("a",mn,[s("Channel()"),t(a)]),s(" 工厂函数与 "),n("a",vn,[s("produce"),t(a)]),s(" 建造器通过一个可选的参数 "),bn,s(" 来指定 "),fn,s("。缓冲允许发送者在被挂起前发送多个元素，就像 "),gn,s(" 有指定的容量一样，当缓冲区被占满的时候将会引起阻塞。")]),_n,n("p",null,[s("计时器通道是一种特别的会合通道，每次经过特定的延迟都会从该通道进行消费并产生 "),xn,s(" 。如果在间隔还没到的时候调用"),wn,s("则会返回"),yn,s("。产生的间隔由"),n("a",Cn,[qn,t(a)]),s("控制")]),Sn,n("p",null,[s("协程构建器有两种风格：自动的传播异常（"),n("a",In,[s("launch"),t(a)]),s(" 以及 "),n("a",En,[s("actor"),t(a)]),s("）或者将它们暴露给用户（"),n("a",Mn,[s("async"),t(a)]),s(" 以及 "),n("a",zn,[s("produce"),t(a)]),s("）。前者对待异常是不处理的，类似于 Java 的 "),Fn,s("，而后者依赖用户来最终消耗异常，比如说，通过 "),n("a",Rn,[s("await"),t(a)]),s(" 或 "),n("a",Dn,[s("receive"),t(a)])]),n("p",null,[n("a",Tn,[s("CoroutineExceptionHandler"),t(a)]),s(" 仅在预计不会由用户处理的异常上调用，所以在 "),n("a",$n,[s("async"),t(a)]),s(" 构建器中注册它没有任何效果。")]),Un,n("p",null,[s("如果协程遇到除 "),An,s(" 以外的异常，它将取消具有该异常的父协程。这种行为不能被覆盖，且它被用来提供一个稳定的协程层次结构来进行"),n("a",Bn,[s("结构化并发"),t(a)]),s("而无需依赖 "),n("a",Nn,[s("CoroutineExceptionHandler"),t(a)]),s(" 的实现。且当所有的子协程被终止的时候，原本的异常被父协程所处理。")]),n("p",null,[s("应该将"),n("a",On,[s("CoroutineExceptionHandler"),t(a)]),s(" 总是被设置在由 "),n("a",Jn,[s("GlobalScope"),t(a)]),s(" 启动的协程中。将异常处理者设置在 "),n("a",Ln,[s("runBlocking"),t(a)]),s(" 主作用域内启动的协程中是没有意义的，尽管子协程已经设置了异常处理者，但是主协程也总是会被取消的。")]),jn,Pn,Gn,Hn,n("p",null,[s("SupervisorJob 它类似于常规的 "),n("a",Qn,[s("Job"),t(a)]),s("，但他的取消只会向下传播")]),Vn,n("p",null,[n("a",Kn,[s("SupervisorJob"),t(a)]),s(" 可以被用于这些目的。它类似于常规的 "),n("a",Xn,[s("Job"),t(a)]),s("，唯一的不同是：SupervisorJob 的取消只会向下传播。这是非常容易从示例中观察到的：")]),Zn,n("p",null,[s("对于"),Wn,s("的并发，"),n("a",Yn,[s("supervisorScope"),t(a)]),s(" 可以被用来替代 "),n("a",ns,[s("coroutineScope"),t(a)]),s(" 来实现相同的目的。它只会单向的传播并且当子作业自身执行失败的时候将它们全部取消。它也会在所有的子作业执行结束前等待，就像 "),n("a",ss,[s("coroutineScope"),t(a)]),s(" 所做的那样。")]),as,ts,es,n("ol",null,[os,n("li",null,[ps,n("p",null,[s("类似于线程的锁，协程的 "),n("a",ls,[s("Mutex"),t(a)]),s(" 的 lock 和 unlock 方法可以保证同一时间只有一个协程访问指定代码。Mutex 不会阻塞线程。")])]),n("li",null,[cs,n("p",null,[s("一个 "),n("a",is,[s("actor"),t(a)]),s(" 是由协程、被限制并封装到该协程中的状态以及一个与其它协程通信的 "),rs,s(" 组合而成的一个实体。")]),us,n("p",null,[n("a",ks,[s("CompletableDeferred"),t(a)]),s(" 通信原语表示未来可知（可传达）的单个值。")]),n("p",null,[s("在使用时，由于 actor 是一个协程，"),n("a",ds,[hs,t(a)]),s(" 方法会在通道缓存满的时候挂起调用方，从而最终保证了"),ms,s("方法是依次执行的，不会产生并发问题。")]),vs])]),n("blockquote",null,[n("p",null,[s("注意，"),n("a",bs,[s("actor"),t(a)]),s(" 协程构建器是一个双重的 "),n("a",fs,[s("produce"),t(a)]),s(" 协程构建器。一个 actor 与它接收消息的通道相关联，而一个 producer 与它发送元素的通道相关联。")])]),gs,n("p",null,[n("a",_s,[s("select"),t(a)]),s(" 表达式允许我们使用其 "),n("a",xs,[s("onReceive"),t(a)]),s(" 子句 "),ws,s(" 从两个生产者接收数据：")]),ys,n("p",null,[n("a",Cs,[s("onReceiveOrNull"),t(a)]),s(" 可以允许为空，这样可以在关闭通道时执行特定操作")]),n("p",null,[n("a",qs,[s("onSend"),t(a)]),s(" 子句 发送消息")]),Ss,n("p",null,[s("Select 延迟值可以使用 "),n("a",Is,[s("onAwait"),t(a)]),s(" 子句查询")]),Es,Ms,n("p",null,[n("a",zs,[s("Kotlin 的独门秘籍 Reified 实化类型参数 (下篇)"),t(a)])]),n("p",null,[n("a",Fs,[s("Kotlin 协程 中文官网--异步流"),t(a)])])])}const Us=o(i,[["render",Rs],["__file","fd5546ac.html.vue"]]);export{Us as default};
