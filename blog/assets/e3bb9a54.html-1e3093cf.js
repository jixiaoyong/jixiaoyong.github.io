import{_ as i,r as n,o as a,c as l,a as o,b as e,d as r,e as g}from"./app-b6d82bb7.js";const s={},d={href:"http://gityuan.com/android/",target:"_blank",rel:"noopener noreferrer"},p=o("p",null,"Android 系统大体分为 4 个模块，从底层开始依次是 1.linux 内核、2.系统库+Android 运行时、3.框架层、4.应用层。",-1),c=o("figure",null,[o("img",{src:"https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/AndroidSystemArchitecture.png",alt:"",tabindex:"0",loading:"lazy"}),o("figcaption")],-1),u=o("p",null,"下图描述了 Android 系统从开机到 Apk 运行的整个流程。",-1),m=o("img",{src:"https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/androidBoot.jpg",alt:"系统启动框架图，来自 gityuan.com",tabindex:"0",loading:"lazy"},null,-1),h={href:"http://gityuan.com",target:"_blank",rel:"noopener noreferrer"},_=g('<p>流程如下：<code>Loader</code> -&gt; <code>Kernel</code> -&gt; <code>Native</code>-&gt; <code>Framework</code> -&gt; <code>App</code></p><p><strong>Loader 层</strong></p><ol><li>Boot ROM：开机时，引导芯片从 ROM 读取读取初始化代码，加载引导程序到 RAM 中。</li><li>Boot Loader：是启动 Android 系统之前的引导程序，检查 RAM、初始化硬件参数等。</li></ol><p><strong>Kernel 层</strong>（即 Android 内核层，进入 Android 系统）</p><ol><li>swapper 进程（pid=0）：Boot Loader 启动 swapper（idle）进程，是由内核创建的第一个进程，用来初始化进程管理、内存管理、驱动等等。</li><li>kthreadd 进程（pid=2）：是 Linux 系统的内核进程，<strong>是所有内核进程的鼻祖</strong>。</li></ol><hr><p><strong>Syscall</strong>，在 Native 和 Kernel 之间的系统调用层。</p><hr><p><strong>Native 层</strong></p><ol><li>init 进程（pid=1）：由 swapper 进程创建，<strong>是所有用户进程鼻祖</strong></li><li>init 进程孵化出用户守护进程、启动 ServiceManager 管理系统服务，启动开机动画 Bootnaim。</li></ol><hr><p><strong>JNI</strong>，Java 层和 Native（C/C++）层之间。</p><hr><p><strong>Framework 层</strong></p><ol><li>Zygote 进程：由 init 进程 fork 生成，是<strong>Android 系统第一个 java 进程，是所有 java 进程的父进程</strong></li><li>SystemServer 进程：由 Zygote 进程 fork 而来，<strong>是 Zygote 孵化的第一个进程</strong>，负责启动和管理整个<strong>java framework</strong>，如 ActivityManager、PowerManager...</li><li>MediaServer 进程：由 init 进程 fork 而来，负责启动和管理整个<strong>C++ framework</strong></li></ol><p><strong>APP 层</strong></p><ol><li>Launcher：<strong>Zygote 进程孵化的第一个 App 进程</strong>，桌面 App。</li><li>其他由 Zygote 进程孵化的系统进程（Browser、Phone...）和非系统 app 进程。</li></ol><p>扼要内容如图：</p><figure><img src="https://raw.githubusercontent.com/jixiaoyong/jixiaoyong.github.io/master/images/blog/2018-02/AndroidBootImg.png" alt="系统启动示意图" tabindex="0" loading="lazy"><figcaption>系统启动示意图</figcaption></figure><p>Android 常用的通信方式</p><ol><li>Binder</li><li>Socket</li><li>Handler</li></ol><p><strong>Binder/Socket 用于进程间（都具有独立的地址空间）通信，而 Handler 消息机制用于同进程的线程间（共享内存空间）通信</strong></p><p>在 Android 系统中：</p><ul><li>Zygote 进程 --&gt; Socket 机制</li><li>SystemServer、MediaServer、App 之间 --&gt; Binder IPC</li><li>同一进程不同线程间 --&gt; Handler</li></ul>',24);function y(f,A){const t=n("ExternalLinkIcon");return a(),l("div",null,[o("blockquote",null,[o("p",null,[e("说明：本文基于"),o("a",d,[e("Android 系统开篇 - Gityuan 博客 | 袁辉辉博客"),r(t)]),e(" 的学习笔记整理")])]),p,c,u,o("figure",null,[m,o("figcaption",null,[e("系统启动框架图，来自 "),o("a",h,[e("gityuan.com"),r(t)])])]),_])}const k=i(s,[["render",y],["__file","e3bb9a54.html.vue"]]);export{k as default};
