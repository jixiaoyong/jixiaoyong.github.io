const e=JSON.parse('{"key":"v-6eae82a2","path":"/posts/8d60b485.html","title":"加载已安装应用、未安装apk中的资源","lang":"zh-CN","frontmatter":{"permalink":"/posts/8d60b485.html","title":"加载已安装应用、未安装apk中的资源","abbrlink":"8d60b485","date":"2018-04-15T21:40:32.000Z","tag":"android","description":"加载已安装应用、未安装apk中的资源，其思路主要是获取到对应的ClassLoader/Context，通过ClassLoader加载R.java等类，再通过反射获取对应的资源id及资源。 加载已安装应用资源 sharedUserId 在当前应用中加载已安装的其他应用资源，需要二者有相同的sharedUserId，这样Android系统为二者分配同一个Linux用户ID，两个App可以相互访问代码、资源等。 通过Shared User id,拥有同一个User id的多个APK可以配置成运行在同一个进程中.所以默认就是可以互相访问任意数据. 也可以配置成运行成不同的进程, 同时可以访问其他APK的数据目录下的数据库和文件.就像访问本程序的数据一样。 Android逆向之旅---Android中的sharedUserId属性详解 - CSDN博客","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/8d60b485.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"加载已安装应用、未安装apk中的资源"}],["meta",{"property":"og:description","content":"加载已安装应用、未安装apk中的资源，其思路主要是获取到对应的ClassLoader/Context，通过ClassLoader加载R.java等类，再通过反射获取对应的资源id及资源。 加载已安装应用资源 sharedUserId 在当前应用中加载已安装的其他应用资源，需要二者有相同的sharedUserId，这样Android系统为二者分配同一个Linux用户ID，两个App可以相互访问代码、资源等。 通过Shared User id,拥有同一个User id的多个APK可以配置成运行在同一个进程中.所以默认就是可以互相访问任意数据. 也可以配置成运行成不同的进程, 同时可以访问其他APK的数据目录下的数据库和文件.就像访问本程序的数据一样。 Android逆向之旅---Android中的sharedUserId属性详解 - CSDN博客"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-15T10:32:39.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:published_time","content":"2018-04-15T21:40:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-15T10:32:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加载已安装应用、未安装apk中的资源\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-04-15T21:40:32.000Z\\",\\"dateModified\\":\\"2023-12-15T10:32:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"sharedUserId","slug":"shareduserid","link":"#shareduserid","children":[]},{"level":2,"title":"筛选所有已安装应用信息","slug":"筛选所有已安装应用信息","link":"#筛选所有已安装应用信息","children":[]},{"level":2,"title":"生成插件App的Context","slug":"生成插件app的context","link":"#生成插件app的context","children":[]},{"level":2,"title":"通过Context反射获取插件App中的资源","slug":"通过context反射获取插件app中的资源","link":"#通过context反射获取插件app中的资源","children":[]},{"level":2,"title":"获取apk信息","slug":"获取apk信息","link":"#获取apk信息","children":[]},{"level":2,"title":"获取ClassLoader","slug":"获取classloader","link":"#获取classloader","children":[]},{"level":2,"title":"通过反射加载类，获取资源","slug":"通过反射加载类-获取资源","link":"#通过反射加载类-获取资源","children":[]}],"git":{"createdTime":1702636359000,"updatedTime":1702636359000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":2.46,"words":739},"filePathRelative":"_posts/加载已安装应用、未安装apk中的资源.md","localizedDate":"2018年4月16日","excerpt":"<p>加载已安装应用、未安装apk中的资源，其思路主要是获取到对应的ClassLoader/Context，通过ClassLoader加载R.java等类，再通过反射获取对应的资源id及资源。</p>\\n<h1> 加载已安装应用资源</h1>\\n<h2> sharedUserId</h2>\\n<p>在当前应用中加载已安装的其他应用资源，需要二者有相同的<code>sharedUserId</code>，这样Android系统为二者分配同一个Linux用户ID，两个App可以相互访问代码、资源等。</p>\\n<blockquote>\\n<p>通过Shared User id,拥有同一个User id的多个APK可以配置成运行在同一个进程中.所以默认就是可以互相访问任意数据. 也可以配置成运行成不同的进程, 同时可以访问其他APK的数据目录下的数据库和文件.就像访问本程序的数据一样。</p>\\n<p><a href=\\"https://blog.csdn.net/jiangwei0910410003/article/details/51316688\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Android逆向之旅---Android中的sharedUserId属性详解 - CSDN博客</a></p>\\n</blockquote>","autoDesc":true}');export{e as data};
