import{_ as h,r as d,c as p,e as a,w as e,d as s,b as i,a as t,o}from"./app-BhWMVeaj.js";const k={},r=t('<blockquote><p>Google 大法 NB！！！(破音)</p></blockquote><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p><a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener noreferrer">Jetpack</a>是 Google 推出的一系列 Android 软件集合，<em>&quot;使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上&quot;</em>。</p><p><a href="https://github.com/googlesamples/android-sunflower" target="_blank" rel="noopener noreferrer">Sunflower</a>则是 Google 用来演示如何使用 Jetpack 进行 Android 开发的 Demo，有着非常优雅的架构与十分简洁的代码，可以帮助我们很好地学习 Jetpack 以及 MVVM 思想。</p><p>本文主要是结合 Sunflower 中的示例代码，分析 Jetpack 架构中各部分的作用，以及他们如何巧妙的搭配使用，方便指导日后对 Jetpack 的使用。</p><blockquote><p>本文中的大部分代码、示意图除非特殊注明外，皆来自 Google 的<a href="https://github.com/googlesamples/android-sunflower" target="_blank" rel="noopener noreferrer">Sunflower 工程</a>或其他互联网资源，根据篇幅需要做了部分精简，所有权益归原作者所有。</p></blockquote><p>下图是<a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener noreferrer">Google Jetpack 官网</a>对 Jetpack 的介绍图：</p>',7),c=i("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://jixiaoyong.github.io/images/jetpack_donut.png"},null,-1),g=i("br",null,null,-1),B={style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}},u=i("p",null,"下图是 Sunflower 架构的简单示意图：",-1),y=i("figure",null,[i("img",{src:"https://jixiaoyong.github.io/images/20190124212220.png",alt:"",tabindex:"0",loading:"lazy"}),i("figcaption")],-1),v=i("code",null,"我的花园",-1),m=i("code",null,"植物目录",-1),A=i("code",null,"植物介绍",-1),b=i("strong",null,[i("code",null,"Navigation")],-1),F=i("strong",null,"XML",-1),E=i("code",null,"数据、事件（clickListener等），RecycleView的LayoutManager，Adapter等等",-1),_=i("strong",null,"DataBinding",-1),C=i("strong",null,"ViewModel",-1),f=i("strong",null,"LiveData",-1),D=i("code",null,"数据",-1),w=i("code",null,"LiveData",-1),q=i("code",null,"DataBinding",-1),x=i("code",null,"Adapter",-1),M=i("strong",null,"ListAdapter",-1),V=i("strong",null,"Paging",-1),N=i("code",null,"ItemView",-1),X=i("code",null,"ViewModel",-1),L=i("code",null,"XML",-1),G=i("code",null,"BindingAdapter",-1),J=i("code",null,"XML",-1),S=i("strong",null,[i("code",null,"View")],-1),P=i("code",null,"DataBinding",-1),R=i("strong",null,[i("code",null,"ViewModel")],-1),j=i("code",null,"ViewModel",-1),I=i("strong",null,[i("code",null,"Model")],-1),O=i("code",null,"数据库",-1),T=i("strong",null,[i("code",null,"Lifecycle")],-1),z=t("<p><code>ViewModel</code>的数据来源——<code>Model</code>在这里的实现是一个<code>数据库</code>。每个<code>ViewModel</code>有一个<code>XXXViewModelFactory</code>类，用来使用数据类<code>XXXRepository</code>类的实例创建对应的<code>ViewModel</code>。<code>XXXViewModelFactory</code>向<code>Activity</code>等屏蔽了<code>ViewModel</code>的具体实现。</p><p><code>XXXRepository</code>类的出现时为了将<code>ViewModel</code>与数据的具体实现解耦合，这样<code>ViewModel</code>只需要关心他要的操作而不必关系数据来源的具体实现。在本例中，<code>XXXRepository</code>类对应封装了这数据库<code>AppDatabase</code>中对两个表的操作。</p>",2),W=i("strong",null,[i("code",null,"Room")],-1),U=i("code",null,"表Entity",-1),Z=i("code",null,"数据访问对象DAO",-1),Y=i("code",null,"数据库DataBase",-1),H=i("code",null,"XXXRepository",-1),Q=i("code",null,"ViewModel",-1),K=t(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>@Entity    GardenPlanting    //表，定义了存储的数据项及其格式</span></span>
<span class="line"><span>@Dao    GardenPlantingDao    //数据访问对象，定义了例如插入数据、查询数据等操作</span></span>
<span class="line"><span> GardenPlantingRepository    //对DAO的封装，将数据的的具体实现与ViewModel对数据的操作解耦</span></span>
<span class="line"><span>@Database     AppDatabase    //数据库，包括表和对表的操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$=i("code",null,"SeedDatabaseWorker",-1),ii=t(`<h2 id="具体实现分析" tabindex="-1"><a class="header-anchor" href="#具体实现分析"><span>具体实现分析</span></a></h2><p>首先看一下**<code>View</code>**部分，Sunflower 只有简单的 3 个页面，全都是用<code>Fragment</code>实现，由<code>Activity</code>通过<code>Navigation</code>控制切换：</p><ul><li><code>GardenActivity</code> 主页面，唯一的一个 Activity</li><li><code>GardenFragment</code> 我的花园 界面，会显示用户在植物目录中选择并种植的植物信息</li><li><code>PlantListFragment</code> 植物目录 界面，所有的植物信息列表</li><li><code>PlantDetailFragment</code> 植物介绍 界面，当在“我的花园”或“植物列表”选择了某个植物后，会进入该界面显示植物详细介绍</li></ul><h3 id="navigation-控制界面切换" tabindex="-1"><a class="header-anchor" href="#navigation-控制界面切换"><span>Navigation 控制界面切换</span></a></h3><p>先看一下<a href="https://developer.android.google.cn/topic/libraries/architecture/navigation/" target="_blank" rel="noopener noreferrer">Navigation</a>的定义：</p><blockquote><p>Navigation 是 APP 设计中的关键部分，可以用来定义用户从不同的界面切换、进入和推出的交互逻辑。</p></blockquote><p>和布局文件一样，我们可以在编译器的可视化界面中，直接预览、设计不同界面切换效果。他可以负责<code>Fragment</code>、<code>Activity</code>、<code>Navigation graphs</code> 与 <code>subgraphs</code> 以及<code>Custom destination types</code>，他们之间通过不同的<code>action</code>连接起来。</p><p>通过官方文档可知，<code>Navigation</code>可以和<code>AppBar</code>，<code>ToolBar</code>等组合起来控制 Fragment 显示，此外可以通过<code>ViewModel</code>在绑定到同一个<code>Activity</code>的<code>Fragment</code>之间共享数据，或者也可以通过<a href="https://developer.android.google.cn/topic/libraries/architecture/navigation/navigation-pass-data" target="_blank" rel="noopener noreferrer"><code>Bundle</code>或<code>Safe Args</code></a>在两个<code>Fragment</code>之间传递数据。</p><p>那么，在<code>Sunflower</code>中<code>Navigation</code>是怎么控制界面切换的呢？</p><p>首先，在<code>res/navigation/</code>目录下面新建一个<code>嵌套导航图(Nested navigation graphs)</code>,定义各个界面之前的切换关系：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">navigation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    xmlns:app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    xmlns:tools</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    app:startDestination</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@+id/garden_fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">//app:startDestination定义了在这个导航图中首次启动展示的界面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">fragment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@+id/garden_fragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;com.google.samples.apps.sunflower.GardenFragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:label</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@string/my_garden_title&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        tools:layout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@layout/fragment_garden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">//action定义了在各个界面的切换关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">action</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            android:id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@+id/action_garden_fragment_to_plant_detail_fragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            app:destination</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@id/plant_detail_fragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            app:enterAnim</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@anim/slide_in_right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">//enterAnim等指定执行action时的动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          .../&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">fragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">fragment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">//argument定义了在切换界面时需要带的参数，需要androidx.navigation.safeargs的支持,具体见参考资料-Android Jetpack-Navigation 使用中参数的传递</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">argument</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            android:name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;plantId&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            app:argType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;//参数类型小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">fragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Activity 对应的 XML 中插入该导航：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">LinearLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">fragment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@+id/garden_nav_fragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:layout_width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        android:layout_height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        app:defaultNavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        app:navGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@navigation/nav_garden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">LinearLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以在 Activity 或者 Fragment 中获取该导航的实力，用来切换界面了：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//activity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Navigation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">findNavController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, R.id.garden_nav_fragment)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//fragment 或其他地方</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> GardenFragmentDirections</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//嵌套导航图中 Fragment 自动生成的类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ActionGardenFragmentToPlantDetailFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(plantId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">findNavController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(direction)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="databinding-绑定布局和数据" tabindex="-1"><a class="header-anchor" href="#databinding-绑定布局和数据"><span>DataBinding 绑定布局和数据</span></a></h3><p>Navigation 解决了不同的布局间交互的逻辑，DataBinding 则充当布局 View 和数据（ViewModel、LiveData）之间的桥梁，将二者联系起来。</p><p>从<a href="https://developer.android.google.cn/topic/libraries/data-binding/" target="_blank" rel="noopener noreferrer">官网</a>的表述中我们知道，DataBinding 使用在 XML 中声明的方式（而非编程的方式），将布局中的组件捆绑到 APP 中使用到的数据上，这样当数据更新时，布局也会随之自动更新。</p><p>DataBinding 在 XML 中的形式如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">layout</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">        xmlns:app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">variable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;viewmodel&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;com.myapp.data.ViewModel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">ConstraintLayout...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- UI layout&#39;s root element --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">layout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是原先的页面布局信息<code>&lt;ConstraintLayout... /&gt;</code>包裹在<code>&lt;layout... /&gt;</code>中，同时多了一个数据域<code>&lt;data... /&gt;</code>，我们可以在其中定义一些变量<code>&lt;variable... /&gt;</code>，并在布局中使用：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">TextView</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    android:text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@{viewmodel.userName}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了常见的<code>android:text</code>，<code>android:onClick</code>等通用的属性可以直接绑定外，我们还可以通过自定义<a href="https://developer.android.google.cn/topic/libraries/data-binding/binding-adapters.html" target="_blank" rel="noopener noreferrer"><strong>Binding adapters</strong></a>支持更多形式的属性绑定：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@BindingAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app:goneUnless&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> goneUnless</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(view: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, visible: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    view.visibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (visible) View.VISIBLE </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> View.GONE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就支持了<code>app:goneUnless</code>的解析，我们只要在 XML 中为组件加上这个属性就可以实现相应的效果：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">TextView</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">          android:text</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@{viewmodel.userName}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">          app:goneUnless</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@{viewmodel.isGone}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们需要在对应的 Activity 或 Fragment 中，用如下代码将布局与页面绑定到一起：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//setContentView(R.layout.activity_main)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> binding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ActivityMainBinding</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DataBindingUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, R.layout.activity_main)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">binding.viewmodel </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>ActivityMainBinding</code>类是<code>DataBinding</code>根据 XML 文件的名字自动替我们生成的，规律是<code>XML文件名+Binding</code>的驼峰命名。</p><p>在 Sunflower 中有类似的应用有很多处：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  ~ Copyright 2018 Google LLC ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">layout</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> xmlns:android</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    xmlns:app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">    xmlns:tools</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://schemas.android.com/tools&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">variable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hasPlantings&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;boolean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">FrameLayout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            android:layout_width</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">            android:layout_height</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;match_parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">androidx.recyclerview.widget.RecyclerView</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                android:id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@+id/garden_list&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                app:isGone</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@{!hasPlantings}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                app:layoutManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">                tools:listitem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@layout/list_item_garden_planting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">FrameLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">layout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="viewmodel-管理数据与页面的交互" tabindex="-1"><a class="header-anchor" href="#viewmodel-管理数据与页面的交互"><span>ViewModel 管理数据与页面的交互</span></a></h3><p><code>DataBinding</code>通过标记的形式将数据和组件绑定，在这个过程中他使用的数据则是来自于<code>ViewModel</code>的。在页面<code>Activity</code>(或<code>Fragment</code>) 中，我们可以处理这两者之间的关系。</p><p><code>ViewModel</code>是设计用来以一种可以感知生命周期（<code>lifecycle</code>）的方式存储和管理与 UI 相关的数据，它可以允许数据在诸如屏幕旋转的变化中存活下来，也就是说<code>VideModule</code>的数据生命周期可能要比他附着的<code>Activity</code>或<code>Fragment</code>的生命周期长。</p><p>同时，<code>UI controller</code>可以在<code>Activity</code>等不再需要数据时，自动调用<code>ViewModel</code>的<code>onCleared()</code>方法清除这些数据以避免内存泄漏。</p><p>下图是<code>ViewModel</code>和<code>Activity</code>的生命周期对比：</p>`,36),si=i("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://jixiaoyong.github.io/images/20190202161443.png"},null,-1),ai=i("br",null,null,-1),ei={style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}},ni=i("br",null,null,-1),ti=t(`<div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> viewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ViewModelProviders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, factory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(GardenPlantingListViewModel::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.java)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> PlantDetailViewModelFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(args:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ViewModelProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NewInstanceFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以将<code>ViewModel</code>于<code>LiveData</code>结合，这样在<code>Activity</code>等地方对<code>LiveData</code>进行订阅后，当<code>LiveData</code>的值发生变化时<code>Activity</code>等可以及时得到通知，而做出相应变化。此外<code>ViewModel</code>与<code>lifecycle</code>的结合可以保证在<code>Activity</code>等生命周期结束后数据得到及时的清理。</p><h3 id="room-保存数据" tabindex="-1"><a class="header-anchor" href="#room-保存数据"><span>Room 保存数据</span></a></h3><blockquote><p>Room 持久性库在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 强大功能的同时，能够流畅的访问数据库。——Android Developers</p></blockquote><p><code>Room</code>需要 3 个元素：</p><ul><li><code>Database</code> 数据库，可以提供对表格的操作方法<code>@DAO</code>。是一个继承自<code>RoomDatabase</code>的抽象类。</li><li><code>Entity</code> 表格，规定了每个表格可以保存的数据格式。是一个普通类。</li><li><code>Dao</code> 数据访问结构（<code>Data Access Object</code>），定义了对表格<code>@Entity</code>中的数据的操作。是一个接口或者抽象类。</li></ul><p>此外，还可以对<code>@DAO</code>进行进一步的封装得到一个<code>XXXRepository</code>类，<code>ViewModel</code>通过这个<code>XXXRepository</code>类来操作数据，从而将其与数据的具体实现解耦。</p><h3 id="workmanager-管理任务" tabindex="-1"><a class="header-anchor" href="#workmanager-管理任务"><span>WorkManager 管理任务</span></a></h3><p><code>WorkManager</code>用来管理即时或定时任务，官方定义是在指定约束条件成熟时可靠的在后台执行对应的任务。</p><p>具体使用可以参考这个<a href="https://gist.github.com/jixiaoyong/041d8b0775e392302b4cd57a98b4f6fa" target="_blank" rel="noopener noreferrer">GIST</a>。</p><p>和他相关的有下面几个关键类：</p><ul><li><code>Worker</code> 定义要执行的任务内容</li><li><code>WorkRequest</code> 代表一项单独的任务，明确具体要执行的任务内容（Worker）、任务的类型（WorkRequest.Builder 的子类，决定任务一次性还是重复的）以及任务执行的条件（Constraints，如联网、电池电量等等）</li><li>WorkManager 执行管理 WorkRequest，安排执行 Worker 中的工作内容。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener noreferrer">Android Jetpack 官网</a></p><p><a href="https://blog.csdn.net/weixin_42215792/article/details/80395379" target="_blank" rel="noopener noreferrer">Android Jetpack-Navigation 使用中参数的传递</a></p>`,15);function li(di,hi){const n=d("font"),l=d("center");return o(),p("div",null,[r,a(l,null,{default:e(()=>[c,s(),g,s(),i("div",B,[s("Jetpack 示意图 "),a(n,{style:{color:"#BEBEBE"}},{default:e(()=>[s("来自 GoogleJetpack 官网")]),_:1})])]),_:1}),s(" ## 对 Sunflower 的整体分析 "),u,y,i("p",null,[s("可以看到，APP 的界面有"),v,s("、"),m,s("和"),A,s("三部分，这三者的切换逻辑通过"),a(n,{color:"#0288d1",size:"4"},{default:e(()=>[b]),_:1}),s("实现。")]),i("p",null,[s("每个界面的"),F,s("中的布局信息（包括"),E,s("）通过"),_,s("与"),C,s("中的可观察数据"),f,s("绑定在一起，只要数据库中的"),D,s("有更新，就会通过"),w,s("主动通知布局更新界面；同时"),q,s("还通过与"),x,s("（这些继承自"),M,s("的 Adapter 实现了"),a(n,{color:"#0288d1",size:"4"},{default:e(()=>[V]),_:1}),s("的作用）将"),N,s("的"),X,s("与布局"),L,s("中绑定在一起，通过"),G,s("对"),J,s("中的数据做预处理（加载 imgUrl 中的图片到 ImageView 等等）。")]),i("p",null,[s("在"),a(n,{color:"black",size:"5"},{default:e(()=>[S]),_:1}),s("中指定这些"),P,s("与"),a(n,{color:"black",size:"5"},{default:e(()=>[R]),_:1}),s("之间以及"),j,s("与"),a(n,{color:"black",size:"5"},{default:e(()=>[I]),_:1}),O,s("之间的逻辑关系，这些数据与操作都受着"),a(n,{color:"#0288d1",size:"4"},{default:e(()=>[T]),_:1}),s("的影响。")]),z,i("p",null,[s("数据库使用"),a(n,{color:"#0288d1",size:"4"},{default:e(()=>[W]),_:1}),s("实现，从底层开始依次分为"),U,s("，"),Z,s("和"),Y,s("三个层次。每个 DAO 对应一个包装类"),H,s("类供"),Q,s("使用。")]),K,a(n,{color:"#0288d1",size:"4"},{default:e(()=>[s("**`WorkManager`**")]),_:1}),s("则管理着一个从 Json 读取数据并加载到数据库中的后台任务"),$,s("。"),ii,a(l,null,{default:e(()=>[si,s(),ai,s(),i("div",ei,[s("ViewModel 和 Activity 的生命周期对比图：左图 Activity 先经历了一次旋转，然后 finish，右边是与此相关的 ViewModel 的生命周期"),ni,a(n,{style:{color:"#BEBEBE"}},{default:e(()=>[s("来自 GoogleJetpack 官网")]),_:1})])]),_:1}),s(" 此外，由于默认的获取 ViewModel 的方法只能调取无参构造函数，当需要向 ViewModel 传递参数时，就需要用到 Factory 工厂模式来创建 ViewModel： "),ti])}const oi=h(k,[["render",li],["__file","27065732.html.vue"]]),ki=JSON.parse('{"path":"/posts/27065732.html","title":"从 Sunflower 开始学习优雅的 Jetpack 架构","lang":"zh-CN","frontmatter":{"permalink":"/posts/27065732.html","title":"从 Sunflower 开始学习优雅的 Jetpack 架构","tag":"android","abbrlink":"27065732","date":"2019-01-24T11:48:31.000Z","updated":"2023-12-30T08:17:02.000Z","isOriginal":true,"description":"Google 大法 NB！！！(破音) 前言 Jetpack是 Google 推出的一系列 Android 软件集合，\\"使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上\\"。 Sunflower则是 Google 用来演示如何使用 Jetpack 进...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/27065732.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"从 Sunflower 开始学习优雅的 Jetpack 架构"}],["meta",{"property":"og:description","content":"Google 大法 NB！！！(破音) 前言 Jetpack是 Google 推出的一系列 Android 软件集合，\\"使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上\\"。 Sunflower则是 Google 用来演示如何使用 Jetpack 进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jixiaoyong.github.io/images/20190124212220.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T16:00:22.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:published_time","content":"2019-01-24T11:48:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T16:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从 Sunflower 开始学习优雅的 Jetpack 架构\\",\\"image\\":[\\"https://jixiaoyong.github.io/images/20190124212220.png\\"],\\"datePublished\\":\\"2019-01-24T11:48:31.000Z\\",\\"dateModified\\":\\"2024-05-31T16:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"具体实现分析","slug":"具体实现分析","link":"#具体实现分析","children":[{"level":3,"title":"Navigation 控制界面切换","slug":"navigation-控制界面切换","link":"#navigation-控制界面切换","children":[]},{"level":3,"title":"DataBinding 绑定布局和数据","slug":"databinding-绑定布局和数据","link":"#databinding-绑定布局和数据","children":[]},{"level":3,"title":"ViewModel 管理数据与页面的交互","slug":"viewmodel-管理数据与页面的交互","link":"#viewmodel-管理数据与页面的交互","children":[]},{"level":3,"title":"Room 保存数据","slug":"room-保存数据","link":"#room-保存数据","children":[]},{"level":3,"title":"WorkManager 管理任务","slug":"workmanager-管理任务","link":"#workmanager-管理任务","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1653726847000,"updatedTime":1717171222000,"contributors":[{"name":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":3},{"name":"JI,XIAOYONG","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":9.55,"words":2864},"filePathRelative":"_posts/从Sunflower开始学习优雅的Jetpack架构.md","localizedDate":"2019年1月24日","excerpt":"<blockquote>\\n<p>Google 大法 NB！！！(破音)</p>\\n</blockquote>\\n<h2>前言</h2>\\n<p><a href=\\"https://developer.android.google.cn/jetpack/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Jetpack</a>是 Google 推出的一系列 Android 软件集合，<em>\\"使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上\\"</em>。</p>\\n","autoDesc":true}');export{oi as comp,ki as data};
