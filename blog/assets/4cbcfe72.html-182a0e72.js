import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-e126c796.js";const i={},d=t(`<blockquote><p>本文基于Flutter 3.0</p></blockquote><p>Flutter App基于Dart语言编写，提供了一套简单易用的API，可以让开发者在Flutter中快速开发出一个精美的APP。那么在Flutter中是如何绘制一个APP呢，runApp是怎么将我们编写的Widget等添加到手机上的呢？本文简单从Widget,Element,RenderObjet三者的关系来梳理一下Flutter的绘制过程。</p><p>让我们运行一个“最”简单的Flutter App，分析一下在这个过程中涉及到的Widget、Element、RenderObject这三个tree的关系。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
    <span class="token comment">// Center非必须，为了让文本居中显得更清晰</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
      <span class="token string-literal"><span class="token string">&quot;Hello center text!&quot;</span></span><span class="token punctuation">,</span>
      textDirection<span class="token punctuation">:</span> <span class="token class-name">TextDirection</span><span class="token punctuation">.</span>ltr<span class="token punctuation">,</span> <span class="token comment">// 文本方向</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的效果如下：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_run_app/flutter_run_app_hello_center_text.png" alt="flutter_run_app_hello_center_text" tabindex="0" loading="lazy"><figcaption>flutter_run_app_hello_center_text</figcaption></figure><p>让我们使用Flutter DevTools看一下实际生成的Widget Details Tree</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root]
 &gt;renderObject:RenderView#a00a5

 Center
  alignment:Alignment.center 
  widthFactor:null
  heightFactor:null
  &gt;renderObject:RenderPositionedBox#94e0d

  Text
   &quot;Hello center text!&quot;
   textAlign:null
   textDirection:ltr
   locale:null 
   softWrap:null 
   overflow:null
   textScaleFactor:null 
   maxLines:null 
   textWidthBasis:null 
   textHeightBehavior:null
   
   RichText
    textDirection:ltr
    softWrap:wrapping at box width 
    maxLines:unlimited
    text:&quot;Hello center text!&quot;
    renderObject:RenderParagraph#71aa1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，除了我们在代码里面添加的Center和Text这两个Widget之外，还多出来好几个Widget/RenderObject，当我们仔细查看具体的Widget，可以看到其内部还有XXXElement，BuildOwner之类的字段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Center
 alignment:Alignment.center 
 widthFactor:null
 heightFactor:null
 renderObject:RenderPositionedBox#94e0d 
 &gt;_parent:RenderObjectToWidgetElement 
 _debugReassembleConfig:null
 _notificationTree:null 
 &gt;_slot:Object
 _depth:2 
 &gt;_widget:Center 
 &gt;_owner:BuildOwner
 &gt;_lifecycleState:_ElementLifecycle
 &gt;_debugForgottenChildrenWithGlobalKey:_HashSet 
 _inheritedWidgets:null
 _dependencies:null
 _hadUnsatisfiedDependencies:true 
 _dirty:false
 _inDirtyList:false
 _debugBuiltOnce:false
 _debugA1lowIgnoredCallsToMarkNeedsBuild:false 
 _debugDoingBuild:false
 &gt;_ancestorRenderObjectElement:RenderObjectToWidgetElement 
 &gt;_child:StatelessElement

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述涉及到的几个类彼此之间到底是什么关系，我们的“<code>Hello center text!</code>”又是怎样才显示到屏幕上的，让我们接下来一个一个分析一下：</p><h1 id="runapp" tabindex="-1"><a class="header-anchor" href="#runapp" aria-hidden="true">#</a> runApp</h1><p>在执行runApp的时候主要执行了三步</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; \\lib\\src\\widgets\\binding.dart</span>

<span class="token keyword">void</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建render tree的根节点RenderView</span>
  <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 将我们的app widget绑定到RenderView</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scheduleAttachRootWidget</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
		<span class="token comment">// 安排屏幕帧绘制</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scheduleWarmUpFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="widgetsflutterbinding-ensureinitialized" tabindex="-1"><a class="header-anchor" href="#widgetsflutterbinding-ensureinitialized" aria-hidden="true">#</a> WidgetsFlutterBinding.ensureInitialized()</h2><p>创建RenderView具体的逻辑在<code>WidgetsFlutterBinding.ensureInitialized</code>方法中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; \\lib\\src\\widgets\\binding.dart</span>

<span class="token keyword">class</span> <span class="token class-name">WidgetsFlutterBinding</span> <span class="token keyword">extends</span> <span class="token class-name">BindingBase</span> <span class="token keyword">with</span> <span class="token class-name">GestureBinding</span><span class="token punctuation">,</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">,</span> <span class="token class-name">ServicesBinding</span><span class="token punctuation">,</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">,</span> <span class="token class-name">SemanticsBinding</span><span class="token punctuation">,</span> <span class="token class-name">RendererBinding</span><span class="token punctuation">,</span> <span class="token class-name">WidgetsBinding</span> <span class="token punctuation">{</span>
  
	<span class="token keyword">static</span> <span class="token class-name">WidgetsBinding</span> <span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>_instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>ensureInitialized</code>方法中，如果<code>WidgetsBinding._instance</code>为null则会先用构造方法创建，因为<code>WidgetsFlutterBinding</code>继承自BindingBase，所以实际上执行下方的方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\foundation\\binding.dart</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BindingBase</span> <span class="token punctuation">{</span>
	<span class="token class-name">BindingBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">initInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initServiceExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token metadata function">@protected</span>
  <span class="token metadata function">@mustCallSuper</span>
  <span class="token keyword">void</span> <span class="token function">initInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要做了2件事，我们关注<code>initInstances()</code>方法，这个方法的主要逻辑都在他的子类中，也就是之前<code>WidgetsFlutterBinding</code>混合的几个BindingBase子类中，我们关注和屏幕渲染有关的RendererBinding：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\rendering\\binding.dart</span>

<span class="token comment">/// The glue between the render tree and the Flutter engine.</span>
<span class="token keyword">mixin</span> <span class="token class-name">RendererBinding</span> <span class="token keyword">on</span> <span class="token class-name">BindingBase</span><span class="token punctuation">,</span> <span class="token class-name">ServicesBinding</span><span class="token punctuation">,</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">,</span> <span class="token class-name">GestureBinding</span><span class="token punctuation">,</span> <span class="token class-name">SemanticsBinding</span><span class="token punctuation">,</span> <span class="token class-name">HitTestable</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里创建了PipelineOwner，用来管理rendering pipeline也就是我们app中所有的RenderObject</span>
    _pipelineOwner <span class="token operator">=</span> <span class="token class-name">PipelineOwner</span><span class="token punctuation">(</span>
      onNeedVisualUpdate<span class="token punctuation">:</span> ensureVisualUpdate<span class="token punctuation">,</span>
      onSemanticsOwnerCreated<span class="token punctuation">:</span> _handleSemanticsOwnerCreated<span class="token punctuation">,</span>
      onSemanticsOwnerDisposed<span class="token punctuation">:</span> _handleSemanticsOwnerDisposed<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    platformDispatcher
      <span class="token punctuation">.</span><span class="token punctuation">.</span>onMetricsChanged <span class="token operator">=</span> handleMetricsChanged
      <span class="token punctuation">.</span><span class="token punctuation">.</span>onTextScaleFactorChanged <span class="token operator">=</span> handleTextScaleFactorChanged
      <span class="token punctuation">.</span><span class="token punctuation">.</span>onPlatformBrightnessChanged <span class="token operator">=</span> handlePlatformBrightnessChanged
      <span class="token punctuation">.</span><span class="token punctuation">.</span>onSemanticsEnabledChanged <span class="token operator">=</span> _handleSemanticsEnabledChanged
      <span class="token punctuation">.</span><span class="token punctuation">.</span>onSemanticsAction <span class="token operator">=</span> _handleSemanticsAction<span class="token punctuation">;</span>
    <span class="token comment">// 注意这里创建了RenderView</span>
    <span class="token function">initRenderView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_handleSemanticsEnabledChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>renderView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addPersistentFrameCallback</span><span class="token punctuation">(</span>_handlePersistentFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initMouseTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kIsWeb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span>_handleWebFirstFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/// Creates a [RenderView] object to be the root of the</span>
  <span class="token comment">/// [RenderObject] rendering tree, and initializes it so that it</span>
  <span class="token comment">/// will be rendered when the next frame is requested.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// Called automatically when the binding is created.</span>
  <span class="token keyword">void</span> <span class="token function">initRenderView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    renderView <span class="token operator">=</span> <span class="token class-name">RenderView</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token function">createViewConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">:</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
    renderView<span class="token punctuation">.</span><span class="token function">prepareInitialFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

	<span class="token keyword">set</span> <span class="token function">renderView</span><span class="token punctuation">(</span><span class="token class-name">RenderView</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意这里，将renderView设置为_pipeline的根节点</span>
    _pipelineOwner<span class="token punctuation">.</span>rootNode <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主要关注两件事：</p><ul><li><p>创建了用于管理渲染管道的PipelineOwner <code>_pipelineOwner</code></p><p>Pipeline是用来管理rendering tree，其内部持有我们的renderView作为rootNode，同时维护了_nodesNeedingLayout，_nodesNeedingCompositingBitsUpdate，_nodesNeedingPaint，_nodesNeedingSemantics四个列表，当flutter framework每次需要往屏幕上绘制内容时会依次遍历这四个列表，将RenderObject绘制到屏幕上面。</p></li><li><p>创建了rendering tree的根节点<code>renderView</code> ，并将其设置为<code>_pipelineOwner</code>的根节点</p></li></ul><h2 id="scheduleattachrootwidget-app" tabindex="-1"><a class="header-anchor" href="#scheduleattachrootwidget-app" aria-hidden="true">#</a> ..scheduleAttachRootWidget(app)</h2><p>此方法是<code>WidgetsFlutterBinding</code>的另外一个混合类<code>WidgetsBinding</code>负责具体实现：</p><p><code>WidgetsBinding</code>的<code>scheduleAttachRootWidget</code> 方法最后调用了<code>attachRootWidget(Widget rootWidget)</code> ：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\binding.dart</span>

<span class="token comment">/// The glue between the widgets layer and the Flutter engine.</span>
<span class="token keyword">mixin</span> <span class="token class-name">WidgetsBinding</span> <span class="token keyword">on</span> <span class="token class-name">BindingBase</span><span class="token punctuation">,</span> <span class="token class-name">ServicesBinding</span><span class="token punctuation">,</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">,</span> <span class="token class-name">GestureBinding</span><span class="token punctuation">,</span> <span class="token class-name">RendererBinding</span><span class="token punctuation">,</span> <span class="token class-name">SemanticsBinding</span> <span class="token punctuation">{</span>

 <span class="token comment">// 将rootWidget绑定到renderViewElement</span>
 <span class="token keyword">void</span> <span class="token function">attachRootWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> rootWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> bool isBootstrapFrame <span class="token operator">=</span> renderViewElement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    _readyToProduceFrames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 用于将rootWidget绑定到renderView上面</span>
    _renderViewElement <span class="token operator">=</span> <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
      container<span class="token punctuation">:</span> renderView<span class="token punctuation">,</span>
      debugShortDescription<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;[root]&#39;</span></span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> rootWidget<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
   <span class="token comment">// 在此创建或者使用已有的RenderObjectToWidgetElement，并作为根Element</span>
   <span class="token comment">// 并将RenderObjectToWidgetAdapter和RenderView与之绑定</span>
   <span class="token comment">// 这里的_buildOwner在WidgetsBinding.initInstances方法创建，用于管理widget框架的类</span>
   <span class="token punctuation">.</span><span class="token function">attachToRenderTree</span><span class="token punctuation">(</span>buildOwner<span class="token operator">!</span><span class="token punctuation">,</span> renderViewElement <span class="token operator">as</span> <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBootstrapFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果是启动框架，就安排更新帧</span>
      <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">ensureVisualUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要有3步：</p><ul><li>创建RenderObjectToWidgetAdapter包装RenderView</li><li>在<code>attachToRenderTree</code>方法中创建RenderObjectToWidgetElement并<code>mount</code>到element tree中（widget tree实际上并不存在，而是通过element tree管理）</li><li>需要的话安排一次frame（刷新页面）</li></ul><p>还需要注意一个新的角色<code>buildOwner</code>，这个对象全局唯一（一般由parent传给child），在<code>WidgetsBinding.initInstances</code>方法创建，用来管理与Widget tree相关的类，实际上就是通过管理Element的插入，移除，更新来间接管理Widget tree（对应我们在之前遇到的用来管理rendering tree的<code>pipelineOwner</code> ，这两个Owner管理着我们所说的Flutter的Widget/Element/RenderObject“三”个tree）。</p><h3 id="renderobjecttowidgetadapter" tabindex="-1"><a class="header-anchor" href="#renderobjecttowidgetadapter" aria-hidden="true">#</a> RenderObjectToWidgetAdapter</h3><p>前面我们知道<code>renderView</code>其实是一个RenderObject，所以这里为他创建了一个对应的Widget——<code>RenderObjectToWidgetAdapter</code>，其主要作用是将<code>rootWidget</code>（也就是我们最开始写的Center Widget及其child）绑定到之前生成的<code>renderView</code>上面，并将<code>renderView</code>作为自己对应的RenderObject。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\binding.dart</span>

<span class="token keyword">class</span> <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectWidget</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Creates a bridge from a [RenderObject] to an [Element] tree.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// Used by [WidgetsBinding] to attach the root widget to the [RenderView].</span>
  <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>debugShortDescription<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 
   <span class="token comment">// 注意这里用container也就是RenderView创建了一个GlobalObjectKey，</span>
   <span class="token comment">// 在RenderObjectToWidgetElementmount的时候会用到</span>
   <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">GlobalObjectKey</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token metadata function">@override</span>
  <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">RenderObjectWithChildMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> container<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RenderObjectToWidgetAdapter.createRenderObject</code> 返回的就是<code>container</code> 也就是我们的RenderView。</p><h3 id="attachtorendertree" tabindex="-1"><a class="header-anchor" href="#attachtorendertree" aria-hidden="true">#</a> attachToRenderTree</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\binding.dart</span>
<span class="token keyword">class</span> <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectWidget</span> <span class="token punctuation">{</span>
  <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">attachToRenderTree</span><span class="token punctuation">(</span><span class="token class-name">BuildOwner</span> owner<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> element <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      owner<span class="token punctuation">.</span><span class="token function">lockState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建RenderObjectToWidgetElement，并将RenderObjectToWidgetAdapter与之绑定</span>
        element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>element <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建好Element之后，将BuildOwner与之绑定</span>
        element<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">assignOwner</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      owner<span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>element<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里最终会通过updateChild方法将rootWidget对应的Element插入到</span>
        <span class="token comment">// RenderObjectToWidgetElement下面,在rootWidget中第一个RenderObjectElement</span>
        <span class="token comment">// 的mount方法中，通过attachRenderObject(newSlot)将自己的renderObject绑定到renderView</span>
        element<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      element<span class="token punctuation">.</span>_newWidget <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      element<span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> element<span class="token operator">!</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RenderObjectToWidgetAdapter</code>在<code>attachToRenderTree</code> 方法中，创建对应的<code>RenderObjectToWidgetElement</code> 与自己绑定，并且同时也将<code>rootWidget</code>和之前创建的rendering tree的根节点<code>renderView</code>绑定。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token operator">|</span>— <span class="token class-name">RenderObjectToWidgetAdapter</span>   —<span class="token operator">|</span>— <span class="token class-name">RenderObjectToWidgetElement</span>  —<span class="token operator">|</span>— <span class="token class-name">RenderView</span> —<span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们再来看一下<code>RenderObjectToWidgetElement</code>调用的父类<code>RenderObjectElement.mount</code>方法:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RenderObjectElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 本例中这里实际上获取到的是RenderView</span>
    _renderObject <span class="token operator">=</span> <span class="token punctuation">(</span>widget <span class="token operator">as</span> <span class="token class-name">RenderObjectWidget</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将RenderView绑定到指定newSlot(这里是null)中</span>
    <span class="token function">attachRenderObject</span><span class="token punctuation">(</span>newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">attachRenderObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>_ancestorRenderObjectElement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _slot <span class="token operator">=</span> newSlot<span class="token punctuation">;</span>
    <span class="token comment">// 这里因为RenderView是根节点，所以_ancestorRenderObjectElement和parentDataElement都为null</span>
    <span class="token comment">// 但是对于RenderView下级的节点，比如本例中的Center Widget，他对应的祖先节点就是持有RenderView</span>
    <span class="token comment">// 的RenderObjectToWidgetElement，所以这里会将CenterWidget的RenderPositionedBox</span>
    <span class="token comment">// 作为RenderView的child</span>
    _ancestorRenderObjectElement <span class="token operator">=</span> <span class="token function">_findAncestorRenderObjectElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _ancestorRenderObjectElement<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">insertRenderObjectChild</span><span class="token punctuation">(</span>renderObject<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ParentDataElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentData</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> parentDataElement <span class="token operator">=</span> <span class="token function">_findAncestorParentDataElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentDataElement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token function">_updateParentData</span><span class="token punctuation">(</span>parentDataElement<span class="token punctuation">.</span>widget <span class="token operator">as</span> <span class="token class-name">ParentDataWidget</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还会调用的<code>Element.mount</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token comment">// Element的方法：</span>

   <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    _slot <span class="token operator">=</span> newSlot<span class="token punctuation">;</span>
    _lifecycleState <span class="token operator">=</span> _ElementLifecycle<span class="token punctuation">.</span>active<span class="token punctuation">;</span>
    _depth <span class="token operator">=</span> _parent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> _parent<span class="token operator">!</span><span class="token punctuation">.</span>depth <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Only assign ownership if the parent is non-null. If parent is null</span>
      <span class="token comment">// (the root node), the owner should have already been assigned.</span>
      <span class="token comment">// See RootRenderObjectElement.assignOwner().</span>
      _owner <span class="token operator">=</span> parent<span class="token punctuation">.</span>owner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里将RenderObjectToWidgetElement注册到owner中，key是创建RenderObjectToWidgetAdapter时候创建的GlobalObjectKey</span>
    <span class="token keyword">final</span> <span class="token class-name">Key</span><span class="token operator">?</span> key <span class="token operator">=</span> widget<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">is</span> <span class="token class-name">GlobalKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      owner<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">_registerGlobalKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">_updateInheritance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">attachNotificationTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这里将<code>RenderObjectToWidgetElement</code> 注册到了BuildOwner中</p><p>在<code>RenderObjectToWidgetElement</code>的<code>mount</code>方法执行时，除了调用父类的<code>mount</code>方法外，还会触发<code>_rebuild()</code> 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">RootRenderObjectElement</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
  <span class="token class-name">Element</span><span class="token operator">?</span> _child<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">_rebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在这里分析可知,这里的widget即\`RenderObjectToWidgetElement\` 的widget，也就是</span>
  <span class="token comment">// \`RenderObjectToWidgetAdapter\`，他的child也就是rootWidget</span>
  <span class="token comment">// 所以updateChild传入的值分别是null，RenderObjectToWidgetAdapter.child</span>
  <span class="token comment">// 会创建rootWidget对应的element并将其作为当前element的child</span>
      _child <span class="token operator">=</span> <span class="token function">updateChild</span><span class="token punctuation">(</span>_child<span class="token punctuation">,</span> <span class="token punctuation">(</span>widget <span class="token operator">as</span> <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span> _rootChildSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>_rebuild</code>方法中，我们可以看到，在<code>WidgetsBinding.attachRootWidget</code>方法中给RenderObjectToWidgetAdapter作为<code>child</code>参数传入的<code>rootWidget</code>（也即我们示例中的<code>Center</code>Widget），在这里被传入了RenderView对应的RenderObjectToWidgetElement的<code>child</code>中（这里的过程我们下面Center一节再分析），从而将其插入到Flutter的渲染树中。</p><p>这样RenderView（<code>RenderObject</code>）就有了对应的<code>Widget</code>和<code>Element</code>，并且有了自己的<code>child</code>。</p><h2 id="schedulewarmupframe" tabindex="-1"><a class="header-anchor" href="#schedulewarmupframe" aria-hidden="true">#</a> ..scheduleWarmUpFrame()</h2><p>这个方法则是尽快安排一个frame以便在屏幕下次刷新的时候显示app的内容（在app启动之后的第一次！！！），这样我们的app启动了，我们写的内容也能正常显示到屏幕上。</p><p>通过上述分析，我们可以得知，runApp方法执行之后，创建了<code>RenderView</code>对象，并将其作为整个Flutter APP的RenderObject rendering tree的根节点（后续所有的Widget创建的RenderObject都是在RenderView的下层），并且初始化它以便在下一帧的时候对其进行渲染。</p><br><p>分析完了<code>runApp</code>，我们再来看一下刚刚提到的几个类，以及他们是如何添加到我们的flutter app中的。</p><h1 id="renderview" tabindex="-1"><a class="header-anchor" href="#renderview" aria-hidden="true">#</a> RenderView</h1>`,53),u={href:"https://github.com/flutter/flutter/blob/a0248ebdf20d2befe29cdf325dc7331826151dab/packages/flutter/lib/src/rendering/view.dart#L63",target:"_blank",rel:"noopener noreferrer"},r=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>↓[root]
 &gt;renderObject:RenderView#a00a5
 parent:null
 _debugReassembleConfig:null
 _notificationTree:nul1
 slot:null
 depth:1
 _widget:RenderObjectToWidgetAdapter
 &gt;_owner:BuildOwner
 _lifecycleState:_ElementLifecycle
 _debugForgottenChildrenWithGlobalKey:_HashSet
 _inheritedWidgets:nul1
 _dependencies:null
 _hadUnsatisfiedDependencies:false
 _dirty:false
 _inDirtyList:false
 _debugBuiltOnce:false
 _debugA1lowIgnoredCallsToMarkNeedsBuild:false
 _debugDoingBuild:false
 _ancestorRenderObjectElement:null
 _child:SingleChildRenderObjectElement
 _newWidget:null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查阅源码可知，RenderView是RenderObject，一般情况下是Flutter的根View，表示整个rendering tree的output surface，处理引导着render pipeline。</p><p>RenderView有且仅有一个RenderBox类型的<code>child</code>，他会强制将<code>child</code>的<code>size</code>改为RenderView初始化时候的入参<code>configuration</code>的值（一般是当前<code>window</code>也就是<strong>手机屏幕</strong>的逻辑像素<code>size</code>）。</p><h1 id="center" tabindex="-1"><a class="header-anchor" href="#center" aria-hidden="true">#</a> Center</h1><p>上节我们说道，Center Widget通过<code>RenderObjectToWidgetElement.updateChild</code>（最终调用Element同名方法）方法插入到渲染树中，下面我们详细分析一下这个过程：</p><p>在<code>updateChild</code>中，因为<code>child==null</code>，而<code>newWidget</code>也就是Center不为<code>null</code>，所以直接使用<code>inflateWidget(newWidget, newSlot)</code>创建新的Element并作为RenderObjectToWidgetElement的<code>_child</code>，而作为第一次创建的Center，在<code>Element.inflateWidget</code>方法中大概会执行下面几步：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token comment">// Element的inflateWidget方法：</span>

<span class="token keyword">final</span> <span class="token class-name">Element</span> newChild <span class="token operator">=</span> newWidget<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newChild<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> newChild<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是这里先执行了<code>Center.createElement</code>方法创建Element，然后调用此<code>Element.mount</code>方法将Element添加到Element tree。</p><p>让我们再看一下Center的Widget Details Tree：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Center
 alignment:Alignment.center 
 widthFactor:null
 heightFactor:null
 renderObject:RenderPositionedBox#94e0d 
 &gt;_parent:RenderObjectToWidgetElement 
 _debugReassembleConfig:null
 _notificationTree:null 
 &gt;_slot:Object
 _depth:2 
 &gt;_widget:Center 
 &gt;_owner:BuildOwner
 &gt;_lifecycleState:_ElementLifecycle
 &gt;_debugForgottenChildrenWithGlobalKey:_HashSet 
 _inheritedWidgets:null
 _dependencies:null
 _hadUnsatisfiedDependencies:true 
 _dirty:false
 _inDirtyList:false
 _debugBuiltOnce:false
 _debugA1lowIgnoredCallsToMarkNeedsBuild:false 
 _debugDoingBuild:false
 &gt;_ancestorRenderObjectElement:RenderObjectToWidgetElement 
 &gt;_child:StatelessElement

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到Center的<code>_parent</code>和<code>_ancestorRenderObjectElement</code>是RenderObjectToWidgetElement，<code>_depth</code>是2，这个和我们最初的分析一致，因为Center（其实严格来说，是Center Widget的（或子级的）RenderObject）是RenderView的<code>child</code>。</p><p>我们接下来主要关注一下几个属性：</p><ul><li><code>alignment</code>: Alignment.center</li><li><code>renderObject</code>: RenderPositionedBox</li><li><code>_widget</code>: Center</li><li><code>_child</code>: StatelessElement</li></ul><p>先看一下Center的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\basic.dart</span>

<span class="token keyword">class</span> <span class="token class-name">Center</span> <span class="token keyword">extends</span> <span class="token class-name">Align</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Creates a widget that centers its child.</span>
  <span class="token keyword">const</span> <span class="token class-name">Center</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> double<span class="token operator">?</span> widthFactor<span class="token punctuation">,</span> double<span class="token operator">?</span> heightFactor<span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> widthFactor<span class="token punctuation">:</span> widthFactor<span class="token punctuation">,</span> heightFactor<span class="token punctuation">:</span> heightFactor<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Center代码十分简单，主要的逻辑在他的父类Align中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\basic.dart</span>

<span class="token keyword">class</span> <span class="token class-name">Align</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token class-name">Align</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    <span class="token comment">// 这里alignment默认是居中</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>widthFactor<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heightFactor<span class="token punctuation">,</span>
    <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">RenderPositionedBox</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Center的父类可以创建自己的RenderObject</span>
    <span class="token keyword">return</span> <span class="token class-name">RenderPositionedBox</span><span class="token punctuation">(</span>
      alignment<span class="token punctuation">:</span> alignment<span class="token punctuation">,</span>
      widthFactor<span class="token punctuation">:</span> widthFactor<span class="token punctuation">,</span>
      heightFactor<span class="token punctuation">:</span> heightFactor<span class="token punctuation">,</span>
      textDirection<span class="token punctuation">:</span> <span class="token class-name">Directionality</span><span class="token punctuation">.</span><span class="token function">maybeOf</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RenderPositionedBox</span> renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    renderObject
      <span class="token punctuation">.</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> alignment
      <span class="token punctuation">.</span><span class="token punctuation">.</span>widthFactor <span class="token operator">=</span> widthFactor
      <span class="token punctuation">.</span><span class="token punctuation">.</span>heightFactor <span class="token operator">=</span> heightFactor
      <span class="token punctuation">.</span><span class="token punctuation">.</span>textDirection <span class="token operator">=</span> <span class="token class-name">Directionality</span><span class="token punctuation">.</span><span class="token function">maybeOf</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Align其实是一个<code>SingleChildRenderObjectWidget</code> ,对应的Element是<code>SingleChildRenderObjectElement</code>，他创建的RenderObject是<code>RenderPositionedBox</code> 。</p><p><code>SingleChildRenderObjectElement</code> 是一个<code>RenderObjectElement</code> 也就意味着他在rendering tree有一个关联的RenderObject负责layout，painting以及hit-test。</p><p>回到我们的Center Widget中：</p><h2 id="alignment-alignment-center" tabindex="-1"><a class="header-anchor" href="#alignment-alignment-center" aria-hidden="true">#</a> <strong>alignment: Alignment.center</strong></h2><p><strong>Alignment.center</strong>是在创建Center的时候默认设置的对齐方式</p><h2 id="renderobject-renderpositionedbox" tabindex="-1"><a class="header-anchor" href="#renderobject-renderpositionedbox" aria-hidden="true">#</a> <strong>renderObject: RenderPositionedBox</strong></h2><p><strong>RenderPositionedBox</strong>是Center Widget对应的RenderObject，在<code>SingleChildRenderObjectWidget.mount</code> 的时候创建。其本身并不在屏幕上绘制肉眼可见的内容，而是将child按照指定的对齐方式进行定位。</p><p><code>RenderPositionedBox</code> 的继承关系：<code>RenderPositionedBox</code> → <code>RenderAligningShiftedBox</code> → <code>RenderShiftedBox</code> → <code>RenderBox</code> → <code>RenderObject</code></p><p><strong>RenderPositionedBox</strong>可以按照给定的<code>AlignmentGeometry</code>定位child。在本例中，他的几个属性如下：</p><ul><li><code>alignment</code>: Alignment.center</li><li><code>_owner</code>: PipelineOwner</li><li><code>_parent</code>: RenderView</li><li><code>_child</code>: RenderParagraph</li></ul><p>前三个属性含义很明显，这里我们注意到他的<code>_child</code>并不是我们预期的<code>Text</code>，这个原因我们后面再分析。</p><h2 id="widget-center" tabindex="-1"><a class="header-anchor" href="#widget-center" aria-hidden="true">#</a> <strong>_widget: Center</strong></h2><p>其实通过上述的分析，我们应该已经知道，我们在Widget Details Tree中看到的Center其实是Center Widget对应的Element，也就是<code>SingleChildRenderObjectElement</code> 。</p><p>其继承关系：<code>SingleChildRenderObjectElement</code> → <code>RenderObjectElement</code> → <code>Element</code></p><p>根据Element的定义，这里的Widget是在Widget创建<code>SingleChildRenderObjectElement</code>的时候传入的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>

<span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> widget<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      _widget <span class="token operator">=</span> widget<span class="token punctuation">;</span>

<span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectWidget</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Abstract const constructor. This constructor enables subclasses to provide</span>
  <span class="token comment">/// const constructors so that they can be used in const expressions.</span>
  <span class="token keyword">const</span> <span class="token class-name">SingleChildRenderObjectWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/// The widget below this widget in the tree.</span>
  <span class="token comment">///</span>
  <span class="token comment">/// {@macro flutter.widgets.ProxyWidget.child}</span>
  <span class="token keyword">final</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">SingleChildRenderObjectElement</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SingleChildRenderObjectElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这个Element在上述<code>WidgetsBinding.attachRootWidget</code>步骤中通过一系列操作，最终在RenderObjectToWidgetElement的<code>updateChild</code>方法被创建并被<code>BuildOwner</code> 插入到tree中。</p><p>这里的<code>_widget</code>才真正对应着我们在<code>runApp</code>里面传入的Center Widget，他的<code>child</code>也正是我们的Text。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Center
 alignment:Alignment.center
 widthFactor:null
 heightFactor:null
 &gt;renderObject:RenderPositionedBox#6e802
 &gt;_parent:RenderObjectToWidgetElement
 _debugReassembleConfig:null
 _notificationTree:null
 _slot:Object
 denth:2 _
 [[[widget:Center]]] //注意这里
  key:null
  location:_Location
  [[[child:Text]]] //注意这里
   key:null
   &gt;_location:_Location
   data:&#39;Hello center text!&#39;
   textSpan:null
   style:null
   strutStyle:null
   textAlign:null
   &gt;textDirection:TextDirection
   locale:null
   softWrap:null
   overflow:null
   textScaleFactor:null
   maxLines:null
   semanticsLabel:null
   textWidthBasis:null
   textHeightBehavior:null
  &gt;alignment:Alignment
  widthFactor:null
  heightFactor:nul1
 &gt;_owner:BuildOwner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="child-statelesselement" tabindex="-1"><a class="header-anchor" href="#child-statelesselement" aria-hidden="true">#</a> <strong>_child: StatelessElement</strong></h2><p>Center对应的Element的<code>_child</code>是一个StatelessElement，按照我们上一步的分析，StatelessElement应该是Text Widget创建，事实也确实如此：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>↓_child: StatelessElement
 &gt;_parent: SingleChildRenderObjectElement
 debugReassembleConfig： null
 _notificationTree: null
 slot: null
 depth: 3
 &gt;_widget: Text
 &gt;_owner: BuildOwner
 &gt;_lifecycleState: _ElementLifecycle
 &gt;_debugForgottenChildrenWithGlobalKey: _HashSet
 _inheritedWidgets: null
 dependencies: null
 _hadUnsatisfiedDependencies: true
 _dirty: false
 _inDirtyList: false
 debugBuiltOnce: false
 _debugAllowIgnoredCallsToMarkNeedsBuild: false
 &gt;_child: MultichildRenderObjectElement
 debugDoingBuild: false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们分析一下这个<code>_child</code>的赋值过程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token keyword">class</span> <span class="token class-name">SingleChildRenderObjectElement</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectElement</span> <span class="token punctuation">{</span>
	<span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _child <span class="token operator">=</span> <span class="token function">updateChild</span><span class="token punctuation">(</span>_child<span class="token punctuation">,</span> <span class="token punctuation">(</span>widget <span class="token operator">as</span> <span class="token class-name">SingleChildRenderObjectWidget</span><span class="token punctuation">)</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Center对应的Element——<code>SingleChildRenderObjectElement</code> 在<code>mount</code>的时候，同时也会更新<code>child</code>（本例中Center的<code>child</code>是Text），这里调用的是Element的<code>updateChild</code>方法，他的逻辑如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token operator">|</span>                     <span class="token operator">|</span> <span class="token operator">*</span><span class="token operator">*</span>newWidget <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">|</span> <span class="token operator">*</span><span class="token operator">*</span>newWidget <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token operator">*</span><span class="token operator">*</span>   <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">:</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token operator">*</span><span class="token operator">*</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">|</span>  <span class="token class-name">Returns</span> <span class="token keyword">null</span><span class="token punctuation">.</span>         <span class="token operator">|</span>  <span class="token class-name">Returns</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token operator">*</span><span class="token operator">*</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">|</span>  <span class="token class-name">Old</span> child <span class="token operator">is</span> removed<span class="token punctuation">,</span> returns <span class="token keyword">null</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token class-name">Old</span> child updated <span class="token keyword">if</span> possible<span class="token punctuation">,</span> returns child or <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token class-name">Element</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>updateChild</code>的逻辑分为4种情况：其余情况都比较简单，只有<code>newWidget != null</code>或者<code>child != null</code>的时候需要判断一下，如果可以更新就更新否则就创建新的Element，可以分为下面这几种情况：</p><ul><li><code>child.widget == newWidget</code>：两个是同一个对象，就只更新<code>child</code>的<code>slot</code></li><li><code>Widget.canUpdate(child.widget, newWidget)</code>：二者的<code>runtimeType</code>和<code>key</code>一样，就调用<code>child.update(newWidget)</code>更新<code>child._widget</code>，必要时更新<code>child</code>的<code>slot</code></li><li>否则创建新的<code>element</code>并替代</li></ul><p>到这里跟Center插入到render tree的步骤一样，将Text插入到了tree中。</p><h1 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> Text</h1><p>接下来我们分析一下Text是如何被加入Widget Details Tree的。</p><p>其继承关系：<code>Text</code> → <code>StatelessWidget</code> → <code>Widget</code></p><p>Text是StatelessWidget，他的内容比较简单，主要的逻辑都在<code>build</code>方法中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; \\lib\\src\\widgets\\text.dart</span>

<span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
    <span class="token class-name">String</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 
       textSpan <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">DefaultTextStyle</span> defaultTextStyle <span class="token operator">=</span> <span class="token class-name">DefaultTextStyle</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TextStyle</span><span class="token operator">?</span> effectiveTextStyle <span class="token operator">=</span> style<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>style <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> style<span class="token operator">!</span><span class="token punctuation">.</span>inherit<span class="token punctuation">)</span>
      effectiveTextStyle <span class="token operator">=</span> defaultTextStyle<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">boldTextOverride</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>
      effectiveTextStyle <span class="token operator">=</span> effectiveTextStyle<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意这里返回了RichText</span>
    <span class="token class-name">Widget</span> result <span class="token operator">=</span> <span class="token class-name">RichText</span><span class="token punctuation">(</span>
      textAlign<span class="token punctuation">:</span> textAlign <span class="token operator">?</span><span class="token operator">?</span> defaultTextStyle<span class="token punctuation">.</span>textAlign <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>
      textDirection<span class="token punctuation">:</span> textDirection<span class="token punctuation">,</span> <span class="token comment">// RichText uses Directionality.of to obtain a default if this is null.</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      text<span class="token punctuation">:</span> <span class="token class-name">TextSpan</span><span class="token punctuation">(</span>
        style<span class="token punctuation">:</span> effectiveTextStyle<span class="token punctuation">,</span>
        text<span class="token punctuation">:</span> data<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> textSpan <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InlineSpan</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>textSpan<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，作为StatelessWidget，他也创建了一个<code>StatelessElement</code> ：</p><p>其继承关系：<code>StatelessElement</code> → <code>ComponentElement</code> → <code>Element</code></p><p>按照之前的分析，Text插入到tree中执行的方法分别是<code>Text.createElement</code>和Text对应的Element——<code>StatelessElement.mount</code>方法：</p><p>Text是StatelessWidget的子类，他的主要逻辑都在StatelessWidget：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StatelessWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Key</span><span class="token operator">?</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">StatelessElement</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">StatelessElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token metadata function">@protected</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其<code>createElement</code>创建的是StatelessElement，也就是说Text插入到Center过程主要在StatelessElement中。</p><p><code>StatelessElement.mount</code>方法主要逻辑在ComponentElement中，这个方法除了调用Element同名方法外，还调用了<code>ComponentElement._firstBuild()</code> → <code>Element.rebuild()</code> → <code>ComponentElement.performRebuild()</code> ：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token comment">// ComponentElement类中的方法</span>

<span class="token keyword">void</span> <span class="token function">performRebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Widget</span><span class="token operator">?</span> built<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里调用Element对应的Widget的build方法创建Widget，也就是RichText</span>
      built <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// We delay marking the element as clean until after calling build() so</span>
      <span class="token comment">// that attempts to markNeedsBuild() during build() will be ignored.</span>
      _dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugSetAllowIgnoredCallsToMarkNeedsBuild</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将上述创建的Widget：built经过处理后赋值给Element的_child</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      _child <span class="token operator">=</span> <span class="token function">updateChild</span><span class="token punctuation">(</span>_child<span class="token punctuation">,</span> built<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>_child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      built <span class="token operator">=</span> <span class="token class-name">ErrorWidget</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      _child <span class="token operator">=</span> <span class="token function">updateChild</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> built<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的主要有两个步骤：</p><ul><li>调用<code>ComponentElement.build</code>方法，生产Widget（本例中，间接调用了Text的<code>build</code>方法）</li><li>调用<code>ComponentElement.updateChild</code>方法，更新<code>child</code>（最终执行的是Element同名方法逻辑）</li></ul><p>到目前为止，我们的Widget/Element/RenderObject tree如下（第四级RichText下面再分析）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Widget</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span>       <span class="token class-name">RenderObjectToWidgetAdapter</span> → <span class="token class-name">Center</span>                         → <span class="token class-name">Text</span>              → <span class="token operator">*</span><span class="token class-name">RichText</span><span class="token operator">*</span>

<span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Element</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span>      <span class="token class-name">RenderObjectToWidgetElement</span> → <span class="token class-name">SingleChildRenderObjectElement</span> → <span class="token class-name">StatelessElement</span>  → <span class="token operator">*</span><span class="token class-name">MultiChildRenderObjectElement</span><span class="token operator">*</span>

<span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">RenderObject</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span> <span class="token class-name">RenderView</span>                  → <span class="token class-name">RenderPositionedBox</span>            → <span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>               → <span class="token operator">*</span><span class="token class-name">RenderParagraph</span><span class="token operator">*</span>

注：
<span class="token number">1.</span> 这里的<span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>实际上不存在，只是为了和<span class="token class-name">Text</span>对应表示这里本应该有一个对应的<span class="token class-name">RenderObject</span>
<span class="token number">2.</span> 最后一列<span class="token operator">*</span><span class="token class-name">RichText</span><span class="token operator">*</span>对应的节点目前还没有分析到，此处仅做提前展示
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难看出，在从定往下数第三层也就是Text对应的这一级中，RenderObject tree这里并没有对应的对象，在上面的分析中，我们也看到了StatelessWidget本身并没有创建RenderObject的方法。实际上，Widget分为多个种类，只有RenderObject类及其子类才会创建RenderObject：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_run_app/heritance_of_widget.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="richtext" tabindex="-1"><a class="header-anchor" href="#richtext" aria-hidden="true">#</a> RichText</h2><p>终于到了我们这个app真正在屏幕上显示的内容这里了，上面我们分析到，Text作为StatelessWidget，本身并不会产生可以在屏幕上绘制的RenderObject，而是通过他的<code>build</code>方法返回一个可以产生RenderObject的Widget，在本例中，这个Widget就是RichText：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\basic.dart</span>

<span class="token keyword">class</span> <span class="token class-name">RichText</span> <span class="token keyword">extends</span> <span class="token class-name">MultiChildRenderObjectWidget</span> <span class="token punctuation">{</span>
	<span class="token metadata function">@override</span>
  <span class="token class-name">RenderParagraph</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>textDirection <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">debugCheckHasDirectionality</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">RenderParagraph</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>
      textAlign<span class="token punctuation">:</span> textAlign<span class="token punctuation">,</span>
      textDirection<span class="token punctuation">:</span> textDirection <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">Directionality</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
      softWrap<span class="token punctuation">:</span> softWrap<span class="token punctuation">,</span>
      overflow<span class="token punctuation">:</span> overflow<span class="token punctuation">,</span>
      textScaleFactor<span class="token punctuation">:</span> textScaleFactor<span class="token punctuation">,</span>
      maxLines<span class="token punctuation">:</span> maxLines<span class="token punctuation">,</span>
      strutStyle<span class="token punctuation">:</span> strutStyle<span class="token punctuation">,</span>
      textWidthBasis<span class="token punctuation">:</span> textWidthBasis<span class="token punctuation">,</span>
      textHeightBehavior<span class="token punctuation">:</span> textHeightBehavior<span class="token punctuation">,</span>
      locale<span class="token punctuation">:</span> locale <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">Localizations</span><span class="token punctuation">.</span><span class="token function">maybeLocaleOf</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RichText继承自<code>MultiChildRenderObjectWidget</code> ，如上节分析的，是一种<code>RenderObjectWidget</code>，它创建了真正在屏幕上渲染的RenderObject——<code>RenderParagraph</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\rendering\\paragraph.dart</span>

<span class="token keyword">class</span> <span class="token class-name">RenderParagraph</span> <span class="token keyword">extends</span> <span class="token class-name">RenderBox</span>
    <span class="token keyword">with</span> <span class="token class-name">ContainerRenderObjectMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">,</span> <span class="token class-name">TextParentData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
             <span class="token class-name">RenderBoxContainerDefaultsMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">,</span> <span class="token class-name">TextParentData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
                  <span class="token class-name">RelayoutWhenSystemFontsChangeMixin</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面说道，Text本身作为StatelessWidget并不产生RenderObject，那么这里的RenderParagraph是如何找到并插入到rendering tree中的呢？</p><p>带着这个疑问，我们看一下<code>MultiChildRenderObjectWidget</code> 创建的<code>MultiChildRenderObjectElement</code> ：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>

<span class="token keyword">class</span> <span class="token class-name">MultiChildRenderObjectElement</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectElement</span> <span class="token punctuation">{</span>
	<span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">MultiChildRenderObjectWidget</span> multiChildRenderObjectWidget <span class="token operator">=</span> widget <span class="token operator">as</span> <span class="token class-name">MultiChildRenderObjectWidget</span><span class="token punctuation">;</span>
    <span class="token comment">// 本例中不涉及children</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span>multiChildRenderObjectWidget<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">,</span> _NullElement<span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Element</span><span class="token operator">?</span> previousChild<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Element</span> newChild <span class="token operator">=</span> <span class="token function">inflateWidget</span><span class="token punctuation">(</span>multiChildRenderObjectWidget<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">IndexedSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> previousChild<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newChild<span class="token punctuation">;</span>
      previousChild <span class="token operator">=</span> newChild<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _children <span class="token operator">=</span> children<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到，在MultiChildRenderObjectElement的<code>mount</code>方法中：</p><ul><li>调用父类<code>mount</code>方法</li><li>遍历了所有的<code>children</code>将其插入到MultiChildRenderObjectElement中。</li></ul><p>在前面的Text源码中，我们注意到给只给<code>RichText.text</code>赋值了，RichText的<code>textSpan</code>和<code>children</code>都是<code>null</code>，所以后面对<code>children</code>的处理在本例中不涉及，让我们看一下<code>super.mount(parent, newSlot)</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RenderObjectElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token operator">?</span> parent<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里调用对应的RenderObjectWidget创建_renderObject</span>
    _renderObject <span class="token operator">=</span> <span class="token punctuation">(</span>widget <span class="token operator">as</span> <span class="token class-name">RenderObjectWidget</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将其绑定到rendering tree中</span>
    <span class="token function">attachRenderObject</span><span class="token punctuation">(</span>newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要有2步：</p><ul><li>通过<code>widget.createRenderObject</code> 创建<code>_renderObject</code>，本例中就是用RichText创建了RenderParagraph</li><li>调用<code>RenderObjectElement.attachRenderObject</code>方法将<code>_renderObject</code>插入到rendering tree</li></ul><p>让我们看一下attachRenderObject的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token comment">// RenderObjectElement类的方法</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">attachRenderObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token operator">?</span> newSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>_ancestorRenderObjectElement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _slot <span class="token operator">=</span> newSlot<span class="token punctuation">;</span>
    <span class="token comment">// 向上遍历，找到父级节点中最近的RenderObjectElement</span>
    _ancestorRenderObjectElement <span class="token operator">=</span> <span class="token function">_findAncestorRenderObjectElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将renderObject插入</span>
    _ancestorRenderObjectElement<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">insertRenderObjectChild</span><span class="token punctuation">(</span>renderObject<span class="token punctuation">,</span> newSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ParentDataElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentData</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> parentDataElement <span class="token operator">=</span> <span class="token function">_findAncestorParentDataElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentDataElement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token function">_updateParentData</span><span class="token punctuation">(</span>parentDataElement<span class="token punctuation">.</span>widget <span class="token operator">as</span> <span class="token class-name">ParentDataWidget</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">RenderObjectElement</span><span class="token operator">?</span> <span class="token function">_findAncestorRenderObjectElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Element</span><span class="token operator">?</span> ancestor <span class="token operator">=</span> _parent<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ancestor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ancestor <span class="token operator">is!</span> <span class="token class-name">RenderObjectElement</span><span class="token punctuation">)</span>
      ancestor <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>_parent<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ancestor <span class="token operator">as</span> <span class="token class-name">RenderObjectElement</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在<code>attachRenderObject</code>方法中插入的方式很简单：先在当前tree中向上找到父级中离得最近的RenderObjectElement，在本例中是Center这个Widget对应的SingleChildRenderObjectElement（注意不是创建RichText的Text），然后调用其<code>insertRenderObjectChild</code>方法将当前的RenderParagraph插入到rendering tree中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// -&gt; lib\\src\\widgets\\framework.dart</span>
<span class="token keyword">class</span> <span class="token class-name">SingleChildRenderObjectElement</span> <span class="token keyword">extends</span> <span class="token class-name">RenderObjectElement</span> <span class="token punctuation">{</span>
	<span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">insertRenderObjectChild</span><span class="token punctuation">(</span><span class="token class-name">RenderObject</span> child<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token operator">?</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">RenderObjectWithChildMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span> renderObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderObject <span class="token operator">as</span> <span class="token class-name">RenderObjectWithChildMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
    renderObject<span class="token punctuation">.</span>child <span class="token operator">=</span> child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SingleChildRenderObjectElement的<code>insertRenderObjectChild</code>方法中先是查找当前Element持有的<code>renderObject</code>,然后将我们传入的RichText的RenderObject——RenderParagraph赋值给<code>renderObject.child</code>。</p><p>到这里，我们的所有Widget在Element的组织下，将对于的RenderObject添加到Rendering Tree中，他们的关系如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Widget</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span>       <span class="token class-name">RenderObjectToWidgetAdapter</span> → <span class="token class-name">Center</span>                         → <span class="token class-name">Text</span>              → <span class="token class-name">RichText</span>

<span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Element</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span>      <span class="token class-name">RenderObjectToWidgetElement</span> → <span class="token class-name">SingleChildRenderObjectElement</span> → <span class="token class-name">StatelessElement</span>  → <span class="token class-name">MultiChildRenderObjectElement</span>

<span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">RenderObject</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">:</span> <span class="token class-name">RenderView</span>                  → <span class="token class-name">RenderPositionedBox</span>                                → <span class="token class-name">RenderParagraph</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当屏幕刷新的时候，这些内容便绘制在屏幕上面。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>在<code>runApp</code>方法中，WidgetsFlutterBinding作为将flutter framework绑定到flutter engine的粘合剂：</p><ul><li><p>在<code>ensureInitialized</code>方法中创建了<code>_pipelineOwner</code>（管理rendering tree）、<code>renderView</code>和<code>buildOwner</code>（通过管理Element tree间接管理widget tree），并将<code>renderView</code>设置为<code>_pipelineOwner</code>的根节点。</p></li><li><p>在<code>scheduleAttachRootWidget</code>方法中，为<code>renderView</code>创建并绑定了对应的Widget（RenderObjectToWidgetAdapter）和Element（RenderObjectToWidgetElement）。然后通过<code>RenderObjectToWidgetElement.mount</code>方法，将之前创建的<code>buildOwner</code>与自己绑定。</p><p>并且将我们在<code>runApp</code>传入的Widget<code>rootWidget</code>（也就是本例中的Center Widget）对应的Element添加为RenderObjectToWidgetElement的子节点。并依此将Text、Text内部的RichText等对应的Element都加入到Element tree中，直到遍历完整个Widget tree。</p></li><li><p>在<code>scheduleWarmUpFrame</code>方法中安排在下一次屏幕刷新的时候将我们的内容展示在屏幕上面。</p></li></ul><p>下面是我们这个“最”简单的Flutter App的结构示意：</p><figure><img src="https://jixiaoyong.github.io/images/flutter_run_app/flutter_run_app_widget_elelemt_renderobject_tree.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,93),k={href:"https://api.flutter.dev/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.youtube.com/watch?v=PnWxW21vDak",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.youtube.com/watch?v=FU2Eeizo95o&ab_channel=RetroPortalStudio",target:"_blank",rel:"noopener noreferrer"},b={href:"http://zxfcumtcs.github.io/2020/12/05/deepinto-flutter-pipelineowner/",target:"_blank",rel:"noopener noreferrer"};function g(h,w){const a=c("ExternalLinkIcon");return o(),l("div",null,[d,n("p",null,[s("先看一下在最顶层的"),n("a",u,[s("RenderView"),e(a)]),s("：")]),r,n("p",null,[n("a",k,[s("Flutter - Dart API docs"),e(a)])]),n("p",null,[n("a",m,[s("Flutter, what are Widgets, RenderObjects and Elements? - Norbert Kozsir | Flutter Europe"),e(a)])]),n("p",null,[n("a",v,[s("Flutter Widgets Explained | Understand How Flutter Works!"),e(a)])]),n("p",null,[n("a",b,[s("深入浅出 Flutter Framework 之 PipelineOwner"),e(a)])])])}const y=p(i,[["render",g],["__file","4cbcfe72.html.vue"]]);export{y as default};
