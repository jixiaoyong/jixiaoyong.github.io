const t=JSON.parse('{"key":"v-33ad4072","path":"/posts/cf83ef31.html","title":"JVM类加载机制解析","lang":"zh-CN","frontmatter":{"permalink":"/posts/cf83ef31.html","title":"JVM类加载机制解析","abbrlink":"cf83ef31","date":"2018-02-26T19:28:56.000Z","tag":"jvm","description":"简述 本文介绍了java虚拟机类加载机制。 类加载机制 JVM类加载一共7步，前五步是类加载机制，各个步骤按照顺序进行，但是并非固定的1,2,3步，在实际中有可能从其中间某一步开始。 类加载机制一般分为三部分：加载Loading -&gt; 连接Linking -&gt; 初始化Initializing JVM Class Loader","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/cf83ef31.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"JVM类加载机制解析"}],["meta",{"property":"og:description","content":"简述 本文介绍了java虚拟机类加载机制。 类加载机制 JVM类加载一共7步，前五步是类加载机制，各个步骤按照顺序进行，但是并非固定的1,2,3步，在实际中有可能从其中间某一步开始。 类加载机制一般分为三部分：加载Loading -&gt; 连接Linking -&gt; 初始化Initializing JVM Class Loader"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-07T15:44:26.000Z"}],["meta",{"property":"article:author","content":"JI,XIAOYONG"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:published_time","content":"2018-02-26T19:28:56.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-07T15:44:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM类加载机制解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-26T19:28:56.000Z\\",\\"dateModified\\":\\"2023-04-07T15:44:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"headers":[{"level":2,"title":"**I.Loading **","slug":"i-loading","link":"#i-loading","children":[]},{"level":2,"title":"**II.Linking **","slug":"ii-linking","link":"#ii-linking","children":[{"level":3,"title":"Verification","slug":"verification","link":"#verification","children":[]},{"level":3,"title":"**Preparation **","slug":"preparation","link":"#preparation","children":[]},{"level":3,"title":"Resolution","slug":"resolution","link":"#resolution","children":[]}]},{"level":2,"title":"III.Initialization","slug":"iii-initialization","link":"#iii-initialization","children":[]}],"git":{"createdTime":1680882266000,"updatedTime":1680882266000,"contributors":[{"name":"Ji Xiaoyong","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":7.23,"words":2169},"filePathRelative":"_posts/JVM类加载机制解析.md","localizedDate":"2018年2月27日","excerpt":"<h1> 简述</h1>\\n<p>本文介绍了java虚拟机类加载机制。</p>\\n<h1> 类加载机制</h1>\\n<p>JVM类加载一共7步，前五步是类加载机制，各个步骤按照顺序进行，但是并非固定的1,2,3步，在实际中有可能从其中间某一步开始。</p>\\n<p>类加载机制一般分为三部分：<strong>加载Loading -&gt; 连接Linking -&gt; 初始化Initializing</strong></p>\\n<figure><img src=\\"https://github.com/jixiaoyong/Notes-Files/blob/master/draw-io/png/JVMClassLoader.png?raw=true\\" alt=\\"JVM Class Loader\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>JVM Class Loader</figcaption></figure>","autoDesc":true}');export{t as data};
