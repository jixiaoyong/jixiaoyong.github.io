import{_ as s,c as a,a as e,o as n}from"./app-DQAvLgyB.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p><code>FLutter</code>中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致<code>Widget.build()</code>返回为<code>null</code>的错误会导致<code>Widget</code>构建失败，并返回<em>红底黄字</em>的错误原因<code>Widget</code>（在 Release 模式则会显示为<em>灰底区域</em>）；一般来说，Flutter 中的错误都会被<code>FlutterError.onError</code>捕获并处理；对于异步方法产生异常等<code>Flutter框架</code>没有捕获的情况，会交由当前代码所在的<code>Zone</code>处理（这些异常可以使用<code>runZonedGuarded</code>捕获并处理）。</p><blockquote><p><strong>为什么 flutter 触发异常的时候不会崩溃？</strong><br> 这个和 <code>flutter</code> 的消息循环机制有关，任务分两种，一个是微任务 <code>microtask</code>，一个是事件 <code>event</code>，他们有自己的队列，每个任务是相互独立的，一旦某个任务触发异常，也就是导致这个任务后续代码无法执行，并不会影响其他任务执行</p></blockquote><p><em>本文基于 Flutter (Channel stable, 2.2.3)</em></p><h2 id="详细说明" tabindex="-1"><a class="header-anchor" href="#详细说明"><span>详细说明</span></a></h2><p>Flutter 中的错误处理分为以下几种：</p><h3 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch"><span><code>try...catch</code></span></a></h3><p>对于普通的错误，可以通过<code>try...catch</code>来捕获：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">               try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> three </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">on</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RangeError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这里是捕获 RangeError 类型的异常 </span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这里是兜底的捕获异常 </span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这里是无论如何都会执行的代码&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于，异步异常，可以使用<code>await</code>等待其执行完毕，将其变为同步任务，否则无法则捕获。</p><h3 id="errorwidget-builder" tabindex="-1"><a class="header-anchor" href="#errorwidget-builder"><span><code>ErrorWidget.builder</code></span></a></h3><p>当在<code>Widget</code>构建过程中出现错误，导致<code>build()</code>方法返回<code>null</code>，<code>Flutter框架</code>会调用<code>ErrorWidget.builder</code>返回一个<code>Widget</code>替代<code>出错的Widget</code>。</p><p>默认情况下，<code>debug</code>模式返回的是红底黄字的错误提示，而<code>release</code>模式返回的是<code>灰色Widget</code>。</p><p>可以在<code>RunApp</code>方法中替换这个默认的错误界面：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">runApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MaterialApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      home</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Scaffold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        appBar</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppBar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        body</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BodyWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      builder</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (context, widget) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Widget 在 Build 时出错的话，展示此 Widget，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 如果不定义的话，debug 下为红底黄字错误信息，release 会显示为灰色布局</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // errorDetails 在 release 模式下为空</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ErrorWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.builder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FlutterErrorDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> errorDetails) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          return</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainErrorWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(widget, errorDetails);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> widget </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">??</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的<code>MainErrorWidget</code>是一个自定义的展示错误信息的页面。</p><ul><li><p><code>MainErrorWidget</code>的一种实现方式</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainErrorWidget</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StatelessWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Widget</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> parentWidget;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  FlutterErrorDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> errorDetails;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  MainErrorWidget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.parentWidget, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.errorDetails);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  @override</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Widget</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BuildContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> context) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3. 布局出现错误，展示错误页面,此处错误在release中也会调用FlutterError.onError&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Widget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> error </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Card</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      child</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SingleChildScrollView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        child</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          padding</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EdgeInsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          color</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Colors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.green,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          child</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &#39;布局出现错误，以下是错误信息:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">errorDetails</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            style</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TextStyle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fontSize</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, color</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Colors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.white),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          ),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (parentWidget is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Scaffold</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> parentWidget is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      debugPrint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;widget</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parentWidget</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">()}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parentWidget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)  is Scaffold </span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parentWidget</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> is</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Scaffold</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or Navigator </span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parentWidget</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> is</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Navigator</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // error = Container(child: error);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> error;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>需要注意的是，错误<code>Widget</code>在<code>Debug</code>和<code>Release</code>模式下有一些区别：</p><ul><li><code>Debug</code>模式下<code>ErrorWidget.builder</code>会返回错误详细信息<code>FlutterErrorDetails</code> ，<code>Release</code>下则不会；</li><li><code>Debug</code>模式下，<code>Widget</code>等出错会打印<code>Exception caught by widgets library ...</code> 等提示并输出错误堆栈信息，但是<code>Release</code>模式下不会；</li><li><code>Debug</code>模式下，出错不会调用<code>FlutterError.onError</code>，<code>Release</code>模式下会。</li></ul><h3 id="fluttererror-onerror" tabindex="-1"><a class="header-anchor" href="#fluttererror-onerror"><span><code>FlutterError.onError</code></span></a></h3><p>上述几种情况都没有处理的，被 Flutter 框架引起的异常，会在这里被处理。</p><p>在<code>Flutter 2.2.3</code>中，<code>Debug</code>模式下如<code>onPressed</code>中的未捕获错误等都会被 Widget 等捕获，而不会走到这里来，在<code>Release</code>模式下则会调用<code>FlutterError.onError</code>。</p><p>在这里可以对错误进行处理，比如输出到控制台、交给 Zone 统一处理、直接结束掉 APP 等：</p><ul><li><code>FlutterError.dumpErrorToConsole(details);</code> 输出到控制台</li><li><code>exit(1);</code> 退出 APP</li><li><code>Zone.current.handleUncaughtError(details.exception, details.stack);</code> 交给 Zone 统一处理</li><li><code>defaultOnError?.call(details);</code> 自己处理完异常后，也要把异常向上抛【推荐】，其中<code>defaultOnError</code> 可以预先缓存<code>final defaultOnError = FlutterError.onError;</code></li></ul><h3 id="runzonedguarded-onerror" tabindex="-1"><a class="header-anchor" href="#runzonedguarded-onerror"><span><code>runZonedGuarded(onError)</code></span></a></h3><p>上述几种情况都没有处理的异常，会被发送到这里处理，可以类比为<code>Android</code>中的<code>Thread.UncaughtExceptionHandler</code>。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">runZonedGuarded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    runApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(...);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> error, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stack) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 没有被 Flutter 捕获的错误，全局未捕获异常处理，类似于 Android 的 Thread.UncaughtExceptionHandler</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 比如异步的方法</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2. runZonedGuarded.onError </span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zone 可以理解为一个沙盒，其中的代码出错，包括异步的都可以捕获到。但是如果是另外一个沙盒中的错误则无法处理。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://flutter.cn/docs/testing/errors#define-a-custom-error-widget-for-build-phase-errors" target="_blank" rel="noopener noreferrer">Flutter 官网异常处理</a></p><p><a href="https://www.fnzblog.site/Flutter%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html" target="_blank" rel="noopener noreferrer">Flutter 异常处理</a></p>`,31)]))}const k=s(l,[["render",t]]),d=JSON.parse('{"path":"/posts/9e235953.html","title":"Flutter 中的异常处理","lang":"zh-CN","frontmatter":{"permalink":"/posts/9e235953.html","title":"Flutter 中的异常处理","abbrlink":"9e235953","date":"2021-07-29T07:41:47.000Z","updated":"2023-12-30T08:17:02.000Z","tag":"flutter","isOriginal":true,"description":"说明 FLutter中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致Widget.build()返回为null的错误会导致Widget构建失败，并返回红底黄字的错误原因Widget（在 Release 模式则会显示为灰底区域）；一般来说，Flutter 中的错误都会被FlutterError.onError捕获并处理；对于异步方法产...","head":[["meta",{"property":"og:url","content":"https://jixiaoyong.github.io/blog/posts/9e235953.html"}],["meta",{"property":"og:site_name","content":"JI,XIAOYONG"}],["meta",{"property":"og:title","content":"Flutter 中的异常处理"}],["meta",{"property":"og:description","content":"说明 FLutter中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致Widget.build()返回为null的错误会导致Widget构建失败，并返回红底黄字的错误原因Widget（在 Release 模式则会显示为灰底区域）；一般来说，Flutter 中的错误都会被FlutterError.onError捕获并处理；对于异步方法产..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T16:00:22.000Z"}],["meta",{"property":"article:tag","content":"flutter"}],["meta",{"property":"article:published_time","content":"2021-07-29T07:41:47.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T16:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flutter 中的异常处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-29T07:41:47.000Z\\",\\"dateModified\\":\\"2024-05-31T16:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JI,XIAOYONG\\",\\"url\\":\\"https://jixiaoyong.github.io\\"}]}"]]},"git":{"createdTime":1653726847000,"updatedTime":1717171222000,"contributors":[{"name":"jixiaoyong","username":"jixiaoyong","email":"jixiaoyong1995@gmail.com","commits":5,"url":"https://github.com/jixiaoyong"},{"name":"Ji Xiaoyong","username":"","email":"jixiaoyong1995@gmail.com","commits":1},{"name":"JI,XIAOYONG","username":"","email":"jixiaoyong1995@gmail.com","commits":1}]},"readingTime":{"minutes":3.78,"words":1134},"filePathRelative":"_posts/Flutter_Handle_Error.md","localizedDate":"2021年7月29日","excerpt":"<h2>说明</h2>\\n<p><code>FLutter</code>中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致<code>Widget.build()</code>返回为<code>null</code>的错误会导致<code>Widget</code>构建失败，并返回<em>红底黄字</em>的错误原因<code>Widget</code>（在 Release 模式则会显示为<em>灰底区域</em>）；一般来说，Flutter 中的错误都会被<code>FlutterError.onError</code>捕获并处理；对于异步方法产生异常等<code>Flutter框架</code>没有捕获的情况，会交由当前代码所在的<code>Zone</code>处理（这些异常可以使用<code>runZonedGuarded</code>捕获并处理）。</p>","autoDesc":true}');export{k as comp,d as data};
