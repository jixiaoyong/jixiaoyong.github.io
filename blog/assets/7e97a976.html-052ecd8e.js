import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as n,b as s,d as a,e as t}from"./app-14d46302.js";const u={},r=t('<p>Android中的跨进程通信IPC主要有以下几种方式：</p><ul><li>BroadcastReceiver</li><li>ContentProvider</li><li>AIDL</li><li>Messenger</li><li>Socket</li><li>文件</li></ul><p>Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制</p><p><strong>进程是资源分配的基本单位，线程是调度的基本单位。</strong></p><h1 id="一些基础知识" tabindex="-1"><a class="header-anchor" href="#一些基础知识" aria-hidden="true">#</a> 一些基础知识</h1><p>以下内容来自：</p>',6),d=n("br",null,null,-1),k={href:"https://juejin.im/post/59f8691b51882534af254317",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m=n("br",null,null,-1),b=n("p",null,[s("Linux为每个进程维护了一个单独的虚拟地址空间。"),n("strong",null,"虚拟地址空间分为内核空间与用户空间"),s("，用户空间包括代码、数据、堆、共享库以及栈，内核空间包括内核中的代码和数据结构，内核空间的某些区域被映射到所有进程共享的物理页面。Linux也将一组连续的虚拟页面（大小等于内存总量）映射到相应的一组连续的物理页面，这种做法为内核提供了一种便利的方法来访问物理内存中任何特定的位置。")],-1),g=n("img",{src:"https://jixiaoyong.github.io/images/20200422114446.png",alt:"示意图来自https://juejin.im/post/59f8691b51882534af254317",tabindex:"0",loading:"lazy"},null,-1),h={href:"https://juejin.im/post/59f8691b51882534af254317",target:"_blank",rel:"noopener noreferrer"},_=t('<p>Linux通过将一个虚拟内存区域与一个硬盘上的文件关联起来，以初始化这个虚拟内存区域的内容，这个过程称为<strong>内存映射</strong>（memory mapping）。这种将虚拟内存系统集成到文件系统的方法可以简单而高效地把程序和数据加载到内存中。</p><p><strong>普通文件映射就是将一个文件与一块内存建立起映射关系，对该文件进行IO操作可以绕过内核直接在用户态完成（用户态在该虚拟地址区域读写就相当于读写这个文件）</strong>。匿名文件映射一般在用户空间需要分配一段内存来存放数据时，由内核创建匿名文件并与内存进行映射，之后用户态就可以通过操作这段虚拟地址来操作内存了。匿名文件映射最熟悉的应用场景就是动态内存分配（malloc()函数）。</p><p><strong>内存映射提供了共享对象的机制，来避免内存资源的浪费。一个对象被映射到虚拟内存的一个区域，要么是作为共享对象，要么是作为私有对象的。</strong> 进程对共享对象的写操作对于其他也使用到该共享对象的进程是可见的。</p><p>CPU获取到虚拟地址，然后通过MMU（内存管理单元）将其翻译为物理地址。</p><h1 id="linux-ipc" tabindex="-1"><a class="header-anchor" href="#linux-ipc" aria-hidden="true">#</a> linux IPC</h1><p>优缺点参考：</p>',6),f=n("ol",null,[n("li",null,"管道：在创建时分配一个page大小的内存，缓存区大小比较有限；"),n("li",null,"消息队列：信息复制两次，额外的CPU消耗；不合适频繁或信息量大的通信；"),n("li",null,"共享内存：无须复制，共享缓冲区直接付附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决；"),n("li",null,"套接字：作为更通用的接口，传输效率低，主要用于不通机器或跨网络的通信；"),n("li",null,"信号量：常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。"),n("li",null,"信号: 不适用于信息交换，更适用于进程中断控制，比如非法内存访问，杀死某个进程等；")],-1),y=n("br",null,null,-1),w={href:"https://www.zhihu.com/question/39440766/answer/89210950",target:"_blank",rel:"noopener noreferrer"},S=n("ul",null,[n("li",null,"管道Pipe")],-1),I={href:"https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)",target:"_blank",rel:"noopener noreferrer"},B=n("strong",null,"数据复制2次，有长度限制",-1),A=n("img",{src:"https://jixiaoyong.github.io/images/20200422114721.jpg",alt:"示意图来自https://pic002.cnblogs.com/images/2012/426620/2012110216160766.jpg",tabindex:"0",loading:"lazy"},null,-1),x={href:"https://pic002.cnblogs.com/images/2012/426620/2012110216160766.jpg",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[s("如图，进程1将数据"),n("strong",null,"写入"),s("到管道（内存缓存区），进程2从管道中"),n("strong",null,"读取"),s("数据。数据从写端流入管道，从读端流出，这样就实现了进程间通信")],-1),j=n("p",null,"每个进程的输出被当做下一个进程的输入。",-1),T=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`ls -l | less //将ls -l 的结果输入到less中，实现分页
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),R={href:"https://www.cnblogs.com/biyeymyhjob/archive/2012/11/03/2751593.html",target:"_blank",rel:"noopener noreferrer"},M=n("br",null,null,-1),L={href:"https://blog.csdn.net/skyroben/article/details/71513385",target:"_blank",rel:"noopener noreferrer"},P=n("ul",null,[n("li",null,"消息队列Message")],-1),E=n("p",null,[s("是一串可以有不同类型的消息块的链表，可以避免阻塞。"),n("strong",null,"数据复制2次，有长度限制"),s("，缓冲小。")],-1),O={href:"https://www.ibm.com/developerworks/cn/linux/l-ipc/part3/index.html",target:"_blank",rel:"noopener noreferrer"},D=t("<ul><li>共享内存</li></ul><p>多个进程可以访问一个公用的内存空间。效率最高的IPC。<strong>数据内存复制0次,但是没有同步互斥机制</strong></p><ul><li>套接字Socket</li></ul><p>传输效率低，<strong>数据复制2次</strong></p><ul><li>信号量 semaphore</li></ul><p>与管道不同，信号量是为了保护进程共享资源在同一时刻只能被一个进程访问。解决同步和互斥问题。</p><p>sv：信号变量</p><p>对信号量的操作只有一下P(sv)和V(sv)两个原子操作:</p><ol><li>进程1访问资源时对信号量进行等待操作P(sv)（如果sv&gt;0则操作资源并将信号量-1，否则挂起进程等待）；</li><li>当该进程1对资源执行完操作后，对信号量进行发送操作V(sv)（此时如果有进程2等待sv而挂起，则恢复进程2，否则就给sv+1）</li></ol>",9),N={href:"https://blog.csdn.net/skyroben/article/details/72513985",target:"_blank",rel:"noopener noreferrer"},z=n("ul",null,[n("li",null,"信号 Signal")],-1),J=n("p",null,"信号是进程间通信中唯一的异步通信机制，通知接收信号的进程发生了什么事情。而进程接受到信号后可以忽略，捕获处理，或者使用系统默认操作。",-1),X={href:"https://www.ibm.com/developerworks/cn/linux/l-ipc/part2/index1.html",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"只能承载很小的信息量，主要用在进程的中断控制",-1),F=n("h1",{id:"binder",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#binder","aria-hidden":"true"},"#"),s(" Binder")],-1),Q=n("p",null,"数据拷贝1次，有权限校验（为发送方添加了UID/PID身份）",-1),V=n("img",{src:"https://jixiaoyong.github.io/images/20200422115508.gif",alt:"参与Binder通信的所有角色 图片来自https://blog.csdn.net/universus/article/details/6211589",tabindex:"0",loading:"lazy"},null,-1),Y={href:"https://blog.csdn.net/universus/article/details/6211589",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,"时序图：",-1),H=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/20200422115253.png",alt:"20200422115253",tabindex:"0",loading:"lazy"}),n("figcaption",null,"20200422115253")],-1),G=n("p",null,"理论上的Binder逻辑：",-1),U=n("p",null,"SMgr提供的Binder比较特殊，它没有名字也不需要注册，当一个进程使用BINDER_SET_CONTEXT_MGR命令将自己注册成SMgr时Binder驱动会自动为它创建Binder实体（这就是那只预先造好的鸡）。其次这个Binder的引用在所有Client中都固定为0而无须通过其它手段获得。",-1),Z=n("p",null,[s("在数据从发送方向接收方拷贝时，驱动会根据发送数据包的大小，使用最佳匹配算法从缓存池中找到一块大小合适的空间，"),n("strong",null,"将数据从发送缓存区复制过来"),s("。")],-1),K=n("p",null,"为了实现用户空间到用户空间的拷贝，Binder驱动的mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间，这就是Binder只需一次拷贝的‘秘密’。",-1),$=n("p",null,"版权声明：本文为CSDN博主「universus」的原创文章，遵循 CC 4.0 BY-SA",-1),nn=n("br",null,null,-1),sn={href:"https://blog.csdn.net/universus/article/details/6211589",target:"_blank",rel:"noopener noreferrer"},an={href:"https://blog.csdn.net/universus/article/details/6211589",target:"_blank",rel:"noopener noreferrer"},en={href:"https://blog.csdn.net/freekiteyu/article/details/70082302",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>Binder通信主要涉及一下对象：</p><ul><li>Server</li><li>Client</li><li>ServerManager</li><li>Binder驱动</li></ul><p>首先要知道，Server，Client以及ServerManager一般都在不同的进程之中，那么Server，Client如何与ServerManager通信并注册/查询所需的服务呢？这里就需要用到<strong>0号引用Binder</strong>。</p><p><strong>0号引用Binder</strong> 是ServerManager内部创建匿名Binder，所有的Client（相对于ServerManager来说其他和他交互的都是Client）都默认持有这个Binder的引用。</p><p>所以一个完整的AIDL通信过程如下：</p><ol><li>Server创建一个Binder和对应名字</li><li>Server通过持有的0号引用Binder和ServerManager通信。<br> 将生成的Binder和对应名字发送到Binder驱动，Binder驱动会为这个Binder在内核空间创建对应实体节点及其引用（<strong>复制了一次</strong>），并通过0号引用将其发给ServerManager。</li><li>ServerManager收到内核中的Binder对象引用及名字后将其保存到查找表中。</li><li>Client通过0号引用Binder和ServerManager通信。<br> Client将需要的Binder的名字发给ServerManager，ServerManager查询到已经注册的内核Binder引用并将其发给Client。</li><li>Client获取到内核Binder的引用进行操作。</li></ol><p>再来看看一个完整的流程：</p><p>在Service中，我们会先创建一个mIBinder对象并且在<code>public IBinder onBind(Intent intent)</code>方法返回。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">IBinder</span> mIBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AidlBinderInterface<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//这里实现我们服务能够提供的方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>追踪onBind方法，我们会发现<code>mIBinder</code>的对象会在ActivityThread中的<code>private void handleBindService(BindServiceData data)</code>方法中被传入到IActivityManager的publishService方法中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleBindService</span><span class="token punctuation">(</span><span class="token class-name">BindServiceData</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">IBinder</span> binder <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">onBind</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ActivityManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishService</span><span class="token punctuation">(</span>
                                data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> data<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> binder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ActivityManager.getService()方法是通过IPC获取到ActivityManager的引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * <span class="token keyword">@hide</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IActivityManager</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IActivityManagerSingleton</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IActivityManager</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">IActivityManagerSingleton</span> <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IActivityManager</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">protected</span> <span class="token class-name">IActivityManager</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">final</span> <span class="token class-name">IBinder</span> b <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">ACTIVITY_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">final</span> <span class="token class-name">IActivityManager</span> am <span class="token operator">=</span> <span class="token class-name">IActivityManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> am<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),pn={href:"https://www.jianshu.com/p/91c97710976a",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"onServiceConnected",-1),cn=n("strong",null,"即mIBinder通过ServerManager从Service传递到了Client",-1),ln=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mServiceInterface <span class="token operator">=</span> <span class="token class-name">AidlBinderInterface<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//我们通过得到的这个mServiceInterface可以在客户端调用服务所实现的方法</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),un={href:"https://blog.csdn.net/zhangyongfeiyong/article/details/51953300",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"context.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);",-1),dn=n("strong",null,"即mConnection通过ServerManager从Client传递到了Service",-1),kn=n("img",{src:"https://jixiaoyong.github.io/images/20200422115031.jpg",alt:"图片来自https://img-blog.csdn.net/20160719100800917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center",tabindex:"0",loading:"lazy"},null,-1),vn={href:"https://img-blog.csdn.net/20160719100800917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center",target:"_blank",rel:"noopener noreferrer"},mn=t(`<p>在这其中我们用到了两个涉及到AIDL文件：</p><ul><li>private IBinder mIBinder = new AidlBinderInterface.Stub() {}</li><li>mServiceInterface = AidlBinderInterface.Stub.asInterface(service);</li></ul><p>再来看看我们写的对应的AIDL文件：</p><div class="language-aidl line-numbers-mode" data-ext="aidl"><pre class="language-aidl"><code>interface AidlBinderInterface {
 //在这里定义服务需要提供的方法
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个文件中都是我们自己定义的方法，系统自动帮我们实现了更详细的内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl</span><span class="token punctuation">;</span>
<span class="token comment">// Declare any non-default types here with import statements</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AidlBinderInterface</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Local-side IPC implementation stub class.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token constant">DESCRIPTOR</span> <span class="token operator">=</span> <span class="token string">&quot;com.example.aidl.AidlBinderInterface&quot;</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Construct the stub at attach it to the interface.
         * 将DESCRIPTOR和这个接口绑定到一起
         * 本方法会在服务创建IBinder对象的时候调用
         */</span>
        <span class="token keyword">public</span> <span class="token class-name">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Cast an IBinder object into an com.example.aidl.AidlBinderInterface interface,
         * generating a proxy if needed.
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface</span> <span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 查询本地是否有符合该描述（DESCRIPTOR）接口的Binder对象</span>
            <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 有的话直接返回本地对象</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface</span><span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 没有的话，创建代理类，进行跨进程通信</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 在通信时，如果asInterface返回本地对象，则会执行本地对接口（DESCRIPTOR）的实现方法，</span>
        <span class="token comment">// 否则就会调用代理类com.example.aidl.AidlBinderInterface.Stub.Proxy中对应的方法进行跨进程通信</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> descriptor <span class="token operator">=</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">INTERFACE_TRANSACTION</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token class-name">TRANSACTION_getAvailablePointTags</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllStringTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    reply<span class="token punctuation">.</span><span class="token function">writeTypedList</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

         <span class="token doc-comment comment">/**
         * 代理类
         * 通过Binder对象mRemote执行AidlBinderInterface接口的具体方法
         * 具体则在mRemote.transact()实现了跨进程
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span>AidlBinderInterface</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> mRemote<span class="token punctuation">;</span>

            <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//系统对我们在AIDL中定义的方法的具体实现</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringTag</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllStringTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _data <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _reply <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringTags</span><span class="token punctuation">&gt;</span></span> _result<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token comment">// mRemote.transact()方法会：1.给服务端发消息 2.挂起当前线程 3.收到服务端返回后唤醒当前线程</span>
                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_getAllStringTags</span><span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">createTypedArrayList</span><span class="token punctuation">(</span><span class="token class-name">StringTag</span><span class="token punctuation">.</span><span class="token constant">CREATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> _result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token comment">//系统对每个接口方法的编号</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">TRANSACTION_getAllStringTags</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FIRST_CALL_TRANSACTION</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        
        <span class="token comment">//下面这些是系统根据我们在aidl中定义的方法写的接口</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringTag</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllStringTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),bn=n("code",null,"mRemote",-1),gn=n("code",null,"BinderProxy",-1),hn={href:"https://www.diycode.cc/topics/384",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://www.cnblogs.com/a284628487/p/3187320.html",target:"_blank",rel:"noopener noreferrer"},fn=n("img",{src:"https://jixiaoyong.github.io/images/20200422114923.jpg",alt:"图片来自https://images0.cnblogs.com/blog/391137/201307/12211553-49c477a875e84b2aae764c67f38f26b2.jpg",tabindex:"0",loading:"lazy"},null,-1),yn={href:"https://images0.cnblogs.com/blog/391137/201307/12211553-49c477a875e84b2aae764c67f38f26b2.jpg",target:"_blank",rel:"noopener noreferrer"},wn=n("h2",{id:"others",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#others","aria-hidden":"true"},"#"),s(" others")],-1),Sn={href:"https://developer.android.google.cn/reference/android/app/job/JobService.html?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},In=n("p",null,"So, the system may kill the process at any time to reclaim memory, and in doing so, it terminates the spawned thread running in the process.",-1),Bn={href:"https://developer.android.google.cn/guide/components/activities/process-lifecycle?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},An={href:"https://blog.csdn.net/universus/article/details/6211589",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://www.jianshu.com/p/429a1ff3560c",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://www.cnblogs.com/a284628487/p/3187320.html",target:"_blank",rel:"noopener noreferrer"},jn={href:"http://hoyouly.fun/2019/07/17/Android-AIDL/",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://juejin.im/entry/59c9cd59f265da065754e6f1",target:"_blank",rel:"noopener noreferrer"};function Rn(Mn,Ln){const e=p("ExternalLinkIcon"),o=p("Mermaid");return l(),i("div",null,[r,n("p",null,[s("作者：SylvanasSun"),d,s(" 链接："),n("a",k,[s("https://juejin.im/post/59f8691b51882534af254317"),a(e)]),v,s(" 来源：掘金"),m,s(" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),b,n("figure",null,[g,n("figcaption",null,[s("示意图来自"),n("a",h,[s("https://juejin.im/post/59f8691b51882534af254317"),a(e)])])]),_,n("blockquote",null,[f,n("p",null,[s("作者：Gityuan"),y,s(" 链接："),n("a",w,[s("https://www.zhihu.com/question/39440766/answer/89210950"),a(e)])])]),S,n("p",null,[n("a",I,[s("管道"),a(e)]),s(" 是将标准输入输出连接起来的进程。 "),B]),n("figure",null,[A,n("figcaption",null,[s("示意图来自"),n("a",x,[s("https://pic002.cnblogs.com/images/2012/426620/2012110216160766.jpg"),a(e)])])]),C,j,T,n("p",null,[n("a",R,[s("Linux进程间通信之管道(pipe)、命名管道(FIFO)与信号(Signal)"),a(e)]),M,n("a",L,[s("https://blog.csdn.net/skyroben/article/details/71513385"),a(e)])]),P,E,n("p",null,[n("a",O,[s("https://www.ibm.com/developerworks/cn/linux/l-ipc/part3/index.html"),a(e)])]),D,n("p",null,[n("a",N,[s("https://blog.csdn.net/skyroben/article/details/72513985"),a(e)])]),z,J,n("p",null,[n("a",X,[s("https://www.ibm.com/developerworks/cn/linux/l-ipc/part2/index1.html"),a(e)])]),q,F,Q,n("figure",null,[V,n("figcaption",null,[s("参与Binder通信的所有角色 图片来自"),n("a",Y,[s("https://blog.csdn.net/universus/article/details/6211589"),a(e)])])]),W,a(o,{id:"mermaid-226",code:"eJyFkk9OwkAUh/ecYi7ABbpgoW5deYIGJ6QJFqzVtRIh0IAYwGCk/qkRgyGAxEShtniZedOy4gpOO622TROWb+b9vve9Tk/w8SmW83hPEguKeJRBSJXUIhYQ2pHkQ6wQ84WYHdr/BLMNgxXKsI6yqKhSXiqLsop2ixKW1cThAVbOsLIvymIBK4k7jl2/zUEbpca8CXJJxajEiuBMQFRvgWZAfQDfJkewNn6ZzcWgQlDBbOnODWhrcN2CST9GTevnFegjqFXp0yI6iqHA7MH0gdhdV6s4laWHtW6cnrdCNM5cYssLiNPIYuLcXcbE/Hi6XgJBP5hTk4c3Vh3eazwDnSbT8ijGGKpD+jikjZVrjDZWg+H4y6AUo+kzrX8549laP3dfL5Je23X8OeTnHia3LMwXjCF8qb/3CYKeCXfaqhB+2X+FMEi7LWLr0ZGRTbO5cFfBGSzA7hLzigeCP+sXLd1zpA=="}),H,G,n("blockquote",null,[U,Z,K,$,n("p",null,[s("版权协议，转载请附上原文出处链接及本声明。"),nn,s(" 原文链接："),n("a",sn,[s("https://blog.csdn.net/universus/article/details/6211589"),a(e)])])]),n("p",null,[s("主要参考文章："),n("a",an,[s("https://blog.csdn.net/universus/article/details/6211589"),a(e)])]),n("p",null,[n("a",en,[s("https://blog.csdn.net/freekiteyu/article/details/70082302"),a(e)])]),tn,n("p",null,[s("而根据"),n("a",pn,[s("这篇文章"),a(e)]),s("，这个binder最终会被传输到绑定这个服务时所用的ServiceConnection对象的"),on,s("方法中（"),cn,s("）：")]),ln,n("p",null,[s("根据"),n("a",un,[s("Android服务之bindService源码分析"),a(e)]),s("mConnection会通过"),rn,s("最终在ActivityManagerService通过Binder驱动程序调用ActivityThread类中的scheduleBindService方法传递到Service所在进程中，并根据Service的状态不同而被调用对应方法（"),dn,s("）。")]),n("figure",null,[kn,n("figcaption",null,[s("图片来自"),n("a",vn,[s("https://img-blog.csdn.net/20160719100800917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"),a(e)])])]),mn,n("p",null,[s("可知"),bn,s("便是指向AMS服务的"),gn,s("对象 "),n("a",hn,[s("https://www.diycode.cc/topics/384"),a(e)])]),n("p",null,[n("a",_n,[s("https://www.cnblogs.com/a284628487/p/3187320.html"),a(e)])]),n("figure",null,[fn,n("figcaption",null,[s("图片来自"),n("a",yn,[s("https://images0.cnblogs.com/blog/391137/201307/12211553-49c477a875e84b2aae764c67f38f26b2.jpg"),a(e)])])]),wn,n("p",null,[s("如果在BroadcastReceiver 的onReceive方法中创建一个线程，那么当该方法返回时，Android系统就会认为该BroadcastReceiver已经完成任务了，从而会在需要回收内存时杀死进程以及其中的Thread。创建一个"),n("a",Sn,[s("JobService"),a(e)]),s("可以避免这个情况。")]),n("blockquote",null,[In,n("p",null,[n("a",Bn,[s("https://developer.android.google.cn/guide/components/activities/process-lifecycle?hl=zh-cn"),a(e)])])]),n("p",null,[n("a",An,[s("https://blog.csdn.net/universus/article/details/6211589"),a(e)])]),n("p",null,[n("a",xn,[s("https://www.jianshu.com/p/429a1ff3560c"),a(e)])]),n("p",null,[n("a",Cn,[s("https://www.cnblogs.com/a284628487/p/3187320.html"),a(e)])]),n("p",null,[n("a",jn,[s("http://hoyouly.fun/2019/07/17/Android-AIDL/"),a(e)])]),n("p",null,[n("a",Tn,[s("https://juejin.im/entry/59c9cd59f265da065754e6f1"),a(e)])])])}const On=c(u,[["render",Rn],["__file","7e97a976.html.vue"]]);export{On as default};
