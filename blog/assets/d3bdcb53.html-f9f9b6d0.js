import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,a as n,b as i,d as o,e as c}from"./app-b04f94c7.js";const l={},u=c(`<p>Flutter中的scrollable widget根据实现方式的不同，可以分为两大类：</p><ul><li>基于RenderBox的box protocol实现的，主要基于Size实现布局。常见的有SingleChildScrollView。</li><li>基于RenderSliver的sliver protocol实现的，主要基于SliverGeometry实现布局。比如CustomScrollView及其子类ListView、GridView等继承自ScrollView的Widget，以及基于CustomScrollView的NestedScrollView、基于Viewport等的PageView、TabBarView等直接对SliverFillViewport等进行封装的Widget。</li></ul><p>上述所有的scrollable widget其底层逻辑依然是对Scrollable的封装，其内部处理了ScrollController、ScrollPosition（viewport的offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理scrollable view的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出ScrollNotification）、RawGestureDetector（手势识别）等等一系列与scroll有关的逻辑，从而使得其他scrollable view能够比较方便的实现scroll效果。</p><p>本文只对SingleChildScrollView的源码实现做一简单分析：它是如何实现滚动效果，有什么优势和限制。</p><p>官方对其定义是：“A box in which a single widget can be scrolled”。明确表明，SingleChildScrollView是遵守box protocol的widget，在其内部也只能有一个<strong>box widget</strong>。</p><h1 id="用例" tabindex="-1"><a class="header-anchor" href="#用例" aria-hidden="true">#</a> 用例</h1><p>下面是一个SingleChildScrollView的简单使用：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
            children<span class="token punctuation">:</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>
                <span class="token number">20</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
                      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
                      child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;item </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，SingleChildScrollView中容纳了一个叫Column的child，如果Column的高度无法在屏幕中完全展示，就SingleChildScrollView就会保证用户可以上下滑动，从而展示对应的内容；否则如果能够完全显示，则内容无法滑动。</p><h1 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h1><h2 id="singlechildscrollview" tabindex="-1"><a class="header-anchor" href="#singlechildscrollview" aria-hidden="true">#</a> SingleChildScrollView</h2><p><code>class SingleChildScrollView extends StatelessWidget {}</code></p><p>作为一个StatelessWidget，SingleChildScrollView的主要逻辑在他的<code>build()</code>方法中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AxisDirection</span> axisDirection <span class="token operator">=</span> <span class="token function">_getDirection</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Widget</span><span class="token operator">?</span> contents <span class="token operator">=</span> child<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>padding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      contents <span class="token operator">=</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> padding<span class="token operator">!</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里scrollController如果没有指定或者primary为true的话会使用上级最近的</span>
    <span class="token comment">// PrimaryScrollController</span>
    <span class="token keyword">final</span> <span class="token class-name">ScrollController</span><span class="token operator">?</span> scrollController <span class="token operator">=</span> primary
        <span class="token operator">?</span> <span class="token class-name">PrimaryScrollController</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> controller<span class="token punctuation">;</span>
    <span class="token comment">// 正如我们之前所说，SingleChildScrollView实现其实也就是对Scrollable的</span>
    <span class="token comment">// 进一步封装，提供一些自己特有的内容，比如_SingleChildViewport</span>
    <span class="token class-name">Widget</span> scrollable <span class="token operator">=</span> <span class="token class-name">Scrollable</span><span class="token punctuation">(</span>
      dragStartBehavior<span class="token punctuation">:</span> dragStartBehavior<span class="token punctuation">,</span>
      axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
      controller<span class="token punctuation">:</span> scrollController<span class="token punctuation">,</span>
      physics<span class="token punctuation">:</span> physics<span class="token punctuation">,</span>
      restorationId<span class="token punctuation">:</span> restorationId<span class="token punctuation">,</span>
      viewportBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ViewportOffset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里使用了自定义的Viewport来实现布局逻辑</span>
        <span class="token keyword">return</span> <span class="token function">_SingleChildViewport</span><span class="token punctuation">(</span>
          axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
          offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span><span class="token comment">// offset就是Scrollable处理的ScrollPosition</span>
          clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> contents<span class="token punctuation">,</span><span class="token comment">// 就是我们传入的child</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这里处理了滑动时键盘隐藏的问题</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyboardDismissBehavior <span class="token operator">==</span> <span class="token class-name">ScrollViewKeyboardDismissBehavior</span><span class="token punctuation">.</span>onDrag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scrollable <span class="token operator">=</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollUpdateNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        child<span class="token punctuation">:</span> scrollable<span class="token punctuation">,</span>
        onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">ScrollUpdateNotification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">final</span> <span class="token class-name">FocusScopeNode</span> focusNode <span class="token operator">=</span> <span class="token class-name">FocusScope</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>notification<span class="token punctuation">.</span>dragDetails <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> focusNode<span class="token punctuation">.</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            focusNode<span class="token punctuation">.</span><span class="token function">unfocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> primary <span class="token operator">&amp;&amp;</span> scrollController <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> <span class="token class-name">PrimaryScrollController</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> scrollable<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> scrollable<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，正如之前所言，SingleChildScrollView是依赖于封装Scrollable实现滑动效果。我们注意到在Scrollable.viewportBuilder中传入的是_SingleChildViewport，这个类处理了Scrollable传入的ScrollPosition也即这里的ViewportOffset：</p><h2 id="singlechildviewport" tabindex="-1"><a class="header-anchor" href="#singlechildviewport" aria-hidden="true">#</a> _SingleChildViewport</h2><p>_SingleChildViewport继承自SingleChildRenderObjectWidget，主要逻辑是创建和更新RenderObject——_RenderSingleChildViewport。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _SingleChildViewport <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  _RenderSingleChildViewport <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_RenderSingleChildViewport</span><span class="token punctuation">(</span>
      axisDirection<span class="token punctuation">:</span> axisDirection<span class="token punctuation">,</span>
      offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span><span class="token comment">// 此处的offset是来自于Scrollable的ScrollPosition</span>
      clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> _RenderSingleChildViewport renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Order dependency: The offset setter reads the axis direction.</span>
    renderObject
      <span class="token punctuation">.</span><span class="token punctuation">.</span>axisDirection <span class="token operator">=</span> axisDirection
      <span class="token punctuation">.</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token comment">// 此处的offset是来自于Scrollable的ScrollPosition</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span>clipBehavior <span class="token operator">=</span> clipBehavior<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见处理offset以便更新content实现滑动效果的主要逻辑在_RenderSingleChildViewport这个RenderObject中。</p><h2 id="rendersinglechildviewport" tabindex="-1"><a class="header-anchor" href="#rendersinglechildviewport" aria-hidden="true">#</a> _RenderSingleChildViewport</h2><p>先看一下_RenderSingleChildViewport的继承关系：<br><code>class _RenderSingleChildViewport extends RenderBox with RenderObjectWithChildMixin&lt;RenderBox&gt; implements RenderAbstractViewport{}</code></p><p>由上述代码可知，_RenderSingleChildViewport：</p><ul><li>是RenderBox，也就是说其内部lay out遵守box protocol</li><li>RenderObjectWithChildMixin&lt;RenderBox&gt;，RenderObjectWithChildMixin为RenderObject提供一套管理单个child的模式，它的<strong>泛型指定了child的类型只能是RenderBox</strong>，这也就是为什么我们之前说SingleChildScrollView的child只能是box widget。</li><li>实现了RenderAbstractViewport接口，这个接口表示render object是内部比实际要大，提供了一些方法供ScrollPosition和其他viewport调用，来获取一些使此viewport在屏幕上可见的信息。</li></ul><p>在修改axisDirection、offset、cacheExtent等三个属性的时候会触发markNeedsLayout()方法重新进行lay out；<br> 在修改clipBehavior属性的时候只会触发markNeedsPaint()和markNeedsSemanticsUpdate()方法。</p><p>此外，在每次设置offset的时候，都会对齐添加监听，这样当Scrollable中由于用户手势或者通过ScrollController调用jumpTo/animateTo等方法修改了ScrollPosition的时候，都会使得Scrollab的viewport也就是我们这里的_RenderSingleChildViewport收到通知、从而进行对应处理：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">set</span> <span class="token function">offset</span><span class="token punctuation">(</span><span class="token class-name">ViewportOffset</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> _offset<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span>
    <span class="token comment">// 先移除已有的监听</span>
      _offset<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _offset <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attached<span class="token punctuation">)</span>
    <span class="token comment">// 再为新的offset添加监听</span>
      _offset<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">markNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_hasScrolled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">markNeedsSemanticsUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述在修改offset的时候添加/移除监听，在attach/detach方法中也有对应操作：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">PipelineOwner</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _offset<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _offset<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>_hasScrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的分析我们也可以看出，除了设置修改axisDirection、offset、cacheExtent等属性的时候会触发layout外，其余时候只会触发重新paint。</p><h3 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> layout</h3><p>一般来说Flutter Widget要展示在屏幕上需要经历build、layout、paint三步，在分析SingleChildScrollView如何根据offset的变化实现scroll效果之前，我们先看一下他是如何实现layout的。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">BoxConstraints</span> constraints <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraints<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      size <span class="token operator">=</span> constraints<span class="token punctuation">.</span>smallest<span class="token punctuation">;</span><span class="token comment">// 如果child为空，则按照父级的最小尺寸来</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有child，就不限制主轴方向的尺寸，让child进行layout（会得到最大的主轴尺寸）</span>
      child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">_getInnerConstraints</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">,</span> parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 在父级约束范围内尽可能满足child的尺寸</span>
      size <span class="token operator">=</span> constraints<span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用_viewportExtent作为offset的viewport范围</span>
    offset<span class="token punctuation">.</span><span class="token function">applyViewportDimension</span><span class="token punctuation">(</span>_viewportExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新viewport的内容content的大小范围</span>
    offset<span class="token punctuation">.</span><span class="token function">applyContentDimensions</span><span class="token punctuation">(</span>_minScrollExtent<span class="token punctuation">,</span> _maxScrollExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token comment">// 只有横轴方向的约束，没有主轴方向的约束</span>
<span class="token class-name">BoxConstraints</span> <span class="token function">_getInnerConstraints</span><span class="token punctuation">(</span><span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token comment">// 如果是水平布局，就只限制高度，不限制宽度</span>
        <span class="token keyword">return</span> constraints<span class="token punctuation">.</span><span class="token function">heightConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token comment">// 如果是垂直布局，就只限制宽度，不限制高度</span>
        <span class="token keyword">return</span> constraints<span class="token punctuation">.</span><span class="token function">widthConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在SingleChildScrollView先让child在主轴方向尽可能自由布局，取得其最大值，然后自身在满足父级约束的情况下应用child的size：如果child.size在父级约束内就直接应用，负责采用父级的约束。</p><p>这样最终的效果就是我们的SingleChildScrollView在child不超过父级约束的时候只占据child的内容，当child的内容大于父级约束时，SingleChildScrollView自身的尺寸是父级给定的最大尺寸，而child本身在主轴方向上的尺寸是大于SingleChildScrollView的尺寸。这样也为我们后续通过监听offset修改显示部分child的内容实现滑动效果提供了可能。</p><blockquote><p>这也告诉我们SingleChildScrollView的父级需要指定指定主轴方向约束，否则会出现异常。<br> 比如在Column中直接使用SingleChildScrollView就会在内容过长的时候发生<em>overflowed</em>错误并且无法滑动SingleChildScrollView，这是因为SingleChildScrollView和child都按照最长的尺寸布局，并且这个尺寸超过了父级约束。<br> 在SingleChildScrollView外层添加Expanded作为父级，相当于给他指定了一个约束（占据剩余空间），所以可以解决这个问题。</p></blockquote><p>之后，又根据_viewportExtent以及_minScrollExtent/_maxScrollExtent分别设置了viewport和content的范围，让我们看一下这三个值的来历：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token keyword">get</span> _viewportExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token keyword">return</span> size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token keyword">return</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，_viewportExtent是取值主轴方向的size大小，也就是SingleChildScrollView的尺寸。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  double <span class="token keyword">get</span> _minScrollExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  double <span class="token keyword">get</span> _maxScrollExtent <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> size<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">-</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_minScrollExtent默认返回0.0；<br> _maxScrollExtent返回的是主轴方向上child减去SingleChildScrollView之后的尺寸和0.0之间的最大值，换言之，如果child比SingleChildScrollView尺寸大，_maxScrollExtent就是多出来的那一部分，也就是我们可以滑动的范围，否则为0.0，也就是SingleChildScrollView不可滑动。</p><h3 id="paint" tabindex="-1"><a class="header-anchor" href="#paint" aria-hidden="true">#</a> paint</h3><p>到目前为止，我们的SingleChildScrollView顺利得到了尺寸，假设child尺寸大于SingleChildScrollView的最大尺寸，那么当用户滑动屏幕导致offset改变的时候，又是如何实现滑动效果的呢？</p><p>先看一个属性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// offset.pixels表示child沿着与轴方向axis direction相反的方法offset的pixels</span>
  <span class="token comment">// 比如axis direction是down的话，手指向上滑动屏幕此值增大，否则减小</span>
  <span class="token class-name">Offset</span> <span class="token keyword">get</span> _paintOffset <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_paintOffsetForPosition</span><span class="token punctuation">(</span>offset<span class="token punctuation">.</span>pixels<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据position计算出child实际在SingleChildScrollView中的offset</span>
  <span class="token comment">// 以child的左上角在SingleChildScrollView左上角为0.0，向上为负，向下为正</span>
  <span class="token class-name">Offset</span> <span class="token function">_paintOffsetForPosition</span><span class="token punctuation">(</span>double position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>axisDirection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>axisDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>up<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> position <span class="token operator">-</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">+</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>position <span class="token operator">-</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">+</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span>position<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，_paintOffset是根据ScrollPosition计算出来的真正的child和SingleChildScrollView的偏移offset。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Offset</span> paintOffset <span class="token operator">=</span> _paintOffset<span class="token punctuation">;</span>

      <span class="token keyword">void</span> <span class="token function">paintContents</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可以看到这里，除了父级传入的offset外，还应用了ScrollPosition改变而变化的</span>
        <span class="token comment">// paintOffset。这样每次Scrollable修改ScrollPosition之后都会触发paint</span>
        <span class="token comment">// 方法，使用新的paintOffset绘制child</span>
        context<span class="token punctuation">.</span><span class="token function">paintChild</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> paintOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_shouldClipAtPaintOffset</span><span class="token punctuation">(</span>paintOffset<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> clipBehavior <span class="token operator">!=</span> <span class="token class-name">Clip</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _clipRectLayer<span class="token punctuation">.</span>layer <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">pushClipRect</span><span class="token punctuation">(</span>
          needsCompositing<span class="token punctuation">,</span>
          offset<span class="token punctuation">,</span>
          <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero <span class="token operator">&amp;</span> size<span class="token punctuation">,</span>
          paintContents<span class="token punctuation">,</span>
          clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span>
          oldLayer<span class="token punctuation">:</span> _clipRectLayer<span class="token punctuation">.</span>layer<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _clipRectLayer<span class="token punctuation">.</span>layer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">paintContents</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，我们可以得出以下结论：</p><p>_RenderSingleChildViewport接收传入的child，并监听传入的Offset，当其变化时执行markNeedPaint()；<br> 其先让child在主轴方向尽可能大的进行layout，然后自身在父级约束条件下尽可能满足child size，这样当child比父级给的约束大时，child保持自身大小，而viewport的size则在父级给的最大尺寸内展示一部分child内容；<br> 当Offset变化时，按照Offset.pixels计算出对应的paintOffset，重新绘制child，展示另外一部分child的内容，从而实现滑动效果。</p><h3 id="hittest" tabindex="-1"><a class="header-anchor" href="#hittest" aria-hidden="true">#</a> hitTest</h3><p>_RenderSingleChildViewport将hitTest直接转发给了child：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>
  bool <span class="token function">hitTestChildren</span><span class="token punctuation">(</span><span class="token class-name">BoxHitTestResult</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span> required <span class="token class-name">Offset</span> position <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">addWithPaintOffset</span><span class="token punctuation">(</span>
        offset<span class="token punctuation">:</span> _paintOffset<span class="token punctuation">,</span>
        position<span class="token punctuation">:</span> position<span class="token punctuation">,</span>
        hitTest<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BoxHitTestResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Offset</span> transformed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">assert</span><span class="token punctuation">(</span>transformed <span class="token operator">==</span> position <span class="token operator">+</span> <span class="token operator">-</span>_paintOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> position<span class="token punctuation">:</span> transformed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>至此，SingleChildScrollView基于Scrollable、ScrollPosition和_RenderSingleChildView完成了支持内部单个box widget的滑动效果。</p><h1 id="优劣对比" tabindex="-1"><a class="header-anchor" href="#优劣对比" aria-hidden="true">#</a> 优劣对比</h1><p>相对于使用Sliver实现滑动效果的Widget来说，SingleChildScrollView使用简单，使用的是box protocol，适用于child通常是完全可见的，但是在某些特殊场景（比如竖屏变为横屏等）下可能显示不全的情况，SingleChildScrollView可以保证在父级无法完整显示child的时候使其支持滑动。<br> SingleChildScrollView使用起来也比较方便。</p><p>但是，正如上面分析的，无论content是否可见，SingleChildScrollView都会将其layout/paint（也就是说<strong>会将所有内容全部加载</strong>），这样如果content超出viewport的部分比较多就会非常<strong>耗费性能</strong>。</p><p>对于这种情况，就应该考虑使用ListView/GridView/CustomScrollView等基于sliver protocol的scrollable widget。在shrinkWrap属性为false的情况下，viewport会只创建<strong>屏幕可见部分 + viewport前后缓存区域</strong>的内容，在content滑出这部分区域时dispose，当其再次滑入时再recreate，从而保证性能。</p><h1 id="进阶使用" tabindex="-1"><a class="header-anchor" href="#进阶使用" aria-hidden="true">#</a> 进阶使用</h1><h2 id="为column的children安全应用spacedaround-center等效果" tabindex="-1"><a class="header-anchor" href="#为column的children安全应用spacedaround-center等效果" aria-hidden="true">#</a> 为Column的children安全应用spacedAround，center等效果</h2><p>想要给Column的children设置spacedAround效果，又需要保证在父级空间不足时能够完整显示所有children的内容的话，就需要结合SingleChildScrollView（空间不足时可滑动）、LayoutBuilder（获取父级约束信息）、ConstrainedBox（设置Column约束）来实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span><span class="token comment">// 获取父级约束信息</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> viewportConstraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span><span class="token comment">// 父级空间不足时可以滚动</span>
            child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
              constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>
        <span class="token comment">// 这里指定最小高度为父级高度，所以空间足够时Column可以按需分布children，</span>
        <span class="token comment">// 空间不足时则将children一个个依次排列（互相之间space为0）</span>
                minHeight<span class="token punctuation">:</span> viewportConstraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span><span class="token comment">// 默认主轴尺寸尽可能的小</span>
                mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>spaceAround<span class="token punctuation">,</span>
                children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
                  <span class="token class-name">Container</span><span class="token punctuation">(</span>
                    <span class="token comment">// A fixed-height child.</span>
                    color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffeeee00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Yellow</span>
                    height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token class-name">Container</span><span class="token punctuation">(</span>
                    <span class="token comment">// Another fixed-height child.</span>
                    color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xff008000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Green</span>
                    height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用ConstrainedBox确保了Column主轴方向最小尺寸是父级大小：</p><ul><li>当父级尺寸大于Column的children尺寸时，多出的空隙由Column按照MainAxisAlignment.spaceAround原则分配，由于SingleChildScrollView的child尺寸和父级一致，所需不会滑动；</li><li>当父级尺寸小于Column的children尺寸时，Column的尺寸为children的尺寸之和（相互之间没有间隙），此时SingleChildScrollView的child尺寸大于父级尺寸，所以可以上下滑动，保证了Column的children可以完全显示。</li></ul><h2 id="为column的children安全应用expanded、space等效果" tabindex="-1"><a class="header-anchor" href="#为column的children安全应用expanded、space等效果" aria-hidden="true">#</a> 为Column的children安全应用Expanded、Space等效果</h2><p>在一些场景下，需要用到Expanded、Space等填充Column剩余的空间以展示某些内容，比如一直位于屏幕下方的版权信息，但是当Column的children尺寸大于父级尺寸时，又会导致children内容无法完整显示，如果直接在Column上加一个SingleChildScrollView作为父级，又会因为SingleChildScrollView给child在主轴方向的尺寸无限制，而Expanded又要求占据所有剩余空间从而导致出错。</p><p>此时可以在上面例子的基础上增加IntrinsicHeight/InstrinsicWidth来解决此问题：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span><span class="token comment">// 获取父级约束信息</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> viewportConstraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span><span class="token comment">// 保证child超出父级限制时可以滑动</span>
            child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>
              constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>
        <span class="token comment">// 这里指定最小高度为父级高度，所以空间足够时Column可以按需分布children，</span>
        <span class="token comment">// 空间不足时则将children一个个依次排列（互相之间space为0）</span>
                minHeight<span class="token punctuation">:</span> viewportConstraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              child<span class="token punctuation">:</span> <span class="token class-name">IntrinsicHeight</span><span class="token punctuation">(</span>
        <span class="token comment">// 当minHeight:viewportConstraints.maxHeight比Column想要的大时，</span>
        <span class="token comment">// 那么Column采用viewportConstraints.maxHeight的值</span>
        <span class="token comment">// 否则Column按照自己的内容大小来</span>
                child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>
                    <span class="token class-name">Container</span><span class="token punctuation">(</span>
                      <span class="token comment">// A fixed-height child.</span>
                      color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffeeee00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Yellow</span>
                      height<span class="token punctuation">:</span> <span class="token number">320.0</span><span class="token punctuation">,</span>
                      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Fixed Height Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Expanded</span><span class="token punctuation">(</span>
                      <span class="token comment">// A flexible child that will grow to fit the viewport but</span>
                      <span class="token comment">// still be at least as big as necessary to fit its contents.</span>
                      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
                        color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xffee0000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Red</span>
                        height<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>
                        alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                        child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Flexible Content&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                      <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面例子中，作为SingleChildScrollView子级的Column内部能够使用Expanded的关键在于InstrinsicHeight：它的定义是“一个将child调整为child固有高度的widget”，也就是说，当<strong>child可能有无限的高度时，与其无限拓展，它更希望将自己size定位一个更加合理的固有高度</strong>（Expanded、Spacer等非RenderObjectWidget本身没有高度，所以在这里不会被计算）。</p><p>那么，当父级指定的最小约束minHeight大于InstrinsicHeight.child的最大固有高度时，child将按照父级的最小高度设置；<br> 当父级指定的最大约束是double.infinity无限大时，InstrinsicHeight会强制其child的大小为固有高度。</p><p>但是需要注意的是，IntrinsicHeight/InstrinsicWidth因为至少需要对child进行两次layout（一次获取intrinsic dimensions，一次真正的执行layout），所以会<strong>比较耗费性能</strong>。因此应当保证Column子级数量尽可能少，并且可以使用SizeBox给child指定大小以减轻计算intrinsic dimensions的压力。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>SingleChildScrollView作为遵守box protocol的scrollable widget，使用简单，适用于页面内容通常为全部可见，但特殊情况下可能无法完整显示因而需要支持滚动的情况。</p><p>其child只支持可以生成RenderBox的Widget，会一次性创建所有child内容，在其内部使用ListView等时需要开启shrinkWrap从而导致其懒创建item失效，比较耗费性能。</p><p>因此，如果是大量item、child内容超出viewport部分时，应当考虑使用基于Sliver的ListView/GridView/CustomScrollView等。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,75),r={href:"https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[i("SingleChildScrollView_api.flutter.dev"),o(s)])])])}const h=a(l,[["render",d],["__file","d3bdcb53.html.vue"]]);export{h as default};
