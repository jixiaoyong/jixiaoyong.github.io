import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-b410525b.js";const l={},u=n("p",null,"Flutter 中的 Hero 动画是指可以在切换页面时自动跨页面实现 Widget 放大缩小、位移的动画，在用户看起来好像是当前页面的 Widget“飞”入到另外一个页面，底层基于 Overlay 实现。",-1),r={href:"https://flutter.cn/docs/development/ui/animations/hero-animations",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用","aria-hidden":"true"},"#"),s(" 使用")],-1),k=n("h3",{id:"简单使用-standard-hero-animations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简单使用-standard-hero-animations","aria-hidden":"true"},"#"),s(" 简单使用 Standard hero animations")],-1),v={href:"https://gist.github.com/jixiaoyong/8b6584e73abe430d3c1ae926b80a86bd#file-simple_hero_animation-dart",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>Hero 动画的使用比较简单：</p><ul><li>分别在两个 Flutter 页面将需要实现 Hero 动画的 Widget（一般是图片）作为 Hero 控件的 child</li><li>为这两个 Hero 指定同一个 tag</li><li>Hero 底层基于 Overlay 实现，所有 Hero.child 可以使用 Position 等适用于 Stack.child 的属性</li></ul><p>这里要注意：</p><ul><li>这两个 Page 要是<strong>相邻</strong>的页面，否则 Hero 动画不会生效</li><li>同一个页面，<strong>不能有多个</strong> Hero.tag 相同的 Hero 控件</li><li>Hero 动画<strong>默认只支持大小（size）和位置（location）变化</strong>，所以 Hero.child 不建议有其他变化（Don&#39;t rotate your heroes）</li></ul><p>按照上述的要求，我们再 FirstHeroPage 中添加第一个 Hero Widget：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Align</span><span class="token punctuation">(</span>
            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomLeft<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>
                <span class="token comment">// 注意这里的 tag 要和下一个页面的 Hero.tag 一致</span>
                tag<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;HeroTag&quot;</span></span><span class="token punctuation">,</span>
                <span class="token comment">// child 是 Hero 动画会作用的地方</span>
                child<span class="token punctuation">:</span> <span class="token class-name">HeroChildWidget</span><span class="token punctuation">(</span>
                  size<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;First&quot;</span></span><span class="token punctuation">,</span>
                  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>
                        <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token keyword">return</span> <span class="token keyword">const</span> <span class="token class-name">SecondHeroPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在要跳转到的第二个页面 SecondHeroPage 添加目标 Hero：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>          <span class="token class-name">Align</span><span class="token punctuation">(</span>
            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>
                <span class="token comment">// 这里的 tag 与上一个页面的 Hero.tag 一致</span>
                tag<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;HeroTag&quot;</span></span><span class="token punctuation">,</span>
                child<span class="token punctuation">:</span> <span class="token class-name">HeroChildWidget</span><span class="token punctuation">(</span>
                  size<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Second&quot;</span></span><span class="token punctuation">,</span>
                  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当从 FirstHeroPage 跳转到 SecondHeroPage 的时候，Hero 动画作用于 Hero.child，看起来好像是前一个页面的 HeroChildWidget 逐渐从 Alignment.bottomLeft 移动到 Alignment.topCenter，并且大小也从 100 逐渐变为 200。</p><figure><img src="https://jixiaoyong.github.io/images/flutter/hero/simple_hero.gif" alt="Simple Hero Animation" tabindex="0" loading="lazy"><figcaption>Simple Hero Animation</figcaption></figure><h4 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h4><p>那么 Hero 动画是如何实现这个效果的呢？</p><p>Flutter 中 Page 之间的跳转由 Navigator 管理，在 Navigator 管理的所有 Flutter Page 的上层有一个叠加层 Overlay，在 Z 轴方向上处于所有 Page 上层，其内部的 widget 可以被独立管理。</p><p>以当前 Page 为 A，要跳转的 Page 为 B：</p>`,14),b=n("li",null,[n("p",null,"那么当从 A 跳转到 B 时，Hero 动画框架会先隐藏 A 中的 Hero.child 并用相同大小的（不可见）组件占位；")],-1),h=n("p",null,"与此同时，Hero 动画框架读取要跳转去的 B 中的 Hero.child 并据此创建 Widget，将其大小和位置与为 A 中 Hero.child 对齐，放入到 Overlay 中。同时计算器过渡到 B 中的 Hero.child 位置和大小的路径动画，并执行；",-1),g=n("em",null,"Second",-1),f={href:"https://api.flutter-io.cn/flutter/widgets/Overlay-class.html",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),w=n("code",null,"Material",-1),H=n("li",null,[n("p",null,"当 B 创建好之后，Hero 动画正在运行中，所以 B 中的 Hero.child 也会被相同大小的（不可见）组件占位；")],-1),_=n("li",null,[n("p",null,"当 Hero 动画播放完毕之后，位于 Overlay 中的 Widget 被移除，A 和 B 中的 Hero.child 也正常显示。")],-1),C=n("li",null,[n("p",null,"如果又从 B 返回 A 则上述步骤又会反向（A、B 中 Hero.child 换位）执行一次。")],-1),x=n("p",null,"下图是 Flutter 官方对 Hero 动画执行的解释，刚好处于由 A 到 B 过渡的过程，可以看到 A、B 页面中的 Widget 都被移除，只有根据目标 Page——B 中的 Hero.child 创建的位于 Overlay 的 Destination hero 控件在从 A 中对应的位置和大小过渡到 B 中对应的位置和大小：",-1),S=n("figure",null,[n("img",{src:"https://jixiaoyong.github.io/images/flutter/hero/hero-transition-2.webp",alt:"Hero 动画进行中的图解",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Hero 动画进行中的图解")],-1),R=n("h3",{id:"进阶使用-radial-hero-animations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#进阶使用-radial-hero-animations","aria-hidden":"true"},"#"),s(" 进阶使用 Radial hero animations")],-1),F=n("p",null,"默认实现的 Hero 动画只支持大小和位移变化，通过使用 Radial Transformation（径向转化）可以实现由圆变为正方形的过渡动画。",-1),B=n("br",null,null,-1),O={href:"https://flutter.cn/docs/development/ui/animations/hero-animations#:~:text=%E5%BE%84%E5%90%91%E8%BF%87%E6%B8%A1%20%E6%98%AF%E7%94%B1%E5%9C%86%E5%BD%A2%E5%8F%98%E6%88%90%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%9A%84%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%E3%80%82",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,[s("径向动画的"),n("em",null,"本质还是 Hero 动画"),s("，只不过在 Hero 动画之上做了一层由 ClipOval 和 ClipRect 组成的裁剪遮罩，通过二者的配合，导致其重叠部分的内容看起来好像在 Hero 动画播放的时候在"),n("em",null,"圆"),s("和"),n("em",null,"正方形"),s("之间切换。")],-1),A={href:"https://github.com/cfug/flutter.cn/blob/master/examples/_animation/radial_hero_animation_animate_rectclip/main.dart",target:"_blank",rel:"noopener noreferrer"},W={href:"https://gist.github.com/jixiaoyong/8b6584e73abe430d3c1ae926b80a86bd",target:"_blank",rel:"noopener noreferrer"},z={href:"https://gist.github.com/jixiaoyong/8b6584e73abe430d3c1ae926b80a86bd#file-advanced_hero_animation-dart",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>相对于之前的，我们主要将 HeroChildWidget 类修改为 HeroClippedChildWidget 类：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">Size</span> maxClipOvalDiameter <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name">Size</span> minClipOvalDiameter <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">HeroClippedChildWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">HeroClippedChildWidget</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>onTap<span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">Size</span> size<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">VoidCallback</span> onTap<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 与圆内切的正方形边长 s = 圆半径 * 根号 2 = 直径 * 根号 2 / 2</span>
    <span class="token keyword">var</span> clipRectSize <span class="token operator">=</span> maxClipOvalDiameter<span class="token punctuation">.</span>width <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt2 <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
      height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>
        onTap<span class="token punctuation">:</span> onTap<span class="token punctuation">,</span>
        <span class="token comment">// 当 Hero 动画变到最小时，ClipOval 与 ClipRect 相交部分是 ClipOval 形状</span>
        child<span class="token punctuation">:</span> <span class="token class-name">ClipOval</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
            <span class="token comment">// 当 Hero 动画变到最大时，ClipOval 与 ClipRect 相交部分是 ClipRect 形状</span>
            child<span class="token punctuation">:</span> <span class="token class-name">ClipRect</span><span class="token punctuation">(</span>
              child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
                height<span class="token punctuation">:</span> clipRectSize<span class="token punctuation">,</span>
                width<span class="token punctuation">:</span> clipRectSize<span class="token punctuation">,</span>
                child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>
                  color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>
                  child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
                    child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，FirstHeroPage 的 HeroClippedChildWidget.minClipOvalDiameter，SecondHeroPage 中则为 maxClipOvalDiameter。</p><p>其效果如图：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/hero/advanced_hero.gif" alt="advanced_hero" tabindex="0" loading="lazy"><figcaption>advanced_hero</figcaption></figure>`,5),q=n("p",null,"实际上根据此方式，我们也可以监听 Hero.child 的大小、位置变化从而推测出 Hero 动画的进度和方向（是从 from 到 to，还是相反），从而实现更丰富的动画效果。",-1),M={href:"https://github.com/jixiaoyong/flutter_custom_widget/blob/master/lib/widgets/animation_hero_child.dart",target:"_blank",rel:"noopener noreferrer"},E=e('<h4 id="原理分析-1" tabindex="-1"><a class="header-anchor" href="#原理分析-1" aria-hidden="true">#</a> 原理分析</h4><p>此类能够实现切换的同时修改 Hero.child 的样式，主要在于 ClipOval 和 ClipRect 的组合效果：</p><figure><img src="https://jixiaoyong.github.io/images/flutter/hero/radial-hero-animation.webp" alt="Radial hero animations 的示意图" tabindex="0" loading="lazy"><figcaption>Radial hero animations 的示意图</figcaption></figure><p>ClipRect 的大小固定为<code>var clipRectSize = maxClipOvalDiameter.width * math.sqrt2 / 2</code>，而 ClipOval 的大小则随着 Hero 动画的变化而变化，始终与 HeroClippedChildWidget 保持一致。</p><p>假设从页面 A 到 B 切换时 Hero.child 会从小变大，那么：</p><ul><li>刚刚从页面 A 切换时，位于 Overlay 的 HeroClippedChildWidget/ClipOval 大小为 minClipOvalDiameter（也就是 100*100），此时 ClipRect 的大小 clipRectSize（也就是 200/2*根号 2 约等于 141）大于 ClipOval 的大小，所以他们的相交处为 ClipOval，故而 HeroClippedChildWidget 显示为直径为 100 的圆。</li><li>当刚刚完整切换到页面 B，Hero 动画将要结束时，位于 Overlay 的 HeroClippedChildWidget/ClipOval 大小为 maxClipOvalDiameter（也就是 200*200），此时 ClipRect 的大小 clipRectSize（依旧是 141）小于 ClipOval 的大小，所以他们的相交处为 ClipRect，故而 HeroClippedChildWidget 显示为边长约为 141 的正方形。</li><li>在二者的过渡阶段，就是 ClipOval 注解从小于 ClipRect 变化为大于 ClipRect 的过程，他们相交的区域也从圆变为圆角，再变为正方形。</li></ul><h4 id="其他属性" tabindex="-1"><a class="header-anchor" href="#其他属性" aria-hidden="true">#</a> 其他属性</h4><p>此外，Hero 还有几个属性可以供我们自定义：</p><ul><li><code>flightShuttleBuilder</code> 替换页面切换时的默认过渡 Widget。比如从页面 A 切换到 B 时，默认是使用 B 中的 Hero.child，如果此值不为 null 则会展示 flightShuttleBuilder 返回的 Widget。</li><li><code>placeholderBuilder</code> 当 Hero 动画开始，页面 A、B 中 Hero.child 隐藏时，会展示 placeholderBuilder 返回的内容或者为空（默认）</li><li><code>createRectTween</code> 定义 Hero 动画的过渡组件动画渐变的方式，MaterialApp 默认使用 MaterialRectArcTween()，此外还有 MaterialRectCenterArcTween()（可以等比例缩放）、MaterialPointArcTween()。</li></ul><p>示意图如下：</p>',10),D=n("img",{src:"https://flutter.github.io/assets-for-api-docs/assets/interaction/heroes.png",alt:"flutter.cn 官网 Hero 示意图",tabindex:"0",loading:"lazy"},null,-1),j={href:"http://flutter.cn",target:"_blank",rel:"noopener noreferrer"},I=e(`<h2 id="底层实现" tabindex="-1"><a class="header-anchor" href="#底层实现" aria-hidden="true">#</a> 底层实现</h2><h3 id="hero" tabindex="-1"><a class="header-anchor" href="#hero" aria-hidden="true">#</a> Hero</h3><p>Hero 是一个 StatefulWidget，除了之前提到的各个属性之外，还提供了<code>_allHeroesFor()</code>方法供 HeroController 调用，用于查找指定 Context 下所有的 Hero Widget，并在检测到有重复 Hero.tag 时报错。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span><span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span><span class="token comment">// 每个页面不能有多个相同 tag 的 Hero</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>createRectTween<span class="token punctuation">,</span><span class="token comment">// 定义 Hero 过渡 Widget 切换方式</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>flightShuttleBuilder<span class="token punctuation">,</span><span class="token comment">// 替换默认的过渡 Widget</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>placeholderBuilder<span class="token punctuation">,</span><span class="token comment">// 在 Hero 动画开始时占位</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transitionOnUserGestures <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">// 是否同步手势</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span><span class="token comment">// 要实现 Hero 动画的 Widget</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回一个 Key 为 Hero.tag 的 map</span>
  <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span> <span class="token function">_allHeroesFor</span><span class="token punctuation">(</span>
    <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>
    bool isUserGestureTransition<span class="token punctuation">,</span>
    <span class="token class-name">NavigatorState</span> navigator<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="herostate" tabindex="-1"><a class="header-anchor" href="#herostate" aria-hidden="true">#</a> _HeroState</h3><p>_HeroState 主要是提供 startFlight/endFlight 供 HeroController-&gt;_HeroFlight-&gt;_HeroFlightManifest 调用；以及根据初始化以及开始/技术 Flight 动画后状态的变化而更改 Hero.child 在屏幕上面（对应页面上原先 Hero Widget 所处位置的区域）的显示效果。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">void</span> <span class="token function">startFlight</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bool shouldIncludedChildInPlaceholder <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _shouldIncludeChild <span class="token operator">=</span> shouldIncludedChildInPlaceholder<span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>mounted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">RenderBox</span> box <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">RenderBox</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>box <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">.</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _placeholderSize <span class="token operator">=</span> box<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">endFlight</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bool keepPlaceholder <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keepPlaceholder <span class="token operator">||</span> _placeholderSize <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>

    _placeholderSize <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Tell the widget to rebuild if it&#39;s mounted. _placeholderSize has already</span>
      <span class="token comment">// been updated.</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，startFlight/endFlight 方法主要影响的是_placeholderSize 的值，并引发 rebuild：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>
      context<span class="token punctuation">.</span>findAncestorWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hero</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token string-literal"><span class="token string">&#39;A Hero widget cannot be the descendant of another Hero widget.&#39;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// _placeholderSize 不为 null 则展示占位 Widget</span>
    <span class="token keyword">final</span> bool showPlaceholder <span class="token operator">=</span> _placeholderSize <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>showPlaceholder <span class="token operator">&amp;&amp;</span> widget<span class="token punctuation">.</span>placeholderBuilder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有指定占位 Widget，并且需要展示</span>
      <span class="token keyword">return</span> widget<span class="token punctuation">.</span>placeholderBuilder<span class="token operator">!</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> _placeholderSize<span class="token operator">!</span><span class="token punctuation">,</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>showPlaceholder <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_shouldIncludeChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在 Hero 动画执行时，默认是用相同大小的 SizeBox 占位</span>
      <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
        width<span class="token punctuation">:</span> _placeholderSize<span class="token operator">!</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>
        height<span class="token punctuation">:</span> _placeholderSize<span class="token operator">!</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>
      width<span class="token punctuation">:</span> _placeholderSize<span class="token operator">?</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> _placeholderSize<span class="token operator">?</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Offstage</span><span class="token punctuation">(</span>
        offstage<span class="token punctuation">:</span> showPlaceholder<span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">TickerMode</span><span class="token punctuation">(</span>
          enabled<span class="token punctuation">:</span> <span class="token operator">!</span>showPlaceholder<span class="token punctuation">,</span>
          <span class="token comment">// 只有动画未开始/结束时才会展示 child</span>
          child<span class="token punctuation">:</span> <span class="token class-name">KeyedSubtree</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> _key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Hero 和_HeroState 主要是提供了操纵、统计当前 Page 的 Hero Widget 以及控制其 Hero.child 及占位 Widget 的显示与否，那么在哪里发起和结束 Hero 动画，以及绘制过渡 Widget 的呢？</p><h3 id="heroflightmanifest" tabindex="-1"><a class="header-anchor" href="#heroflightmanifest" aria-hidden="true">#</a> _HeroFlightManifest</h3><blockquote><p>“_HeroFlightManifest：Everything known about a hero flight that&#39;s to be started or diverted.”</p></blockquote><p>_HeroFlightManifest 是一个数据类，主要封装了<code>fromHero</code>/<code>toHero</code>两个_HeroState，并提供 Hero Widget 的位置信息 Rect；此外还封装了过渡动画相关的<code>get animation</code>和<code>createHeroRectTween</code>方法。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _HeroFlightManifest <span class="token punctuation">{</span>
  <span class="token function">_HeroFlightManifest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>overlay<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>navigatorSize<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>fromRoute<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>toRoute<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>fromHero<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>toHero<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>createRectTween<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>shuttleBuilder<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>isUserGestureTransition<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>isDiverted<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>fromHero<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>tag <span class="token operator">==</span> toHero<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>

  late <span class="token keyword">final</span> <span class="token class-name">Rect</span> fromHeroLocation <span class="token operator">=</span> <span class="token function">_boundingBoxFor</span><span class="token punctuation">(</span>fromHero<span class="token punctuation">.</span>context<span class="token punctuation">,</span> fromRoute<span class="token punctuation">.</span>subtreeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  late <span class="token keyword">final</span> <span class="token class-name">Rect</span> toHeroLocation <span class="token operator">=</span> <span class="token function">_boundingBoxFor</span><span class="token punctuation">(</span>toHero<span class="token punctuation">.</span>context<span class="token punctuation">,</span> toRoute<span class="token punctuation">.</span>subtreeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token class-name">Rect</span> <span class="token function">_boundingBoxFor</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BuildContext</span><span class="token operator">?</span> ancestorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 context 中找到对应的 RenderObject 并转化得到其在 ancestorContext 坐标系中的 Rect</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 过渡动画相关</span>
  <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createHeroRectTween</span><span class="token punctuation">(</span><span class="token punctuation">{</span> required <span class="token class-name">Rect</span><span class="token operator">?</span> begin<span class="token punctuation">,</span> required <span class="token class-name">Rect</span><span class="token operator">?</span> end <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">CreateRectTween</span><span class="token operator">?</span> createRectTween <span class="token operator">=</span> toHero<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>createRectTween <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createRectTween<span class="token punctuation">;</span>
    <span class="token keyword">return</span> createRectTween<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">RectTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">:</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> animation <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>
      <span class="token comment">// push 和 pop 采用不同的 animation</span>
      parent<span class="token punctuation">:</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>push<span class="token punctuation">)</span> <span class="token operator">?</span> toRoute<span class="token punctuation">.</span>animation<span class="token operator">!</span> <span class="token punctuation">:</span> fromRoute<span class="token punctuation">.</span>animation<span class="token operator">!</span><span class="token punctuation">,</span>
      curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>fastOutSlowIn<span class="token punctuation">,</span>
      reverseCurve<span class="token punctuation">:</span> isDiverted <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>fastOutSlowIn<span class="token punctuation">.</span>flipped<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="herocontroller" tabindex="-1"><a class="header-anchor" href="#herocontroller" aria-hidden="true">#</a> HeroController</h3><p>HeroController 真正在路由切换时操作 Hero 动画。</p><p>无论是 CupertinoApp 还是 MaterialApp 都提供了创建 HeroController 的静态方法，在他们对应的 State.initState 方法中创建。</p><blockquote><p>CupertinoTabView 也创建有自己的 HeroController。</p></blockquote><p>以 MaterialApp 为例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// MaterialApp 类</span>
  <span class="token keyword">static</span> <span class="token class-name">HeroController</span> <span class="token function">createMaterialHeroController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">HeroController</span><span class="token punctuation">(</span>
      createRectTween<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token operator">?</span> begin<span class="token punctuation">,</span> <span class="token class-name">Rect</span><span class="token operator">?</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">MaterialRectArcTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">:</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在_MaterialAppState 中创建并持有 HeroController：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _MaterialAppState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaterialApp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  late <span class="token class-name">HeroController</span> _heroController<span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _heroController <span class="token operator">=</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">.</span><span class="token function">createMaterialHeroController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 WidgetsApp</span>
    <span class="token class-name">Widget</span> result <span class="token operator">=</span> <span class="token function">_buildWidgetApp</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">return</span> <span class="token class-name">ScrollConfiguration</span><span class="token punctuation">(</span>
      behavior<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>scrollBehavior <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">const</span> <span class="token class-name">MaterialScrollBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 注意这里将_heroController 传给 HeroControllerScope</span>
      child<span class="token punctuation">:</span> <span class="token class-name">HeroControllerScope</span><span class="token punctuation">(</span>
        controller<span class="token punctuation">:</span> _heroController<span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> result<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HeroControllerScope 是一个 InheritedWidget，经过上述代码，MaterialApp 内部可以通过<code>HeroControllerScope.of()</code>方法获取到 HeroController。</p><p>而在 WidgetsApp 中创建的 Navigator 对应的<code>NavigatorState._updateHeroController</code>方法中会使用其获取 HeroController，并通过<code>HeroController._navigator = this</code>及<code>NavigatorState._updateEffectiveObservers()</code>方法与之绑定。</p><p>这样当 Navigator 切换页面时，各个时间都会通知到 HeroController，执行其 didPush/didPop/didRemove/didReplace/didStartUserGesture/didStopUserGesture 等方法，从而触发/终止 Hero 动画。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">HeroController</span> <span class="token keyword">extends</span> <span class="token class-name">NavigatorObserver</span> <span class="token punctuation">{</span>

  <span class="token class-name">HeroController</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createRectTween <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> <span class="token class-name">CreateRectTween</span><span class="token operator">?</span> createRectTween<span class="token punctuation">;</span>

  <span class="token comment">// 当前位于 Overlay 中的所有 Hero 动画，key 是 Hero.tag</span>
  <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroFlight<span class="token punctuation">&gt;</span></span> _flights <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroFlight<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 从父类 NavigatorObserver 继承</span>
  <span class="token class-name">NavigatorState</span><span class="token operator">?</span> _navigator
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="maybestartherotransition" tabindex="-1"><a class="header-anchor" href="#maybestartherotransition" aria-hidden="true">#</a> _maybeStartHeroTransition</h4><p>HeroController 从 NavigatorObserver 继承到的方法中，除了 didStopUserGesture 都会执行 HeroController._maybeStartHeroTransition 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// If we&#39;re transitioning between different page routes, start a hero transition</span>
  <span class="token comment">// after the toRoute has been laid out with its animation&#39;s value at 1.0.</span>
  <span class="token keyword">void</span> <span class="token function">_maybeStartHeroTransition</span><span class="token punctuation">(</span>
    <span class="token class-name">Route</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> fromRoute<span class="token punctuation">,</span>
    <span class="token class-name">Route</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> toRoute<span class="token punctuation">,</span>
    <span class="token class-name">HeroFlightDirection</span> flightType<span class="token punctuation">,</span>
    bool isUserGestureTransition<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>toRoute <span class="token operator">!=</span> fromRoute <span class="token operator">&amp;&amp;</span> toRoute <span class="token operator">is</span> <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token operator">&amp;&amp;</span> fromRoute <span class="token operator">is</span> <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> from <span class="token operator">=</span> fromRoute<span class="token punctuation">;</span>
      <span class="token keyword">final</span> <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> to <span class="token operator">=</span> toRoute<span class="token punctuation">;</span>

      <span class="token comment">// A user gesture may have already completed the pop, or we might be the initial route</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>flightType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>pop<span class="token punctuation">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">.</span>animation<span class="token operator">!</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>push<span class="token punctuation">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>animation<span class="token operator">!</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 对于 pop 事件，如果 maintainState 为 true，那么我们立即得知 hero 动画的目标尺寸</span>
      <span class="token comment">// 因为这表示上一个页面还存在，不需要重新 layout</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isUserGestureTransition <span class="token operator">&amp;&amp;</span> flightType <span class="token operator">==</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>pop <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>maintainState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_startHeroTransition</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> flightType<span class="token punctuation">,</span> isUserGestureTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 否则应该等到下一帧、to 页面 layout 之后再开始</span>

        <span class="token comment">// Putting a route offstage changes its animation value to 1.0. Once this</span>
        <span class="token comment">// frame completes, we&#39;ll know where the heroes in the \`to\` route are</span>
        <span class="token comment">// going to end up, and the \`to\` route will go back onstage.</span>
        to<span class="token punctuation">.</span>offstage <span class="token operator">=</span> to<span class="token punctuation">.</span>animation<span class="token operator">!</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

        <span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">_startHeroTransition</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> flightType<span class="token punctuation">,</span> isUserGestureTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="startherotransition" tabindex="-1"><a class="header-anchor" href="#startherotransition" aria-hidden="true">#</a> _startHeroTransition</h4><p>当上述条件满足之后，便可以开始执行 Hero 动画。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// Find the matching pairs of heroes in from and to and either start or a new</span>
  <span class="token comment">// hero flight, or divert an existing one.</span>
  <span class="token keyword">void</span> <span class="token function">_startHeroTransition</span><span class="token punctuation">(</span>
    <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> from<span class="token punctuation">,</span>
    <span class="token class-name">PageRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> to<span class="token punctuation">,</span>
    <span class="token class-name">HeroFlightDirection</span> flightType<span class="token punctuation">,</span>
    bool isUserGestureTransition<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If the \`to\` route was offstage, then we&#39;re implicitly restoring its</span>
    <span class="token comment">// animation value back to what it was before it was &quot;moved&quot; offstage.</span>
    to<span class="token punctuation">.</span>offstage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">NavigatorState</span><span class="token operator">?</span> navigator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>navigator<span class="token punctuation">;</span>
    <span class="token comment">// 注意这里获取到了 OverlayState，用来放置 Hero 过渡动画</span>
    <span class="token keyword">final</span> <span class="token class-name">OverlayState</span><span class="token operator">?</span> overlay <span class="token operator">=</span> navigator<span class="token operator">?</span><span class="token punctuation">.</span>overlay<span class="token punctuation">;</span>
    <span class="token comment">// If the navigator or the overlay was removed before this end-of-frame</span>
    <span class="token comment">// callback was called, then don&#39;t actually start a transition, and we don&#39;</span>
    <span class="token comment">// t have to worry about any Hero widget we might have hidden in a previous</span>
    <span class="token comment">// flight, or ongoing flights.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> overlay <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">RenderObject</span><span class="token operator">?</span> navigatorRenderObject <span class="token operator">=</span> navigator<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigatorRenderObject <span class="token operator">is!</span> <span class="token class-name">RenderBox</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Navigator </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">navigator</span></span><span class="token string"> has an invalid RenderObject type </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">navigatorRenderObject<span class="token punctuation">.</span>runtimeType</span><span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>navigatorRenderObject<span class="token punctuation">.</span>hasSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// At this point, the toHeroes may have been built and laid out for the first time.</span>
    <span class="token comment">//</span>
    <span class="token comment">// If \`fromSubtreeContext\` is null, call endFlight on all toHeroes, for good measure.</span>
    <span class="token comment">// If \`toSubtreeContext\` is null abort existingFlights.</span>
    <span class="token keyword">final</span> <span class="token class-name">BuildContext</span><span class="token operator">?</span> fromSubtreeContext <span class="token operator">=</span> from<span class="token punctuation">.</span>subtreeContext<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span> fromHeroes <span class="token operator">=</span> fromSubtreeContext <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> <span class="token class-name">Hero</span><span class="token punctuation">.</span><span class="token function">_allHeroesFor</span><span class="token punctuation">(</span>fromSubtreeContext<span class="token punctuation">,</span> isUserGestureTransition<span class="token punctuation">,</span> navigator<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">BuildContext</span><span class="token operator">?</span> toSubtreeContext <span class="token operator">=</span> to<span class="token punctuation">.</span>subtreeContext<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span> toHeroes <span class="token operator">=</span> toSubtreeContext <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> <span class="token class-name">Hero</span><span class="token punctuation">.</span><span class="token function">_allHeroesFor</span><span class="token punctuation">(</span>toSubtreeContext<span class="token punctuation">,</span> isUserGestureTransition<span class="token punctuation">,</span> navigator<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MapEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _HeroState<span class="token punctuation">&gt;</span></span> fromHeroEntry <span class="token keyword">in</span> fromHeroes<span class="token punctuation">.</span>entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Object</span> tag <span class="token operator">=</span> fromHeroEntry<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
      <span class="token keyword">final</span> _HeroState fromHero <span class="token operator">=</span> fromHeroEntry<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">final</span> _HeroState<span class="token operator">?</span> toHero <span class="token operator">=</span> toHeroes<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> _HeroFlight<span class="token operator">?</span> existingFlight <span class="token operator">=</span> _flights<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> _HeroFlightManifest<span class="token operator">?</span> manifest <span class="token operator">=</span> toHero <span class="token operator">==</span> <span class="token keyword">null</span>
        <span class="token operator">?</span> <span class="token keyword">null</span>
        <span class="token punctuation">:</span> <span class="token function">_HeroFlightManifest</span><span class="token punctuation">(</span>
            type<span class="token punctuation">:</span> flightType<span class="token punctuation">,</span>
            overlay<span class="token punctuation">:</span> overlay<span class="token punctuation">,</span>
            navigatorSize<span class="token punctuation">:</span> navigatorRenderObject<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
            fromRoute<span class="token punctuation">:</span> from<span class="token punctuation">,</span>
            toRoute<span class="token punctuation">:</span> to<span class="token punctuation">,</span>
            fromHero<span class="token punctuation">:</span> fromHero<span class="token punctuation">,</span>
            toHero<span class="token punctuation">:</span> toHero<span class="token punctuation">,</span>
            createRectTween<span class="token punctuation">:</span> createRectTween<span class="token punctuation">,</span>
            <span class="token comment">// 优先使用 toHero、fromHero 指定的 flightShuttleBuilder，没有的话</span>
            <span class="token comment">// 使用默认的 shuttleBuilder，也就是 toHero.child</span>
            shuttleBuilder<span class="token punctuation">:</span> toHero<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>flightShuttleBuilder
                          <span class="token operator">?</span><span class="token operator">?</span> fromHero<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>flightShuttleBuilder
                          <span class="token operator">?</span><span class="token operator">?</span> _defaultHeroFlightShuttleBuilder<span class="token punctuation">,</span>
            isUserGestureTransition<span class="token punctuation">:</span> isUserGestureTransition<span class="token punctuation">,</span>
            isDiverted<span class="token punctuation">:</span> existingFlight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Only proceed with a valid manifest. Otherwise abort the existing</span>
      <span class="token comment">// flight, and call endFlight when this for loop finishes.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>manifest <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> manifest<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        toHeroes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingFlight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果已经存在 Hero 过渡动画，则将其转到新的方向</span>
          existingFlight<span class="token punctuation">.</span><span class="token function">divert</span><span class="token punctuation">(</span>manifest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 开始全新的 Hero 过渡动画</span>
          _flights<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_HeroFlight</span><span class="token punctuation">(</span>_handleFlightEnded<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>manifest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        existingFlight<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// The remaining entries in toHeroes are those failed to participate in a</span>
    <span class="token comment">// new flight (for not having a valid manifest).</span>
    <span class="token comment">//</span>
    <span class="token comment">// This can happen in a route pop transition when a fromHero is no longer</span>
    <span class="token comment">// mounted, or kept alive by the [KeepAlive] mechanism but no longer visible.</span>
    <span class="token comment">// TODO(LongCatIsLooong): resume aborted flights: https://github.com/flutter/flutter/issues/72947</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> _HeroState toHero <span class="token keyword">in</span> toHeroes<span class="token punctuation">.</span>values<span class="token punctuation">)</span>
      toHero<span class="token punctuation">.</span><span class="token function">endFlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">_handleFlightEnded</span><span class="token punctuation">(</span>_HeroFlight flight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _flights<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>flight<span class="token punctuation">.</span>manifest<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Widget</span> <span class="token function">_defaultHeroFlightShuttleBuilder</span><span class="token punctuation">(</span>
    <span class="token class-name">BuildContext</span> flightContext<span class="token punctuation">,</span>
    <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>
    <span class="token class-name">HeroFlightDirection</span> flightDirection<span class="token punctuation">,</span>
    <span class="token class-name">BuildContext</span> fromHeroContext<span class="token punctuation">,</span>
    <span class="token class-name">BuildContext</span> toHeroContext<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Hero</span> toHero <span class="token operator">=</span> toHeroContext<span class="token punctuation">.</span>widget <span class="token operator">as</span> <span class="token class-name">Hero</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> toHero<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="heroflight" tabindex="-1"><a class="header-anchor" href="#heroflight" aria-hidden="true">#</a> _HeroFlight</h3><p>经过上面的分析，最终是在_HeroFlight 方法中真正执行 Hero 动画：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _HeroFlight <span class="token punctuation">{</span>
  <span class="token comment">// The simple case: we&#39;re either starting a push or a pop animation.</span>
  <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>_HeroFlightManifest initialManifest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>_aborted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> initial <span class="token operator">=</span> initialManifest<span class="token punctuation">.</span>animation<span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>initial <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> <span class="token class-name">HeroFlightDirection</span> type <span class="token operator">=</span> initialManifest<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>pop<span class="token punctuation">:</span>
          <span class="token keyword">return</span> initial<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1.0</span> <span class="token operator">&amp;&amp;</span> initialManifest<span class="token punctuation">.</span>isUserGestureTransition
              <span class="token comment">// During user gesture transitions, the animation controller isn&#39;t</span>
              <span class="token comment">// driving the reverse transition, but should still be in a previously</span>
              <span class="token comment">// completed stage with the initial value at 1.0.</span>
              <span class="token operator">?</span> initial<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>completed
              <span class="token punctuation">:</span> initial<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>reverse<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>push<span class="token punctuation">:</span>
          <span class="token keyword">return</span> initial<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token operator">&amp;&amp;</span> initial<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    manifest <span class="token operator">=</span> initialManifest<span class="token punctuation">;</span>

    <span class="token keyword">final</span> bool shouldIncludeChildInPlaceholder<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>manifest<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>pop<span class="token punctuation">:</span>
        _proxyAnimation<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token class-name">ReverseAnimation</span><span class="token punctuation">(</span>manifest<span class="token punctuation">.</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        shouldIncludeChildInPlaceholder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token class-name">HeroFlightDirection</span><span class="token punctuation">.</span>push<span class="token punctuation">:</span>
        _proxyAnimation<span class="token punctuation">.</span>parent <span class="token operator">=</span> manifest<span class="token punctuation">.</span>animation<span class="token punctuation">;</span>
        shouldIncludeChildInPlaceholder <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    heroRectTween <span class="token operator">=</span> manifest<span class="token punctuation">.</span><span class="token function">createHeroRectTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> manifest<span class="token punctuation">.</span>fromHeroLocation<span class="token punctuation">,</span> end<span class="token punctuation">:</span> manifest<span class="token punctuation">.</span>toHeroLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行_HeroState.startFlight 方法，移除 Hero.child，展示占位 Widget</span>
    manifest<span class="token punctuation">.</span>fromHero<span class="token punctuation">.</span><span class="token function">startFlight</span><span class="token punctuation">(</span>shouldIncludedChildInPlaceholder<span class="token punctuation">:</span> shouldIncludeChildInPlaceholder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    manifest<span class="token punctuation">.</span>toHero<span class="token punctuation">.</span><span class="token function">startFlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在 overlay 上添加过渡组件_buildOverlay</span>
    manifest<span class="token punctuation">.</span>overlay<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>overlayEntry <span class="token operator">=</span> <span class="token class-name">OverlayEntry</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> _buildOverlay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 监听动画进度，以便实时改变过渡组件_buildOverlay 的样式</span>
    _proxyAnimation<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>onTick<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hero 动画实际播放的过渡动画内容，由_HeroFlight._buildOverlay 根据动画进度创建：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// The OverlayEntry WidgetBuilder callback for the hero&#39;s overlay.</span>
  <span class="token class-name">Widget</span> <span class="token function">_buildOverlay</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>manifest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认是 toHero.child</span>
    shuttle <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> manifest<span class="token punctuation">.</span><span class="token function">shuttleBuilder</span><span class="token punctuation">(</span>
      context<span class="token punctuation">,</span>
      manifest<span class="token punctuation">.</span>animation<span class="token punctuation">,</span>
      manifest<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
      manifest<span class="token punctuation">.</span>fromHero<span class="token punctuation">.</span>context<span class="token punctuation">,</span>
      manifest<span class="token punctuation">.</span>toHero<span class="token punctuation">.</span>context<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>shuttle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>
      <span class="token comment">// 监听动画进度</span>
      animation<span class="token punctuation">:</span> _proxyAnimation<span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> shuttle<span class="token punctuation">,</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Rect</span> rect <span class="token operator">=</span> heroRectTween<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>_proxyAnimation<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">RelativeRect</span> offsets <span class="token operator">=</span> <span class="token class-name">RelativeRect</span><span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> manifest<span class="token punctuation">.</span>navigatorSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里根据动画的进度更改 shuttle 的位置和大小、透明度</span>
        <span class="token comment">// Overlay 本质上是一个特殊的 Stack，所以这里使用 Positioned 定位</span>
        <span class="token keyword">return</span> <span class="token class-name">Positioned</span><span class="token punctuation">(</span>
          top<span class="token punctuation">:</span> offsets<span class="token punctuation">.</span>top<span class="token punctuation">,</span>
          right<span class="token punctuation">:</span> offsets<span class="token punctuation">.</span>right<span class="token punctuation">,</span>
          bottom<span class="token punctuation">:</span> offsets<span class="token punctuation">.</span>bottom<span class="token punctuation">,</span>
          left<span class="token punctuation">:</span> offsets<span class="token punctuation">.</span>left<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>
            child<span class="token punctuation">:</span> <span class="token class-name">RepaintBoundary</span><span class="token punctuation">(</span>
              child<span class="token punctuation">:</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>
                opacity<span class="token punctuation">:</span> _heroOpacity<span class="token punctuation">,</span>
                child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Flutter 中 Hero 动画是基于 Overlay 实现的，监听 Navigator 路由变化，从而在不同 Flutter 页面切换时触发的、表现为 Hero.child 从当前页面“飞”到目标页面对应位置，并伴随着位置、大小、透明度等变化的动画。</p><p>MaterialApp 或者 CupertinoApp 对应的<code>State.initState</code>方法中创建 HeroController，并通过 HeroControllerScope 提供给前面创建的 WidgetsApp 内部创建的 Navigator 并绑定；这样当路由变化时 HeroController 收到通知并在<code>HeroState._startHeroTransition</code>方法中通过<code>Hero._allHeroesFor</code>方法获取到当前页和目标页面的 Hero 动画组件，将其 Animation、Tween、Rect、_HeroState 等封装到_HeroFlightManifest 中，传递给<code>_HeroFlight.start</code>执行动画，并在<code>_HeroFlight.onTick</code>方法监听处理动画进度，从而导致<code>_HeroFlight._buildOverlay</code>创建的过渡 Widget 位置、大小、透明度等变化，产生 Hero Widget“飞入”的视觉效果。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,41),N={href:"https://flutter.cn/docs/development/ui/animations/hero-animations",target:"_blank",rel:"noopener noreferrer"},G={href:"https://api.flutter-io.cn/flutter/widgets/Hero-class.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://api.flutter-io.cn/flutter/widgets/Overlay-class.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/cfug/flutter.cn/blob/master/examples/_animation/radial_hero_animation_animate_rectclip/main.dart",target:"_blank",rel:"noopener noreferrer"};function V(K,$){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("本文对其原理和应用做一简单分析，主要是对"),n("a",r,[s("官方介绍"),t(a)]),s("的理解与分析，感兴趣的可以直接阅读官方文档。")]),d,k,n("blockquote",null,[n("p",null,[s("详细的代码可以从"),n("a",v,[s("simple_hero_animation.dart"),t(a)]),s("获取。")])]),m,n("ul",null,[b,n("li",null,[h,n("p",null,[s("这也是为什么在上一步我们简单的 Hero 动画中，A 向 B 页面切换时过渡的 Widget 中文字虽然是"),g,s("，但是样式看起来和页面中的文字样式不一样，这是因为"),n("a",f,[s("Overlay（可视为一个特殊的 Stack）"),t(a)]),s("上的组件是单独管理的，没有使用我们的 Material 样式。"),y,s(" 要解决这个问题也很简单，在 Hero.child 中添加"),w,s("组件使其应用样式即可。")])]),H,_,C]),x,S,R,F,n("blockquote",null,[n("p",null,[s("径向过渡 是由圆形变成正方形的过渡动画。"),B,s(" —— "),n("a",O,[s("flutter.cn 官网"),t(a)])])]),T,n("p",null,[s("官方的实现为"),n("a",A,[s("radial_hero_animation_animate_rectclip"),t(a)]),s("，但是为了便于理解径向动画的原理，我们在之前的 Hero 动画的简单使用"),n("a",W,[s("代码"),t(a)]),s("基础上进行修改。")]),n("blockquote",null,[n("p",null,[s("详细的代码可以从"),n("a",z,[s("advanced_hero_animation.dart"),t(a)]),s("获取。")])]),P,n("blockquote",null,[q,n("p",null,[s("比如监听进度从而实现旋转："),n("a",M,[s("https://github.com/jixiaoyong/flutter_custom_widget/blob/master/lib/widgets/animation_hero_child.dart"),t(a)])])]),E,n("figure",null,[D,n("figcaption",null,[n("a",j,[s("flutter.cn"),t(a)]),s(" 官网 Hero 示意图")])]),I,n("p",null,[n("a",N,[s("主动画 (Hero animations)"),t(a)])]),n("p",null,[n("a",G,[s("Hero class"),t(a)])]),n("p",null,[n("a",U,[s("Overlay class"),t(a)])]),n("p",null,[n("a",L,[s("radial_hero_animation_animate_rectclip"),t(a)])])])}const J=p(l,[["render",V],["__file","62beedda.html.vue"]]);export{J as default};
