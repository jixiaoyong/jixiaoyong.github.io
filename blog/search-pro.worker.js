const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":934,\"nextId\":934,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#android-studio\",\"3\":\"2#linux\",\"4\":\"3\",\"5\":\"3#说明\",\"6\":\"3#实际操作\",\"7\":\"3#参考文献\",\"8\":\"4\",\"9\":\"4#需求\",\"10\":\"4#方案选择\",\"11\":\"4#分析\",\"12\":\"4#闹钟类型\",\"13\":\"4#触发时间\",\"14\":\"4#间隔时间\",\"15\":\"4#待定的-intent\",\"16\":\"4#取消闹钟\",\"17\":\"4#在重启时恢复闹钟\",\"18\":\"4#具体实现\",\"19\":\"4#设置一个每天指定时间循环的闹钟\",\"20\":\"4#监听每日循环的闹钟\",\"21\":\"4#条件满足后关闭当日循环闹钟\",\"22\":\"4#参考资料\",\"23\":\"5\",\"24\":\"5#简介\",\"25\":\"5#点击事件-activity-viewgroup\",\"26\":\"5#点击事件-viewgroup-view\",\"27\":\"5#点击事件-view-内部\",\"28\":\"5#总结\",\"29\":\"5#参考资料\",\"30\":\"6\",\"31\":\"6#参考文档\",\"32\":\"6@1\",\"33\":\"7\",\"34\":\"8\",\"35\":\"8#启动一个-service\",\"36\":\"8#service-具体分析\",\"37\":\"8#service-绑定服务的三种方式\",\"38\":\"8#_1-拓展-binder-类\",\"39\":\"8#_2-messenger\",\"40\":\"8#_3-aidl\",\"41\":\"8#绑定服务时的注意事项\",\"42\":\"8#service-绑定和启动转换\",\"43\":\"8#前台服务和通知\",\"44\":\"9\",\"45\":\"9#导图\",\"46\":\"9#过程分析\",\"47\":\"9#looper\",\"48\":\"9#looper-perpare\",\"49\":\"9#looper-loop\",\"50\":\"9#looper-mylooper\",\"51\":\"9#handler\",\"52\":\"9#handler-sendmessage\",\"53\":\"9#handler-dispatchmessage\",\"54\":\"9#handler-post\",\"55\":\"9#msg-的获取\",\"56\":\"9#总结\",\"57\":\"10\",\"58\":\"10#aidl-文件特点\",\"59\":\"10#支持的数据格式\",\"60\":\"10#注意事项\",\"61\":\"10#aidl-用法\",\"62\":\"10#aidl\",\"63\":\"10#服务端\",\"64\":\"10#客户端\",\"65\":\"10#监听并处理-binder-死亡事件\",\"66\":\"10#aidl-的权限验证\",\"67\":\"10#参考资料\",\"68\":\"11\",\"69\":\"11#前言\",\"70\":\"11#准备\",\"71\":\"11#分析\",\"72\":\"11#参考资料\",\"73\":\"12\",\"74\":\"12#view-的坐标\",\"75\":\"12#滑动\",\"76\":\"12#window-和-windowmanager\",\"77\":\"12#todo\",\"78\":\"12#参考资料\",\"79\":\"13\",\"80\":\"13#问题描述-webview-在-fragment-中不显示\",\"81\":\"14\",\"82\":\"14#前言\",\"83\":\"14#解析\",\"84\":\"14#参考资料\",\"85\":\"15\",\"86\":\"15#sparearray\",\"87\":\"15#void-put-int-key-e-value\",\"88\":\"15#e-get-int-key\",\"89\":\"15#void-remove-int-key\",\"90\":\"15#gc\",\"91\":\"15#hashmap-与-sparearray-及其衍生类对应关系\",\"92\":\"15#arraymap\",\"93\":\"15#v-put-k-key-v-value\",\"94\":\"15#v-get-object-key\",\"95\":\"15#v-remove-object-key\",\"96\":\"15#参考资料\",\"97\":\"15@1\",\"98\":\"16\",\"99\":\"16#前言\",\"100\":\"16#正文\",\"101\":\"16#获取状态栏高度的问题\",\"102\":\"16#参考资料\",\"103\":\"17\",\"104\":\"17#_1-友盟配置\",\"105\":\"17#_2-android-studio-实现多渠道打包\",\"106\":\"17#_3-生成多个渠道文件夹\",\"107\":\"17#_4-more\",\"108\":\"18\",\"109\":\"18#效果预览\",\"110\":\"18#简要说明\",\"111\":\"18#具体实现\",\"112\":\"18#延伸\",\"113\":\"18#参考文献\",\"114\":\"19\",\"115\":\"19#_1-定义控件组布局-xxx-layout-xml\",\"116\":\"19#_2-新建自定义属性文件-attr-xml-可选\",\"117\":\"19#_3-新建组合控件的类-xxx-java\",\"118\":\"19#_4-使用自定义控件组-xxx-java\",\"119\":\"19#_5-效果预览\",\"120\":\"19#_6-源码\",\"121\":\"20\",\"122\":\"20#mvc\",\"123\":\"20#mvp\",\"124\":\"20#mvvm\",\"125\":\"20#mvi\",\"126\":\"20#clean-architecture\",\"127\":\"20#总结\",\"128\":\"20#参考资料\",\"129\":\"20@1\",\"130\":\"21\",\"131\":\"21#注意事项\",\"132\":\"21#xfermode-分类\",\"133\":\"21#参考文献\",\"134\":\"21@1\",\"135\":\"22\",\"136\":\"22#一些基础知识\",\"137\":\"22#linux-ipc\",\"138\":\"22#binder\",\"139\":\"22#others\",\"140\":\"23\",\"141\":\"24\",\"142\":\"24#贝塞尔曲线介绍\",\"143\":\"24#计算控制点坐标\",\"144\":\"24#方法-1\",\"145\":\"24#方法-2\",\"146\":\"24#给-path-添加渐变背景\",\"147\":\"24#给-path-添加动画\",\"148\":\"24#注意事项\",\"149\":\"24#参考资料\",\"150\":\"24@1\",\"151\":\"25\",\"152\":\"25#自定义的-view\",\"153\":\"25#具体代码\",\"154\":\"25#源码\",\"155\":\"25#预览如下\",\"156\":\"26\",\"157\":\"26#view-的绘制\",\"158\":\"26#measurespec\",\"159\":\"26#view-绘制流程\",\"160\":\"26#获取-view-的宽高\",\"161\":\"26#draw-过程\",\"162\":\"26#绘制两个图形重叠部分\",\"163\":\"26#适配自定义-view-宽高-设置默认值\",\"164\":\"26#参考资料\",\"165\":\"27\",\"166\":\"27#简介\",\"167\":\"27#代码\",\"168\":\"27#源码\",\"169\":\"28\",\"170\":\"28#简介\",\"171\":\"28#正文\",\"172\":\"28#一般流程\",\"173\":\"28#代码\",\"174\":\"28#附录\",\"175\":\"29\",\"176\":\"29#简介\",\"177\":\"29#具体实现\",\"178\":\"29#_1-新建-activity-等\",\"179\":\"29#_2-utils-java-实现-hook-具体逻辑\",\"180\":\"29#附录\",\"181\":\"30\",\"182\":\"30#layout-weight\",\"183\":\"30#pendingintent\",\"184\":\"30#android-模拟器访问电脑-localhost\",\"185\":\"30#获取屏幕画面\",\"186\":\"30#获取网络信息-请求网络\",\"187\":\"30#livedata\",\"188\":\"30#参考资料\",\"189\":\"31\",\"190\":\"32\",\"191\":\"32#使用\",\"192\":\"32#概述\",\"193\":\"32#代码分析\",\"194\":\"33\",\"195\":\"33#compose-屏幕适配\",\"196\":\"33#主要的设计思想\",\"197\":\"33#参考文章\",\"198\":\"34\",\"199\":\"34#前言\",\"200\":\"34#dagger-2-具体实现\",\"201\":\"34#inject\",\"202\":\"34#component\",\"203\":\"34#module-和-provides\",\"204\":\"34#named-和-qualifier\",\"205\":\"34#singleton-和-scope\",\"206\":\"34#参考资料\",\"207\":\"34@1\",\"208\":\"35\",\"209\":\"35#前言\",\"210\":\"35#在-activity-中的使用\",\"211\":\"35#application-范围内的-component\",\"212\":\"35#创建单个-activity-的-subcomponent\",\"213\":\"35#创建单个-activity-的-module\",\"214\":\"35#使-application-继承自-hasactivityinjector\",\"215\":\"35#在-activity-中使用自动注入依赖\",\"216\":\"35#这一切是怎么实现的呢\",\"217\":\"35#在-fragment-中的使用\",\"218\":\"35#一个小技巧\",\"219\":\"35#参考资料\",\"220\":\"35@1\",\"221\":\"36\",\"222\":\"36#_1-同步方法\",\"223\":\"36#_2-micro-task\",\"224\":\"36#代码分析\",\"225\":\"36#rootzone-scheduleasynccallback\",\"226\":\"36#rootzone-startmicrotaskloop\",\"227\":\"36#asyncrun-scheduleimmediate\",\"228\":\"36#scheduleimmediateclosure\",\"229\":\"36#pendingimmediatecallback\",\"230\":\"36#_3-event\",\"231\":\"36#代码分析-1\",\"232\":\"36#future-then\",\"233\":\"36#timer\",\"234\":\"36#创建-timer\",\"235\":\"36#timer-enqueue\",\"236\":\"36#milliseconds-0\",\"237\":\"36#milliseconds-0-1\",\"238\":\"36#handlemessage\",\"239\":\"36#结论\",\"240\":\"36#参考资料\",\"241\":\"37\",\"242\":\"37#过程分析\",\"243\":\"37#dart-端发起文件读写请求\",\"244\":\"37#io-service-中转\",\"245\":\"37#native-处理-dart-的指令\",\"246\":\"37#ioservice-newserviceport\",\"247\":\"37#dart-newnativeport\",\"248\":\"37#dart-newsendport\",\"249\":\"37#结论\",\"250\":\"37#参考资料\",\"251\":\"38\",\"252\":\"38#runapp\",\"253\":\"38#widgetsflutterbinding-ensureinitialized\",\"254\":\"38#scheduleattachrootwidget-app\",\"255\":\"38#renderobjecttowidgetadapter\",\"256\":\"38#attachtorendertree\",\"257\":\"38#schedulewarmupframe\",\"258\":\"38#renderview\",\"259\":\"38#center\",\"260\":\"38#alignment-alignment-center\",\"261\":\"38#renderobject-renderpositionedbox\",\"262\":\"38#widget-center\",\"263\":\"38#child-statelesselement\",\"264\":\"38#text\",\"265\":\"38#richtext\",\"266\":\"38#总结\",\"267\":\"38#参考资料\",\"268\":\"39\",\"269\":\"39#flutter-ui-绘制与-inheritedwidget-解析\",\"270\":\"39#widget-rebuild-的过程\",\"271\":\"39#inheritedwidget-的-rebuild-过程\",\"272\":\"39#inheritedwidget-的获取方式\",\"273\":\"39#代码示例\",\"274\":\"39#参考资料\",\"275\":\"40\",\"276\":\"40#分析\",\"277\":\"40#总结\",\"278\":\"41\",\"279\":\"41#flutter-基础知识\",\"280\":\"41#statelesswidget-statefulwidget\",\"281\":\"41#statelesswidget\",\"282\":\"41#statefulwidget\",\"283\":\"41#与-android-的对比\",\"284\":\"41#intent\",\"285\":\"41#线程\",\"286\":\"41#本地资源\",\"287\":\"41#生命周期\",\"288\":\"41#布局\",\"289\":\"41#点击事件\",\"290\":\"41#参考链接\",\"291\":\"42\",\"292\":\"42#说明\",\"293\":\"42#详细说明\",\"294\":\"42#try-catch\",\"295\":\"42#errorwidget-builder\",\"296\":\"42#fluttererror-onerror\",\"297\":\"42#runzonedguarded-onerror\",\"298\":\"42#参考文章\",\"299\":\"42@1\",\"300\":\"43\",\"301\":\"43#源码分析\",\"302\":\"43#implicitlyanimatedwidget\",\"303\":\"43#initstate\",\"304\":\"43#constructtweens\",\"305\":\"43#didupdatewidget\",\"306\":\"43#foreachtween\",\"307\":\"43#didupdatetweens\",\"308\":\"43#tweenanimationbuilder\",\"309\":\"43#animatedwidget\",\"310\":\"43#animatedstate\",\"311\":\"43#animatedbuilder\",\"312\":\"43#总结\",\"313\":\"43#参考资料\",\"314\":\"44\",\"315\":\"44#源码分析\",\"316\":\"44#animation\",\"317\":\"44#其他子类\",\"318\":\"44#animationcontroller\",\"319\":\"44#构造方法\",\"320\":\"44#startsimulation\",\"321\":\"44#tick\",\"322\":\"44#其他方法\",\"323\":\"44#simulation\",\"324\":\"44#interpolationsimulation\",\"325\":\"44#repeatingsimulation\",\"326\":\"44#springsimulation\",\"327\":\"44#总结\",\"328\":\"44#参考资料\",\"329\":\"45\",\"330\":\"45#源码分析\",\"331\":\"45#custompaint\",\"332\":\"45#rendercustompaint\",\"333\":\"45#custompainter\",\"334\":\"45#canvas\",\"335\":\"45#小结\",\"336\":\"45#总结\",\"337\":\"45#参考资料\",\"338\":\"46\",\"339\":\"46#使用\",\"340\":\"46#简单使用-standard-hero-animations\",\"341\":\"46#原理分析\",\"342\":\"46#进阶使用-radial-hero-animations\",\"343\":\"46#原理分析-1\",\"344\":\"46#其他属性\",\"345\":\"46#底层实现\",\"346\":\"46#hero\",\"347\":\"46#herostate\",\"348\":\"46#heroflightmanifest\",\"349\":\"46#herocontroller\",\"350\":\"46#maybestartherotransition\",\"351\":\"46#startherotransition\",\"352\":\"46#heroflight\",\"353\":\"46#总结\",\"354\":\"46#参考资料\",\"355\":\"47\",\"356\":\"47#源码分析\",\"357\":\"47#animatable\",\"358\":\"47#tween\",\"359\":\"47#curvetween\",\"360\":\"47#curve\",\"361\":\"47#总结\",\"362\":\"47#参考资料\",\"363\":\"48\",\"364\":\"48#图片展示的流程\",\"365\":\"48#image\",\"366\":\"48#imagestate\",\"367\":\"48#resolveimage\",\"368\":\"48#updatesourcestream\",\"369\":\"48#handleimageframe\",\"370\":\"48#build\",\"371\":\"48#rawimage\",\"372\":\"48#renderimage\",\"373\":\"48#图片获取与缓存\",\"374\":\"48#imageprovider\",\"375\":\"48#imagecache\",\"376\":\"48#putifabsent\",\"377\":\"48#总结\",\"378\":\"48#参考资料\",\"379\":\"49\",\"380\":\"49#extended-image\",\"381\":\"49#分析\",\"382\":\"49#extendedimage\",\"383\":\"49#extendednetworkimageprovider\",\"384\":\"49#extendedimageprovider\",\"385\":\"49#总结\",\"386\":\"49#参考资料\",\"387\":\"50\",\"388\":\"50#power-image\",\"389\":\"50#flutter-端图片展示\",\"390\":\"50#powerimage\",\"391\":\"50#powerimagestate\",\"392\":\"50#powertextureimage\",\"393\":\"50#powerexternalimage\",\"394\":\"50#powerimageprovider\",\"395\":\"50#loadasync\",\"396\":\"50#powertextureimageprovider\",\"397\":\"50#powerexternalimageprovider\",\"398\":\"50#flutter-native-通信\",\"399\":\"50#native-端图片获取\",\"400\":\"50#总结\",\"401\":\"50#参考资料\",\"402\":\"51\",\"403\":\"51#用例\",\"404\":\"51#源码分析\",\"405\":\"51#nestedscrollviewstate\",\"406\":\"51#nestedscrollcontroller\",\"407\":\"51#创建-nestedscrollposition\",\"408\":\"51#在-scrollposition-变化时通知-coordinator\",\"409\":\"51#nestedscrollposition\",\"410\":\"51#setparent\",\"411\":\"51#absorb\",\"412\":\"51#applyclampeddragupdate\",\"413\":\"51#applyfulldragupdate\",\"414\":\"51#applyclampedpointersignalupdate\",\"415\":\"51#applynewdimensions\",\"416\":\"51#nestedscrollcoordinator\",\"417\":\"51#beginactivity\",\"418\":\"51#applyuseroffset\",\"419\":\"51#优劣对比\",\"420\":\"51#总结\",\"421\":\"51#参考资料\",\"422\":\"52\",\"423\":\"52#源码分析\",\"424\":\"52#widget-buildviewport\",\"425\":\"52#renderviewportbase\",\"426\":\"52#校验-children-类型是否为-rendersliver\",\"427\":\"52#renderviewport\",\"428\":\"52#rendershrinkwrappingviewport\",\"429\":\"52#list-widget-buildslivers\",\"430\":\"52#使用示例\",\"431\":\"52#总结\",\"432\":\"52#参考资料\",\"433\":\"53\",\"434\":\"53#用例\",\"435\":\"53#源码分析\",\"436\":\"53#singlechildscrollview\",\"437\":\"53#singlechildviewport\",\"438\":\"53#rendersinglechildviewport\",\"439\":\"53#layout\",\"440\":\"53#paint\",\"441\":\"53#hittest\",\"442\":\"53#优劣对比\",\"443\":\"53#进阶使用\",\"444\":\"53#为-column-的-children-安全应用-spacedaround-center-等效果\",\"445\":\"53#为-column-的-children-安全应用-expanded、space-等效果\",\"446\":\"53#总结\",\"447\":\"53#参考资料\",\"448\":\"54\",\"449\":\"54#quick-start\",\"450\":\"54#create-a-new-post\",\"451\":\"54#run-server\",\"452\":\"54#generate-static-files\",\"453\":\"54#deploy-to-remote-sites\",\"454\":\"55\",\"455\":\"55#内存\",\"456\":\"55#内存划分\",\"457\":\"55#_1-head\",\"458\":\"55#_2-stack\",\"459\":\"55#java-virtual-machine-stack\",\"460\":\"55#native-method-stack\",\"461\":\"55#_3-method-area\",\"462\":\"55#_4-program-count\",\"463\":\"55#内存溢出\",\"464\":\"55#_1-java-堆溢出\",\"465\":\"55#_2-虚拟机栈和本地方法栈溢出\",\"466\":\"55#_3-运行时常量池溢出\",\"467\":\"55#_4-方法区溢出\",\"468\":\"55#_5-本地直接内存溢出\",\"469\":\"55#gc-垃圾回收\",\"470\":\"55#回收算法\",\"471\":\"55#_1-复制算法\",\"472\":\"55#_2-标记清除法\",\"473\":\"55#_3-标记压缩法\",\"474\":\"55#_4-引用计数算法\",\"475\":\"55#回收过程\",\"476\":\"55#对象\",\"477\":\"55#对象引用\",\"478\":\"55#强引用-strongreference\",\"479\":\"55#软引用-softreference\",\"480\":\"55#弱引用-weakreference\",\"481\":\"55#虚引用-phantomreference\",\"482\":\"55#脑图\",\"483\":\"56\",\"484\":\"56#简述\",\"485\":\"56#加载过程\",\"486\":\"56#自定义-classloader\",\"487\":\"56#contextclassloader\",\"488\":\"57\",\"489\":\"57#简述\",\"490\":\"57#类加载机制\",\"491\":\"57#类加载机制具体过程\",\"492\":\"57#i-loading\",\"493\":\"57#ii-linking\",\"494\":\"57#verification\",\"495\":\"57#preparation\",\"496\":\"57#resolution\",\"497\":\"57#iii-initialization\",\"498\":\"57#参考文献\",\"499\":\"58\",\"500\":\"58#hashmap-有以下全局变量\",\"501\":\"58#v-put-k-key-v-value\",\"502\":\"58#v-get-object-key\",\"503\":\"58#v-remove-object-key\",\"504\":\"58#计算索引\",\"505\":\"58#保存值\",\"506\":\"58#序列化\",\"507\":\"58#位运算\",\"508\":\"58#参考资料\",\"509\":\"59\",\"510\":\"59#为什么匿名内部类使用局部引用要用final\",\"511\":\"59#jdk1-8-后局部变量不要求用final了\",\"512\":\"59#为什么外部类的全局变量不需要final\",\"513\":\"59#源码解析\",\"514\":\"59#参考资料\",\"515\":\"60\",\"516\":\"60#原理\",\"517\":\"60#计算对象大小的工具\",\"518\":\"60#实际应用\",\"519\":\"60#string最长为-65534\",\"520\":\"60#枚举类-enum\",\"521\":\"60#枚举类大小的计算\",\"522\":\"60#android-中是否应该使用枚举\",\"523\":\"60#sparsearray-arraymap-vs-hashmap\",\"524\":\"60#参考资料\",\"525\":\"61\",\"526\":\"61#特点\",\"527\":\"61#使用与解析\",\"528\":\"61#内存泄漏\",\"529\":\"61#总结\",\"530\":\"61#参考资料\",\"531\":\"62\",\"532\":\"62#_1-冒泡排序\",\"533\":\"62#_2-选择排序\",\"534\":\"62#_3-插入排序法\",\"535\":\"63\",\"536\":\"63#泛型特性\",\"537\":\"63#需要注意的地方\",\"538\":\"63#不能有泛型数组\",\"539\":\"63#泛型容器\",\"540\":\"63#协变\",\"541\":\"63#逆变\",\"542\":\"63#参考资料\",\"543\":\"64\",\"544\":\"64#简介\",\"545\":\"64#_1-普通单例\",\"546\":\"64#_2-同步锁\",\"547\":\"64#_3-双重检查锁定\",\"548\":\"64#_4-饿汉模式实现单例\",\"549\":\"64#_5-懒汉模式实现单例\",\"550\":\"64#_6-enmu-实现单例\",\"551\":\"65\",\"552\":\"65#简介\",\"553\":\"65#简单使用\",\"554\":\"65#小结\",\"555\":\"66\",\"556\":\"66#简介\",\"557\":\"66#代码\",\"558\":\"66#参考文献\",\"559\":\"67\",\"560\":\"67#thread-join\",\"561\":\"67#notify-和-notifyall-的区别区别\",\"562\":\"67#参考资料\",\"563\":\"67@1\",\"564\":\"68\",\"565\":\"68#java-元注解\",\"566\":\"68#内建注解\",\"567\":\"68#自定义注解\",\"568\":\"68#注解类\",\"569\":\"68#注解帮助类\",\"570\":\"68#使用注解\",\"571\":\"68#参考文章\",\"572\":\"69\",\"573\":\"69#week-year\",\"574\":\"69#weak-of-year\",\"575\":\"69#第-01-周\",\"576\":\"69#问题分析\",\"577\":\"69#总结\",\"578\":\"69#附录\",\"579\":\"69#参考资料\",\"580\":\"70\",\"581\":\"70#serializable\",\"582\":\"70#serialversionuid\",\"583\":\"70#readresolve\",\"584\":\"70#自定义序列化过程\",\"585\":\"70#父类未继承-serializable-的类的序列化\",\"586\":\"70#实现\",\"587\":\"70#多次序列化同一个对象\",\"588\":\"70#优缺点\",\"589\":\"70#externalizable\",\"590\":\"70#实现-1\",\"591\":\"70#原理\",\"592\":\"70#优缺点-1\",\"593\":\"70#parcelable\",\"594\":\"70#实现-2\",\"595\":\"70#原理-1\",\"596\":\"70#优缺点-2\",\"597\":\"70#总结\",\"598\":\"70#参考资料\",\"599\":\"70@1\",\"600\":\"71\",\"601\":\"71#前言\",\"602\":\"71#volatile\",\"603\":\"71#synchronize\",\"604\":\"71#jmm-与三个特征\",\"605\":\"71#实现线程安全\",\"606\":\"71#互斥同步-阻塞同步\",\"607\":\"71#非阻塞同步\",\"608\":\"71#无同步方案\",\"609\":\"71#锁优化\",\"610\":\"71#参考资料\",\"611\":\"71@1\",\"612\":\"72\",\"613\":\"73\",\"614\":\"73#尾递归优化\",\"615\":\"73#sealed-class-密封类\",\"616\":\"73#kotlin-抛出异常\",\"617\":\"73#kotlin-中的泛型\",\"618\":\"73#星号投射\",\"619\":\"73#委托\",\"620\":\"73#中缀函数\",\"621\":\"73#inline-内联函数\",\"622\":\"73#coroutines-协程\",\"623\":\"73#协程中runblocking与coroutinescope的区别\",\"624\":\"73#协程的思维导图\",\"625\":\"73#协程局部变量\",\"626\":\"73#在-android-中使用\",\"627\":\"73#参考资料\",\"628\":\"74\",\"629\":\"74#异步流\",\"630\":\"74#合并-conflate\",\"631\":\"74#组合多个流\",\"632\":\"74#流异常\",\"633\":\"74#声明式捕获-将-collect-的主要逻辑放到-oneach-中-保证-oneach-在-catch-之前\",\"634\":\"74#流完成\",\"635\":\"74#launchin-this-与-collect\",\"636\":\"74#channel\",\"637\":\"74#flow-channel-sequence-的区别\",\"638\":\"74#管道\",\"639\":\"74#异常\",\"640\":\"74#异常的传播\",\"641\":\"74#监督\",\"642\":\"74#监督作业\",\"643\":\"74#监督作用域\",\"644\":\"74#监督协程中的异常\",\"645\":\"74#协程的线程安全\",\"646\":\"74#select-表达式\",\"647\":\"74#参考资料\",\"648\":\"75\",\"649\":\"75#前言\",\"650\":\"75#正文\",\"651\":\"75#创建-flow\",\"652\":\"75#流的收集-末端流操作符\",\"653\":\"75#过渡流操作符\",\"654\":\"75#流上下文\",\"655\":\"75#展平流\",\"656\":\"75#异常处理\",\"657\":\"75#流取消\",\"658\":\"75#流完成\",\"659\":\"75#其余操作\",\"660\":\"75#参考文献\",\"661\":\"76\",\"662\":\"76#一个例子\",\"663\":\"76#lambda\",\"664\":\"76#小知识点\",\"665\":\"77\",\"666\":\"77#常见应用\",\"667\":\"77#参考资料\",\"668\":\"78\",\"669\":\"78#安装-git\",\"670\":\"78#配置-git-和-github\",\"671\":\"78#用-android-studio-同步工程到-github\",\"672\":\"78#利用-git-从本地上传到-github\",\"673\":\"78#从-github-克隆项目到本地\",\"674\":\"78#github-的分支管理\",\"675\":\"78#说明\",\"676\":\"79\",\"677\":\"79#下载-jdk-并解压\",\"678\":\"79#设置环境变量\",\"679\":\"79#配置-alternatives\",\"680\":\"79#运行-android-studio\",\"681\":\"80\",\"682\":\"80#复制-删除-移动\",\"683\":\"80#切换目录\",\"684\":\"80#新建文件、文件夹\",\"685\":\"80#查看文件信息\",\"686\":\"80#常用目录\",\"687\":\"80#文件相关\",\"688\":\"80#ls\",\"689\":\"80#chmod\",\"690\":\"80#文件权限与-umask\",\"691\":\"80#查看、管理当前用户信息\",\"692\":\"80#改密码\",\"693\":\"80#文件打包、压缩和解压缩\",\"694\":\"80#gzip\",\"695\":\"80#tar\",\"696\":\"80#bash-shell\",\"697\":\"80#自定义变量\",\"698\":\"80#别名配置\",\"699\":\"80#环境变量\",\"700\":\"80#shell-startup-scripts\",\"701\":\"80#标准输入输出等\",\"702\":\"80#grep\",\"703\":\"80#sort\",\"704\":\"80#wc\",\"705\":\"80@1\",\"706\":\"81\",\"707\":\"81#前言\",\"708\":\"81#基础\",\"709\":\"81#实现分析\",\"710\":\"81#okhttpclient-相关\",\"711\":\"81#网络请求相关信息\",\"712\":\"81#执行网络请求\",\"713\":\"81#总结\",\"714\":\"81@1\",\"715\":\"82\",\"716\":\"82#简介\",\"717\":\"82#使用方法\",\"718\":\"82#使用时需要根据自己的项目更新-main-py-的一下变量\",\"719\":\"82#运行main-py文件\",\"720\":\"82#源代码\",\"721\":\"82#后期计划\",\"722\":\"83\",\"723\":\"83#数据类型\",\"724\":\"83#集合\",\"725\":\"83#逻辑语句\",\"726\":\"83#自定义函数\",\"727\":\"83#使用其他文件的函数\",\"728\":\"83#类\",\"729\":\"84\",\"730\":\"84#简介\",\"731\":\"84#代码\",\"732\":\"84#结语\",\"733\":\"84#源码\",\"734\":\"85\",\"735\":\"85#简介\",\"736\":\"85#框架\",\"737\":\"85#关键代码\",\"738\":\"85#说明\",\"739\":\"86\",\"740\":\"86#isolate\",\"741\":\"86#简单使用\",\"742\":\"86#创建新-isolate-的方式\",\"743\":\"86#使用方法\",\"744\":\"86#pause\",\"745\":\"86#ping\",\"746\":\"86#源码分析\",\"747\":\"86#获取当前-isolate\",\"748\":\"86#创建-isolate\",\"749\":\"86#isolate-spawnfunction\",\"750\":\"86#spawnisolatetask\",\"751\":\"86#runlightweight\",\"752\":\"86#isolate-initializecallback\",\"753\":\"86#createwithinexistingisolategroup\",\"754\":\"86#isolate-spawnuri\",\"755\":\"86#spawnisolatetask-1\",\"756\":\"86#runheavyweight\",\"757\":\"86#isolate-creategroupcallback\",\"758\":\"86#dart-createisolategroup\",\"759\":\"86#run-isolate-child\",\"760\":\"86#scheduletasklocked\",\"761\":\"86#worker-main\",\"762\":\"86#总结\",\"763\":\"87\",\"764\":\"87#_1-running-from-source-via-jit\",\"765\":\"87#从-dart-source-加载到-vm-中\",\"766\":\"87#在-vm-中执行\",\"767\":\"87#unoptimized-code\",\"768\":\"87#optimized-code\",\"769\":\"87#_2-running-from-aot-snapshot\",\"770\":\"87#_3-running-from-appjit-snapshot\",\"771\":\"87#_4-running-from-appaot-snapshot\",\"772\":\"87#switchable-calls\",\"773\":\"87#参考资料\",\"774\":\"87@1\",\"775\":\"88\",\"776\":\"88#nicenews\",\"777\":\"88#iweather\",\"778\":\"88#_2048\",\"779\":\"88#i-看知乎\",\"780\":\"89\",\"781\":\"89#前言\",\"782\":\"89#具体实现分析\",\"783\":\"89#navigation-控制界面切换\",\"784\":\"89#databinding-绑定布局和数据\",\"785\":\"89#viewmodel-管理数据与页面的交互\",\"786\":\"89#room-保存数据\",\"787\":\"89#workmanager-管理任务\",\"788\":\"89#参考资料\",\"789\":\"89@1\",\"790\":\"90\",\"791\":\"90#前言\",\"792\":\"90#具体差异\",\"793\":\"90#hexo-分支的结构\",\"794\":\"90#travis-yml\",\"795\":\"90#更新博客内容\",\"796\":\"90#参考文档\",\"797\":\"90@1\",\"798\":\"91\",\"799\":\"91#准备-git-和-node-环境\",\"800\":\"91#装-git-环境\",\"801\":\"91#安装-node\",\"802\":\"91#校验环境\",\"803\":\"91#配置环境变量方法\",\"804\":\"91#安装配置-hexo\",\"805\":\"91#安装-hexo\",\"806\":\"91#配置-hexo\",\"807\":\"91#目录的解释\",\"808\":\"91#一些-hexo-语句解释\",\"809\":\"91#新建文章\",\"810\":\"91#配置-github\",\"811\":\"91#上传网站\",\"812\":\"91#部署方法-1\",\"813\":\"91#部署方法-2\",\"814\":\"92\",\"815\":\"92#加载已安装应用资源\",\"816\":\"92#shareduserid\",\"817\":\"92#筛选所有已安装应用信息\",\"818\":\"92#生成插件-app-的-context\",\"819\":\"92#通过-context-反射获取插件-app-中的资源\",\"820\":\"92#加载未安装-apk-内资源\",\"821\":\"92#获取-apk-信息\",\"822\":\"92#获取-classloader\",\"823\":\"92#通过反射加载类-获取资源\",\"824\":\"92#参考资源\",\"825\":\"93\",\"826\":\"93#前言\",\"827\":\"93#存储方式\",\"828\":\"93#比较\",\"829\":\"93#源码\",\"830\":\"93@1\",\"831\":\"94\",\"832\":\"94#前言\",\"833\":\"94#二叉搜索树\",\"834\":\"94#遍历\",\"835\":\"94#最大值和最小值\",\"836\":\"94#删除\",\"837\":\"94#哈夫曼编码\",\"838\":\"94#源码\",\"839\":\"94@1\",\"840\":\"95\",\"841\":\"95#前言\",\"842\":\"95#存储方式\",\"843\":\"95#操作\",\"844\":\"95#插入\",\"845\":\"95#移除\",\"846\":\"95#搜索\",\"847\":\"95#dfs\",\"848\":\"95#bfs\",\"849\":\"95#最小生成树-mst\",\"850\":\"95#拓扑排序\",\"851\":\"95#源码\",\"852\":\"95#参考资料\",\"853\":\"95@1\",\"854\":\"96\",\"855\":\"96#前言\",\"856\":\"96#特征\",\"857\":\"96#操作\",\"858\":\"96#插入\",\"859\":\"96#移除\",\"860\":\"96#堆排序\",\"861\":\"96#附录\",\"862\":\"96#满二叉树\",\"863\":\"96#完全二叉树\",\"864\":\"96#源码\",\"865\":\"96#参考链接\",\"866\":\"96@1\",\"867\":\"97\",\"868\":\"97#前言\",\"869\":\"97#通用数据结构\",\"870\":\"97#专用数据结构\",\"871\":\"97#栈\",\"872\":\"97#队列\",\"873\":\"97#优先级队列\",\"874\":\"97#效率\",\"875\":\"97#排序\",\"876\":\"97@1\",\"877\":\"98\",\"878\":\"98#前言\",\"879\":\"98#数组\",\"880\":\"98#有序数组\",\"881\":\"98#链表\",\"882\":\"98#源码\",\"883\":\"98#参考文献\",\"884\":\"98@1\",\"885\":\"99\",\"886\":\"99#前言\",\"887\":\"99#栈\",\"888\":\"99#队列\",\"889\":\"99#优先级队列\",\"890\":\"99#中缀表达式与后缀表达式\",\"891\":\"99#源码\",\"892\":\"99#参考资料\",\"893\":\"99@1\",\"894\":\"100\",\"895\":\"100#简单排序\",\"896\":\"100#冒泡排序\",\"897\":\"100#选择排序\",\"898\":\"100#插入排序\",\"899\":\"100#源码\",\"900\":\"100@1\",\"901\":\"101\",\"902\":\"101#前言\",\"903\":\"101#旋转\",\"904\":\"101#插入\",\"905\":\"101#删除\",\"906\":\"101#源码\",\"907\":\"101#参考文档\",\"908\":\"101@1\",\"909\":\"102\",\"910\":\"102#前言\",\"911\":\"102#递归\",\"912\":\"102#汉诺塔问题\",\"913\":\"102#归并排序\",\"914\":\"102#源码\",\"915\":\"102#参考资料\",\"916\":\"102@1\",\"917\":\"103\",\"918\":\"103#前言\",\"919\":\"103#希尔排序\",\"920\":\"103#增量的选择\",\"921\":\"103#具体实现\",\"922\":\"103#快速排序\",\"923\":\"103#划分\",\"924\":\"103#划分算法\",\"925\":\"103#快速排序的思路\",\"926\":\"103#枢纽的选择\",\"927\":\"103#具体实现-1\",\"928\":\"103#总结\",\"929\":\"103#源码\",\"930\":\"103@1\",\"931\":\"104\",\"932\":\"105\",\"933\":\"106\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,86],\"1\":[2],\"2\":[2,34],\"3\":[1,16],\"4\":[2],\"5\":[1,24],\"6\":[1,193],\"7\":[1,16],\"8\":[3,7],\"9\":[1,7],\"10\":[1,53],\"11\":[1,50],\"12\":[1,22],\"13\":[1,45],\"14\":[1,9],\"15\":[2,25],\"16\":[1,7],\"17\":[1,9],\"18\":[1],\"19\":[1,59],\"20\":[1,47],\"21\":[1,22],\"22\":[1,4],\"23\":[2,10],\"24\":[1,39],\"25\":[4,72],\"26\":[4,206],\"27\":[3,50],\"28\":[1,16],\"29\":[1,4],\"30\":[6,194],\"31\":[1,9],\"32\":[null,null,1],\"33\":[4,137],\"34\":[2],\"35\":[2,83],\"36\":[2,103],\"37\":[2],\"38\":[4,84],\"39\":[2,107],\"40\":[2,2],\"41\":[1,16],\"42\":[2,9],\"43\":[1,35],\"44\":[5,11],\"45\":[1,1],\"46\":[1],\"47\":[1],\"48\":[1,37],\"49\":[1,30],\"50\":[1,17],\"51\":[1],\"52\":[3,31],\"53\":[3,27],\"54\":[3,34],\"55\":[2,9],\"56\":[1,45],\"57\":[4,55],\"58\":[2],\"59\":[1,11],\"60\":[1,38],\"61\":[2],\"62\":[1,136],\"63\":[1,209],\"64\":[1,38],\"65\":[3,11],\"66\":[2,15],\"67\":[1,3],\"68\":[4],\"69\":[1,20],\"70\":[1,31],\"71\":[1,192],\"72\":[1,6],\"73\":[4,3],\"74\":[2,59],\"75\":[1,83],\"76\":[3,48],\"77\":[1,42],\"78\":[1,5],\"79\":[4],\"80\":[5,22],\"81\":[4],\"82\":[1,25],\"83\":[1,166],\"84\":[1,5],\"85\":[6,38],\"86\":[1,44],\"87\":[7,72],\"88\":[5,27],\"89\":[5,25],\"90\":[2,46],\"91\":[4,1],\"92\":[1,151],\"93\":[6,26],\"94\":[5,21],\"95\":[5,39],\"96\":[1,17],\"97\":[null,null,1],\"98\":[2],\"99\":[1,13],\"100\":[1,119],\"101\":[1,112],\"102\":[1,16],\"103\":[2,24],\"104\":[2,90],\"105\":[4,84],\"106\":[2,22],\"107\":[2,6],\"108\":[3,10],\"109\":[1,2],\"110\":[1,49],\"111\":[1,123],\"112\":[1,130],\"113\":[1,17],\"114\":[2,4],\"115\":[5,34],\"116\":[6,63],\"117\":[4,100],\"118\":[4,61],\"119\":[2,1],\"120\":[2,4],\"121\":[2,25],\"122\":[1,50],\"123\":[1,167],\"124\":[1,84],\"125\":[1,174],\"126\":[2,406],\"127\":[1,18],\"128\":[1,74],\"129\":[null,null,1],\"130\":[3,25],\"131\":[1,72],\"132\":[2,46],\"133\":[1,13],\"134\":[null,null,1],\"135\":[2,19],\"136\":[1,58],\"137\":[2,143],\"138\":[1,384],\"139\":[1,70],\"140\":[2,134],\"141\":[2,23],\"142\":[1,36],\"143\":[1,31],\"144\":[2,45],\"145\":[2,51],\"146\":[3,45],\"147\":[3,61],\"148\":[1,17],\"149\":[1,14],\"150\":[null,null,1],\"151\":[4],\"152\":[2,37],\"153\":[1,169],\"154\":[1,4],\"155\":[1,2],\"156\":[4],\"157\":[2,29],\"158\":[1,50],\"159\":[2,117],\"160\":[3,44],\"161\":[2,32],\"162\":[1,53],\"163\":[4,23],\"164\":[1,3],\"165\":[3],\"166\":[1,12],\"167\":[1,117],\"168\":[1,2],\"169\":[2],\"170\":[1,12],\"171\":[1],\"172\":[1,22],\"173\":[1,108],\"174\":[1,2],\"175\":[5],\"176\":[1,37],\"177\":[1],\"178\":[4,47],\"179\":[6,166],\"180\":[1,13],\"181\":[2],\"182\":[2,19],\"183\":[1,61],\"184\":[3,9],\"185\":[1,13],\"186\":[2,48],\"187\":[1,40],\"188\":[1,4],\"189\":[3,230],\"190\":[2,41],\"191\":[1,16],\"192\":[1,22],\"193\":[1,283],\"194\":[2],\"195\":[2,33],\"196\":[1,194],\"197\":[1,4],\"198\":[7],\"199\":[1,52],\"200\":[3],\"201\":[2,24],\"202\":[2,41],\"203\":[4,91],\"204\":[4,65],\"205\":[4,77],\"206\":[1,23],\"207\":[null,null,1],\"208\":[4],\"209\":[1,40],\"210\":[3],\"211\":[3,17],\"212\":[4,12],\"213\":[4,51],\"214\":[1,42],\"215\":[3,40],\"216\":[2,17],\"217\":[3,47],\"218\":[1,16],\"219\":[1,8],\"220\":[null,null,1],\"221\":[3,80],\"222\":[2,35],\"223\":[3,43],\"224\":[1,79],\"225\":[3,54],\"226\":[3,71],\"227\":[3,41],\"228\":[2,115],\"229\":[2,102],\"230\":[2,67],\"231\":[1,215],\"232\":[2,167],\"233\":[1,48],\"234\":[2,148],\"235\":[2,155],\"236\":[4,53],\"237\":[4,247],\"238\":[2,180],\"239\":[1,31],\"240\":[1,14],\"241\":[2,74],\"242\":[1],\"243\":[2,404],\"244\":[3,250],\"245\":[4],\"246\":[2,105],\"247\":[2,765],\"248\":[2,78],\"249\":[1,47],\"250\":[1,18],\"251\":[3,128],\"252\":[1,26],\"253\":[3,157],\"254\":[3,114],\"255\":[1,63],\"256\":[1,190],\"257\":[2,36],\"258\":[1,59],\"259\":[1,147],\"260\":[1,4],\"261\":[1,34],\"262\":[1,119],\"263\":[1,109],\"264\":[1,189],\"265\":[1,194],\"266\":[1,52],\"267\":[1,22],\"268\":[5],\"269\":[5,29],\"270\":[3,73],\"271\":[4,62],\"272\":[2,25],\"273\":[1,171],\"274\":[1,26],\"275\":[4,12],\"276\":[1,153],\"277\":[1,15],\"278\":[3,45],\"279\":[2,69],\"280\":[2,14],\"281\":[1,33],\"282\":[1,82],\"283\":[3],\"284\":[1,86],\"285\":[1,127],\"286\":[1,54],\"287\":[1,25],\"288\":[1,12],\"289\":[1,25],\"290\":[1,15],\"291\":[2],\"292\":[1,37],\"293\":[1,3],\"294\":[1,28],\"295\":[1,101],\"296\":[1,42],\"297\":[1,30],\"298\":[1,3],\"299\":[null,null,1],\"300\":[4,86],\"301\":[1,10],\"302\":[1,177],\"303\":[1,29],\"304\":[2,34],\"305\":[1,64],\"306\":[1,10],\"307\":[1,102],\"308\":[1,125],\"309\":[1,113],\"310\":[2,106],\"311\":[1,74],\"312\":[1,65],\"313\":[1,5],\"314\":[3,118],\"315\":[1,25],\"316\":[1,76],\"317\":[1,66],\"318\":[1,21],\"319\":[1,109],\"320\":[2,45],\"321\":[2,44],\"322\":[1,18],\"323\":[1,45],\"324\":[2,36],\"325\":[2,47],\"326\":[1,4],\"327\":[1,73],\"328\":[1,9],\"329\":[3,66],\"330\":[1,80],\"331\":[1,64],\"332\":[1,157],\"333\":[1,117],\"334\":[1,116],\"335\":[1,57],\"336\":[1,29],\"337\":[1,12],\"338\":[3,17],\"339\":[1],\"340\":[4,98],\"341\":[1,91],\"342\":[4,125],\"343\":[1,67],\"344\":[1,42],\"345\":[1],\"346\":[1,55],\"347\":[2,105],\"348\":[2,86],\"349\":[1,105],\"350\":[2,112],\"351\":[2,215],\"352\":[2,142],\"353\":[1,57],\"354\":[1,10],\"355\":[4,72],\"356\":[1],\"357\":[1,104],\"358\":[1,114],\"359\":[1,64],\"360\":[1,103],\"361\":[1,37],\"362\":[1,8],\"363\":[3,24],\"364\":[1,3],\"365\":[1,110],\"366\":[2,17],\"367\":[2,49],\"368\":[2,53],\"369\":[2,57],\"370\":[1,114],\"371\":[1,52],\"372\":[1,59],\"373\":[1,6],\"374\":[1,147],\"375\":[1,96],\"376\":[1,278],\"377\":[1,55],\"378\":[1,6],\"379\":[4,22],\"380\":[2,23],\"381\":[1,8],\"382\":[1,41],\"383\":[1,160],\"384\":[1,116],\"385\":[1,48],\"386\":[1,3],\"387\":[4,25],\"388\":[2,42],\"389\":[2],\"390\":[1,21],\"391\":[1,56],\"392\":[1,63],\"393\":[1,96],\"394\":[1,40],\"395\":[2,118],\"396\":[1,66],\"397\":[1,124],\"398\":[3,377],\"399\":[2,141],\"400\":[1,70],\"401\":[1,16],\"402\":[3,96],\"403\":[1,89],\"404\":[1,76],\"405\":[1,256],\"406\":[2,6],\"407\":[2,18],\"408\":[4,74],\"409\":[2,45],\"410\":[1,12],\"411\":[1,19],\"412\":[1,258],\"413\":[1,79],\"414\":[1,7],\"415\":[2,147],\"416\":[2,43],\"417\":[1,167],\"418\":[1,292],\"419\":[1,50],\"420\":[1,59],\"421\":[1,4],\"422\":[3,124],\"423\":[1,97],\"424\":[3,120],\"425\":[1,38],\"426\":[4,100],\"427\":[1,47],\"428\":[1,23],\"429\":[3,28],\"430\":[1,56],\"431\":[1,47],\"432\":[1,4],\"433\":[3,81],\"434\":[1,29],\"435\":[1],\"436\":[1,84],\"437\":[2,40],\"438\":[2,109],\"439\":[1,142],\"440\":[1,123],\"441\":[1,37],\"442\":[1,56],\"443\":[1],\"444\":[8,86],\"445\":[8,148],\"446\":[1,36],\"447\":[1,4],\"448\":[2,33],\"449\":[2],\"450\":[4,8],\"451\":[2,5],\"452\":[3,5],\"453\":[4,5],\"454\":[2,16],\"455\":[1,30],\"456\":[1],\"457\":[2,24],\"458\":[2,7],\"459\":[4,22],\"460\":[3,19],\"461\":[3,63],\"462\":[3,16],\"463\":[1,5],\"464\":[3,11],\"465\":[2,23],\"466\":[2,7],\"467\":[2,8],\"468\":[2,3],\"469\":[2,4],\"470\":[1],\"471\":[2,13],\"472\":[2,28],\"473\":[2,15],\"474\":[2,22],\"475\":[1,37],\"476\":[1],\"477\":[1],\"478\":[2,9],\"479\":[2,10],\"480\":[2,6],\"481\":[2,5],\"482\":[1],\"483\":[3,10],\"484\":[1,37],\"485\":[1,106],\"486\":[2,88],\"487\":[1,32],\"488\":[2],\"489\":[1,4],\"490\":[1,54],\"491\":[1],\"492\":[3,86],\"493\":[3,64],\"494\":[1,46],\"495\":[2,60],\"496\":[1,70],\"497\":[1,108],\"498\":[1,45],\"499\":[4,14],\"500\":[2,99],\"501\":[1,63],\"502\":[1,14],\"503\":[1,7],\"504\":[1,15],\"505\":[1,28],\"506\":[1,58],\"507\":[1,26],\"508\":[1,35],\"509\":[3],\"510\":[4,11],\"511\":[5,57],\"512\":[2,7],\"513\":[1,76],\"514\":[1,22],\"515\":[3],\"516\":[1,130],\"517\":[1,79],\"518\":[1],\"519\":[2,129],\"520\":[2],\"521\":[1,70],\"522\":[2,31],\"523\":[4,188],\"524\":[1,31],\"525\":[3,19],\"526\":[1,8],\"527\":[1,91],\"528\":[1,91],\"529\":[1,10],\"530\":[1,9],\"531\":[2,4],\"532\":[2,47],\"533\":[2,32],\"534\":[2,58],\"535\":[2,13],\"536\":[1,12],\"537\":[1],\"538\":[1,95],\"539\":[1,26],\"540\":[1,41],\"541\":[1,25],\"542\":[1,19],\"543\":[3],\"544\":[1,6],\"545\":[2,58],\"546\":[2,41],\"547\":[2,71],\"548\":[2,27],\"549\":[2,33],\"550\":[3,30],\"551\":[2],\"552\":[1,44],\"553\":[1,66],\"554\":[1,32],\"555\":[4],\"556\":[1,11],\"557\":[1,109],\"558\":[1,9],\"559\":[2],\"560\":[3,89],\"561\":[4,28],\"562\":[1,13],\"563\":[null,null,1],\"564\":[2,26],\"565\":[2,63],\"566\":[1,36],\"567\":[1],\"568\":[1,51],\"569\":[1,60],\"570\":[1,22],\"571\":[1,6],\"572\":[4,19],\"573\":[2,44],\"574\":[3,41],\"575\":[3,76],\"576\":[1,100],\"577\":[1,25],\"578\":[1,110],\"579\":[1,21],\"580\":[6,42],\"581\":[1,10],\"582\":[1,25],\"583\":[2,131],\"584\":[1,128],\"585\":[3,22],\"586\":[1,106],\"587\":[1,162],\"588\":[1,7],\"589\":[1,14],\"590\":[1,46],\"591\":[1,59],\"592\":[1,4],\"593\":[1,20],\"594\":[1,83],\"595\":[1,2],\"596\":[1,9],\"597\":[1,6],\"598\":[1,39],\"599\":[null,null,1],\"600\":[5],\"601\":[1,23],\"602\":[1,37],\"603\":[1,13],\"604\":[2,37],\"605\":[1,2],\"606\":[3,20],\"607\":[1,13],\"608\":[1,14],\"609\":[1,37],\"610\":[1,10],\"611\":[null,null,1],\"612\":[3,151],\"613\":[3],\"614\":[1,54],\"615\":[3,68],\"616\":[2,7],\"617\":[2,44],\"618\":[1,55],\"619\":[1,80],\"620\":[1,19],\"621\":[2,58],\"622\":[2,53],\"623\":[3,26],\"624\":[1,13],\"625\":[1,62],\"626\":[3,20],\"627\":[1,17],\"628\":[3,3],\"629\":[1,165],\"630\":[2,99],\"631\":[1,96],\"632\":[1,6],\"633\":[10,14],\"634\":[1,25],\"635\":[4,6],\"636\":[1,74],\"637\":[4,20],\"638\":[1,90],\"639\":[1],\"640\":[1,56],\"641\":[1,16],\"642\":[1,8],\"643\":[1,10],\"644\":[1,4],\"645\":[1,87],\"646\":[2,53],\"647\":[1,8],\"648\":[3],\"649\":[1,14],\"650\":[1,9],\"651\":[2,34],\"652\":[2,29],\"653\":[1,13],\"654\":[1,14],\"655\":[1,26],\"656\":[1,44],\"657\":[1,10],\"658\":[1,21],\"659\":[1,29],\"660\":[1,3],\"661\":[4],\"662\":[1,77],\"663\":[1,52],\"664\":[1,23],\"665\":[3,42],\"666\":[1,66],\"667\":[1,12],\"668\":[2,12],\"669\":[2,5],\"670\":[4,56],\"671\":[5,36],\"672\":[4,34],\"673\":[3,33],\"674\":[2,31],\"675\":[1,30],\"676\":[6],\"677\":[3,5],\"678\":[1,8],\"679\":[2,14],\"680\":[3,11],\"681\":[1],\"682\":[3,12],\"683\":[1,8],\"684\":[2,23],\"685\":[1,8],\"686\":[1,36],\"687\":[1],\"688\":[1,11],\"689\":[1,34],\"690\":[2,31],\"691\":[2,38],\"692\":[1,2],\"693\":[2,7],\"694\":[1,22],\"695\":[1,32],\"696\":[2,16],\"697\":[1,26],\"698\":[1,9],\"699\":[1,14],\"700\":[3,21],\"701\":[1,39],\"702\":[1,16],\"703\":[1,23],\"704\":[1,10],\"705\":[null,null,1],\"706\":[2],\"707\":[1,11],\"708\":[1,90],\"709\":[1,11],\"710\":[2,52],\"711\":[1,86],\"712\":[1,98],\"713\":[1,18],\"714\":[null,null,1],\"715\":[5],\"716\":[1,19],\"717\":[1],\"718\":[2,40],\"719\":[2,53],\"720\":[1,1],\"721\":[1,9],\"722\":[2,14],\"723\":[1,46],\"724\":[1,25],\"725\":[1,9],\"726\":[1,67],\"727\":[1,9],\"728\":[1,52],\"729\":[4],\"730\":[1,17],\"731\":[1,146],\"732\":[1,24],\"733\":[1,5],\"734\":[6],\"735\":[1,27],\"736\":[1,28],\"737\":[1,133],\"738\":[1,5],\"739\":[3],\"740\":[1,117],\"741\":[1],\"742\":[4,115],\"743\":[1],\"744\":[1,44],\"745\":[1,164],\"746\":[1,2],\"747\":[2,76],\"748\":[2,252],\"749\":[2,86],\"750\":[1,38],\"751\":[1,94],\"752\":[3,196],\"753\":[1,448],\"754\":[2,116],\"755\":[1,6],\"756\":[1,93],\"757\":[3,250],\"758\":[2,76],\"759\":[4,415],\"760\":[1,84],\"761\":[1,432],\"762\":[1,30],\"763\":[2,149],\"764\":[7],\"765\":[6,49],\"766\":[3,66],\"767\":[2,130],\"768\":[2,107],\"769\":[4,59],\"770\":[4,63],\"771\":[4,111],\"772\":[2,19],\"773\":[1,10],\"774\":[null,null,1],\"775\":[2,13],\"776\":[1,10],\"777\":[1,11],\"778\":[1,11],\"779\":[1,20],\"780\":[5,5],\"781\":[1,105],\"782\":[1,27],\"783\":[2,134],\"784\":[2,141],\"785\":[2,49],\"786\":[2,35],\"787\":[2,22],\"788\":[1,5],\"789\":[null,null,1],\"790\":[9],\"791\":[1,47],\"792\":[1],\"793\":[2,18],\"794\":[3,62],\"795\":[1,11],\"796\":[1,9],\"797\":[null,null,1],\"798\":[1,42],\"799\":[5,7],\"800\":[3,19],\"801\":[2,10],\"802\":[1,25],\"803\":[2,19],\"804\":[2],\"805\":[2,45],\"806\":[2,30],\"807\":[2,25],\"808\":[3,25],\"809\":[1,35],\"810\":[2,26],\"811\":[1,49],\"812\":[2,30],\"813\":[2,71],\"814\":[4,16],\"815\":[1],\"816\":[1,57],\"817\":[1,39],\"818\":[4,13],\"819\":[5,34],\"820\":[3],\"821\":[3,20],\"822\":[2,63],\"823\":[2,47],\"824\":[1,16],\"825\":[3],\"826\":[1,14],\"827\":[1,52],\"828\":[1,21],\"829\":[1,2],\"830\":[null,null,1],\"831\":[2],\"832\":[1,16],\"833\":[1,28],\"834\":[1,27],\"835\":[1,3],\"836\":[1,59],\"837\":[1,23],\"838\":[1,4],\"839\":[null,null,1],\"840\":[2],\"841\":[1,14],\"842\":[1,18],\"843\":[1,5],\"844\":[1,8],\"845\":[1,2],\"846\":[1,9],\"847\":[1,62],\"848\":[1,62],\"849\":[2,25],\"850\":[1,94],\"851\":[1,6],\"852\":[1,2],\"853\":[null,null,1],\"854\":[2],\"855\":[1,4],\"856\":[1,12],\"857\":[1,38],\"858\":[1,39],\"859\":[1,58],\"860\":[1,26],\"861\":[1],\"862\":[1,9],\"863\":[1,10],\"864\":[1,3],\"865\":[1,9],\"866\":[null,null,1],\"867\":[2],\"868\":[1,21],\"869\":[1,24],\"870\":[1,12],\"871\":[1,5],\"872\":[1,6],\"873\":[1,6],\"874\":[1,1],\"875\":[1,16],\"876\":[null,null,1],\"877\":[3],\"878\":[1,7],\"879\":[1,21],\"880\":[1,57],\"881\":[1,18],\"882\":[1,3],\"883\":[1,8],\"884\":[null,null,1],\"885\":[2],\"886\":[1,3],\"887\":[1,8],\"888\":[1,20],\"889\":[1,5],\"890\":[1,86],\"891\":[1,3],\"892\":[1,3],\"893\":[null,null,1],\"894\":[2],\"895\":[1,9],\"896\":[1,64],\"897\":[1,64],\"898\":[1,50],\"899\":[1,2],\"900\":[null,null,1],\"901\":[2],\"902\":[1,21],\"903\":[1,30],\"904\":[1,64],\"905\":[1,7],\"906\":[1,2],\"907\":[1,5],\"908\":[null,null,1],\"909\":[2],\"910\":[1,7],\"911\":[1,37],\"912\":[1,67],\"913\":[1,96],\"914\":[1,2],\"915\":[1,2],\"916\":[null,null,1],\"917\":[2],\"918\":[1,16],\"919\":[1,38],\"920\":[1,14],\"921\":[1,86],\"922\":[1,2],\"923\":[1,7],\"924\":[1,12],\"925\":[1,13],\"926\":[1,11],\"927\":[1,64],\"928\":[1,7],\"929\":[1,3],\"930\":[null,null,1],\"931\":[2,11],\"932\":[1,3],\"933\":[1]},\"averageFieldLength\":[1.7768533894727072,54.37617184930276,0.09490780496119527],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"A developer. A man who love the world.\",\"Keep touch with me:\",\"Languages and Tools:\",\"学习的过程需要不断的探索、累积，更需要有条理的总结，我会把平时学习的心得体会、经验总结放到这里，主要是为了自己能够在学习的过程中有计划的总结学习到的知识，同时也方便之后查阅。\",\"我的邮箱是：aml4aWFveW9uZzE5OTVAZ21haWwuY29tCg==\",\"在我学习的过程中，互联网给了我莫大的支持与帮助。但不可否认的是，中文互联网存在着很多“相互借鉴”的资料，其中不可避免有很多未经查实的资料，其危害不小。\",\"今天就因为这种问题，白白耽搁了一晚上的时间。而这还是我已经发现的有明显谬论的地方，其他没有发现的更是不知几多。\",\"很遗憾在此之前，我自己也写过不少这样欠缺思考，直接“拿来主义”的文章，真是惭愧。今日起，技术类文章务必自己理解了，理顺了才写，务必每个观点都有对应的参考依据。宁可少写，也不能乱写瞎写。之前的文章，也要慢慢的修正。\",\"哎呀，一不小心立了个 Flag，千万不要打脸 (￣ ε(#￣)☆╰╮(￣ ▽ ￣///)。\",\"今后写博客，尽量避免写一些口水文，基础教程之类的文章，这类文章在我的学习过程中对我有很大的帮助，但网络上已经有很多步骤更加具体，内容更加完善的文章，实在没有必要再花费时间在这里了。日后逐渐深入源码，探究平常用法背后的实现原理，希望以此记录自己提升技术能力的过程。\",\"如你所见，这是一个托管在 GitHub 上面的博客，基于vuepress 2.0的hope主题，感谢所有为以上提到的项目有过付出的人，没有他们的话这个小站不会存在。\",\"在此之前，本博客使用了大约五六年的主题是基于Hexo的NexT主题，在我对编程尚且懵懂之际，为我提供了一个尚且不错的博客，感谢以上各位朋友。\",\"选好方向\",\"广泛阅读\",\"深入思考\",\"及时总结\",\"定时输出\"]},\"1\":{\"h\":\"Android 开发常用设置\"},\"2\":{\"h\":\"Android Studio\",\"t\":[\"国内较快的仓库：\",\"maven {url'http://maven.aliyun.com/nexus/content/groups/public/'}\",\"RecyclerView 添加依赖 注意 RecyclerView 的版本号要和当前工程中其他 android.support 包版本保持一致，否则虽然导入了对应的包，但是仍然无法正常使用。\",\"compile 'com.android.support:recyclerview-v7:26+'\",\"设置： 自动添加依赖：insert imports on paste: None 自动删除无用依赖：Optimize imports on the fly\"]},\"3\":{\"h\":\"Linux\",\"t\":[\"设置 ndk 环境变量 /etc/profile\",\"#set ndk env NDKROOT=/home/jixiaoyong/AndroidDev/Sdk/ndk-bundle export PATH=NDKROOT:PATH\"]},\"4\":{\"h\":\"Android11 文件分区存储在图片读写的适配\"},\"5\":{\"h\":\"说明\",\"t\":[\"当 APP 目标版本是 Android 10（API 29）及以后时，由于 Android 引入了分区存储，APP 不能直接通过路径访问文件，访问外部存储空间中的媒体文件除了需要READ_EXTERNAL_STORAGE 或 WRITE_EXTERNAL_STORAGE 权限之外，需要通过其他 APP 分享的Uri读写文件，同理要给其余 APP 分享文件也许要通过FileProvider生成Uri并赋予对应的权限。\",\"本文以从相册中获取图片、请求系统裁剪并返回图片为例展示对应的适配方法。\"]},\"6\":{\"h\":\"实际操作\",\"t\":[\"1.从相册中获取图片\",\"从相册中获取到的图片Uri一般如：content://raw//storage/emulated/0/DCIM/Camera/IMG_20210531_183008.HEIC\",\"app 内部要读取其内容的话，可以通过context.getContentResolver().openInputStream(imageUri)\",\"或者\",\"Cursor cursor = context.getContentResolver().query(uri, filePathColumn, null, null, null);//从系统表中查询指定 Uri 对应的照片 cursor.moveToFirst(); int columnIndex = cursor.getColumnIndex(filePathColumn[0]); if (columnIndex >= 0) { picturePath = cursor.getString(columnIndex); }\",\"等方式读取，操作该图片。\",\"2.将外部文件保存到本地并获取 Uri\",\"由于上述方式获取到的Uri只对本 APP 赋予了权限，要是希望将此图片分享给第三方 APP 进一步加工处理，则可能出现第三方 APP 没有读写权限而导致操作失败的情况，为了避免这种情况，可以将获取到的图片缓存到 APP 私有目录，并且重新生成Uri并赋予将要处理该图的第三方 APP 对应权限。\",\"将外部文件缓存本地的步骤参考第一步操作即可自行完成，主要讲解一下如何将对外分享的Uri赋予读写权限。\",\"下面这个方法在不同系统分别采用不同方式获取文件对应的Uri。\",\" public static Uri getUriForFile(Context context, File file) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) { return FileProvider.getUriForFile(context, \\\"com.your.app.packagename.fileprovider\\\", file); } else { return Uri.fromFile(file); } }\",\"其中com.your.app.packagename.fileprovider是FileProvider的authorities。\",\"要使用FileProvider可以参考定义 FileProvider操作，一般只需要修改authorities即可，同时如果是开发 Android 库，为了避免与主工程已有的FileProvider冲突，可以继承FileProvider类并修改下文中name字段。\",\"<manifest> ... <application> ... <provider android:name=\\\"androidx.core.content.FileProvider\\\" android:authorities=\\\"com.mydomain.fileprovider\\\" android:exported=\\\"false\\\" android:grantUriPermissions=\\\"true\\\"> <meta-data android:name=\\\"android.support.FILE_PROVIDER_PATHS\\\" android:resource=\\\"@xml/file_paths\\\" /> </provider> ... </application> </manifest>\",\"同时，为了定义此FileProvider可以使用的文件目录范围，可以在res/xml文件夹中新建file_paths.xml并做如下配置，也可参考官方文档或者Android N 7.0 FileProvider 兼容适配 原理解析：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <paths> <root-path name=\\\"camera_photos\\\" path=\\\"\\\" /> <external-files-path // 对应Context#getExternalFilesDir(String)获取的路径，一般为存储卡中Android/data/com.your.app.packagename/file下面的目录 name=\\\"external_files\\\" path=\\\".\\\" /> </paths>\",\"3.对外分享有权限的 Uri\",\"对于上述步骤获取到的图片 Uri 赋予权限有两种方式：\",\"第一种，通过Intent传递出去的imgUri，可以使用以下方式：\",\"intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION); intent.setDataAndType(imgUri, \\\"image/*\\\");\",\"但是这种只适用于主动分享出去的文件，在调用第三方 APP 裁剪的场景中，一般还需要一个outPutUri用于保存裁剪之后的图片，对于这种场景，可以查询可能会调用的 APP 并赋予其访问权限：\",\"if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) { List<ResolveInfo> resInfoList = context.getPackageManager() .queryIntentActivities(intent, PackageManager.MATCH_ALL); for (ResolveInfo resolveInfo : resInfoList) { String packageName = resolveInfo.activityInfo.packageName; contextWrap.getActivity().grantUriPermission(packageName, outPutUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION); } }\",\"这样不管是分享出去的原图，还是裁剪之后保存的图片都给第三方 APP 赋予了权限，保证其可以正常访问。\"]},\"7\":{\"h\":\"参考文献\",\"t\":[\"https://developer.android.google.cn/reference/androidx/core/content/FileProvider\",\"Android N 7.0 FileProvider 兼容适配 原理解析\"]},\"8\":{\"h\":\"Android AlarmManager 设置重复任务\",\"t\":[\"近期有一个实现定时启动 APP 提醒用户的需求，一番比较之后觉得用闹钟AlarmManager实现比较合适，本文是对此过程的梳理，属于比较基础性的内容。\"]},\"9\":{\"h\":\"需求\",\"t\":[\"需求需要实现\",\"\\\"每天在指定时间范围内，循环提示用户直到满足指定的条件\\\"\",\"拆分需求：\",\"每天都要提醒\",\"在时间范围内一直循环\",\"满足条件后结束当天循环\"]},\"10\":{\"h\":\"方案选择\",\"t\":[\"Android 中可以用到的循环任务实现有Handler、Timer、ScheduledExecutorService（这三个可以看这里），还有最近的WorkManager和我们要用到的AlarmManager。\",\"WorkManager offers a backwards compatible (API level 14+) API leveraging JobScheduler API (API level 23+) and above to help optimize battery life and batch jobs and a combination of AlarmManager & BroadcastReceiver on lower devices.\",\"这几个方案中，前三者都需要 APP 在前台运行，WorkManager和AlarmManager则在 APP 退出之后也可以使用，甚至在低版本上WorkManager底层也是通过AlarmManager实现的。\",\"WorkManager主要倾向于保证任务在 APP 退出，甚至设备关机重启等情况下也会被执行，虽然也提供循环任务的，但是无法确保在精确的时间得到执行，且最小间隔 15min。\",\"相比之下，AlarmManager可以确保任务在指定时间（精确的时间）得到执行，并且对于循环的间隔也更加灵活。\",\"Android 推荐选择方案\"]},\"11\":{\"h\":\"分析\",\"t\":[\"据 Android 官网介绍，闹钟主要用于在应用程序生命周期之外进行定时操作。\",\"闹钟具有以下特征：\",\"它们可让您按设定的时间和/或间隔触发 intent。\",\"您可以将它们与广播接收器结合使用，以启动服务以及执行其他操作。\",\"它们在应用外部运行，因此即使应用未运行，或设备本身处于休眠状态，您也可以使用它们来触发事件或操作。\",\"它们可以帮助您最大限度地降低应用的资源要求。您可以安排定期执行操作，而无需依赖定时器或持续运行后台服务。\",\"需要注意的是，Android 为了避免重复闹钟可能带来的性能消耗，推荐使用不是很精确的setInexactRepeating()，而不是精确的setRepeating()，并且在API19+之后的所有的重复闹钟都不是精确的，如果需要精确闹钟需要使用 setWindow(int, long, long, android.app.PendingIntent) 或setExact(int, long, android.app.PendingIntent)。重复闹钟具有以下特征：\",\"闹钟类型。要了解详情，请参阅选择闹钟类型。\",\"触发时间。如果您指定的触发时间为过去的时间，则闹钟会立即触发。\",\"闹钟的间隔。例如，每天一次、每小时一次、每 5 分钟一次，等等。\",\"闹钟触发的待定 intent。当您设置了使用同一待定 intent 的第二个闹钟时，它会替换原始闹钟。\"]},\"12\":{\"h\":\"闹钟类型\",\"t\":[\"闹钟有两个类型：\",\"距离系统启动后的时间，主要用于“间隔多久重复一次”这样的需求\",\"ELAPSED_REALTIME 距离开机时间多久后启用闹钟，如果系统在休眠中则不会唤醒\",\"ELAPSED_REALTIME_WAKEUP 在系统休眠时也会唤醒系统\",\"精确的时间 UTC，主要用于“在当天下午 8 点整开始”等这样的需求\",\"RTC 在指定的时间触发闹钟，不会唤醒机器\",\"RTC_WAKEUP 在指定时间触发闹钟，并且唤醒设备\"]},\"13\":{\"h\":\"触发时间\",\"t\":[\"闹钟触发的时间，分为从设备上次启动时间和精准时间两种。\",\"如果触发的时间早于当前系统时间的话，系统会根据过去的时间和重复间隔选择一个合适的时间来触发（有几分钟内的误差）。\",\"从实际运行来看，使用ELAPSED_*的基本上会立即（几秒钟）触发该闹钟，并且每次循环间隔有几毫秒的误差。\",\"使用RTC_*则会在刚开始的两三次出现间隔时间小于指定时间的情况，后期稳定：\",\"设置的闹钟间隔为 10 分钟，闹钟开始时间早于当前时间，唤醒结果如下\",\"alarmMgr.setRepeating(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, 10 * 60 * 1000, alarmIntent ) 2019-12-06 14:13:46.696 2019-12-06 14:16:26.634 2019-12-06 14:24:26.765 2019-12-06 14:34:26.579 2019-12-06 14:43:46.785\"]},\"14\":{\"h\":\"间隔时间\",\"t\":[\"间隔时间有两种：\",\"AlarmManager interval 如果设置的是setInexactRepeating()，则需要设置AlarmManager 指定的几种间隔时间。\",\"任意时间 setRepeating()方法可以使用任意时间\"]},\"15\":{\"h\":\"待定的 intent\",\"t\":[\"当您设置了使用同一待定 intent 的第二个闹钟时，它会替换原始闹钟\",\"待定的Intent是一个PendingIntent，可以用来打开Service，Activity，Broadcast等等。\",\"private fun getPendingIntent( context: Context, action: String, requestCode: Int ): PendingIntent { return PendingIntent.getBroadcast(context, requestCode, Intent(action), 0) }\",\"注意这里的requestCode，当不需要该闹钟时可以根据这个来取消。\"]},\"16\":{\"h\":\"取消闹钟\",\"t\":[\"alarmManager.cancel(getPendingIntent(context,ACTION,RequestCode))\"]},\"17\":{\"h\":\"在重启时恢复闹钟\",\"t\":[\"由于闹钟会在设备关机的时候被取消，所以需要监听设备开机广播（android.intent.action.BOOT_COMPLETED），并且恢复闹钟。\"]},\"18\":{\"h\":\"具体实现\"},\"19\":{\"h\":\"设置一个每天指定时间循环的闹钟\",\"t\":[\"private fun setupDailyAlarmClock( context: Context,startTime: Pair<Int, Int>) { val alarmMgr = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager val alarmIntent = getPendingIntent( context, BROADCAST_ACTION_REPEAT, RequestCode.START_REPEAT_INVENTORY ) // Set the alarm to start at xx:xx val calendar: Calendar = Calendar.getInstance().apply { timeInMillis = System.currentTimeMillis() set(Calendar.HOUR_OF_DAY, startTime.first) set(Calendar.MINUTE, startTime.second) set(Calendar.SECOND, 0) } // 1 day alarmMgr.setRepeating( AlarmManager.RTC_WAKEUP, calendar.timeInMillis, AlarmManager.INTERVAL_DAY, alarmIntent ) }\",\"在每天指定时间到了之后，开始设置一个间隔 10 分钟唤醒一次的闹钟，直到超时或者满足指定的条件后取消该闹钟。\"]},\"20\":{\"h\":\"监听每日循环的闹钟\",\"t\":[\"监听其发送的广播BROADCAST_ACTION_REPEAT。\",\"启用当日循环闹钟：\",\" fun setupRepeatAlarmClock(context: Context) { val startTime = SharePreferencesUtils.sharedPreferences .getString(KEY_STARTT_TIME,DEF_INVENTORY_TIME)?.toFormatTime() ?: return val alarmMgr = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager val alarmIntent = getPendingIntent( context, BROADCAST_ACTION_START, RequestCode.START_INVENTORY ) val tenMinutes = DEF_INVENTORY_DURATION * 60 * 1000 alarmMgr.setRepeating( AlarmManager.ELAPSED_REALTIME_WAKEUP,//从开机后多久 SystemClock.elapsedRealtime(),//当前自开机完后的时间 tenMinutes,//每十分钟循环一次 alarmIntent ) }\",\"在广播接收器中收听到BROADCAST_ACTION_START后去开启任务\"]},\"21\":{\"h\":\"条件满足后关闭当日循环闹钟\",\"t\":[\"在收到BROADCAST_ACTION_START后检测到已经超时或其他满足取消条件的情况，则取消任务。\",\"或者可以再订一个结束时间的闹钟，到时间后取消当日循环闹钟。\",\"val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager alarmManager.cancel(pIntent)\",\"注意这里的pIntent需要与设置闹钟时的PendingIntent一致 (满足Intent.filterEquals()的条件)。\"]},\"22\":{\"h\":\"参考资料\",\"t\":[\"Android 定时任务及循环任务基础大集合\",\"安排重复闹钟 Android 官网\"]},\"23\":{\"h\":\"Android 事件分发\",\"t\":[\"Android 事件分发，指手指点击屏幕后，从 Activity、ViewGroup 到 View 的一系列过程。\"]},\"24\":{\"h\":\"简介\",\"t\":[\"Android 系统的窗口机制如下图：\",\"Activity 内有一个 Window 对象，其实现类是 PhoneWindow；\",\"DecorView 为顶层 View，DecorView 是一个 FrameLayout，其中有 TitleView 和 ContentView；\",\"Android 系统窗口管理机制\",\"TitleView 为标题栏，ContentView 就是平时在 Activity 的 onCreate() 方法中设置的视图，TitleView 可以用this.requestWindowFeature(Window.FEATURE_NO_TITLE);隐藏掉，但是必须注意要在 setContentView() 之前，原因如下所示：\",\"public void setContentView(View view) { getWindow().setContentView(view); initWindowDecorActionBar(); }\"]},\"25\":{\"h\":\"点击事件 Activity --> ViewGroup\",\"t\":[\"点击事件发生后，首先被调用的是Activity.dispatchTouchEvent()\",\"public boolean dispatchTouchEvent(MotionEvent ev) { if (ev.getAction() == MotionEvent.ACTION_DOWN) { onUserInteraction(); } if (getWindow().superDispatchTouchEvent(ev)) { return true; } return onTouchEvent(ev); }\",\"可以看到，其内部先调用了getWindow().superDispatchTouchEvent(ev)这个方法，getWindow() 返回的 mWindow 是 PhoneWindow 的对象。\",\"mWindow = new PhoneWindow(this, window, activityConfigCallback);\",\"再看看 PhoneWindow.superDispatchTouchEvent() 方法，显然又调用了 DecorView 的 superDispatchTouchEvent() 方法，在该方法中，调用了 FrameLayout.dispatchKeyEvent(event)，此时点击事件从 Activity 转到了 ViewGroup 中。\",\"//PhoneWindow @Override public boolean superDispatchKeyEvent(KeyEvent event) { return mDecor.superDispatchKeyEvent(event); } //DecorView extends FrameLayout public boolean superDispatchKeyEvent(KeyEvent event) { // Give priority to closing action modes if applicable. if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) { final int action = event.getAction(); // Back cancels action modes first. if (mPrimaryActionMode != null) { if (action == KeyEvent.ACTION_UP) { mPrimaryActionMode.finish(); } return true; } } return super.dispatchKeyEvent(event); }\"]},\"26\":{\"h\":\"点击事件 ViewGroup --> View\",\"t\":[\"ViewGroup 与事件分发的方法有三个：\",\"dispatchTouchEvent() 分发事件，每次都会被调用\",\"onInterceptTouchEvent() 拦截事件，如果当前 ViewGroup 已经决定拦截事件，那么不会再调用\",\"onTouchEvent() 处理点击事件，如果设置了mOnTouchListener的话，则不会回调本方法\",\"这三个主要方法关系如下（伪代码，来自《Android 开发艺术探索》）：\",\"//每次点击事件回调该方法 override fun dispatchTouchEvent(event: MotionEvent): Boolean { var result = false if (onInterceptTouchEvent(event)) {//viewGroup 会回调该方法，确认是否拦截点击事件 result = onTouchEvent(event)//对点击事件进行处理 } else { result = child.dispatchTouchEvent(event) } } return result }\",\"当 ViewGroup.dispatchTouchEvent() 被调用后，会通过一系列条件判断是由 ViewGroup 拦截该事件，还是由子 View 消耗该事件。\",\"主要流程分为两部分\",\"1.检查是否需要拦截\",\"// http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/java/android/view/ViewGroup.java line2567-2582 public boolean dispatchTouchEvent(MotionEvent ev) { ... // Check for interception. final boolean intercepted; if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) { final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0; if (!disallowIntercept) { intercepted = onInterceptTouchEvent(ev);//在这里调用了 onInterceptTouchEvent() 方法，如果已经拦截了 ev.setAction(action); // restore action in case it was changed } else { intercepted = false; } } else { // There are no touch targets and this action is not an initial down // so this view group continues to intercept touches. intercepted = true; } ... } public boolean onInterceptTouchEvent(MotionEvent ev) { if (ev.isFromSource(InputDevice.SOURCE_MOUSE) && ev.getAction() == MotionEvent.ACTION_DOWN && ev.isButtonPressed(MotionEvent.BUTTON_PRIMARY) && isOnScrollbarThumb(ev.getX(), ev.getY())) { return true; } return false; }\",\"每次 ACTION_DOWN 事件都需要调用onInterceptTouchEvent()方法判断是否需要拦截\",\"其他 MotionEvent 事件，如果有能处理点击事件的子 View（mFirstTouchTarget != null）且disallowIntercept为 false 也需要调用onInterceptTouchEvent()方法判断是否需要拦截，否则不需要拦截\",\"其余情况都需要拦截（没有可以处理点击事件的子 View，并且不是 ACTION_DOWN 事件）\",\"如果 ViewGroup 判断要拦截该事件，则会调用dispatchTransformedTouchEvent()（后面会再讲到）通过他调用继承自 View 的dispatchTouchEvent(MotionEvent event)方法：\",\" // Dispatch to touch targets. if (mFirstTouchTarget == null) { // No touch targets so treat this as an ordinary view. handled = dispatchTransformedTouchEvent(ev, canceled, null, TouchTarget.ALL_POINTER_IDS); } else { ... }\",\"否则就需要遍历其子 View\",\"2.遍历 ViewGroup 的所有子 View，寻找一个可以处理点击事件的子 View\",\"dispatchTransformedTouchEvent() 调用了子 View 的dispatchTouchEvent()\",\"addTouchTarget() 对mFirstTouchTarget 进行更新\",\"public boolean dispatchTouchEvent(MotionEvent ev) { // 1. Check for interception.判断是否需要拦截 final boolean intercepted; if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) {//mFirstTouchTarget 表示能处理点击事件的子 View //FLAG_DISALLOW_INTERCEPT 每次 ACTION_DOWN 都会被重置 final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0; if (!disallowIntercept) { intercepted = onInterceptTouchEvent(ev);//调用拦截方法 ev.setAction(action); // restore action in case it was changed } else { intercepted = false; } } else { // There are no touch targets and this action is not an initial down // so this view group continues to intercept touches. intercepted = true; } //2.遍历子 View，寻找可以处理点击事件的子 View if (!canceled && !intercepted) { for (int i = childrenCount - 1; i >= 0; i--) { if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) { // Child wants to receive touch within its bounds. ... newTouchTarget = addTouchTarget(child, idBitsToAssign); alreadyDispatchedToNewTouchTarget = true; break; } } } }\",\"dispatchTransformedTouchEvent() 方法如下，由于child != null其内部调用child.dispatchTouchEvent(event)方法，如此循环直到子 View 是一个 View（单就 ViewGroup 和 View 而论）即将点击事件从 ViewGroup 分发到了 View。\",\"private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel, View child, int desiredPointerIdBits) { ... if (child == null) { handled = super.dispatchTouchEvent(event); } else { handled = child.dispatchTouchEvent(event); } }\",\"如果有子 View 可以处理点击事件，在addTouchTarget()方法内部对mFirstTouchTarget进行更新\",\"private TouchTarget addTouchTarget(@NonNull View child, int pointerIdBits) { final TouchTarget target = TouchTarget.obtain(child, pointerIdBits); target.next = mFirstTouchTarget; mFirstTouchTarget = target; return target; }\"]},\"27\":{\"h\":\"点击事件 View 内部\",\"t\":[\"View 的点击事件分发主要涉及到两个方法：\",\"dispatchTouchEvent()\",\"onTouchEvent()\",\"其点击事件分发用伪代码表示如下：\",\"public boolean dispatchTouchEvent(MotionEvent event) { if(mListenerInfo.mOnTouchListener.onTouch(this, event)){ return true; }else{ return onTouchEvent(event); } }\",\"可见 View 的 dispatchTouchEvent() 方法中，如果 View 注册了 OnTouchListener 则会先执行mOnTouchListener.onTouch()方法，如果该方法返回 false 才会执行onTouchEvent()。\",\"在看 onTouchEvent() 方法：\",\"如果 View 处于不可用状态下，也会消耗点击事件，只不过没有反应\",\"如果注册了 OnClickListener 会在 ACTION_UP 的时候调用mOnClickListener.onClick(this)\",\"public boolean onTouchEvent(MotionEvent event) { ... if(CLICKABLE&&LONG_CLICKABLE){//LONG_CLICKABLE 默认为 false，CLICKABLE、LONG_CLICKABLE 会在设置点击事件时被设置为 true switch (action) { case MotionEvent.ACTION_UP:{ ... performClick();//如果注册了 OnClickListener 则会调用其 onClick() 方法 } } } } public boolean performClick() { ... mListenerInfo.mOnClickListener.onClick(this); ... }\"]},\"28\":{\"h\":\"总结\",\"t\":[\"整个 Android 的时间分发始于 Activity，经过 PhoneWindow、DecorView 到达 ViewGroup，再逐层分发到 View 中。\",\"如果底层没有处理点击事件，则又一层层向上返回，直到最顶层消耗掉点击事件。\"]},\"29\":{\"h\":\"参考资料\",\"t\":[\"《Android 开发艺术探索》\",\"Android 源代码\"]},\"30\":{\"h\":\"Android 5.x 以下加载 MultiDex 白屏的处理优化\",\"t\":[\"当 APP 的 minSdkVersion 低于 Android 5 时，在方法数大于 65536 时，需要将 APP 打包为多个 DEX 文件，此时需要添加 MultiDex 依赖。\",\"官方方法如下：\",\"1.build.gradle\",\"android { defaultConfig { ... minSdkVersion 15 targetSdkVersion 28 multiDexEnabled true } ... } dependencies { compile 'com.android.support:multidex:1.0.3' }\",\"2.MyApplication\",\"方式❶： public class MyApplication extends MultiDexApplication { ... } 方式❷： public class MyApplication extends SomeOtherApplication { @Override protected void attachBaseContext(Context base) { super.attachBaseContext(base); MultiDex.install(this); } }\",\"此外，为了避免一些启动期间需要的任何类未在主 DEX 文件中提供而导致java.lang.NoClassDefFoundError，还需要告诉 AS 将这些类添加到主 DEX 文件中：\",\"3.build.gradle\",\"android { buildTypes { release { ❶ multiDexKeepFile file('multidex-config.txt') ❷ multiDexKeepProguard('multidex-config.pro') ... } } } //multidex-config.txt com/example/MyClass.class com/example/MyOtherClass.class //multidex-config.pro -keep class com.example.MyClass -keep class com.example.MyClassToo -keep class com.example.** { *; } // All classes in the com.example package\",\"但是在实际运行中，Android 4.x 的系统会在 APP 安装后第一次启动时，在MultiDex.install(this)方法中进行 DEX 文件合并优化等耗时操作（主线程），往往会持续数十秒以上，从而导致 APP 第一次启动时长时间白屏，十分影响体验。\",\"查阅相应的资料后大体有以下几种方案\",\"设置主 Activity 的背景为透明色\",\"这样当用户点击 APP 图标启动 APP 时，在主 Activity 启动之前看到的一直是桌面的样子而非白屏，但这只是一种障眼法，用户可能会以为系统卡顿，体验并不好。\",\"在 Application 中检测到是第一次启动的话，新开一个进程并在其中进行MultiDex.install(this)\",\"这种方法在主进程启动时，检测到尚未进行 MultidexOpt，则阻塞当前进程，新开一个进程，在其中加载一个 Activity，并在后台进程运行MultiDex.install(this)，当 MultidexOpt 完成后再关闭当前进程，返回主进程继续正常开启 APP。\",\"由于主进程被阻塞的同时成为了后台进程，所以也不会触发 ANR，此外子进程中的过渡 Activity 也只用到了基本的类，所以基本不用担心会触发java.lang.NoClassDefFoundError，而且过渡 Activity 可以展示进度、提示等用户友好的页面，相对来说体验也好了很多。\",\"但是这种方法从子进程返回主进程涉及到进程间通信，以及主进程的主 Activity 启动时生命周期会出现异常 (异常 (onCreate() -> onStart() -> onResume() -> onPause()->onResume())，仍然不是很好的解决方法。\",\"结合上述的分析后，可以看到这种问题的优化思路主要在于如何在避免java.lang.NoClassDefFoundError的同时，在后台可靠的通过MultiDex.install(this)执行 MultidexOpt 操作。\",\"通过以上方案 1 和 2 的结合，可以有一个比较完美的解决方案：\",\"方案 2 中在过渡 Activity 的后台线程进行 MultidexOpt 操作思路是正确的，但是不需要再单独开一个进程，我们完全可以将其当做主进程的第一个 Activity，等待 MultidexOpt 操作完成后再跳转到主 Activity 并 finish 掉本 Activity，这样主 Activity 的生命周期也不会受影响。\",\"这种情况下在部分低端机上，过渡 Activity 到主 Activity 跳转时会出现短暂黑屏，我们可以在过渡页面将 Activity 切换动画设置为渐变效果，并将主 Activity 背景设置为透明，待主 Activity 完全加载好后再将背景切换为普通模式。\",\"综上处理，我们的 Application 无需改动，甚至主 Activity 也可以不做改动，只需要添加一个过渡页面为启动 Activity，在其中后台进行 MultidexOpt，等 DEX 文件处理完毕后再加载主 Activity。对项目改动少并且逻辑较为简单。\",\"注：\",\"MultiDexOpt 即执行MultiDex.install(getApplication());方法；\",\"需要注意过渡 Activity 尽量少的使用类，并且要确保过渡 Activity 可能会调用到的类加载到了主 dex 文件中。\"]},\"31\":{\"h\":\"参考文档\",\"t\":[\"配置方法数超过 64K 的应用\",\"Android MultiDex 初次启动 APP 优化方案优雅的实现\",\"MultiDex 深入学习\"]},\"32\":{\"c\":[\"android\"]},\"33\":{\"h\":\"Android paint 绘制 text\",\"t\":[\"Android 中绘制文字的方法如下：\",\" /** * Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted * based on the Align setting in the paint. * * @param text The text to be drawn * @param x The x-coordinate of the origin of the text being drawn * @param y The y-coordinate of the baseline of the text being drawn * @param paint The paint used for the text (e.g. color, size, style) */ public void drawText(@NonNull String text, float x, float y, @NonNull Paint paint) { super.drawText(text, x, y, paint); }\",\"其中y是文字 baseline 的 y 坐标。\",\"下图表示Paint.FontMetrics中存储的文字的各种信息（来源：简书）：\",\"我们没法直接获取到baseline的坐标，所以只能从另外一个角度考虑： 因为在绘制文字时，文字的上下中心（即上图中的center）是确定的，我们只要计算出center到baseline之间的偏移量，就可以计算出baseline的y坐标。\",\"又根据这个文章：\",\"基线到中线的距离 = (descent + ascent) / 2 - descent = (ascent - descent) / 2\",\"(descent + ascent) / 2是中线 center 的值，而根据上图可知(descent + ascent) / 2 - descent的值就是 baseline 到 center 的距离。\",\"所以\",\"baseline的y坐标 = 文字的上下高度中心 + baseline的竖坐标和文字上下实际中心的偏移量 = center.y + 基线到中线的距离 = center.y + (ascent - descent) / 2\",\"这个center.y根据场景不同可以是一行的行中心（文字在一行居中显示），或者控件的上下中心（文字在控件上下居中）\",\"得出结论：\",\"由于 android 绘制文字时，并不是从文字高度的中间开始绘制，而是从 baseline 开始绘制。所以在绘制文字时，为了使文字高度居中（在所指定的空间内居中，比如某一行，就在该行限定的高度内居中显示；某一控件，则整个控件的上下中间显示），需要在计算出来的文字上下中心的 y 坐标基础上加上 baseline 到文字中线的偏移量。\",\"除此之外，也可以类比得到：baseline.y = center.y + (bottom.y - top.y) / 2 - bottom.y\",\"基线（baeseline），坡顶（ascenter）,坡底（descenter）\",\"上坡度（ascent），下坡度（descent）\",\"行间距（leading）：坡底到下一行坡顶的距离\",\"字体的高度＝上坡度＋下坡度＋行间距\",\"https://blog.csdn.net/hanyongbai/article/details/84418369\",\"参考文章：https://www.jianshu.com/p/c1575636741ehttps://blog.csdn.net/hanyongbai/article/details/84418369http://www.imooc.com/article/277490?block_id=tuijian_wzhttps://blog.csdn.net/xuxingxing002/article/details/50971606\"]},\"34\":{\"h\":\"AndroidService 相关知识\"},\"35\":{\"h\":\"启动一个 Service\",\"t\":[\"MyServices.java\",\"必须继承自 Service，或者如 IntentService 本身就是等其子类\",\"public class MyServices extends Service { @Nullable @Override public IBinder onBind(Intent intent) { Log.d(\\\"TAG\\\",\\\"onBind\\\"); return null; } @Override public void onCreate() { super.onCreate(); Log.d(\\\"TAG\\\",\\\"onCreate\\\"); } @Override public void onDestroy() { super.onDestroy(); Log.d(\\\"TAG\\\", \\\"onDestroy: \\\"); } }\",\"AndroidManifest.xml\",\"注册 MyServices\",\"<application> <service android:name=\\\".MyServices\\\" android:exported=\\\"true\\\"> <intent-filter> <action android:name=\\\"cf.android666.myservices\\\" /> </intent-filter> </service> </application>\",\"MainActivity.java\",\"在 java 中调用 Service，需要ServiceConnection类\",\"ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName name, IBinder service) { Log.d(TAG, \\\"onServiceConnected: 服务绑定\\\"); } @Override public void onServiceDisconnected(ComponentName name) { Log.d(TAG, \\\"onServiceDisconnected: 服务解绑\\\"); } }; Intent intent = new Intent(context, MyServices.class); bindService(intent, mConnection, Service.BIND_AUTO_CREATE);//绑定 Service //startService(intent); 启动 service unbindService(mConnection);//解绑 Service\",\"bindService()和startService()的区别在于：\",\"** bindService()将 service 和当前的 activity 绑定在一起，activity 销毁时，service 也会被销毁；\",\"** startService()则只是“启动”service，在此后 service 的活动和 activity 无关，并一直存活。\"]},\"36\":{\"h\":\"Service 具体分析\",\"t\":[\"Service 在 AndroidManifest.xml 中的属性：\",\"android:name=\\\".MyService\\\"//必须被指定 android:exported=true/false //是否能被其他应用隐式调用 //有 intent-filter 则默认为 true，否则默认 false；若手动指定为 false 则即使有 intent-filter 也无法隐式调用 android:process=\\\"remote\\\"/\\\":remote\\\"//前者在共有的进程中进行，后者在名字为{packageName}:remote 的私有进程中进行，其他进行不可访问；如果不设置该属性，则 service 在应用自己的进程里面运行\",\"Service 默认运行在创建他的线程中，要是进行耗时操作，最好在 service 中单独创建一个线程，这样子可以在子线程工作，在主线程中更新工作进度。\",\"Service 中的方法：\",\"//在初次创建服务时调用，并且直至服务死亡，只会被调用一次 void onCreate() //在绑定服务是才会被调用，必须实现该方法 IBinder onBind(Intent intent) //每一次通过 startService() 方法启动 Service 的时候都会被调用 int onStartCommand(Intent intent, int flags, int startId) //1.intent 启动时，启动组件传递过来的 Intent //2.flags 表示启动请求时是否有额外数据，可以是： // 0：无 // START_FLAG_REDELIVERY：表示该方法返回值为 START_REDELIVER_INTENT，在上个服务被杀死之前调用 stopSelf() 停止服务 // START_FLAG_RETRY：在 onStartCommand() 被调用后一直无返回值时，会尝试重新调用 onStartCommand() //3.当前服务 id\",\"其中onStartCommand()方法的返回值意义如下：\",\"START_STICKY :service 在内存不足被杀死后，内存空闲时系统会重新创建 service，一旦成功创建会回调onStartCommand()方法，此时 intent 是 null，除非是挂起的 intent 如 pendingintent，无限期运行\",\"START_NOT_STICKY：service 因内存不足被杀死，内存再次空闲系统也不会再重新创建服务，最安全\",\"START_REDELIVER_INTENT：service 因内存不足被杀死，会重建服务并传递给最后一个 intent（最后一次调用startService() 时的 intent），用于连续作业，如下载等\"]},\"37\":{\"h\":\"Service 绑定服务的三种方式\"},\"38\":{\"h\":\"1.拓展 Binder 类\",\"t\":[\"要求客户端和服务在同一应用的同一进程内。客户端通过其访问 service 中的公共方法。\",\"步骤如下：\",\"创建 BindService 服务端，在类中创建一个实现了 IBinder 接口的实力对象并提供公共方法给客户端使用\",\"在 onBind() 回调方法返回此 Binder 实例\",\"在客户端的 onServiceConnected() 方法接收 Binder，使用提供的方法绑定服务\",\"//service 服务端 public class LocalService extends Service{ LocalService mService; private LocalBinder binder = new LocalBinder(); ... public IBinder onBind(Intent intent){ return binder; } public void doSomeThing(){ //服务中公共方法，可以被客户端通过 IBInder 获取实例调用 } public class LocalBinder extends Binder{ LocalService getService(){ return LocalService.this; } } } //客户端 public class BindActivity extends Activity{ protected void onCreate(...){ ServiceConnection conn = new ServiceConnection(){ //绑定服务时被调用，实现客户端和服务端交互（IBinder） public void onServiceConnected(ComponentName name, IBinder service){ LocalService.LocalBinder binder = (LocalService.LocalBinder)service;//获取服务端 IBinder mService = binder.getService();//获取服务实例，以调用服务的公共方法 } //取消绑定时回调，多数时候是 service 被意外销毁，如内存不足 //当客户端取消绑定时，系统“绝对不会”调用该方法。 public void onServiceDisconnected(ComponentName name){ mService = null; } }; //创建绑定对象 Intent intent = new Intent(this,LocalService.class); //绑定服务 //参数 3 flags 则是指定绑定时是否自动创建 Service。0 代表不自动创建、BIND_AUTO_CREATE 则代表自动创建 bindService(intent,conn,Service.BIND_AUTO_CREATE); //调用服务中的方法，最好先判断是否为 null mService.doSomeThing(); //解除绑定 unbindService(conn); } }\"]},\"39\":{\"h\":\"2.Messenger\",\"t\":[\"service 与不同进程通信（IPC） 。\",\"步骤如下：\",\"Service 实现一个 Handler，接收客户端每个调用的回调\",\"用 Handler 创建 Messenger 对象\",\"用 Messenger 创建 IBinder 对象，并通过 onBind() 返回客户端\",\"客户端使用 IBinder 实例化 Messenger，用其将 Message 对象发送给 Service\",\"Service 在 Handler 接收并处理 Message\",\"//Service public class MessageService extends Service{ public final static int MSG_WHAT = 1; //创建 Handler 接收、处理客户端 msg class IncomingHanler extends Handler{ public void handleMessage(Message msg){ //do sth with msg... } } Messenger messenger = new Messenger(new IncomingHanlder()); public IBinder onBind(Intent intent){ return messenger.getBinder(); } } //客户端 //onCreate() 方法中： mConnection = new ServiceConnection(){ public void onServiceConnected(ComponentName className, IBinder service){ Messenger mService = new Messenger(service); } }; //给服务发消息 Message msg = Message.obtain(null,MessengerService.MSG_WHAT,0,0); mService.send(msg);\",\"注意 service 要在不同的进程中：\",\"AndroidMinafast.xml <service android:name=\\\".messenger.MessengerService\\\" android:process=\\\":remote\\\" />\",\"服务与客户端双向通信\",\"服务端，修改 IncomingHandler，回复客户端消息\",\"class IncomingHandler extends Handler{ public void handleMessage(Message msg){ //回复消息 Messenger client = msg.replyTo; Message replyMsg = Message.obtain(null,MessengerService.MSG_WHAT); Bundle bundle = new Bundle(); bundle.putString(\\\"key\\\",\\\"value\\\"); replyMsg.setData(bundle); try{ client.send(replyMsg); }catch(){} } }\",\"客户端，增加 Messenger 和 Handler 处理服务端回复\",\"private static class RecyclerReplyMsgHandler extends Hanlder{ public void handleMessage(Message msg){ //接收服务端返回的 msg //do sth ... } } private Messenger mRecevierReplyMsg = new Messenger(new RecyclerReplyMsgHandler());\",\"此外，在发送消息是需要将接收服务端回复的 Messenger 通过 Message 的 replyTo 传递给服务端\",\"//create msg... msg.replyTo = mRecevierReplyMsg; //send msg...\"]},\"40\":{\"h\":\"3.AIDL\",\"t\":[\"一般不会使用，具体使用可以参考这篇文章\"]},\"41\":{\"h\":\"绑定服务时的注意事项\",\"t\":[\"多个客户端可连接一个服务端，只有第一个客户端绑定时才会调用服务onBind()方法来检索 IBinder，此后无需调用就可将同一个 IBinder 传递给其他客户端\",\"bindService() 绑定服务是异步进行的\",\"一般在 activity 可见生命周期内绑定 - 取消服务，不要在onResume()、onPause()期间执行绑定/解绑\"]},\"42\":{\"h\":\"Service 绑定和启动转换\",\"t\":[\"顺序\",\"结果\",\"先绑定后启动 service\",\"启动 service\",\"先启动后绑定 service\",\"会绑定宿主，但是宿主死后仍按照启动 service 方式存活\"]},\"43\":{\"h\":\"前台服务和通知\",\"t\":[\"startForeground(int id, Notification notification) 该方法的作用是把当前服务设置为前台服务，其中 id 参数代表唯一标识通知的整型数，需要注意的是提供给 startForeground() 的整型 ID 不得为 0，而 notification 是一个状态栏的通知。\",\"stopForeground(boolean removeNotification) 该方法是用来从前台删除服务，此方法传入一个布尔值，指示是否也删除状态栏通知，true 为删除。注意该方法并不会停止服务。但是，如果在服务正在前台运行时将其停止，则通知也会被删除。\",\"文章参考：\",\"关于 Android Service 真正的完全详解，你需要知道的一切 - CSDN 博客\"]},\"44\":{\"h\":\"Android 异步消息机制 Handler、Message、Looper\",\"t\":[\"此文为鸿洋博客阅读笔记，配合原文食用口味更佳。\",\"Android 异步消息处理机制 让你深入理解 Looper、Handler、Message 三者关系 - CSDN 博客\"]},\"45\":{\"h\":\"导图\",\"t\":[\"20200429160005\"]},\"46\":{\"h\":\"过程分析\"},\"47\":{\"h\":\"Looper\"},\"48\":{\"h\":\"\",\"t\":[\"Looper.perpare()方法创建Looper对象（同时创建MessageQueue对象），并与当前线程关联保存在sThreadLocal中。\",\"public static final void prepare() { if (sThreadLocal.get() != null) { throw new RuntimeException(\\\"Only one Looper may be created per thread\\\"); } sThreadLocal.set(new Looper(true)); } private Looper(boolean quitAllowed) { mQueue = new MessageQueue(quitAllowed); mRun = true; mThread = Thread.currentThread(); }\"]},\"49\":{\"h\":\"\",\"t\":[\"Looper.loop()方法获取保存的Looper对象并由此获取到MessageQueue对象。\",\"通过for循环，不停的通过mQueue获取到msg，并调用msg.target.dispatchMessage(msg)执行 msg 对应的处理方法。\",\"最后通过msg.recycle()回收使用完的 msg。\",\"public static void loop() { final Looper me = myLooper(); ... final MessageQueue queue = me.mQueue; ... for (;;) { Message msg = queue.next(); // might block ... msg.target.dispatchMessage(msg); ... msg.recycle(); } }\"]},\"50\":{\"h\":\"\",\"t\":[\"myLooper()内部调用sThreadLocal获取已有的Looper对象\",\"public static Looper myLooper() { return sThreadLocal.get(); }\",\"Android 的 Activity 默认在 UI 线程调用了 Looper 的prepare()和loop()方法\"]},\"51\":{\"h\":\"Handler\"},\"52\":{\"h\":\"handler.sendMessage()\",\"t\":[\"Handler 构造方法会获取到mLooper和mQueue以及mCallback\",\" mLooper = Looper.myLooper(); mQueue = mLooper.mQueue; mCallback = callback; // Handler() 中此值为 null\",\"sendMessage()方法最终会调用sendMessageAtTime()方法，在其内部调用enqueueMessage()方法，将 handler 赋予 msg.target，并将 msg 压入 mQueue 中\",\"//enqueueMessage 方法 msg.target = this; queue.enqueueMessage(msg, uptimeMillis);//将 handler 发送的 msg 压入到当前线程的 Looper 持有的 MessageQueue 中\"]},\"53\":{\"h\":\"handler.dispatchMessage()\",\"t\":[\"Handler 的dispatchMessage()方法会在Looper.loop()中被调用\",\"public void dispatchMessage(Message msg) { if (msg.callback != null) { //msg 自带的回调方法 handleCallback(msg); } else { if (mCallback != null) { //handler 指定的回调方法 if (mCallback.handleMessage(msg)) { return; } } handleMessage(msg); //handler 的 handleMessage() 方法 } }\",\"其中执行顺序是：msg.callback > mCallback > handleMessage()\"]},\"54\":{\"h\":\"handler.post()\",\"t\":[\"handler.post(new Runnable())调用了getPostMessage(r)方法将 r 赋予 msg.callback\",\"public final boolean post(Runnable r) { return sendMessageDelayed(getPostMessage(r), 0); } private static Message getPostMessage(Runnable r) { Message m = Message.obtain(); m.callback = r; return m; }\",\"最后也是在sendMessageDelayed方法中调用sendMessageAtTime()方法将 msg 压入 MessageQueue 中\",\"public final boolean sendMessageDelayed(Message msg, long delayMillis) { ... return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis); }\"]},\"55\":{\"h\":\"msg 的获取\",\"t\":[\"Message.obtain(); 复用 MessageMessage 池中已有的对象，避免出现分配内存 推荐\",\"new Message();\"]},\"56\":{\"h\":\"总结\",\"t\":[\"Looper在**perfare()**方法中创建Looper及MessageQueue对象并保存在sThreadLocal中，\",\"在**loop()**方法中通过myLooper()从sThreadLocal中取出mLooper，并由此获得mQueue，在 for 循环中通过mQueue.next()获取msg，用msg.target.dispatchMessage()方法回调handler中的msg处理方法。\",\"Handler在**构造函数**中通过Looper.myLooper()获取到当前线程的Looper和MessageQueue；\",\"**sendMessage()**方法最终通过sendMessageAtTime()调用enqueueMessage()方法将msg压入到MessageQueue中。\",\"至此将Looper 和 Handler 通过 MessageQueue 联系在一起，并共同参与处理 Message。\",\"此外**handler.post(runnable)也是通过在post()**内部调用getPostMessage()方法将runnable赋予msg.callback，并在post()中通过sendMessageDelayed()方法调用sendMessageAtTime()方法将msg压入MessageQueue中\"]},\"57\":{\"h\":\"Android 中 AIDL 的使用\",\"t\":[\"AIDL（Android Interface Definition Language，Android 接口定义语言）用于 Android IPC，适用于大量并发请求。\",\"主要分为两部分：\",\"服务端 创建 Service 监听 Client 的请求，通过创建 AIDL 将接口暴露给客户端\",\"客户端 绑定到服务端获取 BInder 对象，将其转化为对应 AIDL，并调用接口对应方法。\",\"两者的连线就是 AIDL，因此两个 APP 的 AIDL 必须一致，可以将 AIDL 文件放到一个 Android Library 中，或者打成 aar 文件供二者依赖。\",\"也可以将 AIDL 涉及到的 AIDL 文件、java 都放到 AIDL 文件夹下，然后在 build.gradle 的android{...}中添加\",\" sourceSets{ main{ java.srcDirs = ['src/main/java','src/main/adil'] } }\",\"即添加一个 java 路径\"]},\"58\":{\"h\":\"AIDL 文件特点\"},\"59\":{\"h\":\"支持的数据格式\",\"t\":[\"基本数据类型、List（ArrayList）、Map（HashMap）以及实现了 Parcelable 接口的对象、AIDL 接口。\"]},\"60\":{\"h\":\"注意事项\",\"t\":[\"自定义的 Parcelable 对象、AIDL 对象必须显示 import。\",\"AIDL 中用到的 Parcelable 对象必须新建一个同名 AIDL 接口，声明其为 Parcelable 类型。\",\"// People.aidl package cf.android666.androidlib; import cf.android666.androidlib.People; // Declare any non-default types here with import statements parcelable People;\",\"AIDL 中除了基本数据类型，其他的参数必须标记方向（in,out,inout）。\",\"AIDL 不支持方法重载，也就是说不能有两个同名的方法（即使参数类型、个数不同也不行）。\",\"AIDL 中只支持方法，不支持静态变量。\"]},\"61\":{\"h\":\"AIDL 用法\"},\"62\":{\"h\":\"AIDL\",\"t\":[\"// ManagerAidl.aidl package cf.android666.androidlib; import cf.android666.androidlib.People; import cf.android666.androidlib.TaskCallBack; interface ManagerAidl { //客户端提供的方法 List<People> getPeopleList(); void addPeople(in People people); //回调接口，用于服务端往客户端通信 void registerCallBack(in TaskCallBack callback); void unregisterCallBack(in TaskCallBack callback); }\",\"// TaskCallBack.aidl package cf.android666.androidlib; import cf.android666.androidlib.People; // https://blog.csdn.net/woshiwoshiyu/article/details/54266101 //回调的具体方法，供服务端回调 interface TaskCallBack { void callBack(in int size); void onPeopleChange(in List<People> peoples); }\",\"//People.java package cf.android666.androidlib; public class People implements Parcelable { ... }\",\"//PeopleManager.java package cf.android666.androidlib; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.ServiceConnection; import android.os.IBinder; import android.os.RemoteException; import android.util.Log; import java.util.ArrayList; import java.util.List; /** * 一个管理类，封装了客户端绑定服务端的一些方法 * 属于客户端部分，不过放在 AIDL 中便于多个客户端开发 * Created by jixiaoyong on 2018/8/6. * email:jixiaoyong1995@gmail.com */ public class PeopleManager { private static PeopleManager mPeopleManager; private Context mContext; private Listener mListener; private ManagerAidl managerAidl; private List<People> peopleList; //实现该回调方法，用于调用客户端的具体方法 //注意这里是 new TaskCallBack.Stub()，而非 new TaskCallBack(),否则服务器无法接收到 callback //TaskCallBack.Stub() 是 TaskCallBack 的子类，当跨进程通信时传递的是 proxy 类 private TaskCallBack callBack = new TaskCallBack.Stub() { @Override public void callBack(int size) throws RemoteException { mListener.onCallback(size); } @Override public void onPeopleChange(List<People> peoples) throws RemoteException { peopleList = peoples; mListener.onPeopleListChange(peoples); } }; private ServiceConnection serviceConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName name, IBinder service) { //在连接上服务端后，客户端从 IBinder 对象中获取到 AIDL 接口对象，并执行其方法 managerAidl = ManagerAidl.Stub.asInterface(service); try { peopleList = managerAidl.getPeopleList(); managerAidl.registerCallBack(callBack); } catch (RemoteException e) { e.printStackTrace(); } mListener.onCreate(mPeopleManager); } @Override public void onServiceDisconnected(ComponentName name) { try { managerAidl.unregisterCallBack(callBack); } catch (RemoteException e) { e.printStackTrace(); } } }; private PeopleManager(Context context,Listener listener) { mContext = context; mListener = listener; peopleList = new ArrayList<>(); Intent intent = new Intent(); intent.setComponent(new ComponentName(\\\"cf.android666.demo\\\", \\\"cf.android666.demo.MService\\\"));//Android5.0 后必须显示的启动服务 context.bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE); } public static void init(Context context,Listener listener) { mPeopleManager = new PeopleManager( context, listener); } public void addPeople(People people) { try { managerAidl.addPeople(people); } catch (RemoteException e) { e.printStackTrace(); } } public List<People> getPeopleList() { return peopleList; } //子类可以实现该 Listener 的方法，在服务端调用这些方法时执行对应操作 public interface Listener { void onCreate(PeopleManager peopleManager);//服务连接成功 void onCallback(int size); void onPeopleListChange(List<People> peoples); } }\"]},\"63\":{\"h\":\"服务端\",\"t\":[\"注意 MService 在 AndroidManife.xml 中配置：\",\"android:exported=\\\"true\\\"android:enabled=\\\"true\\\"android:process=\\\":people\\\"\",\"//MService.java package cf.android666.demo; import android.app.Service; import android.content.Intent; import android.os.IBinder; import android.os.RemoteCallbackList; import android.os.RemoteException; import android.support.annotation.Nullable; import android.text.InputFilter; import android.util.Log; import java.util.ArrayList; import java.util.List; import cf.android666.androidlib.ManagerAidl; import cf.android666.androidlib.People; import cf.android666.androidlib.TaskCallBack; /** * Created by jixiaoyong on 2018/8/6. * email:jixiaoyong1995@gmail.com */ public class MService extends Service implements ManagerAidl.Stub.DeathRecipient { private List<People> mPeopleList; private static RemoteCallbackList<TaskCallBack> callbackList = new RemoteCallbackList<>();; private TaskCallBack mCallBack; //使用 AIDL 接口生成 mIBinder，在服务端实现接口各个方法，供客户端调用 private IBinder mIBinder = new ManagerAidl.Stub() { @Override public List<People> getPeopleList() throws RemoteException { return mPeopleList; } @Override public void addPeople(People people) throws RemoteException { mPeopleList.add(people); onPeopleChange(mPeopleList); } @Override public void registerCallBack(TaskCallBack callback) throws RemoteException { mCallBack = callback; Log.d(\\\"TAG\\\", \\\"registerCallBack 注册回调方法 callback == null\\\" + callback); if (callback != null) {//注意这里一定要判断非空 callbackList.register(callback); } } @Override public void unregisterCallBack(TaskCallBack callback) throws RemoteException { if (callback != null) { callbackList.unregister(callback); } } }; @Nullable @Override public IBinder onBind(Intent intent) { Log.d(\\\"tag\\\", \\\"onBind MService 开始了\\\" ); if (mPeopleList == null) { mPeopleList = new ArrayList<>(); } for (int i = 0; i < 20; i++) { mPeopleList.add(new People(\\\"people\\\" + i, i)); } return mIBinder;//返回开始用 AIDL 创建的 IBinder } //实现 DeathRecipient 接口的方法，在客户端终止后自动调用该方法 @Override public void binderDied() { callbackList.unregister(mCallBack); } //这里时在服务端调用回调方法的写法，是从 callbackList 依次取出来执行 private void onPeopleChange(List<People> peoples) { if (callbackList == null) { return; } int len = callbackList.beginBroadcast(); try { for (int i = 0; i < len; i++) { callbackList.getBroadcastItem(i).onPeopleChange(peoples); } } catch (RemoteException e) { e.printStackTrace(); }finally { callbackList.finishBroadcast(); } } }\",\"注意：\",\"这里用来注册监听的类是 RemoteCallbackList\",\"我们知道跨进程的两个 listener 是两个不同的对象，那他是怎么保证跨进程注册、注销的是指定的 listener 呢？\",\"这是因为虽然两个 listener 对象不同，但是他们底层的 Binder 对象是同一个，在 RemoteCallbackList 中有一个以 Binder 对象为 KEY 的 map 来存放这些 listener 对象，当要注销时，只需要按当前待注销的 listener 的 Binder 对象找到已经注册了的 listener 并删除掉即可。\",\"ArrayMap<IBinder, Callback> mCallbacks = new ArrayMap<IBinder, Callback>()\",\"此外，RemoteCallbackList 可以在客户端死亡的时候自动注销掉对应的 listener，这是因为他在注册的同时也对 Binder 的死亡就行了监听。\",\"public boolean register(E callback, Object cookie) { synchronized (mCallbacks) { if (mKilled) { return false; } // Flag unusual case that could be caused by a leak. b/36778087 logExcessiveCallbacks(); IBinder binder = callback.asBinder(); try { Callback cb = new Callback(callback, cookie); binder.linkToDeath(cb, 0);//监听 binder 的死亡事件 mCallbacks.put(binder, cb); return true; } catch (RemoteException e) { return false; } } } ... //当 binder 死亡时，会主动移除其注册的 listener public void binderDied() { synchronized (mCallbacks) { mCallbacks.remove(mCallback.asBinder()); } onCallbackDied(mCallback, mCookie); }\",\"方法运行的线程\",\"如果客户端和服务端运行在同一进程：客户端调用服务端和服务端回调客户端方法（RemoteCallbackList，下同）都会运行在同一线程，即客户端调用服务端时所在的线程，默认为主线程\",\"如果客户端和服务端运行在不同进程：客户端调用服务端方法，客户端会被挂起，直到服务端方法在 Binder 线程池中运行完毕，这种情况下服务端可以执行耗时操作而无需另建线程；服务端回调客户端方法运行在客户端主线程 (与客户端调用服务端方法在同一线程)\",\"通过上述分析，可以注意到一个细节：虽然在服务端中回调客户端的方法是在服务端的 Binder 线程，但是在客户端中被回调的方法却是和客户端中主动调用服务端方法的线程一致。\"]},\"64\":{\"h\":\"客户端\",\"t\":[\"PeopleManager.init(this, this);\",\"//服务连接成功后，可以开始调用服务的一系列方法 @Override public void onCreate(PeopleManager peopleManager) { mPeopleManager = peopleManager; peopleList = peopleManager.getPeopleList(); for (int i = 0; i < peopleList.size(); i++) { Log.d(\\\"tag\\\", \\\"people list is \\\" + peopleList.get(i)); } } //其他回调方法，等服务端回调时会执行对应方法 @Override public void onPeopleListChange(List<People> peoples) { Log.d(\\\"TAG\\\", \\\"demo2 people 变化了\\\" + peoples.size()); }\"]},\"65\":{\"h\":\"监听并处理 Binder 死亡事件\",\"t\":[\"当服务端进程意外死亡时，我们可以选择重新连接服务，一般有两种方式：\",\"binderDied 在客户端的 Binder 线程池中\",\"onServiceDisconnected 在客户端 UI 线程\"]},\"66\":{\"h\":\"AIDL 的权限验证\",\"t\":[\"可以在服务的 onBind(Intent intent) 或者 onTransact() 方法中做验证\",\"做验证的手段有：1.permission 验证；2.Uid，Pid 等做验证\"]},\"67\":{\"h\":\"参考资料\",\"t\":[\"《Android 开发艺术探索》\"]},\"68\":{\"h\":\"Android 中 AIDL 相关知识\"},\"69\":{\"h\":\"前言\",\"t\":[\"AIDL是 Android 中用于 IPC 的语言，具体使用可以参见这篇文章，这篇文章主要想总结一下AIDL具体为我们做了什么工作，主要参考书目《Android 开发艺术探索》。\",\"在 Android 中，除了Socket、Intent中使用Bundle、本地文件共享，ContentProvider等等之外，还有一个独有的 IPC 方式即Binder。在日常编程中使用Binder的主要有AIDL和Messenger两种方式，而Messenger也是用AIDL来实现的。\"]},\"70\":{\"h\":\"准备\",\"t\":[\"新建一个 AIDL 文件\",\"// IBookManager.aidl package cf.android666.myapplication; interface IBookManager { void getSth(); }\",\"用 AndroidStudio 自动生成一个 Binder 类\",\"使用Build->Make Project，会在app/build/generated/aidl_source_output_dir/debug/compileDebugAidl/out目录下生成IBookManager.java。\"]},\"71\":{\"h\":\"分析\",\"t\":[\"AIDL 从客户端 (Client) 发起请求至服务端 (Server) 相应的工作流程概览，图片来源 (https://blog.csdn.net/qian520ao/article/details/78074983)\",\"AIDL 从客户端 (Client) 发起请求至服务端 (Server) 的流程\",\"下面我们对IBookManager.java这个文件简单分析一下\",\"/* * This file is auto-generated. DO NOT MODIFY. * Original file: app/src/main/aidl/cf/android666/myapplication/IBookManager.aidl */ package cf.android666.myapplication; public interface IBookManager extends android.os.IInterface//IInterface 接口，所有可以在 Binder 中传输的接口都要继承自该接口 { /** * Local-side IPC implementation stub class. * 持有 Binder 对象 * 获取客户端传过来的数据，根据方法 ID 执行相应操作。 * 将传过来的数据取出来，调用本地写好的对应方法。 * 将需要回传的数据写入 reply 流，传回客户端。 */ public static abstract class Stub extends android.os.Binder implements cf.android666.myapplication.IBookManager { private static final java.lang.String DESCRIPTOR = \\\"cf.android666.myapplication.IBookManager\\\";//是 Binder 的唯一标识，一般为当前 Binder 的类目 /** * Construct the stub at attach it to the interface. */ public Stub() { this.attachInterface(this, DESCRIPTOR);//将 Binder 和指定的接口绑定，这样当 queryLocalInterface 时会返回与 DESCRIPTOR 一致的 IInterface } /** * Cast an IBinder object into an cf.android666.myapplication.IBookManager interface, * generating a proxy if needed. * 将服务端的 Binder 转化为客户端需要的 IInterface * 如果是相同的进程，则直接返回服务端的 Stub 对象本身（没有跨进程）； * 如果是不同的进程，则返回的是 Stub.Proxy 代理类对象 */ public static cf.android666.myapplication.IBookManager asInterface(android.os.IBinder obj) { if ((obj == null)) { return null; } android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); if (((iin != null) && (iin instanceof cf.android666.myapplication.IBookManager))) { return ((cf.android666.myapplication.IBookManager) iin); } return new cf.android666.myapplication.IBookManager.Stub.Proxy(obj); } @Override public android.os.IBinder asBinder() { return this; } /** * 客户端远程请求经过系统封装后调用该方法， * 生成 _data 和 _reply 数据流，并向 _data 中存入客户端的数据。 * 通过 transact() 方法将它们传递给服务端，并请求服务端调用指定方法。 * 接收 _reply 数据流，并从中取出服务端传回来的数据 */ @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException { java.lang.String descriptor = DESCRIPTOR; switch (code) { case INTERFACE_TRANSACTION: { reply.writeString(descriptor); return true; } case TRANSACTION_getSth: { data.enforceInterface(descriptor);//从 data 中可以读取参数 this.getSth();//注意，这里调用的是 IBookManager 的 getSth()，也就是需要我们在使用该 Binder 时实现的方法 reply.writeNoException();//可以往 reply 中写入结果 return true; } default: { return super.onTransact(code, data, reply, flags); } } } /** * Proxy 类持有 IBinder 的引用 * */ private static class Proxy implements cf.android666.myapplication.IBookManager { private android.os.IBinder mRemote; Proxy(android.os.IBinder remote) { mRemote = remote; } @Override public android.os.IBinder asBinder() { return mRemote; } public java.lang.String getInterfaceDescriptor() { return DESCRIPTOR; } @Override public void getSth() throws android.os.RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); try { _data.writeInterfaceToken(DESCRIPTOR); mRemote.transact(Stub.TRANSACTION_getSth, _data, _reply, 0);//这里实际上是调用了远程的 IBinder 的 transact() 方法 _reply.readException(); } finally { _reply.recycle(); _data.recycle(); } } } static final int TRANSACTION_getSth = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);//这个是我们在 AIDL 中定义的 getSth() 方法的标志，用于在 onTransact 中区分调用的是哪个方法 } public void getSth() throws android.os.RemoteException;//这个是我们在 AIDL 中定义的方法，需要在服务端实现，并且会在客户端被调用 }\"]},\"72\":{\"h\":\"参考资料\",\"t\":[\"Android 深入浅出 AIDL（二）\",\"Android Binder 之应用层总结与分析\"]},\"73\":{\"h\":\"Android 中 View 相关知识\",\"t\":[\"本文为笔记性质，尚未成文。\"]},\"74\":{\"h\":\"View 的坐标\",\"t\":[\"Android 中的坐标，以屏幕左上角顶点为原点 (0,0)，以横轴为 x 轴，竖轴为 y 轴，数值依次递增。\",\"View 的坐标信息有以下几种，其坐标都是以父 View 的左上角顶点为原点：\",\"x，y 是 View 的左上角坐标。\",\"translationX，translationY 是 View 左上角顶点与父容器左上角顶点的偏移量，默认为 0。\",\"left，top 是分别是 View 左上角顶点的 x 轴，y 轴坐标。\",\"right，bottom 分别是 View 右下角顶点的 x 轴，y 轴坐标。\",\"注意\",\"x = translationX + left；\",\"y = translationY + top；\",\"改变 translationX/Y 的值便可以更改View 的位置。当 View 平移的时候，代表原始位置信息的 left，right，top，bottom 的值并不会变化。\",\"在 OnTouch 事件中，我们可以从 event 得到两种值：\",\"event.rawX,event.rawY 代表 相对于手机屏幕原点的坐标\",\"event.X,event.Y 代表 相对于当前 View 左上角的坐标\",\"TouchSlop 则代表认为滑动开始的最小距离\",\"ViewConfiguration.get(this).scaledTouchSlop\"]},\"75\":{\"h\":\"滑动\",\"t\":[\"mScroller.startScroll() 方法可以实现平滑的滑动\",\"scrollX,scrollY 表示的是view 的 X，Y 坐标减去 view 内容的 X，Y 坐标。\",\"所以 scrollX>0，则表示 view 内容向左移动，scrollX<0 表示 view 内容向右移动。类似于窗户 (view) 位置不变，景色 (view 内容) 的 scrollX>0 即景色向右移动，则在窗户中看到的效果是景色向窗户左边移动。\",\"private val mScroller = Scroller(context) fun smoothScrollBy(destX: Int, destY: Int) { mScroller.startScroll(scrollX, scrollY, destX, destY, 1000)//destX, destY 的值如果是正的话，会向左，上方移动 invalidate() } override fun computeScroll() { if (mScroller.computeScrollOffset()) { scrollTo(mScroller.currX, mScroller.currY) postInvalidate() } }\",\"Scroller 不能使 View 滑动，而只能配合 View 的 computeScroll() 方法实现是View 的内容滑动的效果。\",\"mScroller.startScroll() 记录下要滑动的数据，而 invalidate() 通知 View 重绘；\",\"每次重绘都会调用 computeScroll() 方法，利用 mScroller 计算出接下来要 scrollTo() 的具体值并执行，再次 postInvalidate() 通知 View 重绘；\",\"如此反复直到绘制滑动完毕。\",\"上述无论是 translationX 还是 scrollX 等引起的 view 变化，都不能改变 View 的定位（left，right，top，bottom 值），而如果更改 margin 的值，则可以更改 View 的定位。\"]},\"76\":{\"h\":\"Window 和 WindowManager\",\"t\":[\"WindowManager.LayoutParams.flags 有三个常用选项：\",\"WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL // 只处理 Window 区域内的点击事件，之外的交给其他 Window 处理\",\"WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE // 不接受输入事件，不获取焦点，同时会开启 FLAG_NOT_TOUCH_MODAL，最终事件会传递给下层具有焦点的 Window\",\"WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED // 让 Window 显示在锁屏界面上\",\"WindowManager.LayoutParams.type 代表 Window 的类型 (三个)：\",\"应用 Window 对应一个 Activity。z-ordered:1~99\",\"子 Window 不能单独存在，附属在特定的父 Window 中，如 Dialog。z-ordered:1000~1999\",\"系统 Window 需要系统权限，如 Toast，状态栏等。z-ordered:2000~2999\",\"z-ordered值大的 Window 会覆盖掉低值的 Window。\"]},\"77\":{\"h\":\"TODO\",\"t\":[\"recycleview 滑动 ItemTouchHelper 源码分析 https://www.jianshu.com/p/130fdd755471 嵌套滑动 https://blog.csdn.net/qq_15807167/article/details/51637678https://www.cnblogs.com/dasusu/p/9159904.html滑动展示删除按钮https://www.jianshu.com/p/9bfed6e127cc >> 对应的 demo：https://github.com/jixiaoyong/DiyWidget/blob/master/diy-widget/src/main/java/cf/android666/applibrary/SwipeRecyclerView.kt\"]},\"78\":{\"h\":\"参考资料\",\"t\":[\"View 滑动效果常用属性详解：scroll、translation、LayoutParams\"]},\"79\":{\"h\":\"Android 中 WebView 使用的一些问题\"},\"80\":{\"h\":\"问题描述：WebView 在 fragment 中不显示\",\"t\":[\"解决代码如下：\",\"//kotlin 代码 webView.webViewClient = object : WebViewClient() { override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean { view!!.loadUrl(url) return true } }\",\"此代码同样强制在 webview 中打开对应的网页\"]},\"81\":{\"h\":\"Android 中的 Messenger 源码详解\"},\"82\":{\"h\":\"前言\",\"t\":[\"Messenger 是 Android 中用于 IPC 的方式之一，使用 Handler 发送有序消息队列，底层是通过 AIDL 调用 Binder 实现。\",\"Messenger 只用于服务端和客户端串行的传递消息，如果大量并发或者跨进程调用服务端的方法，就需要考虑 AIDL 而非 Messenger。\",\"Messenger 的使用可以参考这篇文章,本文主要探索一下 Messenger 源码实现。\",\"主要使用到的文件：\",\"IMessenger.aidl\",\"Messenger.java\",\"Handler.java\"]},\"83\":{\"h\":\"解析\",\"t\":[\"一个典型的 Messenger 服务如下所示：\",\"class MessengerService : Service() { private val messenger = Messenger(MessengerHandler()) override fun onBind(intent: Intent?): IBinder? { return messenger.binder } //可以从客户端的得到的 Messenger 中取出该 Handler，并实现客户端->服务端通信 class MessengerHandler : Handler() { override fun handleMessage(msg: Message?) { super.handleMessage(msg) //客户端的 Messenger，用于服务端->客户端通信，可选 val client = msg?.replyTo client?.send(Message.obtain(null, 2, 1, 2)) } } }\",\"我们可以看到使用 Handler 创建一个 Messenger，进入到源码看一下：\",\"private final IMessenger mTarget; public Messenger(Handler target) { mTarget = target.getIMessenger(); }\",\"我们看到，在这里创建了一个新的与给定的 Handler 绑定在一起的 Messenger，再看看getIMessenger()方法：\",\"final IMessenger getIMessenger() { synchronized (mQueue) { if (mMessenger != null) { return mMessenger; } mMessenger = new MessengerImpl(); return mMessenger; } } private final class MessengerImpl extends IMessenger.Stub { public void send(Message msg) { msg.sendingUid = Binder.getCallingUid(); Handler.this.sendMessage(msg);//使用 Handler 发送消息 } }\",\"这里我们可以看到getIMessenger()方法会创建一个 MessengerImpl 对象，而这个对象\",\"实现了send()方法，也证实了我们之前的一个观点——Messenger 底层是使用 Handler 发送消息。\",\"同时，看到 MessengerImpl 继承的 IMessenger.Stub 类我们可以联想到这里应该有一个 AIDL 实现：\",\"// /frameworks/base/core/java/android/os/IMessenger.aidl package android.os; import android.os.Message; /** @hide */ oneway interface IMessenger { void send(in Message msg); }\",\"oneway 关键字用于修改远程调用的行为。使用该关键字时，远程调用不会阻塞；它只是发送事务数据并立即返回。接口的实现最终接收此调用时，是以正常远程调用形式将其作为来自 Binder 线程池的常规调用进行接收。如果 oneway 用于本地调用，则不会有任何影响，调用仍是同步调用\",\"https://developer.android.google.cn/guide/components/aidl?hl=zh-cn\",\"这也就解释了在服务的onBind(intent: Intent?)方法中，我们可以直接使用messenger.binder获取到 Binder 对象的原因。\",\"再看看 Messenger 客户端的实现：\",\"private lateinit var messenger: Messenger//服务端的 Messenger private val replyMessenger: Messenger = Messenger(ReplyHandler())//客户端的 Messenger，用于服务端->客户端通信，可选 private val mServiceConnection = object : ServiceConnection { override fun onServiceDisconnected(name: ComponentName?) { } override fun onServiceConnected(name: ComponentName?, service: IBinder?) { messenger = Messenger(service)//注意这里的构造方法传入的是 IBinder 对象 val message = Message.obtain(null, 1) message.replyTo = replyMessenger val data = Bundle() data.putString(\\\"msg\\\", \\\"Hello World\\\") try { messenger.send(message)//使用服务端的 Messenger 向服务端发送消息 } catch (e: Exception) { e.printStackTrace() } } }\",\"可以注意到在客户端通过Messenger(IBinder target)取得服务端的 Messenger，而这里的 IBinder 对象则是通过服务端的 Messenger 的getBinder()获取的：\",\"public Messenger(IBinder target) { mTarget = IMessenger.Stub.asInterface(target); }\",\"Stub.asInterface()方法我们在之前的文章中介绍过，他会根据客户端和服务端是否在同一进程而决定返回 Stub 实例还是 Proxy 类实例以实现跨进程通信。\",\"而通过比较 Messenger(IBinder target)和Messenger(Handler target)两个构造方法我们也可以知道，两个方法都只是用来初始化了IMessenger mTarget对象，这也就解释了在服务端和客户端可以通过两个不同的构造方法获取到有同样功能的 Messenger。\"]},\"84\":{\"h\":\"参考资料\",\"t\":[\"《Android 开发艺术探索》\",\"Android 接口定义语言 (AIDL)\"]},\"85\":{\"h\":\"Android 中的 SpareArray 和 ArrayMap 实现分析\",\"t\":[\"日常开发中，常用的存储键值对的数据结构是HashMap，根据Java 笔记之 HashMap 保存数据和Java 笔记之计算 Java 对象的大小及其应用可以知道，HashMap存储键值对会占用比较多的内存控件，而对于内存限制较大的 Android 平台来说，为了避免这种浪费，官方推荐我们使用SpareArray和ArrayMap，本文对这两个类的实现进行分析比较。\",\"SpareArray以及他的衍生类都是以基本类型为key，因为避免了自动装箱，并且用数组直接保存 key、value（而非像HashMap那样将其封装为Node对象后再保存），因而节省了内存。\",\"ArrayMap则支持所有类型的 key，他是将key和value全部保存在一个数组中（n位为key，n+1位为value），避免了将其封装为Node对象带来的内存消耗。\",\"当要保存的数据量比较小（小于几千个）的时候，如果 KEY 是基本类型，推荐使用SparseArray及其衍生类以节省内存，如果 KEY 是其他类型则使用ArrayMap;否则使用HashMap更加高效。\"]},\"86\":{\"h\":\"SpareArray\",\"t\":[\"SpareArray以及他的衍生类主要用于以基本类型为key保存非大量数据的场景。\",\"相比HashMap而言，他的优点主要在于没有对保存的数据二次封装，没有对基本类型的数据自动装箱，存储单个数据的成本小，也没有hash计算。\",\"但他在添加数据时需要扩展数组 (涉及到新建、复制数组，gc()等)，在删除数据时需要缩减数组 (查看gc()等源码发现他的数组只会增加，不会缩减)，以及通过二分法查找索引都会消耗性能。\",\"为了避免每次删除时都需要缩减数组，SpareArray在删除数组时只会将其赋值为DELETED，在下次调用其private void gc()方法时丢弃掉这些数据\",\"先看一下SpareArray的结构：\",\"public class SparseArray<E> implements Cloneable { private boolean mGarbage = false; //是否调用 gc() 方法 private int[] mKeys;//所有的 key private Object[] mValues;//所有的 value private int mSize;//所保存的数据个数 }\"]},\"87\":{\"h\":\"void put(int key, E value)\",\"t\":[\"添加方法先用二分法查找key对应的位置：\",\"如果有，则直接覆盖\",\"如果没有，则取反得到应该插入的位置，并分别插入key和value\",\"public void put(int key, E value) { // 先用二分法查找 key 对应的索引，找到的话返回对应索引， // 否则返回 key 应该插入的位置的取反值 int i = ContainerHelpers.binarySearch(mKeys, mSize, key); if (i >= 0) { // 如果已存在值则直接覆盖 mValues[i] = value; } else { // 对二分法查找到的值再取反，得到 key 应该插入的位置 i = ~i; if (i < mSize && mValues[i] == DELETED) { mKeys[i] = key; mValues[i] = value; return; } if (mGarbage && mSize >= mKeys.length) { gc(); // Search again because indices may have changed. i = ~ContainerHelpers.binarySearch(mKeys, mSize, key); } // public static <T> T[] insert(T[] array, int currentSize, int index, T element) // Inserts an element into the array at the specified index, // growing the array if there is no more room. mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key); mValues = GrowingArrayUtils.insert(mValues, mSize, i, value); mSize++; } }\"]},\"88\":{\"h\":\"E get(int key)\",\"t\":[\"获取数据，先用二分法查找，如果找到就返回对应的值，否则返回null。\",\"public E get(int key) { return get(key, null); } public E get(int key, E valueIfKeyNotFound) { int i = ContainerHelpers.binarySearch(mKeys, mSize, key); if (i < 0 || mValues[i] == DELETED) { return valueIfKeyNotFound; } else { return (E) mValues[i]; } }\"]},\"89\":{\"h\":\"void remove(int key)\",\"t\":[\"删除key以及对应的数据。\",\"同样先用二分法查找对应位置，有的话则标记为DELETED，等待下次gc()时丢弃。\",\"public void remove(int key) { delete(key); } public void delete(int key) { int i = ContainerHelpers.binarySearch(mKeys, mSize, key); if (i >= 0) { if (mValues[i] != DELETED) { mValues[i] = DELETED; mGarbage = true; } } }\"]},\"90\":{\"h\":\"gc()\",\"t\":[\"在上文中我们看到，删除数据时，mGarbage被标记为true，这样当下一次进行put/valueAt/append/size等涉及到数组大小查询、改动等时，就出触发gc()以便整理数组结构。\",\"private void gc() { // Log.e(\\\"SparseArray\\\", \\\"gc start with \\\" + mSize); int n = mSize; int o = 0; int[] keys = mKeys; Object[] values = mValues; for (int i = 0; i < n; i++) { Object val = values[i]; // 这里的操作只是将没有被删除的数据移动到了数组的前面 // 而保证了数组后面都是 DELETED 或 null，方便后续操作 if (val != DELETED) { if (i != o) { keys[o] = keys[i]; values[o] = val; values[i] = null; } o++; } } mGarbage = false; mSize = o; }\"]},\"91\":{\"h\":\"HashMap 与 SpareArray 及其衍生类对应关系\",\"t\":[\"参考下图\"]},\"92\":{\"h\":\"ArrayMap\",\"t\":[\"ArrayMap实现了Map<K, V>接口，他的 API 和HashMap相差无几，但是由于没有对数据再包装，动态调整数组的大小，一定范围内他比HashMap内存效率高。\",\"但是如果保存大量数据（超过千位）时，由于他需要二分法查找的影响会比HashMap慢很多。\",\"ArrayMap特殊之处在于将key，value保存到了同一个数组 mArray 中（n 位保存 key，n+1 位保存 value）。\",\"先看一下ArrayMap的结构：\",\"static Object[] mBaseCache; static int mBaseCacheSize; static Object[] mTwiceBaseCache; static int mTwiceBaseCacheSize; final boolean mIdentityHashCode;//是否强制使用 System.identityHashCode(key) 获取 key 的 HashCode //System.identityHashCode(key) 方法无论类是否重写了 hashCode() 方法， //都会调用 Object.identityHashCode(key) 来获取对象的 hashCode int[] mHashes;//存储所有 key 的 hash 值 Object[] mArray;//存储 key 和 value，大小是 mHashes 的两倍 //n 位保存 key，n+1 位保存 value int mSize; MapCollections<K, V> mCollections;\",\"在使用时：\",\"计算key的hash值，\",\"hash = mIdentityHashCode ? System.identityHashCode(key) : key.hashCode();\",\"然后使用indexOf()在mHashes中进行二分法查找对应的index\",\"index = indexOf(key, hash);\",\"indexOf()方法会先用二分法查找hash对应的index,如果index<0则返回index；否则在对比mArray中对应位置mArray[index<<1]的key与要查询的key：\",\"两者一致：返回index\",\"两者不一致：从index开始，先向后，再向前查询是否有相同的key,如果有返回对应index\",\"以上都没有找到：对mHashes中最后一个与key的hash一致的后一位index取反，并返回\",\"int indexOf(Object key, int hash) { final int N = mSize; // Important fast case: if nothing is in here, nothing to look for. if (N == 0) { return ~0; } int index = binarySearchHashes(mHashes, N, hash); // If the hash code wasn't found, then we have no entry for this key. if (index < 0) { return index; } // If the key at the returned index matches, that's what we want. if (key.equals(mArray[index<<1])) { return index; } // Search for a matching key after the index. int end; for (end = index + 1; end < N && mHashes[end] == hash; end++) { if (key.equals(mArray[end << 1])) return end; } // Search for a matching key before the index. for (int i = index - 1; i >= 0 && mHashes[i] == hash; i--) { if (key.equals(mArray[i << 1])) return i; } // Key not found -- return negative value indicating where a // new entry for this key should go. We use the end of the // hash chain to reduce the number of array entries that will // need to be copied when inserting. return ~end; }\"]},\"93\":{\"h\":\"V put(K key, V value)\",\"t\":[\"当添加item时，按照前述规则，先在mArray中查找key对应的索引index：\",\"index >= 0 ：已经有键为key的数据，直接覆盖旧值并返回\",\"index < 0 ：没有键为key的数据，对数组进行扩容，并保存对应数据\",\"index = ~index;//上文 indexOf() 中计算得出的 key 应该添加的位置 mHashes[index] = hash; mArray[index<<1] = key; mArray[(index<<1)+1] = value;\"]},\"94\":{\"h\":\"V get(Object key)\",\"t\":[\"get()方法就比较简单了，先查找key的索引，然后取出对应的数据value并返回即可：\",\" public V get(Object key) { final int index = indexOfKey(key); return index >= 0 ? (V)mArray[(index<<1)+1] : null; }\"]},\"95\":{\"h\":\"V remove(Object key)\",\"t\":[\"remove()方法也会先使用indexOfKey()计算key的index，然后删除对应位置的数据。\",\"此外，如果mHashes.length > (BASE_SIZE*2) && mSize < mHashes.length/3的话，还会缩减数组的大小为osize > (BASE_SIZE*2) ? (osize + (osize>>1)) : (BASE_SIZE*2)：\",\"public V removeAt(int index) { //...其他代码 if(mHashes.length > (BASE_SIZE*2) && mSize < mHashes.length/3){ //...其他代码 final int n = osize > (BASE_SIZE*2) ? (osize + (osize>>1)) : (BASE_SIZE*2); allocArrays(n); } //...其他代码 } private void allocArrays(final int size) { //...其他代码 mHashes = new int[size]; mArray = new Object[size<<1]; }\"]},\"96\":{\"h\":\"参考资料\",\"t\":[\"GrowingArrayUtils.java 源码\",\"SparseArray.java 源码\",\"ArrayMap.java 源码\",\"App optimization with ArrayMap & SparseArray in Android\",\"Java 笔记之 HashMap 保存数据\",\"Java 笔记之计算 Java 对象的大小及其应用\",\"SparseArray 的使用及实现原理\"]},\"97\":{\"c\":[\"android\"]},\"98\":{\"h\":\"Android 今日头条屏幕适配方案的原理梳理\"},\"99\":{\"h\":\"前言\",\"t\":[\"最近在项目里面遇到了屏幕适配的问题，UI 要求 APP 在不同手机上展示效果和设计稿保持“像素级”同步，在对比了几种屏幕适配方案之后，选择了基于今日头条的AndroidAutoSize适配方案。\",\"本文主要简单分析其适配原理，以及在实际使用中遇到的一个问题，需要更深入了解原理可以阅读文末参考文献。\"]},\"100\":{\"h\":\"正文\",\"t\":[\"UI 给的设计稿一般都是以像素 px 为单位，而在 Android 开发中官方推荐的使用的单位是 dp。\",\"dp 是一个虚拟像素单位，1 dp 约等于中密度屏幕（160dpi；“基准”密度）上的 1 像素。对于其他每个密度，Android 会将此值转换为相应的实际像素数。\",\"—— Android Developer\",\"根据 Android 官方的定义，dp 在屏幕上实际对应的像素 px 计算方式如下：\",\"px = dp * (dpi / 160)\",\"其中 dpi 表示：屏幕每平方英寸有多少像素，可以通过屏幕对角线的像素数 px/屏幕尺寸 inch 计算。\",\"而DisplayMetrics.density 字段表示根据当前像素密度指定将 dp 单位转换为像素时所必须使用的缩放系数，即上述方程等价于：\",\"px = dp * (dpi / 160) = dp * getResources().getDisplayMetrics().density\",\"这样，在 dpi 为 160 的屏幕上 1dp 占 1px，在 dpi 为 320 的屏幕上占 2px，那么就能保证同一 dp 的在不同 dpi 上占得像素是等比例变化的。\",\"但是，在现实生活中面对千变万化的 Android 屏幕，根据 Jessyan 的文章可知由于每种屏幕宽/高对应的总 dp 数不一定都是相同的，所以即使使用了 dp 作为单位，还是会出现同一 dp 在有些屏幕上刚好占满全屏，在有的屏幕上会无法占满全屏或超出屏幕范围。\",\"density 在每个设备上都是固定的，DPI / 160 = density，屏幕的总 px 宽度 / density = 屏幕的总 dp 宽度\",\"设备 1，屏幕宽度为 1080px，480DPI，屏幕总 dp 宽度为 1080 / (480 / 160) = 360dp\",\"设备 2，屏幕宽度为 1440px，560DPI，屏幕总 dp 宽度为 1440 / (560 / 160) = 411dp\",\"——Jessyan\",\"那么该怎么适配呢，再看一眼上述的公式：\",\"屏幕的总 px 宽度 / density = 屏幕的总 dp 宽度\",\"以适配屏幕宽度为例，要使得 dp 在不同屏幕上对应的像素等比例变化，就要保证屏幕的总 dp 宽度一致，而屏幕的总 px 宽度是物理条件无法更改，那么就只能更改 density。\",\"以我们使用的设计稿宽度为 375dp 为例：\",\"在分辨率为 2160*1080、尺寸为 5.99 英寸的屏幕上：\",\"density = 1080px / 375dp = 2.88\",\"而在分辨率为 2400*1176、尺寸为 6.53 英寸的屏幕上：\",\"density = 1176px / 375dp = 3.136\",\"这样就保证了，不管在什么样的屏幕上，375dp 始终都能够占满屏幕宽度，保证了布局在不同大小的屏幕上，在屏幕宽度上的比例一致性，也就解决屏幕适配的问题。\"]},\"101\":{\"h\":\"获取状态栏高度的问题\",\"t\":[\"上述的屏幕适配方案使用简单，且侵入小，在使用到项目中之后，除了部分字体等显示需要微调外，其余内容基本上都完美还原了设计稿的内容。\",\"但是在后续使用到状态栏相关代码的时候发现获取到的状态栏高度和实际高度不一致，导致显示异常，而使用Blankj的工具类 BarUtils.getStatusBarHeight()却可以获取到正确的高度。\",\"对比两种代码发现获取状态栏高度的代码逻辑几乎一样：\",\"public static int getStatusBarHeight(Resources resources) { int resourceId = resources.getIdentifier(\\\"status_bar_height\\\", \\\"dimen\\\", \\\"android\\\"); return resources.getDimensionPixelSize(resourceId); }\",\"不同的是，两种方法使用到的 resources 一个是 APP 的，一个是系统的\",\"// 1. 我使用到的 resources，从当前 activity 获取 resources.displayMetrics.density // 2. Blankj 使用的 resources，从系统获取 Resources.getSystem().displayMetrics.density\",\"通过分别打印这两种 resources 可以发现，二者的 density 值不一样（以 2160*1080、尺寸为 5.99 英寸的屏幕为例）：\",\"context.resources.DisplayMetrics: DisplayMetrics{density=2.88, width=1080, height=2033, scaledDensity=2.88, xdpi=403.411, ydpi=403.411} Resources.getSystem().DisplayMetrics: DisplayMetrics{density=2.7, width=1080, height=2033, scaledDensity=2.7, xdpi=403.411, ydpi=403.411}\",\"这是由于使用了AndroidAutoSize适配方案后，APP 内部的 density 已经被改成了 2.88，而系统实际的 density 是 2.7。\",\"又知道 android 中将像素和 dp 等单位转化的方法如下：\",\"// android.util.TypedValue public static float applyDimension(int unit, float value, DisplayMetrics metrics) { switch (unit) { case COMPLEX_UNIT_PX: return value; case COMPLEX_UNIT_DIP: return value * metrics.density; case COMPLEX_UNIT_SP: return value * metrics.scaledDensity; case COMPLEX_UNIT_PT: return value * metrics.xdpi * (1.0f/72); case COMPLEX_UNIT_IN: return value * metrics.xdpi; case COMPLEX_UNIT_MM: return value * metrics.xdpi * (1.0f/25.4f); } return 0; }\",\"分析可知，通过 getStatusBarHeight() 获取到的状态栏是系统的状态栏 69px（即 25dp），但当使用 APP 内部的 density=2.88 计算时就会只有 24dp，和实际的状态栏高度不一致，所以使用状态栏高度来控制布局的时候就会展示异常。\"]},\"102\":{\"h\":\"参考资料\",\"t\":[\"骚年你的屏幕适配方式该升级了!-今日头条适配方案——jessyan\",\"一种极低成本的 Android 屏幕适配方式——字节跳动\",\"支持不同的像素密度——Android Developers\",\"Android 目前稳定高效的 UI 适配方案——拉丁吴\",\"AndroidAutoSize\",\"请问两种获取屏幕密度的方式有什么区别，望解答多谢\"]},\"103\":{\"h\":\"Android 多渠道打包知识\",\"t\":[\"国内 Android 应用常常要分发到多个应用商店，使用 Android Studio 正确配置 build.gradle 与 AndroidManifest.xml 文件可以一步打包多个渠道。\",\"本文实现的多渠道打包可实现不同渠道：\",\"有不同的项目 id（applicationId）\",\"不同 App 名称（android:label）\",\"不同 App 图标（android:icon）\",\"等等\"]},\"104\":{\"h\":\"1.友盟配置\",\"t\":[\"*具体配置请参考 UMeng 官方文档。\",\"作为第三方统计平台，国内很多软件都使用的是 Umeng 的产品，故而大多数软件多渠道打包配置如下：\",\"添加依赖\",\"../app/build.gradle dependencies { //友盟 sdk compile 'com.umeng.sdk:common:latest.integration' compile 'com.umeng.sdk:analytics:latest.integration' ...}\",\"修改 AndroidManifest.xml\",\"<application> ... <!--友盟初始化appkey和channel--> <meta-data android:value=\\\"${APP_KEY}\\\" android:name=\\\"UMENG_APPKEY\\\"/> <meta-data android:name=\\\"UMENG_CHANNEL\\\" android:value=\\\"${UMENG_CHANNEL_VALUE}\\\" /> </application>\",\"修改 build.gradle\",\"android { productFlavors { beta {} baidu {} zhushou91 {} //不能以数字开头 anzhi {} } productFlavors.all { flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name ,APP_KEY:umenInfo['APP_KEY']] //这里有一个知识点，用 build.gradle 读取 properties 文件信息，用于将部分信息统一放置在本地配置文件中，避免泄漏，若无此类要求可直接使用 APP_KEY:'da15d26d1a'等 } //解决 flavor Dimensions 问题 http://blog.csdn.net/syif88/article/details/75009663 flavorDimensions \\\"versionCode\\\" } //其他 umeng 要求的配置\",\"这样编译完之后，通过通过 build>Generate Signed APK...便可以打包不同渠道的 apk，在友盟统计平台上统计各个渠道的 App 信息了。\"]},\"105\":{\"h\":\"2.Android Studio 实现多渠道打包\",\"t\":[\"方法 1 要求依赖 umeng 模块，使用场景难免有些受限，其实我们也可以自己实现多渠道打包，方法 1 使用的应该也是此原理。\",\"AndroidManifest.xml\",\"在需要根据渠道不同而变化的地方使用${KEY}形式替换掉原先的值。\",\"例如：\",\"<application android:label=\\\"${APP_NAME}\\\" ...> <meta-data android:name=\\\"APP_TEXT\\\" android:value=\\\"${APP_TEXT}\\\"/>//可以在java文件中获取到\",\"app/build.gradle\",\" productFlavors { beta {applicationId = \\\"cf.android666.mykotlin.beta\\\"//每个渠道有不同的包名 manifestPlaceholders = [APP_NAME : name ,APP_TEXT:'beta'] } baidu {applicationId = \\\"cf.android666.mykotlin.baidu\\\" manifestPlaceholders = [APP_NAME:'A APP',APP_TEXT:'baidu'] } }\",\"在 java 中获取meta-data（非必须）\",\"《Android 获取 Manifest 中<meta-data>元素的值》 - CSDN 博客 https://blog.csdn.net/zhang31jian/article/details/29868235\",\"//application 中的 meta-data var appInfo = context.packageManager.getApplicationInfo(context.packageName, PackageManager.GET_META_DATA) //service、receiver 中的 meta-data var appInfo = context.packageManager.getServiceInfo(ComponentName(context,MService::class.java), PackageManager.GET_META_DATA) var appName = appInfo.metaData.getString(\\\"APP_NAME\\\")\"]},\"106\":{\"h\":\"3.生成多个渠道文件夹\",\"t\":[\"还有一种方法，通过在项目中生成多个渠道的文件夹，在里面替换对应的资源文件，从而实现多渠道打包不同项目名，不同 icon 等等\",\"在../app/src/目录下新建对应渠道文件夹，和 main 同级\",\"在该渠道目录下新建对应的资源目录，在打包时自动替换对应资源\",\"​\",\"目录树如下\",\"src --baidu ----res/drawable --beta --main ----res/drawable\"]},\"107\":{\"h\":\"4.More\",\"t\":[\"此外还有美团的多渠道打包技术等\",\"具体可参考文章：美团 Android 自动化之旅—生成渠道包\"]},\"108\":{\"h\":\"Android 实现可折叠 toolbar\",\"t\":[\"使用到的类有：\",\"android.support.design.widget.CoordinatorLayout\",\"android.support.design.widget.AppBarLayout\",\"android.support.design.widget.CollapsingToolbarLayout\",\"android.support.v7.widget.Toolbar\"]},\"109\":{\"h\":\"效果预览\",\"t\":[\"如图：\"]},\"110\":{\"h\":\"简要说明\",\"t\":[\"CoordinatorLayout 类，协调者布局，通过 Behavior 将一个子 view（child）的行为和另一个子 view（dependency）的活动联结起来，从而实现子 view 之间的联动。\",\"AppBarLayout 类，是一个实现了材料设计的默认垂直布局的 ViewGroup，当其是 CoordinatorLayout 类的直接子 view 时，另外一个 CoordinatorLayout 的子 view 指定了 behavior 为 AppBarLayout.ScrollingViewBehavior 的实例（app:layout_behavior=\\\"@string/appbar_scrolling_view_behavior\\\"）,且该子 view 需要是 NestedScrollingChild 的实现类。\",\"CollapsingToolbarLayout 类，提供一个可以折叠的 toolbar 布局，可以在这个布局里面，设置 toolbar 以及和 toolbar 一起联动的子 view，本案例中是一张图片。\",\"Toolbar 类，实现 toolbar 的效果。\"]},\"111\":{\"h\":\"具体实现\",\"t\":[\"源码：github\",\"<android.support.design.widget.CoordinatorLayout> <android.support.design.widget.AppBarLayout> <android.support.design.widget.CollapsingToolbarLayout app:layout_scrollFlags=\\\"scroll|exitUntilCollapsed\\\"> <ImageView app:layout_collapseMode=\\\"parallax\\\" /> <android.support.v7.widget.Toolbar app:layout_collapseMode=\\\"pin\\\" /> </android.support.design.widget.CollapsingToolbarLayout> </android.support.design.widget.AppBarLayout> <android.support.v4.view.ViewPager app:layout_behavior=\\\"@string/appbar_scrolling_view_behavior\\\" /> </android.support.design.widget.CoordinatorLayout>\",\"CoordinatorLayout 在最外层，注意其直接子 view 必须就是要实现联动的 view，否则联动失效。\",\"CollapsingToolbarLayout 必须设置 layout_scrollFlags，其余属性可选。\",\"layout_scrollFlags 说明如下：\",\"scroll：所有想滚动出屏幕的 view 都需要设置这个 flag，没有设置这个 flag 的 view 将被固定在屏幕顶部。\",\"enterAlways：这个 flag 让任意向下的滚动都会导致该 view 变为可见，启用快速“返回模式”。\",\"enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时 enterAlways 也定义了，那么 view 将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。\",\"exitUntilCollapsed：当你定义了一个 minHeight，此布局将在滚动到达这个最小高度的时候折叠。\",\"snap：当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部 25% 显示，它将折叠。相反，如果它的底部 75% 可见，那么它将完全展开。\",\"作者：尹 star\",\"链接：https://www.jianshu.com/p/5287d090e777\",\"CollapsingToolbarLayout 的子 view 需要指定 layout_collapseMode，还有一点需注意：和 toolbar 联动的子 view 高度需大于 toolbar 高度，否则无效果。\",\"ViewPager 就是本案例中触发子 view 联动效果的dependency，需要指定其 behavior：\",\"app:layout_behavior=\\\"@string/appbar_scrolling_view_behavior\\\"\",\"其实际对应于 android.support.design.widget.AppBarLayout$ScrollingViewBehavior，这个是系统实现的一个 behavior，用于和嵌套滑动事件绑定，指定该 behavior 的子 view 需要是 NestedScrollingChild 的实现类（系统提供了 4 个实现类：NavigationMenuView、NestedScrollView、RecyclerView、SwipleRefreshLayout），所以 viewPager 中页面有上述 4 个类或其子类时，才能实现绑定效果。\"]},\"112\":{\"h\":\"延伸\",\"t\":[\"自定义 Behavior\",\"自定义 Behavior 有两个目的：\",\"将两个或多个子 view 绑定；\",\"将一个子 view 与另一个子 view 的滑动事件绑定在一起\",\"两者的差异在于在实现CoordinatorLayout.Behavior<T> 类时候具体重写的方法不一样。\",\"目的 1：需要重写的方法有：\",\"@Override public boolean layoutDependsOn(CoordinatorLayout parent, T child, View dependency) { //如果 dependency 是要依赖的子 view（此处是 TempView 类）的实例，说明它就是我们所需要的 Dependency return dependency instanceof TempView; } //每次 dependency 位置发生变化，都会执行 onDependentViewChanged 方法 @Override public boolean onDependentViewChanged(CoordinatorLayout parent, T child, View dependency) { //根据 dependency 的位置，设置 child 的位置，对 child 进行想要实现的变化 return true;//返回 true 表示改变了 child 的尺寸和位置参数，否则返回 false }\",\"目的 2：需要重写的方法有：\",\"//判断是否要开始根据 dependency 子 view 的行为改变 child 的状态 @Override public boolean onStartNestedScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull ImageView child,@NonNull View directTargetChild, @NonNull View target, int axes, int type) { return child instanceof ImageView && axes == View.SCROLL_AXIS_VERTICAL;//子 view 是 ImageView，并且滑动的方向是垂直的 } //当 dependency 子 view 滑动时，对 child 进行相应处理 @Override public void onNestedPreScroll(@NonNull CoordinatorLayout coordinatorLayout, @NonNull ImageView child, @NonNull View target, int dx, int dy, @NonNull int[] consumed, int type) { super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed, type); }\",\"确定 CoordinatorLayout 中 View 与 View 之间的依赖关系，通过 layoutDependsOn() 方法，返回值为 true 则依赖，否则不依赖。\",\"当一个被依赖项 dependency 尺寸或者位置发生变化时，依赖方会通过 Byhavior 获取到，然后在 onDependentViewChanged 中处理。如果在这个方法中 child 尺寸或者位置发生了变化，则需要 return true。\",\"当 Behavior 中的 View 准备响应嵌套滑动时，它不需要通过 layoutDependsOn() 来进行依赖绑定。只需要在 onStartNestedScroll() 方法中通过返回值告知 ViewParent，它是否对嵌套滑动感兴趣。返回值为 true 时，后续的滑动事件才能被响应。\",\"嵌套滑动包括滑动 (scroll) 和 快速滑动 (fling) 两种情况。开发者根据实际情况运用就好了。\",\"Behavior 通过 3 种方式绑定：1. xml 布局文件。2. 代码设置 layoutparam。3. 自定义 View 的注解。\",\"来源：针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客\"]},\"113\":{\"h\":\"参考文献\",\"t\":[\"针对 CoordinatorLayout 及 Behavior 的一次细节较真 - frank 的专栏 - CSDN 博客\",\"CoordinatorLayout 自定义 Behavior 并不难，由简到难手把手带你撸三款！ - 泡在网上的日子\",\"一步一步深入理解 CoordinatorLayout - 简书\",\"使用 CoordinatorLayout 打造一个炫酷的详情页 - 简书\"]},\"114\":{\"h\":\"Android 控件组\",\"t\":[\"这几天的工作中用到了控件组来实现复杂布局，效果不错，记录下来备用。\"]},\"115\":{\"h\":\"1. 定义控件组布局 xxx_layout.xml\",\"t\":[\"在这里定义要使用的控件组布局，这里的布局决定了布局显示的样子。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" android:padding=\\\"10dp\\\"> <ImageView ... /> <EditText .../> <ImageView ... /> </LinearLayout>\"]},\"116\":{\"h\":\"2.新建自定义属性文件 attr.xml（可选）\",\"t\":[\"在values/attr.xml下新建对应文件，并添加对于自定义属性，以便可以在 activity 布局文件里面使用到该件组时自定义控一些属性。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <resources> <!-- MSearchBar表明是给该控件使用的自定义属性 --> <declare-styleable name=\\\"MSearchBar\\\"> <!-- 以下为示例，可以根据需求增减 --> <attr name=\\\"textColor\\\" format=\\\"color\\\" /> <attr name=\\\"textSize\\\" format=\\\"dimension\\\" /> </declare-styleable> </resources>\",\"在该自定义控件的类 xxx.java 中，通过如下语句获取从用户使用时赋给这些属性的值：\",\"TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.MSearchBar); float textSize = array.getDimension(R.styleable.MSearchBar_textSize, 13);\",\"​\",\"用户动态给这些属性赋值：\",\" <cf.android666.jixiaoyong.weightgroup.weight.MSearchBar ... app:textColor=\\\"@color/colorPrimaryDark\\\"> </cf.android666.jixiaoyong.weightgroup.weight.MSearchBar>\",\"注意，这里写的是app:而非android:。\",\"​\"]},\"117\":{\"h\":\"3. 新建组合控件的类 XXX.java\",\"t\":[\"新建 XXX.java，继承自布局文件的父布局 LinearLayout\",\"更改参数少的构造方法的super(a1,a2,a3)为this(a1,a2,a3)，其中this()中的参数个数为参数最多的构造方法的参数数。\",\"注意 ：一定要做这一步，否则在使用该自定义控件组时，新建该类的对象会提示出错\",\"在最终会被调用的构造方法里面将 xml 里面定义的布局加载进来：\",\"//注意三个参数：布局文件：R.layout.weight_group_layout, root：this，是否依附到 root：true //必须有前两个参数，否则控件的宽高等会有异常 View view = LayoutInflater.from(context).inflate(R.layout.weight_group_layout, this,true);\",\"使用自定义属性：\",\"public MSearchBar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); //do sth TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.MSearchBar); float textSize = array.getDimension(R.styleable.MSearchBar_textSize, 13); editText.setTextSize(textSize); }\",\"给控件组内部控件添加点击事件监听：\",\"xxx.java 要实现点击事件监听接口：\",\"public class MSearchBar extends LinearLayout implements View.OnClickListener{}\",\"自定义接口，供使用 xxx.java 类时实现对监听事件的处理：\",\" public void setImgLeftOnClickListener(OnImgClickListener listener){ listenerL = listener; } public interface OnImgClickListener{ public void onClick(); } private OnImgClickListener listenerL;\",\"对要监听点击事件的控件设置监听，并调用listener.onClick()方法：\",\" //在构造方法等地方设置监听事件 imageViewLeft.setOnClickListener(this); //在 xxx.java 中重写 onClick() 方法 @Override public void onClick(View view) { switch (view.getId()) { //ImageLeft case R.id.imageView: if (listenerL != null) { listenerL.onClick(); } break; //imageRight case R.id.imageView2: if (listenerR != null) { listenerR.onClick(); } break; } }\"]},\"118\":{\"h\":\"4. 使用自定义控件组 xxx.java\",\"t\":[\"在布局文件 main_activity.xml 中添加该控件\",\" <cf.android666.jixiaoyong.weightgroup.weight.MSearchBar android:id=\\\"@+id/search_bar\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" app:textColor=\\\"@color/colorPrimaryDark\\\"> </cf.android666.jixiaoyong.weightgroup.weight.MSearchBar>\",\"​\",\"在 java 中使用该控件，设置监听事件\",\" MSearchBar searchBar = (MSearchBar) findViewById(R.id.search_bar); searchBar.setImgLeftOnClickListener(new MSearchBar.OnImgClickListener() { @SuppressLint(\\\"WrongConstant\\\") @Override public void onClick() { Toast.makeText(MainActivity.this, \\\"Click on Left\\\", Toast.LENGTH_SHORT).show(); } });\"]},\"119\":{\"h\":\"5.效果预览\",\"t\":[\"效果预览\"]},\"120\":{\"h\":\"6.源码\",\"t\":[\"demo 的 github 链接：github\"]},\"121\":{\"h\":\"Android 架构模式一览\",\"t\":[\"Android 的架构依次有：\",\"MVC\",\"MVP\",\"MVVM\",\"MVI\",\"Clean Architecture\",\"上述架构循序渐进，当前主流设计模式是 MVVM，MVI 和 Clean Architecture，这三者的着重点各有不同，可以根据项目规模大小递进选择。\",\"https://github.com/skydoves/android-developer-roadmap/blob/main/README_CN.md\"]},\"122\":{\"h\":\"MVC\",\"t\":[\"MVC，Model-View-Controller，是 Android 最原始的开发方式，通过 Controller（一般为 Activity，Fragment 等）来根据用户输入处理 Model（数据/业务逻辑，比如网络请求/数据读写），并将结果更新到 View（用户界面，包括 XML，Activity，Fragment 等）上面。\",\"在 Android 开发中，MVC 通常被用于实现应用程序的 UI 层。例如，在一个简单的应用程序中，View 可以是 Activity 或 Fragment，Controller 可以是 Activity 或 Fragment 的内部类，Model 可以是 POJO 类（类似 data class）。\",\"但是实际开发时，View 通常会持有 Controller 和 Model 的引用产生耦合，并且几乎所有的逻辑都写在 Controller（比如 Activity/Fragment），随着项目的进行，经常在 Activity 中即负责 View 的展示，又负责业务逻辑及数据更新，导致其臃肿难以维护。\"]},\"123\":{\"h\":\"MVP\",\"t\":[\"因而，MVP应运而生，Model-View-Presenter：\",\"Presenter 持有 View 的抽象接口和 Model，负责二者之间的通信，处理用户的输入，将 Model 的数据处理为 View 可使用的状态；\",\"View 只需持有 Presenter 并实现抽象接口对应的方法即可；\",\"Model 则负责存储数据，暴露访问数据的接口，请求数据等。\",\"这样将 View 和 Model 隔离，V 和 P 一一对应，复杂的视图可以组合复用多个 P。并且此时的 Presenter 不再和 Android API 关联，更容易单元测试和维护。\",\"二者的区别如下图，MVP 相对于 MVC，将 V 和 M 解耦，使得 V 可以比较专注于 View 的逻辑：\",\"https://medium.com/cr8resume/make-you-hand-dirty-with-mvp-model-view-presenter-eab5b5c16e42\",\"关于 MVP 的代码实现，可以参考这个项目。下面是一个简单的示例代码，参考了这个文章：\",\"Model，这里是请求后台提供登录相关数据：\",\"public class LoginInteractor { public void login(final String username, final String password, final OnLoginFinishedListener listener) { // Mock login. I'm creating a handler to delay the answer a couple of seconds new Handler().postDelayed(() -> {...}, 2000); } }\",\"View，这一层一般使用 Activity/Fragment/View 实现，会持有 Presenter 的引用来操作数据，同时为了让 Presenter 可以不直接和 View 关联，需要有一个抽象接口将二者隔离：\",\"interface LoginView { fun showProgress() fun hideProgress() fun setUsernameError() fun setPasswordError() fun navigateToHome() }\",\"然后在 View 中除了正常的逻辑之外，还需要实现这个LoginView接口以便 Presenter 调用：\",\"class LoginActivity : AppCompatActivity(), LoginView { ... // 实现 LoginView 接口方法，这里可能会用到 View 中的 UI Element }\",\"并且，View 中还会初始化并持有 Presenter，以通过他来响应用户的交互：\",\"class LoginActivity : AppCompatActivity(), LoginView { private val presenter = LoginPresenter(this, LoginInteractor()) // 在其他的某个方法里面响用户操作，比如调用 presenter.login() }\",\"Presenter，负责 View 和 Model 的交互，将从 Model 中检索到的数据转化为 View 使用的状态。\",\"// 注意这里传入了 View 的抽象类 LoginView，以及 Model：LoginInteractor class LoginPresenter(var loginView: LoginView?, val loginInteractor: LoginInteractor) : LoginInteractor.OnLoginFinishedListener { // View 会调用这个方法，而 Presenter 则在这里与 Model/View 交互 fun login(username: String, password: String) { loginView?.showProgress() loginInteractor.login(username, password, this) } ... // 在 View 被销毁时调用此方法，避免在 Activity Destroy 之后更新 UI 导致 APP 崩溃 fun onDestroy() { loginView = null } }\",\"但是 MVP 对于简单的项目来说，增加了没必要的复杂性（View 抽象类，Presenter 单独出来等），代码量增加，Presenter 持有 View 在执行耗时任务时可能导致内存泄露，Activity destroy 之后如果 Presenter 访问 View 可能会导致崩溃，并且 View 和 Presenter 存在一定的耦合（当 View 中出现诸如 view 类变化等时需要同步修改 Presenter）。\"]},\"124\":{\"h\":\"MVVM\",\"t\":[\"由此，进化出 MVVM，Model-View-ViewModel，使用 ViewModel 将 View 和 Model 关联起来，同时ViewModel 不持有 View 的引用，而是 View 通过 ViewModel 操作 Model，View 监听 ViewModel 暴露出来的数据并更新 UI。\",\"https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7d\",\"在 MVVM 中ViewModel 只负责处理和提供数据，不再关心 View，便于测试，避免内存泄露；\",\"页面的更新和用户事件处理都由 View 自己处理（比如用户点击页面event之后，View 调用 ViewModel 请求通过Model请求网络/数据库，得到并更新数据state后，View 监听到数据并刷新页面ui），二者的耦合很低。而且 Jetpack 官方提供了 LiveData/StateFlow 等可以监听 Activity 等的生命周期，降低了内存泄露风险（参考：探究 Android MVC、MVP、MVVM 的区别以及优缺点）。\",\"ViewModel 提供数据的读写方法之后，通过使用 DataBinding，可以实现 View 和 ViewModel双向数据绑定（具体的代码实现可以参考TicTacToe-MVVM）。\",\"<CheckBox android:id=\\\"@+id/myCheckBox\\\" android:checked=\\\"@={viewmodel.isChecked}\\\" // 数据双向绑定 android:onClick=\\\"@{() -> viewmodel.onClicked(1,2)}\\\" // 绑定事件 />\"]},\"125\":{\"h\":\"MVI\",\"t\":[\"而为了进一步降低 MVVM 中 ViewModel 和 View 的耦合问题（MVVM 中 View 要调用 ViewModel 方法触发数据处理，数据可以双向绑定），简化数据流的管理，进一步演化出了 MVI（Model-View-Intent）：\",\"将用户操作通过 Intent 传递给 ViewModel，ViewModel 据此更新数据，并将数据传递给 View 展示，在这个过程中事件和数据是单向的。\",\"⚠️ 注意，这里的 Intent 表示意图、事件，并非 Android 中 Activity 之间传递的Intent类\",\"https://proandroiddev.com/best-architecture-for-android-mvi-livedata-viewmodel-71a3a5ac7ee3\",\"MVI 和 MVVM 的最大区别在于，UI 层不再直接调用 VM 的各个方法执行业务逻辑（比如下载数据）而是通过V 给 VM 发送 Intent（比如 viewModel.setEvent），由 VM 内部根据不同的 Intent 执行不同的逻辑，从而使得V 和 VM 的耦合降低，此外MVI 强调单一数据源，数据是单向流动的。\",\"代码实现如下（参考自：MVI-JetpackCompose-Github）：\",\"UI 给 VM 发送 Intent：\",\"@Composable fun ReposScreenDestination(UserId: String, navController: NavController) { val viewModel = getViewModel<ReposViewModel> { parametersOf(UserId) } ReposScreen( state = viewModel.viewState.value, effectFlow = viewModel.effect, // View 中的事件都通过发送 Intent 给 ViewModel 处理 onEventSent = { event -> viewModel.setEvent(event) }, onNavigationRequested = { navigationEffect -> if (navigationEffect is ReposContract.Effect.Navigation.Back) { navController.popBackStack() } }, ) }\",\"VM 内部根据不同的 Intent 处理逻辑，并暴露单一数据 State 给 View：\",\"class ReposViewModel( private val userId: String, private val githubRepository: GithubRepository // 这里实际处理各种读、写数据的操作 ) : BaseViewModel<ReposContract.Event, ReposContract.State, ReposContract.Effect>() { init { getAll() } private val _viewState: MutableState<UiState> = mutableStateOf(initialState) // ViewModel 一般只会对外暴露一个 State 供 View 使用 val viewState: State<UiState> = _viewState // ViewModel 通过这一个方法处理所有来自 View 的事件，调用内部方法 override fun handleEvents(event: ReposContract.Event) { when (event) { ReposContract.Event.BackButtonClicked -> { setEffect { ReposContract.Effect.Navigation.Back } } ReposContract.Event.Retry -> getAll() } } // ViewModel 要实现的逻为内部方法，可以自由修改实现 private fun getAll() { viewModelScope.launch { getUser() getRepos() } } }\",\"上述 ViewModel 暴露出来的数据，在 View 中使用如下：\",\"Scaffold( topBar = { ReposTopBar { onEventSent(ReposContract.Event.BackButtonClicked) } } ) { // 根据不同的 state 展示 UI when { state.isUserLoading || state.isReposLoading -> Progress() // View 通过 Intent 和 ViewModel 交互 state.isError -> NetworkError { onEventSent(ReposContract.Event.Retry) } else -> { state.user?.let { user -> ReposList( header = { ReposListHeader(userDetail = user) }, reposList = state.reposList ) } } } }\",\"分析上述代码的逻辑，可以看出，在 MVI 中，View 发送将用户操作使用Intent 给ViewModel 处理，并从 ViewModel 获取到处理后的状态更新界面，此外 ViewModel 还负责使用 Repository 实际处理 Data，大体的逻辑示意如下：\",\"https://www.scaler.com/topics/mvi-architecture-android/\"]},\"126\":{\"h\":\"Clean Architecture\",\"t\":[\"通过观察上述分析，我们不难发现，无论是 MVVM 还是 MVI 中，随着业务发展，VM 处理的逻辑会日益增长，繁重。在 MVVM/MVI 的基础之上，通过对业务逻辑的进一步抽象，可以实现Clean Architecture模式：\",\"这也是 Android 官方如今力推的模式，将 Android APP 分为三部分：\",\"UI Layer，应用层，用于和用户交互，由 View（下图的 UI elements）和 ViewModel/单纯类（下图中的 State holders）等组成，和 Android API 强关联，发起 event，展示新的 state。\",\"Domain Layer（复杂项目可选），业务逻辑层，对于复杂项目，可以将一些重要的业务抽象出来（比如登录逻辑：检验密码，请求登录，更新登录状态等流程），也包括一些之前使用工具类实现的方法（比如格式化日期等）。这部分的代码与 Android API 没有任何关联，是平台无关的抽象逻辑，与 Data Layer 通过抽象接口解耦（Domain Layer 只通过 repository 的抽象类与 Data 交互，而 Data Layer 则负责实现具体逻辑，比如请求数据库，网络等）。不依赖于具体的技术或框架，方便移植。\",\"Data Layer，数据层，这一层负责实现上一层调用的抽象接口，真正实现对数据的增删改查。\",\"上述三者中，UI Layer 依赖于 Domain Layer 处理业务逻辑，Data Layer 依赖于基础框架（网络，数据库等）来访问数据，而 Domain Layer 则不依赖上述二者方便调试和复用。\",\"💡 注意 Clean Architecture 是一种架构思想，本文只介绍基于 MVVM/MVI 的实现，基于 MVP 的实现可参考 android-clean-architecture-boilerplate。\",\"Domain layer相当于将一些常用，复杂的逻辑单独提取出来（比如过滤新闻列表，提供日期格式化工具），避免 UI 过于繁重。这个层单纯处理业务逻辑，主线程安全，无生命周期，可以复用。一定程度上减轻了 ViewModel 的负担。\",\"Android Clean Arhictecture https://developer.android.com/topic/architecture?hl=zh-cn\",\"在上图中，UI elements 用来向用户展示 UI，State holder 则使用 ViewModel/普通类等类管理数据，对 UI 暴露 data，并处理逻辑。这二者组合实现了在屏幕上展示应用数据，并在用户交互等情况下导致数据变化时，将最新数据展示到 UI 上。\",\"在 Clean Architecture 中Presentation/UI Layer，Domain Layer和Data Layer这三者的层级关系，可以看下图：\",\"https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29\",\"一个重要的原则就是，高层模块（圆圈内部）不应该依赖底层模块（圆圈外部），两者应该依赖于抽象。\",\"这个架构满足了以下常见架构原则：\",\"关注点分离\",\"数据驱动 UI（更新）\",\"单一数据来源\",\"单向数据流\",\"Keep in mind that you don't own implementations of Activity and Fragment; rather, these are just glue classes that represent the contract between the Android OS and your app. The OS can destroy them at any time based on user interactions or because of system conditions like low memory.\",\"开发者并不实际拥有/控制 Activity 和 Fragment，系统可以在必要时候回收他们，因此要尽量减少对其的依赖，只在这里处理和 UI、操作系统相关的逻辑，将关注点分离。\",\"从数据驱动 UI：应该使用数据模型 data models（最好是持久模型）驱动 UI，这些数据模型独立于 UI 和其他组件，实现在操作系统销毁 APP 进程时他们也被销毁后，用户不会丢失数据（可以从本地，网络恢复）。\",\"单一事实来源 Single source of truth：应用中定义的数据类型，应该分配一个单一事实来源（SSOT），这种情况下 SSOT 唯一持有/修改数据，对外暴露无可修改数据，在接受函数或事件时更新数据，比如数据库，ViewModel 等。这样将对数据修改集中到一个地方，方便定位问题。\",\"单向数据流 Unidirectional Data Flow：在 UDF 中，数据 state 只会沿一个方向流动，而 event 沿着相反方向修改数据。这样保证数据一致性，不容易出错，便于调试。比如 jetpack compose 中，每个 composable 函数从上一级接受数据，并将事件暴露给上一级（数据向下，事件向上）\",\"https://developer.android.com/topic/architecture/ui-layer\",\"⚠️ 警告：请避免在 ViewModel 的 init 块或构造函数中启动异步操作。异步操作不应是创建对象时的附带效应，因为异步代码在对象完全初始化之前可能会对该对象执行读写操作。这也称为对象泄露，可能会导致细微且难以诊断的错误。使用 Compose 状态时，这一点尤为重要。当 ViewModel 存储了 Compose 状态字段时，请勿在更新 Compose 状态字段的 ViewModel 的 init 块中启动协程，否则可能会出现 IllegalStateException。\",\"看一个 Clean Architecture 在 Andorid 中代码实现（Android-CleanArchitecture-Kotlin）：\",\"下面代码的整体架构如下：\",\"https://fernandocejas.com/2018/05/07/architecting-android-reloaded/\",\"在UI Layer中，使用 Activity/Fragment 等与 ViewModel 交互：\",\"class MovieDetailsFragment : BaseFragment() { private val movieDetailsViewModel: MovieDetailsViewModel by inject() override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // 监听 ViewModel 的状态，刷新 UI with(movieDetailsViewModel) { observe(movieDetails, ::renderMovieDetails) failure(failure, ::handleFailure) } // 调用 ViewModel 的方法传递用户 event moviePlay.setOnClickListener { movieDetailsViewModel.playMovie(trailer) } } }\",\"在Domain Layer，使用 XXXUseCase 提取通用的业务逻辑传递给 ViewModel，将 ViewModel 和 DataLayer 隔离解耦：\",\"class MovieDetailsViewModel( // 这里传入的两个参数都是 UseCase，而非 Repository private val getMovieDetails: GetMovieDetails, private val playMovie: PlayMovie ) : BaseViewModel() { private val _movieDetails: MutableLiveData<MovieDetailsView> = MutableLiveData() // 对 View 只暴露这个状态 val movieDetails: LiveData<MovieDetailsView> = _movieDetails fun loadMovieDetails(movieId: Int) = getMovieDetails(Params(movieId), viewModelScope) { it.fold(::handleFailure,::handleMovieDetails) } fun playMovie(url: String) = playMovie(PlayMovie.Params(url), viewModelScope)\",\"再看一下 UseCase 的代码：\",\"abstract class UseCase<out Type, in Params> where Type : Any {...} // 这里 UseCase 跟具体的 Repository 交互 class GetMovieDetails(private val moviesRepository: MoviesRepository) : UseCase<MovieDetails, Params>() { override suspend fun run(params: Params) = moviesRepository.movieDetails(params.id) data class Params(val id: Int) }\",\"在Data Layer，暴露给 Domain Layer 的也是一个抽象类（重要，这样对 Domain Layer 屏蔽了底层的实现：网络、数据库、本地缓存），具体的实例则通过 DI 插入：\",\"interface MoviesRepository {// MoviesRepository 类是一个抽象类 fun movies(): Either<Failure, List<Movie>> fun movieDetails(movieId: Int): Either<Failure, MovieDetails> class Network( // 下面这两个是实际实现网络/数据库读取的工具类 private val networkHandler: NetworkHandler, private val service: MoviesService ) : MoviesRepository { override fun movies(): Either<Failure, List<Movie>> { // 这里真正实现 MoviesRepository 的逻辑，比如请求网络/数据库数据 } } }\",\"上述代码的详细分析可以参考作者的文章《构建 Android...重装上阵》，这里简要分析一下：\",\"通过使用 Clean Architecture，我们将 Android APP 分为 UI Layer，Domain Layer，Data Layer 三部分，其中 Domain Layer 是 APP 的主要业务逻辑，不依赖于其他部分，和 Android API 无关，可移植，是 APP 的中心，而 UI Layer 专注处理与用户的交互，而 Data Layer 则实际负责数据读写，这部分的实现可以自由切换。\"]},\"127\":{\"h\":\"总结\",\"t\":[\"从 MVC、MVP，到 MVVM、MVI，再到结合 Clean Architecture，随着 Android 开发架构的演进，代码层级越多，抽象越深，带来的是不同层级之间耦合降低，各个层级的关注点分离，更容易测试和维护。\"]},\"128\":{\"h\":\"参考资料\",\"t\":[\"《Android 架构指南》https://developer.android.com/topic/architecture\",\"《The Clean Architectur uncle-bob》https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\",\"《How to architect Android apps: a deep dive into principles, not rules 如何构建 Android 应用程序：深入探讨原则，而不是规则》https://proandroiddev.com/how-to-architect-android-apps-a-deep-dive-into-principles-not-rules-2f1eb7f26402\",\"《干净的架构初学者指南》https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165\",\"《Architecting Android...The clean way?》https://fernandocejas.com/blog/engineering/2014-09-03-architecting-android-the-clean-way/\",\"《Android Clean Architecture Kotlin》https://github.com/android10/Android-CleanArchitecture-Kotlin\",\"《构建 Android 重装上阵》https://fernandocejas.com/2018/05/07/architecting-android-reloaded/\",\"《Google 推荐使用 MVI 架构？卷起来了~》https://juejin.cn/post/7048980213811642382\"]},\"129\":{\"c\":[\"android\"]},\"130\":{\"h\":\"Android 笔记之 Xfermode\",\"t\":[\"Xfermode是 Android 中用来指示Paint绘制的内容与 View 中已有内容的混合计算方式，也就是用来确定图形绘制到目标图形的时候，如何处理两个图形重合部分的颜色变化。共 18 个，分为 Alpha 合成和混合两种。\",\"设要绘制的图形为src，已经绘制好的图形为dst。\",\"需要注意的是，这些图片除了要绘制的图形有着色之外，其他部分要为透明，并且包括透明区域在内的图片大小（宽高）要能完全覆盖另外一张图片的图形区域，否则绘制出的图形可能与预设的效果不一致\",\"按照官方的定义，不同Xfermode绘制结果如下：\"]},\"131\":{\"h\":\"注意事项\",\"t\":[\"要实现如上效果，需要注意：\",\"src和dst符合要求（要有合适的透明区域）\",\"这是因为xfermode的效果，使用透明部分的像素与已有图形对应位置交叉作用，得出所需要的效果，如果透明区域过小，则无法作用到对应的图形。下面这个来自 Hencoder.com 的图可以很形象的解释：\",\"在新的图层绘制（在新的图层按照xfermode规则绘制，然后再将其绘制到原有图层）：\",\"//新建图层 val saveCount = canvas.saveLayer(0F,0F,width.toFloat(),height.toFloat(),null,Canvas.ALL_SAVE_FLAG) //dst 已经绘制的图形 ; src 我们要绘制的图形 canvas.drawBitmap(dst,0F, 0F, dstPaint) srcPaint.xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_OUT) canvas.drawBitmap(src,0F, 0F, srcPaint) srcPaint.xfermode = null //将新图层绘制到原有图层上 canvas.restoreToCount(saveCount)\",\"关闭硬件加速（可选）\",\"硬件加速的本质是把一部分 CPU 计算的工作量交给 GPU 完成，可以加速绘制速度。\",\"但是由于硬件加速不支持canvas.drawXXX()的部分方法，为了避免在某些机型上面无法使用这些方法，可以关闭硬件加速：\",\"view.setLayerType(LAYER_TYPE_SOFTWARE, null);\",\"关于硬件加速更详细的说明可以参考这里：HenCoder Android 自定义 View 1-8 硬件加速\"]},\"132\":{\"h\":\"Xfermode 分类\",\"t\":[\"HenCoder.com关于PorterDuff.Mode.DST_IN的动画解释：\",\"可以看出，Xfermode的本质是处理dst与src重合与未重合部分的展示与否，以及颜色变化。\",\"这里的“重合部分”与“未重合部分”，其实也包括了各个图形的透明部分，将dst与src的透明与不透明颜色相互作用，才会出现下述效果。\",\"名称\",\"含义\",\"CLEAR\",\"清除所有内容\",\"DST\",\"只绘制DST\",\"DST_ATOP\",\"先绘制SRC，再在顶部绘制DST与SRC重合的部分\",\"DST_IN\",\"只绘制DST与SRC重合部分\",\"DST_OUT\",\"只绘制DST与SRC未重合部分\",\"DST_OVER\",\"将DST绘制在SRC上面\",\"SRC\",\"只绘制SRC\",\"SRC_ATOP\",\"先绘制DST，再在顶部绘制SRC与DST重合的部分\",\"SRC_IN\",\"只绘制SRC与DST重合部分\",\"SRC_OUT\",\"只绘制SRC与DST未重合部分\",\"SRC_OVER\",\"将SRC绘制在DST上面\",\"XOR\",\"ADD\",\"DARKEN\",\"LIGHTEN\",\"MULTIPLY\",\"OVERLAY\",\"SCREEN\",\"各个效果如下 (源码及使用见github)：\"]},\"133\":{\"h\":\"参考文献\",\"t\":[\"HenCoder Android 开发进阶：自定义 View 1-2 Paint 详解\",\"HenCoder Android 自定义 View 1-8 硬件加速\",\"PorterDuff.Mode\"]},\"134\":{\"c\":[\"android\"]},\"135\":{\"h\":\"Android 笔记之跨进程通信\",\"t\":[\"Android 中的跨进程通信 IPC 主要有以下几种方式：\",\"BroadcastReceiver\",\"ContentProvider\",\"AIDL\",\"Messenger\",\"Socket\",\"文件\",\"Linux 已经提供了管道、消息队列、共享内存和 Socket 等 IPC 机制\",\"进程是资源分配的基本单位，线程是调度的基本单位。\"]},\"136\":{\"h\":\"一些基础知识\",\"t\":[\"以下内容来自：\",\"作者：SylvanasSun 链接：https://juejin.im/post/59f8691b51882534af254317 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\",\"Linux 为每个进程维护了一个单独的虚拟地址空间。虚拟地址空间分为内核空间与用户空间，用户空间包括代码、数据、堆、共享库以及栈，内核空间包括内核中的代码和数据结构，内核空间的某些区域被映射到所有进程共享的物理页面。Linux 也将一组连续的虚拟页面（大小等于内存总量）映射到相应的一组连续的物理页面，这种做法为内核提供了一种便利的方法来访问物理内存中任何特定的位置。\",\"示意图来自 https://juejin.im/post/59f8691b51882534af254317\",\"Linux 通过将一个虚拟内存区域与一个硬盘上的文件关联起来，以初始化这个虚拟内存区域的内容，这个过程称为内存映射（memory mapping）。这种将虚拟内存系统集成到文件系统的方法可以简单而高效地把程序和数据加载到内存中。\",\"普通文件映射就是将一个文件与一块内存建立起映射关系，对该文件进行 IO 操作可以绕过内核直接在用户态完成（用户态在该虚拟地址区域读写就相当于读写这个文件）。匿名文件映射一般在用户空间需要分配一段内存来存放数据时，由内核创建匿名文件并与内存进行映射，之后用户态就可以通过操作这段虚拟地址来操作内存了。匿名文件映射最熟悉的应用场景就是动态内存分配（malloc() 函数）。\",\"内存映射提供了共享对象的机制，来避免内存资源的浪费。一个对象被映射到虚拟内存的一个区域，要么是作为共享对象，要么是作为私有对象的。 进程对共享对象的写操作对于其他也使用到该共享对象的进程是可见的。\",\"CPU 获取到虚拟地址，然后通过 MMU（内存管理单元）将其翻译为物理地址。\"]},\"137\":{\"h\":\"linux IPC\",\"t\":[\"优缺点参考：\",\"管道：在创建时分配一个 page 大小的内存，缓存区大小比较有限；\",\"消息队列：信息复制两次，额外的 CPU 消耗；不合适频繁或信息量大的通信；\",\"共享内存：无须复制，共享缓冲区直接付附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决；\",\"套接字：作为更通用的接口，传输效率低，主要用于不通机器或跨网络的通信；\",\"信号量：常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\",\"信号：不适用于信息交换，更适用于进程中断控制，比如非法内存访问，杀死某个进程等；\",\"作者：Gityuan 链接：https://www.zhihu.com/question/39440766/answer/89210950\",\"管道 Pipe\",\"管道 是将标准输入输出连接起来的进程。 数据复制 2 次，有长度限制\",\"示意图来自 https://pic002.cnblogs.com/images/2012/426620/2012110216160766.jpg\",\"如图，进程 1 将数据写入到管道（内存缓存区），进程 2 从管道中读取数据。数据从写端流入管道，从读端流出，这样就实现了进程间通信\",\"每个进程的输出被当做下一个进程的输入。\",\"ls -l | less //将ls -l 的结果输入到less中，实现分页\",\"Linux 进程间通信之管道 (pipe)、命名管道 (FIFO) 与信号 (Signal)https://blog.csdn.net/skyroben/article/details/71513385\",\"消息队列 Message\",\"是一串可以有不同类型的消息块的链表，可以避免阻塞。数据复制 2 次，有长度限制，缓冲小。\",\"https://www.ibm.com/developerworks/cn/linux/l-ipc/part3/index.html\",\"共享内存\",\"多个进程可以访问一个公用的内存空间。效率最高的 IPC。数据内存复制 0 次，但是没有同步互斥机制\",\"套接字 Socket\",\"传输效率低，数据复制 2 次\",\"信号量 semaphore\",\"与管道不同，信号量是为了保护进程共享资源在同一时刻只能被一个进程访问。解决同步和互斥问题。\",\"sv：信号变量\",\"对信号量的操作只有一下 P(sv) 和 V(sv) 两个原子操作：\",\"进程 1 访问资源时对信号量进行等待操作 P(sv)（如果 sv>0 则操作资源并将信号量 -1，否则挂起进程等待）；\",\"当该进程 1 对资源执行完操作后，对信号量进行发送操作 V(sv)（此时如果有进程 2 等待 sv 而挂起，则恢复进程 2，否则就给 sv+1）\",\"https://blog.csdn.net/skyroben/article/details/72513985\",\"信号 Signal\",\"信号是进程间通信中唯一的异步通信机制，通知接收信号的进程发生了什么事情。而进程接受到信号后可以忽略，捕获处理，或者使用系统默认操作。\",\"https://www.ibm.com/developerworks/cn/linux/l-ipc/part2/index1.html\",\"只能承载很小的信息量，主要用在进程的中断控制\"]},\"138\":{\"h\":\"Binder\",\"t\":[\"数据拷贝 1 次，有权限校验（为发送方添加了 UID/PID 身份）\",\"参与 Binder 通信的所有角色 图片来自 https://blog.csdn.net/universus/article/details/6211589\",\"时序图：\",\"20200422115253\",\"理论上的 Binder 逻辑：\",\"SMgr 提供的 Binder 比较特殊，它没有名字也不需要注册，当一个进程使用 BINDER_SET_CONTEXT_MGR 命令将自己注册成 SMgr 时 Binder 驱动会自动为它创建 Binder 实体（这就是那只预先造好的鸡）。其次这个 Binder 的引用在所有 Client 中都固定为 0 而无须通过其它手段获得。\",\"在数据从发送方向接收方拷贝时，驱动会根据发送数据包的大小，使用最佳匹配算法从缓存池中找到一块大小合适的空间，将数据从发送缓存区复制过来。\",\"为了实现用户空间到用户空间的拷贝，Binder 驱动的 mmap() 分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用 copy_from_user() 将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间，这就是 Binder 只需一次拷贝的‘秘密’。\",\"版权声明：本文为 CSDN 博主「universus」的原创文章，遵循 CC 4.0 BY-SA\",\"版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/universus/article/details/6211589\",\"主要参考文章：https://blog.csdn.net/universus/article/details/6211589\",\"https://blog.csdn.net/freekiteyu/article/details/70082302\",\"Binder 通信主要涉及一下对象：\",\"Server\",\"Client\",\"ServerManager\",\"Binder 驱动\",\"首先要知道，Server，Client 以及 ServerManager 一般都在不同的进程之中，那么 Server，Client 如何与 ServerManager 通信并注册/查询所需的服务呢？这里就需要用到0 号引用 Binder。\",\"0 号引用 Binder 是 ServerManager 内部创建匿名 Binder，所有的 Client（相对于 ServerManager 来说其他和他交互的都是 Client）都默认持有这个 Binder 的引用。\",\"所以一个完整的 AIDL 通信过程如下：\",\"Server 创建一个 Binder 和对应名字\",\"Server 通过持有的 0 号引用 Binder 和 ServerManager 通信。 将生成的 Binder 和对应名字发送到 Binder 驱动，Binder 驱动会为这个 Binder 在内核空间创建对应实体节点及其引用（复制了一次），并通过 0 号引用将其发给 ServerManager。\",\"ServerManager 收到内核中的 Binder 对象引用及名字后将其保存到查找表中。\",\"Client 通过 0 号引用 Binder 和 ServerManager 通信。 Client 将需要的 Binder 的名字发给 ServerManager，ServerManager 查询到已经注册的内核 Binder 引用并将其发给 Client。\",\"Client 获取到内核 Binder 的引用进行操作。\",\"再来看看一个完整的流程：\",\"在 Service 中，我们会先创建一个 mIBinder 对象并且在public IBinder onBind(Intent intent)方法返回。\",\"private IBinder mIBinder = new AidlBinderInterface.Stub() { ... //这里实现我们服务能够提供的方法 }\",\"追踪 onBind 方法，我们会发现mIBinder的对象会在 ActivityThread 中的private void handleBindService(BindServiceData data)方法中被传入到 IActivityManager 的 publishService 方法中。\",\"private void handleBindService(BindServiceData data) { ... IBinder binder = s.onBind(data.intent); ActivityManager.getService().publishService( data.token, data.intent, binder); }\",\"ActivityManager.getService() 方法是通过 IPC 获取到 ActivityManager 的引用\",\" /** * @hide */ public static IActivityManager getService() { return IActivityManagerSingleton.get(); } private static final Singleton<IActivityManager> IActivityManagerSingleton = new Singleton<IActivityManager>() { @Override protected IActivityManager create() { final IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE); final IActivityManager am = IActivityManager.Stub.asInterface(b); return am; } };\",\"而根据这篇文章，这个 binder 最终会被传输到绑定这个服务时所用的 ServiceConnection 对象的onServiceConnected方法中（即 mIBinder 通过 ServerManager 从 Service 传递到了 Client）：\",\"private ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName name, IBinder service) { mServiceInterface = AidlBinderInterface.Stub.asInterface(service); //我们通过得到的这个 mServiceInterface 可以在客户端调用服务所实现的方法 } @Override public void onServiceDisconnected(ComponentName name) { } };\",\"根据Android 服务之 bindService 源码分析mConnection 会通过context.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);最终在 ActivityManagerService 通过 Binder 驱动程序调用 ActivityThread 类中的 scheduleBindService 方法传递到 Service 所在进程中，并根据 Service 的状态不同而被调用对应方法（即 mConnection 通过 ServerManager 从 Client 传递到了 Service）。\",\"图片来自 https://img-blog.csdn.net/20160719100800917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\",\"在这其中我们用到了两个涉及到 AIDL 文件：\",\"private IBinder mIBinder = new AidlBinderInterface.Stub() {}\",\"mServiceInterface = AidlBinderInterface.Stub.asInterface(service);\",\"再来看看我们写的对应的 AIDL 文件：\",\"interface AidlBinderInterface { //在这里定义服务需要提供的方法 }\",\"在这个文件中都是我们自己定义的方法，系统自动帮我们实现了更详细的内容：\",\"package com.example.aidl; // Declare any non-default types here with import statements public interface AidlBinderInterface extends android.os.IInterface { /** * Local-side IPC implementation stub class. */ public static abstract class Stub extends android.os.Binder implements com.example.aidl.AidlBinderInterface { private static final java.lang.String DESCRIPTOR = \\\"com.example.aidl.AidlBinderInterface\\\"; /** * Construct the stub at attach it to the interface. * 将 DESCRIPTOR 和这个接口绑定到一起 * 本方法会在服务创建 IBinder 对象的时候调用 */ public Stub() { this.attachInterface(this, DESCRIPTOR); } /** * Cast an IBinder object into an com.example.aidl.AidlBinderInterface interface, * generating a proxy if needed. */ public static com.example.aidl.AidlBinderInterface asInterface(android.os.IBinder obj) { if ((obj == null)) { return null; } // 查询本地是否有符合该描述（DESCRIPTOR）接口的 Binder 对象 android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // 有的话直接返回本地对象 if (((iin != null) && (iin instanceof com.example.aidl.AidlBinderInterface))) { return ((com.example.aidl.AidlBinderInterface) iin); } // 没有的话，创建代理类，进行跨进程通信 return new com.example.aidl.AidlBinderInterface.Stub.Proxy(obj); } @Override public android.os.IBinder asBinder() { return this; } // 在通信时，如果 asInterface 返回本地对象，则会执行本地对接口（DESCRIPTOR）的实现方法， // 否则就会调用代理类 com.example.aidl.AidlBinderInterface.Stub.Proxy 中对应的方法进行跨进程通信 @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException { java.lang.String descriptor = DESCRIPTOR; switch (code) { case INTERFACE_TRANSACTION: { reply.writeString(descriptor); return true; } case TRANSACTION_getAvailablePointTags: { data.enforceInterface(descriptor); java.util.List<String> _result = this.getAllStringTags(); reply.writeNoException(); reply.writeTypedList(_result); return true; } ... default: { return super.onTransact(code, data, reply, flags); } } } /** * 代理类 * 通过 Binder 对象 mRemote 执行 AidlBinderInterface 接口的具体方法 * 具体则在 mRemote.transact() 实现了跨进程 */ private static class Proxy implements com.example.aidl.AidlBinderInterface { private android.os.IBinder mRemote; Proxy(android.os.IBinder remote) { mRemote = remote; } @Override public android.os.IBinder asBinder() { return mRemote; } public java.lang.String getInterfaceDescriptor() { return DESCRIPTOR; } //系统对我们在 AIDL 中定义的方法的具体实现 @Override public java.util.List<StringTag> getAllStringTags() throws android.os.RemoteException { android.os.Parcel _data = android.os.Parcel.obtain(); android.os.Parcel _reply = android.os.Parcel.obtain(); java.util.List<StringTags> _result; try { _data.writeInterfaceToken(DESCRIPTOR); // mRemote.transact() 方法会：1.给服务端发消息 2.挂起当前线程 3.收到服务端返回后唤醒当前线程 mRemote.transact(Stub.TRANSACTION_getAllStringTags, _data, _reply, 0); _reply.readException(); _result = _reply.createTypedArrayList(StringTag.CREATOR); } finally { _reply.recycle(); _data.recycle(); } return _result; } //系统对每个接口方法的编号 static final int TRANSACTION_getAllStringTags = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0); } //下面这些是系统根据我们在 aidl 中定义的方法写的接口 public java.util.List<StringTag> getAllStringTags() throws android.os.RemoteException {} }\",\"可知mRemote便是指向 AMS 服务的BinderProxy对象 https://www.diycode.cc/topics/384\",\"https://www.cnblogs.com/a284628487/p/3187320.html\",\"图片来自 https://images0.cnblogs.com/blog/391137/201307/12211553-49c477a875e84b2aae764c67f38f26b2.jpg\"]},\"139\":{\"h\":\"others\",\"t\":[\"如果在 BroadcastReceiver 的 onReceive 方法中创建一个线程，那么当该方法返回时，Android 系统就会认为该 BroadcastReceiver 已经完成任务了，从而会在需要回收内存时杀死进程以及其中的 Thread。创建一个JobService可以避免这个情况。\",\"So, the system may kill the process at any time to reclaim memory, and in doing so, it terminates the spawned thread running in the process.\",\"https://developer.android.google.cn/guide/components/activities/process-lifecycle?hl=zh-cn\",\"https://blog.csdn.net/universus/article/details/6211589\",\"https://www.jianshu.com/p/429a1ff3560c\",\"https://www.cnblogs.com/a284628487/p/3187320.html\",\"http://hoyouly.fun/2019/07/17/Android-AIDL/\",\"https://juejin.im/entry/59c9cd59f265da065754e6f1\"]},\"140\":{\"h\":\"Android 系统架构简介\",\"t\":[\"说明：本文基于Android 系统开篇 - Gityuan 博客 | 袁辉辉博客 的学习笔记整理\",\"Android 系统大体分为 4 个模块，从底层开始依次是 1.linux 内核、2.系统库+Android 运行时、3.框架层、4.应用层。\",\"下图描述了 Android 系统从开机到 Apk 运行的整个流程。\",\"系统启动框架图，来自 gityuan.com\",\"流程如下：Loader -> Kernel -> Native-> Framework -> App\",\"Loader 层\",\"Boot ROM：开机时，引导芯片从 ROM 读取读取初始化代码，加载引导程序到 RAM 中。\",\"Boot Loader：是启动 Android 系统之前的引导程序，检查 RAM、初始化硬件参数等。\",\"Kernel 层（即 Android 内核层，进入 Android 系统）\",\"swapper 进程（pid=0）：Boot Loader 启动 swapper（idle）进程，是由内核创建的第一个进程，用来初始化进程管理、内存管理、驱动等等。\",\"kthreadd 进程（pid=2）：是 Linux 系统的内核进程，是所有内核进程的鼻祖。\",\"Syscall，在 Native 和 Kernel 之间的系统调用层。\",\"Native 层\",\"init 进程（pid=1）：由 swapper 进程创建，是所有用户进程鼻祖\",\"init 进程孵化出用户守护进程、启动 ServiceManager 管理系统服务，启动开机动画 Bootnaim。\",\"JNI，Java 层和 Native（C/C++）层之间。\",\"Framework 层\",\"Zygote 进程：由 init 进程 fork 生成，是Android 系统第一个 java 进程，是所有 java 进程的父进程\",\"SystemServer 进程：由 Zygote 进程 fork 而来，是 Zygote 孵化的第一个进程，负责启动和管理整个java framework，如 ActivityManager、PowerManager...\",\"MediaServer 进程：由 init 进程 fork 而来，负责启动和管理整个C++ framework\",\"APP 层\",\"Launcher：Zygote 进程孵化的第一个 App 进程，桌面 App。\",\"其他由 Zygote 进程孵化的系统进程（Browser、Phone...）和非系统 app 进程。\",\"扼要内容如图：\",\"系统启动示意图\",\"Android 常用的通信方式\",\"Binder\",\"Socket\",\"Handler\",\"Binder/Socket 用于进程间（都具有独立的地址空间）通信，而 Handler 消息机制用于同进程的线程间（共享内存空间）通信\",\"在 Android 系统中：\",\"Zygote 进程 --> Socket 机制\",\"SystemServer、MediaServer、App 之间 --> Binder IPC\",\"同一进程不同线程间 --> Handler\"]},\"141\":{\"h\":\"Android 笔记之贝塞尔曲线的应用\",\"t\":[\"贝塞尔曲线是用节点和控制点绘制的高精度曲线，Android 中常用的有二阶、三阶贝塞尔曲线。本文介绍使用贝塞尔曲线绘制折线图，并实现动画效果。\",\"本文代码链接：https://github.com/jixiaoyong/library/blob/master/library/src/main/java/cf/android666/applibrary/view/BezierViewAnim.kt\"]},\"142\":{\"h\":\"贝塞尔曲线介绍\",\"t\":[\"下图是二阶贝塞尔曲线绘制方法介绍，只要各个点满足条件：AD/AB = BE/BC = DF/DE，那么当沿着当前线段移动 D、E 点时，F 点的运动轨迹就是一个贝塞尔曲线：\",\"图片来自：https://www.cnblogs.com/wjtaigwh/p/6647114.html\",\"动图示意如下：\",\"可以在下面的两个网站在线体验贝塞尔曲线：\",\"https://aaaaaaaty.github.io/bezierMaker.js/playground/playground.html\",\"https://bezier.method.ac/\"]},\"143\":{\"h\":\"计算控制点坐标\",\"t\":[\"在绘制折线图时，我们获取的数据可以当做贝塞尔曲线的端点，Android 为我们提供了绘制二阶和三阶贝塞尔曲线的方法：\",\"Path.quadTo(float x1, float y1, float x2, float y2)//二阶贝塞尔曲线：分别是控制点的 x、y 坐标和结束的的 x、y 坐标 Path.cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)//三阶贝塞尔曲线：分别是控制点 1、2 的 x、y 坐标和结束的的 x、y 坐标\",\"以Path.cubicTo()方法为例，在绘制三阶贝塞尔曲线时，起点和终点已知，剩下工作就是计算两个控制点的坐标。\"]},\"144\":{\"h\":\"方法 1\",\"t\":[\"按照贝塞尔曲线的定义，计算各个点对应控制点的坐标，具体的计算原理我们可以参考这篇文章\",\"假设起点、终点分别为startPoint，endPoint，起点前一个点为beforePointF，终点后一个点为afterPoint，那么终止点 1、2（controlPoint1、controlPoint2）的坐标满足（其中 a,b 为任意正数，比如 1/6）：\",\" val controlPoint1X = startPoint.x + (endPoint.x - beforePointF.x) * a val controlPoint1Y = startPoint.y + (endPoint.y - beforePointF.y) * a val controlPoint2X = endPoint.x - (afterPoint.x - startPoint.x) * b val controlPoint2Y = endPoint.y - (afterPoint.y - startPoint.y) * b\",\"这里要处理特殊情况：第一个点 P0的前一个仍然为 P0，最后一个点 Pn的后一个点仍为 Pn\",\"但这种情况绘制出来的贝塞尔曲线如下：\",\"可以看到除了 P0和 Pn外，其他点的曲线坐标和对应的点坐标不一致。\"]},\"145\":{\"h\":\"方法 2\",\"t\":[\"为了解决方法 1 存在的问题，我们人为的在两个点之间加入两个控制点，这样在startPoint，endPoint之间的贝塞尔曲线首尾点的坐标必定落在起点和终点上（思路来自这里）。\",\"所以，两个控制点的坐标为：\",\"val controlPoint1X = (startPoint.x + endPoint.x) / 2 val controlPoint1Y = startPoint.y val controlPoint2X = (startPoint.x + endPoint.x) / 2 val controlPoint2Y = endPoint.y\",\"这样绘制出来的曲线比较符合我们的要求。\",\"所以，最终贝塞尔曲线 path 计算方法如下：\",\"var bezierPath = Path() bezierPath.moveTo(pointList.first().x, -pointList.first().y) pointList.forEachIndexed { index, startPoint -> when (index) { pointList.lastIndex -> { //在绘制 P(n-1) ~ P(n) 点的贝塞尔曲线时，已经绘制到了 P(n) 点，所以此处不用再绘制 } else -> { val endPoint = pointList[index + 1] bezierPath.cubicTo( (startPoint.x + endPoint.x) / 2, -startPoint.y, //为了解决 view 坐标原点在左上角而做的特殊处理，下同 (startPoint.x + endPoint.x) / 2, -endPoint.y, endPoint.x, -endPoint.y ) } } }\"]},\"146\":{\"h\":\"给 Path 添加渐变背景\",\"t\":[\"我们可以使用Paint.setShader(Shader shader)方法，在绘制 Path 的时候绘制渐变背景。\",\"渐变背景使用 Shader 实现。\",\"为了确保绘制效果，我们需要在 Path 计算完成后，将其闭合，以确保绘制的背景在我们需要的范围内：\",\" val shadowPaint = Paint(Paint.ANTI_ALIAS_FLAG) shadowPaint.style = Paint.Style.FILL val shader = LinearGradient(0F, 0F, 0F, 500F, Color.GREEN, Color.TRANSPARENT, Shader.TileMode.CLAMP) shadowPaint.shader = shader val shadowPath = Path(path) shadowPath.lineTo(endPoint.x, 800F) shadowPath.lineTo(startPoint.x, 800F) shadowPath.lineTo(startPoint.x, startPoint.y) shadowPath.close() canvas.drawPath(shadowPath, shadowPaint)\"]},\"147\":{\"h\":\"给 Path 添加动画\",\"t\":[\"为了让 Path 看起来是从起点慢慢绘制到终点去的，我们可以先计算 path 的总长度，然后结合ValueAnimator实时获得对应长度的 path 并绘制：\",\"var mValueAnimator = ValueAnimator.ofFloat(0f, 1f) mValueAnimator.duration = 10000 mValueAnimator.repeatCount = ValueAnimator.INFINITE mValueAnimator.interpolator = AccelerateDecelerateInterpolator() mValueAnimator.addUpdateListener { animation -> //获取从 0-1 的变化值 progress = animation.animatedValue as Float //不断刷新绘图，实现路径绘制 invalidate() } mValueAnimator.start()\",\"然后在onDraw()方法中绘制对应的 path：\",\"var mPathMeasure: PathMeasure = PathMeasure(bezierPath, false) val totalPathLength = mPathMeasure.length //获取 path 总长度 // 按照进度绘制贝塞尔曲线 val stopD = progress * totalPathLength mPathMeasure.getSegment(0F, stopD, dstPath, true) //按照长度比例截取对应的 path 并赋值给 dstPath //bezier anim canvas.drawPath(dstPath, bezierPaint) //绘制对应的 path\"]},\"148\":{\"h\":\"注意事项\",\"t\":[\"使用 canvas 绘制坐标时，需要注意 android 的坐标原点位于屏幕左上角。所以在绘制曲线图时可以先将坐标原点向下平移一段距离，再绘制对应坐标（可以绘制实际的 y 坐标负值）\",\"在拼接贝塞尔曲线的 path 时候注意，path.moveTo()方法会将 path 切断\"]},\"149\":{\"h\":\"参考资料\",\"t\":[\"https://wenku.baidu.com/view/c790f8d46bec0975f565e211.htmlhttps://blog.csdn.net/laizuling/article/details/51162011\"]},\"150\":{\"c\":[\"android\"]},\"151\":{\"h\":\"Android 自定义 View 实现联系人列表\"},\"152\":{\"h\":\"自定义的 view\",\"t\":[\"LetterIndex.java extends View\",\"ContactsListView.java extends RecyclerView #分析\",\"联系人列表有两个要点 \",\"字母导航栏 通过自定义 View 画出 26 个字母，设置滑动监听事件，根据上下滑动的距离判断当前选中的字母，并相应更新界面。\",\"列表中的字母标题 针对 item 中的联系人姓名首字母对应的 tag 作比较，若与前一个相同则不显示 title，否则显示。\",\"事件联动 \",\"当滑动字母导航栏时，除了处理本身的变化外，还要留出接口，以便其他控件获取当前选中的字母。\",\"联系人列表滑动时，除了处理本身变化外，同样要留出接口以便获取当前置顶的 item 对应的字母\",\"字母导航栏要留出方法，以便其他控件指定选中的字母，并更新界面\"]},\"153\":{\"h\":\"具体代码\",\"t\":[\"ContactsListView.java 重写该类主要是为了实现 ItemDecoration 根据不同的 item 变化，同时可以从 xml 布局文件中获取 ItemDecoration 的自定义属性。 主要代码：\",\" public ContactsListView(Context context) { this(context, null, 0); } public ContactsListView(Context context, @Nullable AttributeSet attrs) { this(context, attrs, 0); } public ContactsListView(Context context, @Nullable AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); mTypeArray = context.obtainStyledAttributes(attrs, R.styleable.MyRecyclerDecoration); mContext = context; }\",\"故而在其内部自定义了一个继承自 ItemDecoratio 得静态内部类 Decorationn 类：\",\"public Decoration(List<String> data){ //获取要显示的联系人数据对应的英文tag集合 //初始化各种自定义属性 //例如颜色：mColorLetterText = mTypeArray.getColor(R.styleable.MyRecyclerDecoration_color_letter_text, 0xff152648); } @Override public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state){ //画出各个导航title } @Override public void onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state) { //画出置顶的导航title } @Override public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) { //判断是否画出导航title super.getItemOffsets(outRect, view, parent, state); int position = ((RecyclerView.LayoutParams) (view.getLayoutParams())).getViewAdapterPosition(); if (position != -1) { String text = mDatas.get(position).substring(0, 1).toUpperCase(); if (position == 0) { outRect.set(0, mTitleHeight, 0, 0); } else if (text != null && !text.equals(mDatas.get(position - 1).substring(0, 1).toUpperCase())) { outRect.set(0, mTitleHeight, 0, 0); } else { outRect.set(0, 0, 0, 0); } } } private void drawText(Canvas canvas, float left, float right, View child, String text) { //画出文字 }\",\"LetterIndex.java 该类用来画出字母导航栏，并且提供方法获取/设置当前选中的字母\",\" public interface onIndexClickListener { void onIndexClick(int chooseId); void onActionUp(); } public void setOnIndexClickListener(onIndexClickListener listener) { this.mClickListener = listener; } public void setChooseId(int chooseId) { if (chooseId >= 0 && chooseId < mIndexTexts.length) { mChooseId = chooseId; invalidate(); } }\",\"然后重写onTouchEvent(MotionEvent event)方法，在 ACTION_DOWN、ACTION_MOVE、ACTION_UP 时调用对应的方法即可。\",\"重写 onDraw() 方法，画出对应的界面\",\" @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); int height = getHeight() - getPaddingTop() - getPaddingBottom(); float width = getWidth(); //childHeight 是每一个字母所在单元的高度 float childHeight = (float) height / mIndexTexts.length; //如果被点击了，就画出背景 if (isClick) { mPaint.setColor(mColorIndexBg); canvas.drawRect(0, 0, width, height, mPaint); } Rect bounds = new Rect(); mPaint.setTextSize(mSizeText); mPaint.setTextAlign(Paint.Align.CENTER); for (int i = 0; i < mIndexTexts.length; i++) { String text = mIndexTexts[i]; mPaint.setColor(mColorText); //在被选中的字后面画一个圆，并改变字的颜色 if (i == mChooseId) { mPaint.setColor(mColorChooseTextBg); canvas.drawCircle(width / 2, childHeight / 2 + i * childHeight, mSizeText / 2 + 2, mPaint); mPaint.setColor(mColorChooseText); } mPaint.getTextBounds(text, 0, text.length(), bounds); //bounds里面保存着要画的字的一些属性，如x，y，centerX，centerY等， //要注意 canvas.drawText（text,x,y,mpaint）中y并不是text的最低端，而是baseline。 float x = width / 2; float y = -bounds.centerY() + childHeight / 2 + i * childHeight; canvas.drawText(text, x, y, mPaint); } }\"]},\"154\":{\"h\":\"源码\",\"t\":[\"源代码在我的 Github，点这里可以找到。\"]},\"155\":{\"h\":\"预览如下\",\"t\":[\"预览.gif\"]},\"156\":{\"h\":\"Android 自定义 view 的一些知识点\"},\"157\":{\"h\":\"View 的绘制\",\"t\":[\"View 的绘制分为 3 部分：\",\"measure\",\"测量，决定了 View 的测量宽、高。几乎所有情况下都等同于 View 的最终宽、高（如果 View 需要多次 measure 才能确定大小，或者重写了layout()方法，并修改了传入的值的话则不会相等）。\",\"layout\",\"布局，决定 View 的四个顶点坐标和实际的宽、高。\",\"draw\",\"绘制，决定了 View 的具体显示内容。\",\"其中通过 ViewRootImpl 类的performTraversals()依次调用performXXX()方法。\"]},\"158\":{\"h\":\"MeasureSpec\",\"t\":[\"MeasureSpec 是一个 32 位 int 值，高 2 位表示 SpecMode，低 30 位表示 SpecSize。\",\"SpecMode 有 3 种可能值：\",\"UNSPECIFIED 父容器没有限定 View 大小，可以是任意需要的大小\",\"EXACTLY 父类指定了 View 的具体大小，View 的最终大小就是这个值 (match_parent 或者具体数值)\",\"AT_MOST View 可以是这个值以内的任意大小 (wrap_content)\",\"我们指定的 View 的 LayoutParams 和父容器（DecorView 则是窗口的尺寸，普通 View 是父容器的 MeasureSpec）一起决定了 View 的 MeasureSpec，进而决定了 View 的宽高。\",\"SpecSize 决定于父容器的尺寸、以及 View 的 margin 和 padding。\"]},\"159\":{\"h\":\"View 绘制流程\",\"t\":[\"final 类型的measure()方法调用onMeasure()方法。\",\"public final void measure(int widthMeasureSpec, int heightMeasureSpec){ if (forceLayout || needsLayout) { int cacheIndex = forceLayout ? -1 : mMeasureCache.indexOfKey(key); if (cacheIndex < 0 || sIgnoreMeasureCache) { // measure ourselves, this should set the measured dimension flag back onMeasure(widthMeasureSpec, heightMeasureSpec); mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT; } } }\",\"在onMeasure()调用了setMeasuredDimension()方法设置了 View 宽、高的测量值。\",\"protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec)); } public static int getDefaultSize(int size, int measureSpec) { int result = size; int specMode = MeasureSpec.getMode(measureSpec); int specSize = MeasureSpec.getSize(measureSpec); switch (specMode) { case MeasureSpec.UNSPECIFIED: result = size;//返回 getSuggestedMinimumWidth/Height 的大小 break; case MeasureSpec.AT_MOST: case MeasureSpec.EXACTLY: result = specSize;//返回测量大小 break; } return result; }\",\"getSuggestedMinimumXXX()的值：\",\"如果 View 没有背景，则返回的是 View 的android:miniWidth指定的值；\",\"如果 View 有背景，则返回的是背景的minimumWidth的值和android:miniWidth指定的值中最大的一个值。\",\"protected int getSuggestedMinimumWidth() { return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth()); } protected int getSuggestedMinimumHeight() { return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight()); }\",\"由此，我们知道，如果直接继承自 View 的控件必须重写onMeasure()方法，设置 wrap_content 时候控件的大小。这是因为：\",\"wrap_content 对应的 specMode 是 AT_MOST 模式，其宽高等于specSize。\",\"根据 ViewGroup 的getChildMeasureSpec()方法，我们知道此时的specSize是父容器目前可以用的大小，即这种情况下 wrap_content 的效果和 match_parent 的效果是一样的。\",\"要避免这种情况，就需要重写onMeasure()方法，在里面专门指定 wrap_content 时 View 对应的大小。\"]},\"160\":{\"h\":\"获取 View 的宽高\",\"t\":[\"由于 View 的绘制和 Activity 的生命周期不同步，所以在onCreate()/onStart()/onResume()中都无法有效获取 View 的宽高。使用以下方式则可以正常获取 View 的宽高：\",\"Activity/View#onWindowFocusChanged()\",\"当前的 Window 获取或失去焦点的时候调用，此时 View 已经初始化完毕，可以获取宽、高。\",\"Activity 窗口焦点变化 (onPause/onResume) 时会被调用多次。\",\"View#post(runnable)\",\"该 runnable 在 view 的消息队列尾部，被执行时 View 已经初始化好了，可以在这里获取宽高。\",\"ViewTreeObserver\",\"注册 onGlobalLayoutListener，当 View 树的状态变更，或者 View 树内部 View 可见性发生变化就会被回调。\",\"当 View 树的状态变更可能被调用多次。\",\"View#measure()\",\"手动调用measure()方法获取宽高。\"]},\"161\":{\"h\":\"draw 过程\",\"t\":[\"绘制过程分为以下几步：\",\"绘制背景 background.draw(canvas);\",\"绘制自身 onDraw(canvas);\",\"绘制 children dispatchDraw(canvas);\",\"绘制装饰 onDrawForeground(canvas);\",\"setWillNotDraw()表示当前的 ViewGroup 不需要绘制任何内容，系统会对此进行优化（默认启用）。如果 ViewGroup 需要绘制内容时，则需要手动关闭这个标志。\",\"public void setWillNotDraw(boolean willNotDraw) { setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK); }\"]},\"162\":{\"h\":\"绘制两个图形重叠部分\",\"t\":[\"android 自定义 view 时两个图形重叠部分的绘制方式，一定要调用canvas.saveLayer() ，否则不生效。\",\" //这个步骤十分重要，将当前画布保存为新的一层 int save = canvas.saveLayer(0,0,mWidth,mHeight,null,Canvas.ALL_SAVE_FLAG); Paint paint = new Paint(); paint.setColor(mBackgroundColor); RectF backgroundRectF = new RectF(0, 0, mWidth, mHeight); canvas.drawRoundRect(backgroundRectF, mRadius, mRadius, paint); paint.setColor(mForwardColor); //设置二者重叠部分的绘制方式 paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); RectF progressRectF = new RectF(0, 0, mWidth * mProgress, mHeight); canvas.drawRect(progressRectF,paint); //restore to canvas canvas.restoreToCount(save);\",\"paint.setXfermode()可以设置的值参考下图：\",\"参考自【原】使用 Xfermode 正确的绘制出遮罩效果 - sky0014 - 博客园 \"]},\"163\":{\"h\":\"适配自定义 view 宽高，设置默认值\",\"t\":[\"以其宽度为例，在onMeasure(int widthMeasureSpec, int heightMeasureSpec)方法中：\",\"int widthMode = MeasureSpec.getMode(widthMeasureSpec); int widthSize = MeasureSpec.getSize(widthMeasureSpec); if (widthMode == MeasureSpec.EXACTLY) { mWidth = widthSize; } else { mWidth = 100; if (widthMode == MeasureSpec.AT_MOST) { mWidth = Math.min(mWidth, widthSize); } }\"]},\"164\":{\"h\":\"参考资料\",\"t\":[\"《Android 开发艺术探索》\"]},\"165\":{\"h\":\"Android 自定义透明背景的 Dialog\"},\"166\":{\"h\":\"简介\",\"t\":[\"通过自定义 Dialog 类，使用 Style、AnimationDrawable 等实现一个透明背景的、带进度更新的弹窗。\",\"主要涉及 Style 自定义以及 AnimationDrawable 的使用。\"]},\"167\":{\"h\":\"代码\",\"t\":[\"布局文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" android:layout_width=\\\"wrap_content\\\" android:layout_height=\\\"wrap_content\\\" android:gravity=\\\"center\\\" android:background=\\\"@drawable/dialog_bg\\\"> <ImageView android:id=\\\"@+id/image\\\" android:layout_width=\\\"250dp\\\" android:layout_height=\\\"250dp\\\" /> </LinearLayout>\",\"资源文件\",\"1）下载对应进度条的图片资源，放到 drawable 目录下\",\"2）在 drawable 下新建 dialog_progress.xml\",\"<animation-list xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" android:oneshot=\\\"false\\\"> <item android:drawable=\\\"@drawable/progress_1\\\" //资源文件 android:duration=\\\"300\\\" /> //持续时间ms <item android:drawable=\\\"@drawable/progress_2\\\" android:duration=\\\"300\\\" /> ... </animation-list>\",\"3）dialog 圆角背景（非必须）\",\"<shape xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"> <solid android:color=\\\"#6fb6d4\\\" /> <corners android:radius=\\\"500dp\\\" /> </shape>\",\"4）自定义 dialog 的 style\",\"windowBackground使背景透明\",\"backgroundDimEnabled则可以去除半透明遮罩效果\",\" <style name=\\\"diyDialogStyle\\\" parent=\\\"@android:style/Theme.Dialog\\\" > <item name=\\\"android:windowBackground\\\">@android:color/transparent</item><!--背景透明--> <item name=\\\"android:backgroundDimEnabled\\\">false</item><!--半透明，模糊--> </style>\",\"DIYDialog.java\",\"继承自Dialog.java ，并用构造函数调用initView()方法初始化 dialog 样式，有其他需求可以再自己实现。\",\"//初始化 view、控件 View view = View.inflate(context, R.layout.layout_dialog, null); ImageView imageView = view.findViewById(R.id.image); imageView.setBackgroundResource(R.drawable.dialog_progress); //填充布局 setContentView(view); //实现动画 AnimationDrawable animationDrawable = (AnimationDrawable) imageView.getBackground(); animationDrawable.run();\"]},\"168\":{\"h\":\"源码\",\"t\":[\"github 源码路径\"]},\"169\":{\"h\":\"Android 运行时权限\"},\"170\":{\"h\":\"简介\",\"t\":[\"本文介绍了 Android 运行时权限的一些处理流程。\",\"Android 运行时权限是 Android6 之后出现的处理权限的新方式，此前开发者只需要应用需要的权限在 AndroidManifest.xml 文件中声明即可，现在则需要在使用到对应权限时检测是否有该权限并作出相应处理。\"]},\"171\":{\"h\":\"正文\"},\"172\":{\"h\":\"一般流程\",\"t\":[\"在AndroidManifest.xml中声明所需权限\",\"在使用之前检查是否有该权限checkSelfPermission(),如果有则继续相应操作\",\"如果没有权限则检测是否需要向用户解释为什么需要该权限ActivityCompat.shouldShowRequestPermissionRationale()，再决定如何申请权限requestPermissions()\",\"需要说明的是，shouldShowRequestPermissionRationale() 在第一次申请该权限时会返回 false，第二次申请时返回 true；ue；\",\"但是如果用户选择了不再提醒 则会一直返回 false。所以如果判断当前并非第一次申请该权限，并且返回结果为 false，就说明用户选择了不再提示，一般就需要提示用户到设置中开启对应权限。\",\"申请权限的结果在onRequestPermissionsResult()方法中返回，根据用户对权限的处理结果决定接下来的操作\"]},\"173\":{\"h\":\"代码\",\"t\":[\"onCreate()方法中调用对应方法\",\"mSharedPreferences = getSharedPreferences(packageName, Context.MODE_PRIVATE) checkCameraDeviceAndPremissions()\",\"checkCameraDeviceAndPremissions()具体内容\",\"private fun checkCameraDeviceAndPremissions() { ... //[2] 每次使用之前检测是否有改权限 if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) { safeRequestCameraPermission() } else { safeOpenCamera(cameraId) } }\",\"对申请结果进行处理：\",\"override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) { when (requestCode) { //[4] 处理请求权限的结果 REQUEST_CAMERA -> { if (grantResults[0] == PackageManager.PERMISSION_GRANTED) { safeOpenCamera(cameraId) } else { var noCameraPermissionDialog = AlertDialog.Builder(this@MainActivity) .setTitle(\\\"警告⚠️\\\") .setMessage(\\\"没有相机权限，不可继续！\\\\n请赋予相机权限\\\") .setCancelable(false) .setPositiveButton(\\\"Yes\\\") { _, _ -> safeRequestCameraPermission() } .setNegativeButton(\\\"No\\\") { _, _ -> finish() } .create() noCameraPermissionDialog.show() } } } }\",\"safeRequestCameraPermission()的内容，这里才是处理申请权限的相关代码\",\"private fun safeRequestCameraPermission() { //[3] 检测是否需要解释为什么需要改权限 if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CAMERA)) { /** * 第一次请求时为 false * 第二次请求时为 true，需要解释为什么需要这个权限 * 若用户选择了不再提示则一直为 false * 综上，如果不是第一次请求该权限，并且返回值为 false，那么可以判断用户选择了不再提示 */ //向用户解释为什么需要改权限 var noCameraDialog = AlertDialog.Builder(this@MainActivity) .setTitle(\\\"提示️\\\") .setMessage(\\\"本应用正常运行需要相机权限，点击确认开始赋予权限\\\") .setCancelable(false) .setPositiveButton(\\\"Yes\\\") { _, _ -> //用户同意后开始申请权限 doRequestCameraPermission() } .create() noCameraDialog.show() } else { Log.d(\\\"TAG\\\", \\\"count \\\" + mSharedPreferences.getInt(KEY_COUNT_REQUEST_CAMERA_PERMISSION, 0)) if (mSharedPreferences.getInt(KEY_COUNT_REQUEST_CAMERA_PERMISSION, 0) > 1) { //TODO 用户拒绝了赋予权限，并且选择了“不再提醒”，提示用户到设置中开启 } else { doRequestCameraPermission() } } } private fun doRequestCameraPermission() { //每次申请权限时更新计数器 var count = mSharedPreferences.getInt(KEY_COUNT_REQUEST_CAMERA_PERMISSION, 0) + 1 mSharedPreferences.edit().putInt(KEY_COUNT_REQUEST_CAMERA_PERMISSION, count).apply() requestPermissions(arrayOf(Manifest.permission.CAMERA), REQUEST_CAMERA) }\"]},\"174\":{\"h\":\"附录\",\"t\":[\"样例代码： Github\"]},\"175\":{\"h\":\"Android 通过 Hook 启动未注册 Activity\"},\"176\":{\"h\":\"简介\",\"t\":[\"hook 是钩子的意思，hook 的过程是通过反射、代理等改变系统原有的行为以达到自己的目的。\",\"本文主要是通过 hook android 中的 ActivityManagerService 和 Handler.CallBack，欺骗系统调起 activity 的过程，在调用 startActivity 时将 targetIntent 通过 proxy 伪装为 proxyIntent，等到通过系统验证，正式启动 activity 时，再讲 proxyIntent 恢复为 targetIntent，从而实现调用未在 AndroidManifest.xml 中注册的 activity。\",\"需要注意，本方法只在 Api<26 下有效。具体原因见后面。\"]},\"177\":{\"h\":\"具体实现\"},\"178\":{\"h\":\"1.新建 Activity 等\",\"t\":[\"IndexActivity.java用于启动targetIntent\",\" ((Button)findViewById(R.id.btn1)).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //启动未在 AndroidManifest.xml 注册的 activity mContext.startActivity(new Intent(mContext,TargetActivity.class)); } });\",\"TargetActivity.java 和ProxyActivity.java 分别设置对应页面布局setContentView(R.layout.activity_xxx);\",\"HookApplication.java 用于调用 hook 方法\",\"public class HookApplication extends Application { @Override public void onCreate() { super.onCreate(); Utils.hookAms(this); Utils.hookHandle(); } }\",\"在AndroidManifest.xml中注册IndexActivity和ProxyActivity，Application 使用HookApplication。\"]},\"179\":{\"h\":\"2.Utils.java 实现 hook 具体逻辑\",\"t\":[\"Utils.hookAms() 实现拦截 targetIntent 并发起 proxyIntent，欺骗系统对 activity 是否已注册的验证，其中 proxyIntent 通过proxyIntent.putExtra(TARGET_KEY, targetIntent); 方法携带 targetIntent。\",\"//hookAms() 核心代码 Class hookActivityManagerNative = Class.forName(\\\"android.app.ActivityManagerNative\\\"); //在 api>26 时无此变量：gDefault，该方法失效 Field gDefault = hookActivityManagerNative.getDeclaredField(\\\"gDefault\\\"); gDefault.setAccessible(true); Object object = gDefault.get(null); Class hookSingleton = Class.forName(\\\"android.util.Singleton\\\"); Field mInstance = hookSingleton.getDeclaredField(\\\"mInstance\\\"); mInstance.setAccessible(true); Object oldAms = mInstance.get(object); Class hookIActivityManagerService = Class.forName(\\\"android.app.IActivityManager\\\"); Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class<?>[]{hookIActivityManagerService}, new MAmsInvocationHandler(context,oldAms)); //将原有的 ActivityManagerService 替换为我们自定义的 mInstance.set(object,proxy);\",\"在MAmsInvocationHandler 里面实现 targetIntent 和 proxy 的转换\",\"//MAmsInvocationHandler 核心代码 public class MAmsInvocationHandler implements InvocationHandler{ public static final String TARGET_KEY = \\\"targetIntent\\\"; ... public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if (\\\"startActivity\\\".equals(method.getName())) { int index = 0; Intent targetIntent = null; for (int i = 0; i < args.length; i++) { if (args[i] instanceof Intent) { index = i; targetIntent = (Intent) args[i]; break; } } if (targetIntent != null) { Intent proxyIntent = new Intent(mContext, ProxyActivity.class); proxyIntent.putExtra(TARGET_KEY, targetIntent); args[index] = proxyIntent; } } return method.invoke(mOldAms,args); } }\",\"至此，已经对 activity.startActivity 做了拦截，所有的 targetIntent 都会被拦截，存储在 proxyIntent 中，以通过系统的检查。\",\"接下来，通过系统检查后，hookHandle()通过重写 Handler.CallBack，对启动 proxyIntent 事件做拦截，使之启动 targetIntent 对应的 Activity。\",\"//hookHandle() 核心代码 Class activityThreadCls = Class.forName(\\\"android.app.ActivityThread\\\"); Method currentActivityThread = activityThreadCls.getDeclaredMethod(\\\"currentActivityThread\\\"); currentActivityThread.setAccessible(true); Object activityThread = currentActivityThread.invoke(null); Field mH = activityThreadCls.getDeclaredField(\\\"mH\\\"); mH.setAccessible(true); Handler handler = (Handler) mH.get(activityThread); Field callBack = Handler.class.getDeclaredField(\\\"mCallback\\\"); callBack.setAccessible(true); callBack.set(handler, new ActivityThreadHandlerCallBack(handler));\",\"其中ActivityThreadHandlerCallBack 将返回我们自定义的 CallBack 以替换系统的，实现启动 targetIntent 而非 proxyIntent。\",\"//ActivityThreadHandlerCallBack 核心代码 public class ActivityThreadHandlerCallBack implements Handler.Callback{ @Override public boolean handleMessage(Message msg) { if (msg.what == 100) { handleLaunchActivity(msg); } mHandler.handleMessage(msg); return true; } //主要代码，在这里将 proxyIntent 转化为 targetIntent private void handleLaunchActivity(Message msg) { Object object = msg.obj; try { Field intent = object.getClass().getDeclaredField(\\\"intent\\\"); intent.setAccessible(true); Intent proxyIntent = (Intent) intent.get(object); Intent targetIntent = proxyIntent.getParcelableExtra(MAmsInvocationHandler.TARGET_KEY); if (targetIntent != null) { proxyIntent.setComponent(targetIntent.getComponent()); } } catch (NoSuchFieldException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }\",\"到这里，就实现了启动通过已经注册了的 ProxyActivity 启动未注册 TargetActivity 的全过程。\",\"主要思想是找到系统实现该过程的逻辑，在对应地方通过反射获取到对应变量，插入自己的逻辑，从而达到目的。\"]},\"180\":{\"h\":\"附录\",\"t\":[\"上面涉及到的代码路径：\",\"github 源代码路径\",\"参考了几篇文章，其中较为完整的一篇如下：\",\"Android 插件化系列第（一）篇---Hook 技术之 Activity 的启动过程拦截\"]},\"181\":{\"h\":\"Android 阅读笔记\"},\"182\":{\"h\":\"layout_weight\",\"t\":[\"layout_weight 重要性，默认的是 0,0 等级最高，要显示，数字越大重要性越低。\",\"例：a，b 的宽度为 0，layout_weight 分别为 1、2，则 a，b 宽度分别为父容器的 2/3、1/3。\"]},\"183\":{\"h\":\"PendingIntent\",\"t\":[\"PendingIntent 是封装后的 intent，有 intent 执行所需的 context，所以即使要执行 intent 的 activity 已经消失或者还没生成，其他 activity 依然可以通过 PendingIntent 执行 intent。\",\"PendingIntent is a description of an Intent and target action to perform with it. Instances of this class are created with getActivity(Context, int, Intent, int), getActivities(Context, int, Intent[], int), getBroadcast(Context, int, Intent, int), and getService(Context, int, Intent, int); the returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time.\",\"也就是把自己要执行的 intent 和执行所需的 context 封装后给别人，请别人在适当的时候执行。\"]},\"184\":{\"h\":\"android 模拟器访问电脑 localhost\",\"t\":[\"电脑localhost或者127.0.0.1访问本地网址。\",\"模拟器访问localhost会默认访问手机的本地网址，要访问电脑的本地网址则需要访问10.0.2.2:8080，记得加上对应的端口。\"]},\"185\":{\"h\":\"获取屏幕画面\",\"t\":[\"View decor = MainActivity.this.getWindow().getDecorView(); decor.setDrawingCacheEnabled(true); imageView.setImageBitmap(decor.getDrawingCache());\"]},\"186\":{\"h\":\"获取网络信息，请求网络\",\"t\":[\"需要请求权限\",\" <uses-permission android:name=\\\"android.permission.INTERNET\\\" /> <uses-permission android:name=\\\"android.permission.ACCESS_NETWORK_STATE\\\" />\",\"java 代码如下：\",\" private void chackNetWork(Context context) { boolean isNetAvailable = false; ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE); if (manager.getActiveNetworkInfo() != null) { isNetAvailable = manager.getActiveNetworkInfo().isAvailable(); } if (!isNetAvailable) { Toast.makeText(this, \\\"open network\\\", Toast.LENGTH_SHORT).show(); Intent intent = new Intent(); intent.setAction(Settings.ACTION_NETWORK_OPERATOR_SETTINGS); context.startActivity(intent); } }\"]},\"187\":{\"h\":\"LiveData\",\"t\":[\"LiveData可以在数据有变化的时候调用订阅者并执行指定方法。\",\"Transformations有两个转化LiveData的方法：map()和switchMap()。\",\"map()可以将一个LiveData经过处理转化为另外一个LiveData。\",\"而switchMap()则可以根据不同的需要切换不同的LiveData。\",\"val live = MutableLiveData<String>() val d : LiveData<String> = map(live){ \\\"this is $it\\\" } val e = switchMap(live) { return@switchMap when (it) { \\\"a\\\" -> MutableLiveData<String>(\\\"a\\\") \\\"b\\\" -> MutableLiveData(\\\"b\\\") else -> MutableLiveData(\\\"else\\\") } }\",\"此外，LiveData的子类MediatorLiveData可以添加多个监听项，每个项目改变都会回调对应的onChange()方法。\",\"val mediatorLiveData = MediatorLiveData<String>() mediatorLiveData.addSource(d) { update(it, e.value) } mediatorLiveData.addSource(e) { update(d.value, it) } fun update(a: String? = \\\"\\\", b: String? = \\\"\\\") { //do sth }\"]},\"188\":{\"h\":\"参考资料\",\"t\":[\"【译】LiveData 使用详解\"]},\"189\":{\"h\":\"AppWidget 的使用之 PendingIntent\",\"t\":[\"这几天学习 AppWidget，很简单的组件却花费了不少功夫，今天对 PendingIntent 的用法做了一些简单的整理。\",\"PendingIntent\",\"PandingIntent 就像是一个设计好的处理预案，当达到某个特定条件时，便会调用该 Intent 所指定动作（打开服务，Activity 或者发送广播）。\",\"这里使用该方法在 AppWidget 里面为按钮添加监听事件，当按钮被点击的时候触发相应的动作\",\"AppWidget 和应用程序不再同一个进程当中，而是在 HomeScreen 上面执行，所以不能直接为 AppWidget 中的 Button 添加监听事件，需要用 remoteViews.setPendingIntent(R.id.widget_button,pendingIntent);意思是当按下按钮的时候 pendingIntent 中的 Intent 就会执行\",\"PendingIntent 当某个事件出现之后才会执行\",\"RemoteViews 对象 代表了一系列的 View 对象，和主程序不在同一个进程为 AppWidget 控件绑定处理器\",\"流程概述：\",\"添加 appwidget_provider_info.xml 在 res/xml 下新建 appwidget_provider_info.xml\",\"描述 AppWidget 的基本信息如最小高度、宽度等，还有就是该挂件的布局文件\",\"在 res/layout 下面为该挂件设置具体的布局样式\",\"向 AppWidget 的布局文件中添加一个 Button\",\"向 AppWidget 的布局文件中添加一个 TextView\",\"新建 MyAppWidget.java 继承自 AppWidgetProvider\",\"在该类的 onUpdate() 方法中为 Button 设置、添加监听事件\",\"建立一个 Intent 对象\",\"用该 Intent 对象创建一个 PendingIntent 对象\",\"创建一个 RemoteViews 对象\",\"用该 RemoveViews 对象为 按钮绑定事件处理器\",\"更新按钮\",\"注册事件\",\"备注：要是为 AppWidget 中的 Button 设置的事件是打开一个 TargetActivity，还需要添加一个 TargetActivity 类和对应的布局文件\",\"以下是代码\",\"appwidget_provider_info.xml\",\"这个布局文件是 AppWidget 的信息\",\"描述了 AppWidget 的最小高，最小宽以及它的布局文件\",\"<appwidget-provider android:minHeight=\\\"200dp\\\" android:minWidth=\\\"300dp\\\" android:initialLayout=\\\"@layout/app_widget\\\" xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" > </appwidget-provider>\",\"app_widget.xml\",\"这个布局文件是 Widget 在桌面上显示的样式\",\"定义了 AppWidget 中各个组件及其样式\",\"其中 Button 用来响应点击事件，加入 TargetActivity\",\"<LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" android:layout_width=\\\"200dp\\\" android:layout_height=\\\"200dp\\\" android:orientation=\\\"vertical\\\"> <TextView android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" android:text=\\\"hello,world!\\\"/> <Button android:id=\\\"@+id/app_widget_btn\\\" android:layout_width=\\\"200dp\\\" android:layout_height=\\\"150dp\\\" android:background=\\\"#ff00ff\\\" android:text=\\\"this is my app widget button\\\"/> </LinearLayout>\",\"target_activity.xml\",\"<LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"match_parent\\\"> <TextView android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"wrap_content\\\" android:textSize=\\\"50sp\\\" android:background=\\\"#00ff00\\\" android:text=\\\"\\\\n hello,welcome to target activity!\\\"/> </LinearLayout>\",\"MyAppWidget.java\",\"主要是修改了 update() 方法：\",\"定义了一个预先设定的动作—- Intent 对象；\",\"利用该 Intent 读写，创建一个 PendingIntent 对象；\",\"创建一个 RemoteView 对象，并为按钮绑定监听事件\",\"刷新 AppWidget。\",\"public class MyAppWidget extends AppWidgetProvider { @Override public void onReceive(Context context, Intent intent) { // TODO Auto-generated method stub super.onReceive(context, intent); } @Override public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) { // TODO Auto-generated method stub super.onUpdate(context, appWidgetManager, appWidgetIds); //appWidgetIds 每一次向屏幕添加 AppWidget 的时候都会增加一个唯一的 appWidget 的 Id for(int i = 0; i < appWidgetIds.length;i++){ //创建一个 Intent 对象 Intent intent = new Intent(context,TargetActivity.class); //创建一个 PendingIntent 对象 PendingIntent pendingIntent = PendingIntent.getActivity(context,0,intent,0); // remoteViews 代表 AppWidget 上所有的控件 RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.app_widget); //为按钮绑定事件处理器 /* * 参1，指定被绑定处理器的控件id * 参2，指定事件发生时会被执行的 PendingIntent */ remoteViews.setOnClickPendingIntent(R.id.app_widget_btn,pendingIntent); //更新 AppWidget ，参1是用于指定被更新 appWidget 的ID appWidgetManager.updateAppWidget(appWidgetIds[i],remoteViews); } } @Override public void onDeleted(Context context, int[] appWidgetIds) { // TODO Auto-generated method stub super.onDeleted(context, appWidgetIds); } @Override public void onEnabled(Context context) { // TODO Auto-generated method stub super.onEnabled(context); } @Override public void onDisabled(Context context) { // TODO Auto-generated method stub super.onDisabled(context); } }\",\"TargetActivity.java\",\"public class TargetActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.target_activity); } }\",\"AndroidManifest.xml\",\"在 AndroidManifest.xml 中注册 TargetActivity 和 MyAppWidget\",\"<application> ... <activity android:name=\\\".TargetActivity\\\"> </activity> <!-- 注意这里注册了一个 MyAppWidget 接收数据--> <receiver android:name=\\\".MyAppWidget\\\"> <intent-filter> <action android:name=\\\"android.appwidget.action.APPWIDGET_UPDATE\\\" /> </intent-filter> <meta-data android:name=\\\"android.appwidget.provider\\\" android:resource=\\\"@xml/appwidget_provider_info\\\"/> </receiver> </application>\"]},\"190\":{\"h\":\"AsyncTask 源码解析\",\"t\":[\"这是 AsyncTask 源码的简单分析，主要基于《Android 开发艺术探索》一书的内容。\",\"AsyncTask 是 Android 中多线程处理方式之一（其余为 1.HandlerThread、2.IntentService 以及普通的线程 Thread）。\",\"AsyncTask 本质是线程池和 Handler 的包装类，适合实时更新后台任务进度的工作，特别耗时的工作应当交给线程池处理。\",\"AsyncTask 常用方法：\",\"onPreExecute()\",\"doInBackground()\",\"onProgressUpdate()\",\"onPostExecute()\",\"AsyncTask 有一下限制：\",\"AsyncTask 对象必须在主线程（UI 线程，下同）创建\",\"AsyncTask 的 execute() 必须在主线程调用，且只能被调用一次\",\"不能直接调用其 4 种常用方法（见上）\"]},\"191\":{\"h\":\"使用\",\"t\":[\"继承自 AsyncTask，重写对应方法。（注意如果需要更新进度，要在 doInBackground() 方法中调用 publishProgress() 方法）\",\"在UI 线程实例化 AsyncTask 对象，并调用其 execute() 方法，传入参数开始执行。。\"]},\"192\":{\"h\":\"概述\",\"t\":[\"在 execute(params) 执行后，将参数 params 传入 mWorker.call() 方法\",\"通过 exec.execute(mFuture) 将其压入 SerialExecutor 线程池中排队，并在 THREAD_POOL_EXECUTOR.execute(mActive) 真正执行。\"]},\"193\":{\"h\":\"代码分析\",\"t\":[\"创建对象（代码有节略，下同）\",\"// Creates a new asynchronous task. This constructor must be invoked on the UI thread. //注意这里的要求，必须在 ui 线程 public AsyncTask(@Nullable Looper callbackLooper) { mHandler = callbackLooper == null || callbackLooper == Looper.getMainLooper() ? getMainHandler()//此处创建 InternalHandler 用于在 UI 线程处理消息 : new Handler(callbackLooper); mWorker = new WorkerRunnable<Params, Result>() { public Result call() throws Exception { try { result = doInBackground(mParams);//注意这里会调用 doInBackground() 方法，后台线程 } catch (Throwable tr) { mCancelled.set(true); throw tr; } finally { postResult(result);//此处发送 msg 到 mHandler 那里接受处理 } return result; } }; mFuture = new FutureTask<Result>(mWorker) {//这里将 mWorker 传了进去 @Override protected void done() { } }; }\",\"再看 FutureTask\",\"public FutureTask(Callable<V> callable) { if (callable == null) throw new NullPointerException(); this.callable = callable; //将 mWorker 当做了他的 callable this.state = NEW; // ensure visibility of callable } public void run() { try { Callable<V> c = callable; if (c != null && state == NEW) { result = c.call(); //会在这里回调 mWorker 的 call() 方法，即前文所说的 doInBackgroud() 之类的方法 } } finally { } }\",\"在主线程调用 execute() 方法\",\"@MainThread public final AsyncTask<Params, Progress, Result> execute(Params... params) { return executeOnExecutor(sDefaultExecutor, params); }\",\"这里调用方法如下：\",\"@MainThread public final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec, Params... params) { if (mStatus != Status.PENDING) { //此处限制 execute() 只能被执行一次 switch (mStatus) { case RUNNING: throw new IllegalStateException(\\\"Cannot execute task:\\\" + \\\" the task is already running.\\\"); case FINISHED: throw new IllegalStateException(\\\"Cannot execute task:\\\" + \\\" the task has already been executed \\\" + \\\"(a task can be executed only once)\\\"); } } mStatus = Status.RUNNING; onPreExecute(); //开始前准备工作 mWorker.mParams = params; //将参数传入 mWorker，并一并传入 mFuture 中 exec.execute(mFuture);//将准备好参数、执行时间的 mFuture 排队放入串行线程池中，等待执行 return this; }\",\"这里调用了常用方法之一 onPreExecute();\",\"mWorker 和 mFuture 的关系前文已经描述了，在看一下 exec.execute(mFuture) 执行了什么：\",\"exec 是 execute() 传入的，对应于 sDefaultExecutor，再查下去\",\" /** * An {@link Executor} that executes tasks one at a time in serial * order. This serialization is global to a particular process. */ public static final Executor SERIAL_EXECUTOR = new SerialExecutor(); private static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;\",\"再看看 SerialExecutor 这个线程池\",\"//SerialExecutor 主要的作用是将这些线程放到线程池中，并按照串行的顺序依次调用 private static class SerialExecutor implements Executor { final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>(); Runnable mActive; public synchronized void execute(final Runnable r) { //offer() Inserts the specified element at the end of this deque. //将 r 插入到线程池中 mTasks.offer(new Runnable() { public void run() { try { r.run(); } finally { //等到当前的执行完了，就调用下一个 scheduleNext(); } } }); if (mActive == null) { scheduleNext(); } } protected synchronized void scheduleNext() { if ((mActive = mTasks.poll()) != null) { THREAD_POOL_EXECUTOR.execute(mActive);//在这里面才是真正的执行线程的内容 } } }\",\"再仔细看一下 THREAD_POOL_EXECUTOR\",\"ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor( CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory); threadPoolExecutor.allowCoreThreadTimeOut(true); THREAD_POOL_EXECUTOR = threadPoolExecutor; //Executes the given task sometime in the future. The task //may execute in a new thread or in an existing pooled thread. ThreadPoolExector.executr()\",\"以上介绍了线程和线程池部分的内容，接下来看一下在主线程和后台线程之间是如何依靠 handler 机制来传递消息的。\",\"关于构造函数，由于我们开发者只能接触到 AsyncTask() 这个构造函数，所以mHandler=getMainHandler()\",\"public AsyncTask() { this((Looper) null); } //@hide，普通开发者不可见 public AsyncTask(@Nullable Looper callbackLooper) { mHandler = callbackLooper == null || callbackLooper == Looper.getMainLooper() ? getMainHandler() : new Handler(callbackLooper); ...... } private static Handler getMainHandler() { synchronized (AsyncTask.class) { if (sHandler == null) { sHandler = new InternalHandler(Looper.getMainLooper()); } return sHandler;//sHandler 是一个类变量，取的是主线程的 looper，所以限制了 AsyncTask 只能在主线程实例化 } }\",\"再看一下 InternalHandler 类\",\"private static class InternalHandler extends Handler { public InternalHandler(Looper looper) { super(looper); } @SuppressWarnings({\\\"unchecked\\\", \\\"RawUseOfParameterizedType\\\"}) @Override public void handleMessage(Message msg) { //在这里处理后台线程发过来的消息，UI 线程 AsyncTaskResult<?> result = (AsyncTaskResult<?>) msg.obj; switch (msg.what) { case MESSAGE_POST_RESULT: // There is only one result result.mTask.finish(result.mData[0]); break; case MESSAGE_POST_PROGRESS: result.mTask.onProgressUpdate(result.mData); break; } } }\",\"例如，在 doInBackground() 方法中可以使用 publishProgress() 在后台更新进度，即是使用了 handler 发送消息。\",\"@WorkerThread protected final void publishProgress(Progress... values) { if (!isCancelled()) { getHandler().obtainMessage(MESSAGE_POST_PROGRESS, new AsyncTaskResult<Progress>(this, values)).sendToTarget(); } }\",\"最后，AsyncTask 的 finish()\",\"private void finish(Result result) { //可见，最后会根据情况调用 onCancelled() 或者 onPostExecute() if (isCancelled()) { onCancelled(result); } else { onPostExecute(result); } mStatus = Status.FINISHED; }\"]},\"194\":{\"h\":\"Compose 屏幕适配\"},\"195\":{\"h\":\"Compose 屏幕适配\",\"t\":[\"一种Compose中屏幕适配的解决方案，灵感参考头条屏幕适配、AndroidAutoSize等，以设计稿宽度和屏幕水平方法大小为准，等比拉伸控件大小。\",\"后文附有本方案的 Kotlin 语言实现，使用只需要两个步骤即可：\",\"// 1 初始化 class MainApp : Application() { override fun onCreate() { super.onCreate() SizeEtx.init(this, 375) // 375 为设计稿宽度 } } // 2 使用 size(width = 9.composeDp, height = 16.composeDp)\"]},\"196\":{\"h\":\"主要的设计思想\",\"t\":[\"假设如下变量：设计稿总宽度dpx，控件在设计稿中的大小n，屏幕的实际水平 dp 大小rdp，以及我们需要求得的控件在设备中的 dp 值m。\",\"那么我们不难得到以下方程：\",\"n / dpx = m / rdp\",\"也就可以推导出：\",\"m = n * (rdp / dpx)\",\"上述值中，只有屏幕水平 dp 值rdp还是未知的，又根据**（density 在每个设备上都是固定的，DPI / 160 = density，屏幕的总 px 宽度wpx / density = 屏幕的总 dp 宽度rdp）**可知：\",\"rdp = wpx / density\",\"所以，我们可以推导出：\",\"m = n * (rdp / dpx) = n * ( wpx / density ) / dpx = n * wpx / (density * dpx)\",\"到这里，等式后面的所有数据都为已知或者在 app 运行时可知，由此我们可以计算出设计稿中的控件在 Compose 中对应的 dp 大小。\",\"下面是以上思路的 kotlin 实现：\",\"import android.content.Context import android.content.res.Configuration import android.content.res.Resources import android.graphics.Point import android.os.Build import android.view.WindowManager import androidx.compose.ui.unit.Dp /** * @author : jixiaoyong * @description：Compose 屏幕适配方案 * * 根据设计稿宽度（设计稿宽度对应设备水平方向）和设计稿对应物体大小，计算实际应该填写的 dp * * 使用： * 在 Application onCreate() 方法中执行 * SizeEtx.init(this, 375) * 其中 375 位设计稿屏幕宽度，然后在代码中使用 width(315.composeDp) 作为大小单位即可， * 其中 315 为设计稿中的控件大小 * * 计算方式为： * wpx 屏幕实际像素宽度 * dpx 设计稿屏幕宽度 * n 控件设计稿中的宽度（dp、px 都可，与 dpx 单位保持一致） * m 控件在 app 中对应的 dp * rpx 控件在屏幕中应该展示的像素大小 * 已知条件：dp = px / density * （density 在每个设备上都是固定的，DPI / 160 = density，屏幕的总 px 宽度 / density = 屏幕的总 dp 宽度） * * DisplayMetrics#density 就是上述的 density * DisplayMetrics#densityDpi 就是上述的 dpi * * 综上得出如下结论 (以竖屏情况下屏幕宽度为例)： * 屏幕宽度总 dp：rdp = wpx / density * m / rdp = n / dpx * 那么，m = (rdp / dpx) * n * 其中 (rdp / dpx) 被我们当做设计稿中控件大小与设备中控件 dp 大小之间的缩放系数：dpWidthScale * 所以：m = dpWidthScale * n * * @email : jixiaoyong1995@gmail.com * @date : 2021/8/2 */ class SizeEtx private constructor(context: Context, dpx: Int) { init { val density = Resources.getSystem().displayMetrics.density var wpx = Resources.getSystem().displayMetrics.widthPixels dpWidthScale = wpx.toFloat() / (dpx * density) dpHeightScale = getScreenRealHeightPx(context).toFloat() / (dpx * density) pxWidthScale = wpx.toFloat() / dpx.toFloat() // 以下数据为 Redmi Note 5 的测试数据 // \\\"getScreenRealHeight ${getScreenRealHeightPx(context)}\\\".logd() // 2160，实际设备高度为 2160 // \\\"Resources.getSystem().displayMetrics.heightPixels ${Resources.getSystem().displayMetrics.heightPixels}\\\".logd() // 2033，实际设备高度为 2160 // \\\"Resources.getSystem().displayMetrics.density ${Resources.getSystem().displayMetrics.density}\\\".logd() // 2.7 // \\\"Resources.getSystem().displayMetrics.densityDpi ${Resources.getSystem().displayMetrics.densityDpi}\\\".logd() // 432 } /** * 获得屏幕真实高度（包含底部导航栏） */ private fun getScreenRealHeightPx(context: Context): Int { val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager val display = windowManager.defaultDisplay val outPoint = Point() if (Build.VERSION.SDK_INT >= 19) { // 可能有虚拟按键的情况 display.getRealSize(outPoint) } else { // 不可能有虚拟按键 display.getSize(outPoint) } // 手机屏幕真实高度 return outPoint.y } companion object { /** * 初始化大小适配工具类 * @param context * @param dpx 设计稿中的屏幕宽度，例如 375，在使用到本工具的所有地方，都应该以此宽度为准来获取其他控件的大小 */ fun init(context: Context, dpx: Int) { SizeEtx(context, dpx) } var dpWidthScale = 1.0f var dpHeightScale = 1.0f var pxWidthScale = 1.0f var pxHeightScale = 1.0f } } // Compose 屏幕适配方案 /** * 获取 Compose 中对应的 dp，输入值为设计稿中对应的控件大小 */ inline val Number.composeDp: Dp get() { val isPortrait = isPortrait() return Dp(this.toFloat() * if (isPortrait) SizeEtx.dpWidthScale else SizeEtx.dpHeightScale) } /** * 获取 Compose 中对应的 px，输入值为设计稿中对应的控件大小 */ inline val Number.composePx: Int get() { val isPortrait = isPortrait() return (this.toFloat() * if (isPortrait) SizeEtx.pxWidthScale else SizeEtx.pxHeightScale).toInt() } // 是否竖屏 fun isPortrait() = Resources.getSystem().configuration.orientation == Configuration.ORIENTATION_PORTRAIT\"]},\"197\":{\"h\":\"参考文章\",\"t\":[\"AndroidAutoSize\",\"一种极低成本的 Android 屏幕适配方式\"]},\"198\":{\"h\":\"Dagger 2 从 0 到 1 之旅\"},\"199\":{\"h\":\"前言\",\"t\":[\"Dagger 2是 Google 维护的一款可用于Java和Android的依赖注入框架。\",\"本文主要是简单梳理Dagger 2中各个注解的作用，以及其简单用法，不涉及具体项目应用。\",\"先解释几个概念：\",\"依赖注入：是一个对象（或静态方法）给另一个对象提供依赖的技术。\",\"**依赖**是可以使用的对象（Service），而把依赖提供给使用该依赖的对象（Client）的过程叫做注入。\",\"例如，下面这段代码中Service就是Client的依赖。：\",\"class Service class Client(){ init { val service = Service() } }\",\"但是如果每个依赖都这样写的话，如果Service类的构造方法有变更，就需要同时也更改Client对应的方法，这样深耦合的代码显然不是我们需要的。\",\"Dagger 2 就是为了帮助我们解决这个问题，在使用它之后，Client类的代码只需要这样写成类似下面这样（示例代码）：\",\"class Client{ lateinit var service: Service init { //TODO 某个将 Service 依赖注入的方法 magicFun() val newService = service//使用 Service 的实例 service } }\",\"可以看到，这时Service的实例化过程被移到了Client的外部某处，这样如果Service构造方法有更新时，我们只需要统一去修改magicFun()中对应的代码即可。\",\"那么这一切Dagger 2到底是如何实现的呢？\"]},\"200\":{\"h\":\"Dagger 2 具体实现\"},\"201\":{\"h\":\"@Inject\",\"t\":[\"首先需要请出第一个主角——@Inject。\",\"在Dagger 2中，@Inject主要做两件事 ❶ 标记依赖类的构造方法；❷ 标记需要框架自动实例化的对象：\",\"class Service @Inject constructor()//❶标记依赖类的构造方法 class Client{ @Inject lateinit var service: Service//❷标记需要框架自动实例化的对象 ... }\",\"这样Dagger 2 就知道了有个对象需要它来帮助我们注入，同时也知道了有一个构造方法来实例化Service对象。但这时如何将二者联系起来呢？\"]},\"202\":{\"h\":\"@Component\",\"t\":[\"这就要提到第二个主角——@Component。\",\"@Component标记的类是将一个类和他的依赖联系在一起的桥梁，通常是一个抽象类或者接口：\",\"@Component interface ClientComponent{ fun inject(client: Client) }\",\"至此，Client和Service通过ClientComponent联系在一起，在使用时只需要将Client的引用传入即可：\",\" init { //方式❶ DaggerClientComponent.create().inject(this) //方式❷ DaggerClientComponent.builder().build().inject(this) val newService = service }\",\"以上完整的代码可以参考这里，若无法显示可点击这里查看：\",\"到目前为止，对于我们自己定义的类，我们只需要使用@Inject标记其构造方法，然后再在使用该类的时候使用@Inject标记该对象，在需要使用该对象的地方通过@Component类传入使用该依赖的类的引用即可。\",\"但是很显然实际开发中，不是所有的Service类都可以被我们随意修改，如果Service类是第三方提供的类，显然我们是无法用@Inject修饰其构造函数的。\"]},\"203\":{\"h\":\"@Module 和@Provides\",\"t\":[\"为了解决第三方依赖的问题，我们要引入另外两个主角——@Module和@Provides。\",\"@Provides用来提供一个方法，我们可以在其内部实例化并返回Service类，这样子当用到Service的时候，@Component类只需要找到@Provides提供的这个方法，并获取到他实例化好的Service对象注入到Client中就可以了。\",\"@Module则是提供一个类（注意是类，而非接口），像一个袋子一样把@Provides提供的方法“装”到一起，打包提供给@Component类。\",\"@Module class ClientModule{ @Provides fun getService() = Service() } @Component(modules = [ClientModule::class])//Component 可以有多个 Module 类 interface ClientComponent{ fun inject(client: Client) }\",\"上述代码中的@Component(modules = [ClientModule::class])将装有可以产生依赖的@Provides方法的“大袋子”@Module和“桥梁”@Component关联到了一起。\",\"@Component在产生依赖的时候会先到@Module类中的@Provides方法中查找；如果找不到才会再到@Inject中查找。（也就是说，此时Service类的@Inject构造方法其实是失效了的，完全可以没有@Inject注解——第三方类即是如此）。\",\"上述完整代码如下，若无法显示可点击这里查看：\",\"解决了第三方依赖引用的问题，还有一个非常重要的问题——我们使用的绝大多数类肯定不止一个构造方法，那么假设依赖类Service现在有两个构造方法，我们需要分别这两个构造方法，这种情况又该怎么处理呢？\",\"class Service @Inject constructor(var string: String = \\\"default\\\")\",\"很明显，这时候@Inject注解已经没用了，一个类只能有一个构造方法被@Inject修饰，否则会报错：错误: Types may only contain one @Inject constructor。\",\"去掉@Inject后Service类变成如下：\",\"class Service(var string: String = \\\"default\\\")\",\"尝试在@Module中添加另外一个@Provides方法使用另外一个带参构造函数：\",\"@Module class ClientModule{ @Provides fun getService() = Service() @Provides fun getServiceWithArgs() = Service(\\\"Args\\\") }\",\"运行时发现会出错，因为有两个方法都可以提供Service，@Component产生了迷失，不知道用哪一个好，导致错误。\"]},\"204\":{\"h\":\"@Named 和@Qualifier\",\"t\":[\"为了解决多个构造函数导致的问题，这时就需要第五个主角**@Named以及幕后英雄@Qualifier**\",\"首先，上述问题的解决方案是在另外一个方法上加一个注解@Named，表示他是一个特殊的方法：\",\" @Provides @Named(\\\"Args\\\") fun getServiceWithArgs() = Service(\\\"Args\\\")\",\"当在Client中想使用这个方法的依赖时：\",\" //@field:是 kotlin 中注解字段特别需要的，在 Java 中可以直接写成@Named(\\\"Args\\\") @Inject @field:Named(\\\"Args\\\") lateinit var service: Service\",\"查看@Named源码：\",\"@Qualifier @Documented @Retention(RUNTIME) public @interface Named { /** The name. */ String value() default \\\"\\\"; }\",\"发现@Qualifier才是他实现标识限定符注解（Identifies qualifier annotations）的力量之源。查看@Qualifier注解可以知道，我们也可以自定义基于@Qualifier的注解来实现和@Named完全一致的功能。\",\"@Qualifier @MustBeDocumented @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) annotation class YourQualifierName(//YourQualifierName 可以是任意你喜欢的名字 /** The name. */ val value: String = \\\"\\\" )\",\"之后我们就可以使用@YourQualifierName替代@Named实现标识不同注解的作用，从而支持有多个构造函数的Service类的初始化。\",\"上述完整代码如下，若无法显示可点击这里查看：：\",\"@Component可以有多个@Module，他们之间的关系可以用下图表示：\"]},\"205\":{\"h\":\"@Singleton 和@Scope\",\"t\":[\"在实际开发中，我们需要有的类只能有一个实例，从而在不同的地方共享一些数据——即单例，这种情况就需要另外一个角色@Singleton和他的幕后英雄@Scope。\",\"@Singleton 是用来标记类在其范围内只能被实例化一次。\",\"@Scope @Documented @Retention(RUNTIME) public @interface Singleton {}\",\"通过查看其源码可以知道其背后是@Scope在起作用，@Scope的作用是限定其修饰的类的范围，适用于有可注入的构造函数并且包含控制类型实例如何重用的类。没有@Scope修饰的实例在构造完毕后就会失去控制，不再关心后续的发展（then forgets it），而@Scope修饰的类会在实例构造完毕后，继续保留一遍下一次可能的复用，当有多个线程可以访问该实例时，他的实现应该是线程安全的（it‘s implementation should be thread safe）。\",\"此外@Component应该和他所包含的@Module的@Provides的@Scope范围一致：\",\"@Singleton @Component(modules = [ClientModule::class]) interface ClientComponent{ fun inject(client: Client) } @Module class ClientModule{ @Provides fun getService() = Service() @Singleton @Provides @Choose(\\\"Args\\\") fun getServiceWithArgs() = Service(\\\"Args\\\") }\",\"此外两个关系为**dependencies**的@Component可以分别拥有相同名称的@Inject、@Module、@Provides而不会被merge，两者可以相互访问。\",\"而**subcomponents**则不能和@Component有以上相同的项。\",\"Subcomponent从它的父类访问所有依赖\",\"@Component只能访问在基类@Component接口暴露的公共性的依赖\",\"——Subcomponents 和 Component Dependencies——Sinyuk Blog\",\"他们之间的关系可以表示为下图：\"]},\"206\":{\"h\":\"参考资料\",\"t\":[\"android-cn：依赖注入—— Github\",\"Dependency Injection ——wikipedia\",\"Elye 的 Dagger 2 系列\",\"Dagger 2 官方手册\",\"Android - Dagger2 使用详解——简书\",\"Subcomponents 和 Component Dependencies——Sinyuk Blog\"]},\"207\":{\"c\":[\"dagger2\"]},\"208\":{\"h\":\"Dagger 2 ❤️ Android\"},\"209\":{\"h\":\"前言\",\"t\":[\"上篇文章介绍了Dagger 2 的基本使用，本文跟随官方文档实践一下Dagger 2 在Android中的使用，可以看做是官方文档的不完全翻译。\",\"本文有关Dagger 2的使用分为Activity和Fragment两部分，二者的使用几乎没有差别，最后介绍一下在 Google 官方 Demo 中学到的一个小技巧，可以将几乎所有的和Dagger 2的逻辑放到一份代码里面，对Android工程的影响极小。\",\"首先要添加相关依赖（Kotlin 环境）：\",\"apply plugin: 'kotlin-kapt'//引用该插件 implementation \\\"com.google.dagger:dagger:$rootProject.dagger2Version\\\" implementation \\\"com.google.dagger:dagger-android-support:$rootProject.dagger2Version\\\"//Android 特需 kapt \\\"com.google.dagger:dagger-compiler:$rootProject.dagger2Version\\\"//注意如果是 kotlin 语言，这里需要时#kapt#\"]},\"210\":{\"h\":\"在 Activity 中的使用\"},\"211\":{\"h\":\"Application 范围内的@Component\",\"t\":[\"首先创建整个应用程序使用的@Component，并将AndroidInjectionModule加入其中，实现Inject注入入口：\",\"@Component(modules = [AndroidInjectionModule::class, MainActivityModule::class]) interface AppComponent { fun inject(application: MainApplication) }\",\"AppComponent的范围是整个应用程序都有效。\"]},\"212\":{\"h\":\"创建单个 Activity 的@Subcomponent\",\"t\":[\"创建某个Activity专属的@Subcomponent，用于提供AndroidInjector.Builder。\",\"@Subcomponent interface MainActivitySubComponent : AndroidInjector<MainActivity> { @Subcomponent.Builder abstract class Builder : AndroidInjector.Builder<MainActivity>() }\"]},\"213\":{\"h\":\"创建单个 Activity 的@Module\",\"t\":[\"创建属于整个Activity的@Module，注意这里要指明@subcomponents为刚刚创建的MainActivitySubComponent。\",\"@Module(includes = [MainActivityModule.InnerModule::class], subcomponents = [MainActivitySubComponent::class]) class MainActivityModule { @Provides fun bindWaitForInjectClass() = WaitForInjectClass() @Module abstract class InnerModule { @Binds @IntoMap @ClassKey(MainActivity::class) abstract fun bindInjectorFactory(builder: MainActivitySubComponent.Builder): AndroidInjector.Factory<*>//注意这里是 Factory<*> } } class WaitForInjectClass //一个供依赖注入的类\",\"可以看到在MainActivityModule中提供了一个方法利用刚刚MainActivitySubComponent中提供的MainActivitySubComponent.Builder实例生成了一个AndroidInjector.Factory，而这个Factory就是我们后面要将MainActivityModule中的依赖实例通过AppComponent传递给MainActivity实例的关键。\",\"此外还可以看到提供该 Factory 的方法是放到了另外一个抽象类里面然后再导入 MainActivityModule 中的，这是因为该方法的注解@Binds 要求方法是抽象的，而 MainActivityModule 要是需要给 Activity 提供依赖实例所必须的@Provides 又要求类不能是抽象的，否则就要求该方法是静态的。权衡之下我觉得这种方式是比较能接受的，当然也不排除有其他更优雅的解决方案，欢迎提Issue告知。\",\"然后，将MainActivityModule加入到应用程序的@Component——AppComponent中。\"]},\"214\":{\"h\":\"\",\"t\":[\"使当前MainApplication继承自HasActivityInjector，该接口只有一个方法：\",\"/** Returns an {@link AndroidInjector} of {@link Activity}s. */ AndroidInjector<Activity> activityInjector();\",\"这个类是用来为相应的Activity提供一个AndroidInjector。由于我们已经在AppComponent中包括了AndroidInjectionModule，所以Dagger 2已经可以自动为我们注入DispatchingAndroidInjector依赖，所以接下来的代码如下：\",\"class MainApplication : HasActivityInjector, Application() { override fun onCreate() { super.onCreate() DaggerAppComponent.create().inject(this) } @Inject lateinit var dispatchActivityInjector: DispatchingAndroidInjector<Activity> override fun activityInjector() = dispatchActivityInjector//返回 Dagger 2 为我们注入的 dispatchActivityInjector 对象 }\",\"在onCreate()方法中传入当前Application的依赖。\"]},\"215\":{\"h\":\"在 Activity 中使用自动注入依赖\",\"t\":[\"做完了以上所有内容，我们只需要在Activity中添加如下代码就可以实现自动注入：\",\"class MainActivity : AppCompatActivity() { @Inject lateinit var waitForInjectClass: WaitForInjectClass override fun onCreate(savedInstanceState: Bundle?) { AndroidInjection.inject(this)//注意这里，在 super() 之前调用 super.onCreate(savedInstanceState) setContentView(R.layout.activity_dagger2_x_android_main) Log.d(\\\"TAG\\\", \\\"The Class is $waitForInjectClass\\\") } }\",\"以上所有代码如下，或者也可以在这里找到：\"]},\"216\":{\"h\":\"这一切是怎么实现的呢？\",\"t\":[\"在Android程序运行时，AndroidInjection.inject()从Application中的activityInjector()方法获取到 DispatchingAndroidInjector<Activity> ，然后将Activity传入inject(Activity)。\",\"DispatchingAndroidInjector 通过AppComponent找到我们在MainActivityModule提供的对应的AndroidInjector.Factory，然后创建了 AndroidInjector ——这就是我们当前Activity对应的MainActivitySubComponent。\",\"接下来便按照之前的逻辑，从MainActivitySubComponent中查找提供waitForInjectClass的实例方法完成注入。\"]},\"217\":{\"h\":\"在 Fragment 中的使用\",\"t\":[\"Dagger 2在Fragment的使用和在Activity中的使用十分相似。\",\"通过之前的代码我们可以知道，其基本的原理依旧是利用@Component和@subcomponent，@Module之间的关联关系将Application和Activity等的依赖注入通过AndroidInjector关联起来的：\",\"MainActivitySubComponent通过将MainActivityModule加入到AppComponent之中，然后当MainActivity之中需要使用到MainActivitySubComponent时，又通过AndroidInjector从AppComponent中拿到MainActivityModule中的AndroidInjector.Factory，通过该Factory和MainActivitySubComponent中的Builder产生关联，从而获取到了MainActivitySubComponent的实例供Activity使用。\",\"在Fragment中我们也可以这样处理，只不过由于Fragment的特性，他的@Module不仅可以交给Application的@Component，也可以交给其他Fragment或者Activity的@Component，让其实现HasFragmentInjector即可，这取决于我们想要给Fragment绑定的依赖。\",\"具体的实现一般分为下面几步：\",\"创建Application的@Component并添加AndroidInjectionModule\",\"创建实现了AndroidInjector<MainFragment>的MainFragmentSubComponent，其内部有方法提供AndroidInjector.Builder<MainFragment>\",\"创建包含了提供AndroidInjector.Factory<*>的抽象方法的MainFragmentModule，指定其subcomponents为MainFragmentSubComponent；\",\"将MainFragmentSubComponent加入到想要加入的类的@Component中，比如AppComponent类\",\"在Application（如果上一步是Activity，则本步也是Activity等）中参照在Activity实现的步骤实现HasFragmentInjector\",\"上述完整的代码如下，或者也可以在这里找到：\",\"关于Fragment加入到Activity的 Demo 在官方文档有，这里就不再赘述了，其实只要掌握原理，其他用法的完全可以触类旁通。\"]},\"218\":{\"h\":\"一个小技巧\",\"t\":[\"通过观察上面的两份代码，我们发现虽然这Dagger 2已经替我们做了好多事情，我们只需要在需要使用依赖注入的类中使用诸如AndroidInjection.inject(this)这样的代码就可以了，但是如果Activity、Fragment类过多的时候，这样的重复性工作仍然是个不小的工作量，万一有某处遗忘了便会导致出错。\",\"这时就可以用到我在Google 官方示例代码中学到的一个小技巧了 (针对本文中的例子做了一些修改)，或者你也可以到这里查看源码：\"]},\"219\":{\"h\":\"参考资料\",\"t\":[\"Dagger 2 官方文档 Android 篇\",\"Google 官方示例代码——GithubBrowserSample\"]},\"220\":{\"c\":[\"dagger2\"]},\"221\":{\"h\":\"Dart event loop\",\"t\":[\"本文基于 Dart 2.17\",\"Dart App 中所有的代码都在一个 isolate 中运行（各个 isolate 之间的代码运行时是隔离的），一个 isolate 有自己的 heap，维持有一个消息队列 event_loop，处理两种消息：\",\"event queue 执行用户点击、屏幕刷新、绘制，一般的 Future、IO、Stream 流等，每次执行完毕都会先检查执行 micro task queue 中的任务，直到其为空再执行下一个 event queue\",\"microTask queue 优先执行，一般执行跑完即弃的小任务，如 Dart 内部的微任务\",\"上述两种 event 会在普通的 Dart 同步方法执行完毕后执行，无论是 microTask 还是普通的 event，他们都是concurrency 并行执行（也就是说实际上还是上一个执行完毕，再执行另外一个），所以如果这些 event 中存在耗时长的方法，依旧会阻塞其他方法的执行，可能导致 UI 卡顿等情况。\",\"在代码执行的过程中，各种事件（如用户点击、屏幕刷新、future、microtask 等）都会被当做一个个 event 放入到 event queue 中，然后不停的从 event loop 取出事件并执行：\",\"dart_event_loop\",\"他们的执行顺序如下：\",\"dart_event_loop_sequeue\",\"可以从下述例子详细看一下代码执行的时候各个方法执行过程：\",\"dart_test_queue_code\",\"dart_test_queue_output\",\"本文根据 Dart SDK 源码分析一下 event loop 的实现。\",\"代码参考：https://gist.github.com/jixiaoyong/ac811902db42a51cf97e3290788ade4a\"]},\"222\":{\"h\":\"1. 同步方法\",\"t\":[\"同步方法包括普通的方法，以及一下几种会按照同步方法立即执行的方式：\",\"Future.sync(() => print(\\\"Hello, I am future created by Future.sync\\\")); Future.forEach( [1, 2, 3], (element) => print(\\\"Hello, I am future($element) created by Future.forEach\\\")); Future.doWhile(() async { if (repeatCounter++ < 3) { print(\\\"repeat ($repeatCounter/3) inner Future.doWhile\\\"); await Future.delayed(const Duration(seconds: 1)); return true; } return false; });\"]},\"223\":{\"h\":\"2. micro task\",\"t\":[\"microtask 会在同步方法执行完毕之后立即被执行，一般用来执行“即抛型”的方法，不应当执行耗时方法。microtask 列表会一直执行，直到 event loop 中没有 micro task 了，才会去执行 Future 等普通的 event。\",\"scheduleMicrotask(() { print('Hello, world! I am a microtask.'); }); Future.microtask( () => print(\\\"Hello, I am microtask created by Future.microtask\\\")); Future.value(1).then((value) { print(\\\"Hello, I am future created by Future.value\\\"); }); Future.error(Exception(\\\"Hello, I am future created by Future.error\\\")) .onError((error, stackTrace) => print(error));\",\"Future.value([FutureOr<T>? value]) 比较特殊，如果value 是 future，那么他会在 value 执行完毕后返回他的值，如果value不是 future，他就会立即执行属于 microtask\"]},\"224\":{\"h\":\"代码分析\",\"t\":[\"让我们看一下上述方法的具体实现：\",\"// -> sdk\\\\lib\\\\async\\\\future.dart factory Future.microtask(FutureOr<T> computation()) { _Future<T> result = new _Future<T>(); scheduleMicrotask(() { try { result._complete(computation()); } catch (e, s) { _completeWithErrorCallback(result, e, s); } }); return result; }\",\"可以看出，Future.microtask本质还是调用scheduleMicrotask实现的，其实现如下：\",\"// -> sdk\\\\lib\\\\async\\\\schedule_microtask.dart @pragma('vm:entry-point', 'call') void scheduleMicrotask(void Function() callback) { _Zone currentZone = Zone._current; if (identical(_rootZone, currentZone)) { // No need to bind the callback. We know that the root's scheduleMicrotask // will be invoked in the root zone. _rootScheduleMicrotask(null, null, _rootZone, callback); return; } _ZoneFunction implementation = currentZone._scheduleMicrotask; if (identical(_rootZone, implementation.zone) && _rootZone.inSameErrorZone(currentZone)) { _rootScheduleMicrotask( null, null, currentZone, currentZone.registerCallback(callback)); return; } Zone.current.scheduleMicrotask(Zone.current.bindCallbackGuarded(callback)); }\",\"Zone.scheduleMicrotask()最后调用的是_RootZone的同名方法：\",\"// -> sdk\\\\lib\\\\async\\\\zone.dart class _RootZone extends _Zone { void scheduleMicrotask(void f()) { _rootScheduleMicrotask(null, null, this, f); } } void _rootScheduleMicrotask( Zone? self, ZoneDelegate? parent, Zone zone, void f()) { if (!identical(_rootZone, zone)) { bool hasErrorHandler = !_rootZone.inSameErrorZone(zone); if (hasErrorHandler) { f = zone.bindCallbackGuarded(f); } else { f = zone.bindCallback(f); } } _scheduleAsyncCallback(f); }\"]},\"225\":{\"h\":\"_RootZone._scheduleAsyncCallback\",\"t\":[\"这里调用了_RootZone._scheduleAsyncCallback方法，将传入的 callback 当做 microtask 执行。\",\"// -> sdk\\\\lib\\\\async\\\\schedule_microtask.dart /// Schedules a callback to be called as a microtask. /// /// The microtask is called after all other currently scheduled /// microtasks, but as part of the current system event. void _scheduleAsyncCallback(_AsyncCallback callback) { _AsyncCallbackEntry newEntry = new _AsyncCallbackEntry(callback); _AsyncCallbackEntry? lastCallback = _lastCallback; if (lastCallback == null) { _nextCallback = _lastCallback = newEntry; if (!_isInCallbackLoop) { _AsyncRun._scheduleImmediate(_startMicrotaskLoop); } } else { lastCallback.next = newEntry; _lastCallback = newEntry; } }\"]},\"226\":{\"h\":\"_RootZone._startMicrotaskLoop\",\"t\":[\"这里面的_startMicrotaskLoop方法是实际上处理 microtask 的地方：\",\"// -> sdk\\\\lib\\\\async\\\\schedule_microtask.dart /// Whether we are currently inside the callback loop. /// /// If we are inside the loop, we never need to schedule the loop, /// even if adding a first element. bool _isInCallbackLoop = false; void _microtaskLoop() { for (var entry = _nextCallback; entry != null; entry = _nextCallback) { _lastPriorityCallback = null; var next = entry.next; _nextCallback = next; if (next == null) _lastCallback = null; (entry.callback)(); } } void _startMicrotaskLoop() { _isInCallbackLoop = true; try { // Moved to separate function because try-finally prevents // good optimization. _microtaskLoop(); } finally { _lastPriorityCallback = null; _isInCallbackLoop = false; if (_nextCallback != null) { _AsyncRun._scheduleImmediate(_startMicrotaskLoop); } } }\",\"而_AsyncRun._scheduleImmediate方法则是触发处理 microtask 的方法：\",\"// -> sdk\\\\lib\\\\async\\\\schedule_microtask.dart class _AsyncRun { /// Schedule the given callback before any other event in the event-loop. external static void _scheduleImmediate(void Function() callback); }\"]},\"227\":{\"h\":\"_AsyncRun._scheduleImmediate\",\"t\":[\"_AsyncRun._scheduleImmediate方法的实现在schedule_microtask_patch.dart中：\",\"// -> sdk/lib/_internal/vm/lib/schedule_microtask_patch.dart @patch class _AsyncRun { @patch static void _scheduleImmediate(void callback()) { final closure = _ScheduleImmediate._closure; if (closure == null) { throw new UnsupportedError(\\\"Microtasks are not supported\\\"); } closure(callback); } } typedef void _ScheduleImmediateClosure(void callback()); class _ScheduleImmediate { static _ScheduleImmediateClosure? _closure; } @pragma(\\\"vm:entry-point\\\", \\\"call\\\") void _setScheduleImmediateClosure(_ScheduleImmediateClosure closure) { _ScheduleImmediate._closure = closure; } @pragma(\\\"vm:entry-point\\\", \\\"call\\\") void _ensureScheduleImmediate() { _AsyncRun._scheduleImmediate(_startMicrotaskLoop); }\"]},\"228\":{\"h\":\"_ScheduleImmediateClosure\",\"t\":[\"可以看到，microtask 实际上是使用_ScheduleImmediateClosure调用的，关于他主要有两个方法：\",\"_setScheduleImmediateClosure\",\"_ensureScheduleImmediate\",\"让我们先看一下第一个方法_setScheduleImmediateClosure：\",\"// -> runtime\\\\bin\\\\dartutils.cc // PrepareAsyncLibrary 方法会在 Dart 虚拟机启动的时候被调用 Dart_Handle DartUtils::PrepareAsyncLibrary(Dart_Handle async_lib, Dart_Handle isolate_lib) { Dart_Handle schedule_immediate_closure = Dart_Invoke( isolate_lib, NewString(\\\"_getIsolateScheduleImmediateClosure\\\"), 0, NULL); RETURN_IF_ERROR(schedule_immediate_closure); Dart_Handle args[1]; args[0] = schedule_immediate_closure; return Dart_Invoke(async_lib, NewString(\\\"_setScheduleImmediateClosure\\\"), 1, args); }\",\"这里主要调用了 Dart 中的_getIsolateScheduleImmediateClosure方法创建了schedule_immediate_closure，然后通过_setScheduleImmediateClosure返回：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\isolate_patch.dart /// The embedder can execute this function to get hold of /// [_isolateScheduleImmediate] above. @pragma(\\\"vm:entry-point\\\", \\\"call\\\") Function _getIsolateScheduleImmediateClosure() { return _isolateScheduleImmediate; } /// The closure that should be used as scheduleImmediateClosure, when the VM /// is responsible for the event loop. void _isolateScheduleImmediate(void callback()) { assert((_pendingImmediateCallback == null) || (_pendingImmediateCallback == callback)); _pendingImmediateCallback = callback; } /// The callback that has been registered through `scheduleImmediate`. _ImmediateCallback? _pendingImmediateCallback;\",\"可以看到，这个方法会将传递进来的callback赋值给_pendingImmediateCallback。\",\"而结合上面的代码，_ensureScheduleImmediate 方法主要也是用来触发_ScheduleImmediateClosure执行回调事件。\",\"到目前为止，我们能确定的是：\",\"在 Dart VM 启动的时候，会创建一个_ScheduleImmediateClosure并保存在_pendingImmediateCallback;\",\"当有新的 microtask 加入的时候，会触发_startMicrotaskLoop方法在_microtaskLoop()中实际处理一个 microtask（这里的_startMicrotaskLoop触发的实际是通过_AsyncRun._scheduleImmediate(_startMicrotaskLoop)将其使用_pendingImmediateCallback 包裹之后执行的）。\"]},\"229\":{\"h\":\"_pendingImmediateCallback\",\"t\":[\"现在的问题是，这个_pendingImmediateCallback 什么时候会被安排执行呢？\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\isolate_patch.dart @pragma(\\\"vm:entry-point\\\", \\\"call\\\") void _runPendingImmediateCallback() { final callback = _pendingImmediateCallback; if (callback != null) { _pendingImmediateCallback = null; callback(); } } @pragma(\\\"vm:entry-point\\\") class _RawReceivePortImpl implements RawReceivePort { // Called from the VM to retrieve the handler and handle a message. @pragma(\\\"vm:entry-point\\\", \\\"call\\\") static _handleMessage(int id, var message) { final handler = _portMap[id]?['handler']; if (handler == null) { return null; } // TODO(floitsch): this relies on the fact that any exception aborts the // VM. Once we have non-fatal global exceptions we need to catch errors // so that we can run the immediate callbacks. handler(message); _runPendingImmediateCallback(); return handler; } }\",\"注意这里的关键代码，在_handleMessage方法中，会先执行RawReceivePort原本的 handler 内容，然后，执行_runPendingImmediateCallback()。\",\"在_runPendingImmediateCallback则会执行_pendingImmediateCallback的内容，也就是前面的_startMicrotaskLoop，处理 event loop 中的 micro task。\",\"这也就证明了我们之前说的“microtask 会在同步方法之后立即执行，并在每次普通的 event loop 执行完毕之后，都会检查并执行 event loop 中的 microtask，之后才继续执行普通 event”。\",\"在下面的分析中，我们也还可以看到，在 event 每次处理 Timer 事件之后，都会检查执行 micro task。\"]},\"230\":{\"h\":\"3. event\",\"t\":[\"除了下面列出来的使用 Future 或者 Timer 等创建的方法外，屏幕点击、刷新等事件也在此类 event 中。\",\"当前 event loop 中没有 micro task 之后，就会执行一次此类普通 event，然后再检查一次 event loop，如果有 micro task 就执行 micro task 直到清空 micro task，否则继续执行下一个普通 event，直到 event loop 列表为空，退出 app。\",\"先看几种会触发此类事件的方法：\",\"Future.delayed(const Duration(seconds: 1), () { print(\\\"Hello, I am future\\\"); }); Future.any([ Future(() { return \\\"I am Future run immediately Future.any\\\"; }), Future.delayed(const Duration(seconds: 1), () { return \\\"I am Future run delay, will be discard Future.any\\\"; }) ]).then((value) => print(value)); Future.wait([ Future(() { return \\\"I am Future run immediately Future.wait 1/2\\\"; }), Future.delayed(const Duration(seconds: 1), () { return \\\"I am Future run delay Future.wait 2/2\\\"; }) ]).then((value) => print(value));\",\"以及 Timer\",\"Timer.periodic(const Duration(seconds: 1), (timer) { print(\\\"Hello, I am running inner(${timer.tick}/2) Timer.periodic\\\"); if (timer.tick == 2) { timer.cancel(); } }); Timer.run(() { print( \\\"Hello, I will run asynchronously as soon as possible with Timer.run\\\"); }); Timer(Duration(seconds: 1), () { print(\\\"Hello, I will run asynchronously after 1 second with Timer\\\"); });\"]},\"231\":{\"h\":\"代码分析\",\"t\":[\"我们依次看一下上述几个方法的具体实现：\",\"// -> sdk\\\\lib\\\\async\\\\future.dart factory Future.delayed(Duration duration, [FutureOr<T> computation()?]) { if (computation == null && !typeAcceptsNull<T>()) { throw ArgumentError.value( null, \\\"computation\\\", \\\"The type parameter is not nullable\\\"); } _Future<T> result = new _Future<T>(); new Timer(duration, () { if (computation == null) { result._complete(null as T); } else { try { result._complete(computation()); } catch (e, s) { _completeWithErrorCallback(result, e, s); } } }); return result; } static Future<T> any<T>(Iterable<Future<T>> futures) { var completer = new Completer<T>.sync(); void onValue(T value) { if (!completer.isCompleted) completer.complete(value); } void onError(Object error, StackTrace stack) { if (!completer.isCompleted) completer.completeError(error, stack); } for (var future in futures) { // 一旦有一个 future 执行完毕，就立即返回结果，并丢弃掉后续 future 的返回 future.then(onValue, onError: onError); } return completer.future; } @pragma(\\\"vm:recognized\\\", \\\"other\\\") static Future<List<T>> wait<T>(Iterable<Future<T>> futures, {bool eagerError = false, void cleanUp(T successValue)?}) { // This is a VM recognised method, and the _future variable is deliberately // allocated in a specific slot in the closure context for stack unwinding. final _Future<List<T>> _future = _Future<List<T>>(); List<T?>? values; // Collects the values. Set to null on error. int remaining = 0; // How many futures are we waiting for. late Object error; // The first error from a future. late StackTrace stackTrace; // The stackTrace that came with the error. // Handle an error from any of the futures. void handleError(Object theError, StackTrace theStackTrace) { remaining--; List<T?>? valueList = values; if (valueList != null) { if (cleanUp != null) { for (var value in valueList) { if (value != null) { // Ensure errors from cleanUp are uncaught. T cleanUpValue = value; new Future.sync(() { cleanUp(cleanUpValue); }); } } } values = null; if (remaining == 0 || eagerError) { _future._completeError(theError, theStackTrace); } else { error = theError; stackTrace = theStackTrace; } } else if (remaining == 0 && !eagerError) { _future._completeError(error, stackTrace); } } try { // As each future completes, put its value into the corresponding // position in the list of values. for (var future in futures) { int pos = remaining; // 在这里依次执行 future future.then((T value) { remaining--; List<T?>? valueList = values; if (valueList != null) { valueList[pos] = value; if (remaining == 0) { _future._completeWithValue(List<T>.from(valueList)); } } else { if (cleanUp != null && value != null) { // Ensure errors from cleanUp are uncaught. new Future.sync(() { cleanUp(value); }); } if (remaining == 0 && !eagerError) { // If eagerError is false, and valueList is null, then // error and stackTrace have been set in handleError above. _future._completeError(error, stackTrace); } } }, onError: handleError); // Increment the 'remaining' after the call to 'then'. // If that call throws, we don't expect any future callback from // the future, and we also don't increment remaining. remaining++; } if (remaining == 0) { return _future.._completeWithValue(<T>[]); } values = new List<T?>.filled(remaining, null); } catch (e, st) { // The error must have been thrown while iterating over the futures // list, or while installing a callback handler on the future. // This is a breach of the `Future` protocol, but we try to handle it // gracefully. if (remaining == 0 || eagerError) { // Throw a new Future.error. // Don't just call `_future._completeError` since that would propagate // the error too eagerly, not giving the callers time to install // error handlers. // Also, don't use `_asyncCompleteError` since that one doesn't give // zones the chance to intercept the error. return new Future.error(e, st); } else { // Don't allocate a list for values, thus indicating that there was an // error. // Set error to the caught exception. error = e; stackTrace = st; } } return _future; }\",\"可以看到，除了Future.wait和Future.any这两个处理 Future 集合的方法外，Future.delayed 这个方法内部是实际上是通过 Timer 实现**的。\"]},\"232\":{\"h\":\"Future.then\",\"t\":[\"在看 Timer 实现之前，先看一下Futrue.then的实现，他对应的实现是_Future.then：\",\"// -> sdk\\\\lib\\\\async\\\\future_impl.dart class _Future<T> implements Future<T> { // Register callbacks to be called when this future completes. // // When this future completes with a value, the [onValue] callback will be called with that value. // If this future is already completed, the callback will not be called immediately, // but will be scheduled in a later microtask Future<R> then<R>(FutureOr<R> f(T value), {Function? onError}) { Zone currentZone = Zone.current; if (identical(currentZone, _rootZone)) { if (onError != null && onError is! Function(Object, StackTrace) && onError is! Function(Object)) { throw ArgumentError.value( onError, \\\"onError\\\", \\\"Error handler must accept one Object or one Object and a StackTrace\\\" \\\" as arguments, and return a value of the returned future's type\\\"); } } else { f = currentZone.registerUnaryCallback<FutureOr<R>, T>(f); if (onError != null) { // This call also checks that onError is assignable to one of: // dynamic Function(Object) // dynamic Function(Object, StackTrace) onError = _registerErrorHandler(onError, currentZone); } } _Future<R> result = new _Future<R>(); _addListener(new _FutureListener<T, R>.then(result, f, onError)); // 返回创建好的 Future return result; } }\",\"_Futrue.then只是对传入的回调的进行了包装，实际上是通过_Future._addListener()实现具体的逻辑：\",\"// -> sdk\\\\lib\\\\async\\\\future_impl.dart bool get _mayComplete => (_state & _completionStateMask) == _stateIncomplete; bool get _isPendingComplete => (_state & _statePendingComplete) != 0; bool get _mayAddListener => _state <= (_statePendingComplete | _stateIgnoreError); void _addListener(_FutureListener listener) { assert(listener._nextListener == null); // 如果是待完成的或者忽略错误的，将当前 listener 添加到链表头部； // 在后文处理结果的时候，会从链表尾部开始读取 if (_mayAddListener) { listener._nextListener = _resultOrListeners; _resultOrListeners = listener; } else { if (_isChained) { // Delegate listeners to chained source future. // If the source is complete, instead copy its values and // drop the chaining. _Future source = _chainSource; if (!source._isComplete) { // 如果依赖于 source，那么就添加为 source 的 listener source._addListener(listener); return; } _cloneResult(source); } assert(_isComplete); // Handle late listeners asynchronously. _zone.scheduleMicrotask(() { // Propagates the value/error of [source] to its [listeners] _propagateToListeners(this, listener); }); } }\",\"在_Future._addListener(_FutureListener listener)中基本上做了如下判断：\",\"如果 Future 是延迟完成的，就添加监听。\",\"如果 Future 已经完成了，就加入到 micro task 中，安排执行 listener 回调（_propagateToListeners(this, listener)）。\",\"具体可以参考Flutter 之 Future 原理解析。\"]},\"233\":{\"h\":\"Timer\",\"t\":[\"我们再看一下 Timer 的实现：\",\"// -> sdk\\\\lib\\\\async\\\\timer.dart // Timer.run static void run(void Function() callback) { new Timer(Duration.zero, callback); } factory Timer(Duration duration, void Function() callback) { if (Zone.current == Zone.root) { // No need to bind the callback. We know that the root's timer will // be invoked in the root zone. return Zone.current.createTimer(duration, callback); } return Zone.current .createTimer(duration, Zone.current.bindCallbackGuarded(callback)); } factory Timer.periodic(Duration duration, void callback(Timer timer)) { if (Zone.current == Zone.root) { // No need to bind the callback. We know that the root's timer will // be invoked in the root zone. return Zone.current.createPeriodicTimer(duration, callback); } var boundCallback = Zone.current.bindUnaryCallbackGuarded<Timer>(callback); return Zone.current.createPeriodicTimer(duration, boundCallback); }\"]},\"234\":{\"h\":\"创建 Timer\",\"t\":[\"可以看到，Timer 的创建实际上是 Zone 通过两种方式创建的：\",\"// -> sdk\\\\lib\\\\async\\\\zone.dart abstract class Zone { /// Creates a [Timer] where the callback is executed in this zone. Timer createTimer(Duration duration, void Function() callback); /// Creates a periodic [Timer] where the callback is executed in this zone. Timer createPeriodicTimer(Duration period, void callback(Timer timer)); }\",\"Zone 是抽象类，他的实现是_RootZone：\",\"// -> sdk\\\\lib\\\\async\\\\zone.dart class _RootZone extends _Zone { Timer createTimer(Duration duration, void f()) { return Timer._createTimer(duration, f); } Timer createPeriodicTimer(Duration duration, void f(Timer timer)) { return Timer._createPeriodicTimer(duration, f); } }\",\"可以看到这里实际上是调用了 Timer 中对应的私有方法：\",\"// -> sdk\\\\lib\\\\async\\\\timer.dart external static Timer _createTimer( Duration duration, void Function() callback); external static Timer _createPeriodicTimer( Duration duration, void callback(Timer timer));\",\"他们的具体实现在timer_patch.dart中：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_patch.dart @patch class Timer { @patch static Timer _createTimer(Duration duration, void callback()) { final factory = VMLibraryHooks.timerFactory; if (factory == null) { throw new UnsupportedError(\\\"Timer interface not supported.\\\"); } int milliseconds = duration.inMilliseconds; if (milliseconds < 0) milliseconds = 0; return factory(milliseconds, (_) { callback(); }, false); } @patch static Timer _createPeriodicTimer( Duration duration, void callback(Timer timer)) { final factory = VMLibraryHooks.timerFactory; if (factory == null) { throw new UnsupportedError(\\\"Timer interface not supported.\\\"); } int milliseconds = duration.inMilliseconds; if (milliseconds < 0) milliseconds = 0; return factory(milliseconds, callback, true); } }\",\"可以看到，无论是单次的还是循环的 Timer 都是使用VMLibraryHooks.timerFactory创建的：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart @pragma(\\\"vm:entry-point\\\", \\\"call\\\") _setupHooks() { VMLibraryHooks.timerFactory = _Timer._factory; } // The Timer factory registered with the dart:async library by the embedder. static Timer _factory( int milliSeconds, void callback(Timer timer), bool repeating) { if (repeating) { return new _Timer.periodic(milliSeconds, callback); } return new _Timer(milliSeconds, callback); } factory _Timer(int milliSeconds, void callback(Timer timer)) { return _createTimer(callback, milliSeconds, false); } factory _Timer.periodic(int milliSeconds, void callback(Timer timer)) { return _createTimer(callback, milliSeconds, true); }\",\"最终都是调用的_Timer._createTimer方法：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart static _Timer _createTimer( void callback(Timer timer), int milliSeconds, bool repeating) { // Negative timeouts are treated as if 0 timeout. if (milliSeconds < 0) { milliSeconds = 0; } // Add one because DateTime.now() is assumed to round down // to nearest millisecond, not up, so that time + duration is before // duration milliseconds from now. Using microsecond timers like // Stopwatch allows detecting that the timer fires early. int now = VMLibraryHooks.timerMillisecondClock(); int wakeupTime = (milliSeconds == 0) ? now : (now + 1 + milliSeconds); _Timer timer = new _Timer._internal(callback, wakeupTime, milliSeconds, repeating); // Enqueue this newly created timer in the appropriate structure and // notify if necessary. timer._enqueue(); return timer; }\",\"在创建 timer 的时候，先获取了当前的时间戳，然后计算出 timer 的唤醒时间wakeupTime ，最后调用_Timer._internal创建 timer。\",\"_Timer._internal只是简单创建了 Timer:\",\"_Timer._internal( this._callback, this._wakeupTime, this._milliSeconds, this._repeating) : _id = _nextId();\",\"在创建根据需要创建好 Timer 之后，使用_Timer._enqueue方法把 Timer 放入到相应的队列中。\"]},\"235\":{\"h\":\"timer._enqueue\",\"t\":[\"主要看一下timer._enqueue()方法的实现：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart // Timers are ordered by wakeup time. Timers with a timeout value of > 0 do // end up on the TimerHeap. Timers with a timeout of 0 are queued in a list. static final _heap = new _TimerHeap(); static _Timer? _firstZeroTimer; static _Timer _lastZeroTimer = _sentinelTimer; // Adds a timer to the heap or timer list. Timers with the same wakeup time // are enqueued in order and notified in FIFO order. void _enqueue() { if (_milliSeconds == 0) { if (_firstZeroTimer == null) { _lastZeroTimer = this; _firstZeroTimer = this; } else { _lastZeroTimer._indexOrNext = this; _lastZeroTimer = this; } // Every zero timer gets its own event. _notifyZeroHandler(); } else { _heap.add(this); if (_heap.isFirst(this)) { _notifyEventHandler(); } } }\",\"可以看到无论是单次还是循环的 Timer 最后都是使用_Timer._internal创建的，然后再使用_Timer._enqueue()方法将 timer 添加到heap或者timer list中：\",\"如果 Timer 的_milliSeconds为 0，则会被添加到_lastZeroTimer中（并将上一个 timer 的_indexOrNext 指向自己），并在_notifyZeroHandler()方法发送_ZERO_EVENT 事件（最终会触发_Timer._handleMessage ）；\",\"否则则将其加入到_heap中，如果他是第一个 timer，就通过_notifyEventHandler()启动处理 Timer 的 event handler（这个线程会在合适的时间唤起 Timer 执行_Timer._handleMessage方法）。\",\"在具体分析整个过程之前，我们先看一下几个属性的创建过程：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart class _Timer implements Timer { static _RawReceivePortImpl? _receivePort; static SendPort? _sendPort; // Tell the event handler to wake this isolate at a specific time. static void _scheduleWakeup(int wakeupTime) { if (!_receivePortActive) { _createTimerHandler(); } VMLibraryHooks.eventHandlerSendData(null, _sendPort!, wakeupTime); _scheduledWakeupTime = wakeupTime; } // Enqueue one message for each zero timer. To be able to distinguish from // EventHandler messages we send a _ZERO_EVENT instead of a _TIMEOUT_EVENT. static void _notifyZeroHandler() { if (!_receivePortActive) { _createTimerHandler(); } _sendPort!.send(_ZERO_EVENT); } // Create a receive port and register a message handler for the timer // events. static void _createTimerHandler() { var receivePort = _receivePort; if (receivePort == null) { assert(_sendPort == null); final port = _RawReceivePortImpl('Timer'); port.handler = _handleMessage; _sendPort = port.sendPort; _receivePort = port; _scheduledWakeupTime = 0; } else { receivePort._setActive(true); } _receivePortActive = true; } }\",\"从上面代码我们可以看到：\",\"_sendPort是_receivePort对应的 sendPort，后者的 handler 是_handleMessage()方法\",\"无论是_notifyEventHandler()还是 _notifyZeroHandler()都会保证_createTimerHandler()被调用过。\"]},\"236\":{\"h\":\"_milliSeconds == 0\",\"t\":[\"先看一下_milliSeconds为 0 的情况：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart // Enqueue one message for each zero timer. To be able to distinguish from // EventHandler messages we send a _ZERO_EVENT instead of a _TIMEOUT_EVENT. static void _notifyZeroHandler() { if (!_receivePortActive) { _createTimerHandler(); } _sendPort!.send(_ZERO_EVENT); }\",\"按照上面的分析，_sendPort!.send(_ZERO_EVENT)发送的消息，通过MessageHandler::PostMessage处理，最后调用_receivePort的 handler 也就是在_handleMessage(msg)方法中执行。\"]},\"237\":{\"h\":\"_milliSeconds ≠ 0\",\"t\":[\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart static void _notifyEventHandler() { if (_handlingCallbacks) { // While we are already handling callbacks we will not notify the event // handler. _handleTimeout will call _notifyEventHandler once all pending // timers are processed. return; } // If there are no pending timers. Close down the receive port. if ((_firstZeroTimer == null) && _heap.isEmpty) { // No pending timers: Close the receive port and let the event handler // know. if (_sendPort != null) { _cancelWakeup(); _shutdownTimerHandler(); } return; } else if (_heap.isEmpty) { // Only zero timers are left. Cancel any scheduled wakeups. _cancelWakeup(); return; } // Only send a message if the requested wakeup time differs from the // already scheduled wakeup time. var wakeupTime = _heap.first._wakeupTime; if ((_scheduledWakeupTime == 0) || (wakeupTime != _scheduledWakeupTime)) { _scheduleWakeup(wakeupTime); } } // Tell the event handler to wake this isolate at a specific time. static void _scheduleWakeup(int wakeupTime) { if (!_receivePortActive) { _createTimerHandler(); } VMLibraryHooks.eventHandlerSendData(null, _sendPort!, wakeupTime); _scheduledWakeupTime = wakeupTime; }\",\"可见，当_milliSeconds ≠ 0 的时候，会将其加入到_heap中，如果当前的 timer 是_heap中第一个，则调用_notifyEventHandler()告诉 event handler在指定的时间唤起 isolate。\",\"这里主要的实现是VMLibraryHooks.eventHandlerSendData，他的实现如下：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\common_patch.dart @pragma(\\\"vm:entry-point\\\", \\\"call\\\") _setupHooks() { VMLibraryHooks.eventHandlerSendData = _EventHandler._sendData; VMLibraryHooks.timerMillisecondClock = _EventHandler._timerMillisecondClock; } // -> sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\eventhandler_patch.dart @patch class _EventHandler { @patch @pragma(\\\"vm:external-name\\\", \\\"EventHandler_SendData\\\") external static void _sendData(Object? sender, SendPort sendPort, int data); @pragma(\\\"vm:external-name\\\", \\\"EventHandler_TimerMillisecondClock\\\") external static int _timerMillisecondClock(); } // -> runtime\\\\bin\\\\eventhandler.cc /* * Send data to the EventHandler thread to register for a given instance * args[0] a ReceivePort args[1] with a notification event args[2]. */ void FUNCTION_NAME(EventHandler_SendData)(Dart_NativeArguments args) { // Get the id out of the send port. If the handle is not a send port // we will get an error and propagate that out. Dart_Handle handle = Dart_GetNativeArgument(args, 1); Dart_Port dart_port; handle = Dart_SendPortGetId(handle, &dart_port); if (Dart_IsError(handle)) { Dart_PropagateError(handle); UNREACHABLE(); } Dart_Handle sender = Dart_GetNativeArgument(args, 0); intptr_t id; if (Dart_IsNull(sender)) { id = kTimerId; } else { Socket* socket = Socket::GetSocketIdNativeField(sender); ASSERT(dart_port != ILLEGAL_PORT); socket->set_port(dart_port); socket->Retain(); // inc refcount before sending to the eventhandler. id = reinterpret_cast<intptr_t>(socket); } int64_t data = DartUtils::GetIntegerValue(Dart_GetNativeArgument(args, 2)); event_handler->SendData(id, dart_port, data); }\",\"他的实现在 native 层的EventHander中名为event handler的子线程中通过异步 IO 执行任务：\",\"// -> class EventHandler { public: EventHandler() {} void SendData(intptr_t id, Dart_Port dart_port, int64_t data) { delegate_.SendData(id, dart_port, data); } }\",\"不同的系统实现不同，对于 Android 来说：\",\"// -> runtime\\\\bin\\\\eventhandler_android.cc void EventHandlerImplementation::SendData(intptr_t id, Dart_Port dart_port, int64_t data) { WakeupHandler(id, dart_port, data); } void EventHandlerImplementation::WakeupHandler(intptr_t id, Dart_Port dart_port, int64_t data) { InterruptMessage msg; msg.id = id; msg.dart_port = dart_port; msg.data = data; // WriteToBlocking will write up to 512 bytes atomically, and since our msg // is smaller than 512, we don't need a thread lock. // See: http://linux.die.net/man/7/pipe, section 'Pipe_buf'. ASSERT(kInterruptMessageSize < PIPE_BUF); intptr_t result = FDUtils::WriteToBlocking(interrupt_fds_[1], &msg, kInterruptMessageSize); if (result != kInterruptMessageSize) { if (result == -1) { perror(\\\"Interrupt message failure:\\\"); } FATAL1(\\\"Interrupt message failure. Wrote %\\\" Pd \\\" bytes.\\\", result); } }\",\"然后系统会在时间到了之后，会调用EventHandlerImplementation::HandleEvents通过_send_port发送消息，并触发_receivePort的 hander 也就是_handleMessage方法处理消息。\"]},\"238\":{\"h\":\"_handleMessage\",\"t\":[\"无论是_milliSeconds == 0 的时候_sendPort!.send(_ZERO_EVENT);，还是_milliSeconds != 0 通过EventHandler发送_TIMEOUT_EVENT 消息，最终都会使用_handleMessage处理消息：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart static void _handleMessage(msg) { List<_Timer> pendingTimers; if (msg == _ZERO_EVENT) { pendingTimers = _queueFromZeroEvent(); assert(pendingTimers.length > 0); } else { assert(msg == _TIMEOUT_EVENT); _scheduledWakeupTime = 0; // Consumed the last scheduled wakeup now. pendingTimers = _queueFromTimeoutEvent(); } _runTimers(pendingTimers); // Notify the event handler or shutdown the port if no more pending // timers are present. _notifyEventHandler(); }\",\"在_handleMessage中按照 msg 的类型取出对应的pendingTimers然后再_runTimers中执行，在执行完毕或者遇到错误时，调用_notifyEventHandler()通知event handler或者关闭TimerHandler：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\timer_impl.dart static void _runTimers(List<_Timer> pendingTimers) { // If there are no pending timers currently reset the id space before we // have a chance to enqueue new timers. if (_heap.isEmpty && (_firstZeroTimer == null)) { _idCount = 0; } // Fast exit if no pending timers. if (pendingTimers.length == 0) { return; } // Trigger all of the pending timers. New timers added as part of the // callbacks will be enqueued now and notified in the next spin at the // earliest. _handlingCallbacks = true; var i = 0; try { // 在这里遍历处理所有的 pendingTimers for (; i < pendingTimers.length; i++) { // Next pending timer. var timer = pendingTimers[i]; timer._indexOrNext = null; // One of the timers in the pending_timers list can cancel // one of the later timers which will set the callback to // null. Or the pending zero timer has been canceled earlier. var callback = timer._callback; if (callback != null) { if (!timer._repeating) { // Mark timer as inactive. timer._callback = null; } else if (timer._milliSeconds > 0) { var ms = timer._milliSeconds; int overdue = VMLibraryHooks.timerMillisecondClock() - timer._wakeupTime; if (overdue > ms) { int missedTicks = overdue ~/ ms; timer._wakeupTime += missedTicks * ms; timer._tick += missedTicks; } } timer._tick += 1; callback(timer); // Re-insert repeating timer if not canceled. if (timer._repeating && (timer._callback != null)) { timer._advanceWakeupTime(); timer._enqueue(); } // 每次执行完 event 之后，都要执行没有被执行的 micro task // Execute pending micro tasks. _runPendingImmediateCallback(); } } } finally { _handlingCallbacks = false; // Re-queue timers we didn't get to. for (i++; i < pendingTimers.length; i++) { var timer = pendingTimers[i]; timer._enqueue(); } _notifyEventHandler(); } }\",\"这里可以看到，这里依次遍历传入的 pendingTimers，并在每次执行完 event 后，去检查执行一下 micro task。\",\"根据创建 Timer 的时候_milliSeconds 是否等于 0：会分别使用MessageHandler执行或者在名为 event handler 的 IO 线程通过isolate中的MessageHandler来执行任务；最后都会触发 Timer 的_handleMessage方法在_runTimers方法中执行 callback。\"]},\"239\":{\"h\":\"结论\",\"t\":[\"综上，dart 中的方法总共有 3 种，按照优先级从前到后依次是：\",\"普通的同步方法\",\"micro task\",\"其他 event：部分 Future、Timer、点击事件、屏幕刷新等\",\"在方法执行的时候：\",\"先执行完毕所有的同步方法；\",\"然后判断是否有 micro task，有的话就立即执行；\",\"否则，就执行普通的 event，每次执行完一个 event 就执行一次步骤 2；\",\"直到当前 app 中既没有 micro task 也没有普通的 event，退出 app。\"]},\"240\":{\"h\":\"参考资料\",\"t\":[\"dart sdk\",\"The Event Loop and Dart\",\"Flutter 之 Future 原理解析 - 掘金\",\"Flutter 之 Timer 原理解析 - 掘金\",\"Dart 官网\"]},\"241\":{\"h\":\"Dart 读取文件过程分析\",\"t\":[\"Dart 读取文件时，先在 Dart 代码创建 File 引用，通过与IOService跨Isolate通信（先通过 IO Service 而发送请求到 native 端，等到 native 执行完操作之后再回调结果）从而实现对文件的读写。\",\"实现一个简单的读取文件的代码如下：\",\"import 'dart:io'; main() { var filePath = r\\\"G:/21996.1.210529-1541.co_release_CLIENT_CONSUMER_x64FRE_en-us.iso\\\"; var file = File(filePath); var startTime = printCurrentTimeMs(\\\"start run file.readAsBytes\\\"); file.readAsBytes().then((value) { printCurrentTimeMs(\\\"file.readAsBytes() finish\\\", lastTimeMs: startTime, suffix: \\\"\\\\nfile.readAsBytes() result:${value.length}\\\"); }); printCurrentTimeMs(\\\"finish run file.readAsBytes\\\"); } int printCurrentTimeMs(String prefix, {String? suffix, int? lastTimeMs}) { var currentTimeMs = DateTime.now().millisecondsSinceEpoch; var timeElapseString = lastTimeMs == null ? \\\"\\\" : \\\", time elapse:${currentTimeMs - lastTimeMs}ms \\\"; print( \\\"$prefix current time($currentTimeMs)$timeElapseString${suffix ?? \\\"\\\"}\\\"); return currentTimeMs; }\",\"整个过程如下：\"]},\"242\":{\"h\":\"过程分析\"},\"243\":{\"h\":\"Dart 端发起文件读写请求\",\"t\":[\"其中file.readAsBytes() 是具体执行读取文件的地方，他的定义如下：\",\"// -> sdk\\\\lib\\\\io\\\\file_impl.dart Future<Uint8List> readAsBytes();\",\"在我们创建File时，实际上创建的是_File （class _File extends FileSystemEntity implements File）对象：\",\"// -> sdk\\\\lib\\\\io\\\\file_impl.dart // abstract class File implements FileSystemEntity @pragma(\\\"vm:entry-point\\\") factory File(String path) { final IOOverrides? overrides = IOOverrides.current; if (overrides == null) { return new _File(path); } return overrides.createFile(path); }\",\"_File 是File 的实现类，所以file.readAsBytes()实际调用的是_File 实现的方法：\",\"// -> sdk\\\\lib\\\\io\\\\file_impl.dart // Read the file in blocks of size 64k. const int _blockSize = 64 * 1024; class _File extends FileSystemEntity implements File { Future<Uint8List> readAsBytes() { Future<Uint8List> readDataChunked(RandomAccessFile file) { // 分段读取文件，每次只读取_blockSize 大小的内容 var builder = new BytesBuilder(copy: false); var completer = new Completer<Uint8List>(); void read() { // 每次只异步读取一部分文本 file.read(_blockSize).then((data) { if (data.length > 0) { builder.add(data); read(); } else { completer.complete(builder.takeBytes()); } }, onError: completer.completeError); } read(); return completer.future; } return open().then((file) { return file.length().then((length) { if (length == 0) { // May be character device, try to read it in chunks. return readDataChunked(file); } return file.read(length); }).whenComplete(file.close); }); } }\",\"可以看到，无论是普通的文件格式，还是 character device，最后都是调用了_RandomAccessFile的open()和read(int bytes)方法异步读取文件。\",\"设备文件分为 Block Device Driver 和 Character Device Drive 两类。 Character Device Driver 又被称为字符设备或裸设备 raw devices; Block Device Driver 通常成为块设备。 而 Block Device Driver 是以固定大小长度来传送转移资料；Character Device Driver 是以不定长度的字元传送资料。 https://www.cnblogs.com/qlee/archive/2011/07/27/2118406.html#:~:text=Character\",\"// -> flutter\\\\bin\\\\cache\\\\pkg\\\\sky_engine\\\\lib\\\\io\\\\file_impl.dart class _RandomAccessFile implements RandomAccessFile { final String path; bool _asyncDispatched = false; // 读取文件的信息 late _FileResourceInfo _resourceInfo; // 对文件的操作引用 _RandomAccessFileOps _ops; @pragma(\\\"vm:entry-point\\\") _RandomAccessFile(int pointer, this.path) : _ops = new _RandomAccessFileOps(pointer) { _resourceInfo = new _FileResourceInfo(this); _maybeConnectHandler(); } // 异步读取文件 Future<Uint8List> read(int bytes) { // TODO(40614): Remove once non-nullability is sound. ArgumentError.checkNotNull(bytes, \\\"bytes\\\"); // 异步读取文件，实际上是将发送指令到 IO Service，然后等待返回结果 return _dispatch(_IOService.fileRead, [null, bytes]).then((response) { if (_isErrorResponse(response)) { throw _exceptionFromResponse(response, \\\"read failed\\\", path); } _resourceInfo.addRead(response[1].length); // 读取的文件内容 Uint8List result = response[1]; return result; }); } // 同步读取文件 Uint8List readSync(int bytes) { // TODO(40614): Remove once non-nullability is sound. ArgumentError.checkNotNull(bytes, \\\"bytes\\\"); _checkAvailable(); // 同步读取文件是对文件直接操作 var result = _ops.read(bytes); if (result is OSError) { throw new FileSystemException(\\\"readSync failed\\\", path, result); } _resourceInfo.addRead(result.length); return result; } Future<RandomAccessFile> open({FileMode mode = FileMode.read}) { // FileMode https://github.com/dart-lang/sdk/blob/main/sdk/lib/io/io_service.dart if (mode != FileMode.read && mode != FileMode.write && mode != FileMode.append && mode != FileMode.writeOnly && mode != FileMode.writeOnlyAppend) { return new Future.error( new ArgumentError('Invalid file mode for this operation')); } return _dispatchWithNamespace( // 请求操作为“打开文件”，参数为：null，文件路径，操作文件的 mode _IOService.fileOpen, [null, _rawPath, mode._mode]).then((response) { if (_isErrorResponse(response)) { throw _exceptionFromResponse(response, \\\"Cannot open file\\\", path); } // 从 IO Service 那里异步获得文件句柄 response 和 path return new _RandomAccessFile(response, path); }); } }\",\"在_RandomAccessFile中，除了同步读写文件是对返回的文件引用直接操作外，很多操作都能看到通过_dispatch()方法与IO Service通信，让我们看一下这个方法的实现：\",\"// -> sdk\\\\lib\\\\io\\\\file_impl.dart // _RandomAccessFile Future _dispatch(int request, List data, {bool markClosed = false}) { if (closed) { return new Future.error(new FileSystemException(\\\"File closed\\\", path)); } if (_asyncDispatched) { var msg = \\\"An async operation is currently pending\\\"; return new Future.error(new FileSystemException(msg, path)); } if (markClosed) { // Set closed to true to ensure that no more async requests can be issued // for this file. closed = true; } _asyncDispatched = true; data[0] = _pointer(); // 主要代码在这里，通过_IOService 的_dispatch 发送指令 return **_IOService._dispatch**(request, data).whenComplete(() { _asyncDispatched = false; }); } // open create 之类的操作会调用这个方法，不过最后也是调用_IOService._dispatch(request, data) 通信 static Future _dispatchWithNamespace(int request, List data) { data[0] = _namespacePointer(); // 与 IO Service 进行异步通信，request 标记请求操作的类型，data 则是数据 return **_IOService._dispatch**(request, data); }\",\"查阅_IOService的源码后发现这是个external 方法。\",\"external static Future _dispatch(int request, List data);\",\"An external function is connected to its body by an implementation-specific mechanism. Attempting to invoke an external function that has not been connected to its body will throw a NoSuchMethodError or some subclass thereof. ****https://github.com/dart-lang/sdk/issues/4300\",\"根据external的定义，_dispatch方法在不同的机器上面实现不同。我们只看和 app 相关的实现（在sdk\\\\lib\\\\_internal\\\\vm目录下，vm 同级目录还有 js 等实现），具体的实现如下：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\io_service_patch.dart // _IOService class _IOService { // 用于向 IO Service 发送消息 static _IOServicePorts _servicePorts = new _IOServicePorts(); // We use a static variable here to hold onto the last result of // calling the IO Service frome the native. static RawReceivePort? _receivePort; // the other side(other isolate) will send message back with the _replyToPort static late SendPort _replyToPort; // a map holding the registered callbacks for each received message. static HashMap<int, Completer> _messageMap = new HashMap<int, Completer>(); static int _id = 0; /// [request] IO 操作的类型，具体值在 [sdk/lib/io/io_service.dart] 中的_IOService 类中定义 /// 主要有对文件、目录、网络进行操作的请求 /// [data] 对应的数据，如果是文件，则是文件路径，如果是目录，则是目录路径等等 @patch static Future _dispatch(int request, List data) { int id; do { // create a special id to identify the request. id = _getNextId(); } while (_messageMap.containsKey(id)); // 通过_servicePorts 获取一个新的 SendPort 以便向 IOService 发送消息， // 这个 SendPort 是 IO Service 返回给 dart 用来向他发消息的 final SendPort servicePort = _servicePorts._getPort(id); _ensureInitialize(); final Completer completer = new Completer(); _messageMap[id] = completer; try { // 向 IOService 发送消息，当 request 执行完毕之后， // 会调用_replyToPort 触发在 root zone 的回调_receivePort!.handler **servicePort**.send(<dynamic>[id, **_replyToPort**, request, data]); } catch (error) { _messageMap.remove(id)!.complete(error); if (_messageMap.length == 0) { _finalize(); } } return completer.future; } static void _ensureInitialize() { if (_receivePort == null) { _receivePort = new RawReceivePort(null, 'IO Service'); // 其他地方可以使用_replyToPort 来发消息触发_receivePort 执行 handler 方法 _replyToPort = _receivePort!.sendPort; _receivePort!.handler = (data) { // 在这里处理 IOService 执行完方法返回的数据 assert(data is List && data.length == 2); // data[0] 就是我们在_dispatch 方法中获取的 id， // 将处理结果 data[1] 通过 Completer.complete 返回 _messageMap.remove(data[0])!.complete(data[1]); // 释放这个触发这个回调的 SendPort _servicePorts._returnPort(data[0]); if (_messageMap.length == 0) { _finalize(); } }; } } ... }\",\"可以看到，最后是通过RawReceivePort/SendPort进行跨 Isolate 通信。\",\"_IOService使用_servicePorts对 native 层发送消息触发 IO 操作，然后使用_receivePort监听，当 IO 操作完成时会通过_replyToPort 回调结果，会在 _receivePort!.handler方法中根据当时请求的id找到Completer将结果传递回去。\",\"这样当时我们在 file.readAsBytes()时获取到的Future便会收到回调，从而完成文件操作的流程。\",\" file.readAsBytes().then((value) { printCurrentTimeMs(\\\"file.readAsBytes() finish\\\", lastTimeMs: startTime, suffix: \\\"\\\\nfile.readAsBytes() result:${value.length}\\\"); });\",\"下面是到目前为止涉及到的类关系示意图：\"]},\"244\":{\"h\":\"IO Service 中转\",\"t\":[\"那么，这个 IO Service 是做什么的，他又是如何实现与 dart 中的调用方双向通信，以及执行调用方需要的功能呢？\",\"位于sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\io_service_patch.dart的_IOService 是一个中转站，向上承接来自 Dart 代码的 IO 请求指令（先行返回 Future），向下将这些指令转发至 Native 层的 IO Service，并监听回调，当 native 层处理完这些 IO 指令之后，将结果通过 Future 返回给 Dart 调用方。\",\"让我们再看一下他的具体实现：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\io_service_patch.dart // _IOService class _IOService { // 用于向 IO Service 发送消息 static _IOServicePorts _servicePorts = new _IOServicePorts(); // We use a static variable here to hold onto the last result of // calling the IO Service frome the native. static RawReceivePort? _receivePort; // the other side(other isolate) will send message back with the _replyToPort static late SendPort _replyToPort; // a map holding the registered callbacks for each received message. static HashMap<int, Completer> _messageMap = new HashMap<int, Completer>(); static int _id = 0; /// [request] IO 操作的类型，具体值在 [sdk/lib/io/io_service.dart] 中的_IOService 类中定义 /// 主要有对文件、目录、网络进行操作的请求 /// [data] 对应的数据，如果是文件，则是文件路径，如果是目录，则是目录路径等等 @patch static Future _dispatch(int request, List data) { int id; do { // create a special id to identify the request. id = _getNextId(); } while (_messageMap.containsKey(id)); // 通过_servicePorts 获取一个新的 SendPort 以便向 IOService 发送消息， // 这个 SendPort 是 IO Service 返回给 dart 用来向他发消息的 final SendPort **servicePort** = _servicePorts.**_getPort(id);** _ensureInitialize(); final Completer completer = new Completer(); _messageMap[id] = completer; try { // 向 IOService 发送消息，当 request 执行完毕之后， // 会调用_replyToPort 触发在 root zone 的回调_receivePort!.handler **servicePort**.send(<dynamic>[id, **_replyToPort**, request, data]); } catch (error) { _messageMap.remove(id)!.complete(error); if (_messageMap.length == 0) { _finalize(); } } return completer.future; } static void _ensureInitialize() { if (_receivePort == null) { _receivePort = new RawReceivePort(null, 'IO Service'); // 其他地方可以使用_replyToPort 来发消息触发_receivePort 执行 handler 方法 _replyToPort = _receivePort!.sendPort; _receivePort!.handler = (data) { // 在这里处理 IOService 执行完方法返回的数据 assert(data is List && data.length == 2); // data[0] 就是我们在_dispatch 方法中获取的 id， // 将处理结果 data[1] 通过 Completer.complete 返回 _messageMap.remove(data[0])!.complete(data[1]); // 释放这个触发这个回调的 SendPort _servicePorts._returnPort(data[0]); if (_messageMap.length == 0) { _finalize(); } }; } } ... }\",\"可以看到：\",\"_IOService持有_IOServicePorts _servicePorts以便获取SendPort servicePort和 native 层通信，\",\"在之前的代码分析中，我们已经知道_IOService还在_ensureInitialize()中监听着RawReceivePort? _receivePort的回调，\",\"这样当_IOService在_dispatch()方法中将_replyToPort（_receivePort的 SendPort）传递给servicePort后，一旦 native 通过_replyToPort发送处理结果，_IOService立马可以收到并通过Completer.complete返回给Dart 中的调用方。\",\"上述这些步骤能够实施的关键，在于Dart层的_IOService如何与native层的_IOService关联起来呢？\",\"让我们来分析一下SendPort servicePort的获取过程：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\io_service_patch.dart class _IOService { // 用于向 IO Service 发送消息 static _IOServicePorts _servicePorts = new _IOServicePorts(); ... } class _IOServicePorts { // We limit the number of IO Service ports per isolate so that we don't // spawn too many threads all at once, which can crash the VM on Windows. static const int maxPorts = 32; List<SendPort> _ports = <SendPort>[]; List<SendPort> _freePorts = <SendPort>[]; Map<int, SendPort> _usedPorts = new HashMap<int, SendPort>(); _IOServicePorts(); SendPort _getPort(int forRequestId) { if (_freePorts.isEmpty && _usedPorts.length < maxPorts) { // 如果没有可用的 SendPort，就新建 SendPort 用于远程服务通信 final SendPort port = **_newServicePort()**; _ports.add(port); _freePorts.add(port); } if (!_freePorts.isEmpty) { // 有空闲 SendPort，使用 final SendPort port = _freePorts.removeLast(); assert(!_usedPorts.containsKey(forRequestId)); _usedPorts[forRequestId] = port; return port; } // We have already allocated the max number of ports. Re-use an // existing one. final SendPort port = _ports[forRequestId % maxPorts]; _usedPorts[forRequestId] = port; return port; } // 释放掉占用的 port void _returnPort(int forRequestId) { final SendPort port = _usedPorts.remove(forRequestId)!; if (!_usedPorts.values.contains(port)) { _freePorts.add(port); } } @pragma(\\\"vm:external-name\\\", \\\"IOService_NewServicePort\\\") external static SendPort _newServicePort(); }\",\"可以看到这里最后的关键方法是SendPort _newServicePort()，这是一个external方法，在 native 实现。\"]},\"245\":{\"h\":\"Native 处理 Dart 的指令\"},\"246\":{\"h\":\"IOService_NewServicePort\",\"t\":[\"SendPort是由_newServicePort()方法创建的，这是一个external方法，他的 native 层实现名称是IOService_NewServicePort：\",\"// -> runtime\\\\bin\\\\io_service.cc void FUNCTION_NAME(IOService_NewServicePort)(Dart_NativeArguments args) { Dart_SetReturnValue(args, Dart_Null()); // 创建一个新的 native port Dart_Port service_port = **IOService::GetServicePort();** if (service_port != ILLEGAL_PORT) { // 【注意】这里根据 service_port 创建了 Dart 里面的 SendPort 对象 // Return a send port for the service port. Dart_Handle send_port = Dart_NewSendPort(service_port); // 将当前 IOService 对应的 send_port 返回给调用方 Dart_SetReturnValue(args, send_port); } } Dart_Port IOService::GetServicePort() { // 注意这里的参数 // 分别是 native port 的名称，收到 native port 以后得回调方法，是否同时处理 return **Dart_NewNativePort(\\\"IOService\\\", IOServiceCallback, true);** } // -> runtime\\\\include\\\\dart_api.h /** * Returns a new SendPort with the provided port id. * * \\\\param port_id The destination port. * * \\\\return A new SendPort if no errors occurs. Otherwise returns * an error handle. */ DART_EXPORT Dart_Handle Dart_NewSendPort(Dart_Port port_id);\",\"注意，在 Dart 层的_IOService的SendPort _newServicePort() 方法最后再这里调用了IOService_NewServicePort。\",\"这里主要有 3 个步骤：\",\"使用Dart_NewNativePort(\\\"IOService\\\", IOServiceCallback, true);创建Dart_Port\",\"使用Dart_NewSendPort将Dart_Port转化为Dart_Handle（也就是 Dart 中的SendPort）\",\"返回上面创建好的Dart_Handle，Dart 代码拿到返回的 Dart_Handle 也就是SendPort servicePort之后，就可以和 native 层的 IO Service 同通信。\",\"接下来我们看一下前 2 步分别是怎么实现的：\"]},\"247\":{\"h\":\"Dart_NewNativePort\",\"t\":[\"再看一下Dart_NewNativePort的调用参数：\",\"Dart_NewNativePort(\\\"IOService\\\", IOServiceCallback, true); // -> runtime\\\\include\\\\dart_native_api.h // Creates a new native port. When messages are received on this // native port, then they will be dispatched to the provided native // message handler. DART_EXPORT Dart_Port Dart_NewNativePort(const char* name, Dart_NativeMessageHandler handler, bool handle_concurrently);\",\"IOServiceCallback\",\"Dart_NewNativePort总共有 3 个参数，Dart_NativeMessageHandler handler是当这个Dart_Port收到消息的时候，会被回调的方法，也就是我们通过 Dart 端的_IOService.dispatch方法的**servicePort**.send(<dynamic>[id, **_replyToPort**, request, data]);语句执行向 native 发送 IO 指令时，在 native 这里真正负责执行的方法：\",\"// -> runtime\\\\bin\\\\io_service.cc void IOServiceCallback(Dart_Port dest_port_id, Dart_CObject* message) { Dart_Port reply_port_id = ILLEGAL_PORT; CObject* response = CObject::IllegalArgumentError(); CObjectArray request(message); // 这里的参数顺序，与 Dart 层的_IOService(sdk\\\\lib\\\\_internal\\\\vm\\\\bin\\\\io_service_patch.dart) 的_dispatch() 中的 // **servicePort**.send(<dynamic>[id, **_replyToPort**, request, data]); // 代码中的参数顺序一致 if ((message->type == Dart_CObject_kArray) && (request.Length() == 4) && request[0]->IsInt32() && request[1]->IsSendPort() && request[2]->IsInt32() && request[3]->IsArray()) { CObjectInt32 message_id(request[0]); CObjectSendPort **reply_port**(request[1]); CObjectInt32 request_id(request[2]); CObjectArray data(request[3]); **reply_port_id** = **reply_port**.Value(); // 这里解析完收到的参数后，回去执行对应的文件操作 switch (request_id.Value()) { **IO_SERVICE_REQUEST_LIST(CASE_REQUEST);** default: UNREACHABLE(); } } CObjectArray result(CObject::NewArray(2)); result.SetAt(0, request[0]); // response 在上面的 IO_SERVICE_REQUEST_LIST 执行完毕后就会被赋值 result.SetAt(1, **response**); ASSERT(reply_port_id != ILLEGAL_PORT); **Dart_PostCObject(reply_port_id, result.AsApiCObject());** } #define **CASE_REQUEST**(type, method, id) \\\\ case IOService::k##type##method##Request: \\\\ response = type::method##Request(data); \\\\ break;\",\"IOService 具体的执行是在IO_SERVICE_REQUEST_LIST根据解析到的参数执行对应的方法：\",\"// -> runtime\\\\bin\\\\io_service.h // This list must be kept in sync with the list in sdk/lib/io/io_service.dart #define IO_SERVICE_REQUEST_LIST(V) \\\\ V(File, Exists, 0) \\\\ V(File, Create, 1) \\\\ V(File, Delete, 2) \\\\ V(File, Rename, 3) \\\\ V(File, Copy, 4) \\\\ V(File, Open, 5) \\\\ V(File, ResolveSymbolicLinks, 6) \\\\ V(File, Close, 7) \\\\ V(File, Position, 8) \\\\ V(File, SetPosition, 9) \\\\ V(File, Truncate, 10) \\\\ V(File, Length, 11) \\\\ V(File, LengthFromPath, 12) \\\\ V(File, LastAccessed, 13) \\\\ V(File, SetLastAccessed, 14) \\\\ V(File, LastModified, 15) \\\\ V(File, SetLastModified, 16) \\\\ V(File, Flush, 17) \\\\ V(File, ReadByte, 18) \\\\ V(File, WriteByte, 19) \\\\ V(File, Read, 20) \\\\ V(File, ReadInto, 21) \\\\ V(File, WriteFrom, 22) \\\\ V(File, CreateLink, 23) \\\\ V(File, DeleteLink, 24) \\\\ V(File, RenameLink, 25) \\\\ V(File, LinkTarget, 26) \\\\ V(File, Type, 27) \\\\ V(File, Identical, 28) \\\\ V(File, Stat, 29) \\\\ V(File, Lock, 30) \\\\ V(Socket, Lookup, 31) \\\\ V(Socket, ListInterfaces, 32) \\\\ V(Socket, ReverseLookup, 33) \\\\ V(Directory, Create, 34) \\\\ V(Directory, Delete, 35) \\\\ V(Directory, Exists, 36) \\\\ V(Directory, CreateTemp, 37) \\\\ V(Directory, ListStart, 38) \\\\ V(Directory, ListNext, 39) \\\\ V(Directory, ListStop, 40) \\\\ V(Directory, Rename, 41) \\\\ V(SSLFilter, ProcessFilter, 42)\",\"通过上述代码，可以得知，IOService 主要处理的方法有四类：\",\"File\",\"Directory\",\"Socket\",\"SSLFilter\",\"在IOServiceCallback方法中，我们注意到，程序最后执行的结果是通过Dart_PostCObject返回的，来看一下他是怎么实现的：\",\"// -> runtime\\\\vm\\\\native_api_impl.cc static bool PostCObjectHelper(Dart_Port port_id, Dart_CObject* message) { AllocOnlyStackZone zone; std::unique_ptr<Message> msg = WriteApiMessage( zone.GetZone(), message, port_id, Message::kNormalPriority); if (msg == nullptr) { return false; } // Post the message at the given port. return **PortMap::PostMessage(std::move(msg));** } DART_EXPORT bool Dart_PostCObject(Dart_Port port_id, Dart_CObject* message) { return PostCObjectHelper(port_id, message); } // -> runtime\\\\vm\\\\port.cc bool PortMap::PostMessage(std::unique_ptr<Message> message, bool before_events) { MutexLocker ml(mutex_); if (ports_ == nullptr) { return false; } auto it = ports_->TryLookup(message->dest_port()); if (it == ports_->end()) { // Ownership of external data remains with the poster. message->DropFinalizers(); return false; } MessageHandler* handler = (*it).handler; ASSERT(handler != nullptr); **handler->PostMessage(std::move(message), before_events);** return true; } // -> runtime\\\\vm\\\\message_handler.cc void MessageHandler::PostMessage(std::unique_ptr<Message> message, bool before_events) { Message::Priority saved_priority; { MonitorLocker ml(&monitor_); if (FLAG_trace_isolates) { Isolate* source_isolate = Isolate::Current(); if (source_isolate != nullptr) { OS::PrintErr( \\\"[>] Posting message:\\\\n\\\" \\\"\\\\tlen: %\\\" Pd \\\"\\\\n\\\\tsource: (%\\\" Pd64 \\\") %s\\\\n\\\\tdest: %s\\\\n\\\" \\\"\\\\tdest_port: %\\\" Pd64 \\\"\\\\n\\\", message->Size(), static_cast<int64_t>(source_isolate->main_port()), source_isolate->name(), name(), message->dest_port()); } else { OS::PrintErr( \\\"[>] Posting message:\\\\n\\\" \\\"\\\\tlen: %\\\" Pd \\\"\\\\n\\\\tsource: <native code>\\\\n\\\" \\\"\\\\tdest: %s\\\\n\\\" \\\"\\\\tdest_port: %\\\" Pd64 \\\"\\\\n\\\", message->Size(), name(), message->dest_port()); } } saved_priority = message->priority(); // **将 Message 加入到 MessageQueue 中** if (message->IsOOB()) { oob_queue_->Enqueue(std::move(message), before_events); } else { queue_->Enqueue(std::move(message), before_events); } if (paused_for_messages_) { ml.Notify(); } if (pool_ != nullptr && !task_running_) { ASSERT(!delete_me_); task_running_ = true; const bool launched_successfully = pool_->Run<MessageHandlerTask>(this); ASSERT(launched_successfully); } } // Invoke any custom message notification. MessageNotify(saved_priority); }\",\"上述代码最后将结果包装成了 Message 打包进MessageHandler的消息队列中，这样便可以在 Dart 端通过消息分发接收到结果。\",\"Dart_NewNativePort\",\"再来看一下Dart_NewNativePort的实现如下：\",\"// -> runtime\\\\vm\\\\native_api_impl.cc DART_EXPORT Dart_Port Dart_NewNativePort(const char* name, Dart_NativeMessageHandler handler, bool handle_concurrently) { if (name == NULL) { name = \\\"<UnnamedNativePort>\\\"; } if (handler == NULL) { OS::PrintErr(\\\"%s expects argument 'handler' to be non-null.\\\\n\\\", CURRENT_FUNC); return ILLEGAL_PORT; } // 此方法位于 sdk/runtime/vm/dart.cc // Used to Indicate that a Dart API call is active. if (!Dart::SetActiveApiCall()) { return ILLEGAL_PORT; } // 【注意，这里切换了 isolate，退出当前 isolate，直到 Dart_NewNativePort 执行完毕再切换回当前 isolate】 // Start the native port without a current isolate. // 这里的实现可以参考 https://github.com/dart-lang/sdk/blob/d437877c500c77d6e08372ba2dbda9c598f5bd8e/runtime/vm/dart_api_impl.cc **IsolateLeaveScope saver(Isolate::Current());** // 执行完 IsolateLeaveScope 后，会切换出当前 isolate 直到下面的 return port_id;执行完毕，但是在此期间，下面的代码依旧是在当前 isolate 所在的 IOThread 也即系统线程下进行的 NativeMessageHandler* nmh = **new NativeMessageHandler(name, handler);** // 创建一个 Dart_Port 并且添加到 PortMap 中 Dart_Port port_id = **PortMap::CreatePort(nmh);** if (port_id != ILLEGAL_PORT) { // 激活这个端口 PortMap::SetPortState(port_id, PortMap::kLivePort); // 在 Dart 线程池中执行，在这里 Run() 中的代码会在一个新的线程中执行 if (!**nmh->Run**(**Dart::thread_pool()**, NULL, NULL, 0)) { // 执行完毕之后，在之前调用本方法的环境，回调 handler，关闭 Dart_Port PortMap::ClosePort(port_id); port_id = ILLEGAL_PORT; } } Dart::ResetActiveApiCall(); return port_id; // 上面 IsolateLeaveScope saver 对象在构造方法中退出了调用方法的分支，执行到这里后 saver 对象被回收，执行析构函数，又将 Isolate 切换回来 }\",\"主要的流程有：\",\"切换退出当前 isolate\",\"创建NativeMessageHandler nmh包裹要处理的回调\",\"根据上面创建的nmh创建Dart_Port port_id\",\"执行**nmh->Run()**方法将nmh放到线程池中运行\",\"当nmh执行完毕回调后，关闭Dart_Port port_id\",\"也就是说，在 Dart 中向 Native 发送指令时，通过 Dart 的_IOService._dispatch()方法中执行_servicePorts._getPort(id);向 Native 层的 IOService 获取用于通信的SendPort servicePort时，会先通过 Dart_NewNativePort 创建一个NativeMessageHandler（会压入消息栈中），然后创建一个对应的Dart_Port port_id并返回给 Dart 用来触发消息。\",\"让我们挨个分析一下：\",\"1.退出当前 isolate\",\"见 IsolateLeaveScope\",\"2.创建NativeMessageHandler nmh包裹要处理的回调\",\"3.根据上面创建的nmh创建Dart_Port port_id\",\"看一下PortMap::CreatePort的实现：\",\"// -> runtime\\\\vm\\\\port.cc Dart_Port PortMap::CreatePort(MessageHandler* handler) { ASSERT(handler != NULL); MutexLocker ml(mutex_); if (ports_ == nullptr) { return ILLEGAL_PORT; } #if defined(DEBUG) handler->CheckAccess(); #endif // 不停的遍历，直到找到一个可用的 port（类型为 int64_t） const Dart_Port port = AllocatePort(); // 获取到的 port 只能通过 isolate_entry 访问 // The MessageHandler::ports_ is only accessed by [PortMap], it is guarded // by the [PortMap::mutex_] we already hold. MessageHandler::PortSetEntry isolate_entry; isolate_entry.port = port; handler->ports_.Insert(isolate_entry); Entry entry; entry.port = port; entry.handler = handler; entry.state = kNewPort; ports_->Insert(entry); if (FLAG_trace_isolates) { OS::PrintErr( \\\"[+] Opening port: \\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\" \\\"\\\\tport: %\\\" Pd64 \\\"\\\\n\\\", handler->name(), entry.port); } return entry.port; } Dart_Port PortMap::AllocatePort() { Dart_Port result; ASSERT(mutex_->IsOwnedByCurrentThread()); // Keep getting new values while we have an illegal port number or the port // number is already in use. do { // Ensure port ids are representable in JavaScript for the benefit of // vm-service clients such as Observatory. const Dart_Port kMask1 = 0xFFFFFFFFFFFFF; // Ensure port ids are never valid object pointers so that reinterpreting // an object pointer as a port id never produces a used port id. const Dart_Port kMask2 = 0x3; result = (prng_->NextUInt64() & kMask1) | kMask2; // The two special marker ports are used for the hashset implementation and // cannot be used as actual ports. if (result == PortSet<Entry>::kFreePort || result == PortSet<Entry>::kDeletedPort) { continue; } ASSERT(!static_cast<ObjectPtr>(static_cast<uword>(result))->IsWellFormed()); } while (ports_->Contains(result)); ASSERT(result != 0); ASSERT(!ports_->Contains(result)); return result; }\",\"4.执行**nmh->Run()**方法将nmh放到线程池中运行\",\" // -> runtime\\\\vm\\\\message_handler.cc ThreadPool* pool_; bool MessageHandler::Run(ThreadPool* pool, StartCallback start_callback, EndCallback end_callback, CallbackData data) { MonitorLocker ml(&monitor_); if (FLAG_trace_isolates) { OS::PrintErr( \\\"[+] Starting message handler:\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\", name()); } ASSERT(pool_ == NULL); ASSERT(!delete_me_); pool_ = pool; start_callback_ = start_callback; end_callback_ = end_callback; callback_data_ = data; task_running_ = true; // 在 Dart VM Thread 的线程池中执行 MessageHandler，会是一个新的线程 bool result = pool_->Run<MessageHandlerTask>(this); if (!result) { pool_ = nullptr; start_callback_ = nullptr; end_callback_ = nullptr; callback_data_ = 0; task_running_ = false; } return result; } // 会在“线程池”运行的时候执行对应的 MessageHandler 回调 class MessageHandlerTask : public ThreadPool::Task { public: explicit MessageHandlerTask(MessageHandler* handler) : handler_(handler) { ASSERT(handler != NULL); } virtual void Run() { ASSERT(handler_ != NULL); // 执行具体的逻辑 handler_->TaskCallback(); } private: MessageHandler* handler_; DISALLOW_COPY_AND_ASSIGN(MessageHandlerTask); }; // -> runtime\\\\include\\\\dart_api.h // A port is used to send or receive inter-isolate messages typedef int64_t Dart_Port; // -> runtime\\\\vm\\\\thread_pool.h // Runs a task on the thread pool. template <typename T, typename... Args> bool Run(Args&&... args) { return RunImpl(std::unique_ptr<Task>(new T(std::forward<Args>(args)...))); } // -> runtime\\\\vm\\\\thread_pool.cc bool ThreadPool::RunImpl(std::unique_ptr<Task> task) { Worker* new_worker = nullptr; { MonitorLocker ml(&pool_monitor_); if (shutting_down_) { return false; } // 创建新的 Worker new_worker = ScheduleTaskLocked(&ml, std::move(task)); } if (new_worker != nullptr) { // 在线程中执行 task new_worker->StartThread(); } return true; } // -> runtime\\\\vm\\\\thread_pool.cc // 创建一个 Worker ThreadPool::Worker* ThreadPool::ScheduleTaskLocked(MonitorLocker* ml, std::unique_ptr<Task> task) { // Enqueue the new task. tasks_.Append(task.release()); pending_tasks_++; ASSERT(pending_tasks_ >= 1); // Notify existing idle worker (if available). if (count_idle_ >= pending_tasks_) { ASSERT(!idle_workers_.IsEmpty()); ml->Notify(); return nullptr; } // If we have maxed out the number of threads running, we will not start a // new one. if (max_pool_size_ > 0 && (count_idle_ + count_running_) >= max_pool_size_) { if (!idle_workers_.IsEmpty()) { ml->Notify(); } return nullptr; } // Otherwise start a new worker. auto new_worker = new Worker(this); idle_workers_.Append(new_worker); count_idle_++; return new_worker; } // 新建的 Woker 和 ThreadPool 绑定 ThreadPool::Worker::Worker(ThreadPool* pool) : pool_(pool), join_id_(OSThread::kInvalidThreadJoinId) {} // new_worker->StartThread();会调用下面的方法 void ThreadPool::Worker::StartThread() { int result = OSThread::Start(\\\"DartWorker\\\", &Worker::Main, reinterpret_cast<uword>(this)); if (result != 0) { FATAL1(\\\"Could not start worker thread: result = %d.\\\", result); } } // OSThread::Start 每个端不一样，我们选择 Android 端的实现 // -> runtime\\\\vm\\\\os_thread_android.cc int OSThread::Start(const char* name, ThreadStartFunction function, uword parameter) { pthread_attr_t attr; int result = pthread_attr_init(&attr); RETURN_ON_PTHREAD_FAILURE(result); result = pthread_attr_setstacksize(&attr, OSThread::GetMaxStackSize()); RETURN_ON_PTHREAD_FAILURE(result); ThreadStartData* data = new ThreadStartData(name, function, parameter); // 声明系统线程类型 pthread_t tid; // 调用系统创建线程的函数 https://blog.csdn.net/liangxanhai/article/details/7767430 // pthread_create 参数含义：1. &tid 指向线程的指针，2. &attr 新建线程的属性 3. ThreadStart 线程要执行的方法指针 4. data 传给参数 ThreadStart 的参数 // 成功执行线程则返回 0 result = pthread_create(&tid, &attr, ThreadStart, data); RETURN_ON_PTHREAD_FAILURE(result); result = pthread_attr_destroy(&attr); RETURN_ON_PTHREAD_FAILURE(result); return 0; } // Dispatch to the thread start function provided by the caller. This trampoline // is used to ensure that the thread is properly destroyed if the thread just // exits. static void* ThreadStart(void* data_ptr) { if (FLAG_worker_thread_priority != kMinInt) { if (setpriority(PRIO_PROCESS, gettid(), FLAG_worker_thread_priority) == -1) { FATAL2(\\\"Setting thread priority to %d failed: errno = %d\\\\n\\\", FLAG_worker_thread_priority, errno); } } ThreadStartData* data = reinterpret_cast<ThreadStartData*>(data_ptr); const char* name = data->name(); OSThread::ThreadStartFunction function = data->function(); uword parameter = data->parameter(); delete data; // Set the thread name. There is 16 bytes limit on the name (including \\\\0). // pthread_setname_np ignores names that are too long rather than truncating. char truncated_name[16]; snprintf(truncated_name, ARRAY_SIZE(truncated_name), \\\"%s\\\", name); pthread_setname_np(pthread_self(), truncated_name); // 创建一个系统线程的包装类 OSThread 和新建的系统线程绑定 // Create new OSThread object and set as TLS for new thread. OSThread* thread = OSThread::CreateOSThread(); if (thread != NULL) { // 将线程切换到新创建的系统线程 OSThread::SetCurrent(thread); thread->set_name(name); UnblockSIGPROF(); // Call the supplied thread start function handing it its parameters. // 执行创建 ThreadStartData 时传入的方法，也就是 ThreadPool::Worker::Main(uword args) function(parameter); } return NULL; OSThread* OSThread::CreateOSThread() { ASSERT(thread_list_lock_ != NULL); MutexLocker ml(thread_list_lock_); if (!creation_enabled_) { return NULL; } OSThread* os_thread = new OSThread(); AddThreadToListLocked(os_thread); return os_thread; }\",\"在创建了新的系统线程后，会执行下面的方法：\",\"// -> runtime\\\\vm\\\\thread_pool.cc void ThreadPool::Worker::Main(uword args) { // Call the thread start hook here to notify the embedder that the // thread pool thread has started. Dart_ThreadStartCallback start_cb = Dart::thread_start_callback(); if (start_cb != nullptr) { start_cb(); } OSThread* os_thread = OSThread::Current(); ASSERT(os_thread != nullptr); Worker* worker = reinterpret_cast<Worker*>(args); ThreadPool* pool = worker->pool_; // 将 Worker 和系统线程绑定 os_thread->owning_thread_pool_worker_ = worker; worker->os_thread_ = os_thread; // Once the worker quits it needs to be joined. worker->join_id_ = OSThread::GetCurrentThreadJoinId(os_thread); #if defined(DEBUG) { MonitorLocker ml(&pool->pool_monitor_); ASSERT(pool->idle_workers_.ContainsForDebugging(worker)); } #endif pool->WorkerLoop(worker); worker->os_thread_ = nullptr; os_thread->owning_thread_pool_worker_ = nullptr; // Call the thread exit hook here to notify the embedder that the // thread pool thread is exiting. Dart_ThreadExitCallback exit_cb = Dart::thread_exit_callback(); if (exit_cb != nullptr) { exit_cb(); } } // -> runtime\\\\vm\\\\os_thread.h // OSThread // The ThreadPool::Worker which owns this OSThread. If this OSThread was not // started by a ThreadPool it will be nullptr. This TLS value is not // protected and should only be read/written by the OSThread itself. void* owning_thread_pool_worker_ = nullptr; // thread_list_lock_ cannot have a static lifetime because the order in which // destructors run is undefined. At the moment this lock cannot be deleted // either since otherwise, if a thread only begins to run after we have // started to run TLS destructors for a call to exit(), there will be a race // on its deletion in CreateOSThread(). static Mutex* thread_list_lock_;\"]},\"248\":{\"h\":\"Dart_NewSendPort\",\"t\":[\"看一下Dart_NewSendPort如何将创建好的Dart_Port service_port转变为 Dart 的SendPort的：\",\"// -> runtime\\\\vm\\\\dart_api_impl.cc DART_EXPORT Dart_Handle Dart_NewSendPort(Dart_Port port_id) { DARTSCOPE(Thread::Current()); CHECK_CALLBACK_STATE(T); if (port_id == ILLEGAL_PORT) { return Api::NewError(\\\"%s: illegal port_id %\\\" Pd64 \\\".\\\", CURRENT_FUNC, port_id); } return Api::NewHandle(T, SendPort::New(port_id)); } // -> runtime\\\\vm\\\\object.cc SendPortPtr SendPort::New(Dart_Port id, Heap::Space space) { return New(id, Isolate::Current()->origin_id(), space); } SendPortPtr SendPort::New(Dart_Port id, Dart_Port origin_id, Heap::Space space) { ASSERT(id != ILLEGAL_PORT); // 创建新的 SendPort 并将 Dart_Port id 和当前的 isolate id 与之绑定 SendPort& result = SendPort::Handle(); { ObjectPtr raw = Object::Allocate(SendPort::kClassId, SendPort::InstanceSize(), space, SendPort::ContainsCompressedPointers()); NoSafepointScope no_safepoint; result ^= raw; result.StoreNonPointer(&result.untag()->id_, id); result.StoreNonPointer(&result.untag()->origin_id_, origin_id); } return result.ptr(); }\",\"到这里我们发现，Dart_NewNativePort将要处理的事件handler封装起来，最后在非当前 isolate的线程中执行。\"]},\"249\":{\"h\":\"结论\",\"t\":[\"从上面的分析中，我们可以知道，在 Dart 中通过 File 进行文件操作，其实是通过 Dart 中的_IOService 进行消息中转，将用户的 IO 指令发送到 Native 层的 IOService 中；\",\"IOService 通过一些列操作，得到一个SendPort servicePort，与此同时对应的 IO 操作已经压入消息栈中等待触发在单独的线程中执行；\",\"之后在_IOService 中servicePort将用户需要的 IO 操作和与自己通信的_replyToPort = _receivePort!.sendPort; 通过send方法触发IOServiceCallback执行对应的 IO 操作，并且在最后调用Dart_PostCObject方法将结果压入消息栈中，这会触发 Dart 层_IOService 的_receivePort!.handler 回调事件，然后根据事件失败或者成功，使用 Completer 通过 Event loop 一步步将事件上报，最终回调用户需要的命令。\"]},\"250\":{\"h\":\"参考资料\",\"t\":[\"09、Flutter FFI Dart Native API_又吹风_Bassy 的博客-CSDN 博客\",\"快手 - 开眼快创 Flutter 实践 | w4lle's Notes\"]},\"251\":{\"h\":\"Flutter APP 绘制过程简析\",\"t\":[\"本文基于 Flutter 3.0\",\"Flutter App 基于 Dart 语言编写，提供了一套简单易用的 API，可以让开发者在 Flutter 中快速开发出一个精美的 APP。那么在 Flutter 中是如何绘制一个 APP 呢，runApp 是怎么将我们编写的 Widget 等添加到手机上的呢？本文简单从 Widget,Element,RenderObjet 三者的关系来梳理一下 Flutter 的绘制过程。\",\"让我们运行一个“最”简单的 Flutter App，分析一下在这个过程中涉及到的 Widget、Element、RenderObject 这三个 tree 的关系。\",\"main() { runApp(const Center( // Center 非必须，为了让文本居中显得更清晰 child: Text( \\\"Hello center text!\\\", textDirection: TextDirection.ltr, // 文本方向 ), )); }\",\"上述代码的效果如下：\",\"flutter_run_app_hello_center_text\",\"让我们使用 Flutter DevTools 看一下实际生成的 Widget Details Tree\",\"[root] >renderObject:RenderView#a00a5 Center alignment:Alignment.center widthFactor:null heightFactor:null >renderObject:RenderPositionedBox#94e0d Text \\\"Hello center text!\\\" textAlign:null textDirection:ltr locale:null softWrap:null overflow:null textScaleFactor:null maxLines:null textWidthBasis:null textHeightBehavior:null RichText textDirection:ltr softWrap:wrapping at box width maxLines:unlimited text:\\\"Hello center text!\\\" renderObject:RenderParagraph#71aa1\",\"可以看到，除了我们在代码里面添加的 Center 和 Text 这两个 Widget 之外，还多出来好几个 Widget/RenderObject，当我们仔细查看具体的 Widget，可以看到其内部还有 XXXElement，BuildOwner 之类的字段：\",\"Center alignment:Alignment.center widthFactor:null heightFactor:null renderObject:RenderPositionedBox#94e0d >_parent:RenderObjectToWidgetElement _debugReassembleConfig:null _notificationTree:null >_slot:Object _depth:2 >_widget:Center >_owner:BuildOwner >_lifecycleState:_ElementLifecycle >_debugForgottenChildrenWithGlobalKey:_HashSet _inheritedWidgets:null _dependencies:null _hadUnsatisfiedDependencies:true _dirty:false _inDirtyList:false _debugBuiltOnce:false _debugA1lowIgnoredCallsToMarkNeedsBuild:false _debugDoingBuild:false >_ancestorRenderObjectElement:RenderObjectToWidgetElement >_child:StatelessElement\",\"上述涉及到的几个类彼此之间到底是什么关系，我们的“Hello center text!”又是怎样才显示到屏幕上的，让我们接下来一个一个分析一下：\"]},\"252\":{\"h\":\"runApp\",\"t\":[\"在执行 runApp 的时候主要执行了三步\",\"// -> \\\\lib\\\\src\\\\widgets\\\\binding.dart void runApp(Widget app) { // 创建 render tree 的根节点 RenderView WidgetsFlutterBinding.ensureInitialized() // 将我们的 app widget 绑定到 RenderView ..scheduleAttachRootWidget(app) // 安排屏幕帧绘制 ..scheduleWarmUpFrame(); }\"]},\"253\":{\"h\":\"WidgetsFlutterBinding.ensureInitialized()\",\"t\":[\"创建 RenderView 具体的逻辑在WidgetsFlutterBinding.ensureInitialized方法中：\",\"// -> \\\\lib\\\\src\\\\widgets\\\\binding.dart class WidgetsFlutterBinding extends BindingBase with GestureBinding, SchedulerBinding, ServicesBinding, PaintingBinding, SemanticsBinding, RendererBinding, WidgetsBinding { static WidgetsBinding ensureInitialized() { if (WidgetsBinding._instance == null) WidgetsFlutterBinding(); return WidgetsBinding.instance; } }\",\"在ensureInitialized方法中，如果WidgetsBinding._instance为 null 则会先用构造方法创建，因为WidgetsFlutterBinding继承自 BindingBase，所以实际上执行下方的方法：\",\"// -> lib\\\\src\\\\foundation\\\\binding.dart abstract class BindingBase { BindingBase() { initInstances(); initServiceExtensions(); } @protected @mustCallSuper void initInstances() { } }\",\"这里主要做了 2 件事，我们关注initInstances()方法，这个方法的主要逻辑都在他的子类中，也就是之前WidgetsFlutterBinding混合的几个 BindingBase 子类中，我们关注和屏幕渲染有关的 RendererBinding：\",\"// -> lib\\\\src\\\\rendering\\\\binding.dart /// The glue between the render tree and the Flutter engine. mixin RendererBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, SemanticsBinding, HitTestable { @override void initInstances() { super.initInstances(); _instance = this; // 这里创建了 PipelineOwner，用来管理 rendering pipeline 也就是我们 app 中所有的 RenderObject _pipelineOwner = PipelineOwner( onNeedVisualUpdate: ensureVisualUpdate, onSemanticsOwnerCreated: _handleSemanticsOwnerCreated, onSemanticsOwnerDisposed: _handleSemanticsOwnerDisposed, ); platformDispatcher ..onMetricsChanged = handleMetricsChanged ..onTextScaleFactorChanged = handleTextScaleFactorChanged ..onPlatformBrightnessChanged = handlePlatformBrightnessChanged ..onSemanticsEnabledChanged = _handleSemanticsEnabledChanged ..onSemanticsAction = _handleSemanticsAction; // 注意这里创建了 RenderView initRenderView(); _handleSemanticsEnabledChanged(); assert(renderView != null); addPersistentFrameCallback(_handlePersistentFrameCallback); initMouseTracker(); if (kIsWeb) { addPostFrameCallback(_handleWebFirstFrame); } } /// Creates a [RenderView] object to be the root of the /// [RenderObject] rendering tree, and initializes it so that it /// will be rendered when the next frame is requested. /// /// Called automatically when the binding is created. void initRenderView() { renderView = RenderView(configuration: createViewConfiguration(), window: window); renderView.prepareInitialFrame(); } set renderView(RenderView value) { assert(value != null); // 注意这里，将 renderView 设置为_pipeline 的根节点 _pipelineOwner.rootNode = value; } }\",\"我们主要关注两件事：\",\"创建了用于管理渲染管道的 PipelineOwner _pipelineOwner\",\"Pipeline 是用来管理 rendering tree，其内部持有我们的 renderView 作为 rootNode，同时维护了_nodesNeedingLayout，_nodesNeedingCompositingBitsUpdate，_nodesNeedingPaint，_nodesNeedingSemantics 四个列表，当 flutter framework 每次需要往屏幕上绘制内容时会依次遍历这四个列表，将 RenderObject 绘制到屏幕上面。\",\"创建了 rendering tree 的根节点renderView ，并将其设置为_pipelineOwner的根节点\"]},\"254\":{\"h\":\"..scheduleAttachRootWidget(app)\",\"t\":[\"此方法是WidgetsFlutterBinding的另外一个混合类WidgetsBinding负责具体实现：\",\"WidgetsBinding的scheduleAttachRootWidget 方法最后调用了attachRootWidget(Widget rootWidget) ：\",\"// -> lib\\\\src\\\\widgets\\\\binding.dart /// The glue between the widgets layer and the Flutter engine. mixin WidgetsBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, RendererBinding, SemanticsBinding { // 将 rootWidget 绑定到 renderViewElement void attachRootWidget(Widget rootWidget) { final bool isBootstrapFrame = renderViewElement == null; _readyToProduceFrames = true; // 用于将 rootWidget 绑定到 renderView 上面 _renderViewElement = RenderObjectToWidgetAdapter<RenderBox>( container: renderView, debugShortDescription: '[root]', child: rootWidget, ) // 在此创建或者使用已有的 RenderObjectToWidgetElement，并作为根 Element // 并将 RenderObjectToWidgetAdapter 和 RenderView 与之绑定 // 这里的_buildOwner 在 WidgetsBinding.initInstances 方法创建，用于管理 widget 框架的类 .attachToRenderTree(buildOwner!, renderViewElement as RenderObjectToWidgetElement<RenderBox>?); if (isBootstrapFrame) { // 如果是启动框架，就安排更新帧 SchedulerBinding.instance.ensureVisualUpdate(); } } }\",\"这里主要有 3 步：\",\"创建 RenderObjectToWidgetAdapter 包装 RenderView\",\"在attachToRenderTree方法中创建 RenderObjectToWidgetElement 并mount到 element tree 中（widget tree 实际上并不存在，而是通过 element tree 管理）\",\"需要的话安排一次 frame（刷新页面）\",\"还需要注意一个新的角色buildOwner，这个对象全局唯一（一般由 parent 传给 child），在WidgetsBinding.initInstances方法创建，用来管理与 Widget tree 相关的类，实际上就是通过管理 Element 的插入，移除，更新来间接管理 Widget tree（对应我们在之前遇到的用来管理 rendering tree 的pipelineOwner ，这两个 Owner 管理着我们所说的 Flutter 的 Widget/Element/RenderObject“三”个 tree）。\"]},\"255\":{\"h\":\"RenderObjectToWidgetAdapter\",\"t\":[\"前面我们知道renderView其实是一个 RenderObject，所以这里为他创建了一个对应的 Widget——RenderObjectToWidgetAdapter，其主要作用是将rootWidget（也就是我们最开始写的 Center Widget 及其 child）绑定到之前生成的renderView上面，并将renderView作为自己对应的 RenderObject。\",\"// -> lib\\\\src\\\\widgets\\\\binding.dart class RenderObjectToWidgetAdapter<T extends RenderObject> extends RenderObjectWidget { /// Creates a bridge from a [RenderObject] to an [Element] tree. /// /// Used by [WidgetsBinding] to attach the root widget to the [RenderView]. RenderObjectToWidgetAdapter({ this.child, required this.container, this.debugShortDescription, }) : // 注意这里用 container 也就是 RenderView 创建了一个 GlobalObjectKey， // 在 RenderObjectToWidgetElementmount 的时候会用到 super(key: GlobalObjectKey(container)); @override RenderObjectToWidgetElement<T> createElement() => RenderObjectToWidgetElement<T>(this); @override RenderObjectWithChildMixin<T> createRenderObject(BuildContext context) => container; }\",\"RenderObjectToWidgetAdapter.createRenderObject 返回的就是container 也就是我们的 RenderView。\"]},\"256\":{\"h\":\"attachToRenderTree\",\"t\":[\"// -> lib\\\\src\\\\widgets\\\\binding.dart class RenderObjectToWidgetAdapter<T extends RenderObject> extends RenderObjectWidget { RenderObjectToWidgetElement<T> attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement<T>? element ]) { if (element == null) { owner.lockState(() { // 创建 RenderObjectToWidgetElement，并将 RenderObjectToWidgetAdapter 与之绑定 element = createElement(); assert(element != null); // 创建好 Element 之后，将 BuildOwner 与之绑定 element!.assignOwner(owner); }); owner.buildScope(element!, () { // 这里最终会通过 updateChild 方法将 rootWidget 对应的 Element 插入到 // RenderObjectToWidgetElement 下面，在 rootWidget 中第一个 RenderObjectElement // 的 mount 方法中，通过 attachRenderObject(newSlot) 将自己的 renderObject 绑定到 renderView element!.mount(null, null); }); } else { element._newWidget = this; element.markNeedsBuild(); } return element!; } }\",\"RenderObjectToWidgetAdapter在attachToRenderTree 方法中，创建对应的RenderObjectToWidgetElement 与自己绑定，并且同时也将rootWidget和之前创建的 rendering tree 的根节点renderView绑定。\",\"|— RenderObjectToWidgetAdapter —|— RenderObjectToWidgetElement —|— RenderView —|\",\"我们再来看一下RenderObjectToWidgetElement调用的父类RenderObjectElement.mount方法：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart abstract class RenderObjectElement extends Element { @override void mount(Element? parent, Object? newSlot) { super.mount(parent, newSlot); // 本例中这里实际上获取到的是 RenderView _renderObject = (widget as RenderObjectWidget).createRenderObject(this); // 将 RenderView 绑定到指定 newSlot(这里是 null) 中 attachRenderObject(newSlot); _dirty = false; } @override void attachRenderObject(Object? newSlot) { assert(_ancestorRenderObjectElement == null); _slot = newSlot; // 这里因为 RenderView 是根节点，所以_ancestorRenderObjectElement 和 parentDataElement 都为 null // 但是对于 RenderView 下级的节点，比如本例中的 Center Widget，他对应的祖先节点就是持有 RenderView // 的 RenderObjectToWidgetElement，所以这里会将 CenterWidget 的 RenderPositionedBox // 作为 RenderView 的 child _ancestorRenderObjectElement = _findAncestorRenderObjectElement(); _ancestorRenderObjectElement?.insertRenderObjectChild(renderObject, newSlot); final ParentDataElement<ParentData>? parentDataElement = _findAncestorParentDataElement(); if (parentDataElement != null) _updateParentData(parentDataElement.widget as ParentDataWidget<ParentData>); } }\",\"此外，还会调用的Element.mount方法：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart // Element 的方法： void mount(Element? parent, Object? newSlot) { _parent = parent; _slot = newSlot; _lifecycleState = _ElementLifecycle.active; _depth = _parent != null ? _parent!.depth + 1 : 1; if (parent != null) { // Only assign ownership if the parent is non-null. If parent is null // (the root node), the owner should have already been assigned. // See RootRenderObjectElement.assignOwner(). _owner = parent.owner; } assert(owner != null); // 这里将 RenderObjectToWidgetElement 注册到 owner 中，key 是创建 RenderObjectToWidgetAdapter 时候创建的 GlobalObjectKey final Key? key = widget.key; if (key is GlobalKey) { owner!._registerGlobalKey(key, this); } _updateInheritance(); attachNotificationTree(); }\",\"可以看到，这里将RenderObjectToWidgetElement 注册到了 BuildOwner 中\",\"在RenderObjectToWidgetElement的mount方法执行时，除了调用父类的mount方法外，还会触发_rebuild() 方法：\",\"class RenderObjectToWidgetElement<T extends RenderObject> extends RootRenderObjectElement {{ Element? _child; void _rebuild() { try { // 在这里分析可知，这里的 widget 即`RenderObjectToWidgetElement` 的 widget，也就是 // `RenderObjectToWidgetAdapter`，他的 child 也就是 rootWidget // 所以 updateChild 传入的值分别是 null，RenderObjectToWidgetAdapter.child // 会创建 rootWidget 对应的 element 并将其作为当前 element 的 child _child = updateChild(_child, (widget as RenderObjectToWidgetAdapter<T>).child, _rootChildSlot); } catch (exception, stack) { ... } }\",\"在_rebuild方法中，我们可以看到，在WidgetsBinding.attachRootWidget方法中给 RenderObjectToWidgetAdapter 作为child参数传入的rootWidget（也即我们示例中的CenterWidget），在这里被传入了 RenderView 对应的 RenderObjectToWidgetElement 的child中（这里的过程我们下面 Center 一节再分析），从而将其插入到 Flutter 的渲染树中。\",\"这样 RenderView（RenderObject）就有了对应的Widget和Element，并且有了自己的child。\"]},\"257\":{\"h\":\"..scheduleWarmUpFrame()\",\"t\":[\"这个方法则是尽快安排一个 frame 以便在屏幕下次刷新的时候显示 app 的内容（在 app 启动之后的第一次！！！），这样我们的 app 启动了，我们写的内容也能正常显示到屏幕上。\",\"通过上述分析，我们可以得知，runApp 方法执行之后，创建了RenderView对象，并将其作为整个 Flutter APP 的 RenderObject rendering tree 的根节点（后续所有的 Widget 创建的 RenderObject 都是在 RenderView 的下层），并且初始化它以便在下一帧的时候对其进行渲染。\",\"分析完了runApp，我们再来看一下刚刚提到的几个类，以及他们是如何添加到我们的 flutter app 中的。\"]},\"258\":{\"h\":\"RenderView\",\"t\":[\"先看一下在最顶层的RenderView：\",\"↓[root] >renderObject:RenderView#a00a5 parent:null _debugReassembleConfig:null _notificationTree:nul1 slot:null depth:1 _widget:RenderObjectToWidgetAdapter >_owner:BuildOwner _lifecycleState:_ElementLifecycle _debugForgottenChildrenWithGlobalKey:_HashSet _inheritedWidgets:nul1 _dependencies:null _hadUnsatisfiedDependencies:false _dirty:false _inDirtyList:false _debugBuiltOnce:false _debugA1lowIgnoredCallsToMarkNeedsBuild:false _debugDoingBuild:false _ancestorRenderObjectElement:null _child:SingleChildRenderObjectElement _newWidget:null\",\"查阅源码可知，RenderView 是 RenderObject，一般情况下是 Flutter 的根 View，表示整个 rendering tree 的 output surface，处理引导着 render pipeline。\",\"RenderView 有且仅有一个 RenderBox 类型的child，他会强制将child的size改为 RenderView 初始化时候的入参configuration的值（一般是当前window也就是手机屏幕的逻辑像素size）。\"]},\"259\":{\"h\":\"Center\",\"t\":[\"上节我们说道，Center Widget 通过RenderObjectToWidgetElement.updateChild（最终调用 Element 同名方法）方法插入到渲染树中，下面我们详细分析一下这个过程：\",\"在updateChild中，因为child==null，而newWidget也就是 Center 不为null，所以直接使用inflateWidget(newWidget, newSlot)创建新的 Element 并作为 RenderObjectToWidgetElement 的_child，而作为第一次创建的 Center，在Element.inflateWidget方法中大概会执行下面几步：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart // Element 的 inflateWidget 方法： final Element newChild = newWidget.createElement(); newChild.mount(this, newSlot); return newChild;\",\"也就是这里先执行了Center.createElement方法创建 Element，然后调用此Element.mount方法将 Element 添加到 Element tree。\",\"让我们再看一下 Center 的 Widget Details Tree：\",\"Center alignment:Alignment.center widthFactor:null heightFactor:null renderObject:RenderPositionedBox#94e0d >_parent:RenderObjectToWidgetElement _debugReassembleConfig:null _notificationTree:null >_slot:Object _depth:2 >_widget:Center >_owner:BuildOwner >_lifecycleState:_ElementLifecycle >_debugForgottenChildrenWithGlobalKey:_HashSet _inheritedWidgets:null _dependencies:null _hadUnsatisfiedDependencies:true _dirty:false _inDirtyList:false _debugBuiltOnce:false _debugA1lowIgnoredCallsToMarkNeedsBuild:false _debugDoingBuild:false >_ancestorRenderObjectElement:RenderObjectToWidgetElement >_child:StatelessElement\",\"可以看到 Center 的_parent和_ancestorRenderObjectElement是 RenderObjectToWidgetElement，_depth是 2，这个和我们最初的分析一致，因为 Center（其实严格来说，是 Center Widget 的（或子级的）RenderObject）是 RenderView 的child。\",\"我们接下来主要关注一下几个属性：\",\"alignment: Alignment.center\",\"renderObject: RenderPositionedBox\",\"_widget: Center\",\"_child: StatelessElement\",\"先看一下 Center 的源码：\",\"// -> lib\\\\src\\\\widgets\\\\basic.dart class Center extends Align { /// Creates a widget that centers its child. const Center({ Key? key, double? widthFactor, double? heightFactor, Widget? child }) : super(key: key, widthFactor: widthFactor, heightFactor: heightFactor, child: child); }\",\"Center 代码十分简单，主要的逻辑在他的父类 Align 中：\",\"// -> lib\\\\src\\\\widgets\\\\basic.dart class Align extends SingleChildRenderObjectWidget { const Align({ Key? key, // 这里 alignment 默认是居中 this.alignment = Alignment.center, this.widthFactor, this.heightFactor, Widget? child, }) : super(key: key, child: child); @override RenderPositionedBox createRenderObject(BuildContext context) { // Center 的父类可以创建自己的 RenderObject return RenderPositionedBox( alignment: alignment, widthFactor: widthFactor, heightFactor: heightFactor, textDirection: Directionality.maybeOf(context), ); } @override void updateRenderObject(BuildContext context, RenderPositionedBox renderObject) { renderObject ..alignment = alignment ..widthFactor = widthFactor ..heightFactor = heightFactor ..textDirection = Directionality.maybeOf(context); } }\",\"Align 其实是一个SingleChildRenderObjectWidget ,对应的 Element 是SingleChildRenderObjectElement，他创建的 RenderObject 是RenderPositionedBox 。\",\"SingleChildRenderObjectElement 是一个RenderObjectElement 也就意味着他在 rendering tree 有一个关联的 RenderObject 负责 layout，painting 以及 hit-test。\",\"回到我们的 Center Widget 中：\"]},\"260\":{\"h\":\"\",\"t\":[\"Alignment.center是在创建 Center 的时候默认设置的对齐方式\"]},\"261\":{\"h\":\"\",\"t\":[\"RenderPositionedBox是 Center Widget 对应的 RenderObject，在SingleChildRenderObjectWidget.mount 的时候创建。其本身并不在屏幕上绘制肉眼可见的内容，而是将 child 按照指定的对齐方式进行定位。\",\"RenderPositionedBox 的继承关系：RenderPositionedBox → RenderAligningShiftedBox → RenderShiftedBox → RenderBox → RenderObject\",\"RenderPositionedBox可以按照给定的AlignmentGeometry定位 child。在本例中，他的几个属性如下：\",\"alignment: Alignment.center\",\"_owner: PipelineOwner\",\"_parent: RenderView\",\"_child: RenderParagraph\",\"前三个属性含义很明显，这里我们注意到他的_child并不是我们预期的Text，这个原因我们后面再分析。\"]},\"262\":{\"h\":\"\",\"t\":[\"其实通过上述的分析，我们应该已经知道，我们在 Widget Details Tree 中看到的 Center 其实是 Center Widget 对应的 Element，也就是SingleChildRenderObjectElement 。\",\"其继承关系：SingleChildRenderObjectElement → RenderObjectElement → Element\",\"根据 Element 的定义，这里的 Widget 是在 Widget 创建SingleChildRenderObjectElement的时候传入的：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart Element(Widget widget) : assert(widget != null), _widget = widget; // -> lib\\\\src\\\\widgets\\\\framework.dart abstract class SingleChildRenderObjectWidget extends RenderObjectWidget { /// Abstract const constructor. This constructor enables subclasses to provide /// const constructors so that they can be used in const expressions. const SingleChildRenderObjectWidget({ Key? key, this.child }) : super(key: key); /// The widget below this widget in the tree. /// /// {@macro flutter.widgets.ProxyWidget.child} final Widget? child; @override SingleChildRenderObjectElement createElement() => SingleChildRenderObjectElement(this); }\",\"然后这个 Element 在上述WidgetsBinding.attachRootWidget步骤中通过一系列操作，最终在 RenderObjectToWidgetElement 的updateChild方法被创建并被BuildOwner 插入到 tree 中。\",\"这里的_widget才真正对应着我们在runApp里面传入的 Center Widget，他的child也正是我们的 Text。\",\"Center alignment:Alignment.center widthFactor:null heightFactor:null >renderObject:RenderPositionedBox#6e802 >_parent:RenderObjectToWidgetElement _debugReassembleConfig:null _notificationTree:null _slot:Object denth:2 _ [[[widget:Center]]] //注意这里 key:null location:_Location [[[child:Text]]] //注意这里 key:null >_location:_Location data:'Hello center text!' textSpan:null style:null strutStyle:null textAlign:null >textDirection:TextDirection locale:null softWrap:null overflow:null textScaleFactor:null maxLines:null semanticsLabel:null textWidthBasis:null textHeightBehavior:null >alignment:Alignment widthFactor:null heightFactor:nul1 >_owner:BuildOwner\"]},\"263\":{\"h\":\"\",\"t\":[\"Center 对应的 Element 的_child是一个 StatelessElement，按照我们上一步的分析，StatelessElement 应该是 Text Widget 创建，事实也确实如此：\",\"↓_child: StatelessElement >_parent: SingleChildRenderObjectElement debugReassembleConfig： null _notificationTree: null slot: null depth: 3 >_widget: Text >_owner: BuildOwner >_lifecycleState: _ElementLifecycle >_debugForgottenChildrenWithGlobalKey: _HashSet _inheritedWidgets: null dependencies: null _hadUnsatisfiedDependencies: true _dirty: false _inDirtyList: false debugBuiltOnce: false _debugAllowIgnoredCallsToMarkNeedsBuild: false >_child: MultichildRenderObjectElement debugDoingBuild: false\",\"让我们分析一下这个_child的赋值过程：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart class SingleChildRenderObjectElement extends RenderObjectElement { @override void mount(Element? parent, Object? newSlot) { super.mount(parent, newSlot); _child = updateChild(_child, (widget as SingleChildRenderObjectWidget).child, null); } }\",\"在 Center 对应的 Element——SingleChildRenderObjectElement 在mount的时候，同时也会更新child（本例中 Center 的child是 Text），这里调用的是 Element 的updateChild方法，他的逻辑如下：\",\"| | **newWidget == null** | **newWidget != null** | | :-----------------: | :--------------------- | :---------------------- | | **child == null** | Returns null. | Returns new [Element]. | | **child != null** | Old child is removed, returns null. | Old child updated if possible, returns child or new [Element]. |\",\"updateChild的逻辑分为 4 种情况：其余情况都比较简单，只有newWidget != null或者child != null的时候需要判断一下，如果可以更新就更新否则就创建新的 Element，可以分为下面这几种情况：\",\"child.widget == newWidget：两个是同一个对象，就只更新child的slot\",\"Widget.canUpdate(child.widget, newWidget)：二者的runtimeType和key一样，就调用child.update(newWidget)更新child._widget，必要时更新child的slot\",\"否则创建新的element并替代\",\"到这里跟 Center 插入到 render tree 的步骤一样，将 Text 插入到了 tree 中。\"]},\"264\":{\"h\":\"Text\",\"t\":[\"接下来我们分析一下 Text 是如何被加入 Widget Details Tree 的。\",\"其继承关系：Text → StatelessWidget → Widget\",\"Text 是 StatelessWidget，他的内容比较简单，主要的逻辑都在build方法中：\",\"// -> \\\\lib\\\\src\\\\widgets\\\\text.dart class Text extends StatelessWidget { const Text( String this.data, { Key? key, ... }) : textSpan = null, super(key: key); @override Widget build(BuildContext context) { final DefaultTextStyle defaultTextStyle = DefaultTextStyle.of(context); TextStyle? effectiveTextStyle = style; if (style == null || style!.inherit) effectiveTextStyle = defaultTextStyle.style.merge(style); if (MediaQuery.boldTextOverride(context)) effectiveTextStyle = effectiveTextStyle!.merge(const TextStyle(fontWeight: FontWeight.bold)); // 注意这里返回了 RichText Widget result = RichText( textAlign: textAlign ?? defaultTextStyle.textAlign ?? TextAlign.start, textDirection: textDirection, // RichText uses Directionality.of to obtain a default if this is null. ... text: TextSpan( style: effectiveTextStyle, text: data, children: textSpan != null ? <InlineSpan>[textSpan!] : null, ), ); ... return result; } }\",\"同样，作为 StatelessWidget，他也创建了一个StatelessElement ：\",\"其继承关系：StatelessElement → ComponentElement → Element\",\"按照之前的分析，Text 插入到 tree 中执行的方法分别是Text.createElement和 Text 对应的 Element——StatelessElement.mount方法：\",\"Text 是 StatelessWidget 的子类，他的主要逻辑都在 StatelessWidget：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart abstract class StatelessWidget extends Widget { const StatelessWidget({ Key? key }) : super(key: key); @override StatelessElement createElement() => StatelessElement(this); @protected Widget build(BuildContext context); }\",\"可以看到其createElement创建的是 StatelessElement，也就是说 Text 插入到 Center 过程主要在 StatelessElement 中。\",\"StatelessElement.mount方法主要逻辑在 ComponentElement 中，这个方法除了调用 Element 同名方法外，还调用了ComponentElement._firstBuild() → Element.rebuild() → ComponentElement.performRebuild() ：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart // ComponentElement 类中的方法 void performRebuild() { Widget? built; try { // 这里调用 Element 对应的 Widget 的 build 方法创建 Widget，也就是 RichText built = build(); } catch (e, stack) { ... } finally { // We delay marking the element as clean until after calling build() so // that attempts to markNeedsBuild() during build() will be ignored. _dirty = false; assert(_debugSetAllowIgnoredCallsToMarkNeedsBuild(false)); } // 将上述创建的 Widget：built 经过处理后赋值给 Element 的_child try { _child = updateChild(_child, built, slot); assert(_child != null); } catch (e, stack) { built = ErrorWidget.builder(...); _child = updateChild(null, built, slot); } }\",\"这里的主要有两个步骤：\",\"调用ComponentElement.build方法，生产 Widget（本例中，间接调用了 Text 的build方法）\",\"调用ComponentElement.updateChild方法，更新child（最终执行的是 Element 同名方法逻辑）\",\"到目前为止，我们的 Widget/Element/RenderObject tree 如下（第四级 RichText 下面再分析）：\",\"**Widget**: RenderObjectToWidgetAdapter → Center → Text → *RichText* **Element**: RenderObjectToWidgetElement → SingleChildRenderObjectElement → StatelessElement → *MultiChildRenderObjectElement* **RenderObject**: RenderView → RenderPositionedBox → [X] → *RenderParagraph* 注： 1. 这里的[X]实际上不存在，只是为了和Text对应表示这里本应该有一个对应的RenderObject 2. 最后一列*RichText*对应的节点目前还没有分析到，此处仅做提前展示\",\"不难看出，在从定往下数第三层也就是 Text 对应的这一级中，RenderObject tree 这里并没有对应的对象，在上面的分析中，我们也看到了 StatelessWidget 本身并没有创建 RenderObject 的方法。实际上，Widget 分为多个种类，只有 RenderObject 类及其子类才会创建 RenderObject：\",\"Untitled\"]},\"265\":{\"h\":\"RichText\",\"t\":[\"终于到了我们这个 app 真正在屏幕上显示的内容这里了，上面我们分析到，Text 作为 StatelessWidget，本身并不会产生可以在屏幕上绘制的 RenderObject，而是通过他的build方法返回一个可以产生 RenderObject 的 Widget，在本例中，这个 Widget 就是 RichText：\",\"// -> lib\\\\src\\\\widgets\\\\basic.dart class RichText extends MultiChildRenderObjectWidget { @override RenderParagraph createRenderObject(BuildContext context) { assert(textDirection != null || debugCheckHasDirectionality(context)); return RenderParagraph(text, textAlign: textAlign, textDirection: textDirection ?? Directionality.of(context), softWrap: softWrap, overflow: overflow, textScaleFactor: textScaleFactor, maxLines: maxLines, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior, locale: locale ?? Localizations.maybeLocaleOf(context), ); } }\",\"RichText 继承自MultiChildRenderObjectWidget ，如上节分析的，是一种RenderObjectWidget，它创建了真正在屏幕上渲染的 RenderObject——RenderParagraph：\",\"// -> lib\\\\src\\\\rendering\\\\paragraph.dart class RenderParagraph extends RenderBox with ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData>, RelayoutWhenSystemFontsChangeMixin {}\",\"上面说道，Text 本身作为 StatelessWidget 并不产生 RenderObject，那么这里的 RenderParagraph 是如何找到并插入到 rendering tree 中的呢？\",\"带着这个疑问，我们看一下MultiChildRenderObjectWidget 创建的MultiChildRenderObjectElement ：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart class MultiChildRenderObjectElement extends RenderObjectElement { @override void mount(Element? parent, Object? newSlot) { super.mount(parent, newSlot); final MultiChildRenderObjectWidget multiChildRenderObjectWidget = widget as MultiChildRenderObjectWidget; // 本例中不涉及 children final List<Element> children = List<Element>.filled(multiChildRenderObjectWidget.children.length, _NullElement.instance); Element? previousChild; for (int i = 0; i < children.length; i += 1) { final Element newChild = inflateWidget(multiChildRenderObjectWidget.children[i], IndexedSlot<Element?>(i, previousChild)); children[i] = newChild; previousChild = newChild; } _children = children; } }\",\"这里可以看到，在 MultiChildRenderObjectElement 的mount方法中：\",\"调用父类mount方法\",\"遍历了所有的children将其插入到 MultiChildRenderObjectElement 中。\",\"在前面的 Text 源码中，我们注意到给只给RichText.text赋值了，RichText 的textSpan和children都是null，所以后面对children的处理在本例中不涉及，让我们看一下super.mount(parent, newSlot)方法：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart abstract class RenderObjectElement extends Element { @override void mount(Element? parent, Object? newSlot) { super.mount(parent, newSlot); // 这里调用对应的 RenderObjectWidget 创建_renderObject _renderObject = (widget as RenderObjectWidget).createRenderObject(this); // 将其绑定到 rendering tree 中 attachRenderObject(newSlot); _dirty = false; } }\",\"这里主要有 2 步：\",\"通过widget.createRenderObject 创建_renderObject，本例中就是用 RichText 创建了 RenderParagraph\",\"调用RenderObjectElement.attachRenderObject方法将_renderObject插入到 rendering tree\",\"让我们看一下 attachRenderObject 的实现：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart // RenderObjectElement 类的方法 @override void attachRenderObject(Object? newSlot) { assert(_ancestorRenderObjectElement == null); _slot = newSlot; // 向上遍历，找到父级节点中最近的 RenderObjectElement _ancestorRenderObjectElement = _findAncestorRenderObjectElement(); // 将 renderObject 插入 _ancestorRenderObjectElement?.insertRenderObjectChild(renderObject, newSlot); final ParentDataElement<ParentData>? parentDataElement = _findAncestorParentDataElement(); if (parentDataElement != null) _updateParentData(parentDataElement.widget as ParentDataWidget<ParentData>); } RenderObjectElement? _findAncestorRenderObjectElement() { Element? ancestor = _parent; while (ancestor != null && ancestor is! RenderObjectElement) ancestor = ancestor._parent; return ancestor as RenderObjectElement?; }\",\"可以看到，在attachRenderObject方法中插入的方式很简单：先在当前 tree 中向上找到父级中离得最近的 RenderObjectElement，在本例中是 Center 这个 Widget 对应的 SingleChildRenderObjectElement（注意不是创建 RichText 的 Text），然后调用其insertRenderObjectChild方法将当前的 RenderParagraph 插入到 rendering tree 中：\",\"// -> lib\\\\src\\\\widgets\\\\framework.dart class SingleChildRenderObjectElement extends RenderObjectElement { @override void insertRenderObjectChild(RenderObject child, Object? slot) { final RenderObjectWithChildMixin<RenderObject> renderObject = this.renderObject as RenderObjectWithChildMixin<RenderObject>; renderObject.child = child; } }\",\"在 SingleChildRenderObjectElement 的insertRenderObjectChild方法中先是查找当前 Element 持有的renderObject,然后将我们传入的 RichText 的 RenderObject——RenderParagraph 赋值给renderObject.child。\",\"到这里，我们的所有 Widget 在 Element 的组织下，将对于的 RenderObject 添加到 Rendering Tree 中，他们的关系如下：\",\"**Widget**: RenderObjectToWidgetAdapter → Center → Text → RichText **Element**: RenderObjectToWidgetElement → SingleChildRenderObjectElement → StatelessElement → MultiChildRenderObjectElement **RenderObject**: RenderView → RenderPositionedBox → RenderParagraph\",\"这样，当屏幕刷新的时候，这些内容便绘制在屏幕上面。\"]},\"266\":{\"h\":\"总结\",\"t\":[\"在runApp方法中，WidgetsFlutterBinding 作为将 flutter framework 绑定到 flutter engine 的粘合剂：\",\"在ensureInitialized方法中创建了_pipelineOwner（管理 rendering tree）、renderView和buildOwner（通过管理 Element tree 间接管理 widget tree），并将renderView设置为_pipelineOwner的根节点。\",\"在scheduleAttachRootWidget方法中，为renderView创建并绑定了对应的 Widget（RenderObjectToWidgetAdapter）和 Element（RenderObjectToWidgetElement）。然后通过RenderObjectToWidgetElement.mount方法，将之前创建的buildOwner与自己绑定。\",\"并且将我们在runApp传入的 WidgetrootWidget（也就是本例中的 Center Widget）对应的 Element 添加为 RenderObjectToWidgetElement 的子节点。并依此将 Text、Text 内部的 RichText 等对应的 Element 都加入到 Element tree 中，直到遍历完整个 Widget tree。\",\"在scheduleWarmUpFrame方法中安排在下一次屏幕刷新的时候将我们的内容展示在屏幕上面。\",\"下面是我们这个“最”简单的 Flutter App 的结构示意：\"]},\"267\":{\"h\":\"参考资料\",\"t\":[\"Flutter - Dart API docs\",\"Flutter, what are Widgets, RenderObjects and Elements? - Norbert Kozsir | Flutter Europe\",\"Flutter Widgets Explained | Understand How Flutter Works!\",\"深入浅出 Flutter Framework 之 PipelineOwner\"]},\"268\":{\"h\":\"Flutter UI 绘制与 InheritedWidget 解析\"},\"269\":{\"h\":\"Flutter UI 绘制与 InheritedWidget 解析\",\"t\":[\"Flutter 的Widget分为StatefulWidget和StatelessWidget ，二者都继承自Widget。\",\"此外还有一种用来传输数据的Widget——InheritedWidget，与上述两者不太一样的是，他的继承关系是：InheritedWidget→ProxyWidget →Widget 。\",\"Flutter 的渲染流程如图：\",\"flutter_widget_element_renderobject_relationship\",\"可以简单理解为， Widget是配置信息，Element代表在树中详细的位置，而RenderObject则是实际渲染的对象。\",\"StatelessWidget和StatefulWidget在创建之后就不会再变化，而StatefulWidget因为有State，所以可以在State调用setState()方法之后，重新执行State的build()方法，从而更新界面。\",\"如果Widget是const的，那么他就不会被rebuild。\"]},\"270\":{\"h\":\"Widget Rebuild 的过程\",\"t\":[\"以 StatefulWidget 为例：\",\"flutter_render_flow_chart\",\"调用setState()方法，会调用对应的Element的markNeedsBuild() 方法，通过BuildOwner的scheduleBuildFor(Element element) 方法将当前Element标记为dirty，以便在下次屏幕刷新时安排rebuilt 。\",\"下一帧屏幕刷新，调用BuildOwner的buildScope(Element context, [ VoidCallback? callback ]) 方法。这个方法会遍历_dirtyElements 中所有dirty的element执行element.rebuild(); 方法，在其内部调用了Element的performRebuild() 方法。\",\"Element的performRebuild() 方法因各个Element的实现而异：\",\"StatelessElement 、InheritedElement：与父类ComponentElement 保持一致\",\"StatefulElement ：判断有需要时调用state.didChangeDependencies(); ，其余与父类ComponentElement 保持一致\",\"而ComponentElement 的performRebuild() 主要做了 2 件事： （1）built = build(); ；（2）_child = updateChild(_child, built, slot);\",\"在这其中build()：\",\"StatelessElement:build() => widget.build(this);\",\"StatefulElement : build() => state.build(this);\",\"InheritedElement :build() => widget.child;\",\"updateChild 会判断以下几种情况：\",\"newWidget == null\",\"newWidget != null\",\"child == null\",\"return null\",\"return new Element\",\"child != null\",\"remove old child, return null\",\"Old child updated if possible, returns child or new Element\",\"其中，old child updated 的时候调用的是child.update(newWidget); 方法会触发Widget的rebuild() 。\",\"这样就完成了一次 Rebuild。\"]},\"271\":{\"h\":\"InheritedWidget 的 Rebuild 过程\",\"t\":[\"InheritedWidget是持有状态的Widget，他的子Widget可以通过他来获取这些状态。\",\"一般来说，InheritedWidget持有的状态是final的，如果要更新状态，就需要在其外部包裹一个StatefulWidget，通过StatefulWidget的State.setState()来触发InheritedWidget重建（实际上InheritedElement没有重新创建），从而更新那些依赖了InheritedWidget的子Widget。\",\"下图是一个被StatefulWidget包裹的InheritedWidget在setSate(){}方法执行后的流程图：\",\"flutter_render_flow_chart_with_inheritedwidget\",\"当外层StatefulWidget的Element执行到updateChild(child,build,solt);会调用InheritedElement的update() 方法。\",\"这个方法内部会调用updated(oldWidget) 方法，在内部通过notifyClients(oldWidget); 方法，通知原先的InheritedElement的_dependents ，将其标记为dirty，准备rebuild。\",\"在此之后，update()方法还会将当前Element标记为dirty，通过调用rebuild(); 执行performRebuild();\",\"在performRebuild()方法中：\",\"built = build(); 中的build方法：build() => widget.child; 实际上取了widget的child。\",\"然后执行_child = updateChild(_child, built, slot); 这个过程与普通Widget一致。\",\"需要注意的是，updateChild 中，如果子Widget不是const （或者被InheritedWidget外层的widget/state之类的持有）就会被认为built!=_child 从而导致InheritedWidget的子Widget重建。导致的结果就是：虽然InheritedWidget的确只标记了那些依赖了他的Widget，但是由于直接子Widget要重建，所以还是所有的非const Widget都重建了。\"]},\"272\":{\"h\":\"InheritedWidget 的获取方式\",\"t\":[\"T? dependOnInheritedWidgetOfExactType<T extends InheritedWidget>({ Object? aspect }); 获取指定类型的InheritedWidget，并且将自己注册到此Widget，以便当该Widget变化的时候，自己也能rebuilt 。复杂度O(1) 。\",\"T? findAncestorWidgetOfExactType<T extends Widget>(); 只获取指定类型的Widget ，包括InheritedWidget ，仅获取该Widget执行一些操作，通常用在interaction event handlers 之类中。复杂度(O(N) 。\"]},\"273\":{\"h\":\"代码示例\",\"t\":[\"根据上述理论，创建一个InheritedWidget来传递数据：\",\"1、AppColor.dart 一个持有color 的InheritedWidget。\",\"class AppColor extends InheritedWidget { final Color color; final Widget child; Function(Color)? onColorChanged; AppColor({ required this.color, required this.child, this.onColorChanged, }) : super(child: child); @override bool updateShouldNotify(covariant AppColor oldWidget) => color != oldWidget.color; static AppColor? of(BuildContext context) { return context.dependOnInheritedWidgetOfExactType<AppColor>(); } }\",\"2、定义一些类，使用或未使用到InheritedWidget：\",\"class NoName extends StatelessWidget { const NoName({ Key? key, }) : super(key: key); @override Widget build(BuildContext context) { print(\\\"NoName build ${this.hashCode}\\\"); return Column( children: [ Column( children: [ // 这里 AppColor 的_dependents 会加入 ColorfulContainer(dependencies: [AppColor]) // 因为他用了 context.dependOnInheritedWidgetOfExactType<AppColor>(); // 会将自己注册到 AppColor ColorfulContainer(), ChangeStateButton(), Text(\\\"This Text Should Not Rebuild\\\"), ], ) ], ); } } class ColorfulContainer extends StatelessWidget { ColorfulContainer({Key? key}) : super(key: key); Widget build(BuildContext context) { var appColor = AppColor.of(context); print( \\\"_ColorfulContainerState appColor?.color:${appColor?.color} appColor:${appColor.hashCode}\\\"); return Container( color: appColor?.color, height: 100, child: Text(\\\"hello color ${appColor?.color}\\\"), ); } } class ChangeStateButton extends StatefulWidget { @override State<ChangeStateButton> createState() => _ChangeStateButtonState(); } class _ChangeStateButtonState extends State<ChangeStateButton> { @override Widget build(BuildContext context) { return MaterialButton( onPressed: () { // 注意下面这个方法，只是查找到 InheritedWidget 的引用，并没有注册依赖 // 所以当 InheritedWidget 变化的时候并不会触发此控件重建 // 因为每次 onColorChanged 时 AppColor 都会重建，所以需要在这里获取最新的 var appColor = context.findAncestorWidgetOfExactType<AppColor>(); print( \\\"_ChangeStateButtonState appColor?.color:${appColor?.color} appColor:${appColor.hashCode}\\\"); var color = appColor?.color; var newColor = color == Colors.teal ? Colors.blueAccent : Colors.teal; appColor?.onColorChanged?.call(newColor); print( \\\"_ChangeStateButtonState onPressed appColor?.color:${appColor?.color} appColor:${appColor.hashCode}\\\"); }, child: Text(\\\"Change State Button, Shlould NOT Rebuild\\\"), ); } }\",\"3、接下来实现一种基础的使用InheritedWidget的方法，这种方法会在InheritedWidget更新的时候，rebuilt InheritedWidget下面的所有子类，无论他们是否使用到了InheritedWidget（原因是上面说到的 Flutter rebuild 的机制导致的，实际上InheritedWidget本身只标记了ColorfulContainer为dirty）。\",\"class AlwaysRebuildWidget extends StatefulWidget { final Color color; AlwaysRebuildWidget({Key? key, required this.color}) : super(key: key); @override State<AlwaysRebuildWidget> createState() => _AlwaysRebuildWidgetState(); } class _AlwaysRebuildWidgetState extends State<AlwaysRebuildWidget> { late Color _color; var child = NoName(); @override void initState() { super.initState(); _color = widget.color; } @override Widget build(BuildContext context) { // 这种写法，AppColor 的_dependents 也只有 1 个。ColorfulContainer(dependencies: [AppColor]) // 所以每次 setState 引起 AlwaysRebuildWidget 重新绘制，引起 AppColor 重新创建，本应该会重建 ColorfulContainer // 但是因为 build 方法重新执行了一次，所以 AppColor 和整个 NoName 都被重建， print(\\\"AlwaysRebuildWidget build${widget.hashCode}\\\"); return AppColor( color: _color, onColorChanged: (color) { setState(() { _color = color; }); }, // 这种写法，AppColor 在 updateChild 的时候会判断 widget.child 与_child.widget 的 NoName 不一致 // （这是因为，AppColor 在 notifyClients 的时候修改了 NoName 的 child 之一 ColorfulContainer 为 dirty） // 从而会更新 NoName，导致 NoName 下面所有的子 Widget 全部重新绘制 child: NoName()); // 按照上面分析的逻辑，在这里加上 const，那么依旧用的是之前的 NoName，就不会 repaint 整个的 NoName 了 // child: const NoName()); } }\",\"4、接下来实现一种使用InheritedWidget的方法，当InheritedWidget更新的时候，只会更新那些在InheritedWidget这里注册依赖了的Widget。\",\"class SelectiveRebuildWidget extends StatefulWidget { final Widget child; final Color color; SelectiveRebuildWidget({Key? key, required this.child, required this.color}) : super(key: key) {} @override State<SelectiveRebuildWidget> createState() => _SelectiveRebuildWidgetState(); } class _SelectiveRebuildWidgetState extends State<SelectiveRebuildWidget> { late Color _color; @override void initState() { super.initState(); _color = widget.color; } @override Widget build(BuildContext context) { print( \\\"SelectiveRebuildWidget build${widget.child.hashCode} ${widget.hashCode}\\\"); return AppColor( color: _color, onColorChanged: (color) { setState(() { _color = color; }); }, // 这里的 AppColor 的_dependents 只有 1 个。ColorfulContainer(dependencies: [AppColor]) // 因为 setState 不会重新创建 SelectiveRebuildWidget，所以 widget.child 也没有被重新 // 创建（但是重新绘制了，导致 AppColor 也重新绘制） // 所以 AppColor 的 child 还是之前的，按照 InheritedWidget 的规则，只有 ColorfulContainer 重新绘制了 child: widget.child, ); } }\"]},\"274\":{\"h\":\"参考资料\",\"t\":[\"Using Inherited Widget In Flutter\",\"【Flutter 学习】之 Widget 数据共享之 InheritedWidget 梁飞宇\",\"InheritedWidget confusion\",\"Managing Flutter Application State With InheritedWidgets\",\"Does using const in the widget tree improve performance?\",\"StatefulWidget\"]},\"275\":{\"h\":\"Flutter Expanded VS Flexible\",\"t\":[\"在 Flutter 中，当需要填充容器（Row, Column, or Flex）剩余空间的时候，可以使用Expanded或Flexible，本文对这二者的差异做一分析。\"]},\"276\":{\"h\":\"分析\",\"t\":[\"Expanded 比较容易理解，他会强制 child 改变大小，占据容器的剩余空间，如果有多个Expanded的话，会按照他们的 flex 占比来分配每个 child 可以占据的空间大小。\",\"Flexible 稍微特殊一些，有时候看起来似乎他的 child 占据的大小既不全是父布局的剩余空间，也不全是刚刚包裹 child 内容的大小。\",\"让我们看一下Flexible的源码：\",\"const Flexible({ Key? key, this.flex = 1, this.fit = FlexFit.loose, required Widget child, }) : super(key: key, child: child);\",\"可以看到，默认情况下他使用的fit模式是FlexFit.loose，查阅文档定义可知：\",\"FlexFit.loose：The child can be at most as large as the available space (but is allowed to be smaller). FlexFit.tight：The child is forced to fill the available space.\",\"也就是说，默认情况下，Flexible的 child 最大可以是父容器分配给Flexible的大小（假设为MaxSzie）。\",\"但是，如果 child 的大小比这个MaxSzie要小的话，那么允许 child 按照自己的大小来显示。\",\"而如果Flexible的fit是FlexFit.tight的话，就会强制 child 大小为MaxSzie，效果和Expanded一致，实际上Expanded就是FlexFit.tight模式的Flexible：\",\"class Expanded extends Flexible { /// Creates a widget that expands a child of a [Row], [Column], or [Flex] /// so that the child fills the available space along the flex widget's /// main axis. const Expanded({ Key? key, int flex = 1, required Widget child, }) : super(key: key, flex: flex, fit: FlexFit.tight, child: child); }\",\"对于上述的结论，我们可以从下面的代码中得到证实：\",\"Untitled\",\"main() => runApp(MaterialApp(home: BodyWidget())); class BodyWidget extends StatefulWidget { @override State<StatefulWidget> createState() { return _BodyState(); } } class _BodyState extends State<BodyWidget> { @override Widget build(BuildContext context) { final double width = MediaQuery.of(context).size.width; final int count = 100; return Material( child: Container( color: Colors.grey.shade200, child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Row( mainAxisSize: MainAxisSize.max, children: [ Container( color: Colors.teal, child: Text( 'Container Text ', )), Flexible( child: Container( color: Colors.blue, child: Text(' Text.Flexible Text.Flexible Text.Flexible.')), ), Flexible( child: Container( color: Colors.yellow, child: Text('Flexible Text.')), ), Flexible( child: Container( color: Colors.lightGreen, child: Text('Flexible.')), ), ], ), SizedBox( height: 80, width: width, child: ListView.builder( itemBuilder: (context, index) { return SizedBox( width: width / count, child: Column( mainAxisSize: MainAxisSize.max, children: [ Container( width: 1, height: index % 5 == 0 ? 30 : 20, color: Colors.purple, ), if (index % 5 == 0) Flexible( child: Text( '$index', style: const TextStyle(fontSize: 5), ), ), ], ), ); }, itemCount: count, scrollDirection: Axis.horizontal, ), ), ], ), ), ); } }\"]},\"277\":{\"h\":\"总结\",\"t\":[\"Expanded和Flexible默认情况下都会按照flex占据父容器剩余的可用空间，但是不同的是，Expanded会强制 child 改变大小为父容器分配的大小，而Flexible则会告诉 child，最大只能是父容器分配的大小，要是 child 想要小一些的话，也可以按照 child 的大小显示。\",\"如果改变Flexible的fit为FlexFit.tight的话，Expanded和Flexible没有差别。\"]},\"278\":{\"h\":\"Flutter Widget 简单入门\",\"t\":[\"Flutter 是 Google 提出的跨平台开发框架，使用 Dart 语言，支持 Android，IOS 系统。Flutter 一个重要的概念即是——“万物皆控件（Widget）”，像Padding,Center等都是 Widget。\",\"Widget 和 Android 中的 View 很相似但又有不同，Widget 一旦生成便“一成不变”，直到下一次因为 Widget 更改或者 state 更新而被重新创建（Flutter’s framework creates a new tree of widget instances.），而 View 则只会被drawn一次，直到invalidate方法被调用。\",\"本文主要记录一下 Flutter 中两个重要的控件：StatelessWidget 和 StatefulWidget，以及 Flutter 开发的一些基础知识。\"]},\"279\":{\"h\":\"Flutter 基础知识\",\"t\":[\"Flutter 以 Dart 开发，其工程基本的结构如下：\",\"android\",\"ios\",\"lib \",\"main.dart\",\"pubspec.yaml //Flutter 工程的配置信息\",\"Flutter 项目启动后会首先加载/lib/main.dart中的main()方法。 一个标准的 material app 的 main.dart 内容如下：\",\"import 'package:flutter/material.dart'; import './product_manager.dart'; main() => runApp(MyApp());//在 main() 方法中调用了 material 的 runApp() 方法，里面传入了要展示的 Widget——APP 的界面，相当于 Android 的 setContentView() class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData( primarySwatch: Colors.deepOrange ), home: Scaffold(//脚手架，一个预制的 APP 界面结构，也可以使用自定义 Widget appBar: AppBar( title: Text(\\\"EasyList\\\"), ), body: ProductManager(\\\"Test\\\"),//这里是自定义的控件，布局信息主要在这里展示 ), ); } }\"]},\"280\":{\"h\":\"StatelessWidget & StatefulWidget\",\"t\":[\"StatelessWidget 和 StateFulWidget 区别在于：前者一旦创建，状态便不会再更改，而后者则可以动态改变 State 从而使 flutter 改变其状态。但是两者都会在每一帧被 rebuild。\"]},\"281\":{\"h\":\"StatelessWidget\",\"t\":[\"A StatelessWidget is just what it sounds like—a widget with no state information.\",\"StatelessWidget 一旦创建便不会更改，其状态只和构造函数中的参数有关。下面是一个 StatelessWidget 示例，一般只需要重写其 build() 方法，返回要展示的控件即可：\",\"class MyWidget extends StatelessWidget { @override Widget build(BuildContext context) { return CustomerWidget();//在这里构建一个页面并返回 } }\"]},\"282\":{\"h\":\"StatefulWidget\",\"t\":[\"StatefulWidget has a State object that stores state data across frames and restores it.\",\"StatefulWidget 可以通过动态更改其包含的 State，从而使 flutter 在下一次更新界面时依据 state 更新 StateWidget，本质上还是更新了一个可以在多帧之间存活的 State，在下一帧更新控件。\",\"下面是一个 StatefulWidget 的示例：\",\"class ProductManager extends StatefulWidget { @override State<StatefulWidget> createState() { return ProductManagerState(); } } class ProductManagerState extends State<ProductManager> { @override Widget build(BuildContext context) { return CustomerWidget(); } }\",\"可以注意到 StatefulWidget 重写了createState()，而该方法返回了自定义的ProductManagerState类对象，在该类中build()方法实现和 StatelessWidget 中的方法类似，返回要展示的页面控件。\",\"两者的不同之处在于，StatefulWidget 中可以调用setState()，更改其相应的state，以便告诉 flutter 在下一次 rebuild 的时候更新 UI。\",\"StatelessWidget 要想实现动态更新其内容，可以在其外部包裹一层 StatefulWidget，通过 StatefulWidget 更改状态 state，将更改后的 state 传给 StatelessWidget，从而间接更新了 StatelessWidget 的状态。\",\"可以通过对该方法就行包装，使得在 StatelessWidget 控件中调用 StatefulWidget 控件的setState()方法，达到刷新页面的效果：\",\"// StatefulWidget void aFun(){ setState(() { // update UI }); } AStatelessWidget(aFun);// 将该方法传入 StatelessWidget 中 // StatelessWidget final Function aFun AStatelessWidget(this.aFun);// 接收传入的方法 aFun();// 执行该方法，从而实现调用 StatelessWidget 中的方法也可以刷新 UI\"]},\"283\":{\"h\":\"与 Android 的对比\"},\"284\":{\"h\":\"Intent\",\"t\":[\"Android 的 Intent 有两个主要作用：\",\"Activity 间跳转\",\"组件间传递数据\",\"Flutter 对此相应：\",\"使用 Navigator 和Routes 实现在同一个“Activity”中不同的界面间（ “screen”or“page”）跳转（push，pop），Navigator 类似于 Android 中的 Activity 栈。\",\"通过 Android 原生 Intent 组件获取到其他 App 传来的数据，然后中通过下面的方法实现 Android 和 Flutter 交互：\",\"示例代码：\",\" //Android MethodChannel(getFlutterView(), \\\"app.channel.shared.data\\\") .setMethodCallHandler(MethodChannel.MethodCallHandler() { @Override public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) { if (methodCall.method.contentEquals(\\\"getSharedText\\\")) { result.success(sharedText); sharedText = null; } } }); //Flutter class _SampleAppPageState extends State<SampleAppPage> { static const platform = const MethodChannel('app.channel.shared.data'); String dataShared = \\\"No data\\\"; @override void initState() { super.initState(); getSharedText(); } @override Widget build(BuildContext context) { return Scaffold(body: Center(child: Text(dataShared))); } getSharedText() async { var sharedData = await platform.invokeMethod(\\\"getSharedText\\\"); if (sharedData != null) { setState(() { dataShared = sharedData; }); } } }\"]},\"285\":{\"h\":\"线程\",\"t\":[\"Flutter 是单线程的，他的线程和 Android 的 UI 线程绑定，在进行网络请求，IO 操作等时，可以使用sync/await 在执行完耗时操作后，再去更新 state 刷新 UI。\",\"Since Flutter is single threaded and runs an event loop (like Node.js), you don’t have to worry about thread management or spawning background threads. If you’re doing I/O-bound work, such as disk access or a network call, then you can safely use async/await and you’re all set.\",\"loadData() async { String dataURL = \\\"https://jsonplaceholder.typicode.com/posts\\\"; http.Response response = await http.get(dataURL); setState(() { widgets = json.decode(response.body); }); }\",\"而如果有特别频繁的 cpu 计算以至于能导致 UI 挂起，可以考虑使用Isolates 利用 CPU 多核心处理任务，但是这样就不能和主线程共享数据，通过ReceivePort，SendPort等传递数据。\",\"Isolates(隔离) are separate execution threads that do not share any memory with the main execution memory heap. This means you can’t access variables from the main thread, or update your UI by calling setState(). Unlike Android threads, Isolates are true to their name, and cannot share memory (in the form of static fields, for example).\"]},\"286\":{\"h\":\"本地资源\",\"t\":[\"截止 Flutter beta 2 仍然不能直接访问 Android assets 或者其他本地资源，但是 Android 可以访问 flutter 的 assets 资源：\",\"val flutterAssetStream = assetManager.open(\\\"flutter_assets/assets/my_flutter_asset.png\\\")\",\"通过 Channel，flutter 可以间接访问 Android 资源，反之亦然。\",\"主要是通过 Channel 完成，可以称之为隧道。主要是 MethodChannel 和 MessageChannel 两种，第一种是调用方法，第二种是传递信息。首先通信的双方是 Flutter 和本地操作系统或者应用，而且方法的调用和消息的方法可以从任何一方发起，类似 RPC（远程过程调用）。\",\"作者：黄马\",\"链接：掘金 https://juejin.im/post/5b35a75e51882574ea3a25e3\",\"著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\"]},\"287\":{\"h\":\"生命周期\",\"t\":[\"Flutter 生命周期没有 Android 中那么“重要”，可以重写 didChangeAppLifecycleState() 监听。\",\"inactive — 应用处于非活动状态，不接受输入。iOS\",\"paused — 应用在后台运行，不可见，不接受输入。类似 Android 的onPause()\",\"resumed — 应用可见，并接受输入。类似 Android 的onPostResume()\",\"suspending — 应用请求暂停。类似 Android 的onStop()\"]},\"288\":{\"h\":\"布局\",\"t\":[\"Flutter 有布局 Widget 如：\",\"Column 列\",\"Row 行\",\"Stack 左上角堆积，类似 FrameLayout\"]},\"289\":{\"h\":\"点击事件\",\"t\":[\"FLutter 中的“onClick()”: onPressed,onTap等等。\",\"添加点击事件，在 Widget 外面添加一个GestureDetectorWidget：\",\"GestureDetector( child: Padding( padding: EdgeInsets.all(10.0), child: Text(\\\"Row $i\\\")), onTap: () { print('row tapped'); }, );\"]},\"290\":{\"h\":\"参考链接\",\"t\":[\"Flutter Tutorial for Beginners - Build iOS and Android Apps with Google's Flutter & Dart\",\"Flutter for android\",\"Flutter 访问本地资源\"]},\"291\":{\"h\":\"Flutter 中的异常处理\"},\"292\":{\"h\":\"说明\",\"t\":[\"FLutter中的错误不会导致应用程序奔溃，只会终止执行出错代码之后的逻辑，在导致Widget.build()返回为null的错误会导致Widget构建失败，并返回红底黄字的错误原因Widget（在 Release 模式则会显示为灰底区域）；一般来说，Flutter 中的错误都会被FlutterError.onError捕获并处理；对于异步方法产生异常等Flutter框架没有捕获的情况，会交由当前代码所在的Zone处理（这些异常可以使用runZonedGuarded捕获并处理）。\",\"为什么 flutter 触发异常的时候不会崩溃？ 这个和 flutter 的消息循环机制有关，任务分两种，一个是微任务 microtask，一个是事件 event，他们有自己的队列，每个任务是相互独立的，一旦某个任务触发异常，也就是导致这个任务后续代码无法执行，并不会影响其他任务执行\",\"本文基于 Flutter (Channel stable, 2.2.3)\"]},\"293\":{\"h\":\"详细说明\",\"t\":[\"Flutter 中的错误处理分为以下几种：\"]},\"294\":{\"h\":\"\",\"t\":[\"对于普通的错误，可以通过try...catch来捕获：\",\" try { var list = [1, 2]; var three = list[3]; } on RangeError catch (e) { print(\\\"这里是捕获 RangeError 类型的异常 $e\\\"); } catch (e) { print(\\\"这里是兜底的捕获异常 $e\\\"); } finally { print(\\\"这里是无论如何都会执行的代码\\\"); }\",\"对于，异步异常，可以使用await等待其执行完毕，将其变为同步任务，否则无法则捕获。\"]},\"295\":{\"h\":\"\",\"t\":[\"当在Widget构建过程中出现错误，导致build()方法返回null，Flutter框架会调用ErrorWidget.builder返回一个Widget替代出错的Widget。\",\"默认情况下，debug模式返回的是红底黄字的错误提示，而release模式返回的是灰色Widget。\",\"可以在RunApp方法中替换这个默认的错误界面：\",\"runApp(MaterialApp( home: Scaffold( appBar: AppBar(), body: BodyWidget(), ), builder: (context, widget) { // Widget 在 Build 时出错的话，展示此 Widget， // 如果不定义的话，debug 下为红底黄字错误信息，release 会显示为灰色布局 // errorDetails 在 release 模式下为空 ErrorWidget.builder = (FlutterErrorDetails errorDetails) { return MainErrorWidget(widget, errorDetails); }; return widget ?? Container(); }, ));\",\"上述代码中的MainErrorWidget是一个自定义的展示错误信息的页面。\",\"MainErrorWidget的一种实现方式\",\"class MainErrorWidget extends StatelessWidget { Widget? parentWidget; FlutterErrorDetails errorDetails; MainErrorWidget(this.parentWidget, this.errorDetails); @override Widget build(BuildContext context) { print(\\\"3. 布局出现错误，展示错误页面,此处错误在release中也会调用FlutterError.onError\\\"); Widget error = Card( child: SingleChildScrollView( child: Container( padding: const EdgeInsets.all(20), color: Colors.green, child: Text( '布局出现错误，以下是错误信息:\\\\n$errorDetails', style: TextStyle(fontSize: 10, color: Colors.white), ), ), ), ); if (parentWidget is Scaffold || parentWidget is Navigator) { debugPrint( \\\"widget${parentWidget?.key?.toString()} ($parentWidget) is Scaffold ${parentWidget is Scaffold} or Navigator ${parentWidget is Navigator}\\\"); // error = Container(child: error); } return error; } }\",\"需要注意的是，错误Widget在Debug和Release模式下有一些区别：\",\"Debug模式下ErrorWidget.builder会返回错误详细信息FlutterErrorDetails ，Release下则不会；\",\"Debug模式下，Widget等出错会打印Exception caught by widgets library ... 等提示并输出错误堆栈信息，但是Release模式下不会；\",\"Debug模式下，出错不会调用FlutterError.onError，Release模式下会。\"]},\"296\":{\"h\":\"\",\"t\":[\"上述几种情况都没有处理的，被 Flutter 框架引起的异常，会在这里被处理。\",\"在Flutter 2.2.3中，Debug模式下如onPressed中的未捕获错误等都会被 Widget 等捕获，而不会走到这里来，在Release模式下则会调用FlutterError.onError。\",\"在这里可以对错误进行处理，比如输出到控制台、交给 Zone 统一处理、直接结束掉 APP 等：\",\"FlutterError.dumpErrorToConsole(details); 输出到控制台\",\"exit(1); 退出 APP\",\"Zone.current.handleUncaughtError(details.exception, details.stack); 交给 Zone 统一处理\",\"defaultOnError?.call(details); 自己处理完异常后，也要把异常向上抛【推荐】，其中defaultOnError 可以预先缓存final defaultOnError = FlutterError.onError;\"]},\"297\":{\"h\":\"\",\"t\":[\"上述几种情况都没有处理的异常，会被发送到这里处理，可以类比为Android中的Thread.UncaughtExceptionHandler。\",\"runZonedGuarded(() async { runApp(...); }, (Object error, StackTrace stack) { // 没有被 Flutter 捕获的错误，全局未捕获异常处理，类似于 Android 的 Thread.UncaughtExceptionHandler /// 比如异步的方法 print(\\\"2. runZonedGuarded.onError $error\\\"); });\",\"Zone 可以理解为一个沙盒，其中的代码出错，包括异步的都可以捕获到。但是如果是另外一个沙盒中的错误则无法处理。\"]},\"298\":{\"h\":\"参考文章\",\"t\":[\"Flutter 官网异常处理\",\"Flutter 异常处理\"]},\"299\":{\"c\":[\"flutter\"]},\"300\":{\"h\":\"Flutter 动画分析之 AnimatedWidget&ImplicitlyAnimatedWidget\",\"t\":[\"本文讨论的 Flutter 动画主要限定在：随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态 这一范围。\",\"在之前的文章中，我们将 Flutter 中动画的实现分为 底层实现 和 封装好的 Widget 两大部分，目前已经分析了底层实现的部分：\",\"AnimationController\",\"Tween&Curve\",\"而 Flutter 封装好的动画 Widget 主要分为两大类：\",\"Flutter 中与动画有关的 Widget\",\"ImplicitlyAnimatedWidget 隐式动画，关于动画的开始、停止等都封装在 Widget 内部，只要 Widget 前后传入的值不同 便可以自动从 old 渐变到 new，内置的这些类主要以 AnimatedFoo 命名。\",\"AnimatedWidget，显式动画，需要使用者自己创建 Animation（一般是 AnimationController）并通过其 主动管理动画，此类 Widget 主要是监听 AnimationController 的值并刷新 Widget 的内容。\",\"此类 Widget 主要有三种使用方式：\",\"继承 AnimatedWidget\",\"使用 AnimatedBuilder\",\"使用各种内置的 AnimatedWidget 子类，一般以 FooTransition 命名。\",\"对于 Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图：\",\"如何实现 Flutter 中的动画\",\"简单来说，Flutter 有一些内置的动画，在要写动画的时候，可以依次考虑（实现程度由易到难）：\",\"AnimatedFoo 参考文章，设置新的状态，这些控件会自动从之前的状态切换到新状态\",\"TweenAnimationBuilder 参考文章，将任意属性在 Tween 指定的范围变化，和上面的 AnimatedFoo 都是属于Implicitly animated widgets（隐式动画，由系统控件控制动画）。\",\"FooTranslation\",\"AnimatedBuilder / AnimatedWidget\",\"CustomPainter\",\"本文将对 Flutter 内置封装好的动画相关的 Widget 的实现和用法进行简单分析。\"]},\"301\":{\"h\":\"源码分析\",\"t\":[\"按照上述分析，Flutter 中的动画 Widget 可以大体分为 隐式动画 和 显式动画 两种。\"]},\"302\":{\"h\":\"ImplicitlyAnimatedWidget\",\"t\":[\"ImplicitlyAnimatedWidgets (and their subclasses) automatically animate changes in their properties whenever they change.\",\"隐式动画内部持有 AnimationController 以管理动画，默认没有动画，当使用不同的值重新构建 Widget 的时候，会执行动画，使用者只能设置 Duration 和 Curve，如果想要更深入的控制动画（比如暂停动画）则应该使用 AnimatedWidget。\",\"ImplicitlyAnimatedWidget 主要分为 2 大类：\",\"TweenAnimationBuilder, which animates any property expressed by a Tween to a specified target value.\",\"AnimatedFoo \",\"AnimatedAlign, which is an implicitly animated version of Align.\",\"AnimatedContainer, which is an implicitly animated version of Container.\",\"AnimatedDefaultTextStyle, which is an implicitly animated version of DefaultTextStyle.\",\"AnimatedScale, which is an implicitly animated version of Transform.scale.\",\"AnimatedRotation, which is an implicitly animated version of Transform.rotate.\",\"AnimatedSlide, which implicitly animates the position of a widget relative to its normal position.\",\"AnimatedOpacity, which is an implicitly animated version of Opacity.\",\"AnimatedPadding, which is an implicitly animated version of Padding.\",\"AnimatedPhysicalModel, which is an implicitly animated version of PhysicalModel.\",\"AnimatedPositioned, which is an implicitly animated version of Positioned.\",\"AnimatedPositionedDirectional, which is an implicitly animated version of PositionedDirectional.\",\"AnimatedTheme, which is an implicitly animated version of Theme.\",\"AnimatedCrossFade, which cross-fades between two given children and animates itself between their sizes.\",\"AnimatedSize, which automatically transitions its size over a given duration.\",\"AnimatedSwitcher, which fades from one widget to another.\",\"我们简单分析一下 ImplicitlyAnimatedWidget 和 TweenAnimationBuilder：\",\"abstract class ImplicitlyAnimatedWidget extends StatefulWidget { const ImplicitlyAnimatedWidget({ Key? key, this.curve = Curves.linear, required this.duration, this.onEnd, }) : super(key: key); /// The curve to apply when animating the parameters of this container. final Curve curve; /// The duration over which to animate the parameters of this container. final Duration duration; /// Called every time an animation completes. /// /// This can be useful to trigger additional actions (e.g. another animation) /// at the end of the current animation. final VoidCallback? onEnd; @override ImplicitlyAnimatedWidgetState<ImplicitlyAnimatedWidget> createState(); }\",\"ImplicitlyAnimatedWidget.createState()必须返回 ImplicitlyAnimatedWidgetState 或者 AnimatedWidgetBaseState 及其子类。\",\"ImplicitlyAnimatedWidget 作为 StatefulWidget，它的主要逻辑在 ImplicitlyAnimatedWidgetState 中：\",\"abstract class ImplicitlyAnimatedWidgetState<T extends ImplicitlyAnimatedWidget> extends State<T> with SingleTickerProviderStateMixin<T> { // 隐式动画内部维护着自己的 AnimationController AnimationController get controller => _controller; late final AnimationController _controller = AnimationController( duration: widget.duration, debugLabel: kDebugMode ? widget.toStringShort() : null, vsync: this, ); // 驱动此隐式动画的 animation Animation<double> get animation => _animation; late Animation<double> _animation = _createCurve(); CurvedAnimation _createCurve() { return CurvedAnimation(parent: _controller, curve: widget.curve); } }\",\"ImplicitlyAnimatedWidgetState 中，根据传入的 Duration 和 Curve，创建并持有了 AnimationController 和 Animation<double> 用于驱动隐式动画。\"]},\"303\":{\"h\":\"initState\",\"t\":[\"在ImplicitlyAnimatedWidgetState.initState方法中：\",\"监听_controller的状态，当AnimationStatus.completed时回调ImplicitlyAnimatedWidget.onEnd方法；\",\"此外还调用了_constructTweens()遍历 Tween，并调用由子类实现的forEachTween()方法（子类在此方法内部，获取到对应的 Tween，比如 Padding，从而在监听到_controller变化并触发 rebuilt 时使用Animatable.evaluate()方法获取并显示最新的属性，实现动画效果）；\",\"最后还调用了didUpdateTweens()方法通知子类 Tweens 发生变化了。\"]},\"304\":{\"h\":\"_constructTweens\",\"t\":[\"_constructTweens()方法会创建一个 TweenVisitor<dynamic>并传给子类 forEachTween()方法，子类可以使用其获取对应的 Tween 对象。\",\"_constructTweens()则在此过程中，使用_shouldAnimateTween()得知了子类中是否有 Tween 可以开始动画——shouldStartAnimation。\",\" bool _constructTweens() { bool shouldStartAnimation = false; // forEachTween 方法由子类实现 forEachTween((Tween<dynamic>? tween, dynamic targetValue, TweenConstructor<dynamic> constructor) { if (targetValue != null) { tween ??= constructor(targetValue); // 判断 targetValue 是否不等于 Tween.end if (_shouldAnimateTween(tween, targetValue)) shouldStartAnimation = true; } else { tween = null; } return tween; }); return shouldStartAnimation; } bool _shouldAnimateTween(Tween<dynamic> tween, dynamic targetValue) { return targetValue != (tween.end ?? tween.begin); }\"]},\"305\":{\"h\":\"didUpdateWidget\",\"t\":[\"当 ImplicitlyAnimatedWidget 被重新创建时，会调用 ImplicitlyAnimatedWidgetState.didUpdateWidget 方法。\",\"在此方法中，除了检查并更新 Curve、Duration、Tween 之外，最重要的是使用 AnimationController.forward() 开启了动画。也就是说——“ImplicitlyAnimatedWidget 第一次插入 Widget Tree 时没有动画，当再次被更新时会触发动画”。\",\" void didUpdateWidget(T oldWidget) { super.didUpdateWidget(oldWidget); // 如果 Curve 变化则创建新的 CurveAnimation if (widget.curve != oldWidget.curve) { (_animation as CurvedAnimation).dispose(); _animation = _createCurve(); } // 更新 duration _controller.duration = widget.duration; if (_constructTweens()) { // 如果 Tween 可以开始，则更新其 begin 和 end 值 forEachTween((Tween<dynamic>? tween, dynamic targetValue, TweenConstructor<dynamic> constructor) { _updateTween(tween, targetValue); return tween; }); // 当 Widget 更新后，开始动画 _controller ..value = 0.0 ..forward(); didUpdateTweens(); } }\"]},\"306\":{\"h\":\"forEachTween\",\"t\":[\"子类必须实现此方法，使用传入的 TweenVisitor 创建自己对应的 Tween。\",\"void forEachTween(TweenVisitor<dynamic> visitor);\"]},\"307\":{\"h\":\"didUpdateTweens\",\"t\":[\"当 Tween 变化时会调用此方法通知子类，子类（可选）可以实现此方法。\",\"到目前为止，我们的 AnimationController 已经控制动画开始执行，但是因为没有监听 AnimationController.value 的变化，所以还不能自动触发 ImplicitlyAnimatedWidgetState.build() 方法。\",\"为了实现动画效果，子类可以选择自己主动监听 AnimationController；或者，继承 AnimatedWidgetBaseState：\",\"abstract class AnimatedWidgetBaseState<T extends ImplicitlyAnimatedWidget> extends ImplicitlyAnimatedWidgetState<T> { @override void initState() { super.initState(); // 注意此处监听了 AnimationController 的变化并自动触发 setState controller.addListener(_handleAnimationChanged); } void _handleAnimationChanged() { setState(() { /* The animation ticked. Rebuild with new animation value */ }); } }\",\"ImplicitlyAnimatedWidget 的子类主要实现 AnimatedWidgetBaseState/ImplicitlyAnimatedWidgetState 的forEachTween()和build()方法即可。前者用于生成 Widget 所需的 Tween；后者则使用生成的 Tween<T>的evaluate(animation)方法计算对应的属性并展示。\",\"以 AnimatedPadding 为例，它继承自 ImplicitlyAnimatedWidget，创建的_AnimatedPaddingState 继承自 AnimatedWidgetBaseState<AnimatedPadding>：\",\"class _AnimatedPaddingState extends AnimatedWidgetBaseState<AnimatedPadding> { EdgeInsetsGeometryTween? _padding; @override void forEachTween(TweenVisitor<dynamic> visitor) { // 创建所需要的 Tween _padding = visitor(_padding, widget.padding, (dynamic value) => EdgeInsetsGeometryTween(begin: value as EdgeInsetsGeometry)) as EdgeInsetsGeometryTween?; } // 当 AnimationController 监听的 Ticker 时执行 setState 触发 rebuilt @override Widget build(BuildContext context) { return Padding( // 使用 CurveAnimation 计算当前对应的 padding 值 padding: _padding! .evaluate(animation) .clamp(EdgeInsets.zero, EdgeInsetsGeometry.infinity), child: widget.child, ); } // ... }\",\"上述分析是继承 ImplicitlyAnimatedWidget 实现隐式动画的常用流程，Flutter 中内置的 AnimatedFoo 动画都是类似实现。\"]},\"308\":{\"h\":\"TweenAnimationBuilder\",\"t\":[\"ImplicitlyAnimatedWidget 的子类（以 AnimatedFoo 命名的一众子类）提供了常见的动画效果，但是如果有特殊的动画效果需要实现，除了直接继承 ImplicitlyAnimatedWidget 之外，还可以使用 TweenAnimationBuilder 并传入 Tween 来实现：\",\" return TweenAnimationBuilder<double>( tween: Tween<double>(begin: 0, end: targetValue), duration: const Duration(seconds: 1), builder: (BuildContext context, double size, Widget? child) { return IconButton( ... ); }, child: const Icon(Icons.aspect_ratio), );\",\"当 Widget 首次 build 的时候就会触发动画从 Tween.begin 过渡到 Tween.end；当再次提供一个有新 end 的 Tween 也可以随时触发新动画（新动画从动画当前值开始）。\",\"需要注意：\",\"传入到 TweenAnimationBuilder 中的 Tween 被其持有（可能修改）,所以不应当再操作它；\",\"当动画执行完毕会调用 TweenAnimationBuilder.onEnd 方法；\",\"为了性能，应当将不需要每次更新的 subtree 传入到 TweenAnimationBuilder.child 中避免重绘。\",\"和其他 ImplicitlyAnimatedWidget 的子类一样，TweenAnimationBuilder 的主要逻辑也在继承自 AnimatedWidgetBaseState 的_TweenAnimationBuilderState 中：\",\"class _TweenAnimationBuilderState<T extends Object?> extends AnimatedWidgetBaseState<TweenAnimationBuilder<T>> { Tween<T>? _currentTween; @override void initState() { // 内部持有使用者传入的 Tween _currentTween = widget.tween; _currentTween!.begin ??= _currentTween!.end; super.initState(); if (_currentTween!.begin != _currentTween!.end) { // 如果 Tween 有效则开始动画 controller.forward(); } } @override void forEachTween(TweenVisitor<dynamic> visitor) { assert( widget.tween.end != null, 'Tween provided to TweenAnimationBuilder must have non-null Tween.end value.', ); _currentTween = visitor(_currentTween, widget.tween.end, (dynamic value) { assert(false); throw StateError('Constructor will never be called because null is never provided as current tween.'); }) as Tween<T>?; } @override Widget build(BuildContext context) { // 使用者实现 builder 创建对应的 Widget return widget.builder(context, _currentTween!.evaluate(animation), widget.child); } }\",\"使用时需要注意，只有传入 TweenAnimationBuilder 的 Tween 是一个新的、并且 end 值和之前不一样的才会触发动画。如果 end 值一样则无动画、如果不是新的则 builder 的内容只会突然变化为 end 值对应状态而无动画。\"]},\"309\":{\"h\":\"AnimatedWidget\",\"t\":[\"之前分析的 TweenAnimationBuilder 以及 ImplicitlyAnimatedWidget 的其他子类，基本上都只能定义动画的 Tween、Duration、Curve 等，动画的开始结束动都由这些 Widget 内部控制。\",\"如果需要手动主动控制动画，可以选择使用 显式动画 —— AnimatedWidget 及其子类：\",\"其同样也分为 2 大类：\",\"AnimatedBuilder, which is useful for complex animation use cases and a notable exception to the naming scheme of AnimatedWidget subclasses.\",\"FooTransition 子类 \",\"AlignTransition, which is an animated version of Align.\",\"DecoratedBoxTransition, which is an animated version of DecoratedBox.\",\"DefaultTextStyleTransition, which is an animated version of DefaultTextStyle.\",\"PositionedTransition, which is an animated version of Positioned.\",\"RelativePositionedTransition, which is an animated version of Positioned.\",\"RotationTransition, which animates the rotation of a widget.\",\"ScaleTransition, which animates the scale of a widget.\",\"SizeTransition, which animates its own size.\",\"SlideTransition, which animates the position of a widget relative to its normal position.\",\"FadeTransition, which is an animated version of Opacity.\",\"AnimatedModalBarrier, which is an animated version of ModalBarrier.\",\"AnimatedWidget 比 ImplicitlyAnimatedWidget 简单许多，其接受一个 Listenable 对象，在_AnimatedState 中监听其并触发 rebuilt。\",\"abstract class AnimatedWidget extends StatefulWidget { const AnimatedWidget({ Key? key, required this.listenable, }) : assert(listenable != null), super(key: key); // Commonly an [Animation] or a [ChangeNotifier]. final Listenable listenable; // 提供了 build 方法供子类根据不同的状态创建 Widget @protected Widget build(BuildContext context); }\",\"AnimatedWidget.listenable通常是 AnimationController，当然也可以是其他实现 Listenable 的类（including ChangeNotifier and ValueNotifier）。\"]},\"310\":{\"h\":\"_AnimatedState\",\"t\":[\"AnimatedWidget 的主要逻辑在对应的_AnimatedState 中：\",\"class _AnimatedState extends State<AnimatedWidget> { @override void initState() { super.initState(); // 监听 listenable，调用 setState 从而触发 rebuilt widget.listenable.addListener(_handleChange); } @override void didUpdateWidget(AnimatedWidget oldWidget) { super.didUpdateWidget(oldWidget); // 如果 listenable 改变了则重写添加 listener if (widget.listenable != oldWidget.listenable) { oldWidget.listenable.removeListener(_handleChange); widget.listenable.addListener(_handleChange); } } @override void dispose() { widget.listenable.removeListener(_handleChange); super.dispose(); } void _handleChange() { setState(() { // The listenable's state is our build state, and it changed already. }); } // 注意这里使用了子类实现的 Widget.build 方法创建 Widget @override Widget build(BuildContext context) => widget.build(context); }\",\"可以看到，相对于隐式动画 ImplicitlyAnimatedWidget，显示动画 AnimatedWidget 的逻辑要简单的多，只是监听传入的 Listenable 并触发 rebuilt 即可。对于动画的控制则由 Listenable（通常是 AnimationController）处理。\",\"也就是说，显示动画 AnimatedWidget 只是替子类做了监听/移除监听 Listenable 的值变化，并触发 rebuilt 的工作，如何获取变化的值，以及展示对应的 Widget 则需要子类自己处理。\",\"他的子类 FooTransition 实现逻辑也比较简单，只需要在在 Widget.build 根据不同的状态创建创建不同属性的 Widget 即可：\",\"class RotationTransition extends AnimatedWidget { const RotationTransition({ Key? key, required Animation<double> turns, this.alignment = Alignment.center, this.filterQuality, this.child, }) : assert(turns != null), // AnimatedWidget 会监听 turns 的值变化，自动触发 rebuilt， // 从而调用此 build() 方法更新 Widget super(key: key, listenable: turns); Animation<double> get turns => listenable as Animation<double>; final FilterQuality? filterQuality; final Alignment alignment; final Widget? child; @override Widget build(BuildContext context) { return Transform.rotate( // 这里根据 turns 的值计算当前的角度 angle: turns.value * math.pi * 2.0, alignment: alignment, filterQuality: filterQuality, child: child, ); } }\"]},\"311\":{\"h\":\"AnimatedBuilder\",\"t\":[\"一般来说，Flutter 内置的以 FooTransition 命名的 AnimatedWidget 的子类可以满足基本的需求，但是如果想要实现更复杂的效果，除了直接继承 AnimatedWidget 之外，还可以使用 AnimatedBuilder 实现丰富的动画：\",\"AnimatedBuilder( animation: _controller, child: Container( ... ), builder: (BuildContext context, Widget? child) { return Transform.rotate( angle: _controller.value * 2.0 * math.pi, child: child, ); }, )\",\"而 AnimatedBuilder 的实现也比较简单：\",\"class AnimatedBuilder extends AnimatedWidget { /// Creates an animated builder. /// /// The [animation] and [builder] arguments must not be null. const AnimatedBuilder({ Key? key, required Listenable animation, required this.builder, this.child, }) : assert(animation != null), assert(builder != null), super(key: key, listenable: animation); /// Called every time the animation changes value. final TransitionBuilder builder; /// The child widget to pass to the [builder]. /// /// 可选，如果 AnimatedBuilder 要创建的一部分内容和动画无关，为了优化性能， /// 可以将其传给 child，并在 builder 中直接复用 final Widget? child; @override Widget build(BuildContext context) { return builder(context, child); } }\"]},\"312\":{\"h\":\"总结\",\"t\":[\"ImplicitlyAnimatedWidget 隐式动画，内部创建并监听 AnimationController 以维护动画，控制动画的开始和结束，用户可以通过传入 Duration、Curve、Tween 等决定动画的时长、曲线、开始和结束值等，当动画相关的属性变化时，隐式动画会自动播放，使用者不可以直接控制动画。 Flutter 内置的隐式动画为 TweenAnimationBuilder 和 AnimatedFoo。\",\"AnimatedWidget 显式动画，接受 Listenable（通常是 AnimationController）并监听其值变化，以触发 Widget 重新 build，其子类中一般会监听 Listenable 的值并计算设置 Widget 对应的属性。使用者需要负责创建、控制 Listenable 从而控制动画播放。Flutter 内置的显式动画为 AnimatedBuilder 和 FooTransition。\",\"在使用 Flutter 实现Widget 动画时，可以按照以下顺序选择实现方式：\",\"AnimatedFoo，选择内置的隐式动画，以实现当 Padding、Alignment 等属性变化时自动渐变到新值的动画效果。\",\"TweenAnimationBuilder/继承 ImplicitlyAnimatedWidget，当上一步无法满足需求时，可以考虑进一步自定义实现隐式动画。\",\"FooTransition，如果不止要展示动画，还希望能够控制动画开始、结束，就使用内置的显式动画结合自己创建的 AnimationController 实现动画。\",\"AnimationBuilder/AnimatedWidget，如果没有满足条件的内置显式动画，可以使用自定义实现显式动画。\",\"CustomPainter，如果上述方法仍然无法满足动画需求，可以考虑使用 CustomPainter 自己绘制动画。\"]},\"313\":{\"h\":\"参考资料\",\"t\":[\"动画效果介绍 flutter.cn\",\"ImplicitlyAnimatedWidget\",\"AnimatedWidget\"]},\"314\":{\"h\":\"Flutter 动画分析之 AnimationController\",\"t\":[\"本文讨论的 Flutter 动画主要限定在：随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态 这一范围。\",\"Flutter 中关于动画的类有很多，为了便于分析，将其分为两大类：\",\"Flutter 框架底层实现动画的各个类，比如 AnimationController、Ticker、Tween、Curve 等\",\"基于底层实现，提供进一步封装的 Flutter 动画相关的 Widget 类，比如 AnimatedWidget、ImplicitlyAnimatedWidget 和他们的子类。\",\"他们的关系如下：\",\"AnimationController 通过 Ticker 监听 Flutter 屏幕帧刷新：\",\"Flutter 中 AnimationController 与 Ticker 关系\",\"每一帧刷新后，AnimationController 监听并根据 Duration 等计算出当前的 Animation.value； 此外也可以通过 Tween 将 double 类型转化为其他的类型比如 Offset 等； 上述两种方式中 value 都是随着时间线性变化，而 Curve 可以与 CurveTween、AnimationController 等结合使 value 实现非线性的变化。\",\"Flutter 各种动画底层类关系\",\"当随着时间变化，计算出当前的 Animation.value 时，便可以根据此值修改 Flutter Widget 的各个属性，从而实现动画的视觉效果。\",\"Flutter 中与动画有关的 Widget\",\"从上图可以看到，Flutter 提供的动画 Widget 主要分为两大类：\",\"ImplicitlyAnimatedWidget 隐式动画，关于动画的开始、停止等都封装在 Widget 内部，只要 Widget 前后传入的值不同便可以自动从 old 渐变到 new，内置的这些类主要以 AnimatedFoo 命名。\",\"AnimatedWidget，显式动画，需要使用者自己创建 Animation（一般是 AnimationController）并通过其管理动画，此类 Widget 主要是监听 AnimationController 的值并刷新 Widget 的内容。\",\"此类 Widget 主要有三种使用方式：\",\"继承 AnimatedWidget\",\"使用 AnimatedBuilder\",\"使用各种内置的 AnimatedWidget 子类，一般以 FooTransition 命名。\",\"对于 Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图：\",\"如何实现 Flutter 中的动画\",\"简单来说，Flutter 有一些内置的动画，在要写动画的时候，可以依次考虑（实现程度由易到难）：\",\"AnimatedFoo 参考文章，设置新的状态，这些控件会自动从之前的状态切换到新状态\",\"TweenAnimationBuilder 参考文章，将任意属性在 Tween 指定的范围变化，和上面的 AnimatedFoo 都是属于Implicitly animated widgets（隐式动画，由系统控件控制动画）。\",\"FooTranslation\",\"AnimatedBuilder / AnimatedWidget\",\"CustomPainter\",\"本文主要分析 AnimationController 及其相关类。\"]},\"315\":{\"h\":\"源码分析\",\"t\":[\"AnimationController 是 Flutter 中动画的基石，它继承自 Animation，根据不同的方法调用创建对应的 Simulation 并开始监听传入的 Ticker；\",\"每当 Flutter 中帧刷新时，从_simulation 中获取当前 Animation._value 并对 listener 发出通知；\",\"这样需要使用 Animation.value 的各个 Widget 便可以根据其值修改自身属性，实现动画视觉效果。\"]},\"316\":{\"h\":\"Animation\",\"t\":[\"根据上述分析，我们首先来看一下 Animation 类：\",\"An animation with a value of type T\",\"Animation 主要的作用是持有 value 和 status，并允许其他对象监听二者的变化。\",\"abstract class Animation<T> extends Listenable implements ValueListenable<T> { /// The current value of the animation. T get value; /// The current status of this animation. AnimationStatus get status; }\",\"Animation 继承自 Listenable，实现 ValueListenable 接口，其他类可以通过 addListener/removeListener 或者 addStatusListener/removeStatusListener 监听 Animation 的 value 或者 status 变化。\",\"Animation 共有 4 种状态：dismissed、forward、reverse、completed。\",\"除此之外，Animation.drive 方法可以创建一个新的将传入的 Animatable 应用到自身的 Animation。\",\" @optionalTypeArgs Animation<U> drive<U>(Animatable<U> child) { assert(this is Animation<double>); // 通过 Animatable.transform 将此 Animation.value 的值从 double 转化为 U return child.animate(this as Animation<double>); }\",\"也就是说，提供了将 Animation<double> 转化为 Animation<U> 类型的方法。\"]},\"317\":{\"h\":\"其他子类\",\"t\":[\"除了后面要详细分析的 AnimationController 之外，Animation 还有如下子类：\",\"class\",\"说明\",\"AlwaysStoppedAnimation\",\"永远停留在指定值的 animation\",\"ProxyAnimation\",\"代理 Animation，适用于动画可能会变化的情况，先使用 ProxyAnimation 应用一个 Animation，然后再修改为其他 Animation（不用手动添加移除 listener）\",\"ReverseAnimation\",\"返回和当前 animation 反方向的 Animation\",\"CurvedAnimation\",\"可以为传入的 animation 使用 Curve 的 animation，适用于将原先线性变化的 Animation 改为非线性的\",\"TrainHoppingAnimation\",\"监听传入的两个 Animation<double>，当第二个 Animation 的值超过第一个 Animation 的值时自动切换到第二个并回调 onSwitchedTrain。如果一开始两个 Animation 就在同一个值，则切换到第二个并不会调用 onSwitchedTrain。\",\"CompoundAnimation\",\"可以组合多个 Animation<T>的接口，当 Animation<T> next 处于运动状态时返回 next 的状态，否则返回 Animation<T> first 的状态。\",\"对于上述的 CompoundAnimation，子类只需重写 double get value 方法即可，其有三个子类：\",\"AnimationMean 返回 first 和 next 值和的二分之一，值为 double\",\"AnimationMax<T extends num> 返回 first 和 next 中最大值\",\"AnimationMin<T extends num> 返回 first 和 next 中最小值\"]},\"318\":{\"h\":\"AnimationController\",\"t\":[\"A controller for an animation.\",\"尽管有各种子类，但 Animation 最常用的子类是 AnimationController，使用者可以用它来控制、监听动画、创建其他动画。\",\"class AnimationController extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin { }\"]},\"319\":{\"h\":\"构造方法\",\"t\":[\"AnimationController 有两种构造方法，这两种构造方法主要会初始化以下变量：\",\"double value 当前值\",\"Duration? duration,reverseDuration 动画正向、反向运行的时长，初始化时可以为 null，但在实际开始动画之前，至少保证 duration 不为 null\",\"double lowerBound,double upperBound 当 value 触达此值时，animation 分别被认为是 dismissed、completed\",\"Ticker? _ticker 由构造方法中必传的 TickerProvider vsync 创建\",\"他的两个构造方法分别是：\",\"AnimationController()\",\"默认构造方法，double lowerBound,double upperBound 默认分别为 0.0，1.0\",\"AnimationController.unbounded()\",\"不限制 value 值的构造方法，double lowerBound,double upperBound 默认分别为 double.negativeInfinity，double.infinity。适用于没有预设编辑的物理模拟动画。\",\"在这两个构造方法内部，都会通过_ticker = vsync.createTicker(_tick)创建_ticker，并保证当_ticker 回调时执行AnimationController._tick()方法。\",\"这里的 TickerProvider 主要有 2 种：\",\"SingleTickerProviderStateMixin 适用于 State 中只有一个 AnimationController 的情况，性能更好\",\"TickerProviderStateMixin 适用于 State 生命周期内有多个 AnimationController 的情况\",\"除了从 Animation 继承的方法外，AnimationController 还提供了如下方法，用于操纵动画：\",\"操纵从double? from正向/反向开始动画：\",\"TickerFuture forward({ double? from })\",\"TickerFuture reverse({ double? from })\",\"操纵正向/反向开始朝向double target开始动画，此类动画还可以改变Duration和Curve：\",\"TickerFuture animateTo(double target, { Duration? duration, Curve curve = Curves.linear })\",\"TickerFuture animateBack(double target, { Duration? duration, Curve curve = Curves.linear })\",\"上述四种方法，内部都是通过 AnimationController._animateToInternal()方法实现，而此方法内部又是执行 AnimationController._startSimulation()，除此之外，还有以下几类方法内部也是基于_startSimulation() 方法实现，主要区别在于不同方法方法创建了不同的 Simulation：\",\"TickerFuture repeat({ double? min, double? max, bool reverse = false, Duration? period })\",\"TickerFuture fling({ double velocity = 1.0, SpringDescription? springDescription, AnimationBehavior? animationBehavior })\",\"TickerFuture animateWith(Simulation simulation)\"]},\"320\":{\"h\":\"_startSimulation\",\"t\":[\"AnimationController._startSimulation()方法是其实现动画的基石，其内部主要是开启了_ticker 并发出通知：\",\"TickerFuture _startSimulation(Simulation simulation) { assert(simulation != null); assert(!isAnimating); _simulation = simulation; _lastElapsedDuration = Duration.zero; _value = simulation.x(0.0).clamp(lowerBound, upperBound); // 开始 ticker final TickerFuture result = _ticker!.start(); _status = (_direction == _AnimationDirection.forward) ? AnimationStatus.forward : AnimationStatus.reverse; _checkStatusChanged(); return result; }\",\"_ticker.start()方法最终通过SchedulerBinding.instance.scheduleFrameCallback()方法监听 Flutter Framework 的帧刷新，并回调 AnimationController._tick 方法\"]},\"321\":{\"h\":\"_tick\",\"t\":[\"在此方法内部根据当前时间和_simulation 获取_value 并发出通知。\",\" void _tick(Duration elapsed) { _lastElapsedDuration = elapsed; final double elapsedInSeconds = elapsed.inMicroseconds.toDouble() / Duration.microsecondsPerSecond; assert(elapsedInSeconds >= 0.0); // 通过_simulation 获取当前动画的_value _value = _simulation!.x(elapsedInSeconds).clamp(lowerBound, upperBound); // 如果动画已经结束了，就停止监听 if (_simulation!.isDone(elapsedInSeconds)) { _status = (_direction == _AnimationDirection.forward) ? AnimationStatus.completed : AnimationStatus.dismissed; stop(canceled: false); } notifyListeners(); _checkStatusChanged(); }\"]},\"322\":{\"h\":\"其他方法\",\"t\":[\"void resync(TickerProvider vsync) 使用 vsync 重新创建新的_ticker\",\"void stop({ bool canceled = true }) 停止动画，不会触发通知，默认标记动画为 canceled\",\"void dispose() 释放资源，动画被标记为 canceled\"]},\"323\":{\"h\":\"Simulation\",\"t\":[\"从上面的分析中，我们看到 Simulation 在 AnimationController 动画中也起到很重要的作用：Simulation 主要是在一维空间对物理进行位置、速度等建模。\",\"abstract class Simulation { /// Initializes the [tolerance] field for subclasses. Simulation({ this.tolerance = Tolerance.defaultTolerance }); // 指定时间的位置 double x(double time); // 指定时间的速度 double dx(double time); /// Whether the simulation is \\\"done\\\" at the given time. bool isDone(double time); // 公差，如果两个数值相差小于等于此值则认为二者相等，用于 isDone 中 Tolerance tolerance; @override String toString() => objectRuntimeType(this, 'Simulation'); }\",\"在 AnimationController 中常用的子类有以下两种：\"]},\"324\":{\"h\":\"_InterpolationSimulation\",\"t\":[\"_InterpolationSimulation(this._begin, this._end, Duration duration, this._curve, double scale){...}\",\"其 x() 方法中除了 t 为 0.0 或 1.0 的情况外，其余时候依靠 Curve（默认为 Curves.linear）计算值。\",\" double x(double timeInSeconds) { final double t = (timeInSeconds / _durationInSeconds).clamp(0.0, 1.0); if (t == 0.0) return _begin; else if (t == 1.0) return _end; else return _begin + (_end - _begin) * _curve.transform(t); }\"]},\"325\":{\"h\":\"_RepeatingSimulation\",\"t\":[\"_RepeatingSimulation(double initialValue, this.min, this.max, this.reverse, Duration period, this.directionSetter){}\",\"没有 Curve，其 double x(double timeInSeconds) 方法可以自动判断是否需要反向并修改方向（会触发 status 改变通知）：\",\" double x(double timeInSeconds) { assert(timeInSeconds >= 0.0); final double totalTimeInSeconds = timeInSeconds + _initialT; final double t = (totalTimeInSeconds / _periodInSeconds) % 1.0; final bool isPlayingReverse = (totalTimeInSeconds ~/ _periodInSeconds).isOdd; if (reverse && isPlayingReverse) { directionSetter(_AnimationDirection.reverse); return ui.lerpDouble(max, min, t)!; } else { directionSetter(_AnimationDirection.forward); return ui.lerpDouble(min, max, t)!; } }\",\"此外比较特殊的是他的 isDone 方法一致返回 false，表示不会主动结束动画。\"]},\"326\":{\"h\":\"SpringSimulation\",\"t\":[\"用于 fling 方法，创建弹性的模拟\"]},\"327\":{\"h\":\"总结\",\"t\":[\"经过上述分析，应该能了解 Flutter 动画中 AnimationController 的作用：\",\"AnimationController 通过传入的 TickerProvider 创建并监听 Ticker，确保 Ticker 收到系统帧回调时触发 AnimationController._tick 方法；\",\"提供 forward，reverse，animateTo，animateBack，repeat，fling，animateWith 等方法创建不同的 Simulation 并开启 Ticker，从而可以通过 SchedulerBinding.instance.scheduleFrameCallback 监听 Flutter 每一帧刷新。\",\"并且在 animateTo，animateBack 方法中可以使用 Curve 实现非线性变化。\",\"当 Flutter 帧刷新时，_tick 方法中通过_simulation 结合时间，lowerBound 和 upperBound 等获取当前值_value 和状态_status 并发出通知。\",\"使用者可以通过 AnimationController 继承自父类 Animation 的 addListener/removeListener、addStatusListener/removeStatusListener 监听动画的值和状态\",\"使用者可以从父类 Animation<double>继承的Animation<U> drive<U>(Animatable<U> child)方法使用 Animatable<U>从 Animation<double>的 animation 创建一个新的Animation<U>，从而可以得到可以随时间变化过渡的 Offset、Size 等动画。\",\"stop 方法可以停止动画\"]},\"328\":{\"h\":\"参考资料\",\"t\":[\"动画效果介绍 flutter.cn\",\"Animation api.flutter.dev\",\"AnimationController api.flutter.dev\",\"TickerProvider api.flutter.dev\",\"SingleTickerProviderStateMixin api.flutter.dev\"]},\"329\":{\"h\":\"Flutter 动画分析之 CustomPaint\",\"t\":[\"本文讨论的 Flutter 动画主要限定在：随着每一帧的变化，修改 Flutter Widget 的大小、颜色、位置等属性，使之看起来从一种状态渐变为另外一种状态 这一范围。\",\"根据之前的分析，关于 Flutter 中的 Widget 动画，大体可以分为三大类：\",\"隐式动画，以 ImplicitlyAnimatedWidget 及其子类为代表。特点是当涉及到的属性变化后，这些 Widget 会 自动渐变到新的属性，使用者只能设置动画的 Duration、Tween、Curve 等，而无法主动终止、反向执行动画。\",\"涉及到的类主要有 TweenAnimationBuilder 以及一系列以 AnimatedFoo 命名的类。\",\"显式动画，以 AnimatedWidget 及其子类为代表，需要配合 AnimationController 使用。特点是 当 AnimationController 的值变化时，Widget 中对应的属性也会随之变化。\",\"涉及到的类主要有 AnimationBuilder/AnimatedWidget 以及一系列 FooTransition 命名的类。\",\"自定义动画，如果上述两种方式还无法满足需求，则可以使用 CustomPaint + CustomPainter + Listenable（比如 AnimationController）实现动画，特点是实现方式灵活，但同时也比上述两者难度高一些。\",\"Flutter 中这些与动画有关的类如何选择，Flutter 官方给了一张图以供参考：\",\"如何实现 Flutter 中的动画\",\"本文将着重分析使用 CustomPaint 实现自定义动画，涉及到的类以及他们的关系图如下：\",\"CustomPaint 自定义动画\"]},\"330\":{\"h\":\"源码分析\",\"t\":[\"先来看一个使用 CustomPaint 实现的动画（动画的内容是一个反复变大又缩小的蓝色小球）：\",\"// 1. 创建 AnimationController 用来触发 CustomPaint 绘制 late final AnimationController _controller = AnimationController(vsync: this, duration: const Duration(seconds: 5)) ..repeat(reverse: true); // 2. 创建自定义的 CustomPainter 类 class _SampleCustomPainter extends CustomPainter { // 注意这里给父类传入了 Listenable 类型的 repaint _SampleCustomPainter(this.progress) : super(repaint: progress) { _paint = ui.Paint()..color = Colors.blue; } Animation<double> progress; late Paint _paint; @override void paint(Canvas canvas, Size size) { // 在这里实现真正的绘制逻辑 var minSize = size.width > size.height ? size.height : size.width; var radius = minSize * (0.2 + 0.8 * progress.value) / 2; canvas.drawCircle(size.center(Offset.zero), radius, _paint); } @override bool shouldRepaint(covariant CustomPainter oldDelegate) => false; } // 3. 使用 CustomPaint 和 CustomPainter 等实现动画 CustomPaint( painter: _SampleCustomPainter(_controller), size: const Size(100, 100), )\",\"上述代码是我们使用 CustomPaint 实现自定义动画的常见用法，接下来我们逐一分析上述涉及到的类的作用。\"]},\"331\":{\"h\":\"CustomPaint\",\"t\":[\"A widget that provides a canvas on which to draw during the paint phase.\",\"CustomPaint 继承自 SingleChildRenderObjectWidget，其内部持有 CustomPainter 并将其传入创建 RenderCustomPaint 以获取 Canvas 用于绘制内容。\",\"class CustomPaint extends SingleChildRenderObjectWidget { const CustomPaint({ Key? key, this.painter,// 绘制背景 this.foregroundPainter,// 绘制前景 this.size = Size.zero,// 优先取 child.Size，其为 null 才取这里的 size this.isComplex = false,// 动画是否复杂到需要合成系统设置缓存 this.willChange = false,// 告诉光栅 raster 此 painting 是否会在下一帧变化 Widget? child,// 可选 }) : super(key: key, child: child); RenderCustomPaint createRenderObject(BuildContext context) {...} }\",\"可以看到 CustomPaint 内部并没有太多逻辑，控制 CustomPainter 绘制的主要逻辑都在 RenderCustomPaint 中。\"]},\"332\":{\"h\":\"RenderCustomPaint\",\"t\":[\"Provides a canvas on which to draw during the paint phase.\",\"作为 RenderObject 的 RenderCustomPaint，负责实际计算 size、在 Flutter 框架 paint 阶段安排 painter、foregroundPainter 以及 child 的绘制。\",\"以 CustomPaint 传入的 CustomPainter? painter 为例，在 RenderCustomPaint 的构造方法中它被赋值给_painter，随后当 attach 到 RenderObject Tree 时，对 CustomPainter 添加了监听：\",\"class RenderCustomPaint extends RenderProxyBox { CustomPainter? get painter => _painter; @override void attach(PipelineOwner owner) { super.attach(owner); // 这里对 CustomPainter 添加监听，只要值变化就 markNeedsPaint _painter?.addListener(markNeedsPaint); _foregroundPainter?.addListener(markNeedsPaint); } @override void detach() { _painter?.removeListener(markNeedsPaint); _foregroundPainter?.removeListener(markNeedsPaint); super.detach(); } }\",\"从上述代码可以看出，RenderCustomPaint 对 CustomPainter 添加监听，只要值变化就执行 markNeedsPaint；\",\"而如果是更新了 CustomPainter，则会执行 RenderCustomPainter.painter 方法，最终在_didUpdatePainter 方法中重写对新的 CustomPainter 添加监听以触发 markNeedsPaint：\",\"set painter(CustomPainter? value) { if (_painter == value) return; final CustomPainter? oldPainter = _painter; _painter = value; _didUpdatePainter(_painter, oldPainter); } void _didUpdatePainter(CustomPainter? newPainter, CustomPainter? oldPainter) { // Check if we need to repaint. if (newPainter == null) { assert(oldPainter != null); // We should be called only for changes. markNeedsPaint(); } else if (oldPainter == null || newPainter.runtimeType != oldPainter.runtimeType || newPainter.shouldRepaint(oldPainter)) { markNeedsPaint(); } if (attached) { oldPainter?.removeListener(markNeedsPaint); newPainter?.addListener(markNeedsPaint); } // Check if we need to rebuild semantics. if (newPainter == null) { assert(oldPainter != null); // We should be called only for changes. if (attached) markNeedsSemanticsUpdate(); } else if (oldPainter == null || newPainter.runtimeType != oldPainter.runtimeType || newPainter.shouldRebuildSemantics(oldPainter)) { markNeedsSemanticsUpdate(); } }\",\"上述两种方法最终都会直接触发 paint 阶段（跳过了 build 和 layout 阶段），最终由 Flutter Framework 调用 RenderCustomPainter.paint 方法：\",\" @override void paint(PaintingContext context, Offset offset) { // 1. 先绘制背景 if (_painter != null) { _paintWithPainter(context.canvas, offset, _painter!); _setRasterCacheHints(context); } // 2. 再通过父类绘制 child super.paint(context, offset); // 3. 最后绘制前景 if (_foregroundPainter != null) { _paintWithPainter(context.canvas, offset, _foregroundPainter!); _setRasterCacheHints(context); } } void _paintWithPainter(Canvas canvas, Offset offset, CustomPainter painter) { late int debugPreviousCanvasSaveCount; canvas.save(); if (offset != Offset.zero) canvas.translate(offset.dx, offset.dy); // 调用 CustomPainter.paint 方法绘制内容 painter.paint(canvas, size); canvas.restore(); }\",\"以上就是 RenderCustomPaint 使用 CustomPainter 实现绘制的过程，大体分为 3 部分：\",\"在 attach 方法中监听从 CustomPaint 传入的 CustomPainter，一旦其有变化就执行 markNeedsPaint 方法，引导 Flutter 框架重新绘制内容。\",\"如果中间通过 RenderCustomPainter.painter/foregroundPaint 更改 CustomPainter，则会重新监听以触发 markNeedsPaint。\",\"当 Flutter 框架执行重绘时，会通过 RenderCustomPaint.paint 方法最终调用 CustomPainter.paint 方法绘制内容。\",\"除此之外，RenderCustomPainter 还通过 computeMinIntrinsicWidth/computeMaxIntrinsicHeight 等方法计算合适的 Size，以及使用 hitTestChildren/hitTestSelf 等处理点击事件等等。\"]},\"333\":{\"h\":\"CustomPainter\",\"t\":[\"The interface used by CustomPaint (in the widgets library) and RenderCustomPaint (in the rendering library).\",\"CustomPainter 提供 paint 方法让使用者使用 Canvas 绘制内容；继承自 Listenable，所以可以通过 addListener/removeListener 方法监听。\",\"abstract class CustomPainter extends Listenable { const CustomPainter({ Listenable? repaint }) : _repaint = repaint; // 可以看到，如果 repaint 不为 null，则会监听其变化 final Listenable? _repaint; void addListener(VoidCallback listener) => _repaint?.addListener(listener); void removeListener(VoidCallback listener) => _repaint?.removeListener(listener); // 点击事件以及语义等等，可以根据需要实现 bool? hitTest(Offset position) => null; SemanticsBuilderCallback? get semanticsBuilder => null; bool shouldRebuildSemantics(covariant CustomPainter oldDelegate) => shouldRepaint(oldDelegate); // 子类必须实现的方法 bool shouldRepaint(covariant CustomPainter oldDelegate); void paint(Canvas canvas, Size size); }\",\"CustomPainter 有两种使用方式：\",\"继承自 CustomPainter（推荐），可以传入 Listenable，这样 RenderCustomPaint 监听的便是这个 Listenable 对象。\",\"继承 Listenable 或其子类，并实现 CustomPainter 接口（Dart 语言特性，会要求实现其所有方法属性），这样监听的便是这个实现类对象本身。\",\"当通知 listener 时会通过 RenderCustomPaint 执行 markNeedsPaint，触发 Flutter Framework 重新安排绘制，最终执行 CustomPainter.paint 方法重新绘制内容。\",\"无论哪种实现方式，都必须实现 shouldRepaint 和 paint 两个方法。\",\"bool shouldRepaint(covariant CustomPainter oldDelegate) 每当新的 CustomPainter 提供给 RenderCustomPaint 时都会调用此方法，再判断是否调用 paint 方法。\",\"如果前后 CustomPainter 的信息不同影响到绘制，则应该返回 true；否则返回 false 则可能导致 paint 方法被省略。\",\"即使此方法返回 false，paint 也可能会被回调（Listenable 调用 listener 触发）；如果 size 变化等情况下会直接调用 paint 方法。\",\"void paint(Canvas canvas, Size size) 每当对象需要 paint 的时候都会调用。\",\"传入的 Canvas 的坐标系以左上角为原点，范围无限大，但 box 的大小为 size，绘制的内容应当在 size 范围内，否则可能有性能问题，可以在最开始使用 Canvas.clipRect 限制绘制范围。\"]},\"334\":{\"h\":\"Canvas\",\"t\":[\"An interface for recording graphical operations.\",\"当使用 PaintingContext.canvas 方法获取 Canvas 时，（如果 canvas 为 null）会创建 ui.PictureRecorder() 并以此创建 Canvas。\",\"class PaintingContext extends ClipContext { @override Canvas get canvas { if (_canvas == null) _startRecording(); assert(_currentLayer != null); return _canvas!; } void _startRecording() { assert(!_isRecording); _currentLayer = PictureLayer(estimatedBounds); _recorder = ui.PictureRecorder(); _canvas = Canvas(_recorder!); _containerLayer.append(_currentLayer!); } }\",\"PictureRecorder 使用 Canvas 记录图形操作的接口，在PictureRecorder.endRecording方法中使用其创建 Picture，后者被 SceneBuilder 用来在SceneBuilder.build()方法中创建 Scene。 最终在FlutterView.render方法中，Scene 被 GPU 绘制在屏幕上。\",\"Canvas 有常用的方法：\",\"save() 将当前的 transform 和 clip 等的复制保存在 save stack 上面，必须使用 restore()方法恢复\",\"saveLayer()，与 save()方法类似，但是执行以后，后续操作都是在一个新的 layer 上面进行，相当于一个独立的图层。\",\"可以通过 Paint.colorFilter、Paint.blendMode 等属性配置其与之前图层的叠加方式。比较耗性能，好处是可以对后续操作绘制的内容统一处理（比如，单独画两个圆，然后抗锯齿会分别执行两次，可能会出现毛刺，而使用 saveLayer 后这两个圆相当于一个整体，使用抗锯齿效果会很好）。\",\"restore()，pop 掉当前的 save stack，save 和 saveLayer 方法与此方法一一对应。saveLayer 创建的 layer 会和之前的 layer 合并。\",\"translate/scale/rotate 对画布进行平移、缩放、旋转操作\",\"clipRect/clipRRect/clipPath 裁剪画布的绘制范围\",\"drawColor/drawLine/drawRRect/drawRect... 等等绘制各种形状\",\"绘制文字应该使用 TextPainter，不推荐使用 drawParagraph\",\"skew/transform 倾斜/变换画布\"]},\"335\":{\"h\":\"小结\",\"t\":[\"到这里我们差不过分析了刚开始的 demo 涉及到的类，总结一下他们各自的角色：\",\"AnimationController 对象（也即 Listenable 对象），用来监听 Flutter Framework 的帧刷新，根据设定的时长、曲线等通知 listener，以达到控制动画的效果。\",\"CustomPaint，作为 SingleChildRenderObjectWidget，主要作用是将 CustomPainter、Widget child 等各类参数传递给 RenderCustomPaint。\",\"RenderCustomPainter，作为 RenderProxyBox，优先以 Widget child 的大小为准，会监听传入的 CustomPainter 对象，并在其变化时触发 Flutter Framework 安排重新绘制（跳过 build 和 layout 阶段，直接进入 paint 阶段）；\",\"当需要绘制时，会依次安排背景、child、前景的绘制。而这里的背景和前景都由传入的 CustomPainter 负责实际绘制。\",\"CustomPainter，本身是 Listenable 的子类，可以被 RenderCustomPaint 监听，其 paint 方法实际负责绘制内容。\",\"使用是可以继承此类（推荐），也可以当做接口实现所有方法。\",\"Canvas，Paint 则是负责实际绘制。\"]},\"336\":{\"h\":\"总结\",\"t\":[\"到本文为止，我们分析了 Flutter 动画实现的各种方式及其原理：\",\"Flutter Widget 动画，是AnimationController通过 Ticker 监听 Flutter 屏幕刷新，然后根据Tween/Curve/Duration 等一系列参数计算出实时的值，Flutter 的 Widget 则根据这些值计算、修改对应属性从而实现动画效果。\",\"Flutter 内置的动画分为隐式动画和显式动画两种，如果这些动画还无法满足需求，可以使用 CustomPaint 实现自定义动画（本文内容）。\",\"Flutter 中的Hero 动画便是使用显式动画中的 AnimationBuilder、Tween 等实现的。\"]},\"337\":{\"h\":\"参考资料\",\"t\":[\"CustomPaint api.flutter.dev\",\"Canvas api.flutter.dev\",\"What is Canvas.save and Canvas.restore? stackoverflow.com\"]},\"338\":{\"h\":\"Flutter 动画分析之 Hero\",\"t\":[\"Flutter 中的 Hero 动画是指可以在切换页面时自动跨页面实现 Widget 放大缩小、位移的动画，在用户看起来好像是当前页面的 Widget“飞”入到另外一个页面，底层基于 Overlay 实现。\",\"本文对其原理和应用做一简单分析，主要是对官方介绍的理解与分析，感兴趣的可以直接阅读官方文档。\"]},\"339\":{\"h\":\"使用\"},\"340\":{\"h\":\"简单使用 Standard hero animations\",\"t\":[\"详细的代码可以从simple_hero_animation.dart获取。\",\"Hero 动画的使用比较简单：\",\"分别在两个 Flutter 页面将需要实现 Hero 动画的 Widget（一般是图片）作为 Hero 控件的 child\",\"为这两个 Hero 指定同一个 tag\",\"Hero 底层基于 Overlay 实现，所有 Hero.child 可以使用 Position 等适用于 Stack.child 的属性\",\"这里要注意：\",\"这两个 Page 要是相邻的页面，否则 Hero 动画不会生效\",\"同一个页面，不能有多个 Hero.tag 相同的 Hero 控件\",\"Hero 动画默认只支持大小（size）和位置（location）变化，所以 Hero.child 不建议有其他变化（Don't rotate your heroes）\",\"按照上述的要求，我们再 FirstHeroPage 中添加第一个 Hero Widget：\",\"Align( alignment: Alignment.bottomLeft, child: Hero( // 注意这里的 tag 要和下一个页面的 Hero.tag 一致 tag: \\\"HeroTag\\\", // child 是 Hero 动画会作用的地方 child: HeroChildWidget( size: const Size.square(100), name: \\\"First\\\", onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) { return const SecondHeroPage(); })); }, )), )\",\"然后在要跳转到的第二个页面 SecondHeroPage 添加目标 Hero：\",\" Align( alignment: Alignment.topCenter, child: Hero( // 这里的 tag 与上一个页面的 Hero.tag 一致 tag: \\\"HeroTag\\\", child: HeroChildWidget( size: const Size.square(200), name: \\\"Second\\\", onTap: () { Navigator.pop(context); }, )), )\",\"这样，当从 FirstHeroPage 跳转到 SecondHeroPage 的时候，Hero 动画作用于 Hero.child，看起来好像是前一个页面的 HeroChildWidget 逐渐从 Alignment.bottomLeft 移动到 Alignment.topCenter，并且大小也从 100 逐渐变为 200。\",\"Simple Hero Animation\"]},\"341\":{\"h\":\"原理分析\",\"t\":[\"那么 Hero 动画是如何实现这个效果的呢？\",\"Flutter 中 Page 之间的跳转由 Navigator 管理，在 Navigator 管理的所有 Flutter Page 的上层有一个叠加层 Overlay，在 Z 轴方向上处于所有 Page 上层，其内部的 widget 可以被独立管理。\",\"以当前 Page 为 A，要跳转的 Page 为 B：\",\"那么当从 A 跳转到 B 时，Hero 动画框架会先隐藏 A 中的 Hero.child 并用相同大小的（不可见）组件占位；\",\"与此同时，Hero 动画框架读取要跳转去的 B 中的 Hero.child 并据此创建 Widget，将其大小和位置与为 A 中 Hero.child 对齐，放入到 Overlay 中。同时计算器过渡到 B 中的 Hero.child 位置和大小的路径动画，并执行；\",\"这也是为什么在上一步我们简单的 Hero 动画中，A 向 B 页面切换时过渡的 Widget 中文字虽然是Second，但是样式看起来和页面中的文字样式不一样，这是因为Overlay（可视为一个特殊的 Stack）上的组件是单独管理的，没有使用我们的 Material 样式。 要解决这个问题也很简单，在 Hero.child 中添加Material组件使其应用样式即可。\",\"当 B 创建好之后，Hero 动画正在运行中，所以 B 中的 Hero.child 也会被相同大小的（不可见）组件占位；\",\"当 Hero 动画播放完毕之后，位于 Overlay 中的 Widget 被移除，A 和 B 中的 Hero.child 也正常显示。\",\"如果又从 B 返回 A 则上述步骤又会反向（A、B 中 Hero.child 换位）执行一次。\",\"下图是 Flutter 官方对 Hero 动画执行的解释，刚好处于由 A 到 B 过渡的过程，可以看到 A、B 页面中的 Widget 都被移除，只有根据目标 Page——B 中的 Hero.child 创建的位于 Overlay 的 Destination hero 控件在从 A 中对应的位置和大小过渡到 B 中对应的位置和大小：\",\"Hero 动画进行中的图解\"]},\"342\":{\"h\":\"进阶使用 Radial hero animations\",\"t\":[\"默认实现的 Hero 动画只支持大小和位移变化，通过使用 Radial Transformation（径向转化）可以实现由圆变为正方形的过渡动画。\",\"径向过渡 是由圆形变成正方形的过渡动画。 —— flutter.cn 官网\",\"径向动画的本质还是 Hero 动画，只不过在 Hero 动画之上做了一层由 ClipOval 和 ClipRect 组成的裁剪遮罩，通过二者的配合，导致其重叠部分的内容看起来好像在 Hero 动画播放的时候在圆和正方形之间切换。\",\"官方的实现为radial_hero_animation_animate_rectclip，但是为了便于理解径向动画的原理，我们在之前的 Hero 动画的简单使用代码基础上进行修改。\",\"详细的代码可以从advanced_hero_animation.dart获取。\",\"相对于之前的，我们主要将 HeroChildWidget 类修改为 HeroClippedChildWidget 类：\",\"const Size maxClipOvalDiameter = Size.square(200); const Size minClipOvalDiameter = Size.square(100); class HeroClippedChildWidget extends StatelessWidget { const HeroClippedChildWidget( {Key? key, required this.size, required this.name, required this.onTap}) : super(key: key); final Size size; final String name; final VoidCallback onTap; @override Widget build(BuildContext context) { // 与圆内切的正方形边长 s = 圆半径 * 根号 2 = 直径 * 根号 2 / 2 var clipRectSize = maxClipOvalDiameter.width * math.sqrt2 / 2; return SizedBox( height: size.height, width: size.width, child: GestureDetector( onTap: onTap, // 当 Hero 动画变到最小时，ClipOval 与 ClipRect 相交部分是 ClipOval 形状 child: ClipOval( child: Center( // 当 Hero 动画变到最大时，ClipOval 与 ClipRect 相交部分是 ClipRect 形状 child: ClipRect( child: SizedBox( height: clipRectSize, width: clipRectSize, child: Container( color: Colors.blueAccent, child: Center( child: Text(name), ), ), ), ), ), ), ), ); } }\",\"其中，FirstHeroPage 的 HeroClippedChildWidget.minClipOvalDiameter，SecondHeroPage 中则为 maxClipOvalDiameter。\",\"其效果如图：\",\"advanced_hero\",\"实际上根据此方式，我们也可以监听 Hero.child 的大小、位置变化从而推测出 Hero 动画的进度和方向（是从 from 到 to，还是相反），从而实现更丰富的动画效果。\",\"比如监听进度从而实现旋转：https://github.com/jixiaoyong/flutter_custom_widget/blob/master/lib/widgets/animation_hero_child.dart\"]},\"343\":{\"h\":\"原理分析\",\"t\":[\"此类能够实现切换的同时修改 Hero.child 的样式，主要在于 ClipOval 和 ClipRect 的组合效果：\",\"Radial hero animations 的示意图\",\"ClipRect 的大小固定为var clipRectSize = maxClipOvalDiameter.width * math.sqrt2 / 2，而 ClipOval 的大小则随着 Hero 动画的变化而变化，始终与 HeroClippedChildWidget 保持一致。\",\"假设从页面 A 到 B 切换时 Hero.child 会从小变大，那么：\",\"刚刚从页面 A 切换时，位于 Overlay 的 HeroClippedChildWidget/ClipOval 大小为 minClipOvalDiameter（也就是 100*100），此时 ClipRect 的大小 clipRectSize（也就是 200/2*根号 2 约等于 141）大于 ClipOval 的大小，所以他们的相交处为 ClipOval，故而 HeroClippedChildWidget 显示为直径为 100 的圆。\",\"当刚刚完整切换到页面 B，Hero 动画将要结束时，位于 Overlay 的 HeroClippedChildWidget/ClipOval 大小为 maxClipOvalDiameter（也就是 200*200），此时 ClipRect 的大小 clipRectSize（依旧是 141）小于 ClipOval 的大小，所以他们的相交处为 ClipRect，故而 HeroClippedChildWidget 显示为边长约为 141 的正方形。\",\"在二者的过渡阶段，就是 ClipOval 注解从小于 ClipRect 变化为大于 ClipRect 的过程，他们相交的区域也从圆变为圆角，再变为正方形。\"]},\"344\":{\"h\":\"其他属性\",\"t\":[\"此外，Hero 还有几个属性可以供我们自定义：\",\"flightShuttleBuilder 替换页面切换时的默认过渡 Widget。比如从页面 A 切换到 B 时，默认是使用 B 中的 Hero.child，如果此值不为 null 则会展示 flightShuttleBuilder 返回的 Widget。\",\"placeholderBuilder 当 Hero 动画开始，页面 A、B 中 Hero.child 隐藏时，会展示 placeholderBuilder 返回的内容或者为空（默认）\",\"createRectTween 定义 Hero 动画的过渡组件动画渐变的方式，MaterialApp 默认使用 MaterialRectArcTween()，此外还有 MaterialRectCenterArcTween()（可以等比例缩放）、MaterialPointArcTween()。\",\"示意图如下：\",\"flutter.cn 官网 Hero 示意图\"]},\"345\":{\"h\":\"底层实现\"},\"346\":{\"h\":\"Hero\",\"t\":[\"Hero 是一个 StatefulWidget，除了之前提到的各个属性之外，还提供了_allHeroesFor()方法供 HeroController 调用，用于查找指定 Context 下所有的 Hero Widget，并在检测到有重复 Hero.tag 时报错。\",\"class Hero extends StatefulWidget{ const Hero({ Key? key, required this.tag,// 每个页面不能有多个相同 tag 的 Hero this.createRectTween,// 定义 Hero 过渡 Widget 切换方式 this.flightShuttleBuilder,// 替换默认的过渡 Widget this.placeholderBuilder,// 在 Hero 动画开始时占位 this.transitionOnUserGestures = false,// 是否同步手势 required this.child,// 要实现 Hero 动画的 Widget }) : super(key: key); // 返回一个 Key 为 Hero.tag 的 map static Map<Object, _HeroState> _allHeroesFor( BuildContext context, bool isUserGestureTransition, NavigatorState navigator, ) { ... } }\"]},\"347\":{\"h\":\"_HeroState\",\"t\":[\"_HeroState 主要是提供 startFlight/endFlight 供 HeroController->_HeroFlight->_HeroFlightManifest 调用；以及根据初始化以及开始/技术 Flight 动画后状态的变化而更改 Hero.child 在屏幕上面（对应页面上原先 Hero Widget 所处位置的区域）的显示效果。\",\" void startFlight({ bool shouldIncludedChildInPlaceholder = false }) { _shouldIncludeChild = shouldIncludedChildInPlaceholder; assert(mounted); final RenderBox box = context.findRenderObject()! as RenderBox; assert(box != null && box.hasSize); setState(() { _placeholderSize = box.size; }); } void endFlight({ bool keepPlaceholder = false }) { if (keepPlaceholder || _placeholderSize == null) return; _placeholderSize = null; if (mounted) { // Tell the widget to rebuild if it's mounted. _placeholderSize has already // been updated. setState(() {}); } }\",\"可以看出，startFlight/endFlight 方法主要影响的是_placeholderSize 的值，并引发 rebuild：\",\" Widget build(BuildContext context) { assert( context.findAncestorWidgetOfExactType<Hero>() == null, 'A Hero widget cannot be the descendant of another Hero widget.', ); // _placeholderSize 不为 null 则展示占位 Widget final bool showPlaceholder = _placeholderSize != null; if (showPlaceholder && widget.placeholderBuilder != null) { // 如果有指定占位 Widget，并且需要展示 return widget.placeholderBuilder!(context, _placeholderSize!, widget.child); } if (showPlaceholder && !_shouldIncludeChild) { // 在 Hero 动画执行时，默认是用相同大小的 SizeBox 占位 return SizedBox( width: _placeholderSize!.width, height: _placeholderSize!.height, ); } return SizedBox( width: _placeholderSize?.width, height: _placeholderSize?.height, child: Offstage( offstage: showPlaceholder, child: TickerMode( enabled: !showPlaceholder, // 只有动画未开始/结束时才会展示 child child: KeyedSubtree(key: _key, child: widget.child), ), ), ); }\",\"可以看到，Hero 和_HeroState 主要是提供了操纵、统计当前 Page 的 Hero Widget 以及控制其 Hero.child 及占位 Widget 的显示与否，那么在哪里发起和结束 Hero 动画，以及绘制过渡 Widget 的呢？\"]},\"348\":{\"h\":\"_HeroFlightManifest\",\"t\":[\"“_HeroFlightManifest：Everything known about a hero flight that's to be started or diverted.”\",\"_HeroFlightManifest 是一个数据类，主要封装了fromHero/toHero两个_HeroState，并提供 Hero Widget 的位置信息 Rect；此外还封装了过渡动画相关的get animation和createHeroRectTween方法。\",\"class _HeroFlightManifest { _HeroFlightManifest({ required this.type, required this.overlay, required this.navigatorSize, required this.fromRoute, required this.toRoute, required this.fromHero, required this.toHero, required this.createRectTween, required this.shuttleBuilder, required this.isUserGestureTransition, required this.isDiverted, }) : assert(fromHero.widget.tag == toHero.widget.tag); late final Rect fromHeroLocation = _boundingBoxFor(fromHero.context, fromRoute.subtreeContext); late final Rect toHeroLocation = _boundingBoxFor(toHero.context, toRoute.subtreeContext); static Rect _boundingBoxFor(BuildContext context, BuildContext? ancestorContext) { // 从 context 中找到对应的 RenderObject 并转化得到其在 ancestorContext 坐标系中的 Rect } // 过渡动画相关 Tween<Rect?> createHeroRectTween({ required Rect? begin, required Rect? end }) { final CreateRectTween? createRectTween = toHero.widget.createRectTween ?? this.createRectTween; return createRectTween?.call(begin, end) ?? RectTween(begin: begin, end: end); } Animation<double> get animation { return CurvedAnimation( // push 和 pop 采用不同的 animation parent: (type == HeroFlightDirection.push) ? toRoute.animation! : fromRoute.animation!, curve: Curves.fastOutSlowIn, reverseCurve: isDiverted ? null : Curves.fastOutSlowIn.flipped, ); } }\"]},\"349\":{\"h\":\"HeroController\",\"t\":[\"HeroController 真正在路由切换时操作 Hero 动画。\",\"无论是 CupertinoApp 还是 MaterialApp 都提供了创建 HeroController 的静态方法，在他们对应的 State.initState 方法中创建。\",\"CupertinoTabView 也创建有自己的 HeroController。\",\"以 MaterialApp 为例：\",\" // MaterialApp 类 static HeroController createMaterialHeroController() { return HeroController( createRectTween: (Rect? begin, Rect? end) { return MaterialRectArcTween(begin: begin, end: end); }, ); }\",\"在_MaterialAppState 中创建并持有 HeroController：\",\"class _MaterialAppState extends State<MaterialApp> { late HeroController _heroController; @override void initState() { super.initState(); _heroController = MaterialApp.createMaterialHeroController(); } @override Widget build(BuildContext context) { // 创建 WidgetsApp Widget result = _buildWidgetApp(context); ... return ScrollConfiguration( behavior: widget.scrollBehavior ?? const MaterialScrollBehavior(), // 注意这里将_heroController 传给 HeroControllerScope child: HeroControllerScope( controller: _heroController, child: result, ), ); } }\",\"HeroControllerScope 是一个 InheritedWidget，经过上述代码，MaterialApp 内部可以通过HeroControllerScope.of()方法获取到 HeroController。\",\"而在 WidgetsApp 中创建的 Navigator 对应的NavigatorState._updateHeroController方法中会使用其获取 HeroController，并通过HeroController._navigator = this及NavigatorState._updateEffectiveObservers()方法与之绑定。\",\"这样当 Navigator 切换页面时，各个时间都会通知到 HeroController，执行其 didPush/didPop/didRemove/didReplace/didStartUserGesture/didStopUserGesture 等方法，从而触发/终止 Hero 动画。\",\"class HeroController extends NavigatorObserver { HeroController({ this.createRectTween }); final CreateRectTween? createRectTween; // 当前位于 Overlay 中的所有 Hero 动画，key 是 Hero.tag final Map<Object, _HeroFlight> _flights = <Object, _HeroFlight>{}; // 从父类 NavigatorObserver 继承 NavigatorState? _navigator }\"]},\"350\":{\"h\":\"_maybeStartHeroTransition\",\"t\":[\"HeroController 从 NavigatorObserver 继承到的方法中，除了 didStopUserGesture 都会执行 HeroController._maybeStartHeroTransition 方法：\",\" // If we're transitioning between different page routes, start a hero transition // after the toRoute has been laid out with its animation's value at 1.0. void _maybeStartHeroTransition( Route<dynamic>? fromRoute, Route<dynamic>? toRoute, HeroFlightDirection flightType, bool isUserGestureTransition, ) { if (toRoute != fromRoute && toRoute is PageRoute<dynamic> && fromRoute is PageRoute<dynamic>) { final PageRoute<dynamic> from = fromRoute; final PageRoute<dynamic> to = toRoute; // A user gesture may have already completed the pop, or we might be the initial route switch (flightType) { case HeroFlightDirection.pop: if (from.animation!.value == 0.0) { return; } break; case HeroFlightDirection.push: if (to.animation!.value == 1.0) { return; } break; } // 对于 pop 事件，如果 maintainState 为 true，那么我们立即得知 hero 动画的目标尺寸 // 因为这表示上一个页面还存在，不需要重新 layout if (isUserGestureTransition && flightType == HeroFlightDirection.pop && to.maintainState) { _startHeroTransition(from, to, flightType, isUserGestureTransition); } else { // 否则应该等到下一帧、to 页面 layout 之后再开始 // Putting a route offstage changes its animation value to 1.0. Once this // frame completes, we'll know where the heroes in the `to` route are // going to end up, and the `to` route will go back onstage. to.offstage = to.animation!.value == 0.0; WidgetsBinding.instance.addPostFrameCallback((Duration value) { _startHeroTransition(from, to, flightType, isUserGestureTransition); }); } } }\"]},\"351\":{\"h\":\"_startHeroTransition\",\"t\":[\"当上述条件满足之后，便可以开始执行 Hero 动画。\",\" // Find the matching pairs of heroes in from and to and either start or a new // hero flight, or divert an existing one. void _startHeroTransition( PageRoute<dynamic> from, PageRoute<dynamic> to, HeroFlightDirection flightType, bool isUserGestureTransition, ) { // If the `to` route was offstage, then we're implicitly restoring its // animation value back to what it was before it was \\\"moved\\\" offstage. to.offstage = false; final NavigatorState? navigator = this.navigator; // 注意这里获取到了 OverlayState，用来放置 Hero 过渡动画 final OverlayState? overlay = navigator?.overlay; // If the navigator or the overlay was removed before this end-of-frame // callback was called, then don't actually start a transition, and we don' // t have to worry about any Hero widget we might have hidden in a previous // flight, or ongoing flights. if (navigator == null || overlay == null) return; final RenderObject? navigatorRenderObject = navigator.context.findRenderObject(); if (navigatorRenderObject is! RenderBox) { assert(false, 'Navigator $navigator has an invalid RenderObject type ${navigatorRenderObject.runtimeType}.'); return; } assert(navigatorRenderObject.hasSize); // At this point, the toHeroes may have been built and laid out for the first time. // // If `fromSubtreeContext` is null, call endFlight on all toHeroes, for good measure. // If `toSubtreeContext` is null abort existingFlights. final BuildContext? fromSubtreeContext = from.subtreeContext; final Map<Object, _HeroState> fromHeroes = fromSubtreeContext != null ? Hero._allHeroesFor(fromSubtreeContext, isUserGestureTransition, navigator) : const <Object, _HeroState>{}; final BuildContext? toSubtreeContext = to.subtreeContext; final Map<Object, _HeroState> toHeroes = toSubtreeContext != null ? Hero._allHeroesFor(toSubtreeContext, isUserGestureTransition, navigator) : const <Object, _HeroState>{}; for (final MapEntry<Object, _HeroState> fromHeroEntry in fromHeroes.entries) { final Object tag = fromHeroEntry.key; final _HeroState fromHero = fromHeroEntry.value; final _HeroState? toHero = toHeroes[tag]; final _HeroFlight? existingFlight = _flights[tag]; final _HeroFlightManifest? manifest = toHero == null ? null : _HeroFlightManifest( type: flightType, overlay: overlay, navigatorSize: navigatorRenderObject.size, fromRoute: from, toRoute: to, fromHero: fromHero, toHero: toHero, createRectTween: createRectTween, // 优先使用 toHero、fromHero 指定的 flightShuttleBuilder，没有的话 // 使用默认的 shuttleBuilder，也就是 toHero.child shuttleBuilder: toHero.widget.flightShuttleBuilder ?? fromHero.widget.flightShuttleBuilder ?? _defaultHeroFlightShuttleBuilder, isUserGestureTransition: isUserGestureTransition, isDiverted: existingFlight != null, ); // Only proceed with a valid manifest. Otherwise abort the existing // flight, and call endFlight when this for loop finishes. if (manifest != null && manifest.isValid) { toHeroes.remove(tag); if (existingFlight != null) { // 如果已经存在 Hero 过渡动画，则将其转到新的方向 existingFlight.divert(manifest); } else { // 开始全新的 Hero 过渡动画 _flights[tag] = _HeroFlight(_handleFlightEnded)..start(manifest); } } else { existingFlight?.abort(); } } // The remaining entries in toHeroes are those failed to participate in a // new flight (for not having a valid manifest). // // This can happen in a route pop transition when a fromHero is no longer // mounted, or kept alive by the [KeepAlive] mechanism but no longer visible. // TODO(LongCatIsLooong): resume aborted flights: https://github.com/flutter/flutter/issues/72947 for (final _HeroState toHero in toHeroes.values) toHero.endFlight(); } void _handleFlightEnded(_HeroFlight flight) { _flights.remove(flight.manifest.tag); } Widget _defaultHeroFlightShuttleBuilder( BuildContext flightContext, Animation<double> animation, HeroFlightDirection flightDirection, BuildContext fromHeroContext, BuildContext toHeroContext, ) { final Hero toHero = toHeroContext.widget as Hero; return toHero.child; }\"]},\"352\":{\"h\":\"_HeroFlight\",\"t\":[\"经过上面的分析，最终是在_HeroFlight 方法中真正执行 Hero 动画：\",\"class _HeroFlight { // The simple case: we're either starting a push or a pop animation. void start(_HeroFlightManifest initialManifest) { assert(!_aborted); assert(() { final Animation<double> initial = initialManifest.animation; assert(initial != null); final HeroFlightDirection type = initialManifest.type; assert(type != null); switch (type) { case HeroFlightDirection.pop: return initial.value == 1.0 && initialManifest.isUserGestureTransition // During user gesture transitions, the animation controller isn't // driving the reverse transition, but should still be in a previously // completed stage with the initial value at 1.0. ? initial.status == AnimationStatus.completed : initial.status == AnimationStatus.reverse; case HeroFlightDirection.push: return initial.value == 0.0 && initial.status == AnimationStatus.forward; } }()); manifest = initialManifest; final bool shouldIncludeChildInPlaceholder; switch (manifest.type) { case HeroFlightDirection.pop: _proxyAnimation.parent = ReverseAnimation(manifest.animation); shouldIncludeChildInPlaceholder = false; break; case HeroFlightDirection.push: _proxyAnimation.parent = manifest.animation; shouldIncludeChildInPlaceholder = true; break; } heroRectTween = manifest.createHeroRectTween(begin: manifest.fromHeroLocation, end: manifest.toHeroLocation); // 执行_HeroState.startFlight 方法，移除 Hero.child，展示占位 Widget manifest.fromHero.startFlight(shouldIncludedChildInPlaceholder: shouldIncludeChildInPlaceholder); manifest.toHero.startFlight(); // 在 overlay 上添加过渡组件_buildOverlay manifest.overlay.insert(overlayEntry = OverlayEntry(builder: _buildOverlay)); // 监听动画进度，以便实时改变过渡组件_buildOverlay 的样式 _proxyAnimation.addListener(onTick); } }\",\"Hero 动画实际播放的过渡动画内容，由_HeroFlight._buildOverlay 根据动画进度创建：\",\" // The OverlayEntry WidgetBuilder callback for the hero's overlay. Widget _buildOverlay(BuildContext context) { assert(manifest != null); // 默认是 toHero.child shuttle ??= manifest.shuttleBuilder( context, manifest.animation, manifest.type, manifest.fromHero.context, manifest.toHero.context, ); assert(shuttle != null); return AnimatedBuilder( // 监听动画进度 animation: _proxyAnimation, child: shuttle, builder: (BuildContext context, Widget? child) { final Rect rect = heroRectTween.evaluate(_proxyAnimation)!; final RelativeRect offsets = RelativeRect.fromSize(rect, manifest.navigatorSize); // 这里根据动画的进度更改 shuttle 的位置和大小、透明度 // Overlay 本质上是一个特殊的 Stack，所以这里使用 Positioned 定位 return Positioned( top: offsets.top, right: offsets.right, bottom: offsets.bottom, left: offsets.left, child: IgnorePointer( child: RepaintBoundary( child: FadeTransition( opacity: _heroOpacity, child: child, ), ), ), ); }, ); }\"]},\"353\":{\"h\":\"总结\",\"t\":[\"Flutter 中 Hero 动画是基于 Overlay 实现的，监听 Navigator 路由变化，从而在不同 Flutter 页面切换时触发的、表现为 Hero.child 从当前页面“飞”到目标页面对应位置，并伴随着位置、大小、透明度等变化的动画。\",\"MaterialApp 或者 CupertinoApp 对应的State.initState方法中创建 HeroController，并通过 HeroControllerScope 提供给前面创建的 WidgetsApp 内部创建的 Navigator 并绑定；这样当路由变化时 HeroController 收到通知并在HeroState._startHeroTransition方法中通过Hero._allHeroesFor方法获取到当前页和目标页面的 Hero 动画组件，将其 Animation、Tween、Rect、_HeroState 等封装到_HeroFlightManifest 中，传递给_HeroFlight.start执行动画，并在_HeroFlight.onTick方法监听处理动画进度，从而导致_HeroFlight._buildOverlay创建的过渡 Widget 位置、大小、透明度等变化，产生 Hero Widget“飞入”的视觉效果。\"]},\"354\":{\"h\":\"参考资料\",\"t\":[\"主动画 (Hero animations)\",\"Hero class\",\"Overlay class\",\"radial_hero_animation_animate_rectclip\"]},\"355\":{\"h\":\"Flutter 动画分析之 Tween&Curve\",\"t\":[\"在上篇文章中，我们分析了 Flutter 中主要由AnimationController控制动画的开始、结束，但是默认情况下其只能产生线性变化的 double 类型的 value，如果想随时间变化，让 Widget 产生 Size、Offset 等属性的变化，亦或者控制这些值变化的速度快慢，这时候就需要用到 Tween 和 Curve 了。\",\"下图是 Tween/Curve/AnimationController 等类的关系简单示意：\",\"Flutter 各种动画底层类关系\",\"如上图所示：\",\"Tween 和 CurveTween 都继承自 Animatable，可以按照给定的 Animation<double>生产 T 类型的值，从而可以从 AnimationController 中衍生出其他类型的 Animation；\",\"而 Curve 继承自 ParametricCurve，除了之前文章中分析的传入 AnimationController.animateTo 和 AnimationController.animateBack 中从而作用于其创建的_InterpolationSimulation.x()方法之外，也可以被传入 CurveTween 或 CurvedAnimation 中，将 Curve 应用于 AnimationController。\",\"上述关于 Tween 和 CurveTween 和 AnimationController 作用的方式，其实现都是依赖于 Animation<T> Animatable.animate(Animation<double> parent) 方法，根据传入的 Animation<double>（一般会是 AnimationController 对象）创建新的 Animation<T>（实际上是继承自 Animation 的_AnimatedEvaluation，其 Animation.value 取自 Animatable.evaluate(Animation<double>)）。\"]},\"356\":{\"h\":\"源码分析\"},\"357\":{\"h\":\"Animatable\",\"t\":[\"An object that can produce a value of type T given an Animation<double> as input.\",\"Animatable 根据传入的Animation<double>对象创建 T 类型的对象，也就是说其将 Animation 产生的 double 类型“转化”为 T 类型，从而使得 Flutter 支持更加丰富的动画。\",\"一般情况下这个Animation<double>的值范围是[0.0,1.0]，但是也可能超出此范围。\",\"而这一切都通过他的animate方法实现：\",\" Animation<T> animate(Animation<double> parent) { return _AnimatedEvaluation<T>(parent, this); }\",\"在此方法中，将接收 Animation<double>对象作为parent，将自身作为_evaluatable属性创建了 Animation 的子类_AnimatedEvaluation 并返回：\",\"class _AnimatedEvaluation<T> extends Animation<T> with AnimationWithParentMixin<double> { _AnimatedEvaluation(this.parent, this._evaluatable); @override final Animation<double> parent; final Animatable<T> _evaluatable; // 主要逻辑，在这里调用 Animatable.evaluate，最终调用 transform(animation.value) 方法获取 Animation 对应的值 @override T get value => _evaluatable.evaluate(parent); ... }\",\"再看一下 Animatable 的源码：\",\"T evaluate(Animation<double> animation) => transform(animation.value); T transform(double t);\",\"其evaluate方法内部通过其唯一的抽象方法transform方法实现，Animatable 的各个子类也只需要实现transform方法即可。\",\"除了上述与 Animation 有关的三个方法外，Animatable 还有一个链接两个 Animatable 的方法——Animatable.chain()：\",\" Animatable<T> chain(Animatable<double> parent) { return _ChainedEvaluation<T>(parent, this); }\",\"与 Animatable.animate 方法类似，不同的是此方法返回的是 Animatable<T>的子类——_ChainedEvaluation\",\"class _ChainedEvaluation<T> extends Animatable<T> { _ChainedEvaluation(this._parent, this._evaluatable); final Animatable<double> _parent; final Animatable<T> _evaluatable; // 关键方法，将 parent.transform 方法返回值传入 Animatable _evaluatable.transform 方法中并返回 @override T transform(double t) { return _evaluatable.transform(_parent.transform(t)); } }\",\"可以此方法作用是结合两个 Animatable 的效果。\",\"Animatable 的主要作用是根据传入的 Animation 创建对应的 T 类型的值；其主要的子类有 Tween、CurveTween、TweenSequence。\",\"TweenSequence 的作用于_chainedEvaluation 类似，只不过它可以将多个 Animatable 按照所占比重 weight 在 Animatable.transform 中应用。\"]},\"358\":{\"h\":\"Tween\",\"t\":[\"A linear interpolation (插值) between a beginning and ending value.\",\"Tween 是 Animatable 的主要子类之一，作用根据传入的 Animation（通常是 AnimationController）是在传入的begin 和 end 值之间创建线性的插值。\",\"class Tween<T extends Object?> extends Animatable<T> { // begin 和 end 可以为空，但是必须在实际使用到之前赋非 null 值 Tween({this.begin,this.end,}); // 这两个值可以随时修改 T? begin; T? end; @override T transform(double t) { if (t == 0.0) return begin as T; if (t == 1.0) return end as T; return lerp(t); } @protected T lerp(double t) { // 默认是按照当前的进度线性计算返回的值 return (begin as dynamic) + ((end as dynamic) - (begin as dynamic)) * t as T; } }\",\"从 Tween 的源码可以看到，它实现了父类 Animatable.transform 方法，并在 t 在 (0.0,1.0) 之间时调用 Tween.lerp 方法获取对应的值，默认线性的在 T 上应用加减乘运算，并返回结果。Tween 的子类只需要重写 Tween.lerp 方法而非 Animatable.transform 方法。\",\"这也就要求：\",\"支持 lerp 静态方法的类通常有对应的 Tween 子类，一般以 FooTween 命名，比如 ColorTween 就是借助 Color.lerp 方法实现：\",\"class ColorTween extends Tween<Color?> { // 如果需要渐变透明，请传入 null 而非 Color.transparent，后者实际是黑色透明，会导致渐变为黑色 ColorTween({ Color? begin, Color? end }) : super(begin: begin, end: end); @override Color? lerp(double t) => Color.lerp(begin, end, t); }\",\"Tween<T> 的类型 T 必须支持+-*三种运算，并且返回值还是 T；\",\"对于 int 来说，因为 int*double=num 而非 int，有对应的特殊类：\",\"IntTween，使用 double.round 实现近似线性插值\",\"StepTween，使用 double.floor 确保结果永远不会大于使用 Tween<double>的值\",\"在使用时，如果 Tween 确定不会变化，就可以将其保存在static final对象中以便在需要的地方共享同一个对象，而非在 State.build 方法中实时创建。\"]},\"359\":{\"h\":\"CurveTween\",\"t\":[\"CurveTween 继承自 Animatable<double>，常见的用法是传入AnimationController.drive方法中获取一个新的 Animation<double>:\",\"class CurveTween extends Animatable<double> { /// Creates a curve tween. /// /// The [curve] argument must not be null. CurveTween({ required this.curve }) : assert(curve != null); /// The curve to use when transforming the value of the animation. Curve curve; @override double transform(double t) { if (t == 0.0 || t == 1.0) { assert(curve.transform(t).round() == t); return t; } return curve.transform(t); } @override String toString() => '${objectRuntimeType(this, 'CurveTween')}(curve: $curve)'; }\",\"Tween 和 CurveTween 的主要区别在于，Tween 需要 T？类型的 begin 和 end 来创建线性插值，而 CurveTween 则需要 Curve 以便为 Animation<double>创建（非）线性插值。\"]},\"360\":{\"h\":\"Curve\",\"t\":[\"ParametricCurve<T>是 Curve 的父类，其提供 ParametricCurve.transform 方法将 double t（在[0.0,1.0]之间）转化为曲线在 t 处对应的值 T t：\",\"abstract class ParametricCurve<T> { T transform(double t) { assert(t != null); assert(t >= 0.0 && t <= 1.0, 'parametric value $t is outside of [0, 1] range.'); return transformInternal(t); } @protected T transformInternal(double t) { throw UnimplementedError(); } }\",\"从其源码可以看出，ParametricCurve.transform 主要是检查入参是否合规，其主要逻辑在 ParametricCurve.transformInternal 中，一般子类只需要实现后者即可。\",\"Curve 继承自 ParametricCurve<double>，也就是说它只能产生 double 类型的插值：\",\"abstract class Curve extends ParametricCurve<double> { /// Abstract const constructor to enable subclasses to provide /// const constructors so that they can be used in const expressions. const Curve(); @override double transform(double t) { if (t == 0.0 || t == 1.0) { // 这里当 t 为 0.0 或者 1.0 的时候直接返回 t，避免了 double 运算后产生误差 return t; } return super.transform(t); } // 返回一个新的与之相反的 curve Curve get flipped => FlippedCurve(this); }\",\"Curve 重写了父类的 transform 方法以规范对 double t 的处理，但还是建议子类只需要实现 ParametricCurve.transformInternal 方法。\",\"我们以 Curve 的子类_Linear 为例，查看实现 Curve 的过程：\",\"class _Linear extends Curve { const _Linear._(); @override double transformInternal(double t) => t; }\",\"总的来说，Curve 及其子类定义了一个曲线（可能是线性变化，也可能不是），并提供了double Curve.transform(double t)供使用者获取指定时间 double t 时曲线上对应的值 double。\",\"Flutter 为我们预置了很多丰富的 Curve，可以在这里预览：Curves。\"]},\"361\":{\"h\":\"总结\",\"t\":[\"经过上述分析，我们可以知道，无论是 Tween 还是 CurveTween，作为 Animatable，他们提供了Animation<T> Animatable.animatee(Animation<double> parent)方法，可以返回一个新的，相当于使用Animatable<T>.transform(double parent.value)计算Animation<T>.value的，Animation<T>。\",\"而 Curve，只能通过double transform(double t)计算曲线在 t 位置的值的类，一般可以在 CurveTween、CurveAnimation 的构造方法或者 AnimationController 的 animateTo/animateBack 方法中，以便产生非线性的动画。\"]},\"362\":{\"h\":\"参考资料\",\"t\":[\"Animatable api.flutter.dev\",\"Tween api.flutter.dev\",\"CurveTween api.flutter.dev\",\"Curve api.flutter.dev\",\"Curves api.flutter.dev\"]},\"363\":{\"h\":\"Flutter 图片加载方案分析之 Image\",\"t\":[\"Flutter 默认提供了Image用于从网络、文件等加载图片，并且使用ImageCache统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了flutter_cached_network_image、extended_image等基于 Flutter 原生的解决方案，以及power_image等基于混合开发的解决方案。\",\"本文对 Flutter 中的 Image 加载过程、原理做一简单分析。\"]},\"364\":{\"h\":\"图片展示的流程\",\"t\":[\"首先，简单梳理一下图片从加载到展示的过程。\"]},\"365\":{\"h\":\"Image\",\"t\":[\"A widget that displays an image.\",\"在查看 Image 具体实现之前，先了解几个基础方法：\",\"ImageConfiguration createLocalImageConfiguration(BuildContext context, { Size? size }) ：创建 ImageConfiguration，一般用于 state.didChangeDependencies 等依赖变化时会调用的地方，其创建的 ImageConfiguration 对象会传入 BoxPainter.paint 或者 ImageProvider.resolver 方法中以用来获取 ImageStream。\",\"Future<void> precacheImage(...) 预先加载 image 到 ImageCache 中，以便 Image、BoxDecoration、FadeInImage 等能够更快地加载 image。\",\"Image 是 Flutter 中用于展示图片的 Widget，主要有如下用法：\",\"Image.new, for obtaining an image from an ImageProvider.\",\"Image.asset, for obtaining an image from an AssetBundle using a key.\",\"Image.network, for obtaining an image from a URL.\",\"Image.file, for obtaining an image from a File.\",\"Image.memory, for obtaining an image from a Uint8List.\",\"支持的格式有：JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP，以及依赖于特定设备的格式（Flutter 会尝试使用平台 API 解析未知格式）。\",\"通过指定cacheWidth和cacheHeight可以让引擎按照指定大小解码图片，可以降低 ImageCache 占用的内存。\",\"Image(...)构造函数中只有一个必传项ImageProvider image用于获取图片，其余四种构造方法也都是在此方法的基础上分别指定了各自的 ImageProvider，以Image.network为例：\",\"Image.network( String src, { Key? key, double scale = 1.0, ..., int? cacheWidth, int? cacheHeight, }) : image = ResizeImage.resizeIfNeeded(cacheWidth, cacheHeight, NetworkImage(src, scale: scale, headers: headers)), ... super(key: key);\",\"上述代码中的 ResizeImage，NetworkImage 等都继承自 ImageProvider，ImageProvider.resolve方法创建并返回 ImageStream 供 Image 使用，内部通过ImageProvider.resolveStreamForKey方法从 ImageCache 或者子类指定的途径（比如 NetworkImage 会从网络）加载图片（并保存到 ImageCache）。\"]},\"366\":{\"h\":\"_ImageState\",\"t\":[\"Image是 StatefulWidget，处理 image 的主要逻辑在 _ImageState 中：其混入了WidgetsBindingObserver以便监听系统生命周期；在内部通过监听ImageStream获得ImageInfo并最终在_ImageState.build方法中创建RawImage；RawImage 是一个LeafRenderObjectWidget，会创建RenderImage并在RenderImage.paint根据之前获取的信息调用DecorationImagePainter.paintImage方法通过canvas.drawImageRect绘制图片。\"]},\"367\":{\"h\":\"_resolveImage\",\"t\":[\"当依赖变化（didChangeDependencies()）、Widget 变化（didUpdateWidget(Image oldWidget)）、以及热更新（reassemble()）时，_ImageState 会执行_resolveImage()方法通过 ImageProvider 获取 ImageStream：\",\"void _resolveImage() { // ScrollAwareImageProvider 用于防止在快速滑动的时候加载图片 final ScrollAwareImageProvider provider = ScrollAwareImageProvider<Object>( context: _scrollAwareContext, imageProvider: widget.image,// 用户/构造方法指定的 ImageProvider ); // 通过 ImageProvider 获取 ImageStream final ImageStream newStream = provider.resolve(createLocalImageConfiguration( context, size: widget.width != null && widget.height != null ? Size(widget.width!, widget.height!) : null, )); assert(newStream != null); _updateSourceStream(newStream); }\",\"我们还可以注意到，当在_resolveImage()中获取到 ImageStream 之后，会通过_updateSourceStream()更新 ImageStream。\"]},\"368\":{\"h\":\"_updateSourceStream\",\"t\":[\"在此方法中，先是更新了ImageStream? _imageStream 对象，然后根据_isListeningToStream的值执行_imageStream!.addListener(_getListener())更新 ImageStream 的 Listener：\",\"ImageStreamListener _getListener({bool recreateListener = false}) { if(_imageStreamListener == null || recreateListener) { _lastException = null; _lastStack = null; _imageStreamListener = ImageStreamListener( _handleImageFrame,// 图片加载成功，使用获得的 imageInfo 更新 RawImage onChunk: widget.loadingBuilder == null ? null : _handleImageChunk,// 展示 loading 动画 onError: widget.errorBuilder != null || kDebugMode ? (Object error, StackTrace? stackTrace) { ... } : null,// 展示加载失败 ); } return _imageStreamListener!; }\",\"可以看到，在 ImageStreamListener 中，根据 ImageStream 的不同状态分别更新 Image 的显示。\"]},\"369\":{\"h\":\"_handleImageFrame\",\"t\":[\"_handleImageFrame()方法使用 ImageStream 中返回的ImageInfo，调用setState方法更新_ImageState 中的ImageInfo? **_imageInfo**属性，从而刷新 Image 展示。\",\"void _handleImageFrame(ImageInfo imageInfo, bool synchronousCall) { setState(() { _replaceImage(info: imageInfo);// 在这里刷新 imageInfo，触发重建 _loadingProgress = null; _lastException = null; _lastStack = null; _frameNumber = _frameNumber == null ? 0 : _frameNumber! + 1; _wasSynchronouslyLoaded = _wasSynchronouslyLoaded | synchronousCall; }); } void _replaceImage({required ImageInfo? info}) { _imageInfo?.dispose(); _imageInfo = info; }\",\"ImageInfo类内部持有ui.Image和其对应的scale，以及一个获取图片像素大小的sizeBytes方法。\",\"// ImageInfo: a [dart:ui.Image] object with its corresponding scale. ImageInfo({ required this.image, this.scale = 1.0, this.debugLabel }) int get sizeBytes => image.height * image.width * 4;\"]},\"370\":{\"h\":\"build\",\"t\":[\"上面分析了_ImageState 如何监听使用 ImageProvider 获取到的 ImageStream，从中获取 ImageInfo 更新自己的 ImageInfo? _imageInfo 属性，那么这个属性是如何影响到我们的 Image 展示图片的呢，关键就在 build 方法中：\",\"Widget build(BuildContext context) { if (_lastException != null) { if (widget.errorBuilder != null) return widget.errorBuilder!(context, _lastException!, _lastStack); if (kDebugMode) return _debugBuildErrorWidget(context, _lastException!); } // 注意_ImageState 内部其实是使用 ui.Image _imageInfo?.image 创建了 RawImage 来展示图片 Widget result = RawImage( // Do not clone the image, because RawImage is a stateless wrapper. // The image will be disposed by this state object when it is not needed // anymore, such as when it is unmounted or when the image stream pushes // a new image. image: _imageInfo?.image,// 这里会在 ImageStream 获取到 ImageInfo 之后更新 debugImageLabel: _imageInfo?.debugLabel, width: widget.width, height: widget.height, scale: _imageInfo?.scale ?? 1.0, color: widget.color, opacity: widget.opacity, colorBlendMode: widget.colorBlendMode, fit: widget.fit, alignment: widget.alignment, repeat: widget.repeat, centerSlice: widget.centerSlice, matchTextDirection: widget.matchTextDirection, invertColors: _invertColors, isAntiAlias: widget.isAntiAlias, filterQuality: widget.filterQuality, ); if (!widget.excludeFromSemantics) { result = Semantics( container: widget.semanticLabel != null, image: true, label: widget.semanticLabel ?? '', child: result, ); } if (widget.frameBuilder != null) result = widget.frameBuilder!(context, result, _frameNumber, _wasSynchronouslyLoaded); if (widget.loadingBuilder != null) // 如果有 loadingBuilder 就包裹 result，所以注意进度为 100% 时要切换回图片， // 否则会一直显示进度，而非加载的图片 result = widget.loadingBuilder!(context, result, _loadingProgress); return result; }\",\"ImageInfo.image 是ui.Image对象，是原始的 image 像素，通过RawImage传入到Canvas.drawImageRect或者Canvas.drawImageNine绘制图片。\"]},\"371\":{\"h\":\"RawImage\",\"t\":[\"A widget that displays a [dart:ui.Image] directly.\",\"RawImage 继承自 LeafRenderWidget，可以直接展示ui.Image的内容，后者是解码的图片数据的不透明句柄（Opaque handle to raw decoded image data (pixels)）、是对_Image类的封装、对外提供宽高以及Image.toByteData（将ui.Image对象转化为ByteData，ByteData 可以直接传入Canvas.drawImageRect方法第一个参数）。\",\"RawImage 主要逻辑就是创建/更新 RenderImage 的时候将从_ImageState.build方法获得的ui.Image? image 的 clone 传入（其实就是使用ui.Image? image对应的_Image _image 新建了一个 ui.Image，每一个 ui.Image 都是_image 的一个句柄，只有当没有 ui.Image 指向_image 时后者才会真正的 dispose）。\"]},\"372\":{\"h\":\"RenderImage\",\"t\":[\"An image in the render tree.\",\"RenderImage 作为一个 RenderBox，在从 RawImage 那里拿到ui.Image? _image之后，然后在其RenderImage.paint方法中，会调用paintImage方法绘制_image代表的图片。\",\"ui.Image 实际是 ui._Image 的包装类，它的 width、height、toByteData 等方法最终都是调用 ui._Image 对应的实现。\",\"paintImage 方法是位于 lib\\\\src\\\\painting\\\\decoration_image.dart 的全局方法，在其内部调用 canvas 绘制_image 对应的图片。\",\"至此，我们可以看到，在Image中，根据构造方法的不同创建了不同的ImageProvider对象作为Image.image参数；\",\"然后在 _ImageState 中，使用ImageProvider.resolve方法创建并更新ImageStream? _imageStream，并且监听ImageStream以便在图片加载成功之后获取ImageInfo? _imageInfo；\",\"这个ImageInfo是对ui.Image的封装类，在_ImageState.build方法中被传入RawImage，后者则创建了RenderImage并最终将 ui.Image 的内容绘制在屏幕上面。\"]},\"373\":{\"h\":\"图片获取与缓存\",\"t\":[\"到目前为止，我们大体梳理了图片展示的这部分流程，此外，还有一部分同样重要的流程——图片的获取与缓存。\"]},\"374\":{\"h\":\"ImageProvider\",\"t\":[\"ImageProvider 是获取图片资源的基类，其他类可以调用ImageProvider.resolve方法获取 ImageStream ，此方法会调用ImageCache.putIfAbsent优先从 ImageCache 中获取，如果没有则调用ImageProvider.load方法获取并缓存到 ImageCache 中。\",\"其子类一般只需要重写ImageProvider的ImageStreamCompleter load(T key, DecoderCallback decode)和Future<T> obtainKey(ImageConfiguration configuration)方法即可。\",\"以NetworkImage加载网络图片的过程为例：\",\"我们通过NetworkImage()方法获取的实际是network_image.NetworkImage对象。\",\"当_ImageState._resolveImage()方法调用ImageProvider.resolve方法时，内部会调用ImageProvider.resolveStreamForKey方法，在其内部会执行：\",\"通过ImageProvider.obtainKey获取图片对应的 key\",\"执行PaintingBinding.*instance*!.imageCache!.putIfAbsent(key,() =>load(key, PaintingBinding.*instance*!.instantiateImageCodec),onError: handleError,)方法，优先从 imageCache 中获取缓存的图片，没有的话执行ImageProvider.load方法获取图片。\",\"对于network_image.NetworkImage对象，他的obtainKey()和load()方法实现如下：\",\"class NetworkImage extends image_provider.ImageProvider<image_provider.NetworkImage> implements image_provider.NetworkImage { const NetworkImage(this.url, { this.scale = 1.0, this.headers }) @override Future<NetworkImage> obtainKey(image_provider.ImageConfiguration configuration) { // 注意这里的 key 是 NetworkImage 对象，也就是说网络图片加载的 url，scale， // header 等一致的话才会被认为命中缓存 return SynchronousFuture<NetworkImage>(this); } @override ImageStreamCompleter load(image_provider.NetworkImage key, image_provider.DecoderCallback decode) { // Ownership of this controller is handed off to [_loadAsync]; it is that // method's responsibility to close the controller's stream when the image // has been loaded or an error is thrown. final StreamController<ImageChunkEvent> chunkEvents = StreamController<ImageChunkEvent>(); return MultiFrameImageStreamCompleter( codec: _loadAsync(key as NetworkImage, chunkEvents, decode),// 真正从网络加载图片的方法 chunkEvents: chunkEvents.stream, scale: key.scale, debugLabel: key.url, informationCollector: () => <DiagnosticsNode>[ DiagnosticsProperty<image_provider.ImageProvider>('Image provider', this), DiagnosticsProperty<image_provider.NetworkImage>('Image key', key), ], ); } }\",\"在这其中，network_image.NetworkImage._loadAsync()方法才是真正使用HttpClient从网上获取图片资源的方法（实际上 AssetBundleImageProvider、FileImage 和 MemoryImage 等一众 ImageProvider 等都约定俗成在_loadAsync 中执行真正获取图片的逻辑），返回值 Future<ui.Codec>和 ui.Image 的关系如下：\",\"Future<ui.Image> decodeImageFromList(Uint8List bytes) async { final ui.Codec codec = await PaintingBinding.instance.instantiateImageCodec(bytes); final ui.FrameInfo frameInfo = await codec.getNextFrame(); return frameInfo.image; }\"]},\"375\":{\"h\":\"ImageCache\",\"t\":[\"Class for caching images.\",\"在上面方分析 ImageProvider 的时候，我们注意到，每次通过ImageProvider.resolveStreamForKey方法获取 ImageStream 时，都会调用PaintingBinding.instance!.imageCache.putIfAbsent方法优先获取Image 对象的缓存，这就涉及到和 Image 缓存有关的类——ImageCache。\",\"ImageCache 对象全局唯一，使用 LRU 算法最多缓存1000 张或者最大 100MB 图片，可以分别使用maximumSize和maximumSizeBytes修改配置。\",\"其内部维持有三个 Map：\",\"Map<Object, PendingImage> _pendingImages 正在加载中的图片，可能可能同时也是_liveImage（对应的 ImageStream 已经被监听了）。\",\"Map<Object, _CachedImage> _cache 缓存的图片，maximumSize 和 maximumSizeBytes 限制针对的是_cache。\",\"Map<Object, _LiveImage> _liveImages 正在使用的图片，他的 ImageStreamCompleters 至少有一个 listener，可能同时在_pendingImages（所以这里的_LiveImage 的sizeBytes可能为 null）或者_liveImages中。\",\"_CachedImage和_LiveImage都继承自_CachedImageBase，其内部持有ImageStreamCompleter，图片的 handlerImageStreamCompleterHandle，以及图片大小sizeBytes。\",\"ImageCacheStatus处理 ImageCache 缓存的图片状态：\",\"pending，还没有加载完成的 image，如果被监听的话，还会是live的\",\"keepAlive，图片会被ImageCache._cache保存。可能是 live 的，但不会 pending 的。\",\"live，图片会一直被持有，除非ImageStreamCompleter没有 listener 了。可能是 pending 的，也可能是 keepAlive 的\",\"untracked，不会被缓存的图片（上述三值都为 false）。\",\"可以使用ImageCache.statusForKey或者ImageProvider.obtainCacheStatus获取图片状态ImageCacheStatus。\",\"此外，ImageCache 还提供ImageCache.evict方法从缓存中清除指定图片。\"]},\"376\":{\"h\":\"putIfAbsent\",\"t\":[\"当 ImageProvider 调用ImageCache.putIfAbsent方法获取 ImageStreamCompleter 时，会依次尝试从_pendingImages 、_cache 、_liveImages 中读取，如果都没有则会尝试执行传入的 loader 方法获取。\",\" ImageStreamCompleter? putIfAbsent(Object key, ImageStreamCompleter Function() loader, { ImageErrorListener? onError }) { ImageStreamCompleter? result = _pendingImages[key]?.completer; // Nothing needs to be done because the image hasn't loaded yet. // 1. 如果图片还在加载中，就直接返回 if (result != null) { return result; } // Remove the provider from the list so that we can move it to the // recently used position below. // Don't use _touch here, which would trigger a check on cache size that is // not needed since this is just moving an existing cache entry to the head. final _CachedImage? image = _cache.remove(key); if (image != null) { // The image might have been keptAlive but had no listeners (so not live). // Make sure the cache starts tracking it as live again. // 2. 如果_cache 中已经有了，就将其加入_liveImages 并返回 _trackLiveImage( key, image.completer, image.sizeBytes, ); _cache[key] = image; return image.completer; } // 3. 如果_liveImages 中已经有了，而 cache 中没有，就加入_cache， // 此时会检测大小和数量（这种属于图片刚下载完，或者已有缓存被清理） final _LiveImage? liveImage = _liveImages[key]; if (liveImage != null) { _touch( key, _CachedImage( liveImage.completer, sizeBytes: liveImage.sizeBytes, ), timelineTask, ); if (!kReleaseMode) { timelineTask!.finish(arguments: <String, dynamic>{'result': 'keepAlive'}); } return liveImage.completer; } // 4.1 如果_pendingImages、_cacheImages、_liveImages 中都没有，就去下载 // 并加入到_liveImages 中，此时_LiveImage.sizeBytes 为 null // 注意这里只是加入到_liveImages 中追踪，并未使用_cache， // 故而也【不受其最大数量和最大总大小约束】 try { result = loader(); _trackLiveImage(key, result, null); } catch (error, stackTrace) { ... } // If we're doing tracing, we need to make sure that we don't try to finish // the trace entry multiple times if we get re-entrant calls from a multi- // frame provider here. bool listenedOnce = false; // We shouldn't use the _pendingImages map if the cache is disabled, but we // will have to listen to the image at least once so we don't leak it in // the live image tracking. // If the cache is disabled, this variable will be set. _PendingImage? untrackedPendingImage; // 图片加载过程中的回调 void listener(ImageInfo? info, bool syncCall) { int? sizeBytes; if (info != null) { sizeBytes = info.sizeBytes; info.dispose(); } final _CachedImage image = _CachedImage( result!, sizeBytes: sizeBytes, ); _trackLiveImage(key, result, sizeBytes); // Only touch if the cache was enabled when resolve was initially called. // 4.2 图片加载成功，如果有缓存，就将此图片加入_cache 中，此时会检测大小和数量 // 并且这里的 sizeBytes 是图片实际大小 if (untrackedPendingImage == null) { _touch(key, image, listenerTask); } else { image.dispose(); } final _PendingImage? pendingImage = untrackedPendingImage ?? _pendingImages.remove(key); if (pendingImage != null) { pendingImage.removeListener(); } listenedOnce = true; } final ImageStreamListener streamListener = ImageStreamListener(listener); if (maximumSize > 0 && maximumSizeBytes > 0) { _pendingImages[key] = _PendingImage(result, streamListener); } else { untrackedPendingImage = _PendingImage(result, streamListener); } // Listener is removed in [_PendingImage.removeListener]. result.addListener(streamListener); return result; }\",\"经过上述分析可以知道，当_cache、_liveImages、_pendingImages 中都没有指定图片时，会从网络下载（或者磁盘、asset 等），而在图片完全加载完成之前，_pendingImages 中下载图片所占大小是没有被 ImageCache 追踪的，也就是说ImageCache._cache 的最大个数和总大小限制都不会管理这部分图片；故而面对大量高清大图加载的场景（比如，五列 1:1 网格加载平均大小几 Mb 的网络图片），如果快速滑动会导致_pendingImages 急速增大，这样下载中且还未完全下载的图片所占用的内存会逐渐累计，从而导致 Flutter APP内存暴增，页面卡顿等（本地资源不容易出现是因为从 load 到图片加载完成间隔比较短，而网络图片由于网速等导致_pendingImages 中会累计很多正在下载中的图片，会比较明显）。\",\"那些在 Flutter 中加载图片并且完全采用 ImageCache 管理图片内存的图片加载框架比如 Image/ExtendedImage/CachedNetworkImage 等都存在此问题；阿里的 PowerImage 由于将图片下载这个过程交给了原生成熟的图片加载库处理，使得 ImageCache 只管理已经加载完成的图片，从而避免了上述情况。\",\"可以看到，以从网络加载图片为例，Flutter 原生提供的 Image 只有内存中的 ImageCache 一级缓存，如果 ImageCache 没有指定的图片（首次加载或者缓存被清空）则会再次从网络加载，这会导致多图列表的时候图片被频繁的回收/重新下载，从而影响用户体验。\",\"为了解决上述问题，涌现了很多第三方图片加载控件：\",\"extended_image 对官方 Image 的二次开发，增加了磁盘缓存。\",\"flutter_cached_network_image 使用sqflite 数据库管理缓存的网络图片加载库，增加了磁盘缓存。\",\"power_image 使用于混合项目的图片加载库，提供ffi和texture两种图片展示方式，依赖于原生图片加载库（比如Glide）加载图片、管理缓存。\"]},\"377\":{\"h\":\"总结\",\"t\":[\"简单总结一下 Flutter 原生 Image 组件加载图片的流程：\",\"flutter_image_class_structure.png\",\"简单来说如下：\",\"用户通过 Image Widget 的各个构造方法创建指定的 ImageProvider；\",\"在_ImageState 中使用ImageProvider.resolve(ImageConfiguration)获取并监听 ImageStream（listener 为 ImageStreamListener）；\",\"ImageProvider 会按照传入的 ImageConfiguration 生成的 key 在 ImageCache 中查找对应的缓存，没有的话则先加载再缓存；\",\"当 ImageProvider 成功加载图片时，ImageStreamListener 获得 ImageInfo 时，并触发_ImageState.build()方法将ui.Image _imageInfo?.image传入 RawImage 中；\",\"作为一个 LeafRenderObjectWidget，RawImage 创建 RenderImage 并传入ui.Image? image?.clone()作为RenderImage.image，此后再在RenderImage.paint方法中调用系统的paintImage()方法通过canvas.drawImageRect绘制图片内容。\"]},\"378\":{\"h\":\"参考资料\",\"t\":[\"Image_api.flutter.dev京东在 Flutter 加载大量图片导致的内存溢出的优化实践\"]},\"379\":{\"h\":\"Flutter 图片加载方案分析之 extended_image\",\"t\":[\"Flutter 默认提供了Image用于从网络、文件等加载图片，并且使用ImageCache统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了flutter_cached_network_image、extended_image等基于 Flutter 原生的解决方案，以及power_image等基于混合开发的解决方案。\",\"本文对 extended_image 加载过程、原理做一简单分析。\"]},\"380\":{\"h\":\"extended_image\",\"t\":[\"extended_image是基于官方 Image 的拓展组件，支持加载以及失败显示，缓存网络图片，缩放拖拽图片，图片浏览 (微信掘金效果)，滑动退出页面 (微信掘金效果)，编辑图片 (裁剪旋转翻转)，保存，绘制自定义效果等功能。\",\"本文主要对其加载缓存网络图片的流程做一分析，因为这个库是官方 Image 的拓展，所以我们会在之前对 Image 的分析基础上进行对比分析。\",\"extended_image 的架构图如下：\",\"extended_image_class_structure\"]},\"381\":{\"h\":\"分析\",\"t\":[\"因为 extended_image 的定位是官方 Image 的拓展版，所以大部分使用方式和官方类似。\"]},\"382\":{\"h\":\"ExtendedImage\",\"t\":[\"他的构造函数分别是：\",\"ExtendedImage\",\"ExtendedImage.asset\",\"ExtendedImage.file\",\"ExtendedImage.memory\",\"ExtendedImage.network\",\"同样是在构造函数中指定并创建 ImageProvider，不过 extented_image 库的 ImageProvider 都是继承自官方 ImageProvider 并且混入了ExtendedImageProvider的子类。以ExtendedImage.network为例，创建的 ImageProvider 类型是ExtendedNetworkImageProvider。\",\"其余的步骤和我们之前分析的官方 Image 组件类似，在 _ExtendedImageState 中使用 ImageProvider 获取并监听 ImageStream，当成功加载图片之后获得ImageInfo? _imageInfo并刷新页面，在_ExtendedImageState.build方法中，虽然 extended_image 增加了一些特有的加载中、加载失败、手势等封装，但最后还是使用ImageInfo.image创建ExtendedRawImage以展示图片内容。\",\"如此可见，在从网络加载图片这部分内容来看，ExtendedImage 和 Image 的主要不同在于ExtendedNetworkImageProvider的实现：\"]},\"383\":{\"h\":\"ExtendedNetworkImageProvider\",\"t\":[\"这部分内容的代码在extended_image_library中。\",\"ExtendedNetworkImageProvider 继承自ImageProvider，混入了ExtendedImageProvider，后者提供了get imageCache/instantiateImageCodec/resolveStreamForKey等一系列通用方法。\",\"下面是 ExtendedNetworkImageProvider 的源码：\",\"abstract class ExtendedNetworkImageProvider extends ImageProvider<ExtendedNetworkImageProvider> with ExtendedImageProvider<ExtendedNetworkImageProvider> { factory ExtendedNetworkImageProvider( String url, { double scale, Map<String, String>? headers, bool cache, int retries, Duration? timeLimit, Duration timeRetry, CancellationToken? cancelToken, String? cacheKey, bool printError, bool cacheRawData, String? imageCacheName, Duration? cacheMaxAge, }) = network_image.ExtendedNetworkImageProvider }\",\"ExtendedNetworkImageProvider 是个抽象类，他的逻辑在network_image.ExtendedNetworkImageProvider中：\",\"import 'extended_network_image_provider.dart' as image_provider; class ExtendedNetworkImageProvider extends ImageProvider<image_provider.ExtendedNetworkImageProvider> with ExtendedImageProvider<image_provider.ExtendedNetworkImageProvider> implements image_provider.ExtendedNetworkImageProvider { // 此方法获取的图片会被 ImageProvider 缓存到 ImageCache 中 @override ImageStreamCompleter load( image_provider.ExtendedNetworkImageProvider key, DecoderCallback decode) { final StreamController<ImageChunkEvent> chunkEvents = StreamController<ImageChunkEvent>(); return MultiFrameImageStreamCompleter( codec: _loadAsync(// 调用_loadAsync 方法加载图片 key as ExtendedNetworkImageProvider, chunkEvents, decode, ), scale: key.scale, chunkEvents: chunkEvents.stream, informationCollector: () { ... }, ); } Future<ui.Codec> _loadAsync( ExtendedNetworkImageProvider key, StreamController<ImageChunkEvent> chunkEvents, DecoderCallback decode, ) async { assert(key == this); final String md5Key = cacheKey ?? keyToMd5(key.url); ui.Codec? result; if (cache) { try { // 如果需要缓存图片，就调用_loadCache 优先从缓存中读取，没有的话先从网络下载， // 成功之后再缓存到本地缓存文件目录 final Uint8List? data = await _loadCache( key, chunkEvents, md5Key, ); if (data != null) { // 解析加载的图片信息 result = await instantiateImageCodec(data, decode); } } catch (e) { if (printError) { print(e); } } } if (result == null) { try { // 如果不需要缓存或者从缓存中读取/下载失败了，就从网络加载 final Uint8List? data = await _loadNetwork( key, chunkEvents, ); if (data != null) { result = await instantiateImageCodec(data, decode); } } catch (e) { if (printError) { print(e); } } } // 如果还是失败，就展示失败信息 if (result == null) { //result = await ui.instantiateImageCodec(kTransparentImage); return Future<ui.Codec>.error(StateError('Failed to load $url.')); } return result; } }\",\"从上述代码可以看到，如果需要缓存时，除了 ImageCache 本身的缓存外，ExtendedNetworkImageProvider 还会执行_loadCache尝试从本地文件中读取缓存：\",\"Future<Uint8List?> _loadCache( ExtendedNetworkImageProvider key, StreamController<ImageChunkEvent>? chunkEvents, String md5Key, ) async { final Directory _cacheImagesDirectory = Directory( join((await getTemporaryDirectory()).path, cacheImageFolderName)); Uint8List? data; // 1. 先尝试从缓存文件中读取图片 if (_cacheImagesDirectory.existsSync()) { final File cacheFlie = File(join(_cacheImagesDirectory.path, md5Key)); if (cacheFlie.existsSync()) { if (key.cacheMaxAge != null) { final DateTime now = DateTime.now(); final FileStat fs = cacheFlie.statSync(); if (now.subtract(key.cacheMaxAge!).isAfter(fs.changed)) { cacheFlie.deleteSync(recursive: true); } else { data = await cacheFlie.readAsBytes(); } } else { data = await cacheFlie.readAsBytes(); } } } // create folder else { await _cacheImagesDirectory.create(); } // load from network if (data == null) { // 2.1 缓存不存在或者读取失败，先仅从网络加载图片 data = await _loadNetwork( key, chunkEvents, ); if (data != null) { // cache image file // 2.2 如果从网络成功加载图片，则将图片写入文件缓存 await File(join(_cacheImagesDirectory.path, md5Key)).writeAsBytes(data); } } return data; }\",\"上述代码中执行到的ExtendedNetworkImageProvider._loadNetwork()方法只会使用HttpClient从网络中下载图片并返回。\"]},\"384\":{\"h\":\"ExtendedImageProvider\",\"t\":[\"此外，之前提到的ExtendedImageProvider为 extended_image 库中的 ImageProvider 提供了一些通用的方法：\",\"/// The cached raw image data 缓存图片原始数据，而不必每次都使用 ui.Image.toByteData() 获取 Map<ExtendedImageProvider<dynamic>, Uint8List> rawImageDataMap = <ExtendedImageProvider<dynamic>, Uint8List>{}; /// The imageCaches to store custom ImageCache，缓存 ImageCache /// 可以指定一个 ImageCache 来缓存一些图片。这样可以一起处理它们，不会影响其他的图片缓存。 Map<String, ImageCache> imageCaches = <String, ImageCache>{}; mixin ExtendedImageProvider<T extends Object> on ImageProvider<T> { bool get cacheRawData; String? get imageCacheName; ImageCache get imageCache { if (imageCacheName != null) { return imageCaches.putIfAbsent(imageCacheName!, () => ImageCache()); } else { return PaintingBinding.instance.imageCache; } } }\",\"此外，还改动了ExtendedImageProvider.resolveStreamForKey方法以使用指定的 ImageCache。\",\"void resolveStreamForKey( ImageConfiguration configuration, ImageStream stream, T key, ImageErrorListener handleError, ) { // This is an unusual edge case where someone has told us that they found // the image we want before getting to this method. We should avoid calling // load again, but still update the image cache with LRU information. if (stream.completer != null) { final ImageStreamCompleter? completer = imageCache.putIfAbsent( key, () => stream.completer!, onError: handleError, ); assert(identical(completer, stream.completer)); return; } final ImageStreamCompleter? completer = imageCache.putIfAbsent( key, () => load(key, PaintingBinding.instance.instantiateImageCodec), onError: handleError, ); if (completer != null) { stream.setCompleter(completer); } }\",\"综上所见，ExtendedImageProvider 的主要作用是借助rawImageDataMap提供了缓存图片原始数据的功能，此外还提供了一个 ImageCache 分组的方法，以便对一部分图片缓存统一处理。\"]},\"385\":{\"h\":\"总结\",\"t\":[\"仅就从网络加载图片而言，extended_image 和 Flutter 官方 Image 组件的主要区别在于：在 ImageCache 之外，多了一层本地磁盘缓存，如果这二者都未命中缓存则从网络下载图片。\",\"除此之外，extended_image 本身还提供了诸如图片缩放拖拽、滑动退出等图片操作常用的“大而全”的功能。这部分见仁见智，如果 APP 需求刚好需要用到这些功能的话，extended_image 是个不错的选择，但是如果只是想解决图片缓存问题的话，可能会显得有些臃肿。\",\"另外一个常用的图片库flutter_cached_network_image则是借助flutter_cache_manager实现缓存网络图片的功能，相对比较轻量。\",\"上述两种库都是基于 Flutter Image 组件实现图片加载、缓存，阿里巴巴出品的power_image则是一款为 Flutter-Native 混合项目开发的图片加载库，借助 Texture 和 ffi 通过 Native 端已有的图片加载库完成图片加载、缓存的功能，Flutter 端只负责展示（以及 ImageCache 缓存）。\"]},\"386\":{\"h\":\"参考资料\",\"t\":[\"extended_image\",\"extended_image_library\"]},\"387\":{\"h\":\"Flutter 图片加载方案分析之 power_image\",\"t\":[\"Flutter 默认提供了Image用于从网络、文件等加载图片，并且使用ImageCache统一管理图片缓存，但有时候并不能满足使用需求（比如网络图片没有磁盘缓存，导致每次 ImageCache 清除缓存之后又要从网络下载），所以又出现了flutter_cached_network_image、extended_image等基于 Flutter 原生的解决方案，以及power_image等基于混合开发的解决方案。\",\"本文对 Alibaba 中的 power_image 加载过程、原理做一简单分析。\"]},\"388\":{\"h\":\"power_image\",\"t\":[\"power_image是阿里巴巴出品的 Flutter 混合开发图片加载库，通过texture和ffi技术借助原生图片加载库加载图片、Flutter 端展示图片。\",\"无论是 Flutter Image 组件，还是第三方的extende_image、flutter_cached_nework_image都是在 Flutter 端加载解析图片，这些方案对一般纯 Flutter 开发的 APP 来说基本可以满足要求，但是对于大多数混合开发的 APP 来说，这些方案会在 Flutter 和 Native 同时存在两份图片资源造成内存浪费，此外根据贝壳的分析，Flutter 端解决方案存在图片内存释放时机（Flutter 引擎持有的 SkImage 释放时机）以及超大图内存峰值等问题。\",\"而power_image能够较好的解决上述问题，其整体架构如下：\",\"类结构图：\",\"架构图：\",\"power_image可以大体划分为Flutter 端图片展示和Native 图片加载两部分，下面分别分析。\"]},\"389\":{\"h\":\"Flutter 端图片展示\"},\"390\":{\"h\":\"PowerImage\",\"t\":[\"PowerImage继承自StatefulWidget，提供多种创建方式：既可以使用预设的PowerImage.network、PowerImage.file等构造函数从网络、文件等获取图片；也可以使用PowerImage.type、PowerImage.options等自定义通道获取图片并展示；或者使用PowerImage()完全自定义。\",\"除了PowerImage()构造函数之外，上述其余构造函数都根据传入的String? renderingType指定了 PowerImage 特定的PowerImageProvider image属性（是ffi还是texture）用于获取图片。\"]},\"391\":{\"h\":\"PowerImageState\",\"t\":[\"class PowerImageState extends State<PowerImage> { @override Widget build(BuildContext context) { ImageErrorWidgetBuilder? errorWidgetBuilder = widget.errorBuilder; errorWidgetBuilder ??= (...) { return SizedBox(...); }; if (widget.image.runtimeType == PowerTextureImageProvider) { return PowerTextureImage( provider: widget.image as PowerTextureImageProvider, ...); } else if (widget.image.runtimeType == PowerExternalImageProvider) { return PowerExternalImage( provider: widget.image as PowerExternalImageProvider, ... ); } return ImageExt( image: widget.image, imageBuilder: widget.imageBuilder, ... ); } }\",\"在 PowerImageState 的build()方法中，根据不同的PowerImageProvider image类型会返回不同的 Widget：\",\"image是 PowerTextureImageProvider 类型：采用 texture 模式展示图片，返回**PowerTextureImage，最终会返回经过封装的Texture**对象。\",\"image是**PowerExternalImageProvider类型：采用 ffi 模式展示图片，返回PowerExternalImage，最终返回的是RawImage**对象，和使用 Flutter Image 展示图片的流程一致。\",\"其他类型，按照自定义的规则展示。\",\"让我们来分别看一下**PowerTextureImage和PowerExternalImage**的实现：\"]},\"392\":{\"h\":\"PowerTextureImage\",\"t\":[\"class PowerTextureImage extends StatefulWidget { const PowerTextureImage({...}):super(key: key); final PowerTextureImageProvider provider; @override PowerTextureState createState() { return PowerTextureState(); } } class PowerTextureState extends State<PowerTextureImage> { @override Widget build(BuildContext context) { return ImageExt( // 这里的 provider 实际上创建的是一个虚假的 ui.Image? dummy image: widget.provider, frameBuilder: widget.frameBuilder, errorBuilder: widget.errorBuilder, width: widget.width, height: widget.height, fit: widget.fit, alignment: widget.alignment, // 注意，这里会创建一个封装的 Texture，真正展示图片内容 imageBuilder: buildImage, semanticLabel: widget.semanticLabel, excludeFromSemantics: widget.excludeFromSemantics, ); } Widget buildImage(BuildContext context, ImageInfo? imageInfo) { if (imageInfo == null || imageInfo is! PowerTextureImageInfo) { return SizedBox( width: widget.width, height: widget.height, ); } PowerTextureImageInfo textureImageInfo = imageInfo; return ClipRect( child: SizedBox( child: FittedBox( fit: widget.fit ?? BoxFit.contain, alignment: widget.alignment, child: SizedBox( width: textureImageInfo.width?.toDouble() ?? widget.width, height: textureImageInfo.height?.toDouble() ?? widget.height, child: Texture( // 注意，这里的 textureId 是从 provider 创建的 ImageInfo 中获取的 textureId: textureImageInfo.textureId!, ), ), ), width: widget.width, height: widget.height, ), ); } }\"]},\"393\":{\"h\":\"PowerExternalImage\",\"t\":[\"class PowerExternalImage extends StatefulWidget { const PowerExternalImage({...}):super(key: key); final PowerExternalImageProvider provider; @override PowerExteralState createState() => PowerExteralState(); } class PowerExteralState extends State<PowerExternalImage> { @override Widget build(BuildContext context) { return ImageExt( frameBuilder: widget.frameBuilder, errorBuilder: widget.errorBuilder, // provider 会根据 Native 数据创建含有对应的 ui.Image 的 // ImageInfo，展示对应图片 image: widget.provider, width: widget.width, height: widget.height, fit: widget.fit, alignment: widget.alignment, semanticLabel: widget.semanticLabel, excludeFromSemantics: widget.excludeFromSemantics, ); } }\",\"通过对比**PowerTextureImage和PowerExternalImage**的源码可以发现，二者最终还是创建了 ImageExt 对象，只不过 PowerTextureImage 中 ImageExt.imageBuilder 返回了 Texture，而 PowerExternalImage 中 ImageExt.imageBuilder 为 null。\",\"再根据下面的_ImageExtState.build源码可以确定，当使用 PowerTextureImage 时 PowerImage 创建的是封装了的 Texture，而 PowerExternalImage 时则会使用 PowerExternalImageProvider 创建的 ImageInfo 创建 RawImage，这实际上与 Flutter 原有的 Image 组件一致。\",\"// _ImageExtState.build @override Widget build(BuildContext context) { ... Widget result; if (widget.imageBuilder != null) { result = widget.imageBuilder!(context, _imageInfo); } else { result = RawImage( image: _imageInfo?.image, ... ); } ... return result; }\",\"通过上面的分析，可以知道，PowerImage使用从PowerImageProvider 获取的 ImageInfo 来展示图片，采用**texture**方案时，使用 ImageInfo 中的 textureId 并返回 Texture 对象展示图片；而使用 ffi 方案时，会使用 ImageInfo 中的ui.Image image对象传入 RawIamge 展示图片（这部分与 Flutter Image 组件逻辑一致）。\"]},\"394\":{\"h\":\"PowerImageProvider\",\"t\":[\"PowerImageProvider 继承自ImageProviderExt -> ImageProvider，是power_image的关键类之一，主要实现通过 Flutter/Native 跨端通信从 Native 获取/释放图片资源等，创建供 ImageExt 使用的 ImageInfo。\",\"相对于 Flutter 官方的 ImageProvider，除了修改部分类为 power_image 对应的类之外，PowerImageProvider 主要有以下几点改变：\",\"工厂方法PowerImageProvider.options生产 PowerImageProvider：根据传入的 PowerImageRequestOptions 中PowerImageRequestOptions.renderingType的值，分别创建对应的**PowerExternalImageProvider或者PowerTextureImageProvider**。\",\"重写_loadAsync方法，调用 Native 图片库加载图片，并根据返回值调用子类 createImageInfo 方法创建 PowerImageInfo。\"]},\"395\":{\"h\":\"_loadAsync\",\"t\":[\"通过重写_loadAsync方法，PowerImageProvider 实现了不同的子类分别创建 PowerImageInfo 展示图片、统一让 ImageCache 管理图片。\",\"Future<ImageInfo> _loadAsync( PowerImageProvider key, DecoderCallback? decode) async { try { // 跨端通信获取图片资源，后面再详细分析 PowerImageCompleter powerImageCompleter = PowerImageLoader.instance.loadImage(options); Map map = await powerImageCompleter.completer!.future; bool? success = map['success']; // remove multiFrame image cache On Last Listener Removed bool? isMultiFrame = map['_multiFrame']; if (isMultiFrame == true) { _completer! .addOnLastListenerRemovedCallback(() { scheduleMicrotask(() { PaintingBinding.instance!.imageCache!.evict(key); }); }); } _completer = null; if (success != true) { // The network may be only temporarily unavailable, or the file will be // added on the server later. Avoid having future calls to resolve // fail to check the network again. final PowerImageLoadException exception = PowerImageLoadException(nativeResult: map); PowerImageMonitor.instance().anErrorOccurred(exception); throw exception; } // 创建 ImageInfo return createImageInfo(map); } catch (e) { // Depending on where the exception was thrown, the image cache may not // have had a chance to track the key in the cache at all. // Schedule a microtask to give the cache a chance to add the key. scheduleMicrotask(() { PaintingBinding.instance!.imageCache!.evict(key); }); rethrow; } finally { // chunkEvents.close(); } }\",\"在上面的分析中，我们得知，texture和ffi方案分别使用 ImageProvider 提供的 PowerImageInfo 中的int? textureId和ui.Image image展示图片，让我们分别看一下他们是如何获取的：\"]},\"396\":{\"h\":\"PowerTextureImageProvider\",\"t\":[\"class PowerTextureImageProvider extends PowerImageProvider { PowerTextureImageProvider(PowerImageRequestOptions options) : super(options); @override FutureOr<ImageInfo> createImageInfo(Map map) { int? textureId = map['textureId']; int? width = map['width']; int? height = map['height']; return PowerTextureImageInfo.create( textureId: textureId, width: width, height: height); } @override void dispose() { PowerImageLoader.instance.releaseImageRequest(options); super.dispose(); } } class PowerTextureImageInfo extends PowerImageInfo { static ui.Image? dummy; final int? textureId; // 此方法使用一个通用的 ui.Image? dummy 创建 PowerTextureImageInfo // 以便让 ImageCache 能够管理 texture 创建的图片 static FutureOr<PowerTextureImageInfo> create( {int? textureId, int? width, int? height}) async { if (dummy != null) { return PowerTextureImageInfo( textureId: textureId, width: width, height: height, image: dummy!.clone()); } dummy = await _createImage(1, 1); return PowerTextureImageInfo( textureId: textureId, width: width, height: height, image: dummy!.clone()); } } Future<ui.Image> _createImage(int width, int height) async { final Completer<ui.Image> completer = Completer<ui.Image>(); ui.decodeImageFromPixels(// 使用指定的 Uint8List 创建 ui.Image Uint8List.fromList( List<int>.filled(width * height * 4, 0, growable: false)), width, height, ui.PixelFormat.rgba8888, (ui.Image image) { completer.complete(image); }, ); return completer.future; }\"]},\"397\":{\"h\":\"PowerExternalImageProvider\",\"t\":[\"class PowerExternalImageProvider extends PowerImageProvider { PowerExternalImageProvider(PowerImageRequestOptions options) : super(options); @override FutureOr<ImageInfo> createImageInfo(Map map) { Completer<ImageInfo> completer = Completer<ImageInfo>(); int handle = map['handle']; int length = map['length']; int width = map['width']; int height = map['height']; int? rowBytes = map['rowBytes']; ui.PixelFormat pixelFormat = ui.PixelFormat.values[map['flutterPixelFormat'] ?? 0]; // 获取图片在内存中的指针 Pointer<Uint8> pointer = Pointer<Uint8>.fromAddress(handle); // 获取对应内存中的数据 Uint8List pixels = pointer.asTypedList(length); // 根据内存中的数据创建 ui.Image，这里会发生内存拷贝，大图片会出现内存峰值偏高 ui.decodeImageFromPixels(pixels, width, height, pixelFormat, (ui.Image image) { ImageInfo imageInfo = PowerImageInfo(image: image); completer.complete(imageInfo); //释放 platform_image PowerImageLoader.instance.releaseImageRequest(options); }, rowBytes: rowBytes); return completer.future; } }\",\"从上述代码可以看到：\",\"texture 方案采用的 PowerTextureImageProvider 创建的 ImageInfo 对应的 ui.Image image 一个共享的占位符，并不能真正真正绘制内容，实际上图片信息在对应的PowerTextureImageInfo.textureId中；\",\"ffi 方案创建的 ImageInfo 则根据 native 内存中的图片数据创建了对应的 ui.Image，与 Flutter 默认的 ImageProvider 提供的 ImageInfo 一样可以被 RawImage 正常使用。\",\"这里需要注意，虽然 texture 和 ffi 都采用了 ImageCache 来管理图片缓存，甚至 ffi 的内存也在 Flutter 侧管理，但是 PowerImage 本身不会出现我们之前在Flutter Image中分析的加载大量高清网图会出现的内存爆炸，这是因为虽然在 ImageCache.putIfAbsent 方法中_pendingImages 同样保存了加载中的图片，但是实际这些图片加载过程中的内存由 Native 端图片加载库管理，而非 Flutter，所以只要 Native 端图片加载库比较成熟，就可以避免这个问题。\",\"到目前为止，我们分析了 PowerImage 根据 PowerImageProvider 获取的 ImageInfo 分别采用 ffi 和 texture 两种方案展示图片的过程。\",\"接下来分析一下之前提到的 PowerImageProvider._loadAsync 方法中使用 PowerImageLoader 获取图片的过程。整个过程可以分为 flutter 端发起请求/处理回调、native 端接收请求/返回结果两部分，在这过程中 Flutter 和 Native 使用 MethodChannel（发送获取释放图片指令）和 EventChannel（接收图片成功加载的事件）进行通信。\"]},\"398\":{\"h\":\"Flutter/Native 通信\",\"t\":[\"在上面分析PowerImageProvider._loadAsync方法时，我们注意到其中使用了**PowerImageLoader**获取图片信息 PowerImageCompleter：\",\"// PowerImageProvider._loadAsync 省略部分代码 Future<ImageInfo> _loadAsync( PowerImageProvider key, DecoderCallback? decode) async { try { PowerImageCompleter powerImageCompleter = PowerImageLoader.instance.loadImage(options); Map map = await powerImageCompleter.completer!.future; } return createImageInfo(map); }\",\"这里是使用 PowerImageLoader 的单例加载图片，看一下具体的实现：\",\"class PowerImageLoader { // 保存发起的图片请求 static Map<String?, PowerImageCompleter> completers = <String?, PowerImageCompleter>{}; PowerImageChannel channel = PowerImageChannel(); static PowerImageLoader instance = PowerImageLoader._(); PowerImageLoader._() { channel.impl = PowerImagePlatformChannel(); } // 初始化 PowerImageChannel 等，需要在加载图片之前（比如 runApp 之前执行） void setup(PowerImageSetupOptions? options) { _globalRenderType = options?.globalRenderType ?? defaultGlobalRenderType; PowerImageMonitor.instance().errorCallback = options?.errorCallback; PowerImageMonitor.instance().errorCallbackSamplingRate = options?.errorCallbackSamplingRate; channel.setup(); } PowerImageCompleter loadImage(PowerImageRequestOptions options,) { PowerImageRequest request = PowerImageRequest.create(options);// 创建 PowerImageRequest // 发起图片请求 channel.startImageRequests(<PowerImageRequest>[request]); // 使用 completers 记录下刚刚发起的请求 PowerImageCompleter completer = PowerImageCompleter(); completer.request = request; completer.completer = Completer<Map>(); completers[request.uniqueKey()] = completer; return completer; } // 当上面 loadImage 发起的图片加载完成之后，会调用此方法，从 completers 中取回对应的请求，调用完成 void onImageComplete(Map<dynamic, dynamic> map) async { String? uniqueKey = map['uniqueKey']; PowerImageCompleter? completer = completers.remove(uniqueKey); //todo null case completer?.completer?.complete(map); } }\",\"首先创建了 PowerImageRequest 对象：\",\"class PowerImageRequest { PowerImageRequest.create(PowerImageRequestOptions options) : imageWidth = options.imageWidth, imageHeight = options.imageHeight, imageType = options.imageType, renderingType = options.renderingType, src = options.src; }\",\"其中：\",\"imageType表示获取图片的方式（比如network，nativeAsset，file，asset等）；\",\"renderingType表示图片渲染方式，比如external（即 ffi 方案）、texture。\",\"然后通过PowerImageChannel发送请求（实际的执行的类是PowerImagePlatformChannel）：\",\"class PowerImagePlatformChannel extends PowerImageChannelImpl { StreamSubscription? _subscription; PowerImagePlatformChannel() { eventHandlers['onReceiveImageEvent'] = (Map<dynamic, dynamic> event) { // 将 onReceiveImageEvent 放到 eventHandlers 中， // 上述 PowerImageLoader 发起的请求完成后会执行下述代码 PowerImageLoader.instance.onImageComplete(event); }; } @override void setup() { // 监听回调方法，监听 Native 端发送的图片加载结束事件 startListening(); } StreamSubscription? startListening() { _subscription ??= eventChannel.receiveBroadcastStream().listen(onEvent); return _subscription; } Map<String, EventHandler?> eventHandlers = <String, EventHandler?>{}; // 处理 Native 端发送的事件 void onEvent(dynamic val) { assert(val is Map<dynamic, dynamic>); final Map<dynamic, dynamic> event = val; String? eventName = event['eventName']; EventHandler? eventHandler = eventHandlers[eventName!]; if (eventHandler != null) { eventHandler(event); } else { //TODO 发来了不认识的事件，需要处理一下 } } void registerEventHandler(String eventName, EventHandler eventHandler) { assert(eventName.isNotEmpty); eventHandlers[eventName] = eventHandler; } void unregisterEventHandler(String eventName) { eventHandlers[eventName] = null; } @visibleForTesting final MethodChannel methodChannel = const MethodChannel('power_image/method'); @visibleForTesting EventChannel eventChannel = const EventChannel('power_image/event'); // 主动发送请求到 Native 端 @override void startImageRequests(List<PowerImageRequest> requests) async { await methodChannel.invokeListMethod( 'startImageRequests', encodeRequests(requests)); } @override void releaseImageRequests(List<PowerImageRequest> requests) async { await methodChannel.invokeListMethod( 'releaseImageRequests', encodeRequests(requests)); } }\",\"小结一下：\",\"使用PowerImageLoader.setup注册 MethodChannel 和 EventChannel\",\"使用PowerImageLoader.loadImage向 Native 发起请求加载图片，将请求保存到PowerImageLoader.completers中并返回给调用者\",\"当 Native 端处理完请求之后会回调 PowerImagePlatformChannel 中注册的 EventChannel，然后会执行PowerImageLoader.instance.onImageComplete(event)方法，使用返回的图片信息，从PowerImageLoader.completers找出并完成之前的请求\",\"以上分析为 Flutter 端向 Native 端发起请求的过程，下面以 Android 端为例分析一下 Native 端的处理过程：\",\"首先是在 PowerImagePlugin 中向 Flutter 引擎注册对应的方法。\",\"public class PowerImagePlugin implements FlutterPlugin, MethodCallHandler { @Override public void onAttachedToEngine(FlutterPluginBinding flutterPluginBinding) { if(sContext == null){ sContext = flutterPluginBinding.getApplicationContext(); } // 注册与 Flutter 端对应的方法 methodChannel = new MethodChannel( flutterPluginBinding.getBinaryMessenger(), \\\"power_image/method\\\"); methodChannel.setMethodCallHandler(this); eventChannel = new EventChannel( flutterPluginBinding.getBinaryMessenger(), \\\"power_image/event\\\"); eventChannel.setStreamHandler(PowerImageEventSink.getInstance()); PowerImageRequestManager.getInstance() .configWithTextureRegistry(flutterPluginBinding.getTextureRegistry()); PowerImageDispatcher.getInstance().prepare(); } }\",\"当 Flutter 端向 Native 发送消息时，Flutter 引擎会调用PowerImagePlugin.onMethodCall方法：\",\" // PowerImagePlugin.onMethodCall @Override public void onMethodCall(MethodCall call, Result result) { if (\\\"startImageRequests\\\".equals(call.method)) { if (call.arguments instanceof List) { List arguments = (List) call.arguments; // 将请求结果返回，只是根据传参创建请求并保存， // 将请求信息返回给 Flutter 端 List results = PowerImageRequestManager.getInstance() .configRequestsWithArguments(arguments); result.success(results); // 开始真正执行请求，找到上一步创建的请求 PowerImageBaseRequest // 并执行 PowerImageBaseRequest.startLoading PowerImageRequestManager.getInstance().startLoadingWithArguments(arguments); } else { throw new IllegalArgumentException(\\\"startImageRequests require List arguments\\\"); } } else if (\\\"releaseImageRequests\\\".equals(call.method)) { if (call.arguments instanceof List) { List arguments = (List) call.arguments; // 立即执行释放请求 List results = PowerImageRequestManager.getInstance().releaseRequestsWithArguments(arguments); result.success(results); } else { throw new IllegalArgumentException(\\\"stopImageRequests require List arguments\\\"); } } else { result.notImplemented(); } }\",\"对于不同的调用请求：\",\"startImageRequests：先根据请求参数创建好请求并返回给 Flutter 调用方；然后通过 PowerImageRequestManager 真正执行请求（最终会通过PowerImagePlugin.PowerImageEventSink.getInstance().sendImageStateEvent向 Flutter 通知结果）。\",\"releaseImageRequests：立即从PowerImageRequestManager.requests中去除对应的请求并尝试终止任务，并向 Flutter 返回结果。\",\"下面着重分析一下执行图片请求的逻辑（startImageRequests的情况）：\",\"public class PowerImageRequestManager { private Map<String, PowerImageBaseRequest> requests; private WeakReference<TextureRegistry> textureRegistryWrf; public List<Map<String, Object>> configRequestsWithArguments(List<Map<String, Object>> list) { List<Map<String, Object>> results = new ArrayList<>(); if (list == null || list.isEmpty()) { return results; } for (int i = 0; i < list.size(); i++) { Map<String, Object> arguments = list.get(i); String renderType = (String) arguments.get(\\\"renderingType\\\"); PowerImageBaseRequest request; if (RENDER_TYPE_EXTERNAL.equals(renderType)) {// ffi 方案 request = new PowerImageExternalRequest(arguments); } else if (RENDER_TYPE_TEXTURE.equals(renderType)) {// texture 方案 request = new PowerImageTextureRequest(arguments, textureRegistryWrf.get()); } else { continue; } // 保存创建的请求 requests.put(request.requestId, request); boolean success = request.configTask(); Map<String, Object> requestInfo = request.encode(); requestInfo.put(\\\"success\\\", success); results.add(requestInfo); } return results; } public void startLoadingWithArguments(List arguments) { if (arguments == null || arguments.isEmpty()) { return; } for (int i = 0; i < arguments.size(); i++) { Map arg = (Map) arguments.get(i); String requestId = (String) arg.get(\\\"uniqueKey\\\"); // 找出在 configRequestsWithArguments 方法中创建的请求并执行 PowerImageBaseRequest request = requests.get(requestId); request.startLoading(); } } }\",\"可见对于ffi和texture方案，分别涉及到**PowerImageExternalRequest和PowerImageTextureRequest两个类。他们都继承自PowerImageBaseRequest**类，其startLoading方法会调用performLoadImage方法：\",\"public abstract class PowerImageBaseRequest { private void performLoadImage() { // 获取图片 PowerImageLoader.getInstance().handleRequest( imageRequestConfig, new PowerImageLoaderProtocol.PowerImageResponse() { @Override public void onResult(PowerImageResult result) { // 加载到图片之后进行解析 PowerImageBaseRequest.this.onLoadResult(result); } } ); } }\",\"在PowerImageBaseRequest.performLoadImage方法中：\",\"会先通过PowerImageLoader.getInstance().handleRequest方法获取图片；\",\"然后调用PowerImageBaseRequest.this.onLoadResult方法也就是PowerImageExternalRequest和PowerImageTextureRequest的onLoadResult()方法。\",\"在他们的onLoadResult(final PowerImageResult result)方法中，入参 PowerImageResult 持有 FlutterImage 对象，后者持有加载的图片的 Drawable，他们根据各自的特点对图片进行处理后（ffi获取 Drawable 的 bitmap 对象，<>如果图片不是ARGB_8888则会发生一次 Bitmap 拷贝>；texture使用 Bitmap 绘制到 Canvas 上面），通过PowerImageBaseRequest.onLoadSuccess()方法或者PowerImageBaseRequest.onLoadFailed返回结果。\",\"其中：\",\"PowerImageExternalRequest 从获取到的图片生成 Bitmap 并返回其指针、宽高、大小等属性返回；\",\"PowerImageTextureRequest 则将图片绘制到Surface中并返回textureId等信息。\",\"而对于PowerImageLoader.getInstance().handleRequest()，这里面的各个 PowerImageLoaderProtocol 由 Native 端通过PowerImageLoader.getInstance().registerImageLoader注册具体的实现，handleRequest()方法正是调用他们获取图片。\",\"public class PowerImageLoader implements PowerImageLoaderProtocol { private final Map<String, PowerImageLoaderProtocol> imageLoaders; private PowerImageLoader() { imageLoaders = new HashMap<>(); } private static class Holder { private final static PowerImageLoader instance = new PowerImageLoader(); } public static PowerImageLoader getInstance() { return PowerImageLoader.Holder.instance; } // 在 Android 中调用此方法，注册获取\\\"network\\\"、\\\"nativeAsset\\\"、\\\"asset\\\"、\\\"file\\\"等图片的实现 public void registerImageLoader(PowerImageLoaderProtocol loader, String imageType) { imageLoaders.put(imageType, loader); } // 此方法调用上面 registerImageLoader 方法注册的 ImageLoader 获取图片 @Override public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) { PowerImageLoaderProtocol imageLoader = imageLoaders.get(request.imageType); if (imageLoader == null) { throw new IllegalStateException(\\\"PowerImageLoader for \\\" + request.imageType + \\\" has not been registered.\\\"); } imageLoader.handleRequest(request, response); } }\"]},\"399\":{\"h\":\"Native 端图片获取\",\"t\":[\"上面提到，power_image默认的**PowerImageLoaderProtocol**有以下几种类：\\\"network\\\"、\\\"nativeAsset\\\"、\\\"asset\\\"、\\\"file\\\"，这些都需要使用者在 Native 端注册才能正常使用。\",\"以\\\"network\\\"为例，在MainActivity.onCreate方法中：\",\"class MainActivity: FlutterActivity() { override fun onCreate(savedInstanceState: Bundle?) { ... PowerImageLoader.getInstance().registerImageLoader( PowerImageNetworkLoader(this.applic ationContext), \\\"network\\\" ) } }\",\"PowerImageNetworkLoader继承自PowerImageLoaderProtocol，图片的加载逻辑在其handleRequest方法中：\",\"class PowerImageNetworkLoader(private val context: Context) : PowerImageLoaderProtocol { override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) { // 使用 Glide 加载图片 Drawable Glide.with(context).asDrawable().load(request.srcString()) .listener(object : RequestListener<Drawable> { override fun onLoadFailed(e: GlideException?,model: Any, target: Target<Drawable>,isFirstResource: Boolean): Boolean { response.onResult(PowerImageResult.genFailRet(\\\"Native 加载失败：\\\" + if (e != null) e.message else \\\"null\\\")) return true } override fun onResourceReady(resource: Drawable,model: Any target:Target<Drawable>,dataSource: DataSource,isFirstResource:Boolean ): Boolean { if (resource is GifDrawable) { // 动图 // 加载成功，调用回调 response.onResult( PowerImageResult.genSucRet( GlideMultiFrameImage( resource as GifDrawable, false ) ) ) } else { if (resource is BitmapDrawable) {// 普通图片 response.onResult( PowerImageResult.genSucRet( FlutterSingleFrameImage( resource as BitmapDrawable ) ) ) } else { response.onResult(PowerImageResult.genFailRet(\\\"Native 加载失败：resource : $resource\\\")) } } return true } }).submit( if (request.width <= 0) Target.SIZE_ORIGINAL else request.width, if (request.height <= 0) Target.SIZE_ORIGINAL else request.height ) } }\",\"这样，当 Flutter 端向 Native 发送消息时：\",\"Flutter 引擎会调用PowerImagePlugin.onMethodCall方法，先创建对应的请求**PowerImageBaseRequest**；\",\"然后PowerImageRequestManager.getInstance().startLoadingWithArguments执行刚刚上一步创建的请求，此方法内部执行PowerImageBaseRequest.startLoading()方法；\",\"在**PowerImageBaseRequest类内部，其startLoading方法会调用performLoadImage方法，后者又会调用PowerImageLoader.getInstance().handleRequest()方法请求加载图片**，并指定回调方法为PowerImageBaseRequest.onLoadResult(result)；\",\"PowerImageLoader.handleRequest方法内部通过请求的imageType找到 Native 端（比如 Android 在MainActivity.onCreate中注册的）PowerImageLoaderProtocol imageLoader，并执行其handleRequest方法处理加载图片请求；\",\"PowerImageLoaderProtocol.handleRequest()方法中调用原生的图片加载库获取 Drawable 并生成 PowerImageResult 回调PowerImageResponse.onResult方法，此方法会回调PowerImageBaseRequest.this.onLoadResult(result) ；\",\"在**PowerImageTextureRequest或者PowerImageExternalRequest**的onLoadResult方法中对获取到的PowerImageResult进行处理之后回调PowerImageBaseRequest的onLoadSuccess()或者onLoadFailed(final String errMsg)方法返回图片请求结果。\"]},\"400\":{\"h\":\"总结\",\"t\":[\"power_image 是一个利用原生库加载/管理图片的比较适用于 Flutter/Native 混合开发的图片加载库，提供了 texture 和 ffi 两种加载图片的方式。\",\"其中，texture 方案实际使用 Texture 组件展示图片；而 ffi 方案则只有图片获取在 Native 端，当使用ui.decodeImageFromPixels方法从 Bitmap 内存指针创建ui.Image之后（根据阿里的描述，这里会发生一次内存拷贝，实际代码可以参考这里），剩下按照和 Flutter Image 类似的步骤展示图片。\",\"根据官方的说法：\",\"Texture 适用于日常场景，优先选择；\",\"FFI 更适用于 \",\"flutter <= 1.23.0-18.1.pre 版本中，在模拟器上显示图片\",\"获取 ui.Image 图片数据\",\"flutter 侧解码，解码前的数据拷贝影响较小。\",\"此外，根据官方power_image/issues/17的说法，“在 2.5.3 上 ffi 性能已经跟 texture不相上下了”，而且 textrue 方案在 Android 上较大尺寸可能会 crash（flutter/flutter#92397），所以更推荐使用 ffi 方案。\"]},\"401\":{\"h\":\"参考资料\",\"t\":[\"https://github.com/alibaba/power_image\",\"Flutter 图片库高燃新登场\",\"闲鱼 Flutter 图片框架架构演进（超详细）\",\"Flutter 图片内存优化实践\",\"https://github.com/alibaba/power_image/issues/17\",\"ui.decodeImageFromPixels分析\"]},\"402\":{\"h\":\"Flutter 滑动分析之 NestedScrollView\",\"t\":[\"Flutter 中的 scrollable widget 根据实现方式的不同，可以分为两大类：\",\"基于 RenderBox 的 box protocol 实现的，主要基于 Size 实现布局。常见的有SingleChildScrollView。\",\"基于 RenderSliver 的 sliver protocol 实现的，主要基于 SliverGeometry 实现布局。比如 CustomScrollView 及其子类 ListView、GridView 等继承自ScrollView的 Widget，以及基于 CustomScrollView 的 NestedScrollView、基于 Viewport 等的 PageView、TabBarView 等直接对 SliverFillViewport 等进行封装的 Widget。\",\"上述所有的 scrollable widget 其底层逻辑依然是对 Scrollable 的封装，其内部处理了 ScrollController、ScrollPosition（viewport 的 offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理 scrollable view 的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出 ScrollNotification）、RawGestureDetector（手势识别）等等一系列与 scroll 有关的逻辑，从而使得其他 scrollable view 能够比较方便的实现 scroll 效果。\",\"本文只对 NestedScrollView 的源码实现做一简单分析：它是如何实现联动滚动效果，有什么优势和限制。\",\"官方对其定义是：“A scrolling view inside of which can be nested other scrolling views, with their scroll positions being intrinsically linked.”。\",\"顾名思义，NestedScrollView 是一个可以在内部嵌套其他 scrolling views 的滑动 View，按照所处位置的不同，使用headerSliverBuilder提供 header 部分的 scrolling views（限制只能是可以产生 RenderSliver 的 widget），而使用body提供在填充 header 之下所有区域的 widget（限制只能是产生 RenderBox 的 widget）。\"]},\"403\":{\"h\":\"用例\",\"t\":[\"下面是一个 NestedScrollView 经典的使用方式：\",\" Widget build(BuildContext context) { var _tabBar = TabBar( isScrollable: true, tabs: tabs .map((e) => Tab( child: Container( height: double.infinity, child: Center(child: Text(\\\"Tab$e\\\")), ), )) .toList(), ); return Scaffold( body: DefaultTabController(// 此处的 controller 是给 TabBar 和 TabBarView 使用的 length: tabs.length, child: NestedScrollView( headerSliverBuilder: (context, innerScroll) { return [// 必须是能够产生 RenderSliver 的 Widget SliverAppBar( pinned: true, toolbarHeight: 0, expandedHeight: 200, bottom: _tabBar,//在这里传入 TabBar ), ]; }, body: TabBarView(// body 必须是能产生 RenderBox 的 widget children: tabs .map((e) => ListView(// 这里的列表滑动和 header 的滑动联动 children: List.generate( 100, (index) => SizedBox( height: 80, child: Text(\\\"Hello TabBarView $e $index\\\"))), )) .toList()), )), ); }\",\"在这个例子中，NestedScrollView 包括了 headerSliverBuilder 创建的 header 部分，以及 header 下面的 body 部分，二者的滑动效果联动在一起，好像是同一个 scrolling view。比如，当向上滑动 TabBarView 中列表时，会先向上滑动 header 内容，等到 header 无需再滑动才会向上滑动列表。而如果没有 NestedScrollView 的话，ListView 和 header 的滑动是独立的两个事件。\"]},\"404\":{\"h\":\"源码分析\",\"t\":[\"NestedScrollView 本质上还是对 CustomScrollView（的子类_NestedScrollViewCustomScrollView）的进一步封装。\",\"它借助于_NestedScrollCoordinator 的_outerController 和_innerController 这两个分别传入_NestedScrollViewCustomScrollView（header 和 body 其实是他的 slivers，其最大滑动范围为 header 的 scrollExtent）和 body 中的 scrolling view（其最大滑动范围为内部滑动视图最大滑动范围之和）的 ScrollController，创建并应用_NestedScrollPosition；当用户滑动等事件发生，通过_NestedScrollViewCustomScrollView 的_NestedScrollPosition 接收外部所有的滑动事件全部归集到_NestedScrollCoordinator（比如 applyUserOffset 方法）统一处理，按照 ScrollPhysics 等分别修改 header 和 body 的 ScrollPosition，从而实现了这两处滑动事件的联动。\",\"所以，在分析 NestedScrollView 的时候，主要涉及到以下类：\",\"NestedScrollViewState：是 NestedScrollView 真正执行逻辑的类，将_NestedScrollCoordinator、_NestedScrollViewCustomScrollView、ScrollController 等组装在一起，对外暴露操纵_NestedScrollCoordinator 的方法\",\"_NestedScrollViewCustomScrollView：继承自 CustomScrollView，主要作用是创建自定义的 NestedScrollViewViewport，后者又创建了 RenderNestedScrollViewViewport 主要用途是更新 SliverOverlapAbsorberHandle\",\"_NestedScrollCoordinator：处理_NestedScrollPosition 转发过来的滑动事件，将其分发给 header（其实是容纳 header 和 body 的_NestedScrollViewCustomScrollView）和 body。\",\"_NestedScrollController：给_NestedScrollCoordinator 的 inner 和 outer 的 ScrollController，内部创建_NestedScrollPosition。\",\"_NestedScrollPosition：给_NestedScrollCoordinator 的 inner 和 outer 的 ScrollPosition，会将 animateTo、jumpTo、pointerScroll、updateCanDrag、hold、drag 等和滑动有关的事件转发给_NestedScrollCoordinator 统一处理。\",\"其余辅助类\",\"下面对这些类逐一分析：\"]},\"405\":{\"h\":\"NestedScrollViewState\",\"t\":[\"NestedScrollView 是 StatefulWidget，其主要逻辑都在创建的 State——NestedScrollViewState 中。\",\"class NestedScrollView extends StatefulWidget { List<Widget> _buildSlivers(BuildContext context, ScrollController innerController, bool bodyIsScrolled) { // _buildSlivers 的主轴尺寸为 header 的 scrollExtent+viewport 主轴尺寸，所以创建好的 viewport 滑动范围 // 为 header 的滑动 scrollExtent return <Widget>[ ...headerSliverBuilder(context, bodyIsScrolled),// header 部分 SliverFillRemaining(//body 部分，其尺寸为所处的 viewport 的主轴尺寸 child: PrimaryScrollController( controller: innerController, child: body,// SliverFillRemaining 只能容纳可以产生 RenderBox 的 widget ), ), ]; } @override NestedScrollViewState createState() => NestedScrollViewState(); }\",\"NestedScrollView._buildSlivers 方法将 headerSliverBuilder 创建的 header 和 body 放到一个列表中，会被 NestedScrollViewState 传入到自定义的 CustomScrollView——_NestedScrollViewCustomScrollView 中。\",\"需要注意 SliverFillRemaining 默认会创建_SliverFillRemainingWithScrollable，后者创建的 RenderObject 是_SliverFillRemainingWithScrollable。在 RenderSliverFillRemainingWithScrollable.performLayout 方法会使用他所处 viewport 主轴方向的尺寸作为自己的 scrollExtent。\",\" void performLayout() { final SliverConstraints constraints = this.constraints; final double extent = constraints.remainingPaintExtent - math.min(constraints.overlap, 0.0); if (child != null) child!.layout(constraints.asBoxConstraints( minExtent: extent, maxExtent: extent, )); final double paintedChildSize = calculatePaintOffset(constraints, from: 0.0, to: extent); assert(paintedChildSize.isFinite); assert(paintedChildSize >= 0.0); geometry = SliverGeometry( scrollExtent: constraints.viewportMainAxisExtent,// 这里使用的是 viewport 的主轴尺寸 paintExtent: paintedChildSize, maxPaintExtent: paintedChildSize, hasVisualOverflow: extent > constraints.remainingPaintExtent || constraints.scrollOffset > 0.0, ); if (child != null) setChildParentData(child!, constraints, geometry!); }\",\"也就是说无论 inner scrolling view 的尺寸如何，它（下面称其为 body）占用的 scrollExtent 都是所处的 viewport 的主轴尺寸 mainAxisExtent；再加上 headerSliverBuilder 方法创建的 header，导致_NestedScrollViewCustomScrollView 所创建的 viewport 的最大可滑动范围_maxScrollExtent（其值等于 header+body 的 scrollExtent）一定大于 viewport 的主轴方向尺寸 mainAxisExtent，从而计算出_NestedScrollViewCustomScrollView 的 ScrollPosition 的最大滑动范围（maxScrollExtent）为：\",\"_outScrollPosition.maxScrollExtent = viewport._maxScrollExtent - viewport.mainAxisExtent = (body.scrollExtent + header.scrollExtent) - viewport.mainAxisExtent = (viewport.mainAxisExtent + header.scrollExtent) - viewport.mainAxisExtent = header.scrollExtent\",\"所以，无论 NestedScrollView 的 body 内容尺寸如何，它为 header+body 分配的尺寸只比 viewport 的尺寸多出一个 header 的尺寸。这个也是 NestedScrollView 实现协调 header 和 body 滑动的基础。\",\"让我们再看一下 NestedScrollViewState 的实现：\",\"NestedScrollViewState 中一个重要的属性就是_NestedScrollCoordinator? _coordinator，它在initState()方法中初始化。\",\"class NestedScrollViewState extends State<NestedScrollView> { // inner 和 outer controller 都来自_coordinator ScrollController get innerController => _coordinator!._innerController; ScrollController get outerController => _coordinator!._outerController; _NestedScrollCoordinator? _coordinator; void initState() { super.initState(); _coordinator = _NestedScrollCoordinator( this, widget.controller,// 注意这里传入了 widget 处获取的 controller _handleHasScrolledBodyChanged, widget.floatHeaderSlivers, ); } }\",\"能注意到，_NestedScrollCoordinator 中持有了 widget.controller，并且还会在 didChangeDependencies、didUpdateWidget 方法被调用时通过_NestedScrollCoordinator.setParent 方法更新，主要有两个作用：1. 获取 initialScrollOffset；2. 通过_outerPosition?.setParent 使得 widget.controller 可以监听 outerPosition 的变化。\",\"然后，在 NestedScrollViewState.build 方法中，会创建_NestedScrollViewCustomScrollView 对象：\",\"将_coordinator!._outerController 作为其 controller，这样会创建，_outerPosition，后者会将_NestedScrollViewCustomScrollView 的事件转发给_coordinator，这样其接管了外层的滑动事件；\",\"此外在 NestedScrollView._buildSlivers 方法中创建的 header 和 body 作为_NestedScrollViewCustomScrollView 也就是 CustomScrollView 的 slivers。\",\"这也是创建 header 的NestedScrollView.headerSliverBuilder 只接受可以创建 RenderSliver 的 widget的原因。\",\" @override Widget build(BuildContext context) { final ScrollPhysics scrollPhysics = widget.physics?.applyTo(const ClampingScrollPhysics()) ?? widget.scrollBehavior?.getScrollPhysics(context).applyTo(const ClampingScrollPhysics()) ?? const ClampingScrollPhysics(); return _InheritedNestedScrollView( state: this, child: Builder( builder: (BuildContext context) { _lastHasScrolledBody = _coordinator!.hasScrolledBody; return _NestedScrollViewCustomScrollView( dragStartBehavior: widget.dragStartBehavior, scrollDirection: widget.scrollDirection, reverse: widget.reverse, physics: scrollPhysics, scrollBehavior: widget.scrollBehavior ?? ScrollConfiguration.of(context).copyWith(scrollbars: false), // 注意这里使用的从_coordinator 获取的_outerController controller: _coordinator!._outerController, // 这里将 header 和 body 传入 slivers， // _NestedScrollViewCustomScrollView 创建的 viewport 是继承自 // Viewport 的 NestedScrollViewViewport，其只接受可以创建 // RenderSliver 的 widget slivers: widget._buildSlivers( context, _coordinator!._innerController, _lastHasScrolledBody!, ), handle: _absorberHandle, clipBehavior: widget.clipBehavior, restorationId: widget.restorationId, ); }, ), ); }\",\"_NestedScrollViewCustomScrollView 继承自 CustomScrollView，主要作用是创建继承自 Viewport 的 NestedScrollViewViewport，而后者又主要负责创建和更新继承自 RenderViewport 的 RenderNestedScrollViewViewport——其在内部更新和维护 SliverOverlapAbsorberHandle。\",\"SliverOverlapAbsorberHandle: Handle to provide to a SliverOverlapAbsorber, a SliverOverlapInjector, and an NestedScrollViewViewport, to shift overlap in a NestedScrollView.\",\"到目前位置，UI 展示部分的内容已经完成，我们的 NestedScrollView 可以将 header 和 body 显示在屏幕上面，但是如果要联动处理在 header 和 body 上面的滑动事件，还需要_NestedScrollCoordinator、_NestedScrollController 和_NestedScrollPosition 的配合。\"]},\"406\":{\"h\":\"_NestedScrollController\",\"t\":[\"_NestedScrollController 继承自 ScrollController，其逻辑比较简单，主要添加了两项功能：\"]},\"407\":{\"h\":\"创建_NestedScrollPosition\",\"t\":[\"创建_NestedScrollPosition 的逻辑比较简单，主要是将 coordinator 也一并传入。\",\" ScrollPosition createScrollPosition( ScrollPhysics physics, ScrollContext context, ScrollPosition? oldPosition, ) { return _NestedScrollPosition( coordinator: coordinator, physics: physics, context: context, initialPixels: initialScrollOffset, oldPosition: oldPosition, debugLabel: debugLabel, ); }\"]},\"408\":{\"h\":\"在 ScrollPosition 变化时通知 coordinator\",\"t\":[\"在 attach(ScrollPosition position) 中调用_scheduleUpdateShadow() 和_NestedScrollCoordinator 的 updateParent、updateCanDrag，对传入的 ScrollPosition 添加回调_scheduleUpdateShadow()。\",\"在 detach(ScrollPosition position) 中调用_scheduleUpdateShadow()，对传入的 ScrollPosition 移除回调_scheduleUpdateShadow()。\",\"而这个_scheduleUpdateShadow() 方法主要作用是异步执行 coordinator.updateShadow() 更新 NestedScrollView，实现滑动效果。\",\" void _scheduleUpdateShadow() { // We do this asynchronously for attach() so that the new position has had // time to be initialized, and we do it asynchronously for detach() and from // the position change notifications because those happen synchronously // during a frame, at a time where it's too late to call setState. Since the // result is usually animated, the lag incurred is no big deal. SchedulerBinding.instance.addPostFrameCallback( (Duration timeStamp) { coordinator.updateShadow(); }, ); }\"]},\"409\":{\"h\":\"_NestedScrollPosition\",\"t\":[\"在 inner scrolling widget 和 outer viewport 都使用_NestedScrollPosition，它追踪这些 viewport 使用的 offset，并且内部持有_NestedScrollCoordinator，所以此 class 上触发 activities 时，可以推迟或者影响 coordinator。\",\"class _NestedScrollPosition extends ScrollPosition implements ScrollActivityDelegate { final _NestedScrollCoordinator coordinator; // 协调 inner 和 outer 滑动事件 // 是在 NestedScrollView 中传给_NestedScrollViewCustomScrollView 的 ScrollController ScrollController? _parent; void setParent(ScrollController? value) { _parent?.detach(this); _parent = value; _parent?.attach(this);// 将此 ScrollPosition 和_parent 绑定 } }\"]},\"410\":{\"h\":\"setParent\",\"t\":[\"_NestedScrollPosition.setParent 中，将自己和传入的 ScrollController 绑定在一起：\",\"将自身加入 ScrollController._positions\",\"ScrollController 监听自身变化时执行 notifyListeners 通知监听者\"]},\"411\":{\"h\":\"absorb\",\"t\":[\"在 absorb 方法中将 activity 的 delegate 更新为当前 ScrollPosition：\",\" @override void absorb(ScrollPosition other) { super.absorb(other); // 部分 activity 会使用此来操作 scroll view activity!.updateDelegate(this); }\"]},\"412\":{\"h\":\"applyClampedDragUpdate\",\"t\":[\"此方法返回的是没有使用的 delta，此方法不会主动创建 overscroll/underscroll，如果当前 ScrollPosition 在范围内，则不会发送 overscroll/underscroll；如果已经超出范围，则只会“减轻”这种情况，而不会“加重”。\",\"之所以不会 overscroll，是因为 min 和 max 的取值限定了他们的范围，以一个垂直方向向下布局的滑动列表为例：\",\"delat < 0，即向上滑动，范围是 min：-double.infinity ~ max：0（overscroll 时）或者 maxScrollExtent 和 pixels 中最大值（只能滑到最大范围）。\",\"也就是说，向上滑动时，如果已经在顶部出现 overscroll（此时 pixels 应该为负值），那么最多滑动到 0（也就是恢复到初始位置），没有顶部 overscroll 时（此时 pixels 为正值，可能在 maxScrollExtent 范围内，也可能超出范围，即底部出现 overscroll），那么此时最多向上滑动 maxScrollExtent 和 pixels，也就是说要么不能超范围，要是超了范围，就不能再超了。\",\"而最小滑动范围为-double.infinity，无论 pixels 正负，当其 delta 为负时，其值都只会增大，取值-double.infinity 是为了将 pixels 包含在内。\",\"delta > 0，即向下滑动，范围是 min：minScrollExtent 和 pixels 最小值 ~ double.infinity。\",\"也就是说，向下滑动最小到初始位置，最大值不限定（因为此时可能 offset 已经由于某种原因超过 maxScrollExtent 了）。\",\" // Returns the amount of delta that was not used. // Positive delta means going down (exposing stuff above), negative delta // going up (exposing stuff below). double applyClampedDragUpdate(double delta) { assert(delta != 0.0); // If we are going towards the maxScrollExtent (negative scroll offset), // then the furthest we can be in the minScrollExtent direction is negative // infinity. For example, if we are already overscrolled, then scrolling to // reduce the overscroll should not disallow the overscroll. // // If we are going towards the minScrollExtent (positive scroll offset), // then the furthest we can be in the minScrollExtent direction is wherever // we are now, if we are already overscrolled (in which case pixels is less // than the minScrollExtent), or the minScrollExtent if we are not. // // In other words, we cannot, via applyClampedDragUpdate, _enter_ an // overscroll situation. // // An overscroll situation might be nonetheless entered via several means. // One is if the physics allow it, via applyFullDragUpdate (see below). An // overscroll situation can also be forced, e.g. if the scroll position is // artificially set using the scroll controller. // delat < 0，即向上滑动，范围是 min：-double.infinity ~ max：0 //（overscroll 时）或者 maxScrollExtent 和 pixels 中最大值（只能滑到最大范围） // delta > 0，即向下滑动，范围是 min：minScrollExtent 和 pixels 最小值 ~ // double.infinity（也就是说，向下滑动最小到初始位置，最大值不限定 // [因为此时可能 offset 已经由于某种原因超过 maxScrollExtent 了]） final double min = delta < 0.0 ? -double.infinity// 向上滑动 : math.min(minScrollExtent, pixels);// 向下滑动 // The logic for max is equivalent but on the other side. // 这里的逻辑是，如果向下滑动，那么 max 为无限大； // 如果向上滑动并且已经 overscroll 了，那么 max 是 0（即恢复初始位置），否则为 maxScrollExtent 即最大滑动范围 final double max = delta > 0.0 ? double.infinity// 向下滑动 // If pixels < 0.0, then we are currently in overscroll. The max should be // 0.0, representing the end of the overscrolled portion. // pixels 比 maxScrollExtent 大可能是由于 jumpTo 等情况，此时 max 为 pixels 表示不能继续滑动超出此值 : pixels < 0.0 ? 0.0 : math.max(maxScrollExtent, pixels);// 向上滑动 final double oldPixels = pixels; //newPixels 是可以应用到 ScrollPosition 的 pixels，其范围： // 1. delta 为负，即向上滑动，pixels - delta = pixels + |delta| > pixels， // 1.1 当 pixels 小于 0 也就是存在 overscroll 时，其范围是 pixels + |delta|~0， // 此时 overscroll 偏移量为 pixels + |delta|，newPixels 在 pixels + |delta|~0 之间，【不会再加深越界】 // 1.2 当 pixels 大于等于 0 也就是不存在 overscroll 时，其范围是 pixels + |delta|~maxScrollExtent // 此时，newPixels 在 pixels + |delta|~maxScrollExtent 之间，最大为 maxScrollExtent【newPixels 不会越界】 // 2. delta 为正，即向下滑动，pixels - delta = pixels - |delta| < pixels // 2.1 当 pixels 小于 0 也就是存在 overscroll 时，pixels - delta = pixels - |delta| < pixels， // 其范围是（pixels 和 minScrollExtent 较小值）~double.infinity，也就是 delta 不会 // 被应用，newPixels 会等于 pixels，如果已经越界了，【不会再加深越界】 // 2.2 当 pixels 大于等于 0 也就是不存在 overscroll 时，其范围是 minScrollExtent~double.infinity， // newPixels 会在 minScrollExtent 和 pixels 之间，【newPixels 的值不会越界】 final double newPixels = (pixels - delta).clamp(min, max); final double clampedDelta = newPixels - pixels;// 对比 ScrollPosition 变化的值 // position 的 pixels 为 0 且向下滑动时这里 clampedDelta 为 0，不执行剩余步骤 if (clampedDelta == 0.0) return delta; // 返回超出界限的值 overscroll，如果为 0 表示可以任意超出界限，不为 0 表示不可以应用到 //ScrollPosition 上的值，根据 physics 而不同 final double overscroll = physics.applyBoundaryConditions(this, newPixels); // 减去了 overscroll，所以这里 actualNewPixels 是真正可以应用的 pixels final double actualNewPixels = newPixels - overscroll; // offset 表示经过上述计算之后，ScrollPosition 实际将要产生的变化 final double offset = actualNewPixels - oldPixels; if (offset != 0.0) { // 根据 physics 的不同，这里 offset 可能会导致 ScrollPosition 内部视觉上出现越界现象，此时 overscroll 为 0， // 或者没有越界内容，overscroll 为 0 或者应用了 delta 之后会出现的越界值 forcePixels(actualNewPixels);//更新 pixels didUpdateScrollPositionBy(offset);// 发出 ScrollUpdateNotification 通知 } // delta 为负时，offset 为正值；delta 为正值时，offset 为负值。总之 delta 绝对值减少了。 return delta + offset; }\"]},\"413\":{\"h\":\"applyFullDragUpdate\",\"t\":[\"此方法在满足 overscroll 条件时，会应用 overscroll，并发出 OverscrollNotification 通知。\",\" double applyFullDragUpdate(double delta) { assert(delta != 0.0); final double oldPixels = pixels; // Apply friction: final double newPixels = pixels - physics.applyPhysicsToUserOffset( this, delta, ); if (oldPixels == newPixels)// 应用 delta 之后没有变化，返回 return 0.0; // delta must have been so small we dropped it during floating point addition // Check for overscroll: // 按照 physics 的规则，如果可以 overscroll 则返回 0，下面的 actualNewPixels 会展示出越界的效果 // 否则返回不能消耗的 delta，会发出 overscroll 通知 final double overscroll = physics.applyBoundaryConditions(this, newPixels); // 如果 physics 允许越界返回 overscroll 是 0，则这里 actualNewPixels 最终是越界的 pixels final double actualNewPixels = newPixels - overscroll; if (actualNewPixels != oldPixels) { forcePixels(actualNewPixels);// 更新当前 ScrollPosition 的 pixels 值 didUpdateScrollPositionBy(actualNewPixels - oldPixels); } if (overscroll != 0.0) { // 发出 overscroll 的 OverscrollNotification 通知，然后会有地方处理 overscroll // 比如 Android 会触发在 ScrollableState.build 方法中的_configuration.buildOverscrollIndicator // 对应的 ScrollBehavior.buildViewportChrome 创建蓝色波纹效果 didOverscrollBy(overscroll); return overscroll; } return 0.0; }\"]},\"414\":{\"h\":\"applyClampedPointerSignalUpdate\",\"t\":[\"applyClampedPointerSignalUpdate 方法返回未使用的 delta，不考虑 ScrollPhysics 的影响。\"]},\"415\":{\"h\":\"applyNewDimensions()\",\"t\":[\"此方法是_outerScrollPosition 接管 body 滑动事件的关键，也是body 中 scrolling view 使用了自己的 ScrollController 之后 NestedScrollView 就无法协调 header 和 body 滑动的原因。\",\"在默认的 ScrollController 中，createScrollPosition() 方法创建的是 ScrollPositionWithSingleContext，当 content 或者 viewport 的尺寸变化之后会调用其 applyNewDimensions() 方法：\",\" // ScrollPositionWithSingleContext 类 void applyNewDimensions() { super.applyNewDimensions(); // 此处的 context 一般是 ScrollableState context.setCanDrag(physics.shouldAcceptUserOffset(this)); }\",\"最后会调用 ScrollableState 的 setCanDrag 方法：\",\" // ScrollableState 类 // 识别用户手势的属性，用于 RawGestureDetector.gestures Map<Type, GestureRecognizerFactory> _gestureRecognizers = const <Type, GestureRecognizerFactory>{}; @override @protected void setCanDrag(bool value) { if (value == _lastCanDrag && (!value || widget.axis == _lastAxisDirection)) return; if (!value) { _gestureRecognizers = const <Type, GestureRecognizerFactory>{}; // 其他方法 } else { // 更新_gestureRecognizers 的方法 } }\",\"可见_gestureRecognizers 默认为空，只有主动调用 ScrollableState.setCanDrag(true) 之后滑动视图中的 Scrollable 才能识别手势并处理。\",\"而在_NesetedScrollPosition 的方法中，并没有调用，而是：\",\" // _NestedScrollPosition 类 @override void applyNewDimensions() { super.applyNewDimensions(); coordinator.updateCanDrag(); } // _NestedScrollCoordinator 类 void updateCanDrag() { if (!_outerPosition!.haveDimensions) return; double maxInnerExtent = 0.0; for (final _NestedScrollPosition position in _innerPositions) { if (!position.haveDimensions) return; maxInnerExtent = math.max( maxInnerExtent, position.maxScrollExtent - position.minScrollExtent, ); } // 注意这里只给_outerPosition 调用了 updateCanDrag 方法 _outerPosition!.updateCanDrag(maxInnerExtent); }\",\"从上述代码分析可知，如果使用默认的_NestedScrollController 创建的_NestedScrollPosition，最后只有_outerPosition 更新了_gestureRecognizers 可以识别手势，而使用_innerScrollPosition 的 body 内部的 scrolling view 无法识别手势。\",\"所以，当没有给 body 中的 scrolling view 主动设置 ScrollController 时，无论是在 header 还是 body 的手势事件都会由 ScrollPosition 来转发给_NestedScrollCoordinator 统一协调处理；而如果给 body 中的 scrolling view 主动设置 ScrollController，由于 ScrollController 默认创建的 ScrollPositionWithSingleContext 会按照实际情况更新_gestureRecognizers，从而当用户手势在 body 中 scrolling view 的范围时，手势事件会被其捕获并内部消耗，而非转发到_NestedScrollCoordinator 处理，所以就会使 NestedScrollView 失效。\",\"此外还持有了_NestedScrollCoordinator，在 animateTo/jumpTo/pointerScroll/applyNewDimensions/hold/drag 等与滑动相关的方法被调用时执行_NestedScrollCoordinator 中对应的方法，这样就将 outer viewport 和 inner scrolling view 的滑动事件都归集到_NestedScrollCoordinator 统一处理。\"]},\"416\":{\"h\":\"_NestedScrollCoordinator\",\"t\":[\"为了与_NestedScrollPosition 保持一致，方便接收其转发的事件，_NestedScrollCoordinator 也实现了 ScrollActivityDelegate 接口：\",\"class _NestedScrollCoordinator implements ScrollActivityDelegate, ScrollHoldController { final NestedScrollViewState _state;// 用于获取 NestedScrollView 的 ScrollController ScrollController? _parent;// 用户传入的 NestedScrollView 的 ScrollController final bool _floatHeaderSlivers;// header 是否悬浮，是的话向“下”滑动时会先将 header 滑动出来 // 分别应用于 outer（即_NestedScrollViewCustomScrollView）和 inner（即 body 中的 // scrolling view）的 ScrollController late _NestedScrollController _outerController; late _NestedScrollController _innerController; }\"]},\"417\":{\"h\":\"beginActivity\",\"t\":[\"beginActivity 用来对 outer 和 inner 应用 ScrollActivity，在 goIdle/goBallistic/animateTo/jumpTo/pointerScroll/drag/hold 等与滑动有关的方法中都有直接或间接的调用。\",\"其中 outer activity 是直接指定的，而 inner activity 则是根据 innerActivityGetter 和 inner position 动态计算。\",\" void beginActivity(ScrollActivity newOuterActivity, _NestedScrollActivityGetter innerActivityGetter) { _outerPosition!.beginActivity(newOuterActivity);// outer 直接应用 ScrollActivity bool scrolling = newOuterActivity.isScrolling; for (final _NestedScrollPosition position in _innerPositions) { // 依次遍历 inner scrolling view 计算对应的 newInnerActivity final ScrollActivity newInnerActivity = innerActivityGetter(position); position.beginActivity(newInnerActivity); scrolling = scrolling && newInnerActivity.isScrolling; } _currentDrag?.dispose(); _currentDrag = null; if (!scrolling) // 如果都没有滑动，就表示当前 NestedScrollView 停止 updateUserScrollDirection(ScrollDirection.idle); }\",\"此方法的一种使用方式如下：\",\" void goBallistic(double velocity) { beginActivity( createOuterBallisticScrollActivity(velocity),// 创建 outer activity (_NestedScrollPosition position) {// 根据 position 创建 inner activity return createInnerBallisticScrollActivity( position, velocity, ); }, ); }\",\"创建 outer scroll activity 的方法：\",\" ScrollActivity createOuterBallisticScrollActivity(double velocity) { // This function creates a ballistic scroll for the outer scrollable. // // It assumes that the outer scrollable can't be overscrolled, and sets up a // ballistic scroll over the combined space of the innerPositions and the // outerPosition. // First we must pick a representative inner position that we will care // about. This is somewhat arbitrary. Ideally we'd pick the one that is \\\"in // the center\\\" but there isn't currently a good way to do that so we // arbitrarily pick the one that is the furthest away from the infinity we // are heading towards. _NestedScrollPosition? innerPosition; if (velocity != 0.0) {// 选择在正方向上离我们最远的 inner position for (final _NestedScrollPosition position in _innerPositions) { if (innerPosition != null) { if (velocity > 0.0) { if (innerPosition.pixels < position.pixels) continue; } else { assert(velocity < 0.0); if (innerPosition.pixels > position.pixels) continue; } } innerPosition = position; } } if (innerPosition == null) {// 这里表示只有 outer 或者 velocity 为 0 // It's either just us or a velocity=0 situation. return _outerPosition!.createBallisticScrollActivity( _outerPosition!.physics.createBallisticSimulation( _outerPosition!, velocity, ), mode: _NestedBallisticScrollActivityMode.independent, ); } // 这里表示 NestedScrollView 中存在 inner 和 outer scrolling view，且 velocity 不为 0 // 在 innerPosition 和 outerPosition 组合的 space 之上设置 overscroll final _NestedScrollMetrics metrics = _getMetrics(innerPosition, velocity); return _outerPosition!.createBallisticScrollActivity( _outerPosition!.physics.createBallisticSimulation(metrics, velocity), mode: _NestedBallisticScrollActivityMode.outer, metrics: metrics, ); }\",\"可见在计算 outer scroll activity 的时候，需判断 body 内是不是有 inner scrolling view：\",\"没有，按照正常创建 BallisticScrollActivity 的流程创建\",\"有，将 inner 的 space 也计入，然后以此计算 BallisticScrollActivity\",\"创建 inner scroll activity 的方法：\",\" ScrollActivity createInnerBallisticScrollActivity(_NestedScrollPosition position, double velocity) { return position.createBallisticScrollActivity( position.physics.createBallisticSimulation( _getMetrics(position, velocity), velocity, ), mode: _NestedBallisticScrollActivityMode.inner, ); }\"]},\"418\":{\"h\":\"applyUserOffset\",\"t\":[\"applyUserOffset() 是_NestedScrollCoordinator 的重点，也是 NestedScrollView 能够实现协调 inner 和 outer 滑动事件的关键。\",\"在看 applyUserOffset() 方法之前，先看一下 drag() 方法，在此方法中创建 ScrollDragController 时 delegate 传入的是_NestedScrollCoordinator。\",\"当用户操作屏幕发生 drag 事件时，手势事件会被 ScrollableState 中的 RawGestureDetector 识别到：\",\"drag 开始时调用_handleDragStart，通过_NestedScrollPosition 转发调用_NestedScrollCoordinator.drag方法创建了ScrollDragController drag\",\" // 此方法在 ScrollableState 中被 RawGestureDetector 通过 // ScrollableState._handleDragStart -> _NestedScrollPosition.drag // -> _NestedScrollCoordinator.drag 链路调用 Drag drag(DragStartDetails details, VoidCallback dragCancelCallback) { final ScrollDragController drag = ScrollDragController( delegate: this, details: details, onDragCanceled: dragCancelCallback, ); beginActivity( DragScrollActivity(_outerPosition!, drag), (_NestedScrollPosition position) => DragScrollActivity(position, drag), ); assert(_currentDrag == null); _currentDrag = drag; return drag; }\",\"drag 开始时更新时_handleDragUpdate，内部调用ScrollDragController.update,在 update 方法内部执行了delegate.applyUserOffset，此处的delegate就是我们之前传入的_NestedScrollCoordinator\",\"根据上述分析，在用户滑动屏幕时，会执行_NestedScrollCoordinator.applyUserOffset方法：\",\" @override void applyUserOffset(double delta) { // 更新 scroll 方向 updateUserScrollDirection( delta > 0.0 ? ScrollDirection.forward : ScrollDirection.reverse, ); assert(delta != 0.0); if (_innerPositions.isEmpty) { // 如果没有 inner（body 内部没有 scrolling view），就由 outer 完全处理滑动事件 _outerPosition!.applyFullDragUpdate(delta); } else if (delta < 0.0) { // Dragging \\\"up\\\" // 先恢复 inner overscroll，然后是 outer view，以便 header 内容尽快 scroll out double outerDelta = delta; for (final _NestedScrollPosition position in _innerPositions) { if (position.pixels < 0.0) { // This inner position is in overscroll. // 先从 overscrolled 恢复并返回剩余没有使用的 delta // 因为 delta 是负值，如果“消耗”掉了一部分，那么 potentialOuterDelta 会比 delta 大 final double potentialOuterDelta = position.applyClampedDragUpdate(delta); // In case there are multiple positions in varying states of // overscroll, the first to 'reach' the outer view above takes // precedence.此处 outerDelta 为剩余没有消耗的 delta outerDelta = math.max(outerDelta, potentialOuterDelta); } } if (outerDelta != 0.0) { // 如果还有剩下的，让 outer view 消耗 // delta < 0;所以如果 outer 有 underscroll 则会先恢复到 0 然后返回（现有限制下不会出现 // 此情况），否则最多可以向上滑动到 maxScrollExtent final double innerDelta = _outerPosition!.applyClampedDragUpdate( outerDelta, ); if (innerDelta != 0.0) { // 还有剩下的，让 inner 开始滑动 // 这里吧剩下的 innerDelta 完全给了 inner scroll position 的 applyFullDragUpdate 方法 // inner 会先向上滑动，如果 physics 支持 underscroll 会执行 underscroll，否则最多滑动 // 到 maxScrollExtent，然后发出 overscroll 的通知，让 Scrollable 绘制蓝色波纹（Android） for (final _NestedScrollPosition position in _innerPositions) position.applyFullDragUpdate(innerDelta); } } } else { // Dragging \\\"down\\\" - delta is positive double innerDelta = delta; // Apply delta to the outer header first if it is configured to float. if (_floatHeaderSlivers) // _floatHeaderSlivers 为 true，先让 outer 复现出来，最多向下滑动到 minScrollExtent // 也就是恢复原位 innerDelta = _outerPosition!.applyClampedDragUpdate(delta); if (innerDelta != 0.0) { // Apply the innerDelta, if we have not floated in the outer scrollable, // any leftover delta after this will be passed on to the outer // scrollable by the outerDelta. double outerDelta = 0.0; // it will go positive if it changes final List<double> overscrolls = <double>[]; final List<_NestedScrollPosition> innerPositions = _innerPositions.toList(); // inner scrolling view 先消耗 delta for (final _NestedScrollPosition position in innerPositions) { // 向下滑动 inner scrolling view // 如果 inner physics 不支持 overscroll，则执行完 innerDelta 之后，最多会返回未执行的 overscroll // 如果支持，则会消耗完 innerDelta，这里的 overscroll 为 0 final double overscroll = position.applyClampedDragUpdate(innerDelta); outerDelta = math.max(outerDelta, overscroll); overscrolls.add(overscroll);// 保存没有被使用的 overscroll } if (outerDelta != 0.0) // 在此处，即使设置了 outer 的 physics 为 BouncingScrollPhysics，因为当 ScrollPosition 的 // offset 为 0 时，applyClampedDragUpdate 不会主动从 0 变为负值，所以无法应用 underscroll 效果 // 此处 outerDelta-=overscroll 的结果是 outerDelta 是 outer 消耗的那一部分内容 outerDelta -= _outerPosition!.applyClampedDragUpdate(outerDelta); // 这里 outerDelta 是剩下的 delta // Now deal with any overscroll 最后交给 inner 处理 overscroll for (int i = 0; i < innerPositions.length; ++i) { // 此处的 remainingDelta 是未执行的 overscroll 减去了 outer 消耗的内容 final double remainingDelta = overscrolls[i] - outerDelta; if (remainingDelta > 0.0) // 如果还有剩下的 overscroll，与 physics 等结合计算之后，继续消耗（之前在 // applyClampedDragUpdate 无法消耗，在这里也消耗不了，不过可以发送 overscroll // 的通知，让 Scrollable 知道之后做出蓝色波纹（Android 机型）等效果） innerPositions[i].applyFullDragUpdate(remainingDelta); } } } }\",\"分析为何 inner 有 scrolling view 时，NestedScrollView.physics 为 BouncingScrollPhysics() 不生效：\",\"从上述代码我们看到，可以产生 overscroll 效果的 applyFullDragUpdate 只有在 inner 中没有 scrolling view 的时候才会被_outerPosition 应用，其他两个场景都只有 inner position 应用。\",\"而其余场景中，_outerPosition 和 inner position 都应用的是 applyClampedDragUpdate 方法：\",\"向下滑动 delta 大于 0，代码会执行到outerDelta -= _outerPosition!.applyClampedDragUpdate(outerDelta)，因为此时限制了 applyClampedDragUpdate 中的 newPixels 范围为（当 ScrollPosition 的 pixels 等于 0 时）minScrollExtent~double.infinity，所以 clampedDelta = newPixels - pixels 等于 minScrollExtent（也就是 0），跳过剩余步骤直接返回了 delta。所以没有执行 BouncingScrollPhysics() 逻辑\",\"向上滑动 delta 小于 0，代码会执行final double innerDelta = _outerPosition!.applyClampedDragUpdate(outerDelta,);，在此方法中，如果有 overscroll 则会先恢复到 0，否则最多上划到 maxScrollExtent，所以也不会执行 BouncingScrollPhysics() 逻辑\",\"通过上述步骤，NestedScrollView 将 header 和 body 的滚动事件进行组合、分发。\"]},\"419\":{\"h\":\"优劣对比\",\"t\":[\"NestedScrollView 将 header 和 body 中可滑动 view（inner）的滑动事件组合起来：向上滑动时，先等达到 header 最大滑动范围之后，再将滑动分配给 inner 消耗；当向下滑动时，一般先恢复 inner 的 overscroll（如果_floatHeaderSlivers 为 true，会先尝试下滑 header），尝试将其恢复至 offset 为 0 的状态，再尝试将 header 向下滑动到初始位置，最后如果有 overscroll，会尝试应用到 inner 上面。\",\"CustomScrollView 也支持在同一个页面内嵌套多个滑动列表并关联（在其 slivers 中传入多个 SliverList,SliverGrid 等），但是 CustomScrollView 不支持普通的滑动 view，比如 ListView 等，这些滑动布局会内部消耗掉滑动事件，从而无法与 CustomScrollView 内其余 sliver 正常联动。\"]},\"420\":{\"h\":\"总结\",\"t\":[\"NestedScrollView 内部通过 NestedScrollViewState.build() 创建继承自 CustomScrollView 的_NestedScrollViewCustomScrollView。\",\"通过 NestedScrollView._buildSlivers() 将 NestedScrollView.headerSliverBuilder 返回的 sliver 列表（下称 header）和被 SliverFillRemaining 包裹的 body 组合在一起，使得在_NestedScrollViewCustomScrollView 中创建的 viewport 的创建的_NestedScrollCoordinator.outerPosition 的_maxScrollExtent 为 NestedScrollView 的 header 的主轴尺寸，而_NestedScrollCoordinator._innerPositions 的_maxScrollExtent 则是与 body 实际内容一致。\",\"_NestedScrollViewCustomScrollView 的 ScrollController 是_NestedScrollCoordinator._outerController，其创建了_NestedScrollCoordinator.outerPosition，所以整个 NestedScrollView 的滑动事件都会通过_NestedScrollCoordinator._outerController 转到给_NestedScrollCoordinator.applyUserOffset 方法。\",\"在_NestedScrollCoordinator.applyUserOffset 方法中，根据滑动方向的不同，依次协调_NestedScrollCoordinator.outerPosition 和_NestedScrollCoordinator._innerPositions 处理用户 drag 等产生的 delta，修改这两个 ScrollPosition 的值，从而实现 header 和 body 的滑动联动。\"]},\"421\":{\"h\":\"参考资料\",\"t\":[\"NestedScrollView_api.flutter.dev\"]},\"422\":{\"h\":\"Flutter 滑动分析之 Scrollview\",\"t\":[\"Flutter 中的 scrollable widget 根据实现方式的不同，可以分为两大类：\",\"基于 RenderBox 的 box protocol 实现的，主要基于 Size 实现布局。常见的有 SingleChildScrollView。\",\"基于 RenderSliver 的 sliver protocol 实现的，主要基于 SliverGeometry 实现布局。比如 CustomScrollView 及其子类 ListView、GridView 等继承自 ScrollView 的 Widget，以及基于 CustomScrollView 的 NestedScrollView、基于 Viewport 等的 PageView、TabBarView 等直接对 SliverFillViewport 等进行封装的 Widget。\",\"上述所有的 scrollable widget 其底层逻辑依然是对 Scrollable 的封装，其内部处理了 ScrollController、ScrollPosition（viewport 的 offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理 scrollable view 的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出 ScrollNotification）、RawGestureDetector（手势识别）等等一系列与 scroll 有关的逻辑，从而使得其他 scrollable view 能够比较方便的实现 scroll 效果。\",\"上回我们对 SingleChildScrollView 的实现做了简单分析（见《Flutter 滑动分析之 SingleChildScrollView》），本文将对另外一种遵循 sliver protocol 的 ScrollView 做一分析。\",\"官方对 ScrollView 的定义是：“A widget that scrolls”。\",\"其主要由三部分组成：\",\"一个ScrollWidget，监听用户手势，实现 scrolling 的交互设计\",\"一个viewport widget，根据传入的 shrinkwrap 值的 true/false 分别会是 ShrinkWrappingViewport 或者 Viewport。通过根据传入的 ViewportOffset 不同而值展示 slivers 的一部分内容来实现滑动的视觉设计效果。\",\"一个或多个slivers，可以被组合起来创建各种 scrolling effects（比如 list，grids，expanding header 等）的 widget，是真正显示在屏幕上的 widget。\",\"由于默认的 ScrollView 创建的 viewport 的 slivers 属性只接受能创建 RenderSliver 的 Widget，所以 ScrollView 的List<Widget> buildSlivers(BuildContext context)方法只能返回 SliverXXX 之类（比如 SliverList）可以创建 RenderSliver 的 Widget。\",\"ScrollView 是一个抽象类，它主要的作用是将上面提到的三部分组合起来，为（遵从 sliver protocol 的）scrollable widget 封装屏蔽掉滑动底层细节，提供像buildSlivers之类的方法方便子类能够快速实现一个 scrollable widget。\"]},\"423\":{\"h\":\"源码分析\",\"t\":[\"abstract class ScrollView extends StatelessWidget{}\",\"ScrollView 继承自 StatelessWidget，他的主要逻辑在 build 方法中：\",\" Widget build(BuildContext context) { // 这里创建 slivers final List<Widget> slivers = buildSlivers(context); final AxisDirection axisDirection = getDirection(context); // scrollController 要么使用最近的 PrimaryScrollController，要么使用自己的 controller final ScrollController? scrollController = primary ? PrimaryScrollController.of(context) : controller; // 这里是主要创建 Scrollable 的地方 final Scrollable scrollable = Scrollable( dragStartBehavior: dragStartBehavior, axisDirection: axisDirection, controller: scrollController, physics: physics, scrollBehavior: scrollBehavior, semanticChildCount: semanticChildCount, restorationId: restorationId, viewportBuilder: (BuildContext context, ViewportOffset offset) { // 在这里创建 viewport，使用我们创建好的 slivers 填充 viewport // 并传入 Scrollable.ScrollPosition 作为这里的入参 offset，在 viewport 中 // 会监听 offset 的变化来重新绘制 slivers 从而实现滑动效果 return buildViewport(context, offset, axisDirection, slivers); }, ); final Widget scrollableResult = primary && scrollController != null ? PrimaryScrollController.none(child: scrollable) : scrollable; // 这里是处理当 scrollable view 滑动时隐藏键盘的逻辑 if (keyboardDismissBehavior == ScrollViewKeyboardDismissBehavior.onDrag) { return NotificationListener<ScrollUpdateNotification>( child: scrollableResult, onNotification: (ScrollUpdateNotification notification) { final FocusScopeNode focusScope = FocusScope.of(context); if (notification.dragDetails != null && focusScope.hasFocus) { focusScope.unfocus(); } return false; }, ); } else { return scrollableResult; } }\",\"通过上述代码，我们可以验证之前的判断：ScrollView 本身是对 Scrollable、viewport、slivers 的封装。具体的处理滑动手势、更新 ScrollPosition、发送 ScrollNotification 等等都在 Scrollable 中处理了，ScrollView 的子类只需要按照要求提供 slivers（通过 buildSlivers 方法）和其他一些必须的信息即可。\",\"上面的代码中还分别调用了 buildViewport 和 buildSlivers 方法，接下来我们逐一分析一下他们的源码。\"]},\"424\":{\"h\":\"Widget buildViewport()\",\"t\":[\"buildViewport 方法顾名思义，是用来创建 viewport 的。在 ScrollView 中默认会按照 shrinkWrap 的不同创建两种 viewport，他的子类也可以根据需要重写此方法以返回自己的 viewport。\",\" Widget buildViewport( BuildContext context, ViewportOffset offset, AxisDirection axisDirection, List<Widget> slivers, ) { assert(() { switch (axisDirection) { case AxisDirection.up: case AxisDirection.down: // 如果是上述两种 AxisDirection 说明 Axis 是 Axis.vertical 的，那么就 // 需要判断是否此 widget 是否有 Directionality 可以用来判断文本布局方向 // 如果没法判断则抛出 FlutterError，否则返回 true return debugCheckHasDirectionality( context, why: 'to determine the cross-axis direction of the scroll view', hint: 'Vertical scroll views create Viewport widgets that try to determine their cross axis direction ' 'from the ambient Directionality.', ); // 如果 getDirection() 能得出下面两种 AxisDirection 说明 Axis 是 // Axis.horizontal 的，并且已经得知文本方向，所以直接返回 true case AxisDirection.left: case AxisDirection.right: return true; } }()); // 经过上述检查，到这里 widget 的文本方向（TextDirection）一定已经确定了 // 这里根据 shrinkWrap 的不同分别创建两种 viewport if (shrinkWrap) { return ShrinkWrappingViewport( axisDirection: axisDirection, offset: offset, slivers: slivers, clipBehavior: clipBehavior, ); } return Viewport( axisDirection: axisDirection, offset: offset, slivers: slivers, cacheExtent: cacheExtent, center: center, anchor: anchor, clipBehavior: clipBehavior, ); }\",\"可以看到，在 buildViewport() 方法中，显示在 debug 模式下检查确保 widget 已经确定了文本方向（TextDirection 是 rtl 还是 ltr）；然后根据 shrinkWrap 的不同分别创建 ShrinkWrappingViewport 或者 Viewport，他们会根据 offset 的变化展示不同部分的 slivers。\",\"ShrinkWrappingViewport 和 Viewport 都是继承自 MultiChildRenderObjectWidget 的 widget，主要逻辑是分别创建对应的 RenderObject：RenderShrinkWrappingViewport 和 RenderViewport，而这两者又都继承自 RenderViewportBase。\",\"class Viewport extends MultiChildRenderObjectWidget { @override RenderViewport createRenderObject(BuildContext context) { return RenderViewport(...); } @override void updateRenderObject(BuildContext context, RenderViewport renderObject) { renderObject...; } @override MultiChildRenderObjectElement createElement() => _ViewportElement(this); }\",\"class ShrinkWrappingViewport extends MultiChildRenderObjectWidget { @override RenderShrinkWrappingViewport createRenderObject(BuildContext context) { return RenderShrinkWrappingViewport(...); } @override void updateRenderObject(BuildContext context, RenderShrinkWrappingViewport renderObject) { renderObject...; } }\"]},\"425\":{\"h\":\"RenderViewportBase\",\"t\":[\"abstract class RenderViewportBase<ParentDataClass extends ContainerParentDataMixin<RenderSliver>> extends RenderBox with ContainerRenderObjectMixin<RenderSliver, ParentDataClass> implements RenderAbstractViewport {}\",\"RenderViewportBase 继承自 RenderBox，混入了 ContainerRenderObjectMixin<RenderSliver, ParentDataClass>类，本身不持有 children，但提供了在 RenderBox 中容纳 RenderSliver 的一些通用方法：\",\"自动添加监听_offset 的方法，在其变化时执行 markNeedsLayout() 方法实现滑动效果\",\"提供按照_offset 的值 layout、paint 持有的 children 的方法\",\"通过 hitTestChildren 实现 children 的 hit test\"]},\"426\":{\"h\":\"校验 children 类型是否为 RenderSliver\",\"t\":[\"在 RenderViewportBase 混入的 ContainerRenderObjectMixin<RenderSliver, ParentDataClass>的 debugValidateChild() 方法中会检验 child 的类型是否为指定的 ChildType（在 RenderViewportBase 中 ChildType 为 RenderSliver），如果不是则会抛出 FlutterError，这也是 ScrollView 默认 Viewport 只支持可以创建 RenderSliver 的 Widget 的原因。\",\"mixin ContainerRenderObjectMixin<ChildType extends RenderObject, ParentDataType extends ContainerParentDataMixin<ChildType>> on RenderObject { bool debugValidateChild(RenderObject child) { assert(() { if (child is! ChildType) {// 此处会校验 child 的类型 throw FlutterError.fromParts(<DiagnosticsNode>[ ... ]); } return true; }()); return true; } }\",\"可见 ContainerRenderObjectMixin 提供了检测 child 类型的方法，那么它是在什么时候被调用的呢？\",\"无论是 Viewport 还是 ShrinkWrappingViewport 都继承自 MultiChildRenderObjectWidget，其会创建 MultiChildRenderObjectElement。\",\"MultiChildRenderObjectElement.insertRenderObjectChild() 添加 child 中的 RenderObject 时都会先检查一下 child 的类型：\",\"class MultiChildRenderObjectElement extends RenderObjectElement { @override void insertRenderObjectChild(RenderObject child, IndexedSlot<Element?> slot) { final ContainerRenderObjectMixin<RenderObject, ContainerParentDataMixin<RenderObject>> renderObject = this.renderObject; // 注意这里调用 MultiChildRenderObjectElement 持有的 RenderObject 的 // debugValidateChild 方法校验 child 类型 assert(renderObject.debugValidateChild(child)); renderObject.insert(child, after: slot.value?.renderObject); assert(renderObject == this.renderObject); } }\",\"而因为不管是 RenderShrinkWrappingViewport 还是 RenderViewport 都是继承自 RenderViewportBase，也就会执行ContainerRenderObjectMixin<RenderSliver, ParentDataClass>.debugValidateChild(child)方法，校验 child 类型是否为 RenderSliver，所以会在其slivers中直接传入 box widget 则会报错“A RenderViewport expected a child of type RenderSliver but received a child of type RenderXXX.”\"]},\"427\":{\"h\":\"RenderViewport\",\"t\":[\"class RenderViewport extends RenderViewportBase<SliverPhysicalContainerParentData> {}\",\"RenderViewport 是 Flutter 滑动机制的主力，他通过监听offset的变化展示children的一部分来实现滑动的视觉效果，他会占据父级给的最大空间（大小由父级指定）。\",\"其内部持有一个双向的 slivers 列表children，以在 zero scroll offset 的center为锚点：\",\"slivers 列表中在 center 之前的 Slivers 按照列表反方向，沿着 axisDirection 的反方向展示。\",\"slivers 列表中在 center 之后的 Slivers 按照列表的方向，沿着 axisDirection 的方向展示。\",\"比如一个 axisDirection 为 AxisDirection.down，children 列表为[\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"center\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\"]，center 为“center”，那么默认会展示[\\\"center\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\"]，当手指向下滑动的时候，会依次展示出“3”、“2”、“1”，等完全下拉之后，展示内容为：[\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"center\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\"]。\"]},\"428\":{\"h\":\"RenderShrinkWrappingViewport\",\"t\":[\"class RenderShrinkWrappingViewport extends RenderViewportBase<SliverLogicalContainerParentData>{}\",\"RenderShrinkWrappingViewport 通过监听offset的变化展示children的一部分来实现滑动的视觉效果，与 Viewport 不同的是，他会 shrinkWrap（收缩包装）自己以便在主轴上匹配 children 的 size（大小由 RenderShrinkWrappingViewport 根据 children 计算而来），比较耗费性能（特别是当 item 可能会通过折叠展开等方式改变尺寸时）。\"]},\"429\":{\"h\":\"List<Widget> buildSlivers()\",\"t\":[\"ScrollView 的 buildSlivers 方法是抽象方法，由子类根据需要实现，一般子类也只需要重写此方法即可。\",\" /// Build the list of widgets to place inside the viewport. /// /// Subclasses should override this method to build the slivers for the inside /// of the viewport. @protected List<Widget> buildSlivers(BuildContext context);\"]},\"430\":{\"h\":\"使用示例\",\"t\":[\"CustomScrollView 就是继承自 ScrollView：\",\"class CustomScrollView extends ScrollView { /// Creates a [ScrollView] that creates custom scroll effects using slivers. /// /// See the [ScrollView] constructor for more details on these arguments. const CustomScrollView({ ... }) : super( ... ); /// The slivers to place inside the viewport. final List<Widget> slivers; @override List<Widget> buildSlivers(BuildContext context) => slivers; }\",\"可以看到 CustomScrollView 的实现比较简单，主要逻辑是将传入的参数slivers作为List<Widget> buildSlivers(BuildContext context)的返回值。这导致我们在使用 CustomScrollView 的时候，需要传入 SliverList、SliverAppBar 等这些继承自 SliverMultiBoxAdaptorWidget 能创建 RenderSliver 的 Widget，而不是普通的 box widget。\"]},\"431\":{\"h\":\"总结\",\"t\":[\"ScrollView 的子类借助 SliverMultiBoxAdaptorWidget 及其子类可以实现对 item 的懒加载从而避免创建无法通过 viewport 可见的 children（这种类型的传参一般都需传入 SliverChildDelegate 的子类），从而优化性能。\",\"而根据 shrinkWrap 的不同，分别使用 Viewport 和 ShrinkWrappingViewport 创建 viewport，从而分别实现按照父级指定 size 或按照子级计算 size（比较耗性能）。\",\"ScrollView 是 Flutter 中基于 sliver protocol 的 scrollable widget 的父类，因为 viewport 的限制只接受创建 RenderSliver 的 widget 作为其直接子类。其子类则通过 SliverMultiBoxAdaptorWidget 及其子类实现加载 box widget。\",\"以下类都是基于 ScrollView 实现的 scrollable widget：\",\"CustomScrollView\",\"BoxScrollView\",\"ListView\",\"GridView\"]},\"432\":{\"h\":\"参考资料\",\"t\":[\"ScrollView_api.flutter.dev\"]},\"433\":{\"h\":\"Flutter 滑动分析之 SingleChildScrollView\",\"t\":[\"Flutter 中的 scrollable widget 根据实现方式的不同，可以分为两大类：\",\"基于 RenderBox 的 box protocol 实现的，主要基于 Size 实现布局。常见的有 SingleChildScrollView。\",\"基于 RenderSliver 的 sliver protocol 实现的，主要基于 SliverGeometry 实现布局。比如 CustomScrollView 及其子类 ListView、GridView 等继承自 ScrollView 的 Widget，以及基于 CustomScrollView 的 NestedScrollView、基于 Viewport 等的 PageView、TabBarView 等直接对 SliverFillViewport 等进行封装的 Widget。\",\"上述所有的 scrollable widget 其底层逻辑依然是对 Scrollable 的封装，其内部处理了 ScrollController、ScrollPosition（viewport 的 offset）、ViewportBuilder（容纳滚动内容的容器）、ScrollPhysics（管理 scrollable view 的物理属性，比如是否可以滚动或弹性滚动等）、ScrollActivity（对外发出 ScrollNotification）、RawGestureDetector（手势识别）等等一系列与 scroll 有关的逻辑，从而使得其他 scrollable view 能够比较方便的实现 scroll 效果。\",\"本文只对 SingleChildScrollView 的源码实现做一简单分析：它是如何实现滚动效果，有什么优势和限制。\",\"官方对其定义是：“A box in which a single widget can be scrolled”。明确表明，SingleChildScrollView 是遵守 box protocol 的 widget，在其内部也只能有一个box widget。\"]},\"434\":{\"h\":\"用例\",\"t\":[\"下面是一个 SingleChildScrollView 的简单使用：\",\"SingleChildScrollView( child: Column( children: List.generate( 20, (index) => SizedBox( height: 50, child: Center(child: Text(\\\"item $index\\\")), )), ), )\",\"在这个例子中，SingleChildScrollView 中容纳了一个叫 Column 的 child，如果 Column 的高度无法在屏幕中完全展示，就 SingleChildScrollView 就会保证用户可以上下滑动，从而展示对应的内容；否则如果能够完全显示，则内容无法滑动。\"]},\"435\":{\"h\":\"源码分析\"},\"436\":{\"h\":\"SingleChildScrollView\",\"t\":[\"class SingleChildScrollView extends StatelessWidget {}\",\"作为一个 StatelessWidget，SingleChildScrollView 的主要逻辑在他的build()方法中：\",\" Widget build(BuildContext context) { final AxisDirection axisDirection = _getDirection(context); Widget? contents = child; if (padding != null) contents = Padding(padding: padding!, child: contents); // 这里 scrollController 如果没有指定或者 primary 为 true 的话会使用上级最近的 // PrimaryScrollController final ScrollController? scrollController = primary ? PrimaryScrollController.of(context) : controller; // 正如我们之前所说，SingleChildScrollView 实现其实也就是对 Scrollable 的 // 进一步封装，提供一些自己特有的内容，比如_SingleChildViewport Widget scrollable = Scrollable( dragStartBehavior: dragStartBehavior, axisDirection: axisDirection, controller: scrollController, physics: physics, restorationId: restorationId, viewportBuilder: (BuildContext context, ViewportOffset offset) { // 这里使用了自定义的 Viewport 来实现布局逻辑 return _SingleChildViewport( axisDirection: axisDirection, offset: offset,// offset 就是 Scrollable 处理的 ScrollPosition clipBehavior: clipBehavior, child: contents,// 就是我们传入的 child ); }, ); // 这里处理了滑动时键盘隐藏的问题 if (keyboardDismissBehavior == ScrollViewKeyboardDismissBehavior.onDrag) { scrollable = NotificationListener<ScrollUpdateNotification>( child: scrollable, onNotification: (ScrollUpdateNotification notification) { final FocusScopeNode focusNode = FocusScope.of(context); if (notification.dragDetails != null && focusNode.hasFocus) { focusNode.unfocus(); } return false; }, ); } return primary && scrollController != null ? PrimaryScrollController.none(child: scrollable) : scrollable; }\",\"可以看到，正如之前所言，SingleChildScrollView 是依赖于封装 Scrollable 实现滑动效果。我们注意到在 Scrollable.viewportBuilder 中传入的是_SingleChildViewport，这个类处理了 Scrollable 传入的 ScrollPosition 也即这里的 ViewportOffset：\"]},\"437\":{\"h\":\"_SingleChildViewport\",\"t\":[\"_SingleChildViewport 继承自 SingleChildRenderObjectWidget，主要逻辑是创建和更新 RenderObject——_RenderSingleChildViewport。\",\"class _SingleChildViewport extends SingleChildRenderObjectWidget { @override _RenderSingleChildViewport createRenderObject(BuildContext context) { return _RenderSingleChildViewport( axisDirection: axisDirection, offset: offset,// 此处的 offset 是来自于 Scrollable 的 ScrollPosition clipBehavior: clipBehavior, ); } @override void updateRenderObject(BuildContext context, _RenderSingleChildViewport renderObject) { // Order dependency: The offset setter reads the axis direction. renderObject ..axisDirection = axisDirection ..offset = offset// 此处的 offset 是来自于 Scrollable 的 ScrollPosition ..clipBehavior = clipBehavior; } }\",\"可见处理 offset 以便更新 content 实现滑动效果的主要逻辑在_RenderSingleChildViewport 这个 RenderObject 中。\"]},\"438\":{\"h\":\"_RenderSingleChildViewport\",\"t\":[\"先看一下_RenderSingleChildViewport 的继承关系：class _RenderSingleChildViewport extends RenderBox with RenderObjectWithChildMixin<RenderBox> implements RenderAbstractViewport{}\",\"由上述代码可知，_RenderSingleChildViewport：\",\"是 RenderBox，也就是说其内部 lay out 遵守 box protocol\",\"RenderObjectWithChildMixin<RenderBox>，RenderObjectWithChildMixin 为 RenderObject 提供一套管理单个 child 的模式，它的泛型指定了 child 的类型只能是 RenderBox，这也就是为什么我们之前说 SingleChildScrollView 的 child 只能是 box widget。\",\"实现了 RenderAbstractViewport 接口，这个接口表示 render object 是内部比实际要大，提供了一些方法供 ScrollPosition 和其他 viewport 调用，来获取一些使此 viewport 在屏幕上可见的信息。\",\"在修改 axisDirection、offset、cacheExtent 等三个属性的时候会触发 markNeedsLayout() 方法重新进行 lay out； 在修改 clipBehavior 属性的时候只会触发 markNeedsPaint() 和 markNeedsSemanticsUpdate() 方法。\",\"此外，在每次设置 offset 的时候，都会对齐添加监听，这样当 Scrollable 中由于用户手势或者通过 ScrollController 调用 jumpTo/animateTo 等方法修改了 ScrollPosition 的时候，都会使得 Scrollab 的 viewport 也就是我们这里的_RenderSingleChildViewport 收到通知、从而进行对应处理：\",\" set offset(ViewportOffset value) { assert(value != null); if (value == _offset) return; if (attached) // 先移除已有的监听 _offset.removeListener(_hasScrolled); _offset = value; if (attached) // 再为新的 offset 添加监听 _offset.addListener(_hasScrolled); markNeedsLayout(); } void _hasScrolled() { markNeedsPaint(); markNeedsSemanticsUpdate(); }\",\"除了上述在修改 offset 的时候添加/移除监听，在 attach/detach 方法中也有对应操作：\",\" @override void attach(PipelineOwner owner) { super.attach(owner); _offset.addListener(_hasScrolled); } @override void detach() { _offset.removeListener(_hasScrolled); super.detach(); }\",\"从上面的分析我们也可以看出，除了设置修改 axisDirection、offset、cacheExtent 等属性的时候会触发 layout 外，其余时候只会触发重新 paint。\"]},\"439\":{\"h\":\"layout\",\"t\":[\"一般来说 Flutter Widget 要展示在屏幕上需要经历 build、layout、paint 三步，在分析 SingleChildScrollView 如何根据 offset 的变化实现 scroll 效果之前，我们先看一下他是如何实现 layout 的。\",\" void performLayout() { final BoxConstraints constraints = this.constraints; if (child == null) { size = constraints.smallest;// 如果 child 为空，则按照父级的最小尺寸来 } else { // 如果有 child，就不限制主轴方向的尺寸，让 child 进行 layout（会得到最大的主轴尺寸） child!.layout(_getInnerConstraints(constraints), parentUsesSize: true); // 在父级约束范围内尽可能满足 child 的尺寸 size = constraints.constrain(child!.size); } // 使用_viewportExtent 作为 offset 的 viewport 范围 offset.applyViewportDimension(_viewportExtent); // 更新 viewport 的内容 content 的大小范围 offset.applyContentDimensions(_minScrollExtent, _maxScrollExtent); } // 只有横轴方向的约束，没有主轴方向的约束 BoxConstraints _getInnerConstraints(BoxConstraints constraints) { switch (axis) { case Axis.horizontal: // 如果是水平布局，就只限制高度，不限制宽度 return constraints.heightConstraints(); case Axis.vertical: // 如果是垂直布局，就只限制宽度，不限制高度 return constraints.widthConstraints(); } }\",\"可以看到在 SingleChildScrollView 先让 child 在主轴方向尽可能自由布局，取得其最大值，然后自身在满足父级约束的情况下应用 child 的 size：如果 child.size 在父级约束内就直接应用，负责采用父级的约束。\",\"这样最终的效果就是我们的 SingleChildScrollView 在 child 不超过父级约束的时候只占据 child 的内容，当 child 的内容大于父级约束时，SingleChildScrollView 自身的尺寸是父级给定的最大尺寸，而 child 本身在主轴方向上的尺寸是大于 SingleChildScrollView 的尺寸。这样也为我们后续通过监听 offset 修改显示部分 child 的内容实现滑动效果提供了可能。\",\"这也告诉我们 SingleChildScrollView 的父级需要指定指定主轴方向约束，否则会出现异常。 比如在 Column 中直接使用 SingleChildScrollView 就会在内容过长的时候发生overflowed错误并且无法滑动 SingleChildScrollView，这是因为 SingleChildScrollView 和 child 都按照最长的尺寸布局，并且这个尺寸超过了父级约束。 在 SingleChildScrollView 外层添加 Expanded 作为父级，相当于给他指定了一个约束（占据剩余空间），所以可以解决这个问题。\",\"之后，又根据_viewportExtent 以及_minScrollExtent/_maxScrollExtent 分别设置了 viewport 和 content 的范围，让我们看一下这三个值的来历：\",\" double get _viewportExtent { assert(hasSize); switch (axis) { case Axis.horizontal: return size.width; case Axis.vertical: return size.height; } }\",\"可以看到，_viewportExtent 是取值主轴方向的 size 大小，也就是 SingleChildScrollView 的尺寸。\",\" double get _minScrollExtent { assert(hasSize); return 0.0; } double get _maxScrollExtent { assert(hasSize); if (child == null) return 0.0; switch (axis) { case Axis.horizontal: return math.max(0.0, child!.size.width - size.width); case Axis.vertical: return math.max(0.0, child!.size.height - size.height); } }\",\"_minScrollExtent 默认返回 0.0； _maxScrollExtent 返回的是主轴方向上 child 减去 SingleChildScrollView 之后的尺寸和 0.0 之间的最大值，换言之，如果 child 比 SingleChildScrollView 尺寸大，_maxScrollExtent 就是多出来的那一部分，也就是我们可以滑动的范围，否则为 0.0，也就是 SingleChildScrollView 不可滑动。\"]},\"440\":{\"h\":\"paint\",\"t\":[\"到目前为止，我们的 SingleChildScrollView 顺利得到了尺寸，假设 child 尺寸大于 SingleChildScrollView 的最大尺寸，那么当用户滑动屏幕导致 offset 改变的时候，又是如何实现滑动效果的呢？\",\"先看一个属性：\",\" // offset.pixels 表示 child 沿着与轴方向 axis direction 相反的方法 offset 的 pixels // 比如 axis direction 是 down 的话，手指向上滑动屏幕此值增大，否则减小 Offset get _paintOffset => _paintOffsetForPosition(offset.pixels); // 根据 position 计算出 child 实际在 SingleChildScrollView 中的 offset // 以 child 的左上角在 SingleChildScrollView 左上角为 0.0，向上为负，向下为正 Offset _paintOffsetForPosition(double position) { assert(axisDirection != null); switch (axisDirection) { case AxisDirection.up: return Offset(0.0, position - child!.size.height + size.height); case AxisDirection.down: return Offset(0.0, -position); case AxisDirection.left: return Offset(position - child!.size.width + size.width, 0.0); case AxisDirection.right: return Offset(-position, 0.0); } }\",\"可以看出，_paintOffset 是根据 ScrollPosition 计算出来的真正的 child 和 SingleChildScrollView 的偏移 offset。\",\" @override void paint(PaintingContext context, Offset offset) { if (child != null) { final Offset paintOffset = _paintOffset; void paintContents(PaintingContext context, Offset offset) { // 可以看到这里，除了父级传入的 offset 外，还应用了 ScrollPosition 改变而变化的 // paintOffset。这样每次 Scrollable 修改 ScrollPosition 之后都会触发 paint // 方法，使用新的 paintOffset 绘制 child context.paintChild(child!, offset + paintOffset); } if (_shouldClipAtPaintOffset(paintOffset) && clipBehavior != Clip.none) { _clipRectLayer.layer = context.pushClipRect( needsCompositing, offset, Offset.zero & size, paintContents, clipBehavior: clipBehavior, oldLayer: _clipRectLayer.layer, ); } else { _clipRectLayer.layer = null; paintContents(context, offset); } } }\",\"到此为止，我们可以得出以下结论：\",\"_RenderSingleChildViewport 接收传入的 child，并监听传入的 Offset，当其变化时执行 markNeedPaint()； 其先让 child 在主轴方向尽可能大的进行 layout，然后自身在父级约束条件下尽可能满足 child size，这样当 child 比父级给的约束大时，child 保持自身大小，而 viewport 的 size 则在父级给的最大尺寸内展示一部分 child 内容； 当 Offset 变化时，按照 Offset.pixels 计算出对应的 paintOffset，重新绘制 child，展示另外一部分 child 的内容，从而实现滑动效果。\"]},\"441\":{\"h\":\"hitTest\",\"t\":[\"_RenderSingleChildViewport 将 hitTest 直接转发给了 child：\",\" @override bool hitTestChildren(BoxHitTestResult result, { required Offset position }) { if (child != null) { return result.addWithPaintOffset( offset: _paintOffset, position: position, hitTest: (BoxHitTestResult result, Offset transformed) { assert(transformed == position + -_paintOffset); return child!.hitTest(result, position: transformed); }, ); } return false; }\",\"至此，SingleChildScrollView 基于 Scrollable、ScrollPosition 和_RenderSingleChildView 完成了支持内部单个 box widget 的滑动效果。\"]},\"442\":{\"h\":\"优劣对比\",\"t\":[\"相对于使用 Sliver 实现滑动效果的 Widget 来说，SingleChildScrollView 使用简单，使用的是 box protocol，适用于 child 通常是完全可见的，但是在某些特殊场景（比如竖屏变为横屏等）下可能显示不全的情况，SingleChildScrollView 可以保证在父级无法完整显示 child 的时候使其支持滑动。 SingleChildScrollView 使用起来也比较方便。\",\"但是，正如上面分析的，无论 content 是否可见，SingleChildScrollView 都会将其 layout/paint（也就是说会将所有内容全部加载），这样如果 content 超出 viewport 的部分比较多就会非常耗费性能。\",\"对于这种情况，就应该考虑使用 ListView/GridView/CustomScrollView 等基于 sliver protocol 的 scrollable widget。在 shrinkWrap 属性为 false 的情况下，viewport 会只创建屏幕可见部分 + viewport 前后缓存区域的内容，在 content 滑出这部分区域时 dispose，当其再次滑入时再 recreate，从而保证性能。\"]},\"443\":{\"h\":\"进阶使用\"},\"444\":{\"h\":\"为 Column 的 children 安全应用 spacedAround，center 等效果\",\"t\":[\"想要给 Column 的 children 设置 spacedAround 效果，又需要保证在父级空间不足时能够完整显示所有 children 的内容的话，就需要结合 SingleChildScrollView（空间不足时可滑动）、LayoutBuilder（获取父级约束信息）、ConstrainedBox（设置 Column 约束）来实现：\",\"child: LayoutBuilder(// 获取父级约束信息 builder: (BuildContext context, BoxConstraints viewportConstraints) { return SingleChildScrollView(// 父级空间不足时可以滚动 child: ConstrainedBox( constraints: BoxConstraints( // 这里指定最小高度为父级高度，所以空间足够时 Column 可以按需分布 children， // 空间不足时则将 children 一个个依次排列（互相之间 space 为 0） minHeight: viewportConstraints.maxHeight, ), child: Column( mainAxisSize: MainAxisSize.min,// 默认主轴尺寸尽可能的小 mainAxisAlignment: MainAxisAlignment.spaceAround, children: <Widget>[ Container( // A fixed-height child. color: const Color(0xffeeee00), // Yellow height: 120.0, alignment: Alignment.center, child: const Text('Fixed Height Content'), ), Container( // Another fixed-height child. color: const Color(0xff008000), // Green height: 120.0, alignment: Alignment.center, child: const Text('Fixed Height Content'), ), ], ), ), ); }, )\",\"这里使用 ConstrainedBox 确保了 Column 主轴方向最小尺寸是父级大小：\",\"当父级尺寸大于 Column 的 children 尺寸时，多出的空隙由 Column 按照 MainAxisAlignment.spaceAround 原则分配，由于 SingleChildScrollView 的 child 尺寸和父级一致，所需不会滑动；\",\"当父级尺寸小于 Column 的 children 尺寸时，Column 的尺寸为 children 的尺寸之和（相互之间没有间隙），此时 SingleChildScrollView 的 child 尺寸大于父级尺寸，所以可以上下滑动，保证了 Column 的 children 可以完全显示。\"]},\"445\":{\"h\":\"为 Column 的 children 安全应用 Expanded、Space 等效果\",\"t\":[\"在一些场景下，需要用到 Expanded、Space 等填充 Column 剩余的空间以展示某些内容，比如一直位于屏幕下方的版权信息，但是当 Column 的 children 尺寸大于父级尺寸时，又会导致 children 内容无法完整显示，如果直接在 Column 上加一个 SingleChildScrollView 作为父级，又会因为 SingleChildScrollView 给 child 在主轴方向的尺寸无限制，而 Expanded 又要求占据所有剩余空间从而导致出错。\",\"此时可以在上面例子的基础上增加 IntrinsicHeight/InstrinsicWidth 来解决此问题：\",\"LayoutBuilder(// 获取父级约束信息 builder: (BuildContext context, BoxConstraints viewportConstraints) { return SingleChildScrollView(// 保证 child 超出父级限制时可以滑动 child: ConstrainedBox( constraints: BoxConstraints( // 这里指定最小高度为父级高度，所以空间足够时 Column 可以按需分布 children， // 空间不足时则将 children 一个个依次排列（互相之间 space 为 0） minHeight: viewportConstraints.maxHeight, ), child: IntrinsicHeight( // 当 minHeight:viewportConstraints.maxHeight 比 Column 想要的大时， // 那么 Column 采用 viewportConstraints.maxHeight 的值 // 否则 Column 按照自己的内容大小来 child: Column( children: <Widget>[ Container( // A fixed-height child. color: const Color(0xffeeee00), // Yellow height: 320.0, alignment: Alignment.center, child: const Text('Fixed Height Content'), ), Expanded( // A flexible child that will grow to fit the viewport but // still be at least as big as necessary to fit its contents. child: Container( color: const Color(0xffee0000), // Red height: 120.0, alignment: Alignment.center, child: const Text('Flexible Content'), ), ), ], ), ), ), ); }, )\",\"在上面例子中，作为 SingleChildScrollView 子级的 Column 内部能够使用 Expanded 的关键在于 InstrinsicHeight：它的定义是“一个将 child 调整为 child 固有高度的 widget”，也就是说，当child 可能有无限的高度时，与其无限拓展，它更希望将自己 size 定位一个更加合理的固有高度（Expanded、Spacer 等非 RenderObjectWidget 本身没有高度，所以在这里不会被计算）。\",\"那么，当父级指定的最小约束 minHeight 大于 InstrinsicHeight.child 的最大固有高度时，child 将按照父级的最小高度设置； 当父级指定的最大约束是 double.infinity 无限大时，InstrinsicHeight 会强制其 child 的大小为固有高度。\",\"但是需要注意的是，IntrinsicHeight/InstrinsicWidth 因为至少需要对 child 进行两次 layout（一次获取 intrinsic dimensions，一次真正的执行 layout），所以会比较耗费性能。因此应当保证 Column 子级数量尽可能少，并且可以使用 SizeBox 给 child 指定大小以减轻计算 intrinsic dimensions 的压力。\"]},\"446\":{\"h\":\"总结\",\"t\":[\"SingleChildScrollView 作为遵守 box protocol 的 scrollable widget，使用简单，适用于页面内容通常为全部可见，但特殊情况下可能无法完整显示因而需要支持滚动的情况。\",\"其 child 只支持可以生成 RenderBox 的 Widget，会一次性创建所有 child 内容，在其内部使用 ListView 等时需要开启 shrinkWrap 从而导致其懒创建 item 失效，比较耗费性能。\",\"因此，如果是大量 item、child 内容超出 viewport 部分时，应当考虑使用基于 Sliver 的 ListView/GridView/CustomScrollView 等。\"]},\"447\":{\"h\":\"参考资料\",\"t\":[\"SingleChildScrollView_api.flutter.dev\"]},\"448\":{\"h\":\"Hello World\",\"t\":[\"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\"]},\"449\":{\"h\":\"Quick Start\"},\"450\":{\"h\":\"Create a new post\",\"t\":[\"hexo new \\\"My New Post\\\"\",\"More info: Writing\"]},\"451\":{\"h\":\"Run server\",\"t\":[\"hexo server\",\"More info: Server\"]},\"452\":{\"h\":\"Generate static files\",\"t\":[\"hexo generate\",\"More info: Generating\"]},\"453\":{\"h\":\"Deploy to remote sites\",\"t\":[\"hexo deploy\",\"More info: Deployment\"]},\"454\":{\"h\":\"JVM 内存分配\",\"t\":[\"本笔记基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》及部分在线博客整理。\",\"JVM：java virtual machine，一个 java 程序（进程）拥有一个 jvm 实例\"]},\"455\":{\"h\":\"内存\",\"t\":[\"JVM 区域总体分两类，heap 区和非 heap 区：\",\"heap 区：Eden Space（伊甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代 - 养老区）。非 heap 区：Code Cache(代码缓存区)、Perm Gen（永久代）、Jvm Stack(Java 虚拟机栈)、Local Method Statck(本地方 法栈)。\"]},\"456\":{\"h\":\"内存划分\"},\"457\":{\"h\":\"1.head\",\"t\":[\"堆，所有线程共享，存放所有对象实例、数组，GC 主要场所，会 OOM\",\"分类\",\"1.新生代\",\"eden 刚刚创建的对象优先\",\"s1 经历几次 GC\",\"s2 经历几次 GC\",\"2.老年代\",\"存活时间长的老年对象\",\"大对象，如数组，大 String...\"]},\"458\":{\"h\":\"2.stack\",\"t\":[\"栈，线程私有，存放基本数据和对象的引用，LIFO，会 OOM，StackOverflow\"]},\"459\":{\"h\":\"java virtual machine stack\",\"t\":[\"线程请求的栈深度大于 JVM 允许的深度会导致 Stack Overflow 在编译期完成内存分配，如果虚拟机栈可以动态扩展，但是当拓展时无法申请到足够内存时会导致 OutOfMemory\",\"stack frame\",\"stack frame：栈帧，每执行一个方法就会产生一个栈帧并压入栈中\",\"局部变量表\",\"基本数据类型\",\"对象引用\",\"returnAddress 类型，指向了一条字节码指令的位置\",\"操作数栈\",\"动态链接\",\"方法出口等\"]},\"460\":{\"h\":\"native method stack\",\"t\":[\"与 java 虚拟机栈作用类似，不过 native method stack 是为 native 方法服务。 jvm 可以自由实现它，甚至在 sun HotSpot VM 中将他与虚拟机栈合并 会 OOM，stackOverflow\"]},\"461\":{\"h\":\"3.method area\",\"t\":[\"方法区，线程共享，存放类信息，常量，静态变量，即时编译器编译后的代码，会 OOM\",\"运行时常量池\",\"类加载后，编译器生成的各种字面量和符号引用会放到方法区的运行时常量池中，会 OOMString.intern()，有该 string 对象则返回，无则创建并返回\",\"String.intern()方法的注意事项：\",\"JDK1.6 及以下：将首次出现的对象实例复制到永久代，返回其引用\",\"JDK1.7 及以上：只会记录下首次出现的实例的引用，返回其引用\",\"所以：\",\"String s2 = \\\"java\\\"; System.out.println(s2.intern() == s2);\",\"在 JDK1.6 及以下输出false，在 JDK1.7 及以上输出true\",\"此外，由于String类是final的，每次new String(\\\"str\\\")会产生两个对象：一个是字符串str本身，一个是值为str的字符串。\",\"以String s = \\\"Hello\\\";为例，解释几个概念：\",\"字面量 源码中表示具体的值，如Hello\",\"符号引用 用来指代某种值得符号，如s\",\"直接引用 可以定位到内存中的（类、对象、方法、变量）等的具体地址\"]},\"462\":{\"h\":\"4.program count\",\"t\":[\"程序计数器，线程私有，占用内存小，当做当前线程执行字节码的行号指示器。\",\"若执行 java 方法，计数器记录的是正在执行的虚拟机字节码指令的位置\",\"若执行的是 native 方法，则计数器为空 undefined。\",\"此内存区域是唯一一个在 java 虚拟机规范字没有规定任何 OOMError 的区域\"]},\"463\":{\"h\":\"内存溢出\",\"t\":[\"以 Sun HotSpot VM 为例\"]},\"464\":{\"h\":\"1.java 堆溢出\",\"t\":[\"对象过多导致 head 内存溢出\",\"是内存泄漏 memory leak，定位泄露对象\",\"是内存溢出 memory overflow，检查虚拟机堆参数是否可以调大；去除非必须的生命周期长的对象\"]},\"465\":{\"h\":\"2.虚拟机栈和本地方法栈溢出\",\"t\":[\"单线程，Stack Overflow\",\"单线程下，栈帧过大或者虚拟机栈容量太小，当内存无法分配时都会导致 Stack Overflow 异常\",\"多线程，\",\"多线程时，每个线程栈分配的内存越大，越容易尝试内存溢出 OOM\",\"原因：虚拟机最大内存一定的情况下，去掉共享的 Head 和 MethodArea 占的内存，剩下的内存/单个线程最大栈内存=最大线程数量，当单个线程最大栈内存增加时，可以产生的线程数就会越少\"]},\"466\":{\"h\":\"3.运行时常量池溢出\",\"t\":[\"运行时常量池属于方法区，当常量过多时会导致 OOM，可以用 String.intern() 方法尝试\"]},\"467\":{\"h\":\"4.方法区溢出\",\"t\":[\"经常动态生成大量 Class 的应用，如 Spring 等框架，需要注意 OOM\"]},\"468\":{\"h\":\"5.本地直接内存溢出\",\"t\":[\"原生方法直接操作物理内存时导致物理内存不够，产生 OOM\"]},\"469\":{\"h\":\"GC 垃圾回收\",\"t\":[\"JVM 中 GC 会根据不同情况采取以下一系列算法组合进行内存回收\"]},\"470\":{\"h\":\"回收算法\"},\"471\":{\"h\":\"1.复制算法\",\"t\":[\"原理：内存一分为二，只使用一半；GC 时将存活对象复制到另一半内存，剩下的则清空\",\"优缺点：1.无 STW，但不适合对象过多的情况；2.内存利用效率低\"]},\"472\":{\"h\":\"2.标记清除法\",\"t\":[\"原理：从 GC Roots 开始遍历，可达标记存活，不可达则未标记\",\"java 中，GC Roots 可以是以下几种：\",\"虚拟机栈（栈帧中的本地变量表）中引用的对象\",\"方法区中的类静态属性引用的对象\",\"方法区中常量引用的对象\",\"本地方法栈中 JNI 引用的对象\",\"优缺点：1.要 StopTheWorld 防止标记的时候新 new 的对象未被标记而出错；\",\"2.清除对象后内存不连续，会有一定的浪费\"]},\"473\":{\"h\":\"3.标记压缩法\",\"t\":[\"原理：类似【标记清除法】，但会对标记进行压缩，如 a->b->c，会被压缩为 a->c，具体试讲所有存活的对象都向一端移动，直接清理掉端边界外的内存\",\"优缺点：1.也要 StopTheWorld\"]},\"474\":{\"h\":\"4.引用计数算法\",\"t\":[\"原理：引用 +1，不引用 -1，为 0 则删除，但是会有相互循环引用的问题，java 未使用\",\"优缺点：相互循环使用： a = b b = a 除此之外再没有用到 a，b 的地方，但是由于 a，b 的引用不为 0 所以无法被回收，导致内存浪费\"]},\"475\":{\"h\":\"回收过程\",\"t\":[\"一个不可达对象在“死缓”到“执行死刑”前至少经历两个标记过程\",\"第一次标记，筛选：是否有必要执行 finalize() 方法，若是则放到 F-Queue 队列中【触发】该方法，但不保证执行完该方法。\",\"可以在 finlize() 方法中自救一次：在该方法中将自身 this赋值给其他变量，这样在第二次标记时会被移出即将回收集合；但是由于 finlize() 方法只会被调用一次，所以只能自救一次。并不推荐该方法，该方法所有可以做的工作，可以用try...finally或者其他方法更好的实现\",\"第二次标记，若 finalize() 方法以及调用过，或者为重写该方法，则“没必要执行”，可以回收\"]},\"476\":{\"h\":\"对象\"},\"477\":{\"h\":\"对象引用\"},\"478\":{\"h\":\"强引用 StrongReference\",\"t\":[\"People p = new People();哪怕抛出 OOM 也不会被 GC 回收的对象\"]},\"479\":{\"h\":\"软引用 SoftReference\",\"t\":[\"SoftReference sf = new SoftReference(p);只要有足够内存就不会被 GC 回收，若内存不够则会被 GC 回收，常用作服务器缓存\"]},\"480\":{\"h\":\"弱引用 WeakReference\",\"t\":[\"在下次 GC 回收之前都存在，用作 android 等内存紧张的设备中的缓存\"]},\"481\":{\"h\":\"虚引用 PhantomReference\",\"t\":[\"无法影响其生存时间，也无法通过虚引用获取其实例，设置虚引用只是为了在对象被 GC 回收时获取系统通知\"]},\"482\":{\"h\":\"脑图\"},\"483\":{\"h\":\"JVM 类加载机制之 ClassLoader\",\"t\":[\"本文为《一看你就懂，超详细 java 中的 ClassLoader 详解 - CSDN 博客》阅读笔记\"]},\"484\":{\"h\":\"简述\",\"t\":[\"JVM 有三种类加载器：\",\"BootStrap ClassLoader 启动类加载器，加载核心类库，主要加载核心类库，%JRE_HOME%\\\\lib 下的 rt.jar、resources.jar、charsets.jar 和 class 等。\",\"Extention ClassLoader 扩展类加载器，加载目录%JRE_HOME%\\\\lib\\\\ext 目录下的 jar 包和 class 文件。\",\"App ClassLoader 应用程序加载器，加载当前应用的 classpath 的所有类。\",\"除以上三种外，还有用户自定义的类加载器。\",\"每个类由加载它的类加载器和类本身确定其唯一性。也就是说，类加载器不同，类肯定不同。\"]},\"485\":{\"h\":\"加载过程\",\"t\":[\"在加载类时，通过**“双亲委托”机制，依次从1** -> 3向上查询，再从3->1依次返回结果：\",\"调用findLoadedClass(className) 查询是否已经加载该类\",\"调用父加载器的loadClass(className,false)，若父加载器为空，则调用BootStrap ClassLoader\",\"如果还是没有加载到该类，调用findClass(className)\",\"这样子保证了每个类都是先经过最顶端的类加载器BootStrap ClassLoader，如果没有加载到再依次经过Extention ClassLoader、App ClassLoader 加载，确保如 String 等关键类不会被自定义的 ClassLoader 加载而导致异常。\",\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // 首先，检测是否已经加载 Class<?> c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { //父加载器不为空则调用父加载器的 loadClass c = parent.loadClass(name, false); } else { //父加载器为空则调用 Bootstrap Classloader c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); //父加载器没有找到，则调用 findclass c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { //调用 resolveClass() resolveClass(c); } return c; } }\",\"AppClassLoader和ExtClassLoader都继承自URLClassLoader\",\"AppClassLoader的父加载器是ExtClassLoader，ExtClassLoader的父加载器为null，故而会调用BootStrap ClassLoader\",\"ClassLoader 如果没有指定父加载器，则默认的父加载器为AppClassLoader，自定义 ClassLoader 也是如此。\"]},\"486\":{\"h\":\"自定义 ClassLoader\",\"t\":[\"自定义 ClassLoader 一般步骤：\",\"继承自ClassLoader\",\"重写findClass()\",\"在findClass()方法中调用并返回defineClass()\",\"class MClasLoader:ClassLoader(){ override fun findClass(name: String?): Class<*> { var sysDir = System.getProperty(\\\"user.dir\\\") var classPath = \\\"$sysDir/src/main/res/$name.class\\\" var classFile = File(classPath) //【注意】这里一次只读取一个字节，否则会报错 java.lang.ClassFormatError: // Extra bytes at the end of class file TestClass var bytes = ByteArray(1) var fileInputStream = FileInputStream(classFile) var len = -1 var byteBuffer = ByteOutputStream() while (true) { len = fileInputStream.read(bytes) if (len > 0) { byteBuffer.write(bytes) } else { break } } var byteArr = byteBuffer.toByteArray() return defineClass(name,byteArr,0,byteArr.size) } } fun main(args: Array<String>) { var clazz = MClasLoader().loadClass(\\\"TestClass\\\") var say = clazz.getDeclaredMethod(\\\"say\\\",String::class.java) say.invoke(clazz.newInstance(),\\\"hello world\\\") print(MClasLoader().parent) }\",\"而defineClass()则将一个字节数组转化为一个类的实例（Converts an array of bytes into an instance of class with an optional ProtectionDomain）\"]},\"487\":{\"h\":\"contextClassLoader\",\"t\":[\"每个线程都有一个 ClassLoader：contextClassLoader，通过将其设置为自定义的 ClassLoader 可以在加载类的时候做一些特殊的事情。\",\" Thread.currentThread().contextClassLoader = MClasLoader() var clazz = Class.forName(\\\"TestClass\\\", true, Thread.currentThread().contextClassLoader) var say = clazz.getDeclaredMethod(\\\"say\\\",String::class.java) say.invoke(clazz.newInstance(),\\\"hello world\\\") println(Thread.currentThread().contextClassLoader ) println(Thread.currentThread().contextClassLoader.parent )\",\"结果为：\",\"hello world MClasLoader@1d44bcfa sun.misc.Launcher$AppClassLoader@18b4aac2\"]},\"488\":{\"h\":\"JVM 类加载机制解析\"},\"489\":{\"h\":\"简述\",\"t\":[\"本文介绍了 java 虚拟机类加载机制。\"]},\"490\":{\"h\":\"类加载机制\",\"t\":[\"JVM 类加载一共 7 步，前五步是类加载机制，各个步骤按照顺序进行，但是并非固定的 1,2,3 步，在实际中有可能从其中间某一步开始。\",\"类加载机制一般分为三部分：加载 Loading -> 连接 Linking -> 初始化 Initializing\",\"JVM Class Loader\",\"其中加载、验证、准备和初始化发生的顺序是确定的，但解析可以在初始化之后开始（java 动态绑定）\",\"java 绑定分为静态绑定和动态绑定：\",\"静态绑定：即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对 java，简单的可以理解为程序编译期的绑定。java 当中的方法只有 final，static，private 和构造方法是前期绑定的。\",\"动态绑定：即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定。在 java 中，几乎所有的方法都是后期绑定的。\",\"http://blog.csdn.net/ns_code/article/details/17881581\"]},\"491\":{\"h\":\"类加载机制具体过程\"},\"492\":{\"h\":\"**I.Loading **\",\"t\":[\"加载，JVM 将文件（class，jar，zip，网络等）中的二进制字节流保存到虚拟机方法区和堆中，并用该二进制表示形式创建类或者接口的过程。\",\"Loading is the process of finding the binary representation of a class or interface type with a particular name and creating a class or interface from that binary representation\",\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-5.html (英文文档若无特殊说明都是引用官方文档，下同)\",\"用类全限定名获取类的二进制字节流\",\"将字节流中静态存储结构转化为方法区的运行时数据结构\",\"在堆中生成一个代表该类的 java.lang.Class 对象，作为方法区数据的访问入口。\",\"（这句话存疑 ，有人说在堆中 ,也有人说在方法区 ,官方文档未相关描述\",\"2019/01/12 更新 Class 对象没有明确规定实在JAVA 堆中，对应 HotSpot 虚拟机来说，该对象在方法区中）\",\"类加载的地方是开发人员可控性最强的地方。除了可以使用系统的 ClassLoader 外还可以自定义 ClassLoader（后文详述）。\",\"类加载根据加载的类不同分为两种：\",\"非数组类 使用系统/自定义的类加载器完成加载\",\"数组类 数组类不通过类加载器创建，而是通过 JVM 直接创建，但是数组类的元素类型要通过类加载器创建\",\"数组类的元素加载，根据数组元素的类型不同，分为两类：\",\"引用类 通过普通类加载器加载，并将数组用该类加载器标识\",\"非引用类 将数组与引导类加载器标识\",\"数组类的可见性与其元素类的可见性一致。\"]},\"493\":{\"h\":\"**II.Linking **\",\"t\":[\"连接，是将类或者接口组合到 java 虚拟机运行状态的过程，这样他就可以被运行。\",\"Linking is the process of taking a class or interface and combining(组合) it into the run-time state of the Java Virtual Machine so that it can be executed(运行)\",\"连接一般分为 3 部分：验证 Verification、准备 Preparation、解析 Resolution。\",\"Linking a class or interface involves(包括) verifying and preparing(验证和准备) that class or interface, its direct(直接) superclass, its direct superinterfaces, and its element type (if it is an array type), if necessary. Resolution of symbolic references in the class or interface is an optional part of linking.\"]},\"494\":{\"h\":\"\",\"t\":[\"验证，保证 class 文件中的字节流信息符合虚拟机的要求。\",\"Verification(§4.10) ensures that the binary representation(二进制格式) of a class or interface is structurally correct(结构正确) (§4.9). Verification may cause additional classes and interfaces to be loaded (§5.3) but need not cause them to be verified or prepared.\",\"验证内容包括：\",\"文件格式验证，验证字节流符合 class 文件格式规范；\",\"元数据验证\",\"字节码验证\",\"符号引用验证\"]},\"495\":{\"h\":\"**Preparation **\",\"t\":[\"准备，在方法区对类变量分配内存，初始化为默认值（“零值”）。\",\"比如：static int i = 5；在这一步只会进行到i = 0 ，而i = 5要在初始化那一步才进行；\",\"但是如果是 final 修饰的常量，则在此分配具体值。\",\"Preparation involves creating the static fields for a class or interface and initializing such fields to their default values (§2.3, §2.4). This does not require the execution of any Java Virtual Machine code; explicit initializers for static fields are executed as part of initialization (§5.5), not preparation.\",\"准备工作可能在创建之后的任何时候发生，但是必须在初始化之前完成。\"]},\"496\":{\"h\":\"\",\"t\":[\"解析，是在运行时常量池中动态确定符号引用的具体值的过程。\",\"每个栈帧 frame 都有一个当前方法到运行时常量池 的引用，用来支持方法代码 (method code) 的动态链接（dynamic linking）。\",\"method code：要被执行的方法以及通过符号引用的变量。\",\"Each frame (§2.6) contains a reference to the run-time constant pool (§2.5.5) for the type of the current method to support dynamic linking of the method code.\",\"动态链接将符号引用（symbolic references）转化为具体方法的调用（concrete method references）即直接引用，根据需要加载类来解析未定义的符号，将变量访问转化为运行时内存（runtime location）。\",\"This late binding of the methods and variables makes changes in other classes that a method uses less likely to break this code.\",\"方法和变量的这种后期绑定，使得方法使用的其他类的更改不太可能破坏这个代码。\",\"直接引用可以直接定位到内存中某一段地址；符号引用则与 JVM 内存无管\",\"解析分为：\",\"类，接口解析\",\"字段解析\",\"类方法解析\",\"接口方法解析\"]},\"497\":{\"h\":\"\",\"t\":[\"初始化 ，Initialization of a class or interface consists of executing its class or interface initialization method（执行类，接口的构造方法clinit()）\",\"类或接口在被初始化之前，必须先被连接 linked（verified, prepared, and optionally（可选）resolved.）。\",\"初始化有且只有以下五种情况：\",\"new、读取/设置类（只有直接定义其的类才会，子类等不受影响）的静态变量（final 修饰的常量除外）、执行静态方法\",\"java.lang.reflect反射调用类\",\"初始化时，如果父类未初始化，先触发父类的初始化（接口类除外）\",\"虚拟机等启动时执行主类的main()方法时，需要先初始化主类\",\"JDK1.7 动态支持时，如果java.lang.invoke.MethodHandle实例最后解析结果REF_get/put/invokeStatic的方法句柄对应的类未被初始化时，需要先初始化对应的类\",\"以上 5 种称为对一个类的主动引用，其余不会触发初始化，称为被动引用\",\"clinit() ,有类变量赋值，静态语句块会由编译器合并为clinit()方法，分为两种：\",\"类 父类的clinit()方法会先于子类执行\",\"接口 接口clinit()方法无需调用父类接口的clinit()方法；接口的实现类也无需执行接口的clinit()方法\",\"clinit() 是线程安全的，在同一个类加载器中，多个线程的中只会有一个线程执行一次clinit()，其余线程阻塞等待\",\"clinit()和init()不同如下：\",\"init是对象构造器方法，也就是说在程序执行 new 一个对象调用该对象类的 constructor 方法时才会执行 init 方法（是在new 对象的时候初始化非静态变量）；\",\"而 clinit 是类构造器方法，也就是在 jvm 进行类加载—–验证—-解析—–初始化，中的初始化阶段 jvm 会调用 clinit 方法（是在JVM 初始化类的时候初始化静态变量）。\",\"http://blog.csdn.net/u013309870/article/details/72975536\",\"如果类没有静态赋值、静态语句块等则不会有clinit()方法。\",\"clinit()先于init()执行。\"]},\"498\":{\"h\":\"参考文献\",\"t\":[\"Java Virtual Machine Specification Chapter 5. Loading, Linking, and Initializing\",\"Chapter 2. The Structure of the Java Virtual Machine\",\"【深入 Java 虚拟机】之四：类加载机制\",\"JVM 类加载机制详解（一）JVM 类加载过程\",\"Jvm 系列 3—类的加载 - Gityuan 博客 | 袁辉辉博客 \",\"类加载机制 - 深入理解 Java 虚拟机 - 极客学院 Wiki \",\"深入理解 Java 类型信息 (Class 对象) 与反射机制 - CSDN 博客\",\"深入理解 jvm--Java 中 init 和 clinit 区别完全解析 - CSDN 博客\"]},\"499\":{\"h\":\"Java 笔记之 HashMap 保存数据\",\"t\":[\"Photo by **Pixabay **from Pexels\",\"HashMap使用由Node<K,V>（继承自Map.Entry<K,V>）组成的数组table保存数据。\",\"在table中保存数据时根据key的hashCode计算到一个随机保存位置（但都在table数组的大小范围内），当存储的数据总量超过加载系数loadFactor规定的阈值时则对table进行扩容。\"]},\"500\":{\"h\":\"HashMap 有以下全局变量\",\"t\":[\"transient Node<K,V>[] table;//实际保存键值对的数组 transient Set<Map.Entry<K,V>> entrySet;//Holds cached entrySet().用来遍历 HashMap transient int size;//本 HashMap 实际保存的键值对个数 transient int modCount;//HashMap 修改的次数，每次修改 HashMap 都会叠加， //用来在遍历的过程中检查 HashMap 是否被改动过来，如果有则抛出异常 ConcurrentModificationException int threshold;//是否扩容的阈值 final float loadFactor;//加载系数，默认 0.75f\",\"loadFactor：默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下：\",\"如果内存空间很多而又对时间效率要求很高，可以降低负载因子 Load factor 的值；\",\"相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于 1。\",\"https://tech.meituan.com/2016/06/24/java-hashmap.html\",\"每个Node包含了以下信息：\",\"Node<K,V> implements Map.Entry<K,V>{ final int hash; final K key; V value; Node<K,V> next; }\",\"在执行hashMap.put(\\\"k\\\", \\\"v\\\");时，会先计算key的hash值\",\"static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); //这里原始 hash 值 (32 位) 的高位和地位进行按位异或（不同为，相同为 0）， //增加了随机性，避免因为 hashCode 计算得到的 hash 值（低位相同概率高） //计算索引时（见下文↓）一直取低位值而可能导致的索引一直的重复问题。 }\"]},\"501\":{\"h\":\"\",\"t\":[\"使用HashMap保存数据时：\",\"使用hash(Object key)计算key的hash值\",\"通过hash值计算value应该保存的位置i\",\"i = (table.length - 1) & hash //由于 table.length 限定为 2 的 n 次方，所以上面的等式相当于给 table.length 取余数 //即 i 永远<=table.length\",\"在此时会判断是否需要扩容 (只有table为空，或者当前存储的数据总数size大于阈值threshold时才会扩容resize())\",\"threshold = capacity * loadFactor 阈值 = 容量 * 负载系数（默认为 0.75）\",\"接下来会插入数据\",\"指定位置为空（没有hash 冲突），或已有key相同的值：则直接插入value\",\"已经存在值并且数量大于 8：则将链表转化为红黑树（JDK1.8），否则以链表形式保存数据\",\"在移除数据时，如果红黑树数量小于 6：则将红黑树转化为链表\",\"在 JDK1.7 中，数据以数组或链表形式保存，JDK1.8 中则新增了红黑树。\",\"发生 hash 冲突时，JDK1.7 采用采用头插法，可能会产生逆序和环形链表；JDK1.8 采用尾插法，直接插入链表或红黑树尾部。\",\"具体 JDK1.7 与 1.8 对比查看这里\"]},\"502\":{\"h\":\"\",\"t\":[\"使用HashMap获取数据时：\",\"计算 key 的hash值\",\"查找对应位置的node\",\"null：返回null\",\"node不为空且key一致：返回该node\",\"node不为空且key不一致：\",\"如果是链表：遍历链表查找是否存在与key一致的node\",\"如果是树：遍历树查找是否存在与key一致的node\"]},\"503\":{\"h\":\"\",\"t\":[\"使用HashMap移除数据时：\",\"其大体过程与get(Object key)类似，遍历找到对应的node并删除。\"]},\"504\":{\"h\":\"计算索引\",\"t\":[\"一个key对应的索引index是由这个key的hash()值对HashMap的数组长度length的余数：\",\"index = hash % length;\",\"又有**在Length为 2n**时：\",\"hash % 2n = hash & ( 2n - 1)\",\"hash % 2n = hash - (hash / 2n) * 2n = hash - (hash>>n) * 2n = hash & ( 2n - 1)\",\"而HashMap的长度Length又只能是 2n，所以：\",\"index = (length - 1) & hash;\"]},\"505\":{\"h\":\"保存值\",\"t\":[\"当table为空或者长度超过加载因子DEFAULT_LOAD_FACTOR规定的容量 (默认容量为 16，加载因子为 0.75) 时会自动扩容。\",\"当table[index]为空时，直接新建Node并保存到table[index]中。\",\"当table[index]不为空时：\",\"如果是同一个key则覆盖旧的值\",\"如果是不同的key则先尝试以链表保存数据\",\"如果是不同的key，并且链表长度超过MIN_TREEIFY_CAPACITY规定的长度（默认 64），则将链表转化为红黑树 (JDK1.8 新增)\"]},\"506\":{\"h\":\"序列化\",\"t\":[\"在第一节我们可以看到，HashMap的很多变量都被标记为transient，这表示在Serializable序列化时不主动去序列化这些值，那这样岂不是没法反序列化这些数据了？\",\"其实在后面我们可以看到，HashMap在writeObject()方法中主动保存了部分数据（原因是默认的Serializable由于不同 JVM 实现对同一对象如String的HashCode不一定一致，会导致严重的问题——HashMap基于hash值保存数据）：\",\"private void writeObject(java.io.ObjectOutputStream s) throws IOException { int buckets = capacity();//容量 // Write out the threshold, loadfactor, and any hidden stuff s.defaultWriteObject(); s.writeInt(buckets); s.writeInt(size);//保存 size internalWriteEntries(s);//保存 table 数据 } /** * table 不为空则返回 table 长度 * 否则 threshold 不为空则返回 threshold * 否则返回默认的 DEFAULT_INITIAL_CAPACITY */ final int capacity() { return (table != null) ? table.length : (threshold > 0) ? threshold : DEFAULT_INITIAL_CAPACITY; }\",\"并在readObject()恢复了这些值。\"]},\"507\":{\"h\":\"位运算\",\"t\":[\"位运算\",\"符号\",\"计算\",\"按位与\",\"&\",\"相同为 1，不同为 0\",\"按位或\",\"|\",\"有 1 则 1\",\"按位异或\",\"^\",\"相同为 0，不同位 1\",\"按位取反\",\"~\",\"左移\",\"<<\",\"相当于乘以 2n\",\"右移\",\">>\",\"相当于除以 2n\",\"无符号右移\",\">>>\"]},\"508\":{\"h\":\"参考资料\",\"t\":[\"HashCode 计算扰动分析 - 关于 hashMap 的一些按位与计算的问题？ - 胖君的回答 - 知乎 \",\"一文读懂 Java 之 HashMap 索引位置计算\",\"hashMap 在 jdk1.7 与 jdk1.8 中的原理及不同\",\"真实面试题之：Hashmap 的结构，1.7 和 1.8 有哪些区别\",\"Java 8 系列之重新认识 HashMap\",\"java.util.HashMap 源码要点浅析\",\"Why HashMap.Entry is transient?\",\"Java 中 HashMap 关键字 transient 的疑惑\"]},\"509\":{\"h\":\"Java 笔记之匿名内部类和 final\"},\"510\":{\"h\":\"为什么 使用 要用 ？\",\"t\":[\"先说结论：\",\"由于 JAVA 匿名内部类的实现并不是真正的闭包，而是在生成内部类的时候将局部变量的引用拷贝了一份到内部类中。如果不将这个外部类设置为final的话，外部类或者内部类修改这个局部变量后，另外一处使用的仍然是修改前的值，这样就会产生问题，而如果将其修改为final则保证了局部变量与内部类使用的值是一致的。\"]},\"511\":{\"h\":\"JDK1.8 后局部变量不要求用 了？\",\"t\":[\"不对，仍然是要求final的。\",\"只不过编译器判断该局部变量不会再被修改时（effectively final 事实上的final），可以省略。\",\"Any local variable, formal parameter, or exception parameter used but not declared in an inner class must either be declared final or be effectively final (§4.12.4), or a compile-time error occurs where the use is attempted.\",\"Any local variable used but not declared in an inner class must be definitely assigned (§16 (Definite Assignment)) before the body of the inner class, or a compile-time error occurs.\",\"https://docs.oracle.com/javase/specs/jls/se13/html/jls-8.html#jls-8.1.3\"]},\"512\":{\"h\":\"为什么外部类的全局变量不需要 ？\",\"t\":[\"因为全局变量是通过传入内部类的**外部类引用this$0**来引用的 (而非直接复制全局变量的值)，这样内部类和外部类持有的是同一个全部变量，自然不会存在两处更新不同步的问题。\"]},\"513\":{\"h\":\"源码解析\",\"t\":[\"public class Test { public static void main(String[] args) { OutClass outClass = new OutClass(); outClass.outMethod(); } } // 外部类 class OutClass { //全局变量 public AnObj anObj = new AnObj(5); public void outMethod() { //局部变量 final AnObj anObj1 = new AnObj(6); //匿名内部类 Inner o = new Inner() { public void doSth() { //内部类访问外部类的全部变量和局部变量 int value = anObj1.getI() + anObj.getI(); System.out.println(\\\"inner:\\\" + value); } }; o.doSth(); } } //下面这两个类无需关注 interface Inner { public void doSth(); } class AnObj { private int i; public AnObj(int i) { this.i = i; } public int getI() { return i; } }\",\"编译后如下：\",\"//OutClass.class class OutClass { public AnObj anObj = new AnObj(5); OutClass() { } public void outMethod() { //可以看到，在编译之后，将外部类的引用和局部变量作为内部类的参数传入到内部类中 new 1(this, new AnObj(6)).doSth(); } }\",\"再看看内部类OutClass$1\",\"//OutClass$1.class class OutClass$1 implements Inner { final /* synthetic */ OutClass this$0;//这个是外部类的引用 final /* synthetic */ AnObj val$anObj1;//这个引用指向局部变量引用指向的内存空间 OutClass$1(OutClass this$0, AnObj anObj) { this.this$0 = this$0; this.val$anObj1 = anObj; } public void doSth() { //在这里可以看出，内部类通过局部变量的备份引用访问的 this.val$anObj1.getI()， //所以如果内部类所处的方法，修改了这个局部变量（假设将这个引用指向了另外一个 AnObj 对象）， //但这里的 this.val$anObj1 指向的仍然是旧的 AnObj 对象，从而出现了对“同一个局部变量”在内部类和内部类外部分别有不同值的问题，所以需要 final 来限制对局部变量的更改 System.out.println(\\\"inner:\\\" + (this.val$anObj1.getI() + this.this$0.anObj.getI())); //但是再看外部类的全局变量，在内部类中仍然是通过外部类的引用 this.this$0来引用 anObj 的，所以无论何时，内部类中的外部类全局变量都是最新的，所做的更改也会实时更新到外部类中，所以不需要 final } }\"]},\"514\":{\"h\":\"参考资料\",\"t\":[\"https://www.runoob.com/w3cnote/inner-lambda-final.html\",\"Why are only final variables accessible in anonymous class?--stackoverflow\",\"java 为什么匿名内部类的参数引用时 final？ - 胖君的回答 - 知乎\"]},\"515\":{\"h\":\"Java 笔记之计算 Java 对象的大小及其应用\"},\"516\":{\"h\":\"原理\",\"t\":[\"注意 除非特殊说明，以下所说的计算 Java 对象大小，不涉及该对象所持有的对象本身的大小，只计算该 Java 对象本身的大小（其中引用类型对象大小只计算为 4 bytes），如果要遍历计算 Java 对象大小（包含其持有对象的大小）可以参考这篇文章 Sizeof for Java\",\"一个 Java 对象在内存中的大小包括以下 (以 64 位 JVM 启用压缩为例，综合这里和这里的信息整理)：\",\"分类\",\"大小（byte）\",\"备注\",\"对象头\",\"8\",\"保存对象的 class 信息、ID、在虚拟机中的状态\",\"Oop 指针\",\"4\",\"数据区\",\"对象实际包含的数据，引用类型大小为 4 bytes\",\"数组长度\",\"4\",\"只有数组对象才有\",\"8 比特对齐\",\"将对象总大小对齐到 8 字节所需的填充\",\"此外，如果是（非静态）内部类的话，由于他默认持有外部类的引用，所以会比普通类的对象多 4 个 byte。\",\"https://stackoverflow.com/a/12193259/8389461\",\"可以参照这张图\",\"图片来自 https://www.jianshu.com/p/9d729c9c94c4\",\"其中，数据区占用的大小如下：\",\"（图片来自于android-memories）\",\"Size of data from speakerdeck.com\",\"##示例\",\"根据Romain Guy在SpeakerDeck中的说法：\",\"一个空的 class 占用了 4+8=12 个 byte 的内存，再加上 8 比特对齐，实际占用大小为 16 比特。\",\"class Empty{ }\",\"占用大小：\",\"Allocation\",\"Size in bytes\",\"dlmalloc 引用\",\"4\",\"Object overhead（对象头）\",\"8\",\"Total = 4 + 8 =12 bytes\",\"经过8-byte aligned后：total = 16 bytes\",\"https://speakerdeck.com/romainguy/android-memories?slide=34\",\"此外还有包含了数据的对象大小计算方式如下：\",\"图片来自 https://speakerdeck.com/romainguy/android-memories?slide=42\",\"对于数组的大小计算（参考一个 Java 对象到底占用多大内存？和romainguy/android-memories，后者关于数组大小的计算中width&padding = 8 的意义存疑）:\",\"按照开头的公式：数组大小 = 8 对象头 + 4 Oop指针 + 4 数组大小标记length + 数组数据占用大小 + 8比特对齐 \",\"// arr0 大小 = 8 + 4 + 4 + 0 + 8 比特对齐 (0) = 16 bytes int arr0 = new int[0]; // arr1 大小 = 8 + 4 + 4 + 4*1 + 8 比特对齐 (4) = 16 + 4 = 20 + 8 比特对齐 (4) = 24 bytes int arr1 = new int[1]; // arr1 大小 = 8 + 4 + 4 + 4*10 + 8 比特对齐 (0) = 16 + 40 = 56 + 8 比特对齐 (0) = 56 bytes int arra10 = new int[10];\"]},\"517\":{\"h\":\"计算对象大小的工具\",\"t\":[\"具体的如何计算 Java 中 Object 大小，可以参考stackoverflow 的这个回答（这里有一份 Github 上面的实现源码）\",\"可以参考文章：\",\"聊聊 JVM（三）两种计算 Java 对象大小的方法\",\"准确计算 Java 中对象的大小\",\"一个 Java 对象到底占用多大内存？\",\"这里提供一个实例（参考自这里）：\",\"Sizeof.java\",\"import java.lang.instrument.Instrumentation; final public class Sizeof { private static Instrumentation instrumentation; public static void premain(String args, Instrumentation inst) { instrumentation = inst; } public static long sizeof(Object o) { return instrumentation.getObjectSize(o); } }\",\"Makefile\",\"//Makefile文件 .POSIX: .PHONY: all clean all: javac *.java jar -cfm Sizeof.jar META-INF/MANIFEST.MF Sizeof.class java -ea -javaagent:Sizeof.jar Main clean: rm -f *.class *.jar\",\"在使用时先新建一个 Java 类，在其中调用sizeof()方法：\",\"public class Main { public static void main(String[] args) { System.out.println(Sizeof.sizeof(new int[0])); } }\",\"可以用如下命令：\",\" javac *.java //编译当前目录下的java文件 jar -cfm Sizeof.jar META-INF/MANIFEST.MF Sizeof.class //将Sizeof.class打包为Sizeof.jar java -ea -javaagent:Sizeof.jar Main //输出sizeOf计算结果\"]},\"518\":{\"h\":\"实际应用\"},\"519\":{\"h\":\"最长为 65534\",\"t\":[\"String s = “”;中，在编译期最多可以有 65534 个字符\",\"原因是，Java 中的 UTF-8 编码的 Unicode 字符串在常量池中以CONSTANT_Utf8类型表示，常量池中的所有字面量几乎都是通过CONSTANT_Utf8_info描述的。\",\"这里面的u2 length表明了该类型存储数据的长度，而u2是无符号的 16 位整数，因此理论上允许的的最大长度是2^16=65536。而 Java class 文件是使用一种变体UTF-8格式来存放字符的，null 值使用两个字节来表示，因此只剩下 65536－ 2 ＝ 65534个字节。\",\"CONSTANT_Utf8_info { u1 tag; u2 length; u1 bytes[length]; }\",\"所以，在 Java 中，所有需要保存在常量池中的数据，长度最大不能超过 65535，这当然也包括字符串的定义\",\"上面提到的这种 String 长度的限制是编译期的限制，也就是使用String s= “”;这种字面值方式定义的时候才会有的限制。\",\"String 在运行期有没有限制呢，答案是有的，就是我们前文提到的那个Integer.MAX_VALUE ，这个值约等于 4G，在运行期，如果 String 的长度超过这个范围，就可能会抛出异常。(在 jdk 1.9 之前）\",\"https://blog.csdn.net/u013380694/article/details/102739636\",\"一个 String 对象，占用大小（JDK1.8）为 24 bytes（不计算持有的 char 数组占用的大小）：\",\"/** The value is used for character storage. */ private final char value[]; //一个数组对象的引用，占用 4 bytes /** Cache the hash code for the string */ private int hash; // Default to 0 //一个 int 类型，占用 4 bytes\",\"再加上在 64 位 JVM 中，一个对象具有 12 bytes 的对象头+引用，要求对齐到 8 的倍数 (来源2.1. Objects, References and Wrapper Classes)，所以一个 String 对象的大小是：\",\"size = ( 12 对象头 + 4 value + 4 hash ) + 4 8byte对齐 = 24 bytes\"]},\"520\":{\"h\":\"枚举类 enum\"},\"521\":{\"h\":\"枚举类大小的计算\",\"t\":[\"枚举类中的每个枚举都是该枚举类的一个对象。\",\"enum EnumClazz{ Day,Hour,Minute,Second }\",\"当我们用javap查看其编译后的字节码可以看到：\",\"//javac EnumClazz.java //javap EnumClazz.class final class EnumClazz extends java.lang.Enum<EnumClazz> { public static final EnumClazz Day; public static final EnumClazz Hour; public static final EnumClazz Minute; public static final EnumClazz Second; public static EnumClazz[] values(); public static EnumClazz valueOf(java.lang.String); static {}; }\",\"简单计算一下这个EnumClazz的大小（不含引用对象的大小）：\",\"enumClassSize = 8 + 4 + 4*4 + 4 = 32 bytes 对象头 + 引用 + 枚举类值的引用类型 * 4个 + 4 数组引用类型\",\"然后，我们再看一下每个枚举类的值（以EnumClazz.Day为例）的大小：\",\"enum类的每个值实际上都继承自java.lang.Enum类：\",\"public abstract class Enum<E extends Enum<E>> implements Comparable<E>, Serializable { //枚举值名称 private final String name; //枚举值次序，从 0 开始 private final int ordinal; }\",\"由此，我们可以计算EnumClazz.Day的大小：\",\"daySize = 8 + 4 + 4 + 4 + 8比特对齐(4) = 20 + 4 = 24 bytes 对象头 + Oop引用 + name + ordinal + 8比特对齐\",\"也就是说，本例中每一个枚举类值占用 24 bytes，由此可以计算出EnumClazz实际占用的大小应该是：\",\"realSize = enumClassSize + daySize * 4 = 128 bytes\"]},\"522\":{\"h\":\"Android 中是否应该使用枚举\",\"t\":[\"关于 Android 中使用枚举和常量所占用的大小对比RomainGuy有下图的对比。\",\"https://speakerdeck.com/romainguy/android-memories?slide=67\",\"关于是否应该在 Android 中使用枚举类，可以参考下文：\",\"https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/\",\"https://stackoverflow.com/a/29972028/8389461\",\"总结起来其结论就是：\",\"当需要用到枚举类的特性时，比如非连续判断，方法重载等时就使用枚举，否则就使用占用内存更小的常量类。\"]},\"523\":{\"h\":\"SparseArray&ArrayMap VS HashMap\",\"t\":[\"HashMap的数据是经过包装后保存在HashMap.Node<K,V>数组中。\",\"下面是HashMap的结构：\",\"public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable { transient Node<K,V>[] table; //4+ bytes，保存 HashMap 的键值对等信息 transient Set<Map.Entry<K,V>> entrySet; //4+ bytes transient int size; //4 bytes transient int modCount; //4 bytes int threshold; //4 bytes final float loadFactor; //4 bytes //继承自 AbstractMap transient Set<K> keySet; //4+ bytes transient Collection<V> values; //4+ bytes }\",\"再看看 Android 提供的android.util.SparseArray类 (具体分析可参考：SparseArray 的使用及实现原理)\",\"public class SparseArray<E> implements Cloneable { private boolean mGarbage = false; //4 bytes private int[] mKeys; //4+ bytes private Object[] mValues; //4+ bytes private int mSize; //4 bytes }\",\"再结合官方的描述，SparseArray类很明显要比HashMap占用更少的内存：\",\"将KEY和VALUE直接保存在数组中，避免了将其包装为一个Node对象的开销\",\"由于SparseArray类的 key 是int类型而非被自动装箱后的Integer对象，所以当同样使用int类型的key保存数据时，SparseArray类的key要占用更少的内存。\",\"SparseArray is intended to be more memory-efficient than a HashMap, because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping.\",\"https://developer.android.google.cn/reference/android/util/SparseArray\",\"但是，SparseArray有以下局限性：\",\"在每次put/get/remove的时候都需要使用二分法 (ContainerHelpers.binarySearch(mKeys, mSize, key)) 查找是否已经存在KEY对应的值（有的话查找其位置）\",\"在添加和删除 item 的时候都需要在数组中增删条目（耗时，尽管为了优化性能，SparseArray在删除时只是将对于的值标记为DELETED，在下次更新该KEY对于的值时直接覆盖，或者在GC时删除）。\",\" private static final Object DELETED = new Object();\",\"HashMap 的删除涉及到数组、链表和红黑树（JDK1.8）\",\"在容纳数百个项目时性能会比 HashMap 小大约 50%。\",\"每当需要增长数组或获取数组大小或获取条目值时，都必须执行垃圾回收 GC。\",\"此外，还有以下可以替换 HashMap 的 (数据来自这里)：\",\"SparseArray <Integer, Object> SparseBooleanArray <Integer, Boolean> SparseIntArray <Integer, Integer> SparseLongArray <Integer, Long> LongSparseArray <Long, Object> LongSparseLongArray <Long, Long> //this is not a public class //but can be copied from Android source code\",\"此外，还有android.util.ArrayMap其特性与SparseArray类似（两者占用内存小，但是慢并且最好不要用来存储大容量的数据），只不过它支持 key 值为其他类型，占用内存大小在SparseArray和HashMap之间 (参考这里)，此外ArrayMap的 API 和HashMap类似。\",\"根据Romain Guy的计算：\",\"保存 1000 个 int 对象的SparseArray 占用大小为：8072 bytes\",\"保存 1000 个对象的HashMap<Integer,Integer> 占用大小为：64136 bytes\",\"几乎相差 8 倍！\",\"综上，当要保存的数据量比较小（小于几千个）的时候，如果 KEY 是基本类型，推荐使用SparseArray及其衍生类以节省内存，如果 KEY 是其他类型则使用ArrayMap;否则使用HashMap更加高效。\"]},\"524\":{\"h\":\"参考资料\",\"t\":[\"除文章中罗列的链接外：\",\"https://blog.csdn.net/u013380694/article/details/102739636\",\"Sizeof for Java -- javaworld.com\",\"RomainGuy-Android Memories（推荐）\",\"SparseArray vs HashMap\",\"Android 内存优化（使用 SparseArray 和 ArrayMap 代替 HashMap）\",\"SparseArray 的使用及实现原理\",\"SparseArray -- developer.android.google.cn\"]},\"525\":{\"h\":\"Java 笔记之 ThreadLocal\",\"t\":[\"ThreadLocal是Thread中用来保存线程私有变量的数据结构。\",\"一个ThreadLocal只能保存一个值，有set/get/remove方法。\",\"在Thread有一个threadLocals（ThreadLocal.ThreadLocalMap）变量，该变量是一个定制的 Hash Map，用来保存线程私有的数据（类型为ThreadLocal<?> Key, Object Value）。\"]},\"526\":{\"h\":\"特点\",\"t\":[\"一个Thread可以有多个ThreadLocal变量\",\"不同Thread可以通过一个ThreadLocal变量分别保存不同的变量而互不影响。\",\"如果不同的Thread使用的ThreadLocal变量保存的是同一个引用类型的对象（假设为obj），无论这些Thread使用的是同一个ThreadLocal对象还是完全不同的ThreadLocal对象，只要obj指向的对象改变，其余线程中的ThreadLocal对象也会访问到obj的最新值。\"]},\"527\":{\"h\":\"使用与解析\",\"t\":[\"当我们新建一个ThreadLocal并为之赋值时\",\"// 方式 1. ThreadLocal threadLocal = new ThreadLocal(); threadLocal.set(\\\"value\\\"); //方式 2. ThreadLocal threadLocal2 = new ThreadLocal(){ @Override protected Object initialValue() { return \\\"initial value\\\"; } };\",\"这个时候就会调用set()方法（方式 1）或者setInitialValue()方法（方式 2）。\",\" public void set(T value) { Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t);//注意这里获取到是线程本身的 threadLocals 对象 if (map != null) map.set(this, value);//ThreadLocal 对象只是在 Thread 所属的 threadLocals 中充当一个 key， //所以即使在其他线程执行 threadLocal.set(value); //也只是更新该线程本身的 threadLocal 对应的 value，而不会影响其他线程分毫！！！（好精巧的设计） else createMap(t, value); } private T setInitialValue() { T value = initialValue(); Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); return value; } ThreadLocalMap getMap(Thread t) { return t.threadLocals; } void createMap(Thread t, T firstValue) { t.threadLocals = new ThreadLocalMap(this, firstValue); }\",\"可以看到这两个方法到最后都相当于调用了Thread对象的threadLocals的set(ThreadLocal<?> key, Object value)方法，这个方法最终以ThreadLocal对象为 KEY，将数据保存到了Thread对象自己的threadLocals中。\",\"private Entry[] table; private void set(ThreadLocal<?> key, Object value) { Entry[] tab = table; //其他逻辑... tab[i] = new Entry(key, value); }\",\"所以即使是同一个ThreadLocal对象，在不同的线程中进行set/get/remove都只是更新了本线程中ThreadLocal对象对应的值。\",\" //MainThread final ThreadLocal threadLocal = new ThreadLocal(); threadLocal.set(\\\"THREAD-Main-\\\"+Thread.currentThread().getName()); System.out.println(\\\"THREAD-Main-BEFORE:\\\"+threadLocal.get());//THREAD-Main-BEFORE：THREAD-Main-main new Thread(new Runnable() { public void run() { threadLocal.set(\\\"THREAD-1-\\\"+Thread.currentThread().getName()); System.out.println(\\\"THREAD-1:\\\"+threadLocal.get());//THREAD-1：THREAD-1-Thread-0 } }).start(); new Thread(new Runnable() { public void run() { System.out.println(\\\"THREAD-2:\\\"+threadLocal.get());//THREAD-2：null //本线程中 threadLocal 没有赋值，所以为 null } }).start(); //MainThread System.out.println(\\\"THREAD-Main-AFTER:\\\"+threadLocal.get());//THREAD-Main-AFTER：THREAD-Main-main //其他线程对 threadLocal 对象的操作不会影响本线程 //但是如果 threadLocal 保存的是一个引用类型的对象，并且这个对象在其他线程被更改，那么本线程获取到的也会是变更后的值 }\"]},\"528\":{\"h\":\"内存泄漏\",\"t\":[\"在ThreadLocal.ThreadLocalMap中，最终用来保存ThreadLocal以及对应值的是一个Entry数组：\",\"static class Entry extends WeakReference<ThreadLocal<?>> { /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal<?> k, Object v) { super(k);//对 ThreadLocal 对象的弱引用 value = v; } }\",\"从上面的代码可以看到，Entry对ThreadLocal是弱引用，按照“强软弱虚”引用的等级来划分，每次 GC 的时候，如果这个ThreadLocal对象没有被引用，就会被回收掉，这时如果该Thread还在运行，那么threadLocals中保存的ThreadLocal<?> k已经被回收了，但是Object v对象仍然保存在threadLocals中但是没有办法再访问到，造成内存泄漏。\",\"解决方法参考：\",\"使用ThreadLocal时会发生内存泄漏的前提条件：\",\"①ThreadLocal引用被设置为null，且后面没有set，get,remove操作。\",\"② 线程一直运行，不停止。（线程池）\",\"③ 触发了垃圾回收。（Minor GC 或 Full GC）\",\"我们看到ThreadLocal出现内存泄漏条件还是很苛刻的，所以我们只要破坏其中一个条件就可以避免内存泄漏，单但为了更好的避免这种情况的发生我们使用ThreadLocal时遵守以下两个小原则：\",\"①ThreadLocal申明为private static final。 Private与final 尽可能不让他人修改变更引用， Static 表示为类属性，只有在程序结束才会被回收。\",\"②ThreadLocal使用后务必调用remove方法。最简单有效的方法是使用后将其移除。\",\"版权声明：本文为 CSDN 博主「pony-zi」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/zzg1229059735/article/details/82715741\"]},\"529\":{\"h\":\"总结\",\"t\":[\"现在我们知道了，所谓的通过ThreadLocal实现线程本地变量与其他线程隔离，是在创建ThreadLocal的时候，保存的就是属于当前线程的独立的变量，并且之后的修改也不会（无法）修改到其他线程中对应的值，但如果ThreadLocal本身保存的都是同一个对象，则这个对象在所有的线程中还是共享的。\"]},\"530\":{\"h\":\"参考资料\",\"t\":[\"Android 线程管理之 ThreadLocal 理解及应用场景\",\"ThreadLocal 深入分析（Jdk 1.8）\"]},\"531\":{\"h\":\"Java 中三种常用的排序方法\",\"t\":[\"今天重新学习类三种排序方法，按照排序速度依次是冒泡排序，选择排序和插入排序。 以下示例皆为从小到大的排序\"]},\"532\":{\"h\":\"1.冒泡排序\",\"t\":[\"每一次比较都可能要交换元素。 冒泡排序的思想是： 每一轮开始的时候，将第一个元素（a）开始与其后的元素（b）依次进行比较，将较大的元素（设为 m）放到后面，并将 m 与其后的另外一个元素继续进行比较，直到最后一个没有排好序的元素。 在接下来一轮的排序中，刚才以及之前选出来的、已经排好顺序的最大值不用参与排序。 依次类推，总共遍历 n-1 轮，即可完成排序。 具体代码如下：\",\" void bubble(int[] arr){ int temp; for (int i = 0; i < arr.length - 1; i++) { for (int j = 0; j < arr.length - i - 1; j++) { if (arr[j] > arr[j + 1]) { temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } System.out.println(\\\"\\\\n--bubble :\\\"); for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } } \"]},\"533\":{\"h\":\"2.选择排序\",\"t\":[\"每次比较的时候不交换 选择排序的思想： 每次比较的时候找到的两个数中的较大值并记下其位置，等到当前一轮的遍历完成之后，将最后一个未排序元素与这一轮遍历找到的最大值交换 最多交换 n-1 次 代码如下：\",\" void select(int[] arr){ for (int i = 0; i < arr.length; i++) { int maxIndex = 0; int temp = 0; for (int j = 1; j < arr.length - i; j++) { if (arr[maxIndex] < arr[j]) { maxIndex = j; } } temp = arr[maxIndex]; arr[maxIndex] = arr[arr.length - i - 1]; arr[arr.length - i - 1] = temp; } System.out.println(\\\"\\\\n--select :\\\"); for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } } \"]},\"534\":{\"h\":\"3.插入排序法\",\"t\":[\"插入排序法思想： 将待排序的元素分为有序和无序两种，刚开始排序的时候假设只有第一个元素是有序的，其余 n-1 个元素都是无序的； 排序开始的时，将无序部分的一个元素（a）与有序部分的最后一个元素（b）进行比较，如果 a<b，则将 a 与 b 交换，再将 a 与下一个有序元素进行比较；否则，将 a 加到 b 后面，作为有序部分的最后一个元素。 接着再从无序部分取出一个元素与有序部分的元素依次比较，直达所有元素都为有序元素。 遍历 n-1 次 代码如下：\",\" void insertSort(int[] arr){ for (int i = 1; i < arr.length; i++) { int instertValue = arr[i]; for (int j = i - 1; j >= 0; j--) { if (instertValue < arr[j]) { arr[j+1] = arr[j]; arr[j] = instertValue; }else { break; } } } /* 第二种表示形式 for (int i = 1; i < arr.length; i++) { int instertVal = arr[i]; int index = i - 1; while (index >= 0 && instertVal < arr[index]) { arr[index + 1] = arr[index]; index--; } arr[index + 1] = instertVal; } */ System.out.println(\\\"\\\\n--insertSort :\\\"); for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } }\"]},\"535\":{\"h\":\"Java 中的泛型\",\"t\":[\"Java 中的泛型实现了参数类型化的概念。\",\"主要有以下形式：\",\"class OneClazz<T>{ T t; <Y> void fun(){} }\",\"本文主要记录 Java 泛型一些比较特殊的知识点。\"]},\"536\":{\"h\":\"泛型特性\",\"t\":[\"泛型在 Java SE5 被引入，可以在类和方法中，将类型作为类型参数传入。\",\"泛型类型参数会在实际运行时被擦除到他的第一个边界。如<T>会被擦除为Objet，而<T extends ClazzA>则会被擦除为ClazzA。\"]},\"537\":{\"h\":\"需要注意的地方\"},\"538\":{\"h\":\"不能有泛型数组\",\"t\":[\"这是因为 Java 中 Object[]默认为所有数组的父类，如下代码虽然在编译期不会报错，但是在运行时会被检查出 objArr 指向的数组实际类型（String）和要赋予的类型（Integer）不一致而报错。\",\"也就是说，数组只能存放定义的实际类型以及他们的子类型。\",\"Object[] objArr = new String[10]; objArr[0] = 1;\",\"但是，如果支持泛型数组：由于泛型类型参数会在运行时被擦除，导致即使到了运行时也无法发现这个错误，从而会导致错误。\",\"如下，加入支持泛型参数，则 objArr1 中实际保存的类型（Map<String,Integer>），在编译的时候由于 objArr1 和 objArr2 都是 Object 类型的数组，编译通过；在运行的时候，由于 Map 中的泛型参数类型已经被擦除，也无法区分 objArr1 和 objArr2 中实际指向的两个 Map<K,V>数组，也是合法的，这样原本定义的是 Map<String,Integer>数组，却可以保存任何类似的 Map，而这本来是不允许的。\",\"Object[] objArr1 = new Map<String,Integer>[10]; Object[] objArr2 = new Map<Double,Integer>[10]; objArr1[0] = objArr2[0];\",\"Collections 类通过一种别扭的方法绕过了这个问题，在 Collections 类编译时会产生类型未检查转换的警告。\",\"ArrayList具体实现的构造函数如下：\",\"class ArrayList<V>{ private V[] backingArray; public ArrayList(){ backingArray = (V[])new Object()[DEFAULT_SIZE]; } }\",\"为何这些代码在访问 backingArray时没有产生 ArrayStoreException呢？无论如何，都不能将 Object数组赋给 String数组。因为泛型是通过擦除实现的，backingArray的类型实际上就是 Object[]，因为 Object代替了 V。\",\"这意味着：实际上这个类期望 backingArray是一个 Object数组，但是编译器要进行额外的类型检查，以确保它包含 V类型的对象。\",\"来源：https://www.ibm.com/developerworks/cn/java/j-jtp01255.html\"]},\"539\":{\"h\":\"泛型容器\",\"t\":[\"由于泛型的类型在运行时会被擦除，所以将类型检查放到了编译期。\",\"List<Clazz> 泛型列表只能保存指定泛型类型T的数据，而不能保存其子类。\",\"class Fruit{} class Apple extends Fruit{} class Jonathan extends Apple{} //编译时报错，类型不兼容 List<Fruit> fruits = new ArrayList<Apple>();\",\"但是能保存 Fruit 的容器应该也要能安全的保存 Apple，为了实现这一点，类似于数组中Object[] arr = Apple[]的向上转型，可以使用?引入协变。\"]},\"540\":{\"h\":\"协变\",\"t\":[\"List<? extends T> 可以合法的指向一个List< SubT>，这个过程会完成自动向上转型，成为可以持有某个诸如 T 或者 T 的子类的 List，但是编译器不知道这个类具体是什么，所以拒绝向其中传递任何类型对象，即使 Object 也不行。\",\"可以这么想，<? extends T>表示的是 T 的子类，那么List<? extends T> 保存的便是T 的某个子类，所以不能保存 Object 或者 T 等类型，又由于列表不能保存不同的类型，所以也不能保存任何 T 的子类，即容器将数组在运行时才会有的类型检查放到了编译期（原因是运行时类型会被擦除）。\",\"List<? extends Fruit> fruits = new ArrayList<Apple>();//可以安全的应用 fruits2.add(new Apple());//编译时报错，类型转化错误 fruits2.add(new Fruit());//编译时报错\"]},\"541\":{\"h\":\"逆变\",\"t\":[\"List<? super T>主动声明通配符?的超类型为T,即 List 保存的是T 的某个父类，那么 List 也可以安全的保存T 或者 T 的子类。\",\"void fun(List<? super Apple> apples){ apples.add(new Apple()); apples.add(new Jonathan()); apples.add(new Fruit());//error 类型错误 }\"]},\"542\":{\"h\":\"参考资料\",\"t\":[\"java 为什么不支持泛型数组？ - ylxfc 的回答 - 知乎\",\"Oracle Java 泛型原理\",\"Java 理论和实践 - 了解泛型 - 识别和避免学习使用泛型过程中的陷阱\",\"Java 泛型（二）协变与逆变\",\"《Java 编程思想 第 4 版》\"]},\"543\":{\"h\":\"Java 创建线程安全的单例 Singleton\"},\"544\":{\"h\":\"简介\",\"t\":[\"在编码中常常会用到单例，来确保类有一个唯一的对象，一般情况下将构造方法私有化既可以实现，但当考虑到多线程时事情会变得有些复杂，本文讨论的正是几种多线程的情况下实现单例的方法。\"]},\"545\":{\"h\":\"1.普通单例\",\"t\":[\"私有化构造方法，对外提供一个公有、静态的方法，在其内部判断类对象是否已经存在，否的话生成类对象再返回。\",\"class ASingleton{ private static ASingleton as; private void ASinleton() { System.out.print(\\\"ASingleton init!\\\\n\\\"); } public static ASingleton getInstance() { if(as == null) { //tag1 as = new ASingleton(); //tag2 } return as; } }\",\"但是，在考虑多线程时，由于 java 代码是一行行进行的，假设有两个线程 t1、t2，当 as 为 null 的时候 t1 执行到 tag1 位置，判断为 true，于是准备执行 tag2，就在此时，cup 调度 t2 开始执行 tag1，此时 t1 尚未执行 tag2，所以在 t2 中 tag1 判断为 true,t2 也开始执行 tag2 生成一个新对象,这样当 t1 再次执行 tag2 时就会再生成一个新对象，这样就同时存在多个类的对象。\"]},\"546\":{\"h\":\"2.同步锁\",\"t\":[\"对上面的代码稍作优化,可以看到使用了 synchronized，对判断是否需要初始化进行了同步锁，这样当线程 t1 访问时，语句被锁定，t2 运行到这里时，只能等 t1 运行完这段语句并释放之后，才能继续访问，此时 as 已经被赋予了对象，所以不会再继续新建，这样就保证了单例。\",\"class ASingleton { private static ASingleton as; private void ASinleton() { System.out.print(\\\"ASingleton init!\\\\n\\\"); } public static ASingleton getInstance() { synchronized (ASingleton.class) { if (as == null) { as = new ASingleton(); } } return as; } }\",\"但是这样也存在一个问题，每个线程每次获取单例都要进入同步锁，这样累计下来必然影响效率。\"]},\"547\":{\"h\":\"3.双重检查锁定\",\"t\":[\"那么在判断 as 为 null 后，对 as 的初始化进行同步锁呢？\",\"public static ASingleton getInstance() { if (as == null) { synchronized (ASingleton.class) { if (as == null) { //tag1 as = new ASingleton(); //tag2 } } } return as; }\",\"这样子，当判断 as 为 null 时，才会进行初始化，同时由于初始化过程加锁，所以 t1 和 t2 无法同时访问初始化语句 tag2，也保证了只能创建一个单例。\",\"看起来很完美，但是由于 java 语言的特性，在该段代码编译为汇编语言时，上述方法会被编译为类似下面的过程：\",\"1.判断as是否为null 2.令as = ASingleton() //注意此时只是为as分配了内存，并未执行ASingleton的构造方法 3.开始执行ASingleton构造方法，as有了初始化的值 4.返回as\",\"那么，当 t1 执行到语句 2，而 t2 开始执行语句 1 时，此时由于 as 已经分配了内存不为 null，所以 t2 直接执行语句 4，此时 t2 获取到的是一个没有执行构造方法的 ASingleton 对象，显然这样十分危险。在线程复杂的情况下很容易出现问题。\",\"下面提供了两个结局思路，为简便起见，将其简单分为“饿汉模式”和“懒汉模式”（其实上述方法也可分为这两个模式，but，who cares...）。\"]},\"548\":{\"h\":\"4.饿汉模式实现单例\",\"t\":[\"饿汉模式，即在声明的时候就将对象初始化。\",\"这样实现单例的原理是类的静态变量全局唯一。\",\"class ASingleton { private static ASingleton as = new ASingleton(); private void ASinleton() { System.out.print(\\\"ASingleton init!\\\\n\\\"); } public static ASingleton getInstance() { return as; } }\",\"但是这样仍然有个问题，可能在用到 ASingleton 类的时候，并不需要立即获取到其单例，在这种情况下，饿汉模式仍然有浪费资源的嫌疑。\"]},\"549\":{\"h\":\"5.懒汉模式实现单例\",\"t\":[\"懒汉模式，只有要用到该实例时，才获取该单例。\",\"这次我们用到的时静态内部类，静态内部类与类的静态变量不同，只有明确调用静态内部类的时候才会初始化静态内部类。\",\" class ASingletonFactory{ static class ASingleton { public static ASingleton as = new ASingleton(); private void ASinleton() { System.out.print(\\\"ASingleton init!\\\\n\\\"); } } public static ASingleton getInstance() { return ASingleton.as; } }\",\"嗯，至此已经完成了 java 实现单例的绝大部分方法，但其实还有一张更加简洁的方法，那就是用 enmu 实现。\"]},\"550\":{\"h\":\"6.enmu 实现单例\",\"t\":[\"由于枚举类型的对象是唯一的，所以是实现单例的较优选择。\",\"enum SingletonEnum{ INSTANCE; public void dosth(){ } }\",\"但是，android 开发者要注意，枚举占用的内存是普通单例的两倍多，所以，并不推荐在 android 中使用。\",\"关于枚举的更详细资料，参阅(深入理解 Java 枚举类型(enum))[http://blog.csdn.net/javazejian/article/details/71333103#t7]\"]},\"551\":{\"h\":\"Java 反射简单应用\"},\"552\":{\"h\":\"简介\",\"t\":[\"反射，用来在运行时获取给定类的构造函数，变量，方法，并对其作以修改，而不必在编译时获取该类。\",\"Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\",\"--https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html\"]},\"553\":{\"h\":\"简单使用\",\"t\":[\"定义一个待反射的类 ATestClass.java\",\"package cf.android666.reflect; public class ATestClass { public String name; private int age; public ATestClass() { // TODO Auto-generated constructor stub } private void init(String name, int age) { this.name = name; this.age = age; } public String getAge() { // TODO Auto-generated method stub return \\\" age: \\\" + age; } }\",\"在 TestReflect.java 中反射\",\"//核心代码 public static void main(String[] args){ //注意这里需要是完整的类名，包括包名 Class<?> clazz = Class.forName(\\\"cf.android666.reflect.ATestClass\\\"); ATestClass aTestClsObj=(ATestClass) clazz.newInstance(); //反射获取变量 Field mName = clazz.getDeclaredField(\\\"name\\\"); mName.setAccessible(true); mName.set(aTestClsObj, \\\"aReflect\\\"); System.out.println(aTestClsObj.name); //反射获取方法 Method mInit= clazz.getDeclaredMethod(\\\"init\\\", String.class,int.class); mInit.setAccessible(true);//解除私有限定，让我们在用反射时访问私有变量 mInit.invoke(aTestClsObj, \\\"aInitName\\\",66); System.out.println(aTestClsObj.name + aTestClsObj.getAge()); }\"]},\"554\":{\"h\":\"小结\",\"t\":[\"反射的用法较为简单\",\"通过Class.froName() 获取 Class 对象clazz ，获取要反射的 Class 对象aTestClsObj\",\"通过clazz 获取要反射 Class 的变量、方法\",\"通过aTestClsObj 操作这些变量，方法\",\"其中需要注意的有\",\"f.setAccessible(true); 方法可以解除private 限制，进而可以操作类的私有变量，方法\",\"clazz.getXXX() 方法获取全部公有变量、方法，包括父类或接口的 xx，clazz.getDeclaredXXX() 方法获取全部 变量、方法，包括私有的，实现接口的方法，但是不包括父类的\"]},\"555\":{\"h\":\"Java 实现 AES 加密解密应用\"},\"556\":{\"h\":\"简介\",\"t\":[\"最近手机中涉及到用户账户密码保存的问题，选用 AES 加密算法进行加密后，再通过 SharedPreferences 保存在手机端。\",\"本文主要介绍 AES 的加密、解密用法。\"]},\"557\":{\"h\":\"代码\",\"t\":[\"初始化秘钥\",\" private static final String AES = \\\"AES\\\"; private static final String PASSWPRD = \\\"123456\\\"; public static SecretKeySpec initKey(){ SecretKeySpec key = null; try { KeyGenerator kg = KeyGenerator.getInstance(AES); kg.init(128,new SecureRandom(PASSWPRD.getBytes()));//通过这种算法，每次生成的 key 都是一样的 //也可以 kg.init(128),这样每次生成的 key 都不一样 SecretKey securityKey = kg.generateKey(); byte[] encodedKey = securityKey.getEncoded(); key = new SecretKeySpec(encodedKey, AES);//AES 也可以替换为\\\"AES/CBC/PKCS5PADDING\\\" } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return key; }\",\"加密\",\"//核心代码 //source 是要加密的内容 Cipher cipher = Cipher.getInstance(AES);//创建密码器 byte[] byteContent = source.getBytes(\\\"utf-8\\\"); cipher.init(Cipher.ENCRYPT_MODE, key);//创建密码器 byte[] result = cipher.doFinal(byteContent);//加密\",\"解密\",\"//核心代码 Cipher cipher = Cipher.getInstance(AES); cipher.init(Cipher.DECRYPT_MODE, key); byte[] result = cipher.doFinal(source);\",\"加密和解密的结果都是二进制的，无法直接转化为字符串，所以还需要将二进制与十六进制互转\",\" public static String parseByte2HexStr(byte buf[]) { StringBuffer stringBuffer = new StringBuffer(); for (int i = 0; i < buf.length; i++) { String hex = Integer.toHexString(buf[i] & 0xff); if (hex.length() == 1) { hex = '0' + hex; } stringBuffer.append(hex.toUpperCase()); } return stringBuffer.toString(); } public static byte[] parseHexStr2Byte(String hexStr){ if (hexStr.length() < 1) { return null; } byte[] result = new byte[hexStr.length() / 2]; for (int i = 0; i < hexStr.length() / 2; i++) { int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16); int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2), 16); result[i] = (byte) (high * 16 + low); } return result; }\",\"这样就可以在初始化一个 key 后，对文本进行加密和解密\",\"//初始化 key SecretKeySpec key = initKey(); //加密文本并转化为 16 进制，方便保存 String eStr = parseByte2HexStr(encrypt(resource,key)); //将加密 16 进制文本转为二进制，进行解密 String dStr = decrypt(parseHexStr2Byte(estr));\"]},\"558\":{\"h\":\"参考文献\",\"t\":[\"JAVA 实现 AES 加密 - CSDN 博客\",\"源码 github 链接\"]},\"559\":{\"h\":\"Java 并发编程笔记\"},\"560\":{\"h\":\"Thread.join()\",\"t\":[\"cThread.join()方法使当前线程阻塞，直到子线程cThread执行完毕后，当前线程才会恢复运行。\",\"实现原理：\",\" join()方法调用了join(0)\",\"public final void join() throws InterruptedException { join(0); }\",\" join(long millis)是一个同步方法，最后会通过调用wait()方法挂起当前线程（即调用线程），直到其他线程调用子线程cThread的notify()或者notifyAll()方法\",\"public final synchronized void join(long millis) throws InterruptedException { long base = System.currentTimeMillis(); long now = 0; if (millis < 0) { throw new IllegalArgumentException(\\\"timeout value is negative\\\"); } if (millis == 0) { while (isAlive()) { wait(0); } } else { while (isAlive()) { long delay = millis - now; if (delay <= 0) { break; } wait(delay); now = System.currentTimeMillis() - base; } } }\",\"子线程run()执行完毕后，系统在关闭该子线程前，会调用其exit()方法，继而在ThreadGroup.threadTerminated(Thread t)中唤醒被阻塞的调用线程。\",\"/** * This method is called by the system to give a Thread * a chance to clean up before it actually exits. */ private void exit() { if (group != null) { group.threadTerminated(this);//提心 ThreadGroup 当前线程已经被终止 group = null; } //其他代码 …… } // ThreadGroup void threadTerminated(Thread t) { synchronized (this) { remove(t); if (nthreads == 0) {//线程组线程数为0时 notifyAll();//唤醒所有等待中的线程 } if (daemon && (nthreads == 0) && (nUnstartedThreads == 0) && (ngroups == 0)) { destroy(); } } }\"]},\"561\":{\"h\":\"notify() 和 notifyAll() 的区别区别\",\"t\":[\"先了解两个概念：\",\"锁池：某个Thread调用某个对象的同步方法（synchronized），但还没获取到该对象的锁时，会进入锁池和其他类似的线程一起竞争该对象的锁。\",\"等待池：当某个Thread调用某个对象的wait()方法释放掉该对象的锁进入阻塞后（waiting on this object's monitor），会进入等待池。等待池中的线程不会竞争该对象的锁。\",\"notify()方法会从等待池中唤醒一个指定线程，该线程可以再次回到锁池竞争该对象的锁，但可能会导致死锁（如果唯一唤醒的线程阻塞了并依赖其他线程唤醒，但其他线程都在等待池无法竞争锁，导致死锁）。\",\"notifyAll()方法则会唤醒所有在等待池中的线程，之后他们都可以回到锁池竞争该对象的锁。\"]},\"562\":{\"h\":\"参考资料\",\"t\":[\"Java Thread 的 join() 之刨根问底\",\"java 中的 notify 和 notifyAll 有什么区别？ - 大王叫我来巡山的回答 - 知乎\"]},\"563\":{\"c\":[\"java\"]},\"564\":{\"h\":\"Java 注解\",\"t\":[\"注解，是描述 Java 代码的代码，它能够被编译器解析，向编译器、虚拟机说明一些事情，就像 java 中给程序员看的注释一样。\",\"Android 应用开发这方面比较火的是Butter Knife ,本文讲述如何自定义注解替换 findViewById()。\",\"实现注解（annotation）的思路：通过反射获取到类中使用注解的变量，方法，再调用不同的方法对这些变量，方法进行处理以达到目的。\",\"主要涉及三方面：\",\"定义一个注解类\",\"定义一个注解帮助类\",\"使用注解\"]},\"565\":{\"h\":\"java 元注解\",\"t\":[\"java 语言有四个预留的注解，用来生成其他自定义的注解：\",\"@Target\",\"说明注解所能修饰的范围。其值一般为 ElementType.xxx，主要有：\",\"CONSTRUCTOR 描述构造器\",\"FIELD 描述域\",\"LOCAL_VARIABLE 描述局部变量\",\"METHOD 描述方法\",\"PACKAGE 描述包\",\"PARAMETER 描述参数\",\"TYPE 描述类，接口，enum 声明\",\"@Retention\",\"说明注解存活的生命周期，其值一般为 RetentionPolicy.xxx，主要有\",\"SOURCE 仅源文件有效，被编译器丢弃\",\"CLASS 在 class 文件中有效，可能被虚拟机忽略\",\"RUNTIME 在运行时有效，在 class 被装载时被获取\",\"@Documented\",\"用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API\",\"表示是否将注解信息添加在 java 文档中。有该注解则会被 Javadoc 工具文档化\",\"是一个标记注解，没有值\",\"@Inherited\",\"表示该标记会被标记的 class 的子类继承，在查找该注解时，如果当前类没有，会自动向上到其父类中查找，直到该注解类型被找到或是查找完了 Object 类还未找到\",\"是一个标记注解，没有值\",\"注解不能继承其他注解或接口\"]},\"566\":{\"h\":\"内建注解\",\"t\":[\"java 中常见的内建注解：\",\"@Override 重写父类方法\",\"@Deprecated 不赞成使用的 api\",\"@SuppressWarnings() 忽略指定警告\",\"参数如下：\",\"参数\",\"含义\",\"deprecation\",\"使用了过时的类或方法时的警告\",\"unchecked\",\"执行了未检查的转换时的警告\",\"fallthrough\",\"当 Switch 程序块进入进入下一个 case 而没有 Break 时的警告\",\"path\",\"在类路径、源文件路径等有不存在路径时的警告\",\"serial\",\"当可序列化的类缺少 serialVersionUID 定义时的警告\",\"finally\",\"任意 finally 子句不能正常完成时的警告\",\"all\",\"以上所有情况的警告\"]},\"567\":{\"h\":\"自定义注解\"},\"568\":{\"h\":\"注解类\",\"t\":[\"@Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface BindView { //注解参数只可以为 public 或者默认 //如果注解中的值不是 value，那么在进行注解的时候，需要给出对应的值的名字 //如@ViewInject(id = R.id.buy) int value(); //注解元素必须有明确的值，要不在定义注解时指定默认值，要不在使用注解时指定 public int age() default 18;//指定默认值 }\",\"注解参数支持数据类型如下：\",\"1.所有基本数据类型（int,float,boolean,byte,double,char,long,short) 2.String 类型 3.Class 类型 4.enum 类型 5.Annotation 类型 6.以上所有类型的数组\"]},\"569\":{\"h\":\"注解帮助类\",\"t\":[\"主要提供使用注解的方法，代码中的注解替换为真正要实现的逻辑，为注解和使用注解的类搭建一个桥梁。\",\"//核心方法如下 public static void bindViews(Activity activity) { //获取到使用注解的类 Class<? extends Activity> clazz = activity.getClass(); //获取该类中的所有域变量 Field[] fields = clazz.getDeclaredFields(); //通过遍历，将使用到注解的变量初始化 for (Field field : fields) { //获取注解对象 BindView bindView = field.getAnnotation(BindView.class); if (bindView != null) { //获取注解的值 int viewId = bindView.value(); if (viewId != -1) { try { //注解要实现的逻辑，此处为替代 clazz 中的 findViewById() 方法，注意 getMethod() 是获取该类及其实现的接口中所有的 public 方法 Method findViewById = clazz.getMethod(\\\"findViewById\\\", int.class); findViewById.setAccessible(true); Object o = findViewById.invoke(activity, viewId); //修改要注解的类，到此注解目的达到 field.setAccessible(true); field.set(activity,o); } catch (Exception e) { e.printStackTrace(); } } } } }\"]},\"570\":{\"h\":\"使用注解\",\"t\":[\"在类中通过@xxx() 使用注解，并通过帮助类真正实现注解逻辑\",\"//标记注解 @BindView(R.id.text) private TextView textView; //调用帮助类方法 AnnotationUtils.bindViews(ASampleActivity.this); //使用初始化之后的变量 textView.setText(\\\"hello annotation\\\");\"]},\"571\":{\"h\":\"参考文章\",\"t\":[\"Java 核心技术点之注解 - ImportNew\",\"java 注解--gityuan\"]},\"572\":{\"h\":\"Java 笔记之 YYYY 格式化日期\",\"t\":[\"最近看到一个帖子，表示有人以\\\"YYYY-MM-dd\\\"格式化日期时，在2019-12-30时出现2020-12-30的 BUG。\",\"本文来简单分析一下为什么会出现这个情况。\",\"根据JDK 文档关于日期的定义，y表示的是我们日常使用的年份，而Y表示的是Week year。\",\"先了解几个知识点：\"]},\"573\":{\"h\":\"Week year\",\"t\":[\"Week year表示的是这个周所属的年份。\",\"A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value. Therefore, the first and last days of a week year may have different calendar year values.\",\"来源：https://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html#week_year\"]},\"574\":{\"h\":\"WEAK_OF_YEAR\",\"t\":[\"指的是这一年所有的周，从第 01 周开始到该年最后一周。\",\"要注意这个周不一定是自然周，所包含的日期也不一定全部都是当年的日期。\",\"Values calculated for the WEEK_OF_YEAR field range from 1 to 53. The first week of a calendar year is the earliest seven day period starting on getFirstDayOfWeek() that contains at least getMinimalDaysInFirstWeek() days from that year.\"]},\"575\":{\"h\":\"第 01 周\",\"t\":[\"根据这份JDK 文档，当 getFirstDayOfWeek() is MONDAY（2） and getMinimalDaysInFirstWeek() is 4 时，JAVA 判断周日期的标准与ISO_8601兼容：\",\"第 01 周有几个相互等效且兼容的描述：\",\"一年中第一个星期四的星期（正式的 ISO 定义），\",\"1 月 4 日这一周，\",\"起始年份中大部分（四天或以上）的第一周，以及\",\"从 12 月 29 日至 1 月 4 日的星期一开始的一周。\",\"来源：https://en.wikipedia.org/wiki/ISO_8601\",\"按照 JAVA 文档中的定义，每年最开始的几天和最后的几天的Week year不一定是当年的年份值，而是受到每年的第 01 周/最后一周的影响。\",\"JAVA 中判断周主要受到Calendar对象的getFirstDayOfWeek()和getMinimalDaysInFirstWeek()这两个本地值的影响。\",\"其中：\",\"getFirstDayOfWeek() 指定一周的第一天，比如，美国一周从SUNDAY 开始，法国则是MONDAY 。\",\"getMinimalDaysInFirstWeek() 一年第一周所需最小的天数。比如 1 表示只要包含第一天就算该年的第一周，而 7 表示只有完整的一周都在该年才算该年的第一周。\",\"注意：真正影响我们格式化日期结果的是SimpleDateFormat中的calendar对象对应的值。\",\"而通过打印这个simpleDateFormat.calendar，我们看到：\",\"//JDK1.7 minimalDaysInFirstWeek:1 firstDayOfWeek:1 //SUNDAY\",\"所以可以得出结论，JAVA默认只要次年的 1 月 1 日在在这个跨年周，那么本周所有日期的Week year都是次年的（JDK1.7）。\"]},\"576\":{\"h\":\"问题分析\",\"t\":[\"有了以上知识，我们再看看2019-12-30以YYYY格式化为什么会出现问题：\",\"先看一下这些日期对应的星期：\",\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"29\",\"30\",\"31\",\"1\",\"2\",\"3\",\"4\",\"首先根据 JDK 默认的第01周的定义，2020-01-01所在的周为2020的第一周，所以2019-12-29到2020-01-04都属于是2020年的第01周。\",\"再根据YYYY表示的是Week year的结论，可以知道，当使用YYYY格式化时，2019-12-29到2020-01-04都会得到2020。\",\"val calendar = Calendar.getInstance() val simpleDateFormat = SimpleDateFormat(\\\"YYYY yyyy MM dd\\\") calendar.set(2019, 12-1, 29) println(simpleDateFormat.format(calendar.time)) //output DATE:2019 12 29 minimalDaysInFirstWeek:1 firstDayOfWeek:1 YYYY yyyy MM dd 2020 2019 12 29\",\"而如果我们把第一周最小天数minimalDaysInFirstWeek改为5天，那么很明显这一周属于2020年的天数（从周日到周一，只有 1 号到 4 号 4 天）不够 5 天，所以这一周被划归为2019年的第53周，2019-12-29到2020-01-04的week year都是属于2019。\",\"val calendar = Calendar.getInstance() val simpleDateFormat = SimpleDateFormat(\\\"YYYY yyyy MM dd\\\") calendar.set(2019, 12-1, 29) simpleDateFormat.calendar.minimalDaysInFirstWeek = 5 println(simpleDateFormat.format(calendar.time)) //output DATE:2019 12 29 minimalDaysInFirstWeek:5 firstDayOfWeek:1 YYYY yyyy MM dd 2019 2019 12 29\",\"再比如下面这个示例中的2010-12-26。\",\"按照JDK1.7默认算法，一周从周日（2010-12-26）开始，并且当年的 1 月 1 日（2011-01-01）所在周为该年第一周，所以2010-12-26到2011-01-01都被划到了2011年的第一周。\",\"但如果按照ISO_8601的标准，一周从周一开始，并且起始年份包含的天数至少要有4天：\",\"则很明显2010-12-26属于2010年的51周，而2010-12-27到2011-01-02都属于2010年的第52周（属于 2020 年的只有 2 天，不满足第一周的条件）。\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"周日\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"1\",\"2\"]},\"577\":{\"h\":\"总结\",\"t\":[\"结合以上结论，我们可以看到，在 JAVA 中（JDK1.7）：\",\"“YYYY” 表示Week year\",\"每年最开始的几天和最后的几天的Week year不一定是当年的值，而是受到当年的第一周/最后一周的影响。\",\"JAVA 周的判断与simpleDateFormat.calendar.minimalDaysInFirstWeek和simpleDateFormat.calendar.firstDayOfWeek有关。\",\"而这两个值都属于本地化值，在国内可以简单理解为一年 1 月 1 日所在的周就是当年的第一周。\",\"我们可以通过修改minimalDaysInFirstWeek和firstDayOfWeek来更改YYYY格式化的值。\"]},\"578\":{\"h\":\"附录\",\"t\":[\"JDK 中日期格式化的参数及含义（来自 https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#month）：\",\"Letter\",\"Date or Time Component\",\"Presentation\",\"Examples\",\"G\",\"Era designator\",\"Text\",\"AD\",\"y\",\"Year\",\"Year\",\"1996; 96\",\"Y\",\"Week year\",\"Year\",\"2009; 09\",\"M\",\"Month in year\",\"Month\",\"July; Jul; 07\",\"w\",\"Week in year\",\"Number\",\"27\",\"W\",\"Week in month\",\"Number\",\"2\",\"D\",\"Day in year\",\"Number\",\"189\",\"d\",\"Day in month\",\"Number\",\"10\",\"F\",\"Day of week in month\",\"Number\",\"2\",\"E\",\"Day name in week\",\"Text\",\"Tuesday; Tue\",\"u\",\"Day number of week (1 = Monday, ..., 7 = Sunday)\",\"Number\",\"1\",\"a\",\"Am/pm marker\",\"Text\",\"PM\",\"H\",\"Hour in day (0-23)\",\"Number\",\"0\",\"k\",\"Hour in day (1-24)\",\"Number\",\"24\",\"K\",\"Hour in am/pm (0-11)\",\"Number\",\"0\",\"h\",\"Hour in am/pm (1-12)\",\"Number\",\"12\",\"m\",\"Minute in hour\",\"Number\",\"30\",\"s\",\"Second in minute\",\"Number\",\"55\",\"S\",\"Millisecond\",\"Number\",\"978\",\"z\",\"Time zone\",\"General time zone\",\"Pacific Standard Time; PST; GMT-08:00\",\"Z\",\"Time zone\",\"RFC 822 time zone\",\"-0800\",\"X\",\"Time zone\",\"ISO 8601 time zone\",\"-08; -0800; -08:00\"]},\"579\":{\"h\":\"参考资料\",\"t\":[\"感谢这篇文章，让我推翻了上一次的结论，发现了真正的原因：JAVA 中的 SimpleDateFormat yyyy 和 YYYY 的区别\",\"GregorianCalenda jdk1.7\",\"在线显示本周是一年第几周的网站：What's the Current Week Number?\"]},\"580\":{\"h\":\"Java 笔记之序列化与反序列化：Serializable、Externalizable 和 Parcelable\",\"t\":[\"Photo by Pixabay from Pexels\",\"序列化：指将Java对象转化为字节流以便在网络、文件中保存、传输。\",\"反序列化：指的是从字节流中恢复Java对象。\",\"本文主要讨论 Android 和 Java 中实现序列化的 4 种方式，并探讨一下其实现原理。\",\"Android & Java 中实现序列化的方式有：\",\"android.os.Parcelable Android 平台特有，需要自己实现具体细节，性能消耗小，只能在内存中存在\",\"java.io.Serializable 实现简单，只需要实现Serializable接口即可，可以输出到文件、网络等\",\"java.io.Externalizable 需要自己实现具体细节\",\"Twitter Serial Twitter 出品的高性能序列化方案，它力求帮助开发者实现高性能和高可控的序列化过程。（本文不详细介绍，可以参考这篇文章）\"]},\"581\":{\"h\":\"Serializable\",\"t\":[\"Serializable接口没有任何方法，只是一个标记——表示这个类可以用来序列化/反序列化（由ObjectOutputStream/ObjectInputStream实现具体细节）。\",\"一个类没有实现Serializable接口，或者包含没有实现Serializable接口的变量，则会序列化失败NotSerializableException。\"]},\"582\":{\"h\":\"serialVersionUID\",\"t\":[\"使用serialVersionUID标记当前Serializable的版本。\",\"如果没有指定，系统会自动用对象的hashCode()指定serialVersionUID，该值会在类发生改变时变化，从而导致反序列化失败。\",\"而如果serialVersionUID一致，即使类结构有变化，也会反序列化（给新增的变量默认值），所以最好赋予一个默认的值。\",\"//可以手动指定，也可以随机数，只要保持一致即可，如果不一致则会使反序列化失败 ANY-ACCESS-MODIFIER static final long serialVersionUID = 1L;\"]},\"583\":{\"h\":\"readResolve()\",\"t\":[\"如果class实现了readResolve()方法，会在反序列化时用到并返回这里提供的对象（反序列化得到的对象会被丢弃）。\",\"// 1. 反序列化 SerializableClass serializableClass = (SerializableClass) objectInputStream.readObject(); // 2.readObject() 内部调用了 readObject0(false): private Object readObject0(boolean unshared) throws IOException { // ... try { switch (tc) { // 这里匹配了 TC_NULL,TC_REFERENCE,TC_CLASS,TC_CLASSDESC, // TC_PROXYCLASSDESC,TC_STRING,TC_LONGSTRING,TC_ARRAY,TC_ENUM // TC_EXCEPTION,TC_BLOCKDATA,TC_BLOCKDATALONG,TC_ENDBLOCKDATA 等等类型 case TC_OBJECT://如果是 OBECJT 类型，就调用下面的方法👇 return checkResolve(readOrdinaryObject(unshared)); // ... default: throw new StreamCorruptedException( String.format(\\\"invalid type code: %02X\\\", tc)); } } finally { depth--; bin.setBlockDataMode(oldMode); } } // 3. 在这里会检测是否存在 readResolve() 方法，有的话就返回从 readResolve() 获取的对象 private Object readOrdinaryObject(boolean unshared) throws IOException { // ... Object obj; // ... // 看这里，如果 hasReadResolveMethod() 为真则执行 invokeReadResolve() 并返回其结果 if (obj != null && handles.lookupException(passHandle) == null && desc.hasReadResolveMethod()) { Object rep = desc.invokeReadResolve(obj); if (unshared && rep.getClass().isArray()) { rep = cloneArray(rep); } if (rep != obj) { // Filter the replacement object if (rep != null) { if (rep.getClass().isArray()) { filterCheck(rep.getClass(), Array.getLength(rep)); } else { filterCheck(rep.getClass(), -1); } } handles.setObject(passHandle, obj = rep); } } return obj; } // Invokes the readResolve method of the represented serializable class and returns the result. Object invokeReadResolve(Object obj) throws IOException, UnsupportedOperationException{}\",\"通过这个特性我们可以确保在反序列化的时候也能实现单例：\",\"private Object readResolve() throws ObjectStreamException { return this;//返回单例本身，而非新建的对象 }\",\"但是根据下面的说法，要实现可以序列化的单例最简单安全的，还是使用枚举：\",\"事实上，如果依赖 readResolve 进行实例控制，带有对象引用类型的所有实例域则都必须声明为 transient 的。否则，利用readResolve()方法实现的单例也会遭受到攻击。\",\"实现可序列化最简单安全的方式是采用枚举的形式，应该尽可能采用这种方式。如果采用readResolve实现的话，要确保该类的所有实例域都为基本类型，或者是transient的。\",\"77.单例模式，枚举类型优先于 readResolve\"]},\"584\":{\"h\":\"自定义序列化过程\",\"t\":[\"如果想要自己处理序列化的过程，可以实现下面的方法：\",\"private void writeObject(java.io.ObjectOutputStream out) throws IOException private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException;\",\"其中，可以使用下面的方法实现读/写该类自身的属性（All non-static and non-transient fields of the current class, include private），然后在调用诸如out.writeObject(string);等方法保存其他变量。\",\"The method does not need to concern itself with the state belonging to its superclasses or subclasses.\",\"in.defaultReadObject(); out.defaultWriteObject();\",\"readObjectNoData方法主要用在序列化流和我们要反序列化的类不一致时初始化一些必要的状态。\",\"这种情况可能出现在接收方使用了一个与发送方不同版本的类。接收方的版本多扩展了一些字段，而发送方的版本没有这些字段。还有一种可能就是序列化流被篡改了。这时，无论是恶意的流还是不完整的流，都可以用 readObjectNoData 方法来将序列化得到的对象初始化到正确的状态。 作者：福尔马林 链接：https://juejin.im/post/5d7206c5f265da03ab427181\",\"此外，还可以使用ObjectOutputStream的putFields()和ObjectInputStream的readFields()写入/读取变量。使用这种方法可以加密/解密部分变量，或者在序列化的时候只处理部分变量。\",\"具体使用方法见如下：\",\"注意：putFields()/readFields()方法分别不能与defaultWriteObject/defaultReadObject一起使用；\",\"putFields.put()之后必须调用out.writeFields()方法\",\"并且，没有在putFields()中加入的数据，在readObject中只能获取到该类型的默认值\",\"//这段示例代码来自 https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html private void writeObject(ObjectOutputStream out) { try { PutField putFields = out.putFields(); System.out.println(\\\"原密码：\\\" + password); password = \\\"encryption\\\";//模拟加密 putFields.put(\\\"password\\\", password); System.out.println(\\\"加密后的密码：\\\" + password); out.writeFields();// putFields.put() 之后必须调用本方法 } catch (IOException e) { e.printStackTrace(); } } private void readObject(ObjectInputStream in) { try { GetField readFields = in.readFields(); Object object = readFields.get(\\\"password\\\", \\\"\\\"); System.out.println(\\\"要解密的字符串：\\\" + object.toString()); password = \\\"pass\\\";//模拟解密，需要获得本地的密钥 } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } } // 执行反序列化结果： // 原密码：pass // 加密后的密码：encryption // 要解密的字符串：encryption // 最后反序列化后的 password 为 pass\"]},\"585\":{\"h\":\"父类未继承 Serializable 的类的序列化\",\"t\":[\"如果一个类实现了序列化，但他的父类没有实现序列化，那么父类必须要有一个公开的无参构造函数，否则反序列化时会出错。\",\"此时反序列化时，父类的变量值（public, protected, and (if accessible) package fields）都会是默认的值或者是在父类无参构造函数中初始化的值（即使这些值在子类对象中已经被修改了）。\",\"要想使得这些值也可以支持序列化，可以通过writeObject/readObject自己处理这些值的序列化。\",\"反之，如果一个类实现了Serializable接口，那么他的子类也自动支持序列化与反序列化。\"]},\"586\":{\"h\":\"实现\",\"t\":[\"下面是使用Serializable实现序列化与反序列化的简单示例：\",\"/** * author: jixiaoyong * email: jixiaoyong1995@gmail.com * website: https://jixiaoyong.github.io * date: 12/24/19 * description: 演示序列化功能 */ class SerializableClass implements Serializable { private int anInt = 10; public long aLong = 100L; public transient String aTransient = \\\"transient filed cannot be serialized\\\"; public static String A_STATIC_FILED = \\\"static filed belong to class not object, cannot be serialized\\\"; public static void main(String[] args) { SerializableClass clazz = new SerializableClass(); File file = new File(\\\"ObjectOutputFile\\\"); try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file)); ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(file))) { //write object to byte sequences objectOutputStream.writeObject(clazz); //chang the object filed clazz.aLong = 666L; // A_STATIC_FILED belong to the class, so you can see it has the value read form // the JVM rather the object you serialized before when you deserializes it. SerializableClass.A_STATIC_FILED = \\\"Change the static filed!\\\"; SerializableClass serializableClass = (SerializableClass) objectInputStream.readObject(); System.out.println(serializableClass); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } } @Override public String toString() { return \\\"SerializableClass{\\\" + \\\"anInt=\\\" + anInt + \\\", aLong=\\\" + aLong + \\\", aTransient='\\\" + aTransient + '\\\\'' + \\\", A_STATIC_FILED='\\\" + A_STATIC_FILED + '\\\\'' + '}'; } } // output: // SerializableClass{anInt=10, aLong=100, aTransient='null', A_STATIC_FILED='Change the static filed!'}\"]},\"587\":{\"h\":\"多次序列化同一个对象\",\"t\":[\"返序列化读取的过程在readResolve()方法一节已经涉及到了，我们在看一下保存的部分，这里会有一个有意思的现象：\",\"Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用。\",\"https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html\",\"这会导致一个问题：当使用同一个ObjectOutputStream对象序列化同一个序列化对象时，即使在第一次序列化并保存后修改了这个对象的部分属性，当再次序列化时保存的只是前一个对象的引用——也就是说将完全相同一个对象保存了两次，第二次做的修改在序列化的时候并没有保存。\",\"我们写个简单的 DEMO 验证一下：\",\"private static void readAndwriteObject2(SerializableClass clazz) { File file = new File(\\\"ObjectOutputFile\\\" + System.currentTimeMillis()); try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file)); ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(file)) ) { // 第一次序列化 objectOutputStream.writeObject(clazz); objectOutputStream.flush(); clazz.aLong = 9344L;//在这里修改了部分属性 // 第二次序列化 objectOutputStream.writeObject(clazz); objectOutputStream.flush(); // 反序列化，读取之前序列化的两个对象 SerializableClass serializableClass = (SerializableClass) objectInputStream.readObject(); System.out.println(serializableClass); SerializableClass serializableClass1 = (SerializableClass) objectInputStream.readObject(); System.out.println(serializableClass1); System.out.println(\\\"serializableClass == serializableClass1: \\\" + (serializableClass == serializableClass1)); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } } // output // SerializableClass{anInt=10, aLong=100, aaLong=100, aTransient='null', A_STATIC_FILED='static filed belong to class not object, cannot be serialized'} // SerializableClass{anInt=10, aLong=100, aaLong=100, aTransient='null', A_STATIC_FILED='static filed belong to class not object, cannot be serialized'} // serializableClass == serializableClass1: true //可以看到两次获取的是完全相同的对象\",\"这是为什么呢，我们可以在源码中看到原因：\",\"// 序列化时，我们会调用 ObjectOutputStream 的 writeObject 方法 public final void writeObject(Object obj) throws IOException { if (enableOverride) { writeObjectOverride(obj); return; } try { writeObject0(obj, false);//注意这里，第二个参数 unshared 是 false } catch (IOException ex) { if (depth == 0) { writeFatalException(ex); } throw ex; } } /** obj -> wire handle map */ private final HandleTable handles; private void writeObject0(Object obj, boolean unshared)throws IOException{ // ... if ((obj = subs.lookup(obj)) == null) { writeNull(); return; } else if (!unshared && (h = handles.lookup(obj)) != -1) { // 可以看到这里，如果 unshared 为 false 的话， // 就会去找这个对象是否已经被序列化过了，是的话就直接写入引用， // 而不是再次序列化 writeHandle(h); return; } else if (obj instanceof Class) { writeClass((Class) obj, unshared); return; } else if (obj instanceof ObjectStreamClass) { writeClassDesc((ObjectStreamClass) obj, unshared); return; } } } /** * Writes given object handle to stream. */ private void writeHandle(int handle) throws IOException { bout.writeByte(TC_REFERENCE); bout.writeInt(baseWireHandle + handle); }\",\"为了避免这种情况，在保存同一个对象时要注意使用不同的ObjectOutputStream对象，或者可以使用writeUnshared方法。\",\"// Writes an \\\"unshared\\\" object to the ObjectOutputStream. public void writeUnshared(Object obj) throws IOException { try { writeObject0(obj, true); } catch (IOException ex) { if (depth == 0) { writeFatalException(ex); } throw ex; } }\"]},\"588\":{\"h\":\"优缺点\",\"t\":[\"简单，只需要实现接口\",\"序列化的字节流可以在文件、网络中传递，可以持久化保存\",\"性能差，序列化过程大量使用反射和临时变量\"]},\"589\":{\"h\":\"Externalizable\",\"t\":[\"Externalizable继承自Serializable。\",\"用户需要通过writeExternal(ObjectOutput out)和readExternal(ObjectInput in)实现序列化与反序列化的细节，并且需要一个明确实现的**public no-arg constructor**\"]},\"590\":{\"h\":\"实现\",\"t\":[\"class NewClass implements Externalizable { public int anInt = 0; public String string = \\\"string\\\"; public static Long aLong = 10L; public transient float aFloat = 10F; public NewClass(){} @Override public void writeExternal(ObjectOutput out) throws IOException { out.writeInt(anInt); out.writeObject(string); out.writeLong(aLong); out.writeFloat(aFloat); } @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { anInt = in.readInt(); string = (String) in.readObject(); aLong = in.readLong(); aFloat = in.readFloat(); } @Override public String toString() { return \\\"NewClass{\\\" + \\\"anInt=\\\" + anInt + \\\", string='\\\" + string + '\\\\'' + \\\", aFloat=\\\" + aFloat + \\\", aLong=\\\" + aLong + '}'; } }\"]},\"591\":{\"h\":\"原理\",\"t\":[\"看源码可以知道，如果检测到当前对象是Externalizable时，就会去调用该对象的writeExternal方法。\",\"public interface Externalizable extends java.io.Serializable // writeObject0 方法中： if (obj instanceof String) { writeString((String) obj, unshared); } else if (cl.isArray()) { writeArray(obj, desc, unshared); } else if (obj instanceof Enum) { writeEnum((Enum<?>) obj, desc, unshared); } else if (obj instanceof Serializable) { writeOrdinaryObject(obj, desc, unshared);//如果是 Serializable 就执行这个 } // writeOrdinaryObject 方法中： if (desc.isExternalizable() && !desc.isProxy()) { writeExternalData((Externalizable) obj);//如果是 Externalizable 就执行这个 } else { writeSerialData(obj, desc); } // writeExternalData 方法中 // Writes externalizable data of given object by invoking its writeExternal() method. if (protocol == PROTOCOL_VERSION_1) { obj.writeExternal(this); } else { bout.setBlockDataMode(true); obj.writeExternal(this); bout.setBlockDataMode(false); bout.writeByte(TC_ENDBLOCKDATA); }\"]},\"592\":{\"h\":\"优缺点\",\"t\":[\"比Serializable麻烦，序列化与反序列化都需要用户自己实现\",\"灵活，可以自定义要参与到序列化与反序列化的变量\"]},\"593\":{\"h\":\"Parcelable\",\"t\":[\"Parcelable是 Android 为了解决Serializable性能问题而推出的，主要用在 Android 的Intent或线程间通信中。\",\"Parcelable通过Parcel传输到IBinder中，从而实现跨进程传输。\",\"对于kotlin语言来说，Android Studio 自动生成的Parcelable代码不会处理 val 变量（因为这些变量不会变化）\",\"此外，Parcelable在反序列化时，调用parcel.readParcelable(classLoader)传入的是ClassLoader。\"]},\"594\":{\"h\":\"实现\",\"t\":[\"下面是一个Parcelable的实现：\",\"class AParcelable() : Parcelable { var i = 10 // 从 Parcel 中恢复数据，必须按照写入的顺序读取 constructor(parcel: Parcel) : this() { i = parcel.readInt() } // 将变量写入到 Parcel 中，必须与读取的顺序对应 override fun writeToParcel(parcel: Parcel, flags: Int) { parcel.writeInt(i) } // 文件描述，一般默认为 0 // 如果这个对象的 writeToParcel 方法的输出中有特殊的对象则传递对应的描述代码 // 如：如果包含一个文件描述符 FileDescriptor，就要返回 CONTENTS_FILE_DESCRIPTOR // https://developer.android.google.cn/reference/android/os/Parcelable.html#CONTENTS_FILE_DESCRIPTOR override fun describeContents(): Int { return 0 } // 必须有这个变量，用来从 Parcel 中创建 Parcelable 类 // 在 JAVA 中是 public static final Creator<Book> CREATOR = new Creator<Book>() {...} companion object CREATOR : Parcelable.Creator<AParcelable> { override fun createFromParcel(parcel: Parcel): AParcelable { return AParcelable(parcel) } // Create a new array of the Parcelable class. // Returns an array of the Parcelable class, with every entry // initialized to null. override fun newArray(size: Int): Array<AParcelable?> { return arrayOfNulls(size) } } }\"]},\"595\":{\"h\":\"原理\",\"t\":[\"原理参考这篇文章Parcelable 源码分析\"]},\"596\":{\"h\":\"优缺点\",\"t\":[\"性能好，Parcelable接口比Serializable接口效率更高，性能方面高出 10 多倍 [^Parcelable 源码分析]:\",\"较复杂，需要自己实现对象的序列化内容\"]},\"597\":{\"h\":\"总结\",\"t\":[\"一般需要持久化保存数据或在网络间传输时推荐使用Serializable或者Externalizable。\",\"在 Android 中Activity之间等传递对象，以及跨进程传递对象等时使用Parcelable以节省性能。\"]},\"598\":{\"h\":\"参考资料\",\"t\":[\"Android 之序列化详解\",\"Java 序列化的高级认识\",\"【原创】（译）Java 序列化魔法方法及使用示例\",\"What is Serialization? Everything You Need to Know About Java Serialization Explained With Example\",\"java 序列化，看这篇就够了\",\"Java 之 Serializable/Externalizable 序列化和反序列化\",\"77.单例模式，枚举类型优先于 readResolve\",\"Pareclable 实现原理：Parcelable 最强解析\",\"Parcelable 使用：详细介绍 Android 中 Parcelable 的原理和使用方法\",\"Parcelable 源码分析\"]},\"599\":{\"c\":[\"java\"]},\"600\":{\"h\":\"Java 线程安全与 volatile 和 synchronize\"},\"601\":{\"h\":\"前言\",\"t\":[\"Java 多线程编码中，保证线程安全的实质是保证对数据操作的原子性，即一个线程对数据的操作能够及时的更新到其他使用该数据的线程中，这样就可以避免多个线程因为操作的数据值不一致而产生错误。\",\"线程、主内存、工作内存三者交互关系——深入理解 JAVA 虚拟机\",\"由于 Java 内存模型（JMM）规定，所有线程公用的数据保存在主内存中，而线程在使用时先从主内存中取到线程私有的工作内存中，之后再在使用完毕后同步到主内存中，在这过程中，如果其他线程也用到了该数据则可能会出现问题，因此在线程操作数据时需要考虑线程并发时操作数据的同步问题。\",\"volatile和synchronize因此而生。\"]},\"602\":{\"h\":\"volatile\",\"t\":[\"volatile修饰的变量有两个特性：\",\"变量对所有线程可见 普通变量则需要等线程操作完毕，将结果从工作内存写入到主内存中才可以被其他线程可见，volatile 修饰的变量会在修改后通知其他线程该变量已经被更改，从而让其他线程再去主内存中读取最新的值\",\"禁止指令重排优化\",\"volatile修饰的变量执行效率和普通变量差别不大，其写操作因为要插入内存屏障，所以会稍微慢一些\",\"需要注意的是：\",\"由于 Java 运算的具体实现并非原子性的，故而虽然volatile修饰的变量在所有线程可见，但是并发下并不线程安全。\",\"Java 代码编译成 class 文件后可以看到，类似c = c + 1这样的语句，会被分为：读取c的值；计算c+1的值；将结果赋予c这几步来完成。所以在此期间如果有其他的线程访问这段代码，就会发生冲突。\",\"Java 会通过指令重排来优化代码\",\"指令重排 指对于变量的赋值会在定义该变量和使用该变量的值之间的任意位置执行，不一定和代码中的顺序一致\",\"volatile修饰的变量则会插入内存屏障，从而实现屏蔽指令重排的效果\"]},\"603\":{\"h\":\"synchronize\",\"t\":[\"synchronize实现的原理是锁定指定的对象（如果没有指定则锁定对应的类对象或 class 对象），然后阻塞其他线程进入（获取到该锁的线程可以多次重入）。\",\"由于 Java 的线程实现是映射到系统线程的，阻塞和唤醒需要由系统内核完成，会消耗大量的时间，因此synchronize是重量级操作。\"]},\"604\":{\"h\":\"JMM 与三个特征\",\"t\":[\"JMM 的设计是围绕着原子性、可见性、有序性三个特征进行的。\",\"原子性 JVM 中的read,load,assign,use,store,write操作和synchronize\",\"可见性 一个线程更改了共享变量的值时，其余线程能够立即得知这个更改。通过synchronize，final和volatile保证。\",\"final要保证可见性的前提是要被安全的构建出来，避免**“this 引用逃逸”**\",\"this 引用逃逸 对象还没有被构造完成，他的this引用就已经被发布出去了。\",\"在构造函数中生成内部类，由于内部类自动持有外部类的this引用，如果有对象在内部类语句之后构造，则就有可能发生“内部类访问这个对象时，该对象还没有构造完毕”的情况。\",\"有序性 通过synchronize,volatile保证。\",\"线程从内部观察时有序（线程内是串行的语义），线程外部观察是无序（由指令重排、工作内存与主内存同步延迟导致）\"]},\"605\":{\"h\":\"实现线程安全\",\"t\":[\"实现线程安全有以下几种方法：\"]},\"606\":{\"h\":\"互斥同步（阻塞同步）\",\"t\":[\"互斥同步的思想是：多个线程使用同一个共享数据时，保证同一时刻只能被一个线程使用\",\"有两种途径：\",\"synchronize （原生语法层），优先使用\",\"ReentrantLock 重入锁（API 层），功能有：1.等待可中断（可以放弃等待）2.公平锁 多个线程申请锁时必须按照申请时间顺序获得锁 3.锁绑定多个条件\"]},\"607\":{\"h\":\"非阻塞同步\",\"t\":[\"减少了阻塞/唤醒的耗时，在操作时进行 CAS（比较并交换），在冲突发生的时候不断尝试执行所需操作，直到执行成功。\",\"但是有一个逻辑漏洞：如果在第一次操作失败到第二次再次尝试操作之间，其他线程对齐进行了操作但是该数据最终没有被变化，当第二次再次尝试时，其实已经被其他线程访问过了。\"]},\"608\":{\"h\":\"无同步方案\",\"t\":[\"保证线程安全，不一定需要同步，当线程操作的数据不是共享数据时，即使不同步也是线程安全的。\",\"可重入代码 指在代码执行的过程中，如果中断其运行并运行其他的线程，当再次返回继续执行该代码时不会影响到其执行结果的代码。这种代码一般没有用到堆中的公用资源。\",\"线程本地存储 共享数据值存在于同一个线程中，如每个线程的 ThreadLocal 对象\"]},\"609\":{\"h\":\"锁优化\",\"t\":[\"JDK1.6 以后，在 HotSpot 虚拟机上实现了许多锁优化技术：\",\"自旋锁\",\"实现阻塞同步时，阻塞和唤醒会很耗时，为了避免这种情况，可以先对其进行忙循环，如果还不行再去执行阻塞操作\",\"自适应自旋 由 JVM 智能决定自旋次数\",\"锁消除\",\"JVM 会自动取出不必要的锁\",\"锁粗化\",\"如果一段代码中有连续的锁，则 JVM 会将这些锁合并为一个大锁\",\"轻量级锁\",\"轻量级锁消耗比传统锁机制小，会优先尝试使用轻量级锁，如果不行，在升级为互斥锁\",\"大多数情况下会减少消耗，但如果存在锁竞争，则除了互斥锁的开销外，还有轻量级锁的开销\",\"偏向锁\",\"在无竞争的情况下消除同步\",\"乐观锁\",\"读取数据时默认该对象不会被其他对象更改而不加锁，每次写数据时对比当前值与持有值是否一致，一致时才去更新数据\"]},\"610\":{\"h\":\"参考资料\",\"t\":[\"《深入理解 Java 虚拟机——JVM 高级特性与最佳实践》周志明\",\"this 引用逃逸——蜡笔小勋\"]},\"611\":{\"c\":[\"jvm\"]},\"612\":{\"h\":\"Kotlin 学习笔记 1\",\"t\":[\"这是我在学习 Bennyhuo（ github ）的 kotlin 入门视频时的一些笔记，比较偏基础，用于查缺补漏。\",\"xx.map() & xx.flatMap()\",\"xx.flatMap() 用于返回可迭代的数组，而 xx.map() 则是任何可迭代数据都有的用来遍历的方法。\",\" var arr = arrayListOf<String>(\\\"a c v de fb s e gf d\\\") arr.flatMap { it.split(\\\" \\\") }.map{ print(\\\"${it.toUpperCase()}\\\") }\",\"enum class 枚举类型\",\"分为有参和无参，枚举变量以,分隔，如果 enum 还有方法或者伴生对象，则最后一个变量后为;，否则可为,、;或者没有。\",\"enum class City{ UK,USA,EU; //以下为非必须代码，仅表示可以有这些功能 fun say(){...} companion object{ fun fun1(s:String):City{ return valueOf(s.toUpperCase()) } } }\",\"​ 有参的情况如下\",\"enum class Country(val aName:String){ CHINA(\\\"中国\\\"), JAPAN(\\\"日本\\\"), USA(\\\"美国\\\"), UK(\\\"英国\\\"); }\",\"​ 使用：通过 enum 的 valueOf() 方法获取枚举对象实例\",\"var s = \\\"uk\\\" var city = City.valueOf(s.toUpperCase()) //或者通过伴生对象： var city = City.fun1(s)\",\"companion object 伴生对象\",\"在类的定义，可以直接用类名.方法名()调用，相当于 java 中的静态方法\",\"一个类中只能有一个伴生对象\",\"class xxx{ ... companion object{ fun parse(x: String): Country { return valueOf(x.toUpperCase()) } ... } }\",\"object 修饰的类\",\"等同于只有一个实例的类，相当于 java 中的静态类，所有方法可以直接用类名调用\",\"object ClassName{ fun(){...} }\",\"fun ClassName.funName() 为类添加新的方法\",\"对于不能直接修改的类，有需要对其增加一个方法，可以自定义一个ClassName.funName()的方法来达到这个目的。\",\"private fun Country.sayNum() { //this 引用的是 country 对象 var num = when (this) { CHINA -> 1 JAPAN -> 2 USA -> 3 UK -> 4 } }\",\"​ 在使用时可以通过Country的对象调用syaNum()方法\",\"data class 数据类\",\"可以有方法，方便复制。\",\"必须至少有一个参数，并且参数都需要用 var/val 修饰\",\"data class dataClass(var name: String, val age :Int)\",\"文件读取 \",\"resource 目录下的文件读取\",\" var input = File(ClassLoader.getSystemResource(\\\"input\\\").path).readText()\",\"与 RxJava 结合\",\"统计文本中字母个数，基于 RxJava 1.2.1\",\" Observable.from(input.toCharArray().asIterable()) .filter { !it.isWhitespace() } .groupBy { it } .map{ o ->o.count().subscribe{ print(\\\"${o.key}-> $it ,\\\") } } .subscribe()\"]},\"613\":{\"h\":\"Kotlin 学习笔记 2\"},\"614\":{\"h\":\"尾递归优化\",\"t\":[\"把递归通过编译器转化为迭代，从而避免 Stack Overflow\",\"“以时间换取空间”\",\"普通递归：\",\"调用函数之后，还需要使用其返回值供自己使用，即自身返回值依赖于下一级函数，一般是调用自身的代码后面，还有其他的代码要执行。\",\"fun fun1(n: Int): BigInteger { if (n == 0) return BigInteger.valueOf(1L) return n.toBigInteger().times(fun1(n - 1)) }\",\"尾递归： 调用自身之后，无需再返回当前函数，将处理结果以其他形式返回。 普通递归和尾递归都存在栈溢出风险（未优化前，例子中的函数计算 10000 到 100000 的阶乘时会溢出），kotlin 提供了一种尾递归优化的方法——tailrec，使得编译器在编译时将递归转化为迭代，从而避免栈溢出。\",\"data class Result(var value: BigInteger = BigInteger.valueOf(1L)) //尾递归，tailrec 为 kotlin 中优化关键字 tailrec fun fun2(n: Int, m: Result) { if (n == 0) { m.value = m.value.times(BigInteger.valueOf(1L)) return } else { m.value = m.value.times(n.toBigInteger()) fun2(n-1,m) } }\",\"本例中传入fun2()的Result实例保存了计算结果\"]},\"615\":{\"h\":\"sealed class 密封类\",\"t\":[\"密封类的所有子类必须在一个文件 (xx.kt) 中，他的子类是有限的，所以当when()的时候不需要else。\",\"某种意义上他们像是一种enum class，只不过他的子类可以有多个实例。\",\"Sealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a limited set, but cannot have any other type. They are, in a sense, an extension of enum classes: the set of values for an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass of a sealed class can have multiple instances which can contain state.\",\"//sealed class sealed class Player{ class Play(var arg:String) : Player() object Stop : Player() } class p2():Player()\"]},\"616\":{\"h\":\"kotlin 抛出异常\",\"t\":[\"@Throws(RemoteException::class) fun getBookList():List<Book>\"]},\"617\":{\"h\":\"kotlin 中的泛型\",\"t\":[\"out 协变，使用子类泛型的对象可以赋值给使用父类泛型的对象，相当于extend，用于方法的返回值（生产者）时使用\",\"in 逆变，使用父类泛型的对象可以赋值给使用子类泛型的对象，相当于super，用于方法的参数（消费者）时使用\",\"不变，当泛型即当消费者，又当生产者时，不用in或者out\",\"fun main(args: Array<String>) { val from = arrayOf(1,2,4) val to = arrayOf(Any()) copyArray(from,to) } fun copyArray(from: Array<out Any>, to: Array<in Int>) { //这里的 from 被 out 修饰，只能作为生产者调用 get 之类的方法，不能作为消费者调用 set 之类的方法 //... }\"]},\"618\":{\"h\":\"星号投射\",\"t\":[\"你对类型参数一无所知，但仍然希望以安全的方式使用它。\",\"安全的使用，则表示该类Group<T>满足\",\"1.子类至少接收和父类一样范围的参数 >= ---> 父类入参为 Noting 不能安全写入\",\"2.子类最多返回和父类一样范围的参数 <= ---> 父类出参为 Any? 可以安全读取\",\"则有以下三种实现方式\",\"in-out-star-projection-approaches\",\"其中：\",\"Group<in Noting> 的fetch()方法一直返回Any?\",\"Group<out Any?> 的T需要与实际的Group的T保持一致，否则会报错\",\"Group<*> 既能insert正确返回对应的类型，也不用实时修改\",\"object TClass { fun readIn(group: Group<in Nothing>) { val d = group.fetch() } fun readOut(group: Group<out Animal>) { val d = group.fetch() } fun read(group: Group<*>) { val d = group.fetch() } } interface Group<T : Dog> { fun insert(member: T): Unit fun fetch(): T }\"]},\"619\":{\"h\":\"委托\",\"t\":[\"委托是将重复出现的代码放到一个地方。\",\"委托示意图\",\"类委托：\",\"interface Interface { fun a() } class A : Interface class B(a: Interface) : Interface by a\",\"这样 B 便可以将Interface中方法的实现委托给类A的对象a\",\"委托属性：\",\"将同一类型的属性的get、set方法放到一个地方实现，可以在加入其它操作\",\"class Delegate { var name: String = \\\"\\\" operator fun getValue(clazz: Any?, property: KProperty<*>): String { println(\\\"get()\\\")//其它操作 return name } operator fun setValue(clazz: Any?, property: KProperty<*>, t: String) { println(\\\" set()\\\") name = t } } class ClassA { var name: String by Delegate() var age: String by Delegate() }\",\"委托类的初始化函数：\",\"fun <T> delegate(initializer: () -> T) = Delegate(initializer) class MyClass1 { var name: String by delegate { println(\\\"MyClass1.name init\\\") \\\"MyClass1\\\" } } class Delegate<T>(initializer: () -> T) { operator fun getValue(myClass1: T, property: KProperty<*>): String { println(\\\"$className get()\\\") return name } operator fun setValue(myClass1: T, property: KProperty<*>, t: String) { println(\\\"$className set()\\\") name = t } var name: String = \\\"\\\" var className = initializer() }\",\"Map 委托：\",\"将类的属性名称和map中的key一一对应，从而将对于value赋值给属性\",\"class ClassB(map: Map<String, Any>) { val name: String by map val age: Int by map } fun main() { val map = mapOf(\\\"name\\\" to \\\"shany\\\", \\\"age\\\" to 18) val b = ClassB(map) print(b.name)//shayn print(b.age)//18 }\",\"veroable\",\"可以拦截赋值操作\",\"class ClassB() { var name:String by Delegates.vetoable(\\\"ThisIsInitialValue\\\"){ property, oldValue, newValue -> return@vetoable false //返回 true 允许更改值，false 不允许更改 } }\"]},\"620\":{\"h\":\"中缀函数\",\"t\":[\"需要满足三个条件：\",\"成员函数或拓展函数\",\"只有一个参数\",\"infix 声明\",\"infix fun String.div(string: String):String{ return this.replace(string,\\\"\\\") } 使用： val s = \\\"bababbaab\\\" div \\\"a\\\"\"]},\"621\":{\"h\":\"inline 内联函数\",\"t\":[\"inline修饰的函数在被调用时将字节码动态插入到被到调用的地方。\",\"inline修饰的函数的lambda参数如果运行在该函数内部的*子函数/其他环境*，则不允许这个 lambda 函数非局部返回（因为没有办法从该 子函数/其他环境 中直接退出 lambda 所在的外层函数），对于这种 lambda 函数需要添加**crossinline**修饰。\",\"//**非局部返回**指从 lambda2 中执行 return 语句，推出的是整个 func() inline fun func1(crossinline lambda1:()->Unit, lambda2:()->Unit){ val f = Runnable { lambda1()//不可以调用非局部返回，所以用 crossinline 修饰 } lambda2()//可以调用非局部返回 }\",\"Kotlin 也存在 Java 泛型所具有的类型擦除问题，为了优化该问题，inline 函数可以结合reified实现实体化类型参数\",\"inline fun <reified T> isInstanceOf(value: Any) = value is T //在这里仍然可以知道 T 是什么类型的，所以可以执行 value is T print(isInstanceOf<String>(\\\"\\\"))//true\",\"**原理：**内联函数会直接被插入到被调用的地方，而reified修饰的类型参数会保证将用户调用时写的类型String同时也写入到被调用的地方，如此便没有发生类型擦除。\"]},\"622\":{\"h\":\"coroutines 协程\",\"t\":[\"协程可以看做是一个轻量级的 thread，他运行在线程当中，由用户控制，没有上下文切换的开销。\",\"在 Android 中使用协程，特别是在 IO 操作及网络请求等需要根据耗时操作更新界面的需求时，可以将 IO 操作和界面操作串行，避免切换线程、回调嵌套等导致代码可读性查的问题。\",\"如配合支持协程的 retrofit，我们可以将网络请求简化如下：\",\" launch(Dispatchers.Main) { //这里是主线程 showProgressOnMainThread() val repos = withContext(Dispatchers.IO) { //这里是 UI 线程 retrofitApi.getRepos(\\\"jixiaoyong\\\").string() } //这里是主线程 updateUIOnMainThread(repos) }\",\"kotlin 协程需要单独添加依赖：\",\"implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2' implementation \\\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2\\\" //Android可以再添加这个依赖，会有一些特殊方法\",\"一个父协程总是等待所有的子协程执行结束，父协程被取消的时候，所有它的子协程也会被递归的取消。\"]},\"623\":{\"h\":\"协程中 与 的区别\",\"t\":[\"相同点：\",\"依次执行内部代码，如果代码1是启动协程，那么启动该子协程后，继续执行代码1后面的代码直到最后一行（类似启动新线程，不会阻塞当前线程），然后再等待所有内部协程结束，才会退出。\",\"不同点：\",\"runBlocking：会运行一个新的协程线程，并阻塞其所在线程,直到其内部所有协程/子协程执行完毕才会退出。设计用来以阻塞的方式执行协程代码，不应该在协程中使用。\",\"coroutineScope：不会阻塞其所在线程，要在协程中使用，当其内部所有协程/子协程执行完毕才会退出。设计用来执行并行操作，一旦有子协程失败，则其他子协程都会被取消，整个代码块执行失败。\"]},\"624\":{\"h\":\"协程的思维导图\",\"t\":[\"需要说明的是\",\"Dispatchers.Unconfined 非受限，不会限定协程运行的线程，而是随环境切换\",\" launch(Dispatchers.Unconfined) { // main thread withContext(newSingleThreadContext(\\\"hello\\\")){ //hello thread } //hello thread }\"]},\"625\":{\"h\":\"协程局部变量\",\"t\":[\"通过ThreadLocal、ThreadContextElement，配合asContextElement(\\\"value\\\")方法实现。和协程所在的线程没有关系。\",\"直接修改ThreadLocal的值，会在切换协程的时候失效（会被改为切换到的协程所使用的的值），当再次切回本协程时，被重置为上一个通过asContextElement(\\\"value\\\")方法更新的值或者null（如果没有指定）。\",\"原理：启动和恢复时保存ThreadLocal在当前线程的值，并修改为 value，挂起和结束时修改当前线程ThreadLocal的值为之前保存的值\",\"—— Kotlin Coroutines(协程) 完全解析（五），协程的并发\",\"val threadLocal = ThreadLocal<String?>() // 声明线程局部变量 fun main() = runBlocking<Unit> { threadLocal.set(\\\"main\\\") printValue(1) // main async (Dispatchers.Default + threadLocal.asContextElement(value = \\\"launch\\\")) { printValue(2) // launch threadLocal.set(\\\"hello\\\") // threadLocal.asContextElement(\\\"hello\\\") //如果使用这个方法更新，则 printValue(4) 会打印 hello printValue(3) // hello yield() printValue(4)// launch }.await() printValue(5) // main } fun printValue(number: Int){ println(\\\"$number: ${Thread.currentThread()}, thread local value: '${threadLocal.get()}'\\\") }\"]},\"626\":{\"h\":\"在 Android 中使用\",\"t\":[\"Kotlin 官方推荐一下两种方式：\",\"1. CoroutineScope class Activity : CoroutineScope by CoroutineScope(Dispatchers.Default) { // 继续运行…… 2. MainScope class Activity { private val mainScope = MainScope() fun destroy() { mainScope.cancel() } // 继续运行……\"]},\"627\":{\"h\":\"参考资料\",\"t\":[\"Star-Projections and How They Work\",\"Kotlin 的独门秘籍 Reified 实化类型参数 (下篇)\",\"Kotlin 协程官网\",\"Kotlin Coroutines(协程) 完全解析（五），协程的并发\"]},\"628\":{\"h\":\"Kotlin 学习笔记 3\",\"t\":[\"本文为笔记性质，尚未成文，待整理\"]},\"629\":{\"h\":\"异步流\",\"t\":[\"lazy 方式创建一个序列，只有在访问的时候才生产对应的项目\",\"fun foo(): Sequence<Int> = sequence{ for (i in 1..3) { Thread.sleep(1000)//会阻塞调用线程 yield(i)//生产一个项目 } }\",\"使用 Flow 流在不阻塞主线程的情况下，延迟生产多个值并返回\",\"当流在一个可取消的挂起函数（例如 delay）中挂起的时候取消，否则不能取消。\",\"//flow 构建器中的代码直到流被收集的时候才运行，并且每次 collect 都会被启动 fun foo(): Flow<Int> = flow { // 流构建器 for (i in 1..3) { delay(100) // 假装我们在这里做了一些有用的事情，这里可以被取消 emit(i) // 发送下一个值 } } fun main() = runBlocking<Unit> { // 启动并发的协程以验证主线程并未阻塞 launch { for (k in 1..3) { println(\\\"I'm not blocked $k\\\") delay(100) } } // 收集这个流 foo().collect { value -> println(value) } }\",\"flowOf 构建器定义了一个发射固定值集的流。\",\"使用 .asFlow() 扩展函数，可以将各种集合与序列转换为流。\",\"可以使用操作符转换流，就像使用集合与序列一样。过渡操作符应用于上游流，并返回下游流。这些操作符也是冷操作符，就像流一样。这类操作符（map、fliter...）本身不是挂起函数，但是可以调用挂起函数suspend。它运行的速度很快，返回新的转换流的定义。\",\"在流转换操作符中，最通用的一种称为 transform。它可以用来模仿简单的转换，例如 map 与 filter，以及实施更复杂的转换。使用 transform 操作符，我们可以 发射 任意值任意次\",\"限长过渡操作符（例如 take）在流触及相应限制的时候会将它的执行取消。\",\"fun numbers(): Flow<Int> = flow { try { emit(1) emit(2) println(\\\"This line will not execute\\\") emit(3) } finally { println(\\\"Finally in numbers\\\") } } fun main() = runBlocking<Unit> { numbers() .take(2) // 只获取前两个 .collect { value -> println(value) } }\",\"流构造器中的协程上下文默认和 collect 的协程上下文一致，如果强行转换上下文会出错。\",\"而使用flowOn()则可以指定流创建的协程上下文：\",\"fun foo(): Flow<Int> = flow { for (i in 1..3) { Thread.sleep(100) // 假装我们以消耗 CPU 的方式进行计算 log(\\\"Emitting $i\\\") emit(i) // 发射下一个值 } }.flowOn(Dispatchers.Default) // 在流构建器中改变消耗 CPU 代码上下文的正确方式\",\"如果 flow 的生产和收集很消耗时间时，可以用buffer()函数将buffer()之前的代码在一个单独的协程运行，collect 则在调用协程运行，这样将 flow 的构建、收集由串行转化为并行可以节约时间（如果构建运行的快，则会挂起直到 collect 赶上来）。\",\"It will use two coroutines for execution of the code. A coroutine Q that calls this code is going to execute collect, and the code before buffer will be executed in a separate new coroutine P concurrently with Q\",\" foo() .buffer() // buffer emissions, don't wait .collect { value -> delay(300) // pretend we are processing it for 300 ms println(value) }\"]},\"630\":{\"h\":\"合并 conflate\",\"t\":[\"conflate operator can be used to skip intermediate values when a collector is too slow to process them.\",\"当 collect 比构建慢的时候，就只会请求最新的值，而跳过中间生产的这些值。\",\"比如，构建器生产了 1，2，... ,100 这些数，而 collect 读取的慢，第一次读的时候是 1，等处理完再读取的时候构建器生产的是 5，那么 collect 就读取 5，中间的 2，3，4 都会被丢弃。\",\"Conflation is one way to speed up processing when both the emitter and collector are slow . The other way is to cancel a slow collector and restart it every time a new value is emitted.\",\"collectLatest可以保证每次都获取最新的值，如果 collect 比生产慢，那么当新的值生产出来时，collect 会被取消，并且去处理最新的值。\",\"fun foo(): Flow<Int> = flow { for (i in 1..3) { delay(100) // pretend we are asynchronously waiting 100 ms emit(i) // emit next value } } fun main() = runBlocking<Unit> { val time = measureTimeMillis { foo() .collectLatest { value -> // cancel & restart on the latest value println(\\\"Collecting $value\\\") delay(300) // pretend we are processing it for 300 ms println(\\\"Done $value\\\") } } println(\\\"Collected in $time ms\\\") } //output Collecting 1 Collecting 2 Collecting 3 Done 3 Collected in 694 ms\"]},\"631\":{\"h\":\"组合多个流\",\"t\":[\"zip将两个流“压缩”为一个流：\",\" val number = (1..3).asFlow() val strs = flowOf(\\\"one\\\", \\\"two\\\", \\\"three\\\") number.zip(strs) { a, b -> \\\"$a -> $b\\\" }.collect{ println(\\\"$it\\\") } // output 1 -> one 2 -> two 3 -> three\",\"当 flow 表示变量或操作的最新值时 (参见关于合并的相关章节) ，可能需要执行依赖于相应流的最新值的计算，并在任何上游流发出值时重新计算它。相应的操作符族称为联合操作符 combine。即每个构建值发生变化时都会触发 collect。\",\"val nums = (1..3).asFlow().onEach { delay(300) } // numbers 1..3 every 300 ms val strs = flowOf(\\\"one\\\", \\\"two\\\", \\\"three\\\").onEach { delay(400) } // strings every 400 ms val startTime = System.currentTimeMillis() // remember the start time nums.combine(strs) { a, b -> \\\"$a -> $b\\\" } // compose a single string with \\\"combine\\\" .collect { value -> // collect and print println(\\\"$value at ${System.currentTimeMillis() - startTime} ms from start\\\") } //output 1 -> one at 452 ms from start 2 -> one at 651 ms from start 2 -> two at 854 ms from start 3 -> two at 952 ms from start 3 -> three at 1256 ms from start\",\"flatMapConcat 可以将 flow 的内容“抹平”（即假设原先为Array<Array<Int>>，则押平后为：Array<Int>）。串行执行，即先执行代码块，然后对其flatMapConcat，然后 collect，之后再执行下一轮的 Flow 项目。\",\"flatMapMerge 按顺序调用它的代码块，但是同时收集结果流，这相当于首先执行一个顺序映射，然后对结果调用 flattonmerge。并行执行，先依次对 Flow 项目调用代码块，然后哪个值先出来，就先对其调用 flatMapMerge，然后 collect。\",\"flatMapLatest 类似 collectLatest ，每次新值出来就会取消还没有处理结束的旧流的操作。\"]},\"632\":{\"h\":\"流异常\",\"t\":[\"流的异常有如下捕获方式：\",\"try/catch block\",\"透明捕获 catch ，只会捕获发送在他之前的异常\"]},\"633\":{\"h\":\"声明式捕获 将 collect 的主要逻辑放到 onEach 中，保证 onEach 在 catch 之前\",\"t\":[\"foo() .onEach { value -> check(value <= 1) { \\\"Collected value\\\" } println(value) } .catch { e -> println(\\\"Caught e\\\") } .collect()\"]},\"634\":{\"h\":\"流完成\",\"t\":[\"try/finally\",\"onCompletion()\",\"foo() .onCompletion { println(\\\"Done\\\") } .collect { value -> println(value) }\",\"而且他还可以判断是否是异常退出。但是只是判断，并不会处理、拦截异常，并且只能处理上游的异常。\",\" foo() .onCompletion { cause -> if (cause != null) println(\\\"Flow completed exceptionally\\\") } .catch { cause -> println(\\\"Caught exception\\\") } .collect { value -> println(value) }\"]},\"635\":{\"h\":\"launchIn(this) 与 collect\",\"t\":[\"collect后的代码只有在 collect 执行完后才能执行，而launchIn可以指定其在单独的协程程序中启动流的集合，从而不会阻塞当前协程。\"]},\"636\":{\"h\":\"Channel\",\"t\":[\"Channel 类似于 BlockingQueue。但他的操作是挂起的。 Channel 提供了在协程之间传递多个值的方法\",\"send 发送 缓存区已满或不存在时调用方会被挂起\",\"channel.receive() 接收\",\"channel.close() 关闭通道，表示没有更多的元素进入通道\",\"CoroutineScope.produce Launches new coroutine to produce a stream of values by sending them to a channel and returns a reference to the coroutine as a ReceiveChannel. This resulting object can be used to receive elements produced by this coroutine. 在新的协程中生产并返回了一个ReceiveChannel<T>对象。\",\"ReceiveChannel<E>.consumeEach 遍历 ReceiveChannel 的 item 执行指定 action，并在块执行完毕后消耗掉这个 ReceiveChannel（调用 cancel()）。\",\"ReceiveChannel.cancel() 取消接收来自这个通道的剩余元素，关闭通道并从中删除所有缓存的元素。\",\"tickerChannel 定时返回Unit的channel：\",\" val tickerChannel = ticker(delayMillis = 1000, initialDelayMillis = 0) // 创建计时器通道 repeat(10) { println(tickerChannel.receive())// 每隔 1s 会打印一个 kotlin.Unit } tickerChannel.cancel() // 表明不再需要更多的元素\"]},\"637\":{\"h\":\"Flow/Channel/Sequence 的区别\",\"t\":[\"Flow是用来异步返回多个值，其内部操作可以挂起\",\"Channel 用来在协程之间传递多个值（transfer a stream of values）\",\"Sequence 用来逐个在 item 中延迟执行完整操作，相比于list等整体执行完毕才进行下一级操作的“弓”字型，Sequence多级操作是逐个 item 依次完整执行多级操作的“几”字型。\"]},\"638\":{\"h\":\"管道\",\"t\":[\"管道指：1.一个协程在流中开始生产无穷多个元素 2.另一个或多个协程消费这些流\",\"import kotlinx.coroutines.* import kotlinx.coroutines.channels.* fun main() = runBlocking { val numbers = produceNumbers() // 从 1 开始生产整数 val squares = square(numbers) // 对整数做平方 for (i in 1..5) println(squares.receive()) // 打印前 5 个数字 println(\\\"Done!\\\") // 我们的操作已经结束了 coroutineContext.cancelChildren() // 取消子协程 } fun CoroutineScope.produceNumbers() = produce<Int> { var x = 1 while (true) send(x++) // 从 1 开始的无限的整数流 } fun CoroutineScope.square(numbers: ReceiveChannel<Int>): ReceiveChannel<Int> = produce { for (x in numbers) send(x * x) }\",\"没有缓冲的通道：如果发送先被调用，则它将被挂起直到接收被调用，如果接收先被调用，它将被挂起直到发送被调用。\",\"带缓冲的通道： Channel() 工厂函数与 produce 建造器通过一个可选的参数 capacity 来指定 缓冲区大小。缓冲允许发送者在被挂起前发送多个元素，就像 BlockingQueue 有指定的容量一样，当缓冲区被占满的时候将会引起阻塞。\",\"val channel = Channel<Int>(4) // 启动带缓冲的通道\",\"发送和接收操作是 公平的 并且尊重调用它们的多个协程。它们遵守先进先出原则。\",\"计时器通道是一种特别的会合通道，每次经过特定的延迟都会从该通道进行消费并产生 Unit 。如果在间隔还没到的时候调用tickerChannel.receive()则会返回null。产生的间隔由TickerModel控制\",\"val tickerChannel = ticker(delayMillis = 100, initialDelayMillis = 0,mode = TickerMode.FIXED_PERIOD) //创建计时器通道 mode 默认为 TickerMode.FIXED_PERIOD tickerChannel.receive() //第一次调用立马返回 Unit\",\"coroutineContext.cancelChildren() // 取消所有的子协程来让主协程结束\"]},\"639\":{\"h\":\"异常\"},\"640\":{\"h\":\"异常的传播\",\"t\":[\"协程构建器有两种风格：自动的传播异常（launch 以及 actor）或者将它们暴露给用户（async 以及 produce）。前者对待异常是不处理的，类似于 Java 的 Thread.uncaughtExceptionHandler，而后者依赖用户来最终消耗异常，比如说，通过 await 或 receive\",\"CoroutineExceptionHandler 仅在预计不会由用户处理的异常上调用，所以在 async 构建器中注册它没有任何效果。\",\"协程内部使用 CancellationException 来进行取消，这个异常会被所有的处理者忽略，所以那些可以被 catch 代码块捕获的异常仅仅应该被用来作为额外调试信息的资源。\",\"如果协程遇到除 CancellationException 以外的异常，它将取消具有该异常的父协程。这种行为不能被覆盖，且它被用来提供一个稳定的协程层次结构来进行结构化并发而无需依赖 CoroutineExceptionHandler 的实现。且当所有的子协程被终止的时候，原本的异常被父协程所处理。\",\"应该将CoroutineExceptionHandler 总是被设置在由 GlobalScope 启动的协程中。将异常处理者设置在 runBlocking 主作用域内启动的协程中是没有意义的，尽管子协程已经设置了异常处理者，但是主协程也总是会被取消的。\",\"异常被抛出后，所有同级的子协程都会被关闭，然后异常传递给父协程，直到异常被处理。\",\"一个协程的多个子协程抛出异常将会发生什么？通常的规则是“第一个异常赢得了胜利“。\"]},\"641\":{\"h\":\"监督\",\"t\":[\"普通的取消 是一种双向机制，在协程的整个层次结构之间传播。\",\"SupervisorJob 它类似于常规的 Job，但他的取消只会向下传播\",\"val supervisor = SupervisorJob()with(CoroutineScope(coroutineContext + supervisor)) { } supervisor取消的话，会取消掉所有子协程\"]},\"642\":{\"h\":\"监督作业\",\"t\":[\"SupervisorJob 可以被用于这些目的。它类似于常规的 Job，唯一的不同是：SupervisorJob 的取消只会向下传播。这是非常容易从示例中观察到的：\"]},\"643\":{\"h\":\"监督作用域\",\"t\":[\"对于作用域的并发，supervisorScope 可以被用来替代 coroutineScope 来实现相同的目的。它只会单向的传播并且当子作业自身执行失败的时候将它们全部取消。它也会在所有的子作业执行结束前等待，就像 coroutineScope 所做的那样。\"]},\"644\":{\"h\":\"监督协程中的异常\",\"t\":[\"常规的作业和监督作业之间的另一个重要区别是异常处理。每一个子作业应该通过异常处理机制处理自身的异常。这种差异来自于子作业的执行失败不会传播给它的父作业的事实。\"]},\"645\":{\"h\":\"协程的线程安全\",\"t\":[\"使用线程安全的数据结构\",\"var counter = AtomicInteger() withContext(Dispatchers.Default) { counter.incrementAndGet() }\",\"以细粒度限制线程\",\"以粗粒度限制线程\",\"2、3 都是保证将对共享变量的操作限制在同一个线程中，从而保证线程安全。\",\"互斥\",\"类似于线程的锁，协程的 Mutex 的 lock 和 unlock 方法可以保证同一时间只有一个协程访问指定代码。Mutex 不会阻塞线程。\",\"Actors\",\"一个 actor 是由协程、被限制并封装到该协程中的状态以及一个与其它协程通信的 通道 组合而成的一个实体。\",\"// 这个函数启动一个新的计数器 actor fun CoroutineScope.counterActor() = actor<CounterMsg> { var counter = 0 // actor 状态 for (msg in channel) { // 即将到来消息的迭代器 when (msg) { is IncCounter -> counter++ is GetCounter -> msg.response.complete(counter) } } } //1.要递增状态时 counter.send(IncCounter) //2.要获取当前状态时 // 发送一条消息以用来从一个 actor 中获取计数值 val response = CompletableDeferred<Int>() counter.send(GetCounter(response)) println(\\\"Counter = ${response.await()}\\\")\",\"CompletableDeferred 通信原语表示未来可知（可传达）的单个值。\",\"在使用时，由于 actor 是一个协程， SendChannel .send() 方法会在通道缓存满的时候挂起调用方，从而最终保证了counter++方法是依次执行的，不会产生并发问题。\",\"actor 在高负载下比锁更有效，因为在这种情况下它总是有工作要做，而且根本不需要切换到不同的上下文。\",\"注意，actor 协程构建器是一个双重的 produce 协程构建器。一个 actor 与它接收消息的通道相关联，而一个 producer 与它发送元素的通道相关联。\"]},\"646\":{\"h\":\"Select 表达式\",\"t\":[\"select 表达式允许我们使用其 onReceive 子句 同时 从两个生产者接收数据：\",\"suspend fun selectFizzBuzz(fizz: ReceiveChannel<String>, buzz: ReceiveChannel<String>) { select<Unit> { // <Unit> 意味着该 select 表达式不返回任何结果 fizz.onReceive { value -> // 这是第一个 select 子句 println(\\\"fizz -> '$value'\\\") } buzz.onReceive { value -> // 这是第二个 select 子句 println(\\\"buzz -> '$value'\\\") } } }\",\"onReceiveOrNull 可以允许为空，这样可以在关闭通道时执行特定操作\",\"onSend 子句 发送消息\",\"fun CoroutineScope.produceNumbers(side: SendChannel<Int>) = produce<Int> { for (num in 1..10) { // 生产从 1 到 10 的 10 个数值 delay(100) // 延迟 100 毫秒 select<Unit> { onSend(num) {} // 发送到主通道 side.onSend(num) {} // 或者发送到 side 通道 } } }\",\"Select 延迟值可以使用 onAwait 子句查询\"]},\"647\":{\"h\":\"参考资料\",\"t\":[\"Kotlin 的独门秘籍 Reified 实化类型参数 (下篇)\",\"Kotlin 协程 中文官网--异步流\"]},\"648\":{\"h\":\"Kotlin 笔记之 Flow\"},\"649\":{\"h\":\"前言\",\"t\":[\"Flow是 Kotlin 协程库中的库，用于异步返回多个值，官方介绍是参考RxJava等响应式流实现的，但是“拥有尽可能简单的设计，对 Kotlin 以及挂起友好且遵从结构化并发”。本文主要参考Flow 中文文档，梳理了学习过程中的要点和理解，以便日后查验。\"]},\"650\":{\"h\":\"正文\",\"t\":[\"对于异步返回多个值的需求，集合（如List等）只能一次性返回多个值，而序列（ Sequence ）只支持阻塞代码，Flow则支持挂起函数异步返回多个值。\"]},\"651\":{\"h\":\"创建 Flow\",\"t\":[\"flow{...}\",\"fun simple(): Flow<Int> = flow<Int> { for (i in 1..3) { delay(100) // 假装我们异步等待了 100 毫秒，也可以用 Thread.sleep() 但是会阻塞当前线程 emit(i) // 发射下一个值 } }\",\".asFlow()\",\"fun simple(): Flow<Int> = (1..10).asFlow()\",\"flowOf{}\",\"fun simple(): Flow<Int> = flowOf(1, 2, 3, 4, 5)\",\"因为流只会在被收集的时候才会被启动（指执行类似flow{...}中的内容），所以上述simple()在被调用时会尽快返回且不等待，所以无需suspend修饰。\"]},\"652\":{\"h\":\"流的收集/末端流操作符\",\"t\":[\"collect{...} 收集emit发送的值\",\"配合onEach{}可以将collect中执行的代码放到onEach中。\",\"collectLatest{...} 收集emit发送的值，但每次新的emit到来时，取消之前的收集器，创建新的收集器（用新的值执行{...}中的代码）\",\"launchIn 指定在单独的协程中启动流的收集，这样就可以立即继续进一步执行代码，不会挂起后面的协程代码。\",\"single() 只接受 flow 发送的一个值，0 个或多个都会报错\",\"first{...} 查找符合条件的第一个值\",\"reduce() 求和\",\"fold(initial,{...}) 在初始值initial的基础上求和\",\"toList、toSet\"]},\"653\":{\"h\":\"过渡流操作符\",\"t\":[\"过渡操作符应用于上游流，并返回下游流。就像流一样。这类操作符本身不是挂起函数。它运行的速度很快，返回新的转换流的定义。\",\"map{}\",\"filter{}\",\"take(n) 限长操作符，只取前 n 个发射的值\"]},\"654\":{\"h\":\"流上下文\",\"t\":[\"流默认运行在收集器提供的上下文中，但是可以通过flowOn 更改：\",\"fun simple(): Flow<Int> = flow { ... }.flowOn(Dispatchers.Default) // 在流构建器中改变消耗 CPU 代码上下文的正确方式\"]},\"655\":{\"h\":\"展平流\",\"t\":[\"将嵌套有Flow的Flow（如Flow<Flow<String>>）展平为单个流（如Flow<String>）。\",\"flatMapConcat 将收集到的流交给{...}处理后，等待内部流处理完毕后，再去请求下一个流\",\"flatMapMerge 先顺序收集所有流，再同时收集结果流\",\"flatMapLatest{...} 类似于collectLatest{...}，在新流发出的时候，立即取消{...}中所有的代码\",\"flattenConcat 依次展平流\",\"flattenMerge{...} 并发拼接，先执行{...}中的方法，再执行collect等方法，顺序会乱。\"]},\"656\":{\"h\":\"异常处理\",\"t\":[\"try/catch\",\"fun simple(): Flow<Int> = flow { for (i in 1..3) { println(\\\"Emitting $i\\\") emit(i) // 发射下一个值 } } fun main() = runBlocking<Unit> { try { simple().collect { value -> println(value) check(value <= 1) { \\\"Collected $value\\\" } } } catch (e: Throwable) { println(\\\"Caught $e\\\") } }\",\"catch()\",\"透明捕获：只捕获上游异常，其之后的异常不会被处理。\",\"simple() .catch { e -> emit(\\\"Caught $e\\\") } // 发射一个异常 .collect { value -> println(value) //此处如有异常，不会被 catch 捕获 }\",\"声明式捕获：将collect的代码移动到onEach中，将其放到catch之前，从而使其被catch捕获。\",\"simple() .onEach { value -> check(value <= 1) { \\\"Collected $value\\\" } //此处异常会被 catch 捕获 println(value) } .catch { e -> println(\\\"Caught $e\\\") } .collect()\"]},\"657\":{\"h\":\"流取消\",\"t\":[\"flow { ... } 创建的流的繁忙循环默认可以取消\",\"其他流如果需要取消，可以添加 .onEach { currentCoroutineContext().ensureActive() } 或者.cancellable()\"]},\"658\":{\"h\":\"流完成\",\"t\":[\"命令式\",\" try { simple().collect { value -> println(value) } } finally { println(\\\"Done\\\") //监听流完成 }\",\"声明式\",\"simple() .onCompletion { println(\\\"Done\\\") } //监听流完成，在 collect 执行结束后才执行 .collect { value -> println(value) }\",\"onCompletion的可空参数 Throwable 可以用于确定流收集是正常完成（为null）还是有异常发生。他不会处理异常。\"]},\"659\":{\"h\":\"其余操作\",\"t\":[\"buffer() 缓冲发射项，收集完成后再传给下一步\",\"conflate() 合并发射项，会丢弃来不及处理的中间值，只获取并处理最新的值\",\"zip() 合并两个流的值，两个流中的值一一对应\",\"例如(1,2,3) 3s发射一次,(a,b,c) 4s发射一次直接拼接，合并之后为 (1a,2b,3c)\",\"combine() 结合两个流的值，任意一个流中的值发生变化都会触发执行计算\",\"例如(1,2,3) 3s发射一次,(a,b,c) 4s发射一次直接拼接，合并之后为 (1a,2a,2b,3b,3c)\"]},\"660\":{\"h\":\"参考文献\",\"t\":[\"Kotlin Flow 中文文档\"]},\"661\":{\"h\":\"Lambda 表达式在 kotlin 中的应用\"},\"662\":{\"h\":\"一个例子\",\"t\":[\"普通写法：\",\"定义一个接口 OnClickListener\",\"interface ClickListener{ fun onClick(view: View) }\",\"定义方法 SetOnClickListener\",\"fun setOnCLickListener(listener: ClickListener){ this.listener = listener; }\",\"定义的方法和 Java 中写法类似，在使用该方法时也类似：\",\"var testInterface = TestInterface() testInterface.setOnCLickListener(object : TestInterface.ClickListener{ override fun onClick(view: View) { TODO(\\\"not implemented\\\") //To change body of created functions use File | Settings | File Templates. } })\",\"lambda 写法：\",\"定义只需要一步：\",\"//在初始化的时初始化 listener class AClass(var listener : (uri:String) -> Unit){...} //或者直接定义这个变量 listener:((uri : String)-> Unit)? = null //在需要用到方法时，listener 的方法，比如 onClickListener(){} listener.invoke(agrs)\",\"使用起来也更加简洁：\",\"var t = TestInterface{ uri: String -> print(uri) }//获取对象的同时初始化 listener\",\"方法最后一个参数是 lambda 表达式时，lambda 表达式的方法{}可以放到()的后面，如果只有这一个参数时，()也可以省略\",\"当方法只有一个参数时，可以省略参数，还用it代替：\",\"testInterface.setNewOnClickListener { print(it) }\",\"甚至更加简洁，如果要执行的方法和 listener 定义的方法返回值类型相同，可以直接引用该方法：\",\"testInterface.setNewOnClickListener(::print)\"]},\"663\":{\"h\":\"lambda\",\"t\":[\"lambda 在 Java8 中引进，可以很好的替代匿名内部类，使代码更加简洁。\",\"lambda 表达式形式如下：\",\"val sum = { x: Int, y: Int -> x + y }\",\"lambda 表达式总是被大括号括着，完整语法形式的参数声明放在大括号内，并有可选的类型标注，函数体跟在一个 -> 符号之后。如果推断出的该 lambda 的返回类型不是 Unit，那么该 lambda 主体中的最后一个（或可能是单个）表达式会视为返回值。\",\"kotlincn.net高阶函数和 lambda 表达式\",\"使用 lambda 的形式如下() -> {},()内是参数，{}是函数具体的行为。\",\"//Java 8 方式： new Thread( () -> System.out.println(\\\"In Java8, Lambda expression rocks !!\\\") ).start();\",\"这个例子来自 importNew.com,Java8 lambda 表达式 10 个示例\"]},\"664\":{\"h\":\"小知识点\",\"t\":[\"xx.map()\",\"凡是可迭代的数据都可以使用map()函数\",\"var args: Array<String> = arrayOf() args.map { print(it) }\",\"还可以更简洁：\",\"args.map(::print) //::print 表示引用该方法\",\"xx.flatMap()\",\"返回可迭代的数组，可以和xx.map()一起使用\",\"args.flatMap { it.split(\\\" \\\") //把字符串按照\\\" \\\"切割 }.map{ print(\\\"${it.toUpperCase()}\\\") }\"]},\"665\":{\"h\":\"LeetCode 笔记--重建二叉树\",\"t\":[\"二叉树的遍历根据根节点与左右子节点的遍历顺序的不同分为三种：\",\"前序遍历\",\"根左右：先遍历根节点，再左子树，再右子树（先从根节点开始，记录左节点直到没有）\",\"第一个为根节点\",\"中序遍历\",\"左根右：先左子树，再根子树，再右子树（从树的最左边的节点开始遍历）\",\"后序遍历\",\"左右根：先左子树，后右子树，再根节点\",\"最后一个为根节点\",\"在遍历的时候，当父节点只有一个子节点时，依然要遵循以上三种遍历的先后顺序（没有该子节点则不写内容），以保证某一侧的子树（“左边的子树”或“右边的子树”）所有节点都被完全遍历，之后才可以根据遍历的规则切换到下一子树。\",\"如如下子树：\",\" G / \\\\ D M / \\\\ / \\\\ A F H Z / E\",\"前序遍历：GDAFEMHZ\",\"中序遍历：ADEFGHMZ\",\"后续遍历：AEFDHZMG\"]},\"666\":{\"h\":\"常见应用\",\"t\":[\"一般都是给定中序排序，再加上一个前序排序、后续排序来逆向生成二叉树。\",\"根据之前的知识，此类题的解答思路一般为：\",\"先根据前序排序、后续排序的特点，找到根节点，之后再根据找到的根节点将中序排序分为左、右子树两个部分。这样循环直到整个树的每个节点都被遍历完毕，完整的二叉树也会被建立起来。\",\"我们以下面这个二叉树为例：\",\" 1 / \\\\ 2 3 / \\\\ 4 5\",\"使用代码表示如下：\",\"fun main() { val preorder = intArrayOf(1,2,3,4,5)//前序遍历 val inorder = intArrayOf(2,1,4,3,5)//中序遍历 val tree = buildTree(preorder, inorder) print(tree) } fun buildTree(preorder: IntArray, inorder: IntArray): TreeNode? { var tree : TreeNode? = null if (preorder.isNotEmpty()) { val root = preorder[0]//获取根节点 val indexOfRoot = inorder.indexOf(root)//获取中序排序中根节点的坐标 tree = TreeNode(root) //根据根节点坐标，将二叉树分为左、右两个子树 val leftTree = inorder.copyOfRange(0, indexOfRoot) val rightTree = inorder.copyOfRange(indexOfRoot + 1, inorder.size) //将前序排序也分为左右两个子树的前序排序 val leftPreOrder = preorder.copyOfRange(1, preorder.size).filter { leftTree.contains(it) }.toIntArray() val rightPreOrder = preorder.copyOfRange(1, preorder.size).filter { rightTree.contains(it) }.toIntArray() //再次分别循环分析左右两个子树的结构 tree.left = buildTree(leftPreOrder, leftTree) tree.right = buildTree(rightPreOrder, rightTree) } return tree } class TreeNode(var `val`: Int) { var left: TreeNode? = null var right: TreeNode? = null }\"]},\"667\":{\"h\":\"参考资料\",\"t\":[\"https://www.jianshu.com/p/9e8922486154\",\"【直观算法】二叉树遍历算法总结\",\"知道中序和后序遍历，画二叉树和写出前序遍历 \",\"leetcode-重建二叉树\"]},\"668\":{\"h\":\"Linux下配置Git，使用AndroidStudio同步工程到Github\",\"t\":[\"这篇文章介绍了如何在 linux 环境下安装和配置 git 与 github ，并且使用 Android Studio 将本地的项目同步到 github 上面。\"]},\"669\":{\"h\":\"安装 git\",\"t\":[\"sudo apt-gat install git\"]},\"670\":{\"h\":\"配置 git 和 github\",\"t\":[\"创建 Github 账号\",\"生成 ssh key\",\"ssh-keygen -t rsa -C \\\"your_email@youremail.com\",\"在 github 上面添加 ssh key\",\"进入 Account Settings –> SSH Keys –> Add SSH Key 添加 SSH Keys ： 名字起一个容易识别的名字，key 是生成的 /home/username/.ssh/id_rsa.pub. 中的内容，直接粘贴到指定位置就行\",\"测试 ssh key 是否成功\",\"ssh -T git@github.com\",\"提示如You’ve successfully authenticated, but GitHub does not provide shell access则说明成功连接 github\",\"配置 Github\",\"git config --global user.name \\\"your name\\\" //配置用户名 git config --global user.email \\\"your email\\\" //配置email\"]},\"671\":{\"h\":\"用 Android Studio 同步工程到 Github\",\"t\":[\"启动 android studio\",\"进入android studio/bin，终端输入./studio.sh\",\"选择 VCS ---> Import into Version Control --> Share Project on Github\",\"第一次进入会要求输入 github 的账号和密码 按照要求输入即可 此后还会要求你输入一个本地密码，当下次同步的时候需要输入 之后就进入到选择同步的仓库，新建一个仓库，开始同步就可以了\",\"到这里就顺利的在 Android Studio 上面将工程同步到 Github 上面了\",\"以下为原文提到的其他方法，摘录如下，以备后用：\"]},\"672\":{\"h\":\"利用 Git 从本地上传到 GitHub\",\"t\":[\"第一步： 进入要所要上传文件的目录\",\"输入命令 git init\",\"第二步： 创建一个本地仓库 origin\",\"使用命令\",\"git remote add origin git@github.com:yourName/yourRepo.git\",\"youname是你的 GitHub 的用户名，yourRepo是你要上传到 GitHub 的仓库\",\"第三步： 比如你要添加一个文件 xxx 到本地仓库，使用命令 git add xxx，可以使用 git add . 自动判断添加哪些文件\",\"然后把这个添加提交到本地的仓库，使用命令 git commit -m说明这次的提交\",\"最后把本地仓库 origin 提交到远程的 GitHub 仓库，使用命令 git push origin master\"]},\"673\":{\"h\":\"从 GitHub 克隆项目到本地\",\"t\":[\"第一步： 到 GitHub 的某个仓库，然后复制右边的有个HTTPS clone url\",\"第二步： 回到要存放的目录下，使用命令 git clone https://github.com/chenguolin/scrapy.git，这里的 url 只是一个例子\",\"第三步： 如果本地的版本不是最新的，可以使用命令 git fetch origin，origin 是本地仓库\",\"第四步： 把更新的内容合并到本地分支，可以使用命令 git merge origin/master\",\"如果你不想手动去合并，那么你可以使用：git pull <本地仓库> master // 这个命令可以拉去最新版本并自动合并\"]},\"674\":{\"h\":\"GitHub 的分支管理\",\"t\":[\"创建\",\"1 创建一个本地分支： git branch <新分支名字>\",\"2 将本地分支同步到 GitHub 上面： git push <本地仓库名> <新分支名>\",\"3 切换到新建立的分支： git checkout <新分支名>\",\"4 为你的分支加入一个新的远程端： git remote add <远程端名字> <地址>\",\"5 查看当前仓库有几个分支: git branch\",\"删除\",\"1 从本地删除一个分支： git branch -d <分支名称>\",\"2 同步到 GitHub 上面删除这个分支： git push <本地仓库名> :<GitHub端分支>\"]},\"675\":{\"h\":\"说明\",\"t\":[\"这篇文章是我今天在 linux 下安装 git ，上传工程到 github 上面时的步骤的总结，大部分内容都参考/摘录自下面这篇文章，感谢原作者的分享，原文信息及链接如下：\",\"Linux 下 Git 和 GitHub 使用方法总结 [日期：2014-03-07] 来源：Linux 社区 作者：chenguolinhttp://www.linuxidc.com/Linux/2014-03/97821.htm\"]},\"676\":{\"h\":\"Linux 下配置 JDK 和 AndroidStudio 开发环境\"},\"677\":{\"h\":\"下载 JDK 并解压\",\"t\":[\"到官网下载 jdk\",\"下载到的 JDK 文件解压\"]},\"678\":{\"h\":\"设置环境变量\",\"t\":[\"管理员权限进入 etc/environment 写入以下代码\",\"JAVA_HOME=\\\"JDK主目录的绝对路径\\\"\"]},\"679\":{\"h\":\"配置 alternatives\",\"t\":[\"打开终端执行以下命令：\",\"sudo update-alternatives --install /usr/bin/java java JDK主目录的绝对路径/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac JDK主目录的绝对路径/bin/javac 300\",\"到这里 JDK 的环境就配置好了\"]},\"680\":{\"h\":\"运行 Android Studio\",\"t\":[\"进入 android studio/bin 目录下，打开终端，\",\"输入 ./studio.sh\",\"到这里，就可以正常运行 android studio 了\"]},\"681\":{\"h\":\"Linux常用命令\"},\"682\":{\"h\":\"复制，删除，移动\",\"t\":[\"cp拷贝，rm删除，mv移动。\",\"-r表示递归 -f强制，无提示\",\"cp [-r] fromFilePath toFilePath rm [-r] fromFilePath toFilePath mv [-r] fromFilePath toFilePath\"]},\"683\":{\"h\":\"切换目录\",\"t\":[\"cd - 返回上次所在目录 cd ~ 切换到当前用户home路径下 cd . 当前路径 cd .. 上层路径 cd ../linux 切换到同一级的linux目录\"]},\"684\":{\"h\":\"新建文件、文件夹\",\"t\":[\"mkdir dirName 创建文件夹 touch fileName 创建文件\",\"Linux 文件和目录名字除了“/”都合法，但是尽量不要用正则表达式之类的符号，因为有可能会在进行正则匹配时造成误删等问题\",\"假设当前目录有文件f1,f2,f3和f[123] 执行：rm f[123]本来是希望删除f[123],但是由于正则匹配，会先删除f1,f2,f3这三个文件。\"]},\"685\":{\"h\":\"查看文件信息\",\"t\":[\"file fileName 查看文件格式信息 cat fileName 以文本格式查看文件全部内容 less fileName 以分页形式查看文件内容，Q键退出\"]},\"686\":{\"h\":\"常用目录\",\"t\":[\"/home 当前用户主目录，root用户为/root /bin、/usr/bin 常用的可执行文件，root用户为/sbin /media、/mnt 用户硬件挂载点 /etc 系统的配置文件，所有用户可见，root用户可以更改 /boot 系统内核，开机必备文件 /dev 系统的所有设备文件，如硬盘、光驱等 /var和/srv 系统运行时的用户数据 /proc 内存中的状态信息 /lib、/usr/lib、/usr/local/lib 库文件 /temp 临时文件，所有用户可见 /usr 程序相关文件unix system resource\"]},\"687\":{\"h\":\"文件相关\"},\"688\":{\"h\":\"ls\",\"t\":[\"ls 展示当前目录下文件信息：\",\"ls [-alhd] l\",\"l展示目录下的文件列表，a 展示所有文件（包括隐藏文件）， h 展示带单位的文件大小， d展示当前目录本身信息\"]},\"689\":{\"h\":\"chmod\",\"t\":[\"chmod 更改权限\",\"chmod [-R] mode fileName\",\"mode组成如下：[范围] [操作] [权限]\",\"范围：u用户、g群组、o其他、a以上所有（ugo）\",\"操作：+ 增加、- 减去、= 等于\",\"权限：r 读权限4、 w 写权限2、 x 执行权限1 、无权限 0\",\"权限验证 ： root 用户可以访问任何用户文件，不受权限限制；普通用户需要验证权限\",\"要读取文件夹中的内容，也需要执行权限x\"]},\"690\":{\"h\":\"文件权限与 umask\",\"t\":[\"Linux 创建新项目时默认的权限分别是：\",\"文件夹 777 文件 666\",\"但是，经过 umask（此处为 0022）遮盖后，变成了 755 ，644，这才是真正创建后的结果\",\"可以通过umask查看umask 的值，一般只去其后 3 位，遮盖的原则是从原先的权限中减去umask 中的权限：\",\"原始权限 ： r w x 7 umask ： - w x 3 结 果 ： r - - 4\"]},\"691\":{\"h\":\"查看、管理当前用户信息\",\"t\":[\"users 和whoami输出当前用户名\",\"增、删、改用户：\",\"useradd / userdel / usermod username group群组管理也类似 groupadd / groupmod ...\",\"其中userdel -r username在删除用户时，也会删除用户对应的主目录home\",\"groups 查看用户所在群组，其中第一个是主要群组，其余是次要群组。\",\"主要群组 在用户创建新的文件时，文件群组权限一项默认为该群组\",\"who 、w可以查看用户相关信息\",\"id 查看某人或者自己相关的UID、GID\",\"finger [-s] username 查看用户相关信息 -s 仅显示用户账号、全名、登录时间\",\"GID 系统 <500 ，用户 >500\"]},\"692\":{\"h\":\"改密码\",\"t\":[\"passwd username\"]},\"693\":{\"h\":\"文件打包、压缩和解压缩\",\"t\":[\".gz 压缩后格式，.tar 打包后格式，tar.gz先打包后压缩的格式（常用）\"]},\"694\":{\"h\":\"gzip\",\"t\":[\"gzip 压缩会删除源文件,\",\"gzip [-cdtv#] filename\",\"# 压缩等级\",\"v 显示压缩前后压缩比\",\"t 校验是否是 gzip 压缩的文件\",\"c 压缩文件并输出到屏幕\",\"d 解压文件\",\"使用:\",\"gizp file 将file压缩成file.gz，会删除file gzip -c file > file.gz 压缩文件file并输出到file.gz\"]},\"695\":{\"h\":\"tar\",\"t\":[\"打包，在压缩文件夹时，一般为了效率都会先打包，在压缩，由此形成的格式一般是类似*.tar.gz*的后缀。\",\"打包 tar [-jcv] -f outFileName.tar inDirPath 解包 tar [-jxv] -f inFileName.tar -C outputPath\",\"c 建立打包文档\",\"x 解包 -C 输出目录\",\"t 查看打包文件的内容\",\"j / z 使用bz2 / gzip 压缩、解压\",\"v 输出信息\",\"f 后面紧跟要操作的文件\"]},\"696\":{\"h\":\"bash shell\",\"t\":[\"bash 是用户和内容交互的桥梁 用户 ↔ bash ↔ Unix内核\",\"env 查看环境变量\",\"type 查看类型\",\"which 查看指令的位置\",\"clear 、 cls 清屏\",\"bash shell 设置\"]},\"697\":{\"h\":\"自定义变量\",\"t\":[\"key=value 增加一个值为value的变量key\",\"其中，如果 value 有空格的话需要用引号包住：\",\"双引号 可以用$KEY 引用其他KEY的值 单引号 内容是纯文本\",\"echo $KEY​ 可以输出KEY的值\",\"set 查看所有变量\",\"set | grep HIST 查看shell命令历史 set | grep PSI 提示符前面的内容，username-MBP:dirpath username$\"]},\"698\":{\"h\":\"别名配置\",\"t\":[\"alias 查看所有别名\",\"alias newCmd=oldCmd使用newCmd表示oldCmd\",\"unalias newCmd 删除别名\",\"如:alias cls=clear,执行cls就等于执行clear\"]},\"699\":{\"h\":\"环境变量\",\"t\":[\"export KEY=VALUE 将值为VALUE的KEY添加到环境变量（本次 shell 有效）\",\"此外还可以写到一些文件中，在开机、登录、注销登录时调用执行——自动执行脚本**shell startup scripts**\"]},\"700\":{\"h\":\"shell startup scripts\",\"t\":[\"开机时执行：\",\"/etc/profile\",\"/ect/profile.d/*.sh\",\"~/.bash_profile , ~/.bash_login , ~/.profile这三个只要其中一个成功执行了，后面的就不会执行，~/.bash_profile会执行~/.bashrc\",\"/etc/.bashrc\",\"未登录时会执行：\",\"~/.bashrc\",\"/etc/bashrc\",\"/etc/profile.d/*.sh\",\"注销时执行~/bash_logout\",\"在修改了以上文件后，可以使用source path_to_file或者重新登录使其立即生效\"]},\"701\":{\"h\":\"标准输入输出等\",\"t\":[\"代码编号\",\"名称\",\"代码\",\"作用对象\",\"0\",\"标准输入\",\"stdin\",\"键盘等\",\"1\",\"标准输出\",\"stdout\",\"屏幕等\",\"2\",\"标准错误\",\"stderr\",\"屏幕等\",\"定向\",\"<和<< 输入和 追加输入\",\"> 和>> 输出 和追加输出\",\"使用：ls -al | >> result.txt将ls的内容追加输出到result.txt文件中。\",\"|叫做管道，可以将前者的标准输出当做后者的输入。\",\"cmd0 && cmd1 前者执行成功才会执行后者；\",\"cmd0 || cmd1 前者执行失败才会执行后者。\"]},\"702\":{\"h\":\"grep\",\"t\":[\"查询内容\",\"grep [-cinv] 'key' filename\",\"c 计算次数\",\"i 忽略大小写\",\"n 行号\",\"v 显示没有该字符的行号\",\"'key' 可以是正则表达式\",\"--color=auto 对查找到的文本显示颜色\"]},\"703\":{\"h\":\"sort\",\"t\":[\"排序，默认以第一列排序\",\"sort [-fbknrtu] filename\",\"f 忽略大小写\",\"b忽略最前面的空格（要是排序不生效时可以试一下，推荐）\",\"k 以第几列为标准排序，默认第一列\",\"n 以数组排序\",\"r 逆序\",\"t 待排序的文件的分隔符，默认是 tab\",\"M 以英文月份排序\"]},\"704\":{\"h\":\"wc\",\"t\":[\"统计字符数\",\"wc [lwm] filename\",\"l 行\",\"w 词\",\"m 字符\"]},\"705\":{\"c\":[\"linux\"]},\"706\":{\"h\":\"OKHttpUtils 分析\"},\"707\":{\"h\":\"前言\",\"t\":[\"本文是对张鸿洋的 OKHttp 辅助类okhttputils简要分析，以便学习如何封装常见工具的思想，建议配合源码食用。\",\"主要涉及类：\",\"OkHttpUtils\",\"OkHttpRequestBuilder\",\"OkHttpRequest\",\"RequestCall\",\"Callback\"]},\"708\":{\"h\":\"基础\",\"t\":[\"OkHttp是可以用于 Android 和 Java 的 Http 框架，经典的使用分为 3 步：\",\"//1. 创建一个 OkHttpClient 客户端，在这里配置网络超时等全局配置 OkHttpClient okHttpClient = new OkHttpClient(); //2. 创建一个网络请求，每个 Http 访问对应一个 Request，详细配置了访问的 URL，类型，参数等信息 Request request = new Request .Builder() .url(\\\"https://www.baidu.com\\\") .build(); //3. 使用 OkHttpClient 客户端创建 Call 并执行该网络请求，分为阻塞和异步两种方式，异步会有对应回调 okHttpClient.newCall(request) .enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { } @Override public void onResponse(Call call, Response response) throws IOException { } });\",\"虽然整体的逻辑已经很简单了，但是在实际使用的时候，不可能对每个网络请求都写一次上述代码，所以就需要对齐进行必要的封装以简化网络请求流程。\",\"okhttputils 就做到了这一点，并且将上述第二步常见网络请求的过程也加入链式调用中，使用起来更加连贯：\",\"//1. 全局配置唯一的 OkHttpClient OkHttpClient okHttpClient = new OkHttpClient.Builder() .connectTimeout(10000L, TimeUnit.MILLISECONDS) .readTimeout(10000L, TimeUnit.MILLISECONDS) .build(); OkHttpUtils.initClient(okHttpClient); //2.在需要网络请求的时候，执行对应代码 OkHttpUtils.get() .url(\\\"http://www.baidu.com\\\") .build() .execute(new com.zhy.http.okhttp.callback.Callback() { //回调方法 });\",\"其中9~10行相当于 OKHttp 步骤 2 创建网络请求，11~14则就是步骤 3 执行网络请求的过程。\",\"每次使用网络请求时只需要选择get、post等方法获取并配置相应builder，然后选择execute执行即可。\"]},\"709\":{\"h\":\"实现分析\",\"t\":[\"那么 okhttputils 是如何实现这一点的呢？\",\"首先看看OkHttpUtils的结构：\",\"可以看到大体上可以将其分为 3 个部分：\",\"OkHttpClient 相关\",\"网络请求相关信息\",\"与具体执行网络请求有关的方法\"]},\"710\":{\"h\":\"OkHttpClient 相关\",\"t\":[\"我们先来看第一部分，OkHttpUtils 本质上只是对 OkHttpClient 的方法进行了一次封装，所以其肯定要持有 OkHttpClient 对象，一般来说一个 APP 只需要一个 OkHttpClient 对象即可，所以可以看到 OkHttpUtils 做了双重锁定的单例处理：\",\"public static OkHttpUtils initClient(OkHttpClient okHttpClient) { if (mInstance == null) { synchronized (OkHttpUtils.class) { if (mInstance == null) { mInstance = new OkHttpUtils(okHttpClient); } } } return mInstance; }\",\"这样我们在第一次使用OkHttpUtils的时候初始化的OkHttpClient便会被保存到这里，之后的使用中就不需要再去反复创建了。\",\"此外在OkHttpUtils的结构中可以注意到有一个mPlatform的变量，他会根据当前是 Android 还是其他平台的不同被初始化为 Android 主线程或者普通线程池，这个我们在后面回调网络请求状态的时候会用到。\",\"private Platform mPlatform = findPlatform(); private static Platform findPlatform() { try { Class.forName(\\\"android.os.Build\\\"); if (Build.VERSION.SDK_INT != 0) { return new Android(); } } catch (ClassNotFoundException ignored) { } return new Platform(); }\"]},\"711\":{\"h\":\"网络请求相关信息\",\"t\":[\"有了OkHttpClient对象之后，下一步便是创建一个适当的网络请求。\",\"在OkHttpUtils中使用的是OkHttpRequestBuilder <T extends OkHttpRequestBuilder>的子类来收集、配置相关的一些属性。\",\"在该类中，定义了一系列网络请求基本的参数：\",\"protected String url; protected Object tag; protected Map<String, String> headers; protected Map<String, String> params; protected int id;\",\"此外还有一个抽象方法，用来创建执行网络请求的RequestCall。\",\"public abstract RequestCall build();\",\"这个方法在其子类中的实现一般是调用OkHttpRequest子类的build方法，可以看到OkHttpRequestBuilder只是将网络请求的相关参数传递到OkHttpRequest中。\",\"//com.zhy.http.okhttp.builder.GetBuilder @Override public RequestCall build() { if (params != null) { url = appendParams(url, params); } return new GetRequest(url, tag, params, headers,id).build(); }\",\"在OkHttpRequest中，利用上述的参数可以并通过generateRequest(Callback callback)方法创建Request。\",\"//com.zhy.http.okhttp.request.OkHttpRequest protected OkHttpRequest(String url, Object tag, Map<String, String> params, Map<String, String> headers,int id) { this.url = url; this.tag = tag; this.params = params; this.headers = headers; this.id = id ; if (url == null) { Exceptions.illegalArgument(\\\"url can not be null.\\\"); } initBuilder();//初始化 okhttp3.Request.Builder 用于生成 Request } public Request generateRequest(Callback callback) { RequestBody requestBody = buildRequestBody(); RequestBody wrappedRequestBody = wrapRequestBody(requestBody, callback);//用于更新下载进度等，为 okhttp3.Callback 增加更多功能 Request request = buildRequest(wrappedRequestBody);//在子类中使用 okhttp3.Request.Builder 对象生成对应的 Request return request; }\",\"这里的抽象方法wrapRequestBody()，buildRequest()的实现，也是OkHttpRequest各个子类主要的不同点。\",\"Callback是在okhttp3.Callback的基础上增加了 before，progress 和对请求结果的处理等的回调。\",\"OkHttpRequest类的build方法则只是将其自身传递给okhttp3.Call的封装类RequestCall，创建并返回该类的对象：\",\"//com.zhy.http.okhttp.request.OkHttpRequest public RequestCall build() { return new RequestCall(this); }\"]},\"712\":{\"h\":\"执行网络请求\",\"t\":[\"RequestCall类则是对okhttp3.Call类的进一步封装，对外提供更多的接口：开始、取消网络请求cancel(),readTimeOut()…等接口。\",\"当执行RequestCall的execute方法时：\",\"//com.zhy.http.okhttp.request.RequestCall public void execute(Callback callback) { buildCall(callback);//创建 okhttp3.Call 对象，其所用的 Request 对象来自于 okHttpRequest.generateRequest(callback) if (callback != null) { callback.onBefore(request, getOkHttpRequest().getId()); } OkHttpUtils.getInstance().execute(this, callback); }\",\"可以看其最后只是将RequestCall和callback传递给了OkHttpUtils类的execute方法，也就是说，最终还是调用了okhttp3.Call的enqueue()方法，在这里执行了真正的网络请求：\",\"//com.zhy.http.okhttp.OkHttpUtils public void execute(final RequestCall requestCall, Callback callback) { if (callback == null) callback = Callback.CALLBACK_DEFAULT; final Callback finalCallback = callback; final int id = requestCall.getOkHttpRequest().getId(); requestCall.getCall().enqueue(new okhttp3.Callback() { @Override public void onFailure(Call call, final IOException e) { sendFailResultCallback(call, e, finalCallback, id); } @Override public void onResponse(final Call call, final Response response) { try { if (call.isCanceled()) { sendFailResultCallback(call, new IOException(\\\"Canceled!\\\"), finalCallback, id); return; } if (!finalCallback.validateReponse(response, id)) { sendFailResultCallback(call, new IOException(\\\"request failed , reponse's code is : \\\" + response.code()), finalCallback, id); return; } Object o = finalCallback.parseNetworkResponse(response, id); sendSuccessResultCallback(o, finalCallback, id); } catch (Exception e) { sendFailResultCallback(call, e, finalCallback, id); } finally { if (response.body() != null) response.body().close(); } } }); }\",\"而网络请求的回调，则是在本文最开始的mPlatform提供的线程中进行。这样保证了在 Android 中，onBefore、onAfter、inProgress等回调能够在 UI 线程进行。\",\"public void sendSuccessResultCallback(final Object object, final Callback callback, final int id) { if (callback == null) return; mPlatform.execute(new Runnable() { @Override public void run() { callback.onResponse(object, id); callback.onAfter(id); } }); }\"]},\"713\":{\"h\":\"总结\",\"t\":[\"在本文中，okhttputils将初始化OkHttpClient的动作提取出来，这样同一个应用只需要在最开始的时候配置一下诸如网络超时、cookie 等既可。\",\"在具体的实现中，通过OkHttpRequestBuilder收集网络请求的属性并传递给OkHttpRequest，在其子类中按照不同的需要实现生成Request的方法。\",\"OkHttpRequestBuilder的build()方法会生成RequestCall对象，RequestCall对象的execute()方法会调用OkHttpRequestBuilder对象的generateRequest()方法产生Request，并据此产生Call对象，最后通过该Call对象的 enqueue 方法执行网络请求。\"]},\"714\":{\"c\":[\"android\"]},\"715\":{\"h\":\"Python 自动创建发布 hexo 文章并同步 github\"},\"716\":{\"h\":\"简介\",\"t\":[\"环境 linux(deepin)\",\"python 2.7\",\"这是一个 Python 脚本，用于实现 hexo 文章创建、生成网页并预览、发布到对应 xxx.github.io 博客的全过程。\"]},\"717\":{\"h\":\"使用方法\"},\"718\":{\"h\":\"的一下变量：\",\"t\":[\"hexo_url = 'your_path/hexo/blog'\",\"【必需】本地 hexo 博客路径\",\"hexo_public_dir = 'your_path/hexo/blog/public'\",\"【必需】本地 hexo 博客输出路径\",\"hexo_post_dir = 'your_path/hexo/blog/source/_posts'\",\"【可选】本地 hexo 博客文章源文件路径\",\"git_dir = 'your_path/xxx.github.io'\",\"【必需】博客要同步的 git 工程路径\",\"git_backup_dir = 'your_path/xxx.github.io/blog/backup/sources/_posts'\",\"【可选】本路径用于备份 post 源文件到 github\",\"hexo.py 中的post()方法中webbrowser.open('http://jixiaoyong.github.io/blog/')中的博客地址，发布完后默认打开该网页。（后期也可以改为post()参数传入，这样只需要更改main.py就行）\"]},\"719\":{\"h\":\"运行 文件\",\"t\":[\"在 Linux 命令行输入如下命令，并回车，根据提示操作即可。\",\"python main.py\",\"​ Windows 下可以运行start.cmd脚本（待实现）\",\"//start.cmd脚本内容 python main.py cmd\",\"操作过程提示及说明如下：（渣英语请忽略...）\",\"input yout file name 输入要发布的文章名称 xxx（当前版本暂不支持中文）\",\"输入回车会自动创建 xxx.md 文件并打开（需要系统支持该格式）\",\"are you finish your post 输入 y 或 n，选择是否用 hexo 编译文章\",\"y:编译文章 n:不编译文章，退出命令行\",\"post or not 输入 y 或 n，选择是否发布文章到网站，可以在打开的页面预览后做决定\",\"y:发布文章 n:不发布文章，退出命令行\",\"update post《xxx》提示开始发布文章，自动打开网页，并保存源文件\"]},\"720\":{\"h\":\"源代码\",\"t\":[\"源代码已经上传github\"]},\"721\":{\"h\":\"后期计划\",\"t\":[\"增加文件名中文支持\",\"增加图片自动上传、替换为 github 链接(2018/2/2 已实现)\"]},\"722\":{\"h\":\"Python 入门知识\",\"t\":[\"基于 Python3.x\",\"Python 文件默认格式.py\",\"首行默认以下命令：\",\"#!/usr/bin/python # -*- coding: UTF-8 -*-\"]},\"723\":{\"h\":\"数据类型\",\"t\":[\"数字\",\"整数 int 1，2，3\",\"长整数 long 1112L\",\"浮点数 float（小数）1.23，3.14\",\"复数 complex 3.14j\",\"字符串\",\"'abc'，\\\"abc\\\"，'''abc‘’‘\",\"'x'和\\\"x\\\" 区别不大\",\"'''abc‘’‘文本可以跨行\",\"字符串前面加 r 或者 R 表示字符串内部不需要转义，否则要用\\\\ 转义\",\"支持a[0]取值\",\"布尔值\",\"True 和False\",\"布尔值可以用and、or和not运算\",\"空值\",\"None\",\"变量\",\"命名规则：开头aA_，其后可以包含aA_1\",\"常量\",\"不能变的变量\"]},\"724\":{\"h\":\"集合\",\"t\":[\"列表 list\",\"[1,2,3,3]\",\"插入 list.insert(1,'vaule')\",\"删除 list.pop() / list.pop(1)\",\"**元组 tuple **\",\"(1,2,3,3)\",\"与列表类似，但是一旦初始化就不能再修改\",\"字典 dict\",\"键值对，读取快，相当于 java 的 map\",\"set\",\"set([1,2,3])\",\"键的集合，不能有重复的，相当于 java 的 set\"]},\"725\":{\"h\":\"逻辑语句\",\"t\":[\"if ... : ... elif ... : ... else : ...\",\"for x in xs : ...\",\"while x : ...\"]},\"726\":{\"h\":\"自定义函数\",\"t\":[\"def fun(n) return n\",\"return\",\"可以没有 return，默认返回 None\",\"可以 return 多个值，实际上返回的是一个 tuple\",\"pass\",\"不想执行任何语句，但是为了符合语法规范，可以用 pass 当做占位符\",\"def fun() pass\",\"抛出异常\",\"raise TypeError('an error')\",\"其中 TypeError 需要继承自error或者Exception\",\"参数\",\"位置参数\",\"def fun(arg) pass\",\"默认参数\",\"def fun(arg0,arg1 = 1) pass\",\"注意 默认参数必须是参数中后面的几位；默认值必须不可变，如 int，string 等\",\"可变参数\",\"def fun(arg,*args) pass\",\"*args 表示参数个数可变，可以输入 list/tuple 等，或者依次输入多个参数，用逗号分隔\",\"关键词参数\",\"def fun(arg,**keywords) if 'city' in kw: pass\",\"**keywords 表示接受关键词作为参数传入，可以传入 dict，或者依次输入多个关键词参数\",\"命名关键词参数\",\"def fun0(args,*，name,age) pass def fun1(arg.*args,name,age)#如果命名关键词前面有可变参数，则不用*分隔 pass\",\"限制输入的关键字，限制只有 name 和 age 作为关键词参数\"]},\"727\":{\"h\":\"使用其他文件的函数\",\"t\":[\"#使用时 sys.fun() import sys #使用时直接 fun() from xxFile import fun form sys import * form sys import fun\"]},\"728\":{\"h\":\"类\",\"t\":[\"定义类\",\"class AClass(object): '''doc for AClass you can use this by AClass.__doc__''' def __init__(self): #默认的初始化方法 pass def aFun(self): pass #创建类对象 a = AClass() #调用方法 a.aFun()\",\"所有的类方法必须至少有一个参数，推荐命名为 self，系统会自动传入类对象，无需手动传入。\",\"继承\",\"class Father(object): def __init__(self): print(\\\"father\\\") def say(self): print(\\\"i am f\\\") class Child(Father): def __init__(self): #子类方法不会自己调用父类方法，需要手动调用 super(Child,self).__init__() #调用父类方法 2： #Father.__init__(self) print(\\\"child\\\") def say(self): print('i am c') def go(self,where): print('go to %s'%where) c = Child() #father child c.say() #i am c c.go('home') #go ro home\",\"子类继承父类，则需要在子类定义时传入父类\",\"子类如果有与父类同名方法，则优先调用子类方法，除非子类特别调用父类的方法\"]},\"729\":{\"h\":\"Python 爬取 gityuan 所有文章列表\"},\"730\":{\"h\":\"简介\",\"t\":[\"更新内容：\",\"爬取 gityuan.com 网站所有文章列表并输出 json\",\"汇总信息输出 config.json 为后面的客户端做准备\",\"更新文件：\",\"spider_main.py\",\"html_output.py\",\"gityuan_urls.py\",\"html_downloader.py\"]},\"731\":{\"h\":\"代码\",\"t\":[\"spider_main.py\",\"作为入口类，主要增加了初始化所有 URL，以及便利这些 URL 的功能。\",\"sp = SpiderMain() gityuan = gityuan_urls.GitYuanUrls() gityuan_urls = gityuan.get_urls(17) file_name = 'gityuan_page_' sp.craw(gityuan_urls,file_name)\",\"其craw()方法修改如下：\",\"from time import sleep def craw(self, root_urls, file_name): #将所有有效链接全部加入 self.urls.add_new_urls(root_urls) i = 0 #循环遍历这些链接 while self.urls.has_next(): i = i + 1 new_url = self.urls.get_new_url() html_cont = self.downloader.download(new_url) new_url, new_data = self.parser.parse(new_url, html_cont) self.output.collect_data(new_data) new_file_name = file_name + ('%d.json'%i) self.output.output_html(new_file_name) #等待 3s，防止太频繁访问被识别 sleep(3) #结束遍历，输出汇总信息 self.output.end(file_name,root_urls[0],i)\",\"html_output.py\",\"主要改动如下：\",\"output_html(self,file_name)方法增加一个file_name的参数，并在内部调用self.mkdir()方法生成 output 目录，方便同时输出多个文档\",\"mkdir()方法，创建文件\",\"end(self,file_name_start, url, num)方法，输出汇总文档，代码如下\",\" def end(self,file_name_start, url, num): self.mkdir() file_name = self.output_dir + 'config.json' file_out = open(file_name,'w') current_time = time.time() config_str = ('{\\\"url\\\":\\\"%s\\\",\\\"total\\\":\\\"%d\\\",\\\"update_time\\\":\\\"%d\\\",\\\"file_name\\\":\\\"%s\\\"}' % (url,num,current_time,file_name_start)) file_out.write(config_str)\",\"gityuan_urls.py\",\"主要代码如下，通过循环遍历获取所有文章列表信息\",\"class GitYuanUrls(object): \\\"\\\"\\\"docstring for GitYuanUrls\\\"\\\"\\\" def get_urls(self, num): urls = [] urls.append('http://www.gityuan.com') for x in xrange(1,num): url_ = ('http://www.gityuan.com/page%d/'%x) urls.append(url_) return urls\",\"html_downloader.py\",\"就在本文编辑的过程中，爬虫被识别，并且限制访问文件数量，所以对下载功能做了简单的伪装、增加超时处理。\",\"def download2(self, url): #升级版 if url is None: return None #伪装为浏览器 req_header = {'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36'} try: request = urllib2.Request(url,None,req_header) response = urllib2.urlopen(request,None,300) return response.read() except socket.timeout as e: #超时处理 print(type(e)) return None\"]},\"732\":{\"h\":\"结语\",\"t\":[\"当前爬虫主体功能以及实现，可以爬取 gityuan.com 所有有效文章列表，可以满足客户端需求。但仍然存在以下问题：\",\"没有伪装，爬虫很容易被识别并被拒绝服务（就在刚刚写下这句话的时候，就发生了被限制访问，真*乌鸦嘴）。\",\"由于原网站特性，其置顶文章每页都有，会导致部分数据重复。\",\"未爬取具体文章内容。\",\"说明\",\"本文只为学术研究，其中涉及到的第三方网站及其所有资源均属原主所有。向 gityuan 大神致敬，欢迎访问其blog。\"]},\"733\":{\"h\":\"源码\",\"t\":[\"github 链接\",\"tag为gityuan_spider1.5\"]},\"734\":{\"h\":\"Python 爬虫爬取 gityuan.com 数据并输出 json\"},\"735\":{\"h\":\"简介\",\"t\":[\"本文基于 Python2.7\",\"这篇文章基于我在慕课网上面学习 Python 简单爬虫写的内容，教程内容是爬取 1000 条百度百科的数据，但是教程中爬虫截止 2018-01-27 已经失效，刚好看到大神 gityuan.com 的内容，于是用 Python 实现爬取其网页内容并生成 json 数据。\",\"本文即上述过程整理。\",\"本文涉及源代码已上传 github（点这里查看）。\"]},\"736\":{\"h\":\"框架\",\"t\":[\"爬虫主要活动是：\",\"爬取目标网页内容\",\"对获取到的内容进行分析，获取有用数据\",\"将处理好的数据按格式输出\",\"此外还需要有一个专门管理爬虫活动的主类，故而文件结构如下：\",\"spider_main.py 入口类\",\"url_manager.py 管理要下载的链接\",\"html_downloader.py 下载网页内容\",\"html_paeser.py 对获取到的数据进行解析、加工\",\"html_out.py 输出格式化的数据\",\"目前只实现了爬取 gityuan.com 第一页内容并输出 json，所以暂时不需要实现 url_manager.py\"]},\"737\":{\"h\":\"关键代码\",\"t\":[\"spider_main.py\",\"#导入用到的各个类 import html_downloader ... #定义入口类 class SpiderMain(object): def __init__(self): #初始化各个变量 downloader、parser、output... self.downloader = html_downloader.HtmlDownloader() #略 def craw(self,root_url): html_cont = self.downloader.download(root_url) new_data = self.parser.parse(html_cont) self.output.collect_data(new_data) self.output.output_json() root_url = 'http://www.gityuan.com/' sp = SpiderMain() sp.craw(root_url)\",\"在__init__() 方法初始化各个变量；\",\"在craw()中分别实现下载、解析网页内容、输出加工数据\",\"html_download.py\",\"import urllib2 class HtmlDownLoader(object): def download(self,url): if url is None: return None respone = urllib2.urlopen(url,timeout=300) if respone.getcode() != 200: return None return respone.read()\",\"下载并返回网页内容，比较简单\",\"html_parser.py\",\"import urlparse from bs4 import BeautifulSoup #第三方包，需要单独下载 import re class HtmlParser(object): def parse(self,html_cont): if html_cont is None: return #用 BeautifulSoup 解析文档内容 soup = BeautifulSoup(html_cont,'html.parser') res_data = [] #数组 #获取所有的文章节点 nodes post_div_nodes = soup.find_all('div',class_='post-preview') #遍历 nodes，读取每一项内容并保存 for post_div_node in post_div_nodes: post_div_soup = BeautifulSoup(str(post_div_node)) post_info = {} #字典 dict #判断 URL 是否是完整 url_ = post_div_soup.a['href'] if 'http://' not in url_: url_ = \\\"http://gityuan.com\\\" + url_ #保存数据 post_info['url'] = url_ post_info['title'] = post_div_soup.find('h2').get_text() post_info['summary'] = post_div_soup.find('div',class_='post-content-preview').get_text() res_data.append(post_info) return res_data\",\"这是爬虫功能的重点之一：对网页数据进行解析，由此数据才变为可用数据\",\"主要是通过第三方插件BeautifulSoup解析数据，并保存到数组res_data中，具体见代码中实现\",\"html_output.py\",\"import sys #下面两行代码解决编码问题，强制使用 utf-8，而非默认的 unicode 编码 reload(sys) sys.setdefaultencoding('utf-8') class JsonOutput(object): def __init__(self): self.datas = [] def collect_data(self,new_data): if new_data is not None: self.datas.append(new_data) def output_json(self): #打开文件，并以 json 格式输出 fout = open('output.json','w') fout.write('{') fout.write(r'\\\"data\\\":[') for data in self.datas: for post_info in data: fout.write('{') fout.write('\\\"url\\\":\\\"%\\\",' % post_info['url']) fout.write('\\\"title\\\":\\\"%\\\",' % post_info['title']) fout.write('\\\"summary\\\":\\\"%\\\",' % post_info['summary']) fout.write('},') #为了符合 json 规范，最后一个输入空数据，无末尾逗号 fout.write(r'{}') fout.write(']}')\",\"本类也很重要，主要是数据存取，以及将解析好的数据格式化输出\"]},\"738\":{\"h\":\"说明\",\"t\":[\"本文中代码经二次处理，不一定与源代码一致，但思路如此，以供参考。\"]},\"739\":{\"h\":\"Dart Isolate 源码分析\"},\"740\":{\"h\":\"Isolate\",\"t\":[\"💡 本文基于 Dart 2.17.1\",\"Isolate, an isolated Dart execution context.\",\"All Dart code runs in an isolate, and code can access classes and values only from the same isolate. Different isolates can communicate by sending values through ports (see ReceivePort, SendPort).\",\"In Dart an isolate has its own event loop, its own global fields, can run in parallel with other isolates and have their own live-cycle. — https://github.com/dart-lang/sdk/issues/36097#issuecomment-746510375\",\"The new isolate has its own memory and its own thread working in parallel with the main isolate.\",\"https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly\",\"https://www.youtube.com/watch?v=NoVYI94MJio&ab_channel=Flutterly\",\"Isolate 创建会占用内存，可以使用IsolateGroup来解决，并且目前为止 Dart 和 Flutter 都默认支持在使用Isolate.spawn创建新 Isolate 的时候使用 IsolateGroup（Isolate.spwanUri创建的时候会创建单独的 IsolateGroup 和 Isolate）。\",\"💡 在创建 isolate 的时候可以添加addOnExitListener 或者addErrorListener之类的监听，但是可能在执行添加代码的时候isolate 就已经终止了而导致这些方法收不到回调。 为了避免这种情况，可以在创建 isolate 的时候指定他的状态为**paused**。\",\"与 isolate 有关的类有：\",\"Isolate 位置在sdk\\\\lib\\\\isolate\\\\isolate.dart。主要是Isolate 通用方法、属性的抽象描述，没有具体实现。\",\"Isolate 位置在sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\isolate_patch.dart，是 app 等平台对应的具体实现，部分方法调用了 native 层的 Isolate 实现。\",\"Isolate 位置在runtime\\\\vm\\\\isolate.h以及runtime\\\\vm\\\\isolate.cc中，是 Isolate 的 native 层实现。\",\"他们的关系大致如图：\",\"Untitled\"]},\"741\":{\"h\":\"简单使用\"},\"742\":{\"h\":\"创建新 Isolate 的方式：\",\"t\":[\"Isolate(``SendPort controlPort``, {this.pauseCapability, this.terminateCapability}); 这种方式创建一种能力受限的 Isolate。The capabilities should be the subset of the capabilities that are available to the original isolate.本质上并没有在 native 层孵化一个新的 Isolate。\",\"var newIsolate = Isolate(Isolate.current.controlPort); newIsolate.addOnExitListener(Isolate.current.controlPort); newIsolate.addErrorListener(Isolate.current.controlPort); Future.delayed(Duration(seconds: 1),(){ newIsolate.kill(); print(\\\"try kill new isolate\\\"); // after this，the dart code finish }); print(\\\"finish\\\");\",\"Isolate.spawn(``void entryPoint(T message), T message,...) 创建一个和当前 Isolate共享同一份代码的 Isolate，并执行 entryPoint 方法，一般在 message 中传入 SendPort 以便从 entryPoint 中向来时的 Isolate 发送消息，新建的 Isolate 和当前 Isolate 在同一个 IsolateGroup 中。\",\"void spawnIsolate() { var receivePort = ReceivePort(); receivePort.listen((message) { print(\\\"receivePort(${Isolate.current.debugName}) received msg: $message\\\"); }); //创建一个和当前的 isolate 共享同一份代码的 Isolate var isolate = Isolate.spawn((message) { print(\\\"Isolate initial function(${Isolate.current.debugName}) received msg: $message\\\"); (message as SendPort).send(\\\"HELLO_FORM_ISOLATE(${Isolate.current.debugName})\\\"); }, receivePort.sendPort,debugName: \\\"another_isolate\\\"); }\",\"Isolate.spawnUri（Uri uri,List<String> args,var message,...）* 指定的uri中创建并孵化一个 isolate，执行 uri 对应的 library 中的main方法（0~2 个入参），并传入无参、args 或 message 作为参数\",\"var receivePort = ReceivePort(); receivePort.listen((message) { print(\\\"receivePort(${Isolate.current.debugName}) received msg: $message\\\"); }); // 创建一个和当前的 isolate 共享同一份代码的 Isolate var isolate = await Isolate.spawnUri( Uri.file( r\\\"E:\\\\workspace\\\\others\\\\flutter_dart_source_code_analysis\\\\lib\\\\dart\\\\another_dart_file_to_spawn_uri.dart\\\"), [], receivePort.sendPort, debugName: \\\"another_isolate\\\"); Future.delayed(const Duration(seconds: 2), () { receivePort.close(); isolate.kill(priority: Isolate.immediate); print(\\\"try kill new isolate\\\"); });\"]},\"743\":{\"h\":\"使用方法\"},\"744\":{\"h\":\"\",\"t\":[\"Capability pause([Capability? resumeCapability])，暂停 Isolate，停止从*event loop queue* 中取（并处理）消息，但是依然可以往里面加入消息\",\"resumeCapability 是用来区分 pause 的，必须使用同一个*resumeCapability*来 resume isolate。\",\"使用同一个*resumeCapability*多次pause，只需一次resume就可以恢复isolate\",\"使用不同*resumeCapability多次pause，必须使用对应的resumeCapability依次resume才可以恢复isolate （注意：这里也只需要使用当时 pause isolate 的resumeCapability* 依次调用 resume 即可，而不用保持次数一致，比如，有 2 个*resumeCapability ，*调用 pause 次数分别为 a 1,b 2，那么要想 resume isolate，也只需要分别使用 a,b 调用一次 resume 即可）\"]},\"745\":{\"h\":\"ping\",\"t\":[\"使用 isolate 往receivePort.sendPort发送 response 消息，即使 isolate 当前被 pause 也可以正常发送\",\"isolate.pause(); isolate.ping(receivePort.sendPort, response: \\\"is isolate resume?\\\");//receivePort 依然可以收到消息\",\"ping 可以正常发送的原因是：\",\"// -> lib\\\\isolate\\\\isolate.dart // ping 方法是一个 external 方法 external void ping(SendPort responsePort, {Object? response, int priority = immediate}); // -> sdk/lib/_internal/vm/lib/isolate_patch.dart @patch void ping(SendPort responsePort, {Object? response, int priority: immediate}) { var msg = new List<Object?>.filled(5, null) ..[0] = 0 // Make room for OOM message type. ..[1] = _PING ..[2] = responsePort ..[3] = priority ..[4] = response; _sendOOB(controlPort, msg); } @pragma(\\\"vm:external-name\\\", \\\"Isolate_sendOOB\\\") external static void _sendOOB(port, msg); // -> runtime/lib/isolate.cc // 创建了一个 oob 消息并压入 oob_queue_ DEFINE_NATIVE_ENTRY(Isolate_sendOOB, 0, 2) { GET_NON_NULL_NATIVE_ARGUMENT(SendPort, port, arguments->NativeArgAt(0)); GET_NON_NULL_NATIVE_ARGUMENT(Array, msg, arguments->NativeArgAt(1)); // Make sure to route this request to the isolate library OOB mesage handler. msg.SetAt(0, Smi::Handle(Smi::New(Message::kIsolateLibOOBMsg))); // Ensure message writer (and it's resources, e.g. forwarding tables) are // cleaned up before handling interrupts. { PortMap::PostMessage(WriteMessage(/* can_send_any_object */ false, /* same_group */ false, msg, port.Id(), Message::kOOBPriority)); } // Drain interrupts before running so any IMMEDIATE operations on the current // isolate happen synchronously. const Error& error = Error::Handle(thread->HandleInterrupts()); if (!error.IsNull()) { Exceptions::PropagateError(error); UNREACHABLE(); } return Object::null(); }\",\"在 MessageHandler 中有两种 MessageQueue：oob_queue_和queue_ ，前者优先级高，即使 isolate 被 pause 也会执行\",\"// -> runtime\\\\vm\\\\message_handler.h // 普通消息，暂停时不能处理 MessageQueue* queue_; // 优先消息，即使处理消息时，优先处理 obb_queue 消息，如果为空再去考虑处理普通消息 // 即使 isolate 被 pause 也可以被处理 MessageQueue* oob_queue_;\",\"像是ping/kill/pause/addOnExitListener/removeOnExitListener这些指令消息都是压入到obb_queue_中优先处理的。\"]},\"746\":{\"h\":\"源码分析\",\"t\":[\"先看一下常用的几个方法是怎么实现的。\"]},\"747\":{\"h\":\"获取当前 Isolate\",\"t\":[\"（sdk/lib/isolate/isolate.dart）Isolate.current →\",\"(sdk/lib/_internal/vm/lib/isolate_patch.dart) Isolate get current → Isolate._getCurrentIsolate() → _getPortAndCapabilitiesOfCurrentIsolate()\",\"（runtime/lib/isolate.cc）DEFINE_NATIVE_ENTRY(Isolate_getPortAndCapabilitiesOfCurrentIsolate, 0, 0)\",\"先看一下sdk/lib/_internal/vm/lib/isolate_patch.dart中的实现：\",\"// -> sdk/lib/_internal/vm/lib/isolate_patch.dart static final _currentIsolate = _getCurrentIsolate(); @patch static Isolate get current => _currentIsolate; static Isolate _getCurrentIsolate() { List portAndCapabilities = _getPortAndCapabilitiesOfCurrentIsolate(); // 这里的参数分别是 SendPort，Capability，Capability return new Isolate(portAndCapabilities[0], pauseCapability: portAndCapabilities[1], terminateCapability: portAndCapabilities[2]); } @pragma(\\\"vm:external-name\\\", \\\"Isolate_getPortAndCapabilitiesOfCurrentIsolate\\\") external static List _getPortAndCapabilitiesOfCurrentIsolate();\",\"可以看到，最后是根据 native 端返回的信息，新建了一个 Isolate 引用，但是因为_currentIsolate是static final的，所以只会被调用一次，确保了在 Dart SDK 中调用Isolate.current 时获取的是当前唯一的 Isolate。\",\"让我们看一下在 native 中是如何找到当前的 Isolate 的：\",\"// -> \\\\runtime\\\\lib\\\\isolate.cc DEFINE_NATIVE_ENTRY(Isolate_getPortAndCapabilitiesOfCurrentIsolate, 0, 0) { const Array& result = Array::Handle(Array::New(3)); result.SetAt(0, SendPort::Handle(SendPort::New(isolate->main_port()))); result.SetAt( 1, Capability::Handle(Capability::New(isolate->pause_capability()))); result.SetAt( 2, Capability::Handle(Capability::New(isolate->terminate_capability()))); return result.ptr(); }\",\"可见是直接取的当前线程对应的 isolate对应的值，经过包装再返回到调用方。\"]},\"748\":{\"h\":\"创建 Isolate\",\"t\":[\"在 Dart 中创建 Isolate 有 3 种方式：\",\"Isolate(this.controlPort, {this.pauseCapability, this.terminateCapability});*create an* isolate，本质上只是将controlPort 等设置为传入的对象，并没有在 native 层新建 Isolate\",\"Isolate.spawncreate and spawns an isolate\",\"Isolate.spawnUricreate and spawns an isolate\",\"这里分析一下后面两种方式，对比一下差异：\",\"// -> sdk\\\\lib\\\\isolate\\\\isolate.dart // Creates a new [Isolate] object with a restricted set of capabilities. Isolate(this.controlPort, {this.pauseCapability, this.terminateCapability}); /// Creates and spawns an isolate that shares the same code as the current /// isolate. external static Future<Isolate> spawn<T>( void entryPoint(T message), T message, {bool paused = false, bool errorsAreFatal = true, SendPort? onExit, SendPort? onError, @Since(\\\"2.3\\\") String? debugName}); /// Creates and spawns an isolate that runs the code from the library with /// the specified URI. /// /// The isolate starts executing the top-level `main` function of the library /// with the given URI. external static Future<Isolate> spawnUri( Uri uri, List<String> args, var message, {bool paused = false, SendPort? onExit, SendPort? onError, bool errorsAreFatal = true, bool? checked, Map<String, String>? environment, @Deprecated('The packages/ dir is not supported in Dart 2') Uri? packageRoot, Uri? packageConfig, bool automaticPackageResolution = false, @Since(\\\"2.3\\\") String? debugName});\",\"对于 APP 等来说，上述Isolate.spawn和Isolate.spawnUri的实现都在vm下面的isolate_patch.dart中（js 会返回_unsupported()）：\",\"// -> sdk\\\\lib\\\\_internal\\\\vm\\\\lib\\\\isolate_patch.dart @patch static Future<Isolate> spawn<T>(void entryPoint(T message), T message, {bool paused = false, bool errorsAreFatal = true, SendPort? onExit, SendPort? onError, String? debugName}) async { // `paused` isn't handled yet. // Check for the type of `entryPoint` on the spawning isolate to make // error-handling easier. if (entryPoint is! _UnaryFunction) { throw new ArgumentError(entryPoint); } // The VM will invoke [_startIsolate] with entryPoint as argument. // We do not inherit the package config settings from the parent isolate, // instead we use the values that were set on the command line. ... final RawReceivePort readyPort = new RawReceivePort(null, 'Isolate.spawn ready'); try { **_spawnFunction**(readyPort.sendPort, script.toString(), entryPoint, message, paused, errorsAreFatal, onExit, onError, packageConfig, debugName); return await **_spawnCommon**(readyPort); } catch (e, st) { readyPort.close(); return await new Future<Isolate>.error(e, st); } } @patch static Future<Isolate> spawnUri(Uri uri, List<String> args, var message, {bool paused = false, SendPort? onExit, SendPort? onError, bool errorsAreFatal = true, bool? checked, Map<String, String>? environment, Uri? packageRoot, Uri? packageConfig, bool automaticPackageResolution = false, String? debugName}) async { // Verify that no mutually exclusive arguments have been passed. ... // Resolve the uri against the current isolate's root Uri first. ... // The VM will invoke [_startIsolate] and not `main`. final packageConfigString = packageConfig?.toString(); final RawReceivePort readyPort = new RawReceivePort(null, 'Isolate.spawnUri ready'); try { **_spawnUri**( readyPort.sendPort, spawnedUri.toString(), args, message, paused, onExit, onError, errorsAreFatal, checked, null, /* environment */ packageConfigString, debugName); return await **_spawnCommon**(readyPort); } catch (e) { readyPort.close(); rethrow; } } // Isolate.spawn call @pragma(\\\"vm:external-name\\\", \\\"Isolate_spawnFunction\\\") external static void _spawnFunction( SendPort readyPort, String uri, Function topLevelFunction, var message, bool paused, bool errorsAreFatal, SendPort? onExit, SendPort? onError, String? packageConfig, String? debugName); // Isolate.spawnUri call @pragma(\\\"vm:external-name\\\", \\\"Isolate_spawnUri\\\") external static void _spawnUri( SendPort readyPort, String uri, List<String> args, var message, bool paused, SendPort? onExit, SendPort? onError, bool errorsAreFatal, bool? checked, List? environment, String? packageConfig, String? debugName); // 监听 Isolate spawn 状态，等成功之后将其处理后返回给 Dart 层的调用者 static Future<Isolate> _spawnCommon(RawReceivePort readyPort) { final completer = new Completer<Isolate>.sync(); readyPort.handler = (readyMessage) { readyPort.close(); if (readyMessage is List && readyMessage.length == 2) { SendPort controlPort = readyMessage[0]; List capabilities = readyMessage[1]; **completer.complete(new Isolate(controlPort, pauseCapability: capabilities[0], terminateCapability: capabilities[1]));** } else if (readyMessage is String) { // We encountered an error while starting the new isolate. completer.completeError(new IsolateSpawnException( 'Unable to spawn isolate: ${readyMessage}')); } else { // This shouldn't happen. completer.completeError(new IsolateSpawnException( \\\"Internal error: unexpected format for ready message: \\\" \\\"'${readyMessage}'\\\")); } }; return completer.future; }\",\"其实，根据上述的代码，不管是Isolate.spawnUri() 还是Isolate.spawn，都是先调用RawReceivePort获取RawReceivePort readyPort，最后都是调用了_spawnCommon(readyPort) 方法，最终通过new Isolate(controlPort, pauseCapability: capabilities[0], terminateCapability: capabilities[1])方法创建了新的Isolate 。\",\"这个方法的定义在sdk/lib/isolate/isolate.dart中：\",\"// -> sdk/lib/isolate/isolate.dart final SendPort controlPort; Isolate(this.controlPort, {this.pauseCapability, this.terminateCapability});\",\"可以看到，在 Dart 中，我们拿到的 Isolate 主要是持有一个和 native 中对应 SendPort。\",\"通过上面的分析：\",\"Isolate.spawn最后调用了_spawnFunction方法（native 层实现为Isolate_spawnFunction）；\",\"Isolate.spawnUri最后调用了_spawnUri方法（native 层实现为Isolate_spawnUri）。\",\"💡 new RawReceivePort()方法主要是创建一个不存在于_RawReceivePortImpl的static final _portMap = <int, Map<String, dynamic>>{}; 中的 SendPort（具体实现在PortMap::CreatePort中）。\"]},\"749\":{\"h\":\"Isolate_spawnFunction\",\"t\":[\"Isolate.spawn最后调用了_spawnFunction方法，来看一下对应的Isolate_spawnFunction 的实现：\",\"// -> runtime\\\\lib\\\\isolate.cc DEFINE_NATIVE_ENTRY(Isolate_spawnFunction, 0, 10) { // 解析参数 ... // closure_tuple_handle 对应我们在 Dart 中 Isolate.spawn() 中传入的 entryPoint // 也就是 isolate 创建好以后执行的方法 std::unique_ptr<IsolateSpawnState> state(new IsolateSpawnState( port.Id(), isolate->origin_id(), String2UTF8(script_uri), closure_tuple_handle, &message_buffer, utf8_package_config, paused.value(), fatal_errors, on_exit_port, on_error_port, utf8_debug_name, **isolate->group()**)); // Since this is a call to Isolate.spawn, copy the parent isolate's code. state->isolate_flags()->copy_parent_code = true; **isolate->group()**->thread_pool()->Run<SpawnIsolateTask>(isolate, std::move(state)); return Object::null(); }\",\"可见，Isolate_spawnFunction方法中主要还是解析收到的各种参数，最后在当前 isolate 对应的 IsolateGroup 的线程池中执行SpawnIsolateTask：\"]},\"750\":{\"h\":\"SpawnIsolateTask\",\"t\":[\"// -> runtime\\\\lib\\\\isolate.cc class SpawnIsolateTask : public ThreadPool::Task { SpawnIsolateTask(Isolate* parent_isolate, std::unique_ptr<IsolateSpawnState> state) : parent_isolate_(parent_isolate), state_(std::move(state)) { parent_isolate->IncrementSpawnCount(); } void Run() override { const char* name = (state_->debug_name() == nullptr) ? state_->function_name() : state_->debug_name(); ASSERT(name != nullptr); auto group = state_->isolate_group(); if (group == nullptr) { RunHeavyweight(name); } else { RunLightweight(name); } } }\"]},\"751\":{\"h\":\"RunLightWeight\",\"t\":[\"因为这里我们的isolate→group不为空，所以走的是RunLightWeight:\",\"// -> runtime\\\\lib\\\\isolate.cc void RunLightweight(const char* name) { // The create isolate initialize callback is mandatory. auto initialize_callback = **Isolate::InitializeCallback();** if (initialize_callback == nullptr) { FailedSpawn( \\\"Lightweight isolate spawn is not supported by this Dart embedder\\\\n\\\", /*has_current_isolate=*/false); return; } char* error = nullptr; auto group = state_->isolate_group(); **Isolate* isolate = CreateWithinExistingIsolateGroup(group, name, &error);** parent_isolate_->DecrementSpawnCount(); parent_isolate_ = nullptr; if (isolate == nullptr) { FailedSpawn(error, /*has_current_isolate=*/false); free(error); return; } void* child_isolate_data = nullptr; **const bool success = initialize_callback(&child_isolate_data, &error);** if (!success) { FailedSpawn(error); Dart_ShutdownIsolate(); free(error); return; } **isolate->set_init_callback_data(child_isolate_data); // 注意这里的 Run 方法，在**RunHeavyweight 方法的最后也调用了 // 到时候会一起分析一下 **Run(isolate);** } // -> runtime\\\\vm\\\\dart_api_impl.cc Isolate* CreateWithinExistingIsolateGroup(IsolateGroup* group, const char* name, char** error) { API_TIMELINE_DURATION(Thread::Current()); CHECK_NO_ISOLATE(Isolate::Current()); auto spawning_group = group; **Isolate* isolate =** reinterpret_cast<Isolate*>( **CreateIsolate**(spawning_group, /*is_new_group=*/false, name, /*isolate_data=*/nullptr, error)); if (isolate == nullptr) return nullptr; // 因为执行到这里的都有 IsolateGroup，共享同一份代码 auto source = spawning_group->source(); ASSERT(isolate->source() == source); return isolate; }\",\"这里主要进行了 2 步：\",\"使用CreateWithinExistingIsolateGroup创建 Isolate\",\"使用全局的initialize_callback （也就是Isolate::InitializeCallback()）初始化 Isolate\"]},\"752\":{\"h\":\"Isolate::InitializeCallback()\",\"t\":[\"这其中的Isolate::InitializeCallback()是在Dart::Init的时候就已经设置了的：\",\"// -> runtime/bin/main.cc void main(int argc, char** argv) { ... // Initialize the Dart VM. Dart_InitializeParams init_params; init_params.version = DART_INITIALIZE_PARAMS_CURRENT_VERSION; init_params.vm_snapshot_data = vm_snapshot_data; init_params.vm_snapshot_instructions = vm_snapshot_instructions; **init_params.create_group = CreateIsolateGroupAndSetup;** **init_params.initialize_isolate = OnIsolateInitialize;** init_params.shutdown_isolate = OnIsolateShutdown; init_params.cleanup_isolate = DeleteIsolateData; init_params.cleanup_group = DeleteIsolateGroupData; init_params.file_open = DartUtils::OpenFile; init_params.file_read = DartUtils::ReadFile; init_params.file_write = DartUtils::WriteFile; init_params.file_close = DartUtils::CloseFile; init_params.entropy_source = DartUtils::EntropySource; error = Dart_Initialize(&init_params); } // -> runtime\\\\vm\\\\dart_api_impl.cc DART_EXPORT char* Dart_Initialize(Dart_InitializeParams* params) { if (params == NULL) { return Utils::StrDup( \\\"Dart_Initialize: \\\" \\\"Dart_InitializeParams is null.\\\"); } if (params->version != DART_INITIALIZE_PARAMS_CURRENT_VERSION) { return Utils::StrDup( \\\"Dart_Initialize: \\\" \\\"Invalid Dart_InitializeParams version.\\\"); } return Dart::Init(params); } // -> runtime\\\\vm\\\\dart.cc char* Dart::Init(const Dart_InitializeParams* params) { if (!init_state_.SetInitializing()) { return Utils::StrDup( \\\"Bad VM initialization state, \\\" \\\"already initialized or \\\" \\\"multiple threads initializing the VM.\\\"); } char* retval = DartInit(params); if (retval != NULL) { init_state_.ResetInitializing(); return retval; } init_state_.SetInitialized(); return NULL; } char* Dart::DartInit(const Dart_InitializeParams* params) { ... OSThread::Init(); Zone::Init(); IsolateGroup::Init(); Isolate::InitVM(); PortMap::Init(); Service::Init(); ... Thread::ExitIsolate(); // Unregister the VM isolate from this thread. **Isolate::SetCreateGroupCallback(params->create_group);** **Isolate::SetInitializeCallback_(params->initialize_isolate);** Isolate::SetShutdownCallback(params->shutdown_isolate); Isolate::SetCleanupCallback(params->cleanup_isolate); Isolate::SetGroupCleanupCallback(params->cleanup_group); Isolate::SetRegisterKernelBlobCallback(params->register_kernel_blob); Isolate::SetUnregisterKernelBlobCallback(params->unregister_kernel_blob); ... }\",\"也就是说，上文的Isolate::InitializeCallback()实际上就是OnIsolateInitialize，它的主要作用就是在 isolate 创建好之后进行统一的初始化操作，绑定一些数据：\",\"// -> runtime\\\\bin\\\\main.cc static bool OnIsolateInitialize(void** child_callback_data, char** error) { Dart_Isolate isolate = Dart_CurrentIsolate(); ASSERT(isolate != nullptr); auto isolate_group_data = reinterpret_cast<IsolateGroupData*>(Dart_CurrentIsolateGroupData()); auto isolate_data = new IsolateData(isolate_group_data); *child_callback_data = isolate_data; Dart_EnterScope(); const auto **script_uri** = isolate_group_data->script_url; const bool **isolate_run_app_snapshot** = isolate_group_data->RunFromAppSnapshot(); Dart_Handle **result** = SetupCoreLibraries(isolate, isolate_data, /*group_start=*/false, /*resolved_packages_config=*/nullptr); if (Dart_IsError(result)) goto failed; if (isolate_run_app_snapshot) { result = Loader::InitForSnapshot(script_uri, isolate_data); if (Dart_IsError(result)) goto failed; } else { result = DartUtils::ResolveScript(Dart_NewStringFromCString(script_uri)); if (Dart_IsError(result)) goto failed; if (isolate_group_data->kernel_buffer() != nullptr) { // Various core-library parts will send requests to the Loader to resolve // relative URIs and perform other related tasks. We need Loader to be // initialized for this to work because loading from Kernel binary // bypasses normal source code loading paths that initialize it. const char* resolved_script_uri = NULL; result = Dart_StringToCString(result, &resolved_script_uri); if (Dart_IsError(result)) goto failed; result = Loader::InitForSnapshot(resolved_script_uri, isolate_data); if (Dart_IsError(result)) goto failed; } } Dart_ExitScope(); return true; failed: *error = Utils::StrDup(Dart_GetError(result)); Dart_ExitScope(); return false; }\"]},\"753\":{\"h\":\"CreateWithinExistingIsolateGroup\",\"t\":[\"CreateWithinExistingIsolateGroup → CreateIsolate\",\"再看一下创建 Isolate 的具体方法，这个在不同的 device 上面不一样，我们只关注 vm 下面的实现：\",\"// -> runtime\\\\vm\\\\dart_api_impl.cc static Dart_Isolate CreateIsolate(IsolateGroup* group, bool is_new_group, const char* name, void* isolate_data, char** error) { **CHECK_NO_ISOLATE**(Isolate::Current()); auto source = group->source(); **Isolate* I = Dart::CreateIsolate(name, source->flags, group);** if (I == NULL) { if (error != NULL) { *error = Utils::StrDup(\\\"Isolate creation failed\\\"); } return reinterpret_cast<Dart_Isolate>(NULL); } Thread* T = Thread::Current(); bool success = false; { StackZone zone(T); // We enter an API scope here as InitializeIsolate could compile some // bootstrap library files which call out to a tag handler that may create // Api Handles when an error is encountered. T->EnterApiScope(); const Error& error_obj = Error::Handle( Z, **Dart::InitializeIsolate( source->snapshot_data, source->snapshot_instructions, source->kernel_buffer, source->kernel_buffer_size, is_new_group ? nullptr : group, isolate_data)**); if (error_obj.IsNull()) { #if defined(DEBUG) && !defined(DART_PRECOMPILED_RUNTIME) if (FLAG_check_function_fingerprints && !FLAG_precompiled_mode) { Library::CheckFunctionFingerprints(); } #endif // defined(DEBUG) && !defined(DART_PRECOMPILED_RUNTIME). success = true; } else if (error != NULL) { *error = Utils::StrDup(error_obj.ToErrorCString()); } // We exit the API scope entered above. T->ExitApiScope(); } if (success) { if (is_new_group) { group->heap()->InitGrowthControl(); } // A Thread structure has been associated to the thread, we do the // safepoint transition explicitly here instead of using the // TransitionXXX scope objects as the reverse transition happens // outside this scope in Dart_ShutdownIsolate/Dart_ExitIsolate. T->set_execution_state(Thread::kThreadInNative); T->EnterSafepoint(); if (error != NULL) { *error = NULL; } return Api::CastIsolate(I); } Dart::ShutdownIsolate(); return reinterpret_cast<Dart_Isolate>(NULL); }\",\"这里主要有两步：\",\"Dart::CreateIsolate创建了Isolate* I；\",\"然后调用Dart::InitializeIsolate初始化 isolate。\",\"Dart::CreateIsolate：\",\"// -> runtime\\\\vm\\\\dart.cc Isolate* Dart::CreateIsolate(const char* name_prefix, const Dart_IsolateFlags& api_flags, IsolateGroup* isolate_group) { // Create a new isolate. Isolate* isolate = Isolate::InitIsolate(name_prefix, isolate_group, api_flags); return isolate; }\",\"💡 在 Dart 虚拟机启动（Dart::DartInit）的时候，也会调用Dart::InitIsolate创建虚拟机对应的 Isolate，执行 UI 操作：vm_isolate_ = Isolate::InitIsolate(kVmIsolateName, group, api_flags, is_vm_isolate);\",\"在Isolate::InitIsolate方法中，先是用isolate_group创建了新的 Isolate，然后将其与Thread，MessageHandler，SendPort等绑定：\",\"// -> runtime\\\\vm\\\\isolate.cc Isolate* Isolate::InitIsolate(const char* name_prefix, IsolateGroup* isolate_group, const Dart_IsolateFlags& api_flags, bool is_vm_isolate) { // 创建新的 Isolate **Isolate* result = new Isolate(isolate_group, api_flags);** result->BuildName(name_prefix); if (!is_vm_isolate) { // vm isolate object store is initialized later, after null instance // is created (in Dart::Init). // Non-vm isolates need to have isolate object store initialized is that // exit_listeners have to be null-initialized as they will be used if // we fail to create isolate below, have to do low level shutdown. ASSERT(result->group()->object_store() != nullptr); result->isolate_object_store()->Init(); } ASSERT(result != nullptr); #if !defined(PRODUCT) // Initialize metrics. #define ISOLATE_METRIC_INIT(type, variable, name, unit) \\\\ result->metric_##variable##_.InitInstance(result, name, NULL, Metric::unit); ISOLATE_METRIC_LIST(ISOLATE_METRIC_INIT); #undef ISOLATE_METRIC_INIT #endif // !defined(PRODUCT) // First we ensure we enter the isolate. This will ensure we're participating // in any safepointing requests from this point on. Other threads requesting a // safepoint operation will therefore wait until we've stopped. // // Though the [result] isolate is still in a state where no memory has been // allocated, which means it's safe to GC the isolate group until here. // 创建一个 Thread 并和当前 isolate 绑定 if (!**Thread::EnterIsolate(result)**) { delete result; return nullptr; } // Setup the isolate message handler. MessageHandler* handler = new IsolateMessageHandler(result); ASSERT(handler != nullptr); // 在这里绑定了 message handler **result->set_message_handler(handler);** **result->set_main_port(PortMap::CreatePort(result->message_handler()));** #if defined(DEBUG) // Verify that we are never reusing a live origin id. VerifyOriginId id_verifier(result->main_port()); Isolate::VisitIsolates(&id_verifier); #endif result->set_origin_id(result->main_port()); result->set_pause_capability(result->random()->NextUInt64()); result->set_terminate_capability(result->random()->NextUInt64()); #if !defined(PRODUCT) result->debugger_ = new Debugger(result); #endif // Now we register the isolate in the group. From this point on any GC would // traverse the isolate roots (before this point, the roots are only pointing // to vm-isolate objects, e.g. null) **isolate_group->RegisterIsolate(result);** if (ServiceIsolate::NameEquals(name_prefix)) { ASSERT(!ServiceIsolate::Exists()); ServiceIsolate::SetServiceIsolate(result); #if !defined(DART_PRECOMPILED_RUNTIME) } else if (KernelIsolate::NameEquals(name_prefix)) { ASSERT(!KernelIsolate::Exists()); KernelIsolate::SetKernelIsolate(result); #endif // !defined(DART_PRECOMPILED_RUNTIME) } if (FLAG_trace_isolates) { if (name_prefix == nullptr || strcmp(name_prefix, \\\"vm-isolate\\\") != 0) { OS::PrintErr( \\\"[+] Starting isolate:\\\\n\\\" \\\"\\\\tisolate: %s\\\\n\\\", result->name()); } } // Add to isolate list. Shutdown and delete the isolate on failure. if (!TryMarkIsolateReady(result)) { result->LowLevelShutdown(); Isolate::LowLevelCleanup(result); return nullptr; } return result; }\",\"Dart::InitializeIsolate\",\"这里主要是对 isolate 进行初始化，并在初始化完成后通知创建这个 isolate 的 isolate。\",\"// -> runtime\\\\vm\\\\dart.cc ErrorPtr Dart::InitializeIsolate(const uint8_t* snapshot_data, const uint8_t* snapshot_instructions, const uint8_t* kernel_buffer, intptr_t kernel_buffer_size, IsolateGroup* source_isolate_group, void* isolate_data) { // Initialize the new isolate. Thread* T = Thread::Current(); Isolate* I = T->isolate(); auto IG = T->isolate_group(); #if defined(SUPPORT_TIMELINE) TimelineBeginEndScope tbes(T, Timeline::GetIsolateStream(), \\\"InitializeIsolate\\\"); tbes.SetNumArguments(1); tbes.CopyArgument(0, \\\"isolateName\\\", I->name()); #endif ASSERT(I != NULL); StackZone zone(T); HandleScope handle_scope(T); bool was_child_cloned_into_existing_isolate = false; if (source_isolate_group != nullptr) { // If a static field gets registered in [IsolateGroup::RegisterStaticField]: // // * before this block it will ignore this isolate. The [Clone] of the // initial field table will pick up the new value. // * after this block it will add the new static field to this isolate. { SafepointReadRwLocker reader(T, source_isolate_group->program_lock()); **I->set_field_table**(T, source_isolate_group->initial_field_table()->Clone(I)); **I->field_table()->MarkReadyToUse();** } was_child_cloned_into_existing_isolate = true; } else { const Error& error = Error::Handle( // 从 IsolateGroup 中引用一些通用的变量（常量等等） **InitIsolateFromSnapshot**(T, I, snapshot_data, snapshot_instructions, kernel_buffer, kernel_buffer_size)); if (!error.IsNull()) { return error.ptr(); } } Object::VerifyBuiltinVtables(); if (T->isolate()->origin_id() == 0) { DEBUG_ONLY(IG->heap()->Verify(kForbidMarked)); } #if defined(DART_PRECOMPILED_RUNTIME) const bool kIsAotRuntime = true; #else const bool kIsAotRuntime = false; #endif if (kIsAotRuntime || was_child_cloned_into_existing_isolate) { #if !defined(TARGET_ARCH_IA32) ASSERT(IG->object_store()->build_generic_method_extractor_code() != Code::null()); ASSERT(IG->object_store()->build_nongeneric_method_extractor_code() != Code::null()); #endif } else { #if !defined(TARGET_ARCH_IA32) if (I != Dart::vm_isolate()) { if (IG->object_store()->build_generic_method_extractor_code() != nullptr) { SafepointWriteRwLocker ml(T, IG->program_lock()); if (IG->object_store()->build_generic_method_extractor_code() != nullptr) { IG->object_store()->set_build_generic_method_extractor_code( Code::Handle( StubCode::GetBuildGenericMethodExtractorStub(nullptr))); } } if (IG->object_store()->build_nongeneric_method_extractor_code() != nullptr) { SafepointWriteRwLocker ml(T, IG->program_lock()); if (IG->object_store()->build_nongeneric_method_extractor_code() != nullptr) { IG->object_store()->set_build_nongeneric_method_extractor_code( Code::Handle( StubCode::GetBuildNonGenericMethodExtractorStub(nullptr))); } } } #endif // !defined(TARGET_ARCH_IA32) } I->set_ic_miss_code(StubCode::SwitchableCallMiss()); Error& error = Error::Handle(); if (snapshot_data == nullptr || kernel_buffer != nullptr) { error ^= IG->object_store()->PreallocateObjects(); if (!error.IsNull()) { return error.ptr(); } } const auto& out_of_memory = Object::Handle(IG->object_store()->out_of_memory()); error ^= I->isolate_object_store()->PreallocateObjects(out_of_memory); if (!error.IsNull()) { return error.ptr(); } if (!was_child_cloned_into_existing_isolate) { IG->heap()->InitGrowthControl(); } I->set_init_callback_data(isolate_data); if (FLAG_print_class_table) { IG->class_table()->Print(); } #if !defined(PRODUCT) ServiceIsolate::MaybeMakeServiceIsolate(I); if (!Isolate::IsSystemIsolate(I)) { I->message_handler()->set_should_pause_on_start( FLAG_pause_isolates_on_start); I->message_handler()->set_should_pause_on_exit(FLAG_pause_isolates_on_exit); } #endif // !defined(PRODUCT) ServiceIsolate::SendIsolateStartupMessage(); #if !defined(PRODUCT) I->debugger()->NotifyIsolateCreated(); #endif // Create tag table. I->set_tag_table(GrowableObjectArray::Handle(GrowableObjectArray::New())); // Set up default UserTag. const UserTag& default_tag = UserTag::Handle(UserTag::DefaultTag()); I->set_current_tag(default_tag); I->init_loaded_prefixes_set_storage(); return Error::null(); }\",\"可以看到，如果是调用Isolate.spawn()的话，先从当前 isolate 获取对应的 Isolate Group，然后使用这个 Isolate Group 创建配置一个新的 isolate，这样在同一个 isolate group 中的 Isolate 可以共享常量，heap 等。\"]},\"754\":{\"h\":\"Isolate_spawnUri\",\"t\":[\"如果是使用Isolate.spawnUri()的话，就会通过Isolate_spawnUri来创建 isolate。\",\"// -> runtime\\\\lib\\\\isolate.cc DEFINE_NATIVE_ENTRY(Isolate_spawnUri, 0, 12) { // 解析参数 ... // Canonicalize the uri with respect to the current isolate. const Library& root_lib = Library::Handle(isolate->group()->object_store()->root_library()); char* error = NULL; // 获取 canonical_uri const char* **canonical_uri = CanonicalizeUri**(thread, root_lib, uri, &error); if (canonical_uri == NULL) { const String& msg = String::Handle(String::New(error)); ThrowIsolateSpawnException(msg); } const char* utf8_package_config = packageConfig.IsNull() ? NULL : String2UTF8(packageConfig); const char* utf8_debug_name = debugName.IsNull() ? NULL : String2UTF8(debugName); std::unique_ptr<IsolateSpawnState> state(new **IsolateSpawnState**( port.Id(), canonical_uri, utf8_package_config, &arguments_buffer, &message_buffer, paused.value(), fatal_errors, on_exit_port, // 注意下面这里的 group=nullptr on_error_port, utf8_debug_name, **/*group=*/nullptr**)); // If we were passed a value then override the default flags state for // checked mode. if (!checked.IsNull()) { Dart_IsolateFlags* flags = state->isolate_flags(); flags->enable_asserts = checked.value(); } // Since this is a call to Isolate.spawnUri, don't copy the parent's code. state->isolate_flags()->copy_parent_code = false; isolate->group()->thread_pool()->**Run<SpawnIsolateTask>**(isolate, std::move(state)); return Object::null(); }\",\"可以看到Isolate_spawnUri还是执行了SpawnIsolateTask 。\"]},\"755\":{\"h\":\"SpawnIsolateTask\",\"t\":[\"在SpawnIsolateTask.Run方法中，因为spawnUri中IsolateSpawnState的IsolateGroup为nulltrp，所以这里执行的是RunHeavyweight(name)：\"]},\"756\":{\"h\":\"RunHeavyweight\",\"t\":[\"// -> class SpawnIsolateTask : public ThreadPool::Task { void Run() override { const char* name = (state_->debug_name() == nullptr) ? state_->function_name() : state_->debug_name(); ASSERT(name != nullptr); auto group = state_->isolate_group(); if (group == nullptr) { **RunHeavyweight(name);** } else { RunLightweight(name); } } void RunHeavyweight(const char* name) { // The create isolate group callback is mandatory. If not provided we // cannot spawn isolates. // 在 Dart::DartInit 中已经被设置，在 Isolate 创建时会被回调 **auto create_group_callback = Isolate::CreateGroupCallback();** if (create_group_callback == nullptr) { FailedSpawn(\\\"Isolate spawn is not supported by this Dart embedder\\\\n\\\"); return; } char* error = nullptr; // Make a copy of the state's isolate flags and hand it to the callback. Dart_IsolateFlags api_flags = *(state_->isolate_flags()); api_flags.is_system_isolate = false; // 创建 isolate **Dart_Isolate isolate = (create_group_callback)(state_->script_url(), name, nullptr, state_->package_config(), &api_flags, parent_isolate_->init_callback_data(), &error);** parent_isolate_->DecrementSpawnCount(); parent_isolate_ = nullptr; if (isolate == nullptr) { FailedSpawn(error, /*has_current_isolate=*/false); free(error); return; } // 切换到指定的 isolate Dart_EnterIsolate(isolate); // 这里也调用了 Run 方法 **Run(reinterpret_cast<Isolate*>(isolate));** } }\",\"主要创建 Isolate 的过程在Isolate::CreateGroupCallback();中，让我们看一下他是怎么来的：\"]},\"757\":{\"h\":\"Isolate::CreateGroupCallback()\",\"t\":[\"他和上述Isolate::InitializeCallback_的来源一致，都是在Dart_Initialize中配置的，此外，还使用了parent_isolate_->init_callback_data()。\",\"先看一下的CreateIsolateGroupAndSetup实现：\",\"// -> runtime\\\\bin\\\\main.cc static Dart_Isolate CreateIsolateGroupAndSetup(const char* script_uri, const char* main, const char* package_root, const char* package_config, Dart_IsolateFlags* flags, void* callback_data, char** error) { // The VM should never call the isolate helper with a NULL flags. ASSERT(flags != NULL); ASSERT(flags->version == DART_FLAGS_CURRENT_VERSION); ASSERT(package_root == nullptr); bool dontneed_safe = true; #if defined(DART_HOST_OS_LINUX) // This would also be true in Linux, except that Google3 overrides the default // ELF interpreter to one that apparently doesn't create proper mappings. dontneed_safe = false; #elif defined(DEBUG) // If the snapshot isn't file-backed, madvise(DONT_NEED) is destructive. if (Options::force_load_elf_from_memory()) { dontneed_safe = false; } #endif flags->snapshot_is_dontneed_safe = dontneed_safe; int exit_code = 0; #if !defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM) if (strcmp(script_uri, DART_KERNEL_ISOLATE_NAME) == 0) { return **CreateAndSetupKernelIsolate**(script_uri, package_config, flags, error, &exit_code); } #endif // !defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM) #if !defined(DART_PRECOMPILED_RUNTIME) if (strcmp(script_uri, DART_DEV_ISOLATE_NAME) == 0) { return **CreateAndSetupDartDevIsolate**(script_uri, package_config, flags, error, &exit_code); } #endif // !defined(DART_PRECOMPILED_RUNTIME) if (strcmp(script_uri, DART_VM_SERVICE_ISOLATE_NAME) == 0) { return **CreateAndSetupServiceIsolate**(script_uri, package_config, flags, error, &exit_code); } bool is_main_isolate = false; return **CreateIsolateGroupAndSetupHelper**(is_main_isolate, script_uri, main, package_config, flags, callback_data, error, &exit_code); }\",\"这里创建 Isolate 的时候，区分了几种情况：\",\"如果是 kernel-service（DART_KERNEL_ISOLATE_NAME）就执行CreateAndSetupKernelIsolate\",\"如果是 dartdev（DART_DEV_ISOLATE_NAME）就执行CreateAndSetupDartDevIsolate\",\"如果是 vm-service（DART_VM_SERVICE_ISOLATE_NAME）就执行CreateAndSetupServiceIsolate\",\"如果以上都不满足，就执行CreateIsolateGroupAndSetupHelper\",\"显然，当我们在 Dart 代码中调用Isolate.spawnUri的时候，这里会执行的是CreateIsolateGroupAndSetupHelper：\",\"// -> runtime\\\\bin\\\\main.cc // 调用方 bool is_main_isolate = false; return CreateIsolateGroupAndSetupHelper(is_main_isolate, script_uri, main, package_config, flags, callback_data, error, &exit_code); // Returns newly created Isolate on success, NULL on failure. static Dart_Isolate CreateIsolateGroupAndSetupHelper( bool is_main_isolate, const char* script_uri, const char* name, const char* packages_config, Dart_IsolateFlags* flags, void* callback_data, char** error, int* exit_code) { ... // 根据是 AOT 还是 JIT 获取 kernel_buffer，app_snapshot，isolate_run_app_snapshot 等数据 #if defined(DART_PRECOMPILED_RUNTIME){ // AOT: All isolates need to be run from AOT compiled snapshots. } #else{ // JIT: Main isolate starts from the app snapshot, if any. Other isolates // use the core libraries snapshot. } // 创建 isolate_group_data auto isolate_group_data = new IsolateGroupData( script_uri, packages_config, app_snapshot, isolate_run_app_snapshot); // copy_parent_code 为 true 的话，这里的 kernel_buffer 为 NULL if (kernel_buffer != NULL) { if (kernel_buffer_ptr) { isolate_group_data->SetKernelBufferAlreadyOwned( std::move(kernel_buffer_ptr), kernel_buffer_size); } else { isolate_group_data->SetKernelBufferNewlyOwned(kernel_buffer, kernel_buffer_size); } } Dart_Isolate isolate = NULL; IsolateData* isolate_data = nullptr; #if !defined(DART_PRECOMPILED_RUNTIME) if (!isolate_run_app_snapshot && (isolate_snapshot_data == NULL)) { const uint8_t* platform_kernel_buffer = NULL; intptr_t platform_kernel_buffer_size = 0; dfe.LoadPlatform(&platform_kernel_buffer, &platform_kernel_buffer_size); if (platform_kernel_buffer == NULL) { platform_kernel_buffer = kernel_buffer; platform_kernel_buffer_size = kernel_buffer_size; } if (platform_kernel_buffer == NULL) { #if defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM) FATAL( \\\"Binary built with --exclude-kernel-service. Cannot run\\\" \\\" from source.\\\"); #else FATAL(\\\"platform_program cannot be NULL.\\\"); #endif // defined(EXCLUDE_CFE_AND_KERNEL_PLATFORM) } // TODO(sivachandra): When the platform program is unavailable, check if // application kernel binary is self contained or an incremental binary. // Isolate should be created only if it is a self contained kernel binary. isolate_data = new IsolateData(isolate_group_data); isolate = Dart_CreateIsolateGroupFromKernel( script_uri, name, platform_kernel_buffer, platform_kernel_buffer_size, flags, isolate_group_data, isolate_data, error); } else { isolate_data = new IsolateData(isolate_group_data); // Creates a new isolate. The new isolate becomes the current isolate. isolate = Dart_CreateIsolateGroup(script_uri, name, isolate_snapshot_data, isolate_snapshot_instructions, flags, isolate_group_data, isolate_data, error); } #else **isolate_data = new IsolateData**(isolate_group_data); // Creates a new isolate. The new isolate becomes the current isolate. **isolate = Dart_CreateIsolateGroup**(script_uri, name, isolate_snapshot_data, isolate_snapshot_instructions, flags, **isolate_group_data**, **isolate_data**, error); #endif // !defined(DART_PRECOMPILED_RUNTIME) Dart_Isolate created_isolate = NULL; if (isolate == NULL) { delete isolate_data; delete isolate_group_data; } else { **created_isolate = IsolateSetupHelper**( isolate, is_main_isolate, script_uri, packages_config, isolate_run_app_snapshot, flags, error, exit_code); } int64_t end = Dart_TimelineGetMicros(); Dart_TimelineEvent(\\\"CreateIsolateGroupAndSetupHelper\\\", start, end, Dart_Timeline_Event_Duration, 0, NULL, NULL); return created_isolate; }\",\"这里可以看到，CreateIsolateGroupAndSetupHelper按照是 JIT 还是 AOT 的编译方式，有不同的获取数据的方式，但不管哪种方式，最后都执行了一下三步：\",\"创建IsolateData* isolate_data 使用isolate_group_data创建 IsolateData\",\"创建Dart_Isolate isolate 创建Dart_Isolate，将script_uri，isolate_data，和isolate_group_data等绑定\",\"创建并返回Dart_Isolate created_isolate包装isolate ，进行数据绑定，并将 isolate 标记为runnable\"]},\"758\":{\"h\":\"Dart_CreateIsolateGroup\",\"t\":[\"这里分析一下**Dart_CreateIsolateGroup的过程：**\",\"// --> runtime/vm/dart_api_impl.cc#L1371 DART_EXPORT Dart_Isolate Dart_CreateIsolateGroup(const char* script_uri, const char* name, const uint8_t* snapshot_data, const uint8_t* snapshot_instructions, Dart_IsolateFlags* flags, void* isolate_group_data, void* isolate_data, char** error) { API_TIMELINE_DURATION(Thread::Current()); Dart_IsolateFlags api_flags; if (flags == nullptr) { Isolate::FlagsInitialize(&api_flags); flags = &api_flags; } const char* non_null_name = name == nullptr ? \\\"isolate\\\" : name; std::unique_ptr<IsolateGroupSource> source( new IsolateGroupSource(script_uri, non_null_name, snapshot_data, snapshot_instructions, nullptr, -1, *flags)); // 创建 Isolate Group auto group = new IsolateGroup(std::move(source), isolate_group_data, *flags); // 创建 Isolate Group 持有的 Heap，由所有在这个 Isolate Group 下的 isolate 共享 group->CreateHeap( /*is_vm_isolate=*/false, IsServiceOrKernelIsolateName(non_null_name)); IsolateGroup::RegisterIsolateGroup(group); // 根据刚刚创建的 Isolate Group 创建 Isolate Dart_Isolate isolate = CreateIsolate(group, /*is_new_group=*/true, non_null_name, isolate_data, error); if (isolate != nullptr) { group->set_initial_spawn_successful(); } return isolate; }\"]},\"759\":{\"h\":\"Run(Isolate* child)\",\"t\":[\"在上面的分析中，我们注意到，无论是RunHeavyweight(const char* name)还是RunLightweight(const char* name)方法，最后在创建了新的 isolate 之后，都执行了Run(Isolate* child)方法，在这里正式启动了 isolate：\",\"// -> runtime\\\\lib\\\\isolate.cc void Run(Isolate* child) { if (!EnsureIsRunnable(child)) { Dart_ShutdownIsolate(); return; } state_->set_isolate(child); if (state_->origin_id() != ILLEGAL_PORT) { // origin_id is set to parent isolate main port id when spawning via // spawnFunction. child->set_origin_id(state_->origin_id()); } bool success = true; { auto thread = Thread::Current(); // TransitionNativeToVM is used to transition the safepoint state of a // thread from \\\"running native code\\\" to \\\"running vm code\\\" and ensures // that the state is reverted back to \\\"running native code\\\" when // exiting the scope/frame. TransitionNativeToVM transition(thread); // Create an empty zone and set is at the current zone for the Thread. StackZone zone(thread); // The class HandleScope is used to start a new handles scope in the // code. HandleScope hs(thread); success = **EnqueueEntrypointInvocationAndNotifySpawner**(thread); } if (!success) { state_ = nullptr; Dart_ShutdownIsolate(); return; } // All preconditions are met for this to always succeed. char* error = nullptr; // Lets the VM run message processing for the isolate. if (!**Dart_RunLoopAsync**(state_->errors_are_fatal(), state_->on_error_port(), state_->on_exit_port(), &error)) { FATAL(\\\"Dart_RunLoopAsync() failed: %s. Please file a Dart VM bug report.\\\", error); } }\",\"这里只是做了一些环境准备，然后在EnqueueEntrypointInvocationAndNotifySpawner方法中将 isolate 要运行的所有东西都准备好，然后再在Dart_RunLoopAsync方法中正式开始 isolate 处理 event queue.\",\"EnqueueEntrypointInvocationAndNotifySpawner\",\"// -> runtime\\\\lib\\\\isolate.cc bool EnqueueEntrypointInvocationAndNotifySpawner(Thread* thread) { auto isolate = thread->isolate(); auto zone = thread->zone(); const bool is_spawn_uri = state_->is_spawn_uri(); // Step 1) Resolve the entrypoint function. // 查找 isolate 开始运行的第一个方法，比如 Isolate.spawn 的 spawn 或者 Isolate.spawnUri 的 main 方法 auto& entrypoint_closure = Closure::Handle(zone); if (state_->closure_tuple_handle() != nullptr) { const auto& result = Object::Handle( zone, ReadObjectGraphCopyMessage(thread, state_->closure_tuple_handle())); if (result.IsError()) { ReportError( \\\"Failed to deserialize the passed entrypoint to the new isolate.\\\"); return false; } entrypoint_closure = Closure::RawCast(result.ptr()); } else { const auto& result = Object::Handle(zone, state_->ResolveFunction()); if (result.IsError()) { ASSERT(is_spawn_uri); ReportError(\\\"Failed to resolve entrypoint function.\\\"); return false; } ASSERT(result.IsFunction()); auto& func = Function::Handle(zone, Function::Cast(result).ptr()); func = func.ImplicitClosureFunction(); entrypoint_closure = func.ImplicitStaticClosure(); } // Step 2) Enqueue delayed invocation of entrypoint callback. const auto& args_obj = Object::Handle(zone, state_->BuildArgs(thread)); if (args_obj.IsError()) { ReportError( \\\"Failed to deserialize the passed arguments to the new isolate.\\\"); return false; } ASSERT(args_obj.IsNull() || args_obj.IsInstance()); const auto& message_obj = Object::Handle(zone, state_->BuildMessage(thread)); if (message_obj.IsError()) { ReportError( \\\"Failed to deserialize the passed arguments to the new isolate.\\\"); return false; } ASSERT(message_obj.IsNull() || message_obj.IsInstance()); // 解析参数，分别是 isolate 初始运行方法，参数 args、messgae、是否 spawn_uri const Array& args = Array::Handle(zone, Array::New(4)); args.SetAt(0, entrypoint_closure); args.SetAt(1, args_obj); args.SetAt(2, message_obj); args.SetAt(3, is_spawn_uri ? Bool::True() : Bool::False()); const auto& lib = Library::Handle(zone, Library::IsolateLibrary()); const auto& entry_name = String::Handle(zone, String::New(\\\"_startIsolate\\\")); const auto& entry_point = Function::Handle(zone, lib.LookupLocalFunction(entry_name)); ASSERT(entry_point.IsFunction() && !entry_point.IsNull()); const auto& result = Object::Handle(zone, DartEntry::InvokeFunction(entry_point, args)); if (result.IsError()) { ReportError(\\\"Failed to enqueue delayed entrypoint invocation.\\\"); return false; } // Step 3) Pause the isolate if required & Notify parent isolate about // isolate creation. const auto& capabilities = Array::Handle(zone, Array::New(2)); auto& capability = Capability::Handle(zone); capability = Capability::New(isolate->pause_capability()); capabilities.SetAt(0, capability); capability = Capability::New(isolate->terminate_capability()); capabilities.SetAt(1, capability); const auto& send_port = SendPort::Handle(zone, SendPort::New(isolate->main_port())); const auto& message = Array::Handle(zone, Array::New(2)); message.SetAt(0, send_port); message.SetAt(1, capabilities); if (state_->paused()) { capability ^= capabilities.At(0); const bool added = isolate->AddResumeCapability(capability); ASSERT(added); isolate->message_handler()->increment_paused(); } { // If parent isolate died, we ignore the fact that we cannot notify it. // 创建一个新的 Message 并将其压入 Isolate 的父 Isolate 对应的 MessageHandler 的 event queue 中 PortMap::PostMessage(WriteMessage(/* can_send_any_object */ false, /* same_group */ false, message, state_->parent_port(), Message::kNormalPriority)); } return true; }\",\"这里主要做了 3 件事：\",\"查找 isolate 开始运行的第一个方法entrypoint，比如Isolate.spawn的entrypoint或者Isolate.spawnUri的main方法\",\"解析参数，分别是 isolate 初始运行方法，参数args、messgae、是否spawn_uri等等，将其与上一步找到的entrypoint结合\",\"（如果需要的话暂停创建好的 isolate），并通知 isolate 的父 isolate 当前 isolate 创建成功（附带当前 isolate 的send_port）\",\"至此，Isolate 的创建工作已经完成，在Dart_RunLoopAsync开始 isolate 处理消息：\",\"Dart_RunLoopAsync\",\"在这里主要是开始处理 event loop。\",\"// -> runtime\\\\vm\\\\dart_api_impl.cc DART_EXPORT bool Dart_RunLoopAsync(bool errors_are_fatal, Dart_Port on_error_port, Dart_Port on_exit_port, char** error) { auto thread = Thread::Current(); auto isolate = thread->isolate(); CHECK_ISOLATE(isolate); *error = nullptr; if (thread->api_top_scope() != nullptr) { *error = Utils::StrDup(\\\"There must not be an active api scope.\\\"); return false; } if (!isolate->is_runnable()) { const char* error_msg = isolate->MakeRunnable(); if (error_msg != nullptr) { *error = Utils::StrDup(error_msg); return false; } } isolate->SetErrorsFatal(errors_are_fatal); if (on_error_port != ILLEGAL_PORT || on_exit_port != ILLEGAL_PORT) { auto thread = Thread::Current(); TransitionNativeToVM transition(thread); StackZone zone(thread); if (on_error_port != ILLEGAL_PORT) { const auto& port = SendPort::Handle(thread->zone(), SendPort::New(on_error_port)); isolate->AddErrorListener(port); } if (on_exit_port != ILLEGAL_PORT) { const auto& port = SendPort::Handle(thread->zone(), SendPort::New(on_exit_port)); isolate->AddExitListener(port, Instance::null_instance()); } } Dart_ExitIsolate(); **isolate->Run();** return true; } // -> runtime\\\\vm\\\\isolate.cc void Isolate::Run() { message_handler()->Run(group()->thread_pool(), nullptr, ShutdownIsolate, reinterpret_cast<uword>(this)); }\",\"Isolate::Run()实际上是开启了处理消息队列：\",\"// -> // Runs this message handler on the thread pool. // // Before processing messages, the optional StartFunction is run. // // A message handler will run until it terminates either normally or // abnormally. Normal termination occurs when the message handler // no longer has any live ports. Abnormal termination occurs when // HandleMessage() indicates that an error has occurred during // message processing. // Returns false if the handler terminated abnormally, otherwise it // returns true. bool MessageHandler::Run(ThreadPool* pool, StartCallback start_callback, EndCallback end_callback, CallbackData data) { MonitorLocker ml(&monitor_); if (FLAG_trace_isolates) { OS::PrintErr( \\\"[+] Starting message handler:\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\", name()); } ASSERT(pool_ == NULL); ASSERT(!delete_me_); pool_ = pool; start_callback_ = start_callback; end_callback_ = end_callback; callback_data_ = data; task_running_ = true; bool result = **pool_->Run<MessageHandlerTask>(this);** if (!result) { pool_ = nullptr; start_callback_ = nullptr; end_callback_ = nullptr; callback_data_ = 0; task_running_ = false; } return result; } // -> runtime\\\\vm\\\\thread_pool.h class ThreadPool { bool Run(Args&&... args) { return RunImpl(std::unique_ptr<Task>(new T(std::forward<Args>(args)...))); } ... } // -> runtime\\\\vm\\\\thread_pool.cc bool ThreadPool::RunImpl(std::unique_ptr<Task> task) { Worker* new_worker = nullptr; { MonitorLocker ml(&pool_monitor_); if (shutting_down_) { return false; } // 从线程池中获取 task，如果有空闲的/达到最大数量就尝试复用（此时这里返回 null） // 否则创建新的并返回 new_worker = **ScheduleTaskLocked**(&ml, std::move(task)); } if (new_worker != nullptr) { // 创建一个新的 Worker 在新的系统线程运行 task new_worker->**StartThread()**; } return true; } void ThreadPool::Worker::StartThread() { // 创建一个新的系统线程，运行指定的代码， // android 的实现在 runtime\\\\vm\\\\os_thread_android.cc int result = OSThread::Start(\\\"DartWorker\\\", &**Worker::Main**, reinterpret_cast<uword>(this)); if (result != 0) { FATAL1(\\\"Could not start worker thread: result = %d.\\\", result); } }\",\"这里通过ThreadPool::ScheduleTaskLocked方法获取new_worker：\",\"如果已有的 worker 有空闲的或者已经达到最大数目了，就等待已有的 worker 执行任务\",\"否则就创建新的 worker，并在新的线程运行\",\"在获取到 worker 之后，就执行MessageHandlerTask（见下文详细分析）。\",\"我们主要关注 3 点：\",\"ScheduleTaskLocked 分配 Worker\",\"OSThread::Start中使用&Worker::Main 在新系统线程开启 Worker 循环\",\"MessageHandlerTask 执行具体的消息分发内容\"]},\"760\":{\"h\":\"\",\"t\":[\"先详细看一下获取new_worker的ThreadPool::ScheduleTaskLocked方法：\",\"// -> runtime\\\\vm\\\\thread_pool.cc ThreadPool::Worker* ThreadPool::ScheduleTaskLocked(MonitorLocker* ml, std::unique_ptr<Task> task) { // Enqueue the new task. tasks_.Append(task.release()); pending_tasks_++; ASSERT(pending_tasks_ >= 1); // Notify existing idle worker (if available). if (count_idle_ >= pending_tasks_) { ASSERT(!idle_workers_.IsEmpty()); ml->Notify(); return nullptr; } // If we have maxed out the number of threads running, we will not start a // new one. if (max_pool_size_ > 0 && (count_idle_ + count_running_) >= max_pool_size_) { if (!idle_workers_.IsEmpty()) { ml->Notify(); } return nullptr; } // Otherwise start a new worker. auto new_worker = new Worker(this); idle_workers_.Append(new_worker); count_idle_++; return new_worker; }\",\"这里的逻辑是：\",\"将当前任务加入到tasks_队列中。\",\"如果空闲count_idle_ 的 Worker 比等待中的任务数pending_tasks_多，那就发送通知，使用已有的 Worker 处理任务。\",\"如果当前 Worker 数量已经最大了，那就将等待中的任务数 pendingtasks 加一，等待有空闲的 Worker 处理任务。\",\"否则，就新建一个 Worker（会对应创建一个新的系统线程）来处理任务。\"]},\"761\":{\"h\":\"&\",\"t\":[\"在ThreadPool::RunImpl(std::unique_ptr<Task> task)这里，StartThread 的第二个参数，**&Worker::Main**启动了一个循环，不断的在任务队列tasks_中取出消息并执行：\",\"// -> runtime\\\\vm\\\\thread_pool.cc ThreadPool::Worker::Main(uword args){ Worker* worker = reinterpret_cast<Worker*>(args); ThreadPool* pool = worker->pool_; pool->WorkerLoop(worker); } void ThreadPool::WorkerLoop(Worker* worker) { WorkerList dead_workers_to_join; while (true) { MonitorLocker ml(&pool_monitor_); // worker 会从 task_取出一个 task 并运行 if (!tasks_.IsEmpty()) { IdleToRunningLocked(worker); while (!tasks_.IsEmpty()) { std::unique_ptr<Task> task(tasks_.RemoveFirst()); pending_tasks_--; MonitorLeaveScope mls(&ml); **task->Run();** ASSERT(Isolate::Current() == nullptr); task.reset(); } RunningToIdleLocked(worker); } if (running_workers_.IsEmpty()) { ASSERT(tasks_.IsEmpty()); OnEnterIdleLocked(&ml); if (!tasks_.IsEmpty()) { continue; } } if (shutting_down_) { ObtainDeadWorkersLocked(&dead_workers_to_join); IdleToDeadLocked(worker); break; } // Sleep until we get a new task, we time out or we're shutdown. const int64_t idle_start = OS::GetCurrentMonotonicMicros(); bool done = false; while (!done) { const auto result = ml.WaitMicros(ComputeTimeout(idle_start)); // We have to drain all pending tasks. if (!tasks_.IsEmpty()) break; if (shutting_down_ || result == Monitor::kTimedOut) { done = true; break; } } if (done) { ObtainDeadWorkersLocked(&dead_workers_to_join); IdleToDeadLocked(worker); break; } } // Before we transitioned to dead we obtained the list of previously died dead // workers, which we join here. Since every death of a worker will join // previously died workers, we keep the pending non-joined [dead_workers_] to // effectively 1. JoinDeadWorkersLocked(&dead_workers_to_join); }\",\"MessageHandlerTask\",\"无论是哪种 Worker，最后都是执行的MessageHandlerTask：\",\"// -> runtime\\\\vm\\\\message_handler.cc class MessageHandlerTask : public ThreadPool::Task { public: explicit MessageHandlerTask(MessageHandler* handler) : handler_(handler) { ASSERT(handler != NULL); } virtual void Run() { ASSERT(handler_ != NULL); handler_->TaskCallback(); } void MessageHandler::TaskCallback() { ASSERT(Isolate::Current() == NULL); MessageStatus status = kOK; bool run_end_callback = false; bool delete_me = false; EndCallback end_callback = NULL; CallbackData callback_data = 0; { // We will occasionally release and reacquire this monitor in this // function. Whenever we reacquire the monitor we *must* process // all pending OOB messages, or we may miss a request for vm // shutdown. MonitorLocker ml(&monitor_); // This method is running on the message handler task. Which means no // other message handler tasks will be started until this one sets // [task_running_] to false. ASSERT(task_running_); #if !defined(PRODUCT) if (ShouldPauseOnStart(kOK)) { if (!is_paused_on_start()) { PausedOnStartLocked(&ml, true); } // More messages may have come in before we (re)acquired the monitor. status = HandleMessages(&ml, false, false); if (ShouldPauseOnStart(status)) { // Still paused. ASSERT(oob_queue_->IsEmpty()); task_running_ = false; // No task in queue. return; } else { PausedOnStartLocked(&ml, false); } } if (is_paused_on_exit()) { status = HandleMessages(&ml, false, false); if (ShouldPauseOnExit(status)) { // Still paused. ASSERT(oob_queue_->IsEmpty()); task_running_ = false; // No task in queue. return; } else { PausedOnExitLocked(&ml, false); } } #endif // !defined(PRODUCT) if (status == kOK) { if (start_callback_ != nullptr) { // Initialize the message handler by running its start function, // if we have one. For an isolate, this will run the isolate's // main() function. // // Release the monitor_ temporarily while we call the start callback. ml.Exit(); status = start_callback_(callback_data_); ASSERT(Isolate::Current() == NULL); start_callback_ = NULL; ml.Enter(); } // Handle any pending messages for this message handler. if (status != kShutdown) { status = HandleMessages(&ml, (status == kOK), true); } } // The isolate exits when it encounters an error or when it no // longer has live ports. if (status != kOK || !HasLivePorts()) { #if !defined(PRODUCT) if (ShouldPauseOnExit(status)) { if (FLAG_trace_service_pause_events) { OS::PrintErr( \\\"Isolate %s paused before exiting. \\\" \\\"Use the Observatory to release it.\\\\n\\\", name()); } PausedOnExitLocked(&ml, true); // More messages may have come in while we released the monitor. **status = HandleMessages(&ml, false, false);** if (ShouldPauseOnExit(status)) { // Still paused. ASSERT(oob_queue_->IsEmpty()); task_running_ = false; // No task in queue. return; } else { PausedOnExitLocked(&ml, false); } } #endif // !defined(PRODUCT) if (FLAG_trace_isolates) { if (status != kOK && thread() != NULL) { const Error& error = Error::Handle(thread()->sticky_error()); OS::PrintErr( \\\"[-] Stopping message handler (%s):\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\" \\\"\\\\terror: %s\\\\n\\\", MessageStatusString(status), name(), error.ToCString()); } else { OS::PrintErr( \\\"[-] Stopping message handler (%s):\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\", MessageStatusString(status), name()); } } pool_ = NULL; // Decide if we have a callback before releasing the monitor. end_callback = end_callback_; callback_data = callback_data_; run_end_callback = end_callback_ != NULL; delete_me = delete_me_; } // Clear task_running_ last. This allows other tasks to potentially start // for this message handler. ASSERT(oob_queue_->IsEmpty()); task_running_ = false; } // The handler may have been deleted by another thread here if it is a native // message handler. // Message handlers either use delete_me or end_callback but not both. ASSERT(!delete_me || !run_end_callback); if (run_end_callback) { ASSERT(end_callback != NULL); end_callback(callback_data); // The handler may have been deleted after this point. } if (delete_me) { delete this; } }\",\"可以看到，这里执行了MessageHandler::HandleMessages方法，来处理消息：\",\"// -> runtime\\\\vm\\\\message_handler.cc MessageHandler::MessageStatus MessageHandler::HandleMessages( MonitorLocker* ml, bool allow_normal_messages, bool allow_multiple_normal_messages) { ASSERT(monitor_.IsOwnedByCurrentThread()); // Scheduling of the mutator thread during the isolate start can cause this // thread to safepoint. // We want to avoid holding the message handler monitor during the safepoint // operation to avoid possible deadlocks, which can occur if other threads are // sending messages to this message handler. // // If isolate() returns nullptr [StartIsolateScope] does nothing. ml->Exit(); StartIsolateScope start_isolate(isolate()); ml->Enter(); auto idle_time_handler = isolate() != nullptr ? isolate()->group()->idle_time_handler() : nullptr; MessageStatus max_status = kOK; Message::Priority min_priority = ((allow_normal_messages && !paused()) ? Message::kNormalPriority : Message::kOOBPriority); std::unique_ptr<Message> **message = DequeueMessage(min_priority);** while (message != nullptr) { intptr_t message_len = message->Size(); if (FLAG_trace_isolates) { OS::PrintErr( \\\"[<] Handling message:\\\\n\\\" \\\"\\\\tlen: %\\\" Pd \\\"\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\" \\\"\\\\tport: %\\\" Pd64 \\\"\\\\n\\\", message_len, name(), message->dest_port()); } // Release the monitor_ temporarily while we handle the message. // The monitor was acquired in MessageHandler::TaskCallback(). ml->Exit(); Message::Priority saved_priority = message->priority(); Dart_Port saved_dest_port = message->dest_port(); MessageStatus status = kOK; { DisableIdleTimerScope disable_idle_timer(idle_time_handler); status = HandleMessage(std::move(message)); } if (status > max_status) { max_status = status; } ml->Enter(); if (FLAG_trace_isolates) { OS::PrintErr( \\\"[.] Message handled (%s):\\\\n\\\" \\\"\\\\tlen: %\\\" Pd \\\"\\\\n\\\" \\\"\\\\thandler: %s\\\\n\\\" \\\"\\\\tport: %\\\" Pd64 \\\"\\\\n\\\", MessageStatusString(status), message_len, name(), saved_dest_port); } // If we are shutting down, do not process any more messages. if (status == kShutdown) { ClearOOBQueue(); break; } // Remember time since the last message. Don't consider OOB messages so // using Observatory doesn't trigger additional idle tasks. if ((FLAG_idle_timeout_micros != 0) && (saved_priority == Message::kNormalPriority)) { if (idle_time_handler != nullptr) { idle_time_handler->UpdateStartIdleTime(); } } // Some callers want to process only one normal message and then quit. At // the same time it is OK to process multiple OOB messages. if ((saved_priority == Message::kNormalPriority) && !allow_multiple_normal_messages) { // We processed one normal message. Allow no more. allow_normal_messages = false; } // Reevaluate the minimum allowable priority. The paused state // may have changed as part of handling the message. We may also // have encountered an error during message processing. // // Even if we encounter an error, we still process pending OOB // messages so that we don't lose the message notification. min_priority = (((max_status == kOK) && allow_normal_messages && !paused()) ? Message::kNormalPriority : Message::kOOBPriority); message = DequeueMessage(min_priority); } return max_status; }\",\"MessageHandler::DequeueMessage则是按照优先级，依次从oob_queue_和queue_中获取消息：\",\"// -> runtime\\\\vm\\\\message_handler.cc std::unique_ptr<Message> MessageHandler::DequeueMessage( Message::Priority min_priority) { // TODO(turnidge): Add assert that monitor_ is held here. std::unique_ptr<Message> message = oob_queue_->Dequeue(); if ((message == nullptr) && (min_priority < Message::kOOBPriority)) { message = queue_->Dequeue(); } return message; }\",\"关于oob_queue_和queue_ 的区别如下：\",\"// -> class MessageHandler { MessageQueue* queue_; MessageQueue* oob_queue_; ... } // -> runtime\\\\vm\\\\message.h class Message { // A message processed at any interrupt point (stack overflow check) instead // of at the top of the message loop. Control messages from dart:isolate or // vm-service requests. bool IsOOB() const { return priority_ == Message::kOOBPriority; } }\",\"这里消息处理的步骤也启动了。\",\"总结一下，Dart_RunLoopAsync的主要功能是触发 isolate 的message_handler处理消息分发：\",\"Dart_RunLoopAsync → Isolate::Run() → message_handler()->Run() → pool_->Run<MessageHandlerTask>→ThreadPool::RunImpl\",\"在ThreadPool::RunImpl(std::unique_ptr<Task> task)这里主要触发了 2 步：\",\"ScheduleTaskLocked获取到new_worker\",\"new_worker调用ThreadPool::Worker::StartThread()方法开启循环\",\"然后根据是否创建了new_worker有两种情况：\",\"有new_worker，使用在OSThread::Start方法中创建了一个新的系统线程，执行ThreadPool::Worker::Main（这个方法的主要作用使用new_worker从线程池中的取出任务执行）\",\"没有new_worker，那么等待已有的 Worker 空闲时执行任务\",\"无论如何，这里的 Worker 要执行的任务都是在MessageHandler::Run方法中指定的MessageHandlerTask ，而这个任务的内容便是开启MessageHandler::HandleMessages 方法，按照优先级不断的依次从oob_queue_和queue_中获取消息并处理。\"]},\"762\":{\"h\":\"总结\",\"t\":[\"Isolate 是 Dart 代码运行的地方，拥有独立的 event loop，和全局变量，在自己单独的线程运行。\",\"Isolate.spawn 默认会创建在同一个 IsolateGroup 中的 Isolate，他们之间共享 Heap（这里会发生 GC）和一个线程池。\",\"Isolate.spawnUri 会从制定的 Uri 中创建一个新的 IsolateGroup 和对应的 Isolate，并执行 Uri 中的 main 方法。\",\"Isolate 内部维持一个 Event Loop。\"]},\"763\":{\"h\":\"Dart VM\",\"t\":[\"本文是对 Dart 官方 VM 的介绍的总结摘要，推荐直接阅读官方原文。\",\"Dart VM is a collection of components for executing Dart code natively. Notably, it includes the following:\",\"Runtime System\",\"Object Model\",\"Garbage Collection\",\"Snapshots\",\"Core libraries’ native methods\",\"Development Experience components accessible via service protocol * Debugging * Profiling * Hot-reload\",\"Just-in-Time (JIT) and Ahead-of-Time (AOT) compilation pipelines\",\"Interpreter\",\"ARM simulators\",\"下图是 runtime 执行代码的示意图：\",\"isolate\",\"isolate 中有两种 Thread：\",\"一个 mutator thread 用来执行 dart 代码\",\"多个 helper thread 用来执行 GC、JIT 等\",\"此外，一个 isolate 有一个 heap，用来存储所有的 dart object（GC 发生在这里）。\",\"一个 OSThread 一次只能进入一个 isolate，当其进入之后，该 isolate 的 mutator thread 便和这个 OSThread 关联起来执行 dart 代码。当 OSThread 要进入一个 isolate 的时候，必须先退出当前关联的 isolate。\",\"isolate 的 mutator thread 可能在不同时间关联不同的 OSThread，但同一时刻最多只能有一个 OSThread。\",\"VM 执行 Dart 代码有两种方式：JIT 和 AOT，不管哪一种都不会直接执行 Dart 源码，而是经过转化之后的 Kernel Binary(also called dill files)which contain serialized Kernel ASTs。\",\"一般来说，从 Dart source code 到 Dart VM 执行分为下面几步：\",\"dart-to-kernel\",\"VM expects to be given Kernel binaries (also called dill files) which contain serialized Kernel ASTs. The task of translating Dart source into Kernel AST is handled by the common front-end (CFE) written in Dart and shared between different Dart tools (e.g. VM, dart2js, Dart Dev Compiler).\",\"Dart VM has multiple ways to execute the code, for example:\",\"from source or Kernel binary using JIT;\",\"from snapshots: \",\"from AOT snapshot;\",\"from AppJIT snapshot.\"]},\"764\":{\"h\":\"1. Running from source via JIT.\"},\"765\":{\"h\":\"从 Dart Source 加载到 VM 中\",\"t\":[\"为了保证直接从源代码执行 Dart 的便利性，独立的 dart 可执行文件承载了一个称为内核服务（*kernel service）*的辅助 isolate，它处理 Dart 源代码编译成内核的过程。然后，VM 将运行产生的内核二进制文件（Kernel Binary）。\",\"kernel-service\",\"上图中，一个被称为kernel service的 isolate 使用 CFE 将 Dart Source 编译为为Kernel Binary然后交给 main isolate 执行。\",\"这并不是安排 CFE 和 VM 执行 Dart Source 的唯一方式，比如 Flutter 就将 CFE（封装之后的）和 VM 分别置于两个设备上：\",\"flutter-cfe\",\"当热更新触发时，Flutter 使用封装过的 CFE 以及一个 Flutter 独有的 Kernel-to-Kernel 转换，将修改过的 Dart Source 编译为 Kernel Binary，然后推送到设备上面（比如手机）执行。\"]},\"766\":{\"h\":\"在 VM 中执行\",\"t\":[\"上面是 Dart Source 加载到 VM 的过程，下面是Dart 代码在 VM 中执行的过程分析：\",\"1）当Kernel Binary加载到 VM 中之后，只会解析加载的类和库的基本信息。\",\"kernel-loaded-1\",\"2）当 runtime 实际用到的时候才会去获取完整的信息用来创建对象分配内存等：\",\"kernel-loaded-2\",\"此时，从Kernel Binary中读取出了class members，此时已经有足够的信息让 runtime 用来调用方法（successfully resolve and invoke methods）了，比如调用 main 方法，但是具体的方法体此时依旧还没有被反序列（deserialized）。\",\"3）在这个阶段，所有的 function 只是持有了一个真正要执行的方法体的placeholder指向LazyCompileStub，当 runtime 要执行的时候再创建并运行可执行代码。\",\"raw-function-lazy-compile\",\"这时候执行方法有两个阶段：\",\"unoptimized 默认执行时直接从Kernel Binary创建IL然后转化为machine code并运行\",\"optimized 在 a 阶段的热点代码会被从普通IL优化为SSA IL，然后转化为machine code运行，如果遇到优化失效的，再回退到 a 阶段执行代码（后面是否需要再走 b 阶段，需要重新判断）\"]},\"767\":{\"h\":\"unoptimized code\",\"t\":[\"这个阶段，从Kernel Binary生成Machine Code主要分为 2 步：\",\"（1）Kernel Binary → IL\",\"在这个阶段，从Kernel Binary中的AST中解析产生对应的control flow graph(CFG)。\",\"CFG 由intermediate language(IL) 组成，这个阶段使用的 IL 指令类似基于 stack 的虚拟机：他们从 stack 中读取操作数，执行操作，然后将结果 push 回这个 stack 中。\",\"unoptimized-compilation\",\"但并不是所有的方法都有对应的Dart/Kernel AST bodies（比如一些native方法或者artificial tear-off functions generated by Dart VM），这种情况下，他们凭空创建（in these cases IL is just created from the thin air）。\",\"(2) IL → Machine Code\",\"由一条 IL 对应生成多行 machine language instruction\",\"在这个阶段不会进行优化，主要目的是快速创建出可执行代码（produce executable code quickly）\",\"内联缓存（inline caching）\",\"在这个阶段，编译器（unoptimizing compiler）不会尝试静态解析任何没有在 Kernel Binary 中解析的调用（any calls that were not resolved in Kernel binary），因此调用 (MethodInvocation or PropertyGet AST nodes) 被认为是完全动态的，VM 使用内联缓存（inline caching）来实现动态调用。\",\"内联缓存的实现主要有：\",\"一个call site specific cache，将调用的类与方法映射在一起，如果 receiver 和已有的缓存类对应，那么就应该调用对应的方法，还有个计数器（invocation frequency counters）标记这个方法被调用多少次（对应下文的 RawICData）\",\"一个共享的lookup stub，实现了方法调用的最快路径（method invocation fast path），在发生调用时通过 lookup stub 查询是否有 entry 与 receiver 的类匹配，有的话就用调用 entry 并增加 frequency counter；否则就调用系统的 runtime system helper 兜底（如果成功运行了就更新上面的缓存，这样下次调用就不用再走 runtime 了）。\",\"inline-cache-1\"]},\"768\":{\"h\":\"optimized code\",\"t\":[\"虽然Unoptimizing compiler可以执行任意 Dart 代码，但是太慢了，所以在以上述方式执行代码的同时会记录以下信息：\",\"Inline cache 收集在调用点的receiver 类型（receiver types observed at callsites）\",\"和方法对应的 execution counters 以及 basic blocks within functions 追踪代码的热点区域（hot regions of the code）\",\"Optimized compilations 和 Unoptimizing compiler 开始的步骤类似：\",\"(1) Kernel Binary → unoptimized IL\",\"(2) unoptimized IL → SSA based IL → optimized IL\",\"当上述代码执行的时候，如果程序调用计数器（invocation frequency counters）到达某个阈值，这个方法就会被交给一个后台优化编译器（background optimizing compiler）来优化，将 unoptimized IL 转化为*SSA（static single assignment）*形式的 IL。\",\"最后将 SSA IL 优化为 optimized IL。\",\"(3) optimized IL → machine code\",\"在优化完成后，编译器会要求 mutator thread 进入 safepoint 并将优化后的代码绑定到方法上（attaches optimized code to the function）。\",\"safepoint 的含义是，thread 关联的 state（比如 heap，stack frame 等）是一致的，并且可以在不中断线程的情况下访问或修改。通常意味着 thread 被暂停，或者在当前环境外（比如执行 native 代码）。\",\"optimizing-compilation\",\"上述这种基于乐观假设的优化，可能没法处理部分情况，从而回退到未优化的代码（deoptimization），然后再执行未优化过程（通常会丢弃优化后的代码，再判断是否有热点代码需要优化），主要有 2 种方式：\",\"eager deoptimization 在内联检查的时候，判断优化的条件是否满足，不满足的话就丢弃优化代码\",\"lazy deoptimization 全局分析指示在更改优化代码的内容时丢弃优化代码（之前优化的条件不满足了）。\"]},\"769\":{\"h\":\"2. Running from snapshot\",\"t\":[\"Snapshot's format is low level and optimized for fast startup，包含了要创建的 object 以及如何关联这些对象的说明信息（instructions）。\",\"VM 可以将 Heap/甚至是 Heap 中的 object graph 序列化成为 snapshot，然后再从这个 snapshot 中重建对应的状态：\",\"snapshot\",\"最初的 snapshot 并不包含 machine code，直到 AOT compiler 的出现。\",\"AOT compiler 和 snapshot-with-code 使得 VM 可以在那些 JIT 受限的设备上运行：\",\"snapshot-with-code\",\"snapshot-with-code和普通的snapshot基本一致，唯一不同的是多出的 machine code 不需要 deserizlization，事实上 machine code 在被分配到内存后可以立即成为 heap 的一部分（directly become part of the heap after it was mapped into memory）。\"]},\"770\":{\"h\":\"3. Running from snapshot\",\"t\":[\"AppJIT snapshot 主要用于减少大型 Dart application 的 JIT 热身时间。\",\"AppJIT snapshots were introduced to reduce JIT warm up time for large Dart applications like dartanalyzeror dart2js. When these tools are used on small projects they spent as much time doing actual work as VM spends JIT compiling these apps.\",\"他的主要实现是：先用模拟数据在 VM 上运行，然后将其生成的 code 以及 VM 内部的数据结构序列化为 AppJIT snapshot 加载到 VM 中运行，只在正式的数据和模拟训练的配置无法匹配的时候执行 JIT（execution profile on the real data does not match execution profile observed during training）。\",\"snapshot-appjit\"]},\"771\":{\"h\":\"4. Running from snapshot\",\"t\":[\"AOT 与 JIT 各有优劣：\",\"AOT 启动时间更短\",\"JIT 峰值性能更优\",\"无法进行 JIT 意味着\",\"AOT snapshot must contain executable code for each and every function that could be invoked during application execution;\",\"the executable code must not rely on any speculative assumptions that could be violated during execution;\",\"为了满足上述要求，AOT 汇编过程会进行全局静态分析以确定程序的哪些部分是可以从已知的 entry point 触达的，分配哪些类的实例，以及类型在程序中是如何应用的（which parts of the application are reachable from known set of entry points, instances of which classes are allocated and how types flow through the program）。\",\"AOT 上述这些分析是保守的，可能在准确性上犯错，与之相比，JIT 则在性能方面不行，因为 JIT 需要 deoptimize 兜底实现正确的行为。\",\"所以 AOT 将所有潜在的可触达的功能编译为 native code，而无需投机性优化（All potentially reachable functions are then compiled to native code without any speculative optimizations）。\",\"aot\",\"从上图可以看出，AOT 中，Kernel Binary 先经过 TFA 收集变量、方法等信息，以此来移除不可达的方法，并 devirtuablize method（确定虚拟方法的具体执行）。之后经过 VM 再移除一些不可达方法。\",\"Resulting snapshot can then be run using precompiled runtime, a special variant of the Dart VM which excludes components like JIT and dynamic code loading facilities.\"]},\"772\":{\"h\":\"Switchable Calls\",\"t\":[\"即使有全局和局部分析，AOT 编译依然可能包含一些无法被非虚拟化（devirtualized）的 call sites，为了解决这个问题，AOT 编译出的代码和 runtime 会使用 JIT 中用到的内联缓存（Inline Caching）技术的拓展——switchable calls。\"]},\"773\":{\"h\":\"参考资料\",\"t\":[\"sdk/index.md at main · dart-lang/sdk\",\"Dart VM 介绍\"]},\"774\":{\"c\":[\"dart\"]},\"775\":{\"h\":\"之前发布的几个 App\",\"t\":[\"在之前学习 android 的过程中，跟着教程做了几个 app，虽然随着使用的 api 的失效，大多数应用如今已经不能正常使用了，但是作为初入编程的一点点小纪念，还是为他们写一个索引文章，至少能够晚一些消寂于这广阔的数据海洋中。\"]},\"776\":{\"h\":\"\",\"t\":[\"Posted on 2016-05-30\",\"NieceNews 我制作的第二款 APP，一个实时新闻软件。\",\"NiceNews\"]},\"777\":{\"h\":\"\",\"t\":[\"Posted on 2016-07-16\",\"IWeather，我的第三个 Android 应用，一个天气预报 APP。\",\"IWeather\"]},\"778\":{\"h\":\"\",\"t\":[\"Posted on 2016-07-21\",\"2048，我的第四个 Android 应用，同时也是我的第一款游戏 APP。\",\"2048\"]},\"779\":{\"h\":\"\",\"t\":[\"Posted on 2016-07-24 |\",\"i 看知乎，我的第五个 Android 应用。\",\"logo\",\"学习的过程需要不断的重复，更需要有条理的总结，我会把平时学习的心得体会，经验，以及无聊时瞎琢磨得出来的稀奇古怪的想法放到这里，主要是为了自己能够在学习的过程中有计划的总结学习到的知识，同时也方便之后查阅。\"]},\"780\":{\"h\":\"从 Sunflower 开始学习优雅的 Jetpack 架构\",\"t\":[\"Google 大法 NB！！！(破音)\"]},\"781\":{\"h\":\"前言\",\"t\":[\"Jetpack是 Google 推出的一系列 Android 软件集合，\\\"使您可以更轻松地开发出色的 Android 应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上\\\"。\",\"Sunflower则是 Google 用来演示如何使用 Jetpack 进行 Android 开发的 Demo，有着非常优雅的架构与十分简洁的代码，可以帮助我们很好地学习 Jetpack 以及 MVVM 思想。\",\"本文主要是结合 Sunflower 中的示例代码，分析 Jetpack 架构中各部分的作用，以及他们如何巧妙的搭配使用，方便指导日后对 Jetpack 的使用。\",\"本文中的大部分代码、示意图除非特殊注明外，皆来自 Google 的Sunflower 工程或其他互联网资源，根据篇幅需要做了部分精简，所有权益归原作者所有。\",\"下图是Google Jetpack 官网对 Jetpack 的介绍图： ## 对 Sunflower 的整体分析 \",\"下图是 Sunflower 架构的简单示意图：\",\"可以看到，APP 的界面有我的花园、植物目录和植物介绍三部分，这三者的切换逻辑通过实现。\",\"每个界面的XML中的布局信息（包括数据、事件（clickListener等），RecycleView的LayoutManager，Adapter等等）通过DataBinding与ViewModel中的可观察数据LiveData绑定在一起，只要数据库中的数据有更新，就会通过LiveData主动通知布局更新界面；同时DataBinding还通过与Adapter（这些继承自ListAdapter的 Adapter 实现了的作用）将ItemView的ViewModel与布局XML中绑定在一起，通过BindingAdapter对XML中的数据做预处理（加载 imgUrl 中的图片到 ImageView 等等）。\",\"在中指定这些DataBinding与之间以及ViewModel与数据库之间的逻辑关系，这些数据与操作都受着的影响。\",\"ViewModel的数据来源——Model在这里的实现是一个数据库。每个ViewModel有一个XXXViewModelFactory类，用来使用数据类XXXRepository类的实例创建对应的ViewModel。XXXViewModelFactory向Activity等屏蔽了ViewModel的具体实现。\",\"XXXRepository类的出现时为了将ViewModel与数据的具体实现解耦合，这样ViewModel只需要关心他要的操作而不必关系数据来源的具体实现。在本例中，XXXRepository类对应封装了这数据库AppDatabase中对两个表的操作。\",\"数据库使用实现，从底层开始依次分为表Entity，数据访问对象DAO和数据库DataBase三个层次。每个 DAO 对应一个包装类XXXRepository类供ViewModel使用。\",\"@Entity GardenPlanting //表，定义了存储的数据项及其格式 @Dao GardenPlantingDao //数据访问对象，定义了例如插入数据、查询数据等操作 GardenPlantingRepository //对DAO的封装，将数据的的具体实现与ViewModel对数据的操作解耦 @Database AppDatabase //数据库，包括表和对表的操作\",\"则管理着一个从 Json 读取数据并加载到数据库中的后台任务SeedDatabaseWorker。\"]},\"782\":{\"h\":\"具体实现分析\",\"t\":[\"首先看一下**View**部分，Sunflower 只有简单的 3 个页面，全都是用Fragment实现，由Activity通过Navigation控制切换：\",\"GardenActivity 主页面，唯一的一个 Activity\",\"GardenFragment 我的花园 界面，会显示用户在植物目录中选择并种植的植物信息\",\"PlantListFragment 植物目录 界面，所有的植物信息列表\",\"PlantDetailFragment 植物介绍 界面，当在“我的花园”或“植物列表”选择了某个植物后，会进入该界面显示植物详细介绍\"]},\"783\":{\"h\":\"Navigation 控制界面切换\",\"t\":[\"先看一下Navigation的定义：\",\"Navigation 是 APP 设计中的关键部分，可以用来定义用户从不同的界面切换、进入和推出的交互逻辑。\",\"和布局文件一样，我们可以在编译器的可视化界面中，直接预览、设计不同界面切换效果。他可以负责Fragment、Activity、Navigation graphs 与 subgraphs 以及Custom destination types，他们之间通过不同的action连接起来。\",\"通过官方文档可知，Navigation可以和AppBar，ToolBar等组合起来控制 Fragment 显示，此外可以通过ViewModel在绑定到同一个Activity的Fragment之间共享数据，或者也可以通过Bundle或Safe Args在两个Fragment之间传递数据。\",\"那么，在Sunflower中Navigation是怎么控制界面切换的呢？\",\"首先，在res/navigation/目录下面新建一个嵌套导航图(Nested navigation graphs),定义各个界面之前的切换关系：\",\"<navigation xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\" xmlns:tools=\\\"http://schemas.android.com/tools\\\" app:startDestination=\\\"@+id/garden_fragment\\\"> //app:startDestination定义了在这个导航图中首次启动展示的界面 <fragment android:id=\\\"@+id/garden_fragment\\\" android:name=\\\"com.google.samples.apps.sunflower.GardenFragment\\\" android:label=\\\"@string/my_garden_title\\\" tools:layout=\\\"@layout/fragment_garden\\\"> //action定义了在各个界面的切换关系 <action android:id=\\\"@+id/action_garden_fragment_to_plant_detail_fragment\\\" app:destination=\\\"@id/plant_detail_fragment\\\" app:enterAnim=\\\"@anim/slide_in_right\\\"//enterAnim等指定执行action时的动画 .../> </fragment> <fragment ...> //argument定义了在切换界面时需要带的参数，需要androidx.navigation.safeargs的支持,具体见参考资料-Android Jetpack-Navigation 使用中参数的传递 <argument android:name=\\\"plantId\\\" app:argType=\\\"string\\\" />//参数类型小写 </fragment> </navigation>\",\"然后在 Activity 对应的 XML 中插入该导航：\",\"<LinearLayout ...> <fragment android:id=\\\"@+id/garden_nav_fragment\\\" android:name=\\\"androidx.navigation.fragment.NavHostFragment\\\" android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"match_parent\\\" app:defaultNavHost=\\\"true\\\" app:navGraph=\\\"@navigation/nav_garden\\\" /> </LinearLayout>\",\"之后就可以在 Activity 或者 Fragment 中获取该导航的实力，用来切换界面了：\",\"//activity val navController = Navigation.findNavController(this, R.id.garden_nav_fragment) //fragment 或其他地方 val direction = GardenFragmentDirections//嵌套导航图中 Fragment 自动生成的类 .ActionGardenFragmentToPlantDetailFragment(plantId) it.findNavController().navigate(direction)\"]},\"784\":{\"h\":\"DataBinding 绑定布局和数据\",\"t\":[\"Navigation 解决了不同的布局间交互的逻辑，DataBinding 则充当布局 View 和数据（ViewModel、LiveData）之间的桥梁，将二者联系起来。\",\"从官网的表述中我们知道，DataBinding 使用在 XML 中声明的方式（而非编程的方式），将布局中的组件捆绑到 APP 中使用到的数据上，这样当数据更新时，布局也会随之自动更新。\",\"DataBinding 在 XML 中的形式如下：\",\"<layout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\"> <data> <variable name=\\\"viewmodel\\\" type=\\\"com.myapp.data.ViewModel\\\" /> </data> <ConstraintLayout... /> <!-- UI layout's root element --> </layout>\",\"需要注意的是原先的页面布局信息<ConstraintLayout... />包裹在<layout... />中，同时多了一个数据域<data... />，我们可以在其中定义一些变量<variable... />，并在布局中使用：\",\"<TextView android:text=\\\"@{viewmodel.userName}\\\" />\",\"除了常见的android:text，android:onClick等通用的属性可以直接绑定外，我们还可以通过自定义Binding adapters支持更多形式的属性绑定：\",\"@BindingAdapter(\\\"app:goneUnless\\\") fun goneUnless(view: View, visible: Boolean) { view.visibility = if (visible) View.VISIBLE else View.GONE }\",\"上面的代码就支持了app:goneUnless的解析，我们只要在 XML 中为组件加上这个属性就可以实现相应的效果：\",\"<TextView android:text=\\\"@{viewmodel.userName}\\\" app:goneUnless=\\\"@{viewmodel.isGone}\\\"/>\",\"最后，我们需要在对应的 Activity 或 Fragment 中，用如下代码将布局与页面绑定到一起：\",\"//setContentView(R.layout.activity_main) val binding: ActivityMainBinding = DataBindingUtil.setContentView( this, R.layout.activity_main) binding.viewmodel = ...\",\"这里的ActivityMainBinding类是DataBinding根据 XML 文件的名字自动替我们生成的，规律是XML文件名+Binding的驼峰命名。\",\"在 Sunflower 中有类似的应用有很多处：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <!-- ~ Copyright 2018 Google LLC ... --> <layout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" xmlns:app=\\\"http://schemas.android.com/apk/res-auto\\\" xmlns:tools=\\\"http://schemas.android.com/tools\\\"> <data> <variable name=\\\"hasPlantings\\\" type=\\\"boolean\\\" /> </data> <FrameLayout android:layout_width=\\\"match_parent\\\" android:layout_height=\\\"match_parent\\\"> <androidx.recyclerview.widget.RecyclerView android:id=\\\"@+id/garden_list\\\" app:isGone=\\\"@{!hasPlantings}\\\" app:layoutManager=\\\"androidx.recyclerview.widget.LinearLayoutManager\\\" tools:listitem=\\\"@layout/list_item_garden_planting\\\"/> </FrameLayout> </layout>\"]},\"785\":{\"h\":\"ViewModel 管理数据与页面的交互\",\"t\":[\"DataBinding通过标记的形式将数据和组件绑定，在这个过程中他使用的数据则是来自于ViewModel的。在页面Activity(或Fragment) 中，我们可以处理这两者之间的关系。\",\"ViewModel是设计用来以一种可以感知生命周期（lifecycle）的方式存储和管理与 UI 相关的数据，它可以允许数据在诸如屏幕旋转的变化中存活下来，也就是说VideModule的数据生命周期可能要比他附着的Activity或Fragment的生命周期长。\",\"同时，UI controller可以在Activity等不再需要数据时，自动调用ViewModel的onCleared()方法清除这些数据以避免内存泄漏。\",\"下图是ViewModel和Activity的生命周期对比： 此外，由于默认的获取 ViewModel 的方法只能调取无参构造函数，当需要向 ViewModel 传递参数时，就需要用到 Factory 工厂模式来创建 ViewModel： \",\"val viewModel = ViewModelProviders.of(this, factory).get(GardenPlantingListViewModel::class.java) class PlantDetailViewModelFactory(args:Any) : ViewModelProvider.NewInstanceFactory() {...}\",\"还可以将ViewModel于LiveData结合，这样在Activity等地方对LiveData进行订阅后，当LiveData的值发生变化时Activity等可以及时得到通知，而做出相应变化。此外ViewModel与lifecycle的结合可以保证在Activity等生命周期结束后数据得到及时的清理。\"]},\"786\":{\"h\":\"Room 保存数据\",\"t\":[\"Room 持久性库在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 强大功能的同时，能够流畅的访问数据库。——Android Developers\",\"Room需要 3 个元素：\",\"Database 数据库，可以提供对表格的操作方法@DAO。是一个继承自RoomDatabase的抽象类。\",\"Entity 表格，规定了每个表格可以保存的数据格式。是一个普通类。\",\"Dao 数据访问结构（Data Access Object），定义了对表格@Entity中的数据的操作。是一个接口或者抽象类。\",\"此外，还可以对@DAO进行进一步的封装得到一个XXXRepository类，ViewModel通过这个XXXRepository类来操作数据，从而将其与数据的具体实现解耦。\"]},\"787\":{\"h\":\"WorkManager 管理任务\",\"t\":[\"WorkManager用来管理即时或定时任务，官方定义是在指定约束条件成熟时可靠的在后台执行对应的任务。\",\"具体使用可以参考这个GIST。\",\"和他相关的有下面几个关键类：\",\"Worker 定义要执行的任务内容\",\"WorkRequest 代表一项单独的任务，明确具体要执行的任务内容（Worker）、任务的类型（WorkRequest.Builder 的子类，决定任务一次性还是重复的）以及任务执行的条件（Constraints，如联网、电池电量等等）\",\"WorkManager 执行管理 WorkRequest，安排执行 Worker 中的工作内容。\"]},\"788\":{\"h\":\"参考资料\",\"t\":[\"Android Jetpack 官网\",\"Android Jetpack-Navigation 使用中参数的传递\"]},\"789\":{\"c\":[\"android\"]},\"790\":{\"h\":\"利用 travis 通过 Hexo 在 Github 上自动部署 Markdown 文档\"},\"791\":{\"h\":\"前言\",\"t\":[\"本文介绍了一个只需要更新 Markdown 文档到 Github，即可实时更新博客内容的方法。\",\"本文参考这篇文章 实现，并根据我的需求更改了部分内容，以实现部署多个 hexo 工程到同一 Github 项目不同目录下。\",\"Github 为我们提供了Github Pages 方便我们建立简单的网页来介绍项目，很多时候我们用他来搭建静态博客。\",\"通过Hexo可以将我们写的Markdown文档格式化为静态网页，再将其部署到 Github 上面对应的user_name.github.io上面，就可以拥有一个在线的静态博客。\",\"但是受 Hexo 的限制，每次更新博客内容都需要在更新完 Markdown 文档后，都需要再次重新创建对应的静态网页、将更新提交到 Github。这样的步骤繁琐且没有意义，而且更换电脑后这些环境都需要重新设置一次。\",\"通过travis提供的免费 CI 技术，可以让云服务器代替我们实现 Hexo 创建以及同步 Github 等步骤，每次更新博客时只需要将写好的 Markdown 文档推送到 Github 项目对应目录中，等待一会儿就可以看到更新后的博客了。\",\"具体搭建过程可以参考这篇文章 本文只讲述实现部署多个 hexo 工程到同一 Github 项目不同目录下需要注意的地方：。\",\"懒——是第一生产力\"]},\"792\":{\"h\":\"具体差异\"},\"793\":{\"h\":\"hexo 分支的结构\",\"t\":[\"因为有多个 hexo 项目，所以在 github 项目的 hexo 分支下，对不同的 hexo 项目分别新建文件夹存放。\",\"-- your_name.github.io //github项目，切换到hexo分支 --hexo_project1 //本地hexo项目1的所有文件 --hexo_project2 //本地hexo项目2的所有文件\"]},\"794\":{\"h\":\".travis.yml\",\"t\":[\"重点修改script:和after_script:两部分：\",\"script: # 1. 创建对应的静态博客内容 - cd blog # 第一个本地 hexo 项目 - hexo clean - hexo generate - cd .. - cd imissyou # 第二个本地 hexo 项目 - hexo clean - hexo generate - cd .. after_script: - git config user.name \\\"jixiaoyong\\\" - git config user.email \\\"jixiaoyong1995@gmail.com\\\" - cd .. - mkdir publish - cd publish # 2. 在这里再拉取 master 分支的文件，并删除旧的博客内容 - git clone https://${GH_TOKEN}@github.com/jixiaoyong/jixiaoyong.github.io.git - rm -rf ./jixiaoyong.github.io/blog/* - rm -rf ./jixiaoyong.github.io/imissyou/* # 3. 将第 1 步生成的静态博客内容添加到 master 分支，并同步到 github 上面 - cd .. - cp -rf jixiaoyong.github.io/blog/public/* publish/jixiaoyong.github.io/blog/ - cp -rf jixiaoyong.github.io/imissyou/public/* publish/jixiaoyong.github.io/imissyou/ - cd publish/jixiaoyong.github.io/ - git add . - git commit -m \\\"auto update by www.travis-ci.org\\\" - git push\",\"文档链接：.travis.yml\"]},\"795\":{\"h\":\"更新博客内容\",\"t\":[\"当以上内容都配置完成后，只要新建一个符合 hexo 要求的文档，并提交到 Github 对应项目的 hexo 分支中source目录，Travis 便会自动帮我们创建并更新静态网页。\"]},\"796\":{\"h\":\"参考文档\",\"t\":[\"Hexo 遇上 Travis-CI：可能是最通俗易懂的自动发布博客图文教程 （完全在该文档指导下完成，部分步骤有差异，感谢作者MichaelX ）\"]},\"797\":{\"c\":[\"ci\"]},\"798\":{\"h\":\"Hexo+Github=Blog\",\"t\":[\"Hello World！\",\"一直以来，为了有一个合适的在线写字的地方，我尝试过许多种工具，从最初的 QQ 空间开始，到各种门户网站的博客，再到自己开始尝试搭建博客，一路奔忙，门户网站的限制太多，自己搭建的博客又时常由于空间提供商的各种问题而无法访问。许多时候一个平台只能使用一段时间，这样子颠颠撞撞大概也有五六年的时间了。\",\"一直听说 github 这个平台的各种优点，尤其是可以作为稳定而免费的空间托管博客最令我心动，但是之前多次尝试不得其道，终以失败告终。最近在学习 Android 语言的时候，又再次用起了 github，不过这次是用它来存储代码。不得不承认，使用 github 来控制程序版本真是一件令人愉悦的事件。\",\"机缘巧合，因为需要将学习过程中的一些笔记，心得总结找个地方整理，显然单纯的使用 github 并不是一个好办法，而其他的平台的博客限制又太多，于是又尝试用 github 搭建一个博客，虽然对这些知识并不是很熟悉，但误打误撞竟然也成功的搭建好了博客。下面就把整个建站的过程大概梳理一下，以便以后查看。\"]},\"799\":{\"h\":\"准备 git 和 node 环境\",\"t\":[\"下载软件：\",\"git\",\"github windows 客户端 (可选)\",\"node 客户端\"]},\"800\":{\"h\":\"装 git 环境\",\"t\":[\"安装 git:\",\"git 安装时按照默认的配置，一路点击确定就可以。\",\"安装 github 客户端（可选，如果熟悉 git 命令可以直接命令行操作）\",\"github 安装分为两种：\",\"用官网的安装包，在安装的时候需要从网上下载资料，受网速限制，这种方法很慢，而且容易出错；\",\"直接找一份 github 离线安装包解压到本地即可使用，我就是使用后一种方法。\"]},\"801\":{\"h\":\"安装 node\",\"t\":[\"安装 node 客户端：\",\"下载并安装 node ,我使用的版本是 node-v5.7.1-x64。\"]},\"802\":{\"h\":\"校验环境\",\"t\":[\"在安装完 git, node 之后win 键 + R 输入 cmd 打开 windows 自带终端窗口；\",\"分别输入git 、 npm之后，如果显示出 帮助信息 而非 “不是内部或外部命令，也不是可运行的程序或批处理文件” 这样的提示，就说明 git 和 node 已经配置好了环境变量，否则就需要手动配置。\"]},\"803\":{\"h\":\"配置环境变量方法：\",\"t\":[\"此电脑 –> 右键 –> 属性 –> 高级系统设置 –> 环境变量\",\"找到用户环境变量 –> path，并添加 git 和 npm 的安装路径。\",\"更详细的教程可以参考这里：如何修改环境变量\",\"这样子 git 和 node 应该就可以正常使用了。\"]},\"804\":{\"h\":\"安装配置 hexo\"},\"805\":{\"h\":\"安装 hexo\",\"t\":[\"打开命令行，全局安装 Hexo ,加 -g 参数：\",\"npm install -g hexo\",\"查看 hexo 版本\",\"hexo version\",\"结果：\",\"Blockquotehexo-cli: 1.0.1os: Windows_NT 10.0.14316 win32 x64http_parser: 2.6.2node: 5.7.1v8: 4.6.85.31uv: 1.8.0zlib: 1.2.8ares: 1.10.1-DEVicu: 56.1modules: 47openssl: 1.0.2g\",\"到这里 hexo 就在电脑上面安装好了。\"]},\"806\":{\"h\":\"配置 hexo\",\"t\":[\"进入存放 hexo 文件的目录下，创建一个文件夹 blog 存储 hexo 的文件\",\"hexo init blog\",\"然后进入这个文件夹\",\"cd blog\",\"启动 hexo 服务器\",\"hexo server[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop\",\"打开本地地址：http://localhost:4000/ ，就可以看到本地搭建好的 hexo 博客了 这样子一个 hexo 博客就在本地搭建好了\"]},\"807\":{\"h\":\"目录的解释：\",\"t\":[\"scaffolds 脚手架，也就是一个工具模板 scripts 写文件的 js，扩展 hexo 的功能 source 存放博客正文内容 source/_drafts 草稿箱 source/_posts 文件箱 themes 存放皮肤的目录 themes/landscape 默认的皮肤 _config.yml 全局的配置文件 db.json 静态常量\"]},\"808\":{\"h\":\"一些 hexo 语句解释\",\"t\":[\"help 查看帮助信息 init 创建一个 hexo 项目 migrate 从其他系统向 hexo 迁移 version 查看 hexo 的版本 –config 参数，指定配置文件，代替默认的_config.yml –debug 参数，调试模式，输出所有日志信息 –safe 参数，安全模式，禁用所有的插件和脚本 –silent 参数，无日志输出模式\"]},\"809\":{\"h\":\"新建文章\",\"t\":[\"命名为“新的文章”，输入命令：\",\"hexo new 新的文章\",\"hexo 默认生成 md 文件，新生成的文章在目录：.\\\\blog\\\\source_posts\\\\新的文章.md，对其进行相应的编辑即可 文章格式：\",\"title: 新的文章date: 2014-05-07 18:44:12updated : 2014-05-10 18:44:12permalink: abctags:- 开始- 我- 日记categories:- 日志- 第一天---\",\"或者你也可以直接自己在对应位置新建 file_name.md 文件（常用）\"]},\"810\":{\"h\":\"配置 github\",\"t\":[\"注册并登录 github 进入 https://github.com/ ，注册新账户，并且登录\",\"新建 respositoy 在主页点击 New respositoy 新建一个名字为 yourname.github.io 的 respositoy；\",\"设置新建一个 github pages 进入仓库主页，选择 settings --> github pages --> Launch automatic page generator ,按照默认的主题配置选择一个就好\"]},\"811\":{\"h\":\"上传网站\",\"t\":[\"对于 hexo 的相关配置： 打开_config.yml，修改以下部分：\",\"Sitetitle: Jixiaoyong's Blog subtitle: description: author: Jixiaoyong language: zh-CN timezone:# URL #If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/' url: http://yoursite.github.io/ root: http://yoursite.github.io/blog/\",\"此处由于我是将网站放在二级目录 ./blog/ 下面，所以 root 目录设置如此，使用的是绝对路径，否则在网页上显示的时候，css 等由于路径不对，加载可能会有问题。\"]},\"812\":{\"h\":\"部署方法 1\",\"t\":[\"deploy: type: git repo:https://github.com/yourname/yourname.github.io.git\",\"这行语句是使用 hexo 自动 deploy 到 github 时的设置，~如果正常的话，当用 hexo 对网站静态化处理后，再执行 hexo deploy 就可以自动部署到 github 上面了，但是我的电脑 git 或者 node 由于是不同时间装的期间还重装了几次系统，可能导致某些设置有误，所以在执行 hexo deploy 的时候一直提示有问题，故而采用另一种办法手动同步网站，这句话也可以不修改。~\"]},\"813\":{\"h\":\"部署方法 2\",\"t\":[\"用 hexo 对文章进行静态化处理：\",\"hexo generate\",\"在blog\\\\public目录下生成的 public 包含所有的静态化文件，此时，这个文件夹内所有的内容就是处理好的网站，将其发布到合适的空间就可以正常显示。 由于之前的 git 或者 node 配置有误，所以这时候采用手动同步网站：\",\"将上次在 github 上建立的项目 yourname.github.io 同步到本地。 同步的方法很多，这里我选择的是使用 github 的 windows 客户端，比较方便：\",\"打开 github 客户端，找到项目，选择 clone 到本地即可。\",\"之后打开同步的项目，确认当前的 branch 是 master，否则同步之后网站不会显示。\",\"在 github 同步的目录下找到上次建好的项目yourname.github.io,进入之后，将上文获得到的 public 内容放入目标文件夹，我选择的是将博客放在子目录，所以这里新建了一个 blog 文件夹用于放置博客，所以就是将 public 全部内容 放入./yourname.github.io/blog/ 目录下，这样子在网站上显示的时候，博客的网址就是 http://yourname.github.io/blog/\",\"这样一个简单的利用 github 托管的 hexo 博客就搭建好了。\",\"注：本文内容是根据我建立博客时的做法整理而成，其中有部分内容是参考网上的教程，文中引用的文字全部来自http://blog.fens.me/hexo-bootstarp-github/ ，此文对我帮助很大，感谢作者张丹 (Conan) 的分享。\"]},\"814\":{\"h\":\"加载已安装应用、未安装 apk 中的资源\",\"t\":[\"加载已安装应用、未安装 apk 中的资源，其思路主要是获取到对应的 ClassLoader/Context，通过 ClassLoader 加载 R.java 等类，再通过反射获取对应的资源 id 及资源。\"]},\"815\":{\"h\":\"加载已安装应用资源\"},\"816\":{\"h\":\"sharedUserId\",\"t\":[\"在当前应用中加载已安装的其他应用资源，需要二者有相同的sharedUserId，这样 Android 系统为二者分配同一个 Linux 用户 ID，两个 App 可以相互访问代码、资源等。\",\"通过 Shared User id，拥有同一个 User id 的多个 APK 可以配置成运行在同一个进程中。所以默认就是可以互相访问任意数据。也可以配置成运行成不同的进程，同时可以访问其他 APK 的数据目录下的数据库和文件。就像访问本程序的数据一样。\",\"Android 逆向之旅---Android 中的 sharedUserId 属性详解 - CSDN 博客\",\"具体设置方法如下\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" package=\\\"cf.android666.dynamicloadapk\\\" android:sharedUserId=\\\"cf.android666.dynamic\\\"> </manifest>\"]},\"817\":{\"h\":\"筛选所有已安装应用信息\",\"t\":[\"private var packageBeanList: ArrayList<PackageInfoBean> = arrayListOf() private var packageInfoList: ArrayList<PackageInfo> = arrayListOf() var packageInfoList = packageManager.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES) as ArrayList<PackageInfo> if (packageInfoList.isNotEmpty()) { for (x in packageInfoList) { if (x.sharedUserId != null && x.sharedUserId.equals(sharedUid) && !x.packageName.equals(packageName)) { //sharedUserId 与当前 App 相同，且 packageName 和当前 App 不同的 App 信息，即插件 App packageBeanList.add(PackageInfoBean(packageManager .getApplicationLabel(x.applicationInfo).toString(), x.packageName)) } } }\"]},\"818\":{\"h\":\"生成插件 App 的 Context\",\"t\":[\"activity.createPackageContext(\\\"cf.android666.pluginapp\\\", Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY)\"]},\"819\":{\"h\":\"通过 Context 反射获取插件 App 中的资源\",\"t\":[\"//获取 ClassLoader var pClassLoader = PathClassLoader(pluginContext.packageResourcePath , ClassLoader.getSystemClassLoader()) //反射获取该类及其资源 var clazz = pluginContext.classLoader .loadClass(pluginContext.packageName + \\\".R\\\\$mipmap\\\") var abc = clazz.getField(s) var id = abc.getInt(R.mipmap::class.java) //调用插件 App 的 Context 获取其资源 var bg = pluginContext.resources.getDrawable(id)\"]},\"820\":{\"h\":\"加载未安装 Apk 内资源\"},\"821\":{\"h\":\"获取 apk 信息\",\"t\":[\"val sdPath = Environment.getExternalStorageDirectory().absolutePath val apkPath = \\\"$sdPath/plugin/plugin.apk\\\" var info = packageManager.getPackageArchiveInfo(apkPath, PackageManager.GET_ACTIVITIES)//获取未安装 apk 的 packageInfo\"]},\"822\":{\"h\":\"获取 ClassLoader\",\"t\":[\"var file = getDir(\\\"dex\\\", Context.MODE_PRIVATE) var dexClassLoader = DexClassLoader(apkPath, file.absolutePath, null, ClassLoader.getSystemClassLoader())\",\"getDir() 调用了 Context 的 getDir()\",\"Retrieve, creating if needed, a new directory in which the application can place its own custom data files. You can use the returned File object to create and access files in this directory. Note that files created through a File object will only be accessible by your own application; you can only set the mode of the entire directory, not of individual files.\"]},\"823\":{\"h\":\"通过反射加载类，获取资源\",\"t\":[\"var drawableClazz = dexClassLoader.loadClass(\\\"cf.android666.pluginapp.R\\\\$drawable\\\") var onePng = drawableClazz.getDeclaredField(\\\"abc\\\") var onId = onePng.getInt(R.id::class.java)//反射获取资源 id var resources = getUninstallApkResource()//resource 也是通过反射获取到 var drawable = resources.getDrawable(onId)\",\"AssetManager.addAssetPath()方法是用来将 apk 等中的资源添加到AssetManager中，再通过其获取到Resources对象，这样就获取到未安装 apk 中的资源了。\",\"fun getUninstallApkResource(): Resources { var assetManager = AssetManager::class.java.newInstance() var addAssetPath = assetManager.javaClass.getMethod(\\\"addAssetPath\\\",String::class.java) addAssetPath.invoke(assetManager, apkPath)//设置了 apkPath return Resources(assetManager, resources.displayMetrics, resources.configuration) }\"]},\"824\":{\"h\":\"参考资源\",\"t\":[\"Android 之 Android apk 动态加载机制的研究（二）：资源加载和 activity 生命周期管理 - lee0oo0 - 博客园 \",\"Android 逆向之旅---Android 中的 sharedUserId 属性详解 - CSDN 博客\"]},\"825\":{\"h\":\"数据结构_Hash 表\"},\"826\":{\"h\":\"前言\",\"t\":[\"Hash 表是一种可以快速插入和查找的数据结构，将数据保存在通过 hash 函数计算得到的下标中。\",\"插入和删除 所需时间为 O(1)。在确定容量、无需遍历时效果最好。\",\"当其大小接近容量时，效率会变得很差。\"]},\"827\":{\"h\":\"存储方式\",\"t\":[\"Hash 表有两种存储方式\",\"开放地址法\",\"开放地址法，直接将数据存储在数组中。\",\"当 hash 算出的地址已经被占用时，则走过一定的步长找到另外一个空位（在填充质数很大时就会很耗时）并保存数据。\",\"链地址法\",\"链地址法，创建保存数据的数组，该数组中不直接保存数据，而是保存一个用来存储这些数据的链表，将数据项直接存储的链表中。\",\"当 hash 算法计算出的地址时，遍历数组中对应的链表找到空位并保存。\",\"其中，开放地址法又分为 3 种实现：\",\"线性探测\",\"每次前进的步长为 1\",\"即查找的位置依次是x + 1,2,3,4,5,……\",\"存储达到容量 2/3 以上时候读写性能会很差\",\"二次探测\",\"每次前进的步长为当前查找次数的平方\",\"即查找的位置依次是x + 1,4,9,……\",\"当前几次找不到之后就会很恐慌，步长越来越大到后面无法继续下去\",\"再哈希法\",\"每次前进的步长是根据另外一个 hash 算法计算出来的值\",\"这个算法要求如下：\",\"1. 与第一次 hash 输出不同 2. 不能输出 0\",\"已经有一个公认的比较好的二次 hash 算法：\",\"stepSize = constant - (key % constant) 如：stepSize = 5 - (key % 5) * constant 是小于数组容量的质数\"]},\"828\":{\"h\":\"比较\",\"t\":[\"再哈希法 VS 二次探测法\",\"在小型哈希表中，再哈希法比二次探测好；\",\"但如果容量充足，并且容量大小不再变化时，二次探测效果好，在装填因子小于 0.5 时几乎没有性能损失\",\"开放地址法 VS 链地址法\",\"hash 表容器大小未知时，用链地址法比较好\",\"当装填因子变得很大时，开放地址法性能下降很快，但链地址法只是线性下降。\"]},\"829\":{\"h\":\"源码\",\"t\":[\"👉 点这里查看源码\"]},\"830\":{\"c\":[\"数据结构\"]},\"831\":{\"h\":\"数据结构_二叉树\"},\"832\":{\"h\":\"前言\",\"t\":[\"本文介绍了二叉树，及其应用。\",\"树，既能像链表那样快速插入和删除，又可以像数组那样快速查找。\",\"树\",\"每棵树有且只有一个根，从根到任何一个节点有且只有一条路径；每个节点都可以有 0 个或者多个子节点，没有子节点的节点叫做叶子节点。\",\"层是指从根节点到该节点的“代”树，根节点的在0 层。\"]},\"833\":{\"h\":\"二叉搜索树\",\"t\":[\"一个节点只能有 0~2 个子节点的树叫做二叉树；\",\"如果二叉树的左子节点的关键字小于该节点，右子节点的关键字大于该节点，则该二叉树称为二叉搜索树。\",\"如下，是一个二叉树的节点：\",\"class BinaryNode(val iId: Int, val dData: Double, var left: BinaryNode? = null, var right: BinaryNode? = null) { override fun toString(): String { return \\\"{$iId,$dData}\\\" } }\"]},\"834\":{\"h\":\"遍历\",\"t\":[\"遍历树指安装一定的顺序访问数的每个节点，按照访问节点的顺序不同，可以分为三种：\",\"前序遍历\",\"中序遍历\",\"后序遍历\",\"以中序遍历为例，其访问节点的顺序如下：\",\"调用自身遍历该节点的左子树；\",\"访问这个节点；\",\"调用自身遍历该节点的右子树。\",\"实现如下：\",\"/** * 中序遍历法 * 使所有节点的关键值按照升序被访问 */ fun inTraversing(node: BinaryNode?) { if (node == null) { return } inTraversing(node.left) print(\\\"$node,\\\") inTraversing(node.right) }\"]},\"835\":{\"h\":\"最大值和最小值\",\"t\":[\"二叉搜索树的最大值是右子树中最右端没有子节点的右子节点；\",\"二叉搜索树的最小值是左子树中最左端没有子节点的左子节点。\"]},\"836\":{\"h\":\"删除\",\"t\":[\"二叉搜索树因为节点要满足左子节点 < 节点 < 右子节点这个条件，所以删除需要分以下几种情况：\",\"按照要删除的节点子节点数目的不同，分为 3 种情况\",\"要删除的节点是叶节点 将其父节点的指向设为 null 即可\",\"要删除的节点有且只有一个节点 将其父节点指向其子节点\",\"要删除的节点有两个子节点 这时候可以找该子节点的右子树中最小的（或者左子树中最大的）节点并替换掉要删除的节点，\",\"与此同时如果这个节点有右子节点（或对应的左子节点）则按照 2/3 的规则处理，这样就能保证这个树的结构不会出错\",\"fun delete(iId: Int) { //查找 iId 对应的节点 var current = root var parent = root while (current?.iId != iId) { if (current == null) { return } parent = current current = if (iId > current.iId) { current.right } else { current.left } } if (parent == null) { return } /** * 按照要删除的节点子节点数目的不同，分为 3 种情况 * 1/3 要删除的节点是叶节点 将其父节点的指向设为 null 即可 * 2/3 要删除的节点有且只有一个节点 将其父节点指向其子节点 * 3/3 要删除的节点有两个子节点 这时候可以找该子节点的右子树中最小的（或者左子树中最大的）节点并替换掉要删除的节点， * 与此同时如果这个节点有右子节点（或对应的左子节点）则按照 2/3 的规则处理，这样就能保证这个树的结构不会出错 * 下面采用的是找该节点的右子树最小值，即右子节点或者右子节点的最后一个左子节点 * 找到后用该子节点的值替换掉要删除的节点值，如果该子节点还有右子节点，将该子节点的父节点指向其右子节点 */ if (current.left != null && current.right != null) { //双子节点 // 当前点右子节点的左子节点为 null if (current.right!!.left == null) { if (current.iId > parent.iId) { parent.right = current.right } else { parent.left = current.right } //TODO 是否需要将右节点的左子节点指向当前点的左子节点 return } var cChildNode = current.right var cParentNode = current!! while (cChildNode?.left != null) { cParentNode = cChildNode cChildNode = cChildNode.left } //后继节点 cParentNode.left = cChildNode!!.right cChildNode!!.right = current.right cChildNode!!.left = current.left if (current.iId > parent.iId) { parent.right = cChildNode } else { parent.left = cChildNode } } else if (current.left == null && current.right == null) { //叶子节点 if (current.iId > parent.iId) { parent.right = null } else { parent.left = null } } else if (current.left == null) { if (current.iId > parent.iId) { parent.right = current.right } else { parent.left = current.right } } else if (current.right == null) { if (current.iId > parent.iId) { parent.right = current.left } else { parent.left = current.left } } }\"]},\"837\":{\"h\":\"哈夫曼编码\",\"t\":[\"哈夫曼编码用来对一段文本进行压缩，解压。\",\"压缩：用字符的编码替代字符\",\"解压：用字符代替对应的编码\",\"实现思路如下：\",\" 将字符按照出现的频次生成优先级队列； \",\" 依次**取出**两个最小的字符，为他们生成一个父节点（父节点频次为两个子节点之和）； \",\" 并将插入优先级队列中，依次循环直到优先级队列中只有一个节点——哈夫曼树的根节点； \",\" 从哈夫曼树的根开始，以向左为 0，向右为 1 对其叶子节点上的字符赋予编码。 \",\"其过程如下图所示：\",\"哈夫曼编码示意图\"]},\"838\":{\"h\":\"源码\",\"t\":[\"👉 点这里 查看二叉树源码\",\"👉 点这里 查看哈夫曼编码源码\"]},\"839\":{\"c\":[\"数据结构\"]},\"840\":{\"h\":\"数据结构_图\"},\"841\":{\"h\":\"前言\",\"t\":[\"图，是由可以有多个边的顶点组成的结构。\",\"两个顶点之间有边连接，则称这两个顶点是邻接的。\",\"几个相互邻接的顶点组成的线叫做路径,至少有一条路径可以到达所有顶点的图叫做连通图。\",\"如果图的顶点只能从 A→B，不能从 B→A，就称图是有向图。\",\"如果边被赋予一定的权值（数字），就称图为带权图\"]},\"842\":{\"h\":\"存储方式\",\"t\":[\"图一般有两种存储方式：\",\"邻接矩阵 用 N*N 的数组保存图中所有的顶点，Arr[m][n]即表示 m、n 顶点是否邻接（Y:1,N:0）。\",\"比较占地方。\",\"邻接矩阵\",\"邻接表 用一个 N 大小的数组保存，数组元素是保存着顶点和他所有的邻接点的链表。\",\"邻接表\"]},\"843\":{\"h\":\"操作\",\"t\":[\"图的操作有插入（顶点），搜索等等。\",\"以下操作以邻接表方式为例。\"]},\"844\":{\"h\":\"插入\",\"t\":[\"插入分为插入顶点和插入边。\",\"插入边的时候需要注意，要同时更新 start 和 end 两个顶点对应的链表。\"]},\"845\":{\"h\":\"移除\",\"t\":[\"原理同插入边。\"]},\"846\":{\"h\":\"搜索\",\"t\":[\"搜索要求从某个特定顶点开始，沿着边移动到其他顶点，移动完毕后要保证访问了每个顶点。\",\"搜索又分为 DFS（深度优先搜索）、BFS（广度优先搜索）。\"]},\"847\":{\"h\":\"DFS\",\"t\":[\"DFS 的思想是，依次沿着顶点某一个邻接点，纵深访问，将该邻接点当做新的顶点压入栈中，继续纵深访问，直到有顶点没有可以访问的邻接顶点，将其打印出来（从栈中推出）；然后再返回上一层的邻接顶点中还可以访问的顶点（查找当前栈顶元素未访问的邻接点），直到没有可以访问的顶点。\",\"用栈实现，会先往深处遍历完一条路径，再遍历下一条。每个顶点只访问一次\",\"规则：\",\" 1/3 访问一个邻接的未访问顶点，访问并标记，将其压入栈中； \",\" 2/3 当规则 1 不能满足时，如果栈不为空，从栈中弹出一个顶点； \",\" 3/3 1,2 都无法满足时，搜索结束。 \",\"private fun dfs() { var stacks = DfsStacks(hashMap.size) var keyArr = hashMap.keys.toIntArray() stacks.push(keyArr[0]) hashMap[keyArr[0]]?.isVisited = true var index = hashMap[keyArr[0]] while (stacks.size > 0) { var availableKey = getAvailableNode(index!!.data) if (availableKey != -1) { index = hashMap[availableKey]//深度优先搜索，会先顺着一个邻接点一直走到头 index!!.isVisited = true stacks.push(availableKey) } else { var pop = stacks.pop() print(\\\"$pop \\\") index = hashMap[stacks.peek()]//如果一个邻接点再没有未访问的邻接点，那么去访问下一个未访问的邻接点 } } }\"]},\"848\":{\"h\":\"BFS\",\"t\":[\"BFS 的思想是，向将当前顶点的所有可以访问的邻接点访问完毕；之后将该顶点打印（推出），再去访问其邻接点的所有可以访问邻接点（从队列头取出一个顶点，查找其未访问的邻接点）。\",\"用队列实现，会先遍历完本层所有的顶点，然后再移向下一层\",\"规则：\",\" 1/3 先访问当前顶点的所有邻接顶点，标记，并插入到队列； \",\" 2/3 如果没有可以访问的邻接点，且队列不为空，从队列头取出一个顶点[此处又用到了一次该点]，使其成为当前顶点，重复 1； \",\" 3/3 如果 2 不能满足，搜索结束。 \",\"private fun bfs() { var queue = BfsQueue() var keyArr = hashMap.keys.toIntArray() queue.push(keyArr[0]) hashMap[keyArr[0]]!!.isVisited = true var index = hashMap[keyArr[0]] while (queue.size > 0) { var availableKey = getAvailableNode(index!!.data) if (availableKey != -1) { var current = hashMap[availableKey]!!//广度优先搜索，优先将一个节点的所有邻接点依次访问 current.isVisited = true queue.push(current.data) } else { var pop = queue.pop() print(\\\"$pop \\\") if (queue.peek() == -1) { break } index = hashMap[queue.peek()]//如果该点没有未访问的邻接点，就选择去访问该点邻接点的邻接点 } } }\"]},\"849\":{\"h\":\"最小生成树 MST\",\"t\":[\"生成树（Template:Lang-en-short）是具有图 G 的全部顶点，但边数最少的连通子图。\",\"——维基百科\",\"带权图的生成树中，总权重最小的称为最小生成树。\",\"最小生成树边比顶点数小 1。\",\"当图的每一条边的权值都相同时，该图的所有生成树都是最小生成树。\",\"如果图的每一条边的权值都互不相同，那么最小生成树将只有一个。\",\"无向不带权图中，只需要找出最小数量的边即可。用 DFS 比较好实现，因为他对每个顶点只访问一次。\"]},\"850\":{\"h\":\"拓扑排序\",\"t\":[\"拓扑排序是指有向图的顶点排序，满足以下条件*：\",\"每个顶点出现且只出现一次；\",\"若 A 在序列中排在 B 的前面，则在图中不存在从 B 到 A 的路径。\",\"实现思路是：\",\"依次推出有向图中没有后继点的顶点作为排序的最后项，这是因为按照拓扑排序条件2没有后继点的顶点必然排在后面；\",\"当去掉没有后继点的顶点后又会产生新的没有后继点的顶点，这样依次循环，当图中没有顶点的时候，就可以在有向无环图中完成拓扑排序。\",\"对于有环存在（即存在类似 A→B，B→C，C→A 的情况）的有向图，会出现找不到没有后继点的顶点，但同时图中顶点数不为0的情况，遇到这种情况退出循环，并说明有环存在即可。\",\"/** * 拓扑排序 */ fun topologicalSort() { if (hashMap.size == 0) { return } var displayList = ArrayList<T?>() while (hashMap.size > 0) { var successorKey = getSuccessorNode() if (successorKey == null) {//图中还有顶点，但却找不到“没有后继点的顶点”，说明有环 println(\\\"图中有环\\\") break } else { hashMap.remove(successorKey)//如果找到满足条件的顶点，从图中删除并保存的排序结果中 displayList.add(successorKey) } } print(\\\"\\\\n ${displayList.reversed()} \\\\n\\\")//以正确的顺序输出排序结果 } /** * 遍历图，查找没有后继点的顶点 * @return -1 表示没有这样的点 否则返回该点 key */ fun getSuccessorNode(): T? { val result: T? = null var ketSet = hashMap.keys ketSet.map {//遍历图中每个顶点 //如果顶点没有后继点 (没有邻接点，或者邻接点已经被删除) 就是满足条件 var node: GraphicNode<T>? = hashMap[it]?.next ?: return it while (node != null) { var realNode = hashMap[node.data] if (realNode != null) { return@map//有后继点，不满足条件，查找下一个顶点 } node = node.next//还有其他邻接点，依次遍历 } return it } return result//没有找到“没有后继点的顶点” }\"]},\"851\":{\"h\":\"源码\",\"t\":[\"👉 点这里 查看DFS/BFS/MST源码\",\"👉 点这里 查看拓扑排序源码\"]},\"852\":{\"h\":\"参考资料\",\"t\":[\"拓扑排序——维基百科\"]},\"853\":{\"c\":[\"数据结构\"]},\"854\":{\"h\":\"数据结构_堆\"},\"855\":{\"h\":\"前言\",\"t\":[\"堆是一种特殊的二叉树，用他实现的优先级队列插入和删除时间复杂度都是O(LogN) 。\"]},\"856\":{\"h\":\"特征\",\"t\":[\"堆是完全二叉树*\",\"常用数组实现\",\"每个堆的节点都满足堆的条件，即堆的每个节点关键字都大于（或等于）子节点的关键字\",\"特征3保证了根节点是堆中最大的值，以及顺着某一个节点一直到遇到叶节点的路径上的节点关键字是依次递减的，但是没法保证这个值是这个堆中的最小值，这是因为堆中每个节点的左右子节点的位置和大小无关，两条这样的路径之前的值的大小没有一定的关系。\"]},\"857\":{\"h\":\"操作\",\"t\":[\"堆可以进行插入、移除，遍历等操作，时间复杂度都是O(LogN)。初次之外，利用堆根节点关键值最大这个属性，还可以进行堆排序,时间复杂度为O(N∗LogN)。\",\"对于在数组中保存的堆，设元素下标为x，则各个相关元素下标如下：\",\"父节点 (x-1)/2\",\"左子节点 2*x+1\",\"右子节点 2*x+2\",\"在插入，移除的时候为了保证满足堆的条件，需要对堆进行向上或向下的遍历，将修改的值移动到对应的位置，在这过程中涉及到复制和交换。如果每次比较都需要交换数据的话会复制很多次，而如果将最终要移动值保存在临时变量中，用一个值专门记录要移动到的下标，在每次符合条件时只复制参与对比的值，在最后再将要临时保存的值复制到目的下标，就会减少复制的次数。\",\"如下图就将复制次数从 9 次减少到了 5 次。\"]},\"858\":{\"h\":\"插入\",\"t\":[\"插入操作思路是，将元素插入到数组最后一位，然后依次向元素父节点遍历，将不满足的元素下沉，直到找到满足堆特征3（父节点关键字大于该点，并且子节点关键字小于该点）的下标，或者指向了根目录，将该元素插入该处。\",\" /** * 从下向上遍历 * 如果父节点比插入值小，就将父节点移动到插入值的位置，将toIndex指向空出的地方 * 依次查找，直到查找到父节点比插入值大，子节点比插入值小的地方，或者指向了根节点 */ private fun checkUp(index: Int) { var bottom = headArray[index]//headArray是保存堆元素的数组 var toIndex = index var father = (toIndex - 1) / 2 while (toIndex > 0 && bottom!!.key > headArray[father]!!.key) { headArray[toIndex] = headArray[father]//将父节点下沉 toIndex = father father = (toIndex - 1) / 2 } headArray[toIndex] = bottom//将该值插入到对应下标 }\"]},\"859\":{\"h\":\"移除\",\"t\":[\"移除指的是将根节点推出堆中。\",\"基本思路是将根节点推出，再将数组最后一个节点（同时也是堆的最后一个节点）移动到根节点空出的位置，再依次向下遍历，直到将该节点放到符合堆条件的位置或者到达叶子节点。\",\"和插入相比，移除时要移动的节点要比较的稍微多些。\",\"该节点是叶节点 直接插入 ✅\",\"有两个子节点 和两个叶子节点中最大的比较，如果小于则交换，并再和新的子节点比较\",\"只有左节点 如果左节点大于本节点则交换，否则就是该位置\",\"/** * 从上向下遍历 * 如果遇到比当前值top大的就将其复制到当前位置toIndex，并记录下空出的位置为toIndex * 再以toIndex为起点向下比较，直到遇到top比父节点小，比子节点大的位置，或者叶子节点 * 将top移动到该位置 */ private fun checkDown(index: Int) { var toIndex = index var top = headArray[size - 1]!! while (toIndex < size / 2) {//非叶子节点 var leftIndex = 2 * toIndex + 1 var rightIndex = 2 * toIndex + 2 if (headArray[rightIndex] == null) {//只有左节点 if (headArray[leftIndex]!!.key > top.key) { headArray[toIndex] = headArray[leftIndex] toIndex = leftIndex } else { break } } else if (headArray[leftIndex] != null && headArray[rightIndex] != null) { if (headArray[leftIndex]!!.key >= headArray[rightIndex]!!.key) {//如果左节点比较大 if (headArray[leftIndex]!!.key > top.key) { headArray[toIndex] = headArray[leftIndex] toIndex = leftIndex } else { break } } else {//如果右节点比较大 if (headArray[rightIndex]!!.key > top.key) { headArray[toIndex] = headArray[rightIndex] toIndex = rightIndex } else { break } } } } headArray[toIndex] = top//将该节点移动到找到的下标处 }\"]},\"860\":{\"h\":\"堆排序\",\"t\":[\"利用堆根节点关键值最大这一特性，可以进行堆排序。\",\"只需要将待排序的数组依次插入堆中，然后再依次移除即可。\",\"这样需要有两倍与待排序数组大小的空间。如果每次插入时候只保存数据，不进行向上遍历，在每次移除数据时进行向下遍历，将当前剩余数据最大值选出来（其余数据仍然无序）从堆中移除根元素时都会在数组末尾空出一个位置，将该值存储在该位置即可，这样等完全插入、移除后就得到一个有序数组【从数组末尾开始依次减小】\",\"堆排序和快速排序时间复杂度都是 O(N*LogN) ，但是由于向上、向下遍历耗时，实际上要比快速排序稍慢一些。但是堆排序堆数据初始分布不敏感一直都是 O(N*LogN) ，快速排序在某些情况下时间复杂度可达到 O(N^2) 。\"]},\"861\":{\"h\":\"附录\"},\"862\":{\"h\":\"满二叉树\",\"t\":[\"满二叉树指除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树。\",\"如果一个二叉树的层数为 K，且节点总数是 (2k)−1 ，则它就是满二叉树。\",\"满二叉树\"]},\"863\":{\"h\":\"完全二叉树\",\"t\":[\"完全二叉树 如果将二叉树每层从左到右遍历，那么完全二叉树只有最后一层的右边会出现没有叶子节点的情况，即在前 1~n 之间没有“洞”。\",\"如下图就是一个完全二叉树：\",\"完全二叉树\",\"但下图不是完全二叉树：\",\"不是完全二叉树\"]},\"864\":{\"h\":\"源码\",\"t\":[\"👉 点这里 查看源码\"]},\"865\":{\"h\":\"参考链接\",\"t\":[\"满二叉树——百度百科\",\"完全二叉树与满二叉树的区别\",\"《Java 数据结构和算法 （第二版）》 Robert Lafore 陈维宁\"]},\"866\":{\"c\":[\"数据结构\"]},\"867\":{\"h\":\"数据结构_总结\"},\"868\":{\"h\":\"前言\",\"t\":[\"本文汇总了数据结构的优缺点及应用场景。\",\"通用数据结构：数组、链表、树、哈希表\",\"专用数据结构：栈、队列、优先级队列\",\"排序：冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序\",\"图：邻接矩阵、邻接表\"]},\"869\":{\"h\":\"通用数据结构\",\"t\":[\"这些数据结构使用关键字的值存储、查找数据\",\"其速度如下：\",\"哈希表 > 树 > 链表 > 数组\",\"数组：数据量小，大小可以预测时使用\",\"链表：数据大小不可预知，或需要频繁插入删除元素时使用\",\"二叉搜索树：如果数组和链表都很慢时，优先考虑二叉树\",\"平衡树：二叉搜索树很快，但是如果遇到数据是逆序的时候，就会很耗性能，而平衡树则不会\",\"哈希表：在数据存储结构中最快，但是需要有额外的空间\",\"下面是以上数据结构的速度：\",\"通用数据结构速度统计\"]},\"870\":{\"h\":\"专用数据结构\",\"t\":[\"包括栈、队列、优先级队列（堆），都是抽象数据结构 (ADT)，由更加基础的通用数据结构组成。\",\"不能查找或者遍历，只能访问指定元素（头部，队列也可以访问尾部）。\"]},\"871\":{\"h\":\"栈\",\"t\":[\"先进后出 (FILO)，最后插入的数据在栈顶，每次只能访问栈顶元素。\"]},\"872\":{\"h\":\"队列\",\"t\":[\"先进先出 (FIFO)，最后插入的数据在队尾，最先插入的在队首，每次先弹出队首的元素。\"]},\"873\":{\"h\":\"优先级队列\",\"t\":[\"是一种特殊的队列，不同的是优先级高的在队首，优先级低的在队尾，每次弹出优先级最高的元素（这意味着每次插入或弹出时要进行排序）。\"]},\"874\":{\"h\":\"效率\",\"t\":[\"专用数据结构效率比较\"]},\"875\":{\"h\":\"排序\",\"t\":[\"排序包括冒泡排序、选择排序、插入排序，希尔排序、快速排序、归并排序、堆排序。\",\"一般使用排序优先级：\",\"插入排序 > 希尔排序 > 快速排序 > 归并排序 > 堆排序\",\"归并排序：需要辅助存储空间\",\"堆排序：需要一个堆的数据结构，比快速排序更适于非随机数据\",\"快速排序：处理非随机数据时会慢到O(N2)\",\"下面是排序算法比较：\",\"排序算法比较\"]},\"876\":{\"c\":[\"数据结构\"]},\"877\":{\"h\":\"数据结构_数组，链表\"},\"878\":{\"h\":\"前言\",\"t\":[\"本文介绍了数组、链表等数据结构。\",\"设定所有排序：小 → 大。\"]},\"879\":{\"h\":\"数组\",\"t\":[\"数组（array）是一组具有相同类型元素的集合，用一段连续的内存来保存。使用下标来访问保存的元素，如a[0]。\",\"数组是一种数据存储结构。\",\"int a[] = new int[10];\",\"数组大小固定，对指定下标元素读写快 O(1)，但是查找慢 O(N)，删除元素慢 O(N)。\"]},\"880\":{\"h\":\"有序数组\",\"t\":[\"在每次插入的时候对元素进行排序，就得到有序数组。\",\"有序数组查找快 O(LogN)，但插入慢 O(N)，删除元素慢 O(N)。\",\"有序数组插入：\",\"fun insertSort(key: Int) { if (size >= sortArr.size) { return } if (size == 0) { sortArr[size++] = key return } var insertIndex = ++size - 1 while (key < sortArr[insertIndex - 1]) { sortArr[insertIndex] = sortArr[insertIndex - 1] insertIndex-- if (insertIndex == 0) { break } } sortArr[insertIndex] = key }\",\"在有序数组要找到某个元素 t 可以使用二分查找，其思想是：\",\"选取一个中间值 n 将当前数组一分为二。\",\"如果t==n那么查找结束，如果t<n,那么在右半部分数组查找，否则在左半部分数组查找。\",\"重复步骤1,2，直到找到 n 或者数组已经不可再分（不存在 n），结束查找。\",\"二分法查找：\",\"fun dichotomy(array: IntArray, key: Int): Int { if (array.size < 2) { return -1 } var centerIndex = array.size / 2 var centerKey = array[centerIndex] return when { key == centerKey -> centerIndex key < centerKey -> dichotomy(array.copyOfRange(0, centerIndex), key) else -> dichotomy(array.copyOfRange(centerIndex - 1, array.size), key) } }\"]},\"881\":{\"h\":\"链表\",\"t\":[\"链表的每个节点除了保存的数据外，还保存着下一个节点的引用next，最后一个元素中该引用为null。\",\"链表的大小不固定，查找，删除，插入指定节点都需要 O(N)\",\"链表有以下分类：\",\"单链表 每个节点只有指向下一个节点的引用，链表只保留第一个链节点的引用first\",\"单链表\",\"双向链表 每个节点保存有父节点和子节点的引用。双向链表也可以是双端链表。\",\"双向链表\",\"双端链表 双端链表保存第一个链节点farst和最后一个链节点last的引用。\",\"双端链表\"]},\"882\":{\"h\":\"源码\",\"t\":[\"👉 点这里 查看链表源码\"]},\"883\":{\"h\":\"参考文献\",\"t\":[\"数组--维基百科\",\"Java 数据结构和算法（第二版）Robert Laforce 计晓云等译\"]},\"884\":{\"c\":[\"数据结构\"]},\"885\":{\"h\":\"数据结构_栈和队列\"},\"886\":{\"h\":\"前言\",\"t\":[\"本文介绍栈、队列两种抽象数据类型。\"]},\"887\":{\"h\":\"栈\",\"t\":[\"栈stack，又称堆栈，是一种抽象数据类型，每次只能访问栈顶元素top，可以进行压入push和推出pop操作。其元素先进后出 (FILO)。\"]},\"888\":{\"h\":\"队列\",\"t\":[\"队列queue,是和栈相对的一种抽象数据类型，每次从后端rear插入，从前端front删除。其元素先进先出 (FIFO)。\",\"用链表实现的队列可以自由扩充，不存在伪溢出问题，但是插入和读取比较耗时；\",\"用数组实现的队列大小固定，可以使用循环队列解决伪溢出问题，即当尾端（前端也类似）指针指向超出数组大小时，可以指向数组开始位置，因为此时大小不超过数组的队列前端已经指向 0 之后的位置了，所以不会冲突。\"]},\"889\":{\"h\":\"优先级队列\",\"t\":[\"和队列定义一致，只是在每次插入的时候都进行排序，以满足排序规则（如尾端→前端小→大）。\"]},\"890\":{\"h\":\"中缀表达式与后缀表达式\",\"t\":[\"中缀表达式，指运算符在操作数中间的，如1 + 2。\",\"后缀表达式，指运算符在操作数后面的，如1 2 +。\",\"中缀表达式 ↔ 后缀表达式：\",\"中缀表达式：1 + 2 * ( 3 + 5 ) - 2 * 3 - 9 / 2 后缀表达式：1 2 3 5 + * + 2 3 * - 9 2 / -\",\"转换规则：\",\"设一个栈用于保存运算符，从左到右依次遍历中缀表达式，假设读取到的是x\",\"如果是操作数，则直接打印\",\"如果是运算符(，则压入栈中\",\"如果是运算符)，则推出栈中的元素，直到遇到(,推出(，继续读取下一个\",\"否则，读取栈顶元素top，如果是(，将x压入栈中；\",\"如果x优先于top，将x压入栈中；\",\"否则，将top推出，在此和新的top比较，直到遇到top是(或者优先级比x高，或者栈已经空了，将x插入栈中。\",\"/** * 中缀表达式转化为后缀表达式 * @param infix 中缀表达式 1+2 * @return 后缀表达式 1 2 + */ public static String[] covertInfixToPostfix(String infix) { StringBuilder stringBuilder = new StringBuilder(); OperatorStack operatorStack = new OperatorStack(); for (char item : infix.toCharArray()) { // 数字 if (item >= '0' && item <= '9') { stringBuilder.append(item + \\\",\\\"); } else if (item == '(') { operatorStack.insert(item); } else if (item == ')') { int size = operatorStack.size(); for (int i = 0; i < size; i++) { try { char pop = operatorStack.pop(); if (pop == '(') { break; } else { stringBuilder.append(pop + \\\",\\\"); } } catch (Exception e) { System.out.println(\\\"栈为空\\\"); } } } else { try { char peek = operatorStack.peek(); if (peek == '(') { operatorStack.insert(item); } else if (isPre(item, peek) > 0) { operatorStack.insert(item); } else { int size = operatorStack.size(); for (int i = 0; i < size; i++) { try { char pop = operatorStack.peek(); if (pop == '(') { break; } else if (isPre(item, peek) > 0) { break; } else { stringBuilder.append(pop + \\\",\\\"); operatorStack.pop(); } } catch (Exception e) { break; } } operatorStack.insert(item); } } catch (Exception e) { System.err.println(\\\"栈为空\\\"); operatorStack.insert(item); } } } int size = operatorStack.size(); for (int i = 0; i < size; i++) { try { stringBuilder.append(operatorStack.pop() + \\\",\\\"); } catch (Exception e) { System.out.println(\\\"栈为空\\\"); break; } } String result = stringBuilder.toString(); return result.split(\\\",\\\"); }\"]},\"891\":{\"h\":\"源码\",\"t\":[\"👉点这里查看中缀表达式 → 后缀表达式源码\"]},\"892\":{\"h\":\"参考资料\",\"t\":[\"堆栈——维基百科\",\"队列——维基百科\"]},\"893\":{\"c\":[\"数据结构\"]},\"894\":{\"h\":\"数据结构_简单排序\"},\"895\":{\"h\":\"简单排序\",\"t\":[\"所有排序顺序为 小 → 大。\",\"时间负责度都是 O(N2)。\",\"排序速度：插入排序>选择排序>冒泡排序\"]},\"896\":{\"h\":\"冒泡排序\",\"t\":[\"时间复杂度：O(N2)\",\"最慢的排序，但是简单\",\"规则如下：\",\"从左到右，比较 a 和 b，如果a>b，就交换 a 和 b 的位置\",\"再将 a，b 中较大的那个与 c 按照 2 的规则比较，直到最后一位\",\"重复 1，2 直到没有待排序的项目\",\"其思想是：每次选出当前未排序的元素中最大的元素并放到队尾（每次比较最大元素都会“冒泡”到队尾），这样当连续遍历 n 次后，每个元素都会排好序。\",\"/** * 冒泡排序 * 1. 每次比较前1~（n-i）个元素（i是排序次数），每次有大的就【移动】， * 这样子一轮比赛完毕最大的就在后面了 * 2. 这样子比较n次就可以完成排序 */ fun bubbleSort(intArray: IntArray): IntArray { var result = intArray var size = result.size for (index in 0 until size) { for (x in 0 until size - index - 1) { if (result[x] > result[x + 1]) {//【注意】冒泡排序，每次比较满足条件就会交换 var temp = result[x] result[x] = result[x + 1] result[x + 1] = temp } } } return result }\"]},\"897\":{\"h\":\"选择排序\",\"t\":[\"时间复杂度：O(N2)\",\"因为交换次数少，所以比冒泡快\",\"规则如下：\",\"假设第一项值最大，设其坐标为max，从左到右依次比较max和其他元素，如果遇到比max大的，将 max 坐标指向该值\",\"每轮结束后max就表示这轮比较最大的值坐标，将其与当前未排序的最后一项交换\",\"这样重复步骤 1，2， n次就可以排序完成\",\"其思想是：每次比较当前最大的值，记录下其坐标，等当前比较完成就和未比较的最后一位交换，（这样子避免每次比较都要交换）。同样这样子比较 n 次就可以完成排序。\",\"/** * 选择排序 * 1. 每次比较前1~（n-i）个元素（i是排序次数），如果有大的就记录下位置，一轮比较完毕后交换他和最后一位的位置 * 2. 这样子比较n次就可以完成排序 */ fun selectSort(intArray: IntArray): IntArray { var result = intArray var size = result.size for (index in 0 until size) { var max = 0//假设arr[0]最大 for (x in 0 until size - index - 1) { if (result[max] < result[x + 1]) {//将max与每一项比较，注意这里参与比较的是max max = x + 1//遇到比max大的则记录下其位置 【注意】这里并没有交换 } } //在每轮比较完毕后max就是这轮比较出来的最大值位置，将其放到对应位置 var temp = result[size - index - 1] result[size - index - 1] = result[max] result[max] = temp } return result }\"]},\"898\":{\"h\":\"插入排序\",\"t\":[\"时间复杂度：O(N2)\",\"比冒泡快一倍，比选择排序快一些\",\"思想：假设一个标记元素的左边全部是有序数组，右边全是无序数组，那么只需要将右边的元素依次拿出来插入到左边的有序数组中即可。刚开始这个标记元素可以为 0 或者 1（假设一个元素就是有序的）。\",\"/** * 插入排序 * 假设右端数组是有序的，依次从左端数组取出元素比较，插入到右边的有序数组 */ fun insertSort(intArray: IntArray): IntArray { var result = intArray var size = result.size for (insertIndex in 1 until size ) {//假设arr[0]已经是有序的，所以从1开始 var insertPoint = result[insertIndex] for (index in insertIndex - 1 downTo 0) { if (insertPoint < result[index]) { //默认要插入的点是有序的，如果有比插入点大的，则将该点和插入点交换 result[index + 1] = result[index] result[index] = insertPoint } else { //因为左边的数组是有序的，只要有比插入点小的元素，则剩下的肯定都小于该元素，不用再比较了 break } } } return result }\"]},\"899\":{\"h\":\"源码\",\"t\":[\"👉 点这里查看源码\"]},\"900\":{\"c\":[\"数据结构\"]},\"901\":{\"h\":\"数据结构_红黑树\"},\"902\":{\"h\":\"前言\",\"t\":[\"红黑树是一种特殊的二叉搜索树，查找，插入和删除的时间复杂度均为O(log2​N)。\",\"红黑树必须满足以下条件：\",\"必须有颜色（黑/红）\",\"根节点颜色为黑\",\"若节点是红色，则子节点必须是黑色（反之则不然）\",\"到叶节点或空子节点的每一条边上的黑色节点数量必须相同（空子节点指本应该有叶节点却没有的节点，默认为黑色）\",\"如果不满足可以通过以下方式修正：\",\"改变节点颜色\",\"旋转（左、右）\"]},\"903\":{\"h\":\"旋转\",\"t\":[\"以某个支点旋转（右旋为例，旋转时注意更新各个节点的父节点）：\",\"本质是将该节点a向下进一位插入到其右节点b原先的位置，将其左节点c向上进一位插入到该节点a原先的位置，并将左节点c的右节点赋值给该节点a。\",\"步骤：\",\"将该节点a放到右节点b的位置，将该``左节点 c放到节点 a`原先的位置，依次类推\",\"特殊的，将该点a的内侧孙子（a的左子节点c的右子节点d）断开与其父节点c的连接，转而连接到a上，成为a的左子节点\",\"如图，依次插入6,34,23，以34为支点右旋：\",\"对获得的结果，由于，都是红色违反了规则3，将34的父节点23设置黑，祖父节点6设为红，以祖父节6点为支点左旋：\",\"最终结果\"]},\"904\":{\"h\":\"插入\",\"t\":[\"每次插入红色节点，能够避免规则 4。\",\"一般先以二叉搜索树的规则将数据插入表中，然后再对照规则检查是否需要调整红黑树。\",\"红黑树插入情况分类如下：\",\"插入位置为根节点，将节点颜色更改为黑色\",\"插入位置的父节点为根节点或父节点颜色为黑色，直接插入\",\"父节点为红色。\",\"只有父节点为红色这种情况需要进行修正，这时又可以细分为以下三种情况：\",\"表格来自 http://www.cnblogs.com/skywang12345/p/3245399.html#a1\",\"【注意】对于Case 3当祖父节点没有左节点无法右旋时的特殊处理：\",\"需要对先对当前节点的父节点进行右旋，再以父节点作为新插入的点 N，将 N 的父节点设置为黑色，祖父节点设置为红色，以祖父节点为支点左旋。\",\"如依次插入如下值：\",\"32,3,53,13,983,[137],237,83,483,43,183\",\"当插入137后红黑树如图：\",\"插入 137 后的树\",\"本来按照Case 3 父红 叔黑 是左节点 应该要以祖节点右旋，但是组节点 53 没有左子节点，无法右旋，所以先对父节点 983 进行右旋：\",\"再以983为新节点，父红 叔黑 是右节点，将父节点137设置为黑色，祖节点53设置为红色，以组节点53为支点左旋：\"]},\"905\":{\"h\":\"删除\",\"t\":[\"删除比较复杂，可以有两种操作：\",\"在节点中保存一个标志位，标记该节点是否被删除，并不针真的删除该点。\",\"在执行删除操作时真正删除该点。\"]},\"906\":{\"h\":\"源码\",\"t\":[\"👉 点这里查看源码\"]},\"907\":{\"h\":\"参考文档\",\"t\":[\"在线操作红黑树\",\"红黑树 (一) 之 原理和算法详细介绍\"]},\"908\":{\"c\":[\"数据结构\"]},\"909\":{\"h\":\"数据结构_递归和汉诺塔问题\"},\"910\":{\"h\":\"前言\",\"t\":[\"本文介绍了递归，归并排序，还有递归在汉诺塔问题上的应用。\",\"排序顺序为 小 → 大\"]},\"911\":{\"h\":\"递归\",\"t\":[\"递归是一种在函数内部调用自己的函数。在满足一定条件后可以退出递归。\",\"比如三角数组就是一个简单的递归：\",\"有一组数据，满足这样的条件第n项 = 第n-1项 + n，就称为三角数组，如：\",\"1,2,6,10,15,21...\",\"这里面，第n项 = 第n-1项 + n,就是一个递归，每一项的计算结构都依赖于前一项的计算，直到第 1 项的计算结果为确定的 1，不再继续递归。\",\"实现如下：\",\"/** * 三角数 * 第 n 个数 == 第 n-1 个数 + n */ fun triangleNum(num: Int): Int { if (num == 1) { return num } return num + triangleNum(num - 1) }\"]},\"912\":{\"h\":\"汉诺塔问题\",\"t\":[\"汉诺塔是一种游戏，有三个柱子，其中一棵柱子上面有若干个半径依次递减的空心圆盘，每次只能移动最顶端的圆盘，并且下面的圆盘要比上面的圆盘直径大。游戏的目的就是在满足这些条件的前提下，将所有圆盘依次转移到另外一个圆盘上面。\",\"汉诺塔问题分析\",\"如图，实现的思路就是递归：\",\"将除最底部的圆盘bottom之外的所有圆盘当做一个整体other，那么问题就变成了如何将bottom和other这“两”个圆盘通过柱子B，移动到柱子C，这个问题显然很好解决，只需要将other移动到柱子B，再将bottom移动到柱子C即可。\",\"那么剩下的问题就成了如何将other从柱子A移动到柱子B，很显然可以参照步骤1。\",\"这样子这个问题就成了如何将一个bottom从一个柱子，移动到另外一个柱子的问题，而每个这样的问题的解决都依赖于other的解决，而这就是递归。\",\"具体实现：\",\"/** * 汉诺塔问题 * 将汉诺塔问题简化为 3 步： * 1/3 将最上层 n-1 项移动到过渡层 * 2/3 将最底层 n 移动到目标层 * 3/3 将 n-1 项移动到目标层 * @param num 要移动的层数 * @param from 所在层 * @param inter 过渡层 * @param to 目标层 */ var hanioStepNum = 0 fun hanioTower(num: Int, from: String, inter: String, to: String) { if (num == 1) { println(\\\"move 1 to $to\\\") hanioStepNum++ } else { hanioTower(num - 1, from, to, inter)//把`other`移动到中间柱子 println(\\\"move $num to $to\\\")//把`bottom`移动到目标柱子 hanioStepNum++ hanioTower(num - 1, inter, from, to)//把`other`移动到目标柱子 } }\"]},\"913\":{\"h\":\"归并排序\",\"t\":[\"归并排序merge，将一个数组，分成两个子数组分别排序，之后再将拍好序的数组合并，这样就得到了一个有序数组。时间复杂度是O(N∗Log(N))。\",\"其思路是，将数组无限的分成两份分别进行排序，然后再将排好序的两个数组归并在一起得到有序数组。每个子数组的有序都依赖于其子数组的有序，直到每个子数组只有一个元素，这样的数组本身就是有序的。\",\"原理如下（假设序列共有 n 个元素）：\",\"将序列每相邻两个数字进行归并操作，形成两个n/2序列，排序后每个序列包含 1/2 元素\",\"若此时序列数不是 1 个，则将上述序列再次归并，分别形成两个n/4序列，每个序列包含 1/4 个元素\",\"重复步骤 2，直到所有元素排序完毕，即序列数为 1\",\"归并排序动态演示\",\"合并两个有序的数组 (a,b) 思想：\",\"将b中比a中小的元素都复制到a中对应位置，然后将剩下的元素全部依次复制到a的末尾。\",\"归并排序具体实现：\",\"/** * 归并排序 * 归并排序占空间（多占一个排序数组的大小），排序快（N*LogN） * 思想是： * 1/2 将数组无限分成两份，直到两份数组都是有序的（每个数组只有一个元素） * 2/2 再对其进行归并 * 小 -> 大 * @param intArr 待排序的数组 */ fun mergeSort(intArr: IntArray): IntArray { var size = intArr.size if (size == 1) { return intArr } else { var half = 0 if (size % 2 == 0) { half = size / 2 } else { half = (size + 1) / 2 } var arr1 = intArr.copyOfRange(0, half) val arr2 = intArr.copyOfRange(half, intArr.size) return merge(mergeSort(arr1), mergeSort(arr2))//将合并好的两个有序子数组合并 } } /** * 归并 * 合并两个有序的数组为新的有序数组 * 思想： * 1/2 相互比较两个数组每项大小，并将小的复制到新数组 * 2/2 将剩余的数组全部复制到新数组 * 小 -> 大 * @param intArrA 有序数组 1 * @param intArrB 有序数组 2 */ fun merge(intArrA: IntArray, intArrB: IntArray): IntArray { var resultArr = IntArray(intArrA.size + intArrB.size) var indexA = 0 var indexB = 0 var indexC = 0 while (indexA < intArrA.size && indexB < intArrB.size) { if (intArrA[indexA] < intArrB[indexB]) { resultArr[indexC++] = intArrA[indexA++] } else { resultArr[indexC++] = intArrB[indexB++] } } while (indexA < intArrA.size) { resultArr[indexC++] = intArrA[indexA++] } while (indexB < intArrB.size) { resultArr[indexC++] = intArrB[indexB++] } return resultArr }\"]},\"914\":{\"h\":\"源码\",\"t\":[\"👉点这里 查看汉诺塔和递归排序源码\"]},\"915\":{\"h\":\"参考资料\",\"t\":[\"归并排序——维基百科\"]},\"916\":{\"c\":[\"数据结构\"]},\"917\":{\"h\":\"数据结构_高级排序\"},\"918\":{\"h\":\"前言\",\"t\":[\"本文介绍两种高级排序：希尔排序和快速排序。\",\"希尔排序的时间复杂度是O(N∗(LogN)2)，简单易实现，在所有排序中可以优先使用。\",\"快速排序的时间复杂度是O(N∗LogN)，是所有通用排序中最快的。\",\"排序方向：小 → 大。\"]},\"919\":{\"h\":\"希尔排序\",\"t\":[\"希尔排序基于插入排序（将左边无须的元素依次插入到右边有序数组中），不同的是希尔排序的增量逐渐减小到 1，而插入排序的增量一直是 1。\",\"增量 排序的时候进行比较的两个元素之间的间隔：\",\"int[] arr = {1,2,3,4,5};\",\"对于数组arr中的元素来说，1和 2之间的增量是 1，而 1和 3之间的增量是 2，以此类推。\",\"由于插入排序在排序进行到后期，右边有序数组的大小变大，导致插入和移动的次数越来越多，而且如果数组恰好是反序的，会很耗时。\",\"而希尔排序在刚开始排序时，先取一个适当的增量n，按照这个增量对数组arr进行插入排序，得到一个基本有序的数组，他内部有n个有序的子数组；再将增量n减一，在此进行插入排序；如此反复直到 n 为 1，排序完毕的数据即为有序数组。\",\"希尔排序——4 增量排序示意图\"]},\"920\":{\"h\":\"增量的选择\",\"t\":[\"可以想象，增量的计算对希尔排序效率有很大影响。\",\"这些增量的集合称为间隔序列，一般要求这些增量之间互质，这样就不会对已经排序的数组再次排序。\",\"一个常用的间隔序列计算公式：\",\"h=3h+1 计算的h值一般为：1,13,40,21...\",\"增量h要小于数组大小。\"]},\"921\":{\"h\":\"具体实现\",\"t\":[\"/** * 希尔排序 * 思路： * 1/3 将待排序数组分为 h 个间隔为 h 的小数组， * 2/3 对这些小数组进行插入排序，将排序结果写入原待排序数组 * 3/3 按照 h=3*h+1 的算法减小 h 在此进行希尔排序，直至 h 为 1 * --将大数组分为较小的数组，拍完序后再对这些\\\"有序\\\"的小数组进行排序 * 小 - > 大 */ fun shellSort(intArray: IntArray, h: Int): IntArray { if (h == 1) { return insertSort(intArray) } else { //间隔排序 for (x in 0 until h) {//依次遍历 x,x+1,x+2 ... x+(h-1);形成 h 个有序子数组 var list = arrayListOf<Int>() intArray.forEachIndexed { index, i -> if ((index + x) % h == 0) { list.add(i) } } var partSortArr = insertSort(list.toIntArray()) var listIndex = 0 intArray.forEachIndexed { index, i -> if ((index + x) % h == 0) { intArray[index] = partSortArr[listIndex++] } } } //将增量减小，再次减小排序，直到 h==1 return shellSort(intArray, (h - 1) / 3) } } /** * 获取希尔排序间隔 * 对排序速度影响较大，要求互质，计算方式不唯一 */ fun getShellSortH(range: Int): Int { if (range < 5) { return 1 } var h = 1 while (h < range) { h = 3 * h + 1 } return (h - 1) / 3 } /** * 插入排序 * 思路： * 1/2 先假设第一个数是已经排好序的 * 2/2 将后面的数字依次与其比较，并插入到对应位置 * small -> big */ fun insertSort(intArray: IntArray): IntArray { for (i in 1 until intArray.size) { for (j in 0 until i) { if (intArray[i] < intArray[j]) { val temp = intArray[i] for (x in i downTo j) { if (x - 1 < 0) { break } intArray[x] = intArray[x - 1] } intArray[j] = temp } } } return intArray }\"]},\"922\":{\"h\":\"快速排序\",\"t\":[\"快速排序在大多数情况下都是最快的。\"]},\"923\":{\"h\":\"划分\",\"t\":[\"划分指在一组数据中，指定一个值C,所有小于C的移动到左边，所有大于C的移动到右边。\",\"选出来的这个值C，叫做枢纽。\"]},\"924\":{\"h\":\"划分算法\",\"t\":[\"在数据左右两端各有一个指针指向当前元素：left，right；\",\"left指针向右移动查找比C大的值，right指针向左移动查找比C小的值，当遇到满足条件的元素则退出；\",\"当两个指针都退出时，将其指向的元素交换位置，然后再分别移动指针，直到两个指针相遇，划分结束。\"]},\"925\":{\"h\":\"快速排序的思路\",\"t\":[\"快速排序，选取一个枢纽，将数组划分为两个子数组，这样在枢纽C两边的数组满足：\",\"[左边子数组所有元素] < n < [右边子数组所有元素]\",\"这样将得到的每个子数组都划分为两个子数组，直到子数组只有一个元素（一个元素就是有序的），这样就完成了整个快速排序。\"]},\"926\":{\"h\":\"枢纽的选择\",\"t\":[\"枢纽选择影响着快速排序的效率：\",\"最简单的，可以选取数组第一个或者最后一个元素\",\"\\\"三数据项取中\\\"法，在数组首、尾、中取数排序，选中间的数作为枢纽。这样排序数组大小要>3。\"]},\"927\":{\"h\":\"具体实现\",\"t\":[\"/** * 快速排序所用的数组，使用前先初始化 */ lateinit var quickArray: IntArray /** * 快速排序算法 * #1 选择数组最右端元素作为枢纽 * 思想是 * 1/2 选出一个枢纽，先将其按大小划分为左右两部分 * 2/2 在划分好的两个数组中，分别再找一个枢纽，重复步骤 1 */ fun quickSort1(left: Int, right: Int) { if (right - left <= 0) { return } /** * n 这个枢纽的取法很关键，决定了算法的速度 * 除过这里用到的取法之外，还可以有\\\"三数据项取中\\\"法，在数组首、尾、中取数排序，选中间的数作为枢纽。这样排序数组要>3 * 对于这些小于 3 的数组可以用插入排序法进行排序 */ val n = quickArray[right] val nIndex = devideArrayByN1(left, right, n) if (nIndex > 0) { quickSort1(left, nIndex - 1) } quickSort1(nIndex + 1, right) } /** * 划分算法决定了排序的准确性 * 提出一个阈值，并以此将数组划分为两部分 * 左边都小于枢纽，右边都大于枢纽 */ private fun devideArrayByN1(left: Int, right: Int, n: Int): Int { var leftIndex = left - 1 var rightIndex = right while (leftIndex < rightIndex) { while (leftIndex < rightIndex && quickArray[++leftIndex] < n) { } while (leftIndex < rightIndex && quickArray[--rightIndex] > n) { } val temp = quickArray[leftIndex] quickArray[leftIndex] = quickArray[rightIndex] quickArray[rightIndex] = temp } for (i in right downTo rightIndex) { if (i < 1) { break } quickArray[i] = quickArray[i - 1] } quickArray[rightIndex] = n return rightIndex }\"]},\"928\":{\"h\":\"总结\",\"t\":[\"希尔排序、快速排序的思路，都是将一个大的待排序数组，通过不同的方法拆分成小的子数组，这样比较、移动的次数要小很多。\"]},\"929\":{\"h\":\"源码\",\"t\":[\"👉 点这里 查看源码\"]},\"930\":{\"c\":[\"数据结构\"]},\"931\":{\"h\":\"Python 自动化部署文章\",\"t\":[\"这是一篇使用 Python 脚本发布的文章。\",\"python 脚本实现一键自动新建文章，编译，预览，发布 github。\",\"Just test\"]},\"932\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"933\":{\"h\":\"Posts\"}},\"dirtCount\":0,\"index\":[[\"尾\",{\"1\":{\"926\":1,\"927\":1}}],[\"尾递归\",{\"1\":{\"614\":2}}],[\"尾递归优化\",{\"0\":{\"614\":1}}],[\"枢纽选择影响着快速排序的效率\",{\"1\":{\"926\":1}}],[\"枢纽的选择\",{\"0\":{\"926\":1}}],[\"叫做枢纽\",{\"1\":{\"923\":1}}],[\"划分结束\",{\"1\":{\"924\":1}}],[\"划分算法决定了排序的准确性\",{\"1\":{\"927\":1}}],[\"划分算法\",{\"0\":{\"924\":1}}],[\"划分指在一组数据中\",{\"1\":{\"923\":1}}],[\"划分\",{\"0\":{\"923\":1}}],[\"拍完序后再对这些\",{\"1\":{\"921\":1}}],[\"归并\",{\"1\":{\"913\":1}}],[\"归并排序占空间\",{\"1\":{\"913\":1}}],[\"归并排序具体实现\",{\"1\":{\"913\":1}}],[\"归并排序动态演示\",{\"1\":{\"913\":1}}],[\"归并排序merge\",{\"1\":{\"913\":1}}],[\"归并排序\",{\"0\":{\"913\":1},\"1\":{\"868\":1,\"875\":3,\"910\":1,\"913\":1,\"915\":1}}],[\"游戏的目的就是在满足这些条件的前提下\",{\"1\":{\"912\":1}}],[\"汉诺塔是一种游戏\",{\"1\":{\"912\":1}}],[\"汉诺塔问题分析\",{\"1\":{\"912\":1}}],[\"汉诺塔问题\",{\"0\":{\"912\":1},\"1\":{\"912\":1}}],[\"项移动到目标层\",{\"1\":{\"912\":1}}],[\"项移动到过渡层\",{\"1\":{\"912\":1}}],[\"项的计算结果为确定的\",{\"1\":{\"911\":1}}],[\"项目分别新建文件夹存放\",{\"1\":{\"793\":1}}],[\"项目的\",{\"1\":{\"793\":1}}],[\"项目对应目录中\",{\"1\":{\"791\":1}}],[\"项目不同目录下需要注意的地方\",{\"1\":{\"791\":1}}],[\"项目不同目录下\",{\"1\":{\"791\":1}}],[\"项目调用代码块\",{\"1\":{\"631\":1}}],[\"项目\",{\"1\":{\"631\":1,\"793\":1,\"794\":2,\"808\":1}}],[\"项目启动后会首先加载\",{\"1\":{\"279\":1}}],[\"递归是一种在函数内部调用自己的函数\",{\"1\":{\"911\":1}}],[\"递归\",{\"0\":{\"911\":1}}],[\"递归和汉诺塔问题\",{\"0\":{\"909\":1}}],[\"祖节点53设置为红色\",{\"1\":{\"904\":1}}],[\"祖父节点设置为红色\",{\"1\":{\"904\":1}}],[\"祖父节点6设为红\",{\"1\":{\"903\":1}}],[\"叔黑\",{\"1\":{\"904\":2}}],[\"断开与其父节点c的连接\",{\"1\":{\"903\":1}}],[\"旋转时注意更新各个节点的父节点\",{\"1\":{\"903\":1}}],[\"旋转\",{\"0\":{\"903\":1},\"1\":{\"902\":1}}],[\"旋转操作\",{\"1\":{\"334\":1}}],[\"红\",{\"1\":{\"902\":1}}],[\"红黑树插入情况分类如下\",{\"1\":{\"904\":1}}],[\"红黑树必须满足以下条件\",{\"1\":{\"902\":1}}],[\"红黑树是一种特殊的二叉搜索树\",{\"1\":{\"902\":1}}],[\"红黑树\",{\"0\":{\"901\":1},\"1\":{\"907\":1}}],[\"黑\",{\"1\":{\"902\":1}}],[\"冒泡\",{\"1\":{\"896\":1}}],[\"冒泡排序的思想是\",{\"1\":{\"532\":1}}],[\"冒泡排序\",{\"0\":{\"532\":1,\"896\":1},\"1\":{\"868\":1,\"896\":2}}],[\"头部\",{\"1\":{\"870\":1}}],[\"希尔排序基于插入排序\",{\"1\":{\"919\":1}}],[\"希尔排序的时间复杂度是o\",{\"1\":{\"918\":1}}],[\"希尔排序和快速排序\",{\"1\":{\"918\":1}}],[\"希尔排序\",{\"0\":{\"919\":1},\"1\":{\"868\":1,\"875\":2,\"919\":1,\"921\":1,\"928\":1}}],[\"希望以此记录自己提升技术能力的过程\",{\"1\":{\"0\":1}}],[\"队列queue\",{\"1\":{\"888\":1}}],[\"队列两种抽象数据类型\",{\"1\":{\"886\":1}}],[\"队列也可以访问尾部\",{\"1\":{\"870\":1}}],[\"队列\",{\"0\":{\"872\":1,\"888\":1},\"1\":{\"868\":1,\"870\":1,\"892\":1}}],[\"队列中\",{\"1\":{\"475\":1,\"760\":1}}],[\"专用数据结构效率比较\",{\"1\":{\"874\":1}}],[\"专用数据结构\",{\"0\":{\"870\":1},\"1\":{\"868\":1}}],[\"专注处理与用户的交互\",{\"1\":{\"126\":1}}],[\"哈希表\",{\"1\":{\"868\":1,\"869\":2}}],[\"哈夫曼树的根节点\",{\"1\":{\"837\":1}}],[\"哈夫曼编码示意图\",{\"1\":{\"837\":1}}],[\"哈夫曼编码用来对一段文本进行压缩\",{\"1\":{\"837\":1}}],[\"哈夫曼编码\",{\"0\":{\"837\":1}}],[\"陈维宁\",{\"1\":{\"865\":1}}],[\"百度百科\",{\"1\":{\"865\":1}}],[\"洞\",{\"1\":{\"863\":1}}],[\"−1\",{\"1\":{\"862\":1}}],[\"满二叉树指除最后一层无任何子节点外\",{\"1\":{\"862\":1}}],[\"满二叉树\",{\"0\":{\"862\":1},\"1\":{\"862\":1,\"865\":1}}],[\"满足这样的条件第n项\",{\"1\":{\"911\":1}}],[\"满足以下条件\",{\"1\":{\"850\":1}}],[\"满足intent\",{\"1\":{\"21\":1}}],[\"满足条件后结束当天循环\",{\"1\":{\"9\":1}}],[\"✅\",{\"1\":{\"859\":1}}],[\"遇到比max大的则记录下其位置\",{\"1\":{\"897\":1}}],[\"遇到这种情况退出循环\",{\"1\":{\"850\":1}}],[\"遇上\",{\"1\":{\"796\":1}}],[\"拓扑排序是指有向图的顶点排序\",{\"1\":{\"850\":1}}],[\"拓扑排序\",{\"0\":{\"850\":1},\"1\":{\"850\":1,\"852\":1}}],[\"拓展\",{\"0\":{\"38\":1}}],[\"纵深访问\",{\"1\":{\"847\":1}}],[\"广度优先搜索\",{\"1\":{\"846\":1,\"848\":1}}],[\"广泛阅读\",{\"1\":{\"0\":1}}],[\"深度优先搜索\",{\"1\":{\"846\":1,\"847\":1}}],[\"深入分析\",{\"1\":{\"530\":1}}],[\"深入\",{\"1\":{\"498\":1}}],[\"深入理解\",{\"1\":{\"454\":1,\"498\":3,\"550\":1,\"601\":1,\"610\":1}}],[\"深入探讨原则\",{\"1\":{\"128\":1}}],[\"深入浅出\",{\"1\":{\"72\":1,\"267\":1}}],[\"深入学习\",{\"1\":{\"31\":1}}],[\"深入思考\",{\"1\":{\"0\":1}}],[\"搜索结束\",{\"1\":{\"847\":1,\"848\":1}}],[\"搜索又分为\",{\"1\":{\"846\":1}}],[\"搜索要求从某个特定顶点开始\",{\"1\":{\"846\":1}}],[\"搜索\",{\"0\":{\"846\":1}}],[\"搜索等等\",{\"1\":{\"843\":1}}],[\"顶点\",{\"1\":{\"843\":1}}],[\"顶点是否邻接\",{\"1\":{\"842\":1}}],[\"邻接表\",{\"1\":{\"842\":2,\"868\":1}}],[\"邻接矩阵\",{\"1\":{\"842\":2,\"868\":1}}],[\"叶子节点\",{\"1\":{\"836\":1}}],[\"节点并替换掉要删除的节点\",{\"1\":{\"836\":2}}],[\"节点\",{\"1\":{\"836\":1}}],[\"👉点这里\",{\"1\":{\"914\":1}}],[\"👉点这里查看中缀表达式\",{\"1\":{\"891\":1}}],[\"👉\",{\"1\":{\"829\":1,\"838\":2,\"851\":2,\"864\":1,\"882\":1,\"899\":1,\"906\":1,\"929\":1}}],[\"💡\",{\"1\":{\"126\":1,\"740\":2,\"748\":1,\"753\":1}}],[\"算法\",{\"1\":{\"827\":1}}],[\"算法计算出来的值\",{\"1\":{\"827\":1}}],[\"算法计算出的地址时\",{\"1\":{\"827\":1}}],[\"算法最多缓存1000\",{\"1\":{\"375\":1}}],[\"算出的地址已经被占用时\",{\"1\":{\"827\":1}}],[\"托管的\",{\"1\":{\"813\":1}}],[\"部署方法\",{\"0\":{\"812\":1,\"813\":1}}],[\"部分步骤有差异\",{\"1\":{\"796\":1}}],[\"部分方法调用了\",{\"1\":{\"740\":1}}],[\"部分时\",{\"1\":{\"446\":1}}],[\"部分的\",{\"1\":{\"402\":1}}],[\"部分\",{\"1\":{\"157\":1,\"239\":1,\"332\":1,\"403\":2,\"405\":2,\"411\":1,\"493\":1,\"782\":1}}],[\"禁用所有的插件和脚本\",{\"1\":{\"808\":1}}],[\"禁止指令重排优化\",{\"1\":{\"602\":1}}],[\"迁移\",{\"1\":{\"808\":1}}],[\"草稿箱\",{\"1\":{\"807\":1}}],[\"帮助信息\",{\"1\":{\"802\":1}}],[\"离线安装包解压到本地即可使用\",{\"1\":{\"800\":1}}],[\"受网速限制\",{\"1\":{\"800\":1}}],[\"受限的设备上运行\",{\"1\":{\"769\":1}}],[\"搭建一个博客\",{\"1\":{\"798\":1}}],[\"心得总结找个地方整理\",{\"1\":{\"798\":1}}],[\"尤其是可以作为稳定而免费的空间托管博客最令我心动\",{\"1\":{\"798\":1}}],[\"许多时候一个平台只能使用一段时间\",{\"1\":{\"798\":1}}],[\"门户网站的限制太多\",{\"1\":{\"798\":1}}],[\"懒\",{\"1\":{\"791\":1}}],[\"懒汉模式实现单例\",{\"0\":{\"549\":1}}],[\"懒汉模式\",{\"1\":{\"547\":1,\"549\":1}}],[\"电池电量等等\",{\"1\":{\"787\":1}}],[\"电脑localhost或者127\",{\"1\":{\"184\":1}}],[\"明确具体要执行的任务内容\",{\"1\":{\"787\":1}}],[\"明确表明\",{\"1\":{\"433\":1}}],[\"嵌套导航图中\",{\"1\":{\"783\":1}}],[\"嵌套滑动包括滑动\",{\"1\":{\"112\":1}}],[\"嵌套滑动\",{\"1\":{\"77\":1}}],[\"植物列表\",{\"1\":{\"782\":1}}],[\"植物介绍\",{\"1\":{\"782\":1}}],[\"植物目录\",{\"1\":{\"782\":1}}],[\"植物目录和植物介绍三部分\",{\"1\":{\"781\":1}}],[\"界面\",{\"1\":{\"782\":3}}],[\"界面结构\",{\"1\":{\"279\":1}}],[\"皆来自\",{\"1\":{\"781\":1}}],[\"思路\",{\"1\":{\"921\":2}}],[\"思路来自这里\",{\"1\":{\"145\":1}}],[\"思想是\",{\"1\":{\"913\":1,\"927\":1}}],[\"思想\",{\"1\":{\"781\":1,\"898\":1,\"913\":2}}],[\"软件集合\",{\"1\":{\"781\":1}}],[\"软引用\",{\"0\":{\"479\":1}}],[\"破音\",{\"1\":{\"780\":1}}],[\"跟着教程做了几个\",{\"1\":{\"775\":1}}],[\"跟具体的\",{\"1\":{\"126\":1}}],[\"介绍\",{\"1\":{\"773\":1}}],[\"汇编过程会进行全局静态分析以确定程序的哪些部分是可以从已知的\",{\"1\":{\"771\":1}}],[\"汇总信息输出\",{\"1\":{\"730\":1}}],[\"峰值性能更优\",{\"1\":{\"771\":1}}],[\"热身时间\",{\"1\":{\"770\":1}}],[\"兜底实现正确的行为\",{\"1\":{\"771\":1}}],[\"兜底\",{\"1\":{\"767\":1}}],[\"独有的\",{\"1\":{\"765\":1}}],[\"独立的\",{\"1\":{\"765\":1}}],[\"达到最大数量就尝试复用\",{\"1\":{\"759\":1}}],[\"达到刷新页面的效果\",{\"1\":{\"282\":1}}],[\"往receiveport\",{\"1\":{\"745\":1}}],[\"往往会持续数十秒以上\",{\"1\":{\"30\":1}}],[\"暂停时不能处理\",{\"1\":{\"745\":1}}],[\"暂停\",{\"1\":{\"744\":1}}],[\"规则如下\",{\"1\":{\"896\":1,\"897\":1}}],[\"规则\",{\"1\":{\"847\":1,\"848\":1}}],[\"规律是xml文件名+binding的驼峰命名\",{\"1\":{\"784\":1}}],[\"规范\",{\"1\":{\"737\":1}}],[\"规定了每个表格可以保存的数据格式\",{\"1\":{\"786\":1}}],[\"规定\",{\"1\":{\"601\":1}}],[\"格式输出\",{\"1\":{\"737\":1}}],[\"格式化日期时\",{\"1\":{\"572\":1}}],[\"格式化日期\",{\"0\":{\"572\":1}}],[\"略\",{\"1\":{\"737\":1}}],[\"于是又尝试用\",{\"1\":{\"798\":1}}],[\"于是用\",{\"1\":{\"735\":1}}],[\"于是准备执行\",{\"1\":{\"545\":1}}],[\"条百度百科的数据\",{\"1\":{\"735\":1}}],[\"条件时\",{\"1\":{\"413\":1}}],[\"条件满足后关闭当日循环闹钟\",{\"0\":{\"21\":1}}],[\"教程内容是爬取\",{\"1\":{\"735\":1}}],[\"欢迎访问其blog\",{\"1\":{\"732\":1}}],[\"欢迎提issue告知\",{\"1\":{\"213\":1}}],[\"乌鸦嘴\",{\"1\":{\"732\":1}}],[\"升级版\",{\"1\":{\"731\":1}}],[\"爬虫主要活动是\",{\"1\":{\"736\":1}}],[\"爬虫爬取\",{\"0\":{\"734\":1}}],[\"爬虫很容易被识别并被拒绝服务\",{\"1\":{\"732\":1}}],[\"爬虫被识别\",{\"1\":{\"731\":1}}],[\"爬取目标网页内容\",{\"1\":{\"736\":1}}],[\"爬取\",{\"0\":{\"729\":1},\"1\":{\"730\":1}}],[\"键\",{\"1\":{\"802\":1}}],[\"键的集合\",{\"1\":{\"724\":1}}],[\"键值对\",{\"1\":{\"724\":1}}],[\"键盘等\",{\"1\":{\"701\":1}}],[\"空子节点指本应该有叶节点却没有的节点\",{\"1\":{\"902\":1}}],[\"空间开始\",{\"1\":{\"798\":1}}],[\"空间不足时则将\",{\"1\":{\"444\":1,\"445\":1}}],[\"空间不足时可滑动\",{\"1\":{\"444\":1}}],[\"空闲时执行任务\",{\"1\":{\"761\":1}}],[\"空值\",{\"1\":{\"723\":1}}],[\"布尔值可以用and\",{\"1\":{\"723\":1}}],[\"布尔值\",{\"1\":{\"723\":1}}],[\"布局也会随之自动更新\",{\"1\":{\"784\":1}}],[\"布局出现错误\",{\"1\":{\"295\":2}}],[\"布局信息主要在这里展示\",{\"1\":{\"279\":1}}],[\"布局文件中获取\",{\"1\":{\"153\":1}}],[\"布局文件里面使用到该件组时自定义控一些属性\",{\"1\":{\"116\":1}}],[\"布局文件\",{\"1\":{\"112\":1,\"117\":1,\"167\":1}}],[\"布局\",{\"0\":{\"288\":1},\"1\":{\"110\":1,\"157\":1}}],[\"浮点数\",{\"1\":{\"723\":1}}],[\"长整数\",{\"1\":{\"723\":1}}],[\"长度的限制是编译期的限制\",{\"1\":{\"519\":1}}],[\"长度最大不能超过\",{\"1\":{\"519\":1}}],[\"长度\",{\"1\":{\"506\":1}}],[\"整数\",{\"1\":{\"723\":1}}],[\"整个代码块执行失败\",{\"1\":{\"623\":1}}],[\"整个过程可以分为\",{\"1\":{\"397\":1}}],[\"整个过程如下\",{\"1\":{\"241\":1}}],[\"整个的\",{\"1\":{\"273\":1}}],[\"整个\",{\"1\":{\"28\":1}}],[\"渣英语请忽略\",{\"1\":{\"719\":1}}],[\"脚本实现一键自动新建文章\",{\"1\":{\"931\":1}}],[\"脚本发布的文章\",{\"1\":{\"931\":1}}],[\"脚本\",{\"1\":{\"716\":1}}],[\"脚手架\",{\"1\":{\"279\":1,\"807\":1}}],[\"辅助类okhttputils简要分析\",{\"1\":{\"707\":1}}],[\"词\",{\"1\":{\"704\":1}}],[\"逆向之旅\",{\"1\":{\"816\":1,\"824\":1}}],[\"逆序\",{\"1\":{\"703\":1}}],[\"逆变\",{\"0\":{\"541\":1},\"1\":{\"617\":1}}],[\"忽略大小写\",{\"1\":{\"702\":1,\"703\":1}}],[\"忽略指定警告\",{\"1\":{\"566\":1}}],[\"追加输入\",{\"1\":{\"701\":1}}],[\"追踪代码的热点区域\",{\"1\":{\"768\":1}}],[\"追踪的\",{\"1\":{\"376\":1}}],[\"追踪\",{\"1\":{\"138\":1}}],[\"标准错误\",{\"1\":{\"701\":1}}],[\"标准输出\",{\"1\":{\"701\":1}}],[\"标准输入\",{\"1\":{\"701\":1}}],[\"标准输入输出等\",{\"0\":{\"701\":1}}],[\"标记该节点是否被删除\",{\"1\":{\"905\":1}}],[\"标记\",{\"1\":{\"848\":1}}],[\"标记这个方法被调用多少次\",{\"1\":{\"767\":1}}],[\"标记为runnable\",{\"1\":{\"757\":1}}],[\"标记注解\",{\"1\":{\"570\":1}}],[\"标记压缩法\",{\"0\":{\"473\":1}}],[\"标记清除法\",{\"0\":{\"472\":1},\"1\":{\"473\":1}}],[\"标记请求操作的类型\",{\"1\":{\"243\":1}}],[\"标记需要框架自动实例化的对象\",{\"1\":{\"201\":1}}],[\"标记依赖类的构造方法\",{\"1\":{\"201\":1}}],[\"登录\",{\"1\":{\"699\":1}}],[\"登录时间\",{\"1\":{\"691\":1}}],[\"别名配置\",{\"0\":{\"698\":1}}],[\"清屏\",{\"1\":{\"696\":1}}],[\"清除对象后内存不连续\",{\"1\":{\"472\":1}}],[\"清除缓存之后又要从网络下载\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"清除所有内容\",{\"1\":{\"132\":1}}],[\"↔\",{\"1\":{\"696\":2,\"890\":1}}],[\"删\",{\"1\":{\"691\":1}}],[\"删除比较复杂\",{\"1\":{\"905\":1}}],[\"删除元素慢\",{\"1\":{\"879\":1,\"880\":1}}],[\"删除别名\",{\"1\":{\"698\":1}}],[\"删除\",{\"0\":{\"682\":1,\"836\":1,\"905\":1},\"1\":{\"674\":1,\"724\":1,\"881\":1}}],[\"删除数据时\",{\"1\":{\"90\":1}}],[\"删除key以及对应的数据\",{\"1\":{\"89\":1}}],[\"增量h要小于数组大小\",{\"1\":{\"920\":1}}],[\"增量的计算对希尔排序效率有很大影响\",{\"1\":{\"920\":1}}],[\"增量的选择\",{\"0\":{\"920\":1}}],[\"增量排序示意图\",{\"1\":{\"919\":1}}],[\"增量\",{\"1\":{\"919\":1}}],[\"增\",{\"1\":{\"691\":1}}],[\"增加超时处理\",{\"1\":{\"731\":1}}],[\"增加图片自动上传\",{\"1\":{\"721\":1}}],[\"增加文件名中文支持\",{\"1\":{\"721\":1}}],[\"增加更多功能\",{\"1\":{\"711\":1}}],[\"增加一个值为value的变量key\",{\"1\":{\"697\":1}}],[\"增加了随机性\",{\"1\":{\"500\":1}}],[\"增加了一些特有的加载中\",{\"1\":{\"382\":1}}],[\"增加了磁盘缓存\",{\"1\":{\"376\":2}}],[\"增加了没必要的复杂性\",{\"1\":{\"123\":1}}],[\"增加\",{\"1\":{\"39\":1,\"689\":1}}],[\"果\",{\"1\":{\"690\":1}}],[\"遮盖的原则是从原先的权限中减去umask\",{\"1\":{\"690\":1}}],[\"遮盖后\",{\"1\":{\"690\":1}}],[\"临时文件\",{\"1\":{\"686\":1}}],[\"光驱等\",{\"1\":{\"686\":1}}],[\"社区\",{\"1\":{\"675\":1}}],[\"摘录自下面这篇文章\",{\"1\":{\"675\":1}}],[\"摘录如下\",{\"1\":{\"671\":1}}],[\"克隆项目到本地\",{\"0\":{\"673\":1}}],[\"仓库\",{\"1\":{\"672\":1}}],[\"测试\",{\"1\":{\"670\":1}}],[\"测量\",{\"1\":{\"157\":1}}],[\"名字起一个容易识别的名字\",{\"1\":{\"670\":1}}],[\"名称\",{\"1\":{\"103\":1,\"132\":1,\"701\":1}}],[\"账号\",{\"1\":{\"670\":1}}],[\"画二叉树和写出前序遍历\",{\"1\":{\"667\":1}}],[\"画出对应的界面\",{\"1\":{\"153\":1}}],[\"画出文字\",{\"1\":{\"153\":1}}],[\"画出置顶的导航title\",{\"1\":{\"153\":1}}],[\"画出各个导航title\",{\"1\":{\"153\":1}}],[\"画出\",{\"1\":{\"152\":1}}],[\"笔记\",{\"0\":{\"665\":1}}],[\"笔记之序列化与反序列化\",{\"0\":{\"580\":1}}],[\"笔记之匿名内部类和\",{\"0\":{\"509\":1}}],[\"笔记之贝塞尔曲线的应用\",{\"0\":{\"141\":1}}],[\"笔记之跨进程通信\",{\"0\":{\"135\":1}}],[\"笔记之计算\",{\"0\":{\"515\":1},\"1\":{\"85\":1,\"96\":1}}],[\"笔记之\",{\"0\":{\"130\":1,\"499\":1,\"525\":1,\"572\":1,\"648\":1},\"1\":{\"85\":1,\"96\":1}}],[\"把`other`移动到目标柱子\",{\"1\":{\"912\":1}}],[\"把`other`移动到中间柱子\",{\"1\":{\"912\":1}}],[\"把`bottom`移动到目标柱子\",{\"1\":{\"912\":1}}],[\"把更新的内容合并到本地分支\",{\"1\":{\"673\":1}}],[\"把字符串按照\",{\"1\":{\"664\":1}}],[\"把递归通过编译器转化为迭代\",{\"1\":{\"614\":1}}],[\"凡是可迭代的数据都可以使用map\",{\"1\":{\"664\":1}}],[\"展平为单个流\",{\"1\":{\"655\":1}}],[\"展平流\",{\"0\":{\"655\":1}}],[\"展示带单位的文件大小\",{\"1\":{\"688\":1}}],[\"展示所有文件\",{\"1\":{\"688\":1}}],[\"展示当前目录下文件信息\",{\"1\":{\"688\":1}}],[\"展示另外一部分\",{\"1\":{\"440\":1}}],[\"展示内容为\",{\"1\":{\"427\":1}}],[\"展示部分的内容已经完成\",{\"1\":{\"405\":1}}],[\"展示图片\",{\"1\":{\"393\":1,\"395\":1}}],[\"展示图片的流程一致\",{\"1\":{\"391\":1}}],[\"展示图片的呢\",{\"1\":{\"370\":1}}],[\"展示对应图片\",{\"1\":{\"393\":1}}],[\"展示加载失败\",{\"1\":{\"368\":1}}],[\"展示占位\",{\"1\":{\"352\":1}}],[\"展示错误页面\",{\"1\":{\"295\":1}}],[\"展示此\",{\"1\":{\"295\":1}}],[\"展示新的\",{\"1\":{\"126\":1}}],[\"展示\",{\"1\":{\"125\":2,\"368\":1,\"369\":1}}],[\"求和\",{\"1\":{\"652\":1}}],[\"末端流操作符\",{\"0\":{\"652\":1}}],[\"集合\",{\"0\":{\"724\":1},\"1\":{\"650\":1}}],[\"集合的方法外\",{\"1\":{\"231\":1}}],[\"梳理了学习过程中的要点和理解\",{\"1\":{\"649\":1}}],[\"拥有同一个\",{\"1\":{\"816\":1}}],[\"拥有独立的\",{\"1\":{\"762\":1}}],[\"拥有尽可能简单的设计\",{\"1\":{\"649\":1}}],[\"拥有一个\",{\"1\":{\"454\":1}}],[\"毫秒\",{\"1\":{\"646\":1,\"651\":1}}],[\"意味着\",{\"1\":{\"771\":1}}],[\"意味着该\",{\"1\":{\"646\":1}}],[\"意思是当按下按钮的时候\",{\"1\":{\"189\":1}}],[\"唯一的一个\",{\"1\":{\"782\":1}}],[\"唯一的不同是\",{\"1\":{\"642\":1}}],[\"唯一不同的是多出的\",{\"1\":{\"769\":1}}],[\"唯一持有\",{\"1\":{\"126\":1}}],[\"监督协程中的异常\",{\"0\":{\"644\":1}}],[\"监督作用域\",{\"0\":{\"643\":1}}],[\"监督作业\",{\"0\":{\"642\":1}}],[\"监督\",{\"0\":{\"641\":1}}],[\"监听流完成\",{\"1\":{\"658\":2}}],[\"监听用户手势\",{\"1\":{\"422\":1}}],[\"监听自身变化时执行\",{\"1\":{\"410\":1}}],[\"监听回调方法\",{\"1\":{\"398\":1}}],[\"监听动画进度\",{\"1\":{\"352\":2}}],[\"监听动画的值和状态\",{\"1\":{\"327\":1}}],[\"监听动画\",{\"1\":{\"318\":1}}],[\"监听传入的两个\",{\"1\":{\"317\":1}}],[\"监听并根据\",{\"1\":{\"314\":1}}],[\"监听并处理\",{\"0\":{\"65\":1}}],[\"监听的便是这个\",{\"1\":{\"333\":1}}],[\"监听的\",{\"1\":{\"307\":1}}],[\"监听到数据并刷新页面ui\",{\"1\":{\"124\":1}}],[\"监听\",{\"1\":{\"57\":1,\"63\":1,\"124\":1,\"126\":1,\"287\":1,\"303\":1,\"310\":1,\"314\":1,\"316\":1,\"327\":1,\"335\":1,\"336\":1,\"353\":1,\"398\":1,\"748\":1}}],[\"监听其发送的广播broadcast\",{\"1\":{\"20\":1}}],[\"监听每日循环的闹钟\",{\"0\":{\"20\":1}}],[\"另一个或多个协程消费这些流\",{\"1\":{\"638\":1}}],[\"另外一处使用的仍然是修改前的值\",{\"1\":{\"510\":1}}],[\"另外一个常用的图片库flutter\",{\"1\":{\"385\":1}}],[\"另外一个\",{\"1\":{\"110\":1}}],[\"弓\",{\"1\":{\"637\":1}}],[\"透明捕获\",{\"1\":{\"632\":1,\"656\":1}}],[\"透明度等变化\",{\"1\":{\"353\":1}}],[\"透明度等变化的动画\",{\"1\":{\"353\":1}}],[\"透明度\",{\"1\":{\"352\":1}}],[\"串行执行\",{\"1\":{\"631\":1}}],[\"抹平\",{\"1\":{\"631\":1}}],[\"压缩文件file并输出到file\",{\"1\":{\"694\":1}}],[\"压缩文件并输出到屏幕\",{\"1\":{\"694\":1}}],[\"压缩的文件\",{\"1\":{\"694\":1}}],[\"压缩等级\",{\"1\":{\"694\":1}}],[\"压缩会删除源文件\",{\"1\":{\"694\":1}}],[\"压缩后格式\",{\"1\":{\"693\":1}}],[\"压缩和解压缩\",{\"0\":{\"693\":1}}],[\"压缩\",{\"1\":{\"631\":1,\"695\":1,\"837\":1}}],[\"压入到当前线程的\",{\"1\":{\"52\":1}}],[\"压入\",{\"1\":{\"52\":1,\"54\":1}}],[\"赶上来\",{\"1\":{\"629\":1}}],[\"扩展\",{\"1\":{\"807\":1}}],[\"扩展函数\",{\"1\":{\"629\":1}}],[\"扩展类加载器\",{\"1\":{\"484\":1}}],[\"假装我们异步等待了\",{\"1\":{\"651\":1}}],[\"假装我们以消耗\",{\"1\":{\"629\":1}}],[\"假装我们在这里做了一些有用的事情\",{\"1\":{\"629\":1}}],[\"假设序列共有\",{\"1\":{\"913\":1}}],[\"假设右端数组是有序的\",{\"1\":{\"898\":1}}],[\"假设一个元素就是有序的\",{\"1\":{\"898\":1}}],[\"假设一个标记元素的左边全部是有序数组\",{\"1\":{\"898\":1}}],[\"假设arr\",{\"1\":{\"897\":1,\"898\":1}}],[\"假设第一项值最大\",{\"1\":{\"897\":1}}],[\"假设读取到的是x\",{\"1\":{\"890\":1}}],[\"假设当前目录有文件f1\",{\"1\":{\"684\":1}}],[\"假设有两个线程\",{\"1\":{\"545\":1}}],[\"假设为obj\",{\"1\":{\"526\":1}}],[\"假设为maxszie\",{\"1\":{\"276\":1}}],[\"假设将这个引用指向了另外一个\",{\"1\":{\"513\":1}}],[\"假设\",{\"1\":{\"440\":1}}],[\"假设从页面\",{\"1\":{\"343\":1}}],[\"假设如下变量\",{\"1\":{\"196\":1}}],[\"假设起点\",{\"1\":{\"144\":1}}],[\"假设你定义了一个最小高度\",{\"1\":{\"111\":1}}],[\"延迟值可以使用\",{\"1\":{\"646\":1}}],[\"延迟\",{\"1\":{\"646\":1}}],[\"延迟生产多个值并返回\",{\"1\":{\"629\":1}}],[\"延伸\",{\"0\":{\"112\":1}}],[\"五\",{\"1\":{\"625\":1,\"627\":1}}],[\"五列\",{\"1\":{\"376\":1}}],[\"推出\",{\"1\":{\"848\":1,\"890\":1}}],[\"推出的一系列\",{\"1\":{\"781\":1}}],[\"推出的是整个\",{\"1\":{\"621\":1}}],[\"推荐直接阅读官方原文\",{\"1\":{\"763\":1}}],[\"推荐命名为\",{\"1\":{\"728\":1}}],[\"推荐使用\",{\"1\":{\"128\":1}}],[\"推荐使用sparsearray及其衍生类以节省内存\",{\"1\":{\"85\":1,\"523\":1}}],[\"推荐使用不是很精确的setinexactrepeating\",{\"1\":{\"11\":1}}],[\"推荐\",{\"1\":{\"55\":1,\"296\":1,\"333\":1,\"335\":1,\"524\":1,\"703\":1}}],[\"推荐选择方案\",{\"1\":{\"10\":1}}],[\"委托类的初始化函数\",{\"1\":{\"619\":1}}],[\"委托属性\",{\"1\":{\"619\":1}}],[\"委托示意图\",{\"1\":{\"619\":1}}],[\"委托是将重复出现的代码放到一个地方\",{\"1\":{\"619\":1}}],[\"委托\",{\"0\":{\"619\":1},\"1\":{\"619\":1}}],[\"既能像链表那样快速插入和删除\",{\"1\":{\"832\":1}}],[\"既能insert正确返回对应的类型\",{\"1\":{\"618\":1}}],[\"既可以使用预设的powerimage\",{\"1\":{\"390\":1}}],[\"你对类型参数一无所知\",{\"1\":{\"618\":1}}],[\"你需要知道的一切\",{\"1\":{\"43\":1}}],[\"星号投射\",{\"0\":{\"618\":1}}],[\"抛出异常\",{\"0\":{\"616\":1},\"1\":{\"726\":1}}],[\"密封类的所有子类必须在一个文件\",{\"1\":{\"615\":1}}],[\"密封类\",{\"0\":{\"615\":1}}],[\"密度\",{\"1\":{\"100\":1}}],[\"伴生对象\",{\"1\":{\"612\":1}}],[\"蜡笔小勋\",{\"1\":{\"610\":1}}],[\"乐观锁\",{\"1\":{\"609\":1}}],[\"偏向锁\",{\"1\":{\"609\":1}}],[\"偏移量为\",{\"1\":{\"412\":1}}],[\"轻量级锁消耗比传统锁机制小\",{\"1\":{\"609\":1}}],[\"轻量级锁\",{\"1\":{\"609\":1}}],[\"智能决定自旋次数\",{\"1\":{\"609\":1}}],[\"锁粗化\",{\"1\":{\"609\":1}}],[\"锁消除\",{\"1\":{\"609\":1}}],[\"锁优化\",{\"0\":{\"609\":1}}],[\"锁绑定多个条件\",{\"1\":{\"606\":1}}],[\"锁池\",{\"1\":{\"561\":1}}],[\"公平的\",{\"1\":{\"638\":1}}],[\"公平锁\",{\"1\":{\"606\":1}}],[\"公差\",{\"1\":{\"323\":1}}],[\"功能有\",{\"1\":{\"606\":1}}],[\"阻塞和唤醒会很耗时\",{\"1\":{\"609\":1}}],[\"阻塞和唤醒需要由系统内核完成\",{\"1\":{\"603\":1}}],[\"阻塞同步\",{\"0\":{\"606\":1}}],[\"较复杂\",{\"1\":{\"596\":1}}],[\"较小值\",{\"1\":{\"412\":1}}],[\"灵活\",{\"1\":{\"592\":1}}],[\"灵感参考头条屏幕适配\",{\"1\":{\"195\":1}}],[\"具有特定的存储规则\",{\"1\":{\"587\":1}}],[\"具体设置方法如下\",{\"1\":{\"816\":1}}],[\"具体差异\",{\"0\":{\"792\":1}}],[\"具体搭建过程可以参考这篇文章\",{\"1\":{\"791\":1}}],[\"具体见参考资料\",{\"1\":{\"783\":1}}],[\"具体见代码中实现\",{\"1\":{\"737\":1}}],[\"具体使用方法见如下\",{\"1\":{\"584\":1}}],[\"具体使用可以参考这个gist\",{\"1\":{\"787\":1}}],[\"具体使用可以参考这篇文章\",{\"1\":{\"40\":1}}],[\"具体使用可以参见这篇文章\",{\"1\":{\"69\":1}}],[\"具体\",{\"1\":{\"501\":1}}],[\"具体试讲所有存活的对象都向一端移动\",{\"1\":{\"473\":1}}],[\"具体值在\",{\"1\":{\"243\":1,\"244\":1}}],[\"具体可以参考flutter\",{\"1\":{\"232\":1}}],[\"具体可参考文章\",{\"1\":{\"107\":1}}],[\"具体逻辑\",{\"0\":{\"179\":1}}],[\"具体原因见后面\",{\"1\":{\"176\":1}}],[\"具体内容\",{\"1\":{\"173\":1}}],[\"具体代码如下\",{\"1\":{\"532\":1}}],[\"具体代码\",{\"0\":{\"153\":1}}],[\"具体则在\",{\"1\":{\"138\":1}}],[\"具体的如何计算\",{\"1\":{\"517\":1}}],[\"具体的处理滑动手势\",{\"1\":{\"423\":1}}],[\"具体的逻辑在widgetsflutterbinding\",{\"1\":{\"253\":1}}],[\"具体的执行是在io\",{\"1\":{\"247\":1}}],[\"具体的实现如下\",{\"1\":{\"243\":1}}],[\"具体的实现一般分为下面几步\",{\"1\":{\"217\":1}}],[\"具体的实例则通过\",{\"1\":{\"126\":1}}],[\"具体的计算原理我们可以参考这篇文章\",{\"1\":{\"144\":1}}],[\"具体的代码实现可以参考tictactoe\",{\"1\":{\"124\":1}}],[\"具体配置请参考\",{\"1\":{\"104\":1}}],[\"具体分析可参考\",{\"1\":{\"523\":1}}],[\"具体分析\",{\"0\":{\"36\":1}}],[\"具体实现分析\",{\"0\":{\"782\":1}}],[\"具体实现在portmap\",{\"1\":{\"748\":1}}],[\"具体实现之前\",{\"1\":{\"365\":1}}],[\"具体实现\",{\"0\":{\"18\":1,\"111\":1,\"177\":1,\"200\":1,\"921\":1,\"927\":1},\"1\":{\"912\":1}}],[\"返序列化读取的过程在readresolve\",{\"1\":{\"587\":1}}],[\"返回上次所在目录\",{\"1\":{\"683\":1}}],[\"返回上面创建好的dart\",{\"1\":{\"246\":1}}],[\"返回可迭代的数组\",{\"1\":{\"664\":1}}],[\"返回新的转换流的定义\",{\"1\":{\"629\":1,\"653\":1}}],[\"返回单例本身\",{\"1\":{\"583\":1}}],[\"返回as\",{\"1\":{\"547\":1}}],[\"返回该node\",{\"1\":{\"502\":1}}],[\"返回null\",{\"1\":{\"502\":1}}],[\"返回其引用\",{\"1\":{\"461\":2}}],[\"返回超出界限的值\",{\"1\":{\"412\":1}}],[\"返回结果\",{\"1\":{\"398\":1}}],[\"返回结果两部分\",{\"1\":{\"397\":1}}],[\"返回了\",{\"1\":{\"393\":1}}],[\"返回powerexternalimage\",{\"1\":{\"391\":1}}],[\"返回值\",{\"1\":{\"374\":1}}],[\"返回值为\",{\"1\":{\"112\":2}}],[\"返回一个新的与之相反的\",{\"1\":{\"360\":1}}],[\"返回一个\",{\"1\":{\"346\":1}}],[\"返回和当前\",{\"1\":{\"317\":1}}],[\"返回为null的错误会导致widget构建失败\",{\"1\":{\"292\":1}}],[\"返回要展示的页面控件\",{\"1\":{\"282\":1}}],[\"返回要展示的控件即可\",{\"1\":{\"281\":1}}],[\"返回给调用方\",{\"1\":{\"246\":1}}],[\"返回给\",{\"1\":{\"243\":1,\"244\":2}}],[\"返回创建好的\",{\"1\":{\"232\":1}}],[\"返回测量大小\",{\"1\":{\"159\":1}}],[\"返回本地对象\",{\"1\":{\"138\":1}}],[\"返回\",{\"1\":{\"112\":1,\"159\":1,\"214\":1,\"243\":1,\"244\":1,\"317\":3,\"341\":1,\"391\":1,\"413\":1,\"619\":1}}],[\"返回模式\",{\"1\":{\"111\":1}}],[\"返回index\",{\"1\":{\"92\":1}}],[\"返回开始用\",{\"1\":{\"63\":1}}],[\"返回客户端\",{\"1\":{\"39\":1}}],[\"返回主进程继续正常开启\",{\"1\":{\"30\":1}}],[\"返回的是主轴方向上\",{\"1\":{\"439\":1}}],[\"返回的内容或者为空\",{\"1\":{\"344\":1}}],[\"返回的就是container\",{\"1\":{\"255\":1}}],[\"返回的\",{\"1\":{\"25\":1,\"344\":1,\"420\":1}}],[\"演示序列化功能\",{\"1\":{\"586\":1}}],[\"福尔马林\",{\"1\":{\"584\":1}}],[\"写文件的\",{\"1\":{\"807\":1}}],[\"写权限2\",{\"1\":{\"689\":1}}],[\"写法\",{\"1\":{\"662\":1}}],[\"写入以下代码\",{\"1\":{\"678\":1}}],[\"写入\",{\"1\":{\"584\":1}}],[\"写该类自身的属性\",{\"1\":{\"584\":1}}],[\"写数据的操作\",{\"1\":{\"125\":1}}],[\"出品的高性能序列化方案\",{\"1\":{\"580\":1}}],[\"出错不会调用fluttererror\",{\"1\":{\"295\":1}}],[\"年的只有\",{\"1\":{\"576\":1}}],[\"天\",{\"1\":{\"576\":3}}],[\"号\",{\"1\":{\"576\":1}}],[\"号到\",{\"1\":{\"576\":1}}],[\"号引用将其发给\",{\"1\":{\"138\":1}}],[\"号引用\",{\"1\":{\"138\":4}}],[\"法\",{\"1\":{\"926\":1,\"927\":1}}],[\"法国则是monday\",{\"1\":{\"575\":1}}],[\"法栈\",{\"1\":{\"455\":1}}],[\"美国\",{\"1\":{\"612\":1}}],[\"美国一周从sunday\",{\"1\":{\"575\":1}}],[\"美团\",{\"1\":{\"107\":1}}],[\"四天或以上\",{\"1\":{\"575\":1}}],[\"四个列表\",{\"1\":{\"253\":1}}],[\"起始年份中大部分\",{\"1\":{\"575\":1}}],[\"起点前一个点为beforepointf\",{\"1\":{\"144\":1}}],[\"起点和终点已知\",{\"1\":{\"143\":1}}],[\"月\",{\"1\":{\"575\":4,\"576\":1,\"577\":1}}],[\"周志明\",{\"1\":{\"610\":1}}],[\"周的判断与simpledateformat\",{\"1\":{\"577\":1}}],[\"周六\",{\"1\":{\"576\":2}}],[\"周五\",{\"1\":{\"576\":2}}],[\"周四\",{\"1\":{\"576\":2}}],[\"周三\",{\"1\":{\"576\":2}}],[\"周二\",{\"1\":{\"576\":2}}],[\"周一\",{\"1\":{\"576\":2}}],[\"周日\",{\"1\":{\"576\":2}}],[\"周有几个相互等效且兼容的描述\",{\"1\":{\"575\":1}}],[\"周\",{\"0\":{\"575\":1},\"1\":{\"575\":1}}],[\"周开始到该年最后一周\",{\"1\":{\"574\":1}}],[\"核心技术点之注解\",{\"1\":{\"571\":1}}],[\"核心方法如下\",{\"1\":{\"569\":1}}],[\"核心代码\",{\"1\":{\"179\":4,\"553\":1,\"557\":2}}],[\"元素\",{\"1\":{\"913\":1}}],[\"元组\",{\"1\":{\"724\":1}}],[\"元注解\",{\"0\":{\"565\":1}}],[\"元数据验证\",{\"1\":{\"494\":1}}],[\"唤醒的耗时\",{\"1\":{\"607\":1}}],[\"唤醒所有等待中的线程\",{\"1\":{\"560\":1}}],[\"唤醒结果如下\",{\"1\":{\"13\":1}}],[\"嗯\",{\"1\":{\"549\":1}}],[\"饿汉模式仍然有浪费资源的嫌疑\",{\"1\":{\"548\":1}}],[\"饿汉模式实现单例\",{\"0\":{\"548\":1}}],[\"饿汉模式\",{\"1\":{\"547\":1,\"548\":1}}],[\"令as\",{\"1\":{\"547\":1}}],[\"双端链表保存第一个链节点farst和最后一个链节点last的引用\",{\"1\":{\"881\":1}}],[\"双端链表\",{\"1\":{\"881\":2}}],[\"双向链表也可以是双端链表\",{\"1\":{\"881\":1}}],[\"双向链表\",{\"1\":{\"881\":2}}],[\"双子节点\",{\"1\":{\"836\":1}}],[\"双引号\",{\"1\":{\"697\":1}}],[\"双重检查锁定\",{\"0\":{\"547\":1}}],[\"双亲委托\",{\"1\":{\"485\":1}}],[\"尚未执行\",{\"1\":{\"545\":1}}],[\"尚未成文\",{\"1\":{\"73\":1,\"628\":1}}],[\"否的话生成类对象再返回\",{\"1\":{\"545\":1}}],[\"否则同步之后网站不会显示\",{\"1\":{\"813\":1}}],[\"否则创建新的并返回\",{\"1\":{\"759\":1}}],[\"否则创建新的element并替代\",{\"1\":{\"263\":1}}],[\"否则要用\",{\"1\":{\"723\":1}}],[\"否则可为\",{\"1\":{\"612\":1}}],[\"否则可能有性能问题\",{\"1\":{\"333\":1}}],[\"否则可能会出现\",{\"1\":{\"126\":1}}],[\"否则反序列化时会出错\",{\"1\":{\"585\":1}}],[\"否则以链表形式保存数据\",{\"1\":{\"501\":1}}],[\"否则减小\",{\"1\":{\"440\":1}}],[\"否则如果能够完全显示\",{\"1\":{\"434\":1}}],[\"否则最多上划到\",{\"1\":{\"418\":1}}],[\"否则最多滑动\",{\"1\":{\"418\":1}}],[\"否则最多可以向上滑动到\",{\"1\":{\"418\":1}}],[\"否则为\",{\"1\":{\"412\":1,\"439\":1}}],[\"否则会出现异常\",{\"1\":{\"439\":1}}],[\"否则会一直显示进度\",{\"1\":{\"370\":1}}],[\"否则会报错\",{\"1\":{\"203\":1,\"486\":1,\"618\":1}}],[\"否则应该等到下一帧\",{\"1\":{\"350\":1}}],[\"否则无法则捕获\",{\"1\":{\"294\":1}}],[\"否则无效果\",{\"1\":{\"111\":1}}],[\"否则\",{\"1\":{\"239\":1,\"340\":1,\"445\":1,\"506\":1,\"534\":1,\"583\":1,\"760\":1,\"890\":2}}],[\"否则则将其加入到\",{\"1\":{\"235\":1}}],[\"否则继续执行下一个普通\",{\"1\":{\"230\":1}}],[\"否则显示\",{\"1\":{\"152\":1}}],[\"否则就是该位置\",{\"1\":{\"859\":1}}],[\"否则就需要手动配置\",{\"1\":{\"802\":1}}],[\"否则就需要遍历其子\",{\"1\":{\"26\":1}}],[\"否则就调用系统的\",{\"1\":{\"767\":1}}],[\"否则就创建新的\",{\"1\":{\"759\":1}}],[\"否则就使用占用内存更小的常量类\",{\"1\":{\"522\":1}}],[\"否则就要求该方法是静态的\",{\"1\":{\"213\":1}}],[\"否则就会调用代理类\",{\"1\":{\"138\":1}}],[\"否则就给\",{\"1\":{\"137\":1}}],[\"否则挂起进程等待\",{\"1\":{\"137\":1}}],[\"否则绘制出的图形可能与预设的效果不一致\",{\"1\":{\"130\":1}}],[\"否则控件的宽高等会有异常\",{\"1\":{\"117\":1}}],[\"否则在左半部分数组查找\",{\"1\":{\"880\":1}}],[\"否则在网页上显示的时候\",{\"1\":{\"811\":1}}],[\"否则在使用该自定义控件组时\",{\"1\":{\"117\":1}}],[\"否则在对比marray中对应位置marray\",{\"1\":{\"92\":1}}],[\"否则不能取消\",{\"1\":{\"629\":1}}],[\"否则不生效\",{\"1\":{\"162\":1}}],[\"否则不依赖\",{\"1\":{\"112\":1}}],[\"否则不需要拦截\",{\"1\":{\"26\":1}}],[\"否则联动失效\",{\"1\":{\"111\":1}}],[\"否则返回该点\",{\"1\":{\"850\":1}}],[\"否则返回默认的\",{\"1\":{\"506\":1}}],[\"否则返回不能消耗的\",{\"1\":{\"413\":1}}],[\"否则返回null\",{\"1\":{\"88\":1}}],[\"否则返回\",{\"1\":{\"87\":1,\"112\":1,\"317\":1,\"333\":1,\"424\":1}}],[\"否则使用hashmap更加高效\",{\"1\":{\"85\":1,\"523\":1}}],[\"否则服务器无法接收到\",{\"1\":{\"62\":1}}],[\"否则默认\",{\"1\":{\"36\":1}}],[\"否则虽然导入了对应的包\",{\"1\":{\"2\":1}}],[\"私有化构造方法\",{\"1\":{\"545\":1}}],[\"私有目录\",{\"1\":{\"6\":1}}],[\"成为a的左子节点\",{\"1\":{\"903\":1}}],[\"成为可以持有某个诸如\",{\"1\":{\"540\":1}}],[\"成员函数或拓展函数\",{\"1\":{\"620\":1}}],[\"成功之后再缓存到本地缓存文件目录\",{\"1\":{\"383\":1}}],[\"成功加载图片时\",{\"1\":{\"377\":1}}],[\"成功执行线程则返回\",{\"1\":{\"247\":1}}],[\"协程库中的库\",{\"1\":{\"649\":1}}],[\"协程构建器\",{\"1\":{\"645\":1}}],[\"协程构建器是一个双重的\",{\"1\":{\"645\":1}}],[\"协程构建器有两种风格\",{\"1\":{\"640\":1}}],[\"协程内部使用\",{\"1\":{\"640\":1}}],[\"协程官网\",{\"1\":{\"627\":1}}],[\"协程的\",{\"1\":{\"645\":1}}],[\"协程的线程安全\",{\"0\":{\"645\":1}}],[\"协程的并发\",{\"1\":{\"625\":1,\"627\":1}}],[\"协程的思维导图\",{\"0\":{\"624\":1}}],[\"协程局部变量\",{\"0\":{\"625\":1}}],[\"协程中\",{\"0\":{\"623\":1}}],[\"协程需要单独添加依赖\",{\"1\":{\"622\":1}}],[\"协程可以看做是一个轻量级的\",{\"1\":{\"622\":1}}],[\"协程\",{\"0\":{\"622\":1},\"1\":{\"625\":1,\"627\":1,\"647\":1}}],[\"协变与逆变\",{\"1\":{\"542\":1}}],[\"协变\",{\"0\":{\"540\":1},\"1\":{\"617\":1}}],[\"协调\",{\"1\":{\"409\":1}}],[\"协调者布局\",{\"1\":{\"110\":1}}],[\"却可以保存任何类似的\",{\"1\":{\"538\":1}}],[\"却可以获取到正确的高度\",{\"1\":{\"101\":1}}],[\"泛型所具有的类型擦除问题\",{\"1\":{\"621\":1}}],[\"泛型\",{\"1\":{\"542\":1}}],[\"泛型原理\",{\"1\":{\"542\":1}}],[\"泛型列表只能保存指定泛型类型t的数据\",{\"1\":{\"539\":1}}],[\"泛型容器\",{\"0\":{\"539\":1}}],[\"泛型类型参数会在实际运行时被擦除到他的第一个边界\",{\"1\":{\"536\":1}}],[\"泛型在\",{\"1\":{\"536\":1}}],[\"泛型特性\",{\"0\":{\"536\":1}}],[\"泛型一些比较特殊的知识点\",{\"1\":{\"535\":1}}],[\"排序完毕的数据即为有序数组\",{\"1\":{\"919\":1}}],[\"排序的时候进行比较的两个元素之间的间隔\",{\"1\":{\"919\":1}}],[\"排序方向\",{\"1\":{\"918\":1}}],[\"排序快\",{\"1\":{\"913\":1}}],[\"排序后每个序列包含\",{\"1\":{\"913\":1}}],[\"排序顺序为\",{\"1\":{\"910\":1}}],[\"排序速度\",{\"1\":{\"895\":1}}],[\"排序算法比较\",{\"1\":{\"875\":1}}],[\"排序包括冒泡排序\",{\"1\":{\"875\":1}}],[\"排序\",{\"0\":{\"875\":1},\"1\":{\"703\":1,\"868\":1}}],[\"排序开始的时\",{\"1\":{\"534\":1}}],[\"排队放入串行线程池中\",{\"1\":{\"193\":1}}],[\"轮\",{\"1\":{\"532\":1}}],[\"①threadlocal申明为private\",{\"1\":{\"528\":1}}],[\"①threadlocal引用被设置为null\",{\"1\":{\"528\":1}}],[\"③\",{\"1\":{\"528\":1}}],[\"②threadlocal使用后务必调用remove方法\",{\"1\":{\"528\":1}}],[\"②\",{\"1\":{\"528\":1}}],[\"造成内存泄漏\",{\"1\":{\"528\":1}}],[\"倍\",{\"1\":{\"523\":1}}],[\"耗时\",{\"1\":{\"523\":1}}],[\"枚举变量以\",{\"1\":{\"612\":1}}],[\"枚举占用的内存是普通单例的两倍多\",{\"1\":{\"550\":1}}],[\"枚举值次序\",{\"1\":{\"521\":1}}],[\"枚举值名称\",{\"1\":{\"521\":1}}],[\"枚举类型优先于\",{\"1\":{\"583\":1,\"598\":1}}],[\"枚举类型\",{\"1\":{\"550\":1,\"612\":1}}],[\"枚举类值的引用类型\",{\"1\":{\"521\":1}}],[\"枚举类中的每个枚举都是该枚举类的一个对象\",{\"1\":{\"521\":1}}],[\"枚举类大小的计算\",{\"0\":{\"521\":1}}],[\"枚举类\",{\"0\":{\"520\":1}}],[\"答案是有的\",{\"1\":{\"519\":1}}],[\"＝\",{\"1\":{\"519\":1}}],[\"准确计算\",{\"1\":{\"517\":1}}],[\"准备工作可能在创建之后的任何时候发生\",{\"1\":{\"495\":1}}],[\"准备和初始化发生的顺序是确定的\",{\"1\":{\"490\":1}}],[\"准备rebuild\",{\"1\":{\"271\":1}}],[\"准备响应嵌套滑动时\",{\"1\":{\"112\":1}}],[\"准备\",{\"0\":{\"70\":1,\"799\":1},\"1\":{\"493\":1,\"495\":1}}],[\"聊聊\",{\"1\":{\"517\":1}}],[\"综合这里和这里的信息整理\",{\"1\":{\"516\":1}}],[\"综上所见\",{\"1\":{\"384\":1}}],[\"综上得出如下结论\",{\"1\":{\"196\":1}}],[\"综上\",{\"1\":{\"173\":1,\"239\":1,\"523\":1}}],[\"综上处理\",{\"1\":{\"30\":1}}],[\"局部变量\",{\"1\":{\"513\":1}}],[\"局部变量表\",{\"1\":{\"459\":1}}],[\"仍然是要求final的\",{\"1\":{\"511\":1}}],[\"仍然不能直接访问\",{\"1\":{\"286\":1}}],[\"仍然不是很好的解决方法\",{\"1\":{\"30\":1}}],[\"匿名内部类\",{\"1\":{\"513\":1}}],[\"匿名内部类的实现并不是真正的闭包\",{\"1\":{\"510\":1}}],[\"匿名文件映射最熟悉的应用场景就是动态内存分配\",{\"1\":{\"136\":1}}],[\"匿名文件映射一般在用户空间需要分配一段内存来存放数据时\",{\"1\":{\"136\":1}}],[\"索引位置计算\",{\"1\":{\"508\":1}}],[\"知道中序和后序遍历\",{\"1\":{\"667\":1}}],[\"知道之后做出蓝色波纹\",{\"1\":{\"418\":1}}],[\"知乎\",{\"1\":{\"508\":1,\"514\":1,\"542\":1,\"562\":1}}],[\"胖君的回答\",{\"1\":{\"508\":1,\"514\":1}}],[\"右旋为例\",{\"1\":{\"903\":1}}],[\"右\",{\"1\":{\"902\":1}}],[\"右边都大于枢纽\",{\"1\":{\"927\":1}}],[\"右边子数组所有元素\",{\"1\":{\"925\":1}}],[\"右边有序数组的大小变大\",{\"1\":{\"919\":1}}],[\"右边全是无序数组\",{\"1\":{\"898\":1}}],[\"右边的子树\",{\"1\":{\"665\":1}}],[\"右子节点\",{\"1\":{\"857\":1}}],[\"右子节点这个条件\",{\"1\":{\"836\":1}}],[\"右子节点的关键字大于该节点\",{\"1\":{\"833\":1}}],[\"右子树两个部分\",{\"1\":{\"666\":1}}],[\"右键\",{\"1\":{\"803\":1}}],[\"右两个子树\",{\"1\":{\"666\":1}}],[\"右移\",{\"1\":{\"507\":1}}],[\"右下角顶点的\",{\"1\":{\"74\":1}}],[\"左边都小于枢纽\",{\"1\":{\"927\":1}}],[\"左边子数组所有元素\",{\"1\":{\"925\":1}}],[\"左边的子树\",{\"1\":{\"665\":1}}],[\"左\",{\"1\":{\"902\":1}}],[\"左子节点\",{\"1\":{\"857\":1}}],[\"左右根\",{\"1\":{\"665\":1}}],[\"左根右\",{\"1\":{\"665\":1}}],[\"左移\",{\"1\":{\"507\":1}}],[\"左上角为\",{\"1\":{\"440\":1}}],[\"左上角堆积\",{\"1\":{\"288\":1}}],[\"左上角的坐标\",{\"1\":{\"74\":1}}],[\"左上角顶点的\",{\"1\":{\"74\":1}}],[\"左上角顶点与父容器左上角顶点的偏移量\",{\"1\":{\"74\":1}}],[\"符号之后\",{\"1\":{\"663\":1}}],[\"符号\",{\"1\":{\"507\":1}}],[\"符号引用则与\",{\"1\":{\"496\":1}}],[\"符号引用验证\",{\"1\":{\"494\":1}}],[\"符号引用\",{\"1\":{\"461\":1}}],[\"序列化成为\",{\"1\":{\"769\":1}}],[\"序列化和反序列化\",{\"1\":{\"598\":1}}],[\"序列化魔法方法及使用示例\",{\"1\":{\"598\":1}}],[\"序列化的高级认识\",{\"1\":{\"598\":1}}],[\"序列化的字节流可以在文件\",{\"1\":{\"588\":1}}],[\"序列化与反序列化都需要用户自己实现\",{\"1\":{\"592\":1}}],[\"序列化过程大量使用反射和临时变量\",{\"1\":{\"588\":1}}],[\"序列化时\",{\"1\":{\"587\":1}}],[\"序列化机制为了节省磁盘空间\",{\"1\":{\"587\":1}}],[\"序列化\",{\"0\":{\"506\":1},\"1\":{\"580\":1,\"598\":1}}],[\"冲突时\",{\"1\":{\"501\":1}}],[\"冲突\",{\"1\":{\"501\":1}}],[\"负载系数\",{\"1\":{\"501\":1}}],[\"负责采用父级的约束\",{\"1\":{\"439\":1}}],[\"负责实际绘制\",{\"1\":{\"335\":1}}],[\"负责实际计算\",{\"1\":{\"332\":1}}],[\"负责启动和管理整个c++\",{\"1\":{\"140\":1}}],[\"负责启动和管理整个java\",{\"1\":{\"140\":1}}],[\"负责\",{\"1\":{\"123\":1,\"259\":1}}],[\"负责二者之间的通信\",{\"1\":{\"123\":1}}],[\"容量\",{\"1\":{\"501\":1,\"506\":1}}],[\"容纳滚动内容的容器\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"阈值\",{\"1\":{\"501\":1}}],[\"限长操作符\",{\"1\":{\"653\":1}}],[\"限长过渡操作符\",{\"1\":{\"629\":1}}],[\"限定为\",{\"1\":{\"501\":1}}],[\"限制只有\",{\"1\":{\"726\":1}}],[\"限制只能是产生\",{\"1\":{\"402\":1}}],[\"限制只能是可以产生\",{\"1\":{\"402\":1}}],[\"限制输入的关键字\",{\"1\":{\"726\":1}}],[\"限制\",{\"1\":{\"554\":1}}],[\"限制针对的是\",{\"1\":{\"375\":1}}],[\"限制绘制范围\",{\"1\":{\"333\":1}}],[\"^parcelable\",{\"1\":{\"596\":1}}],[\"^\",{\"1\":{\"500\":1,\"507\":1}}],[\"^=\",{\"1\":{\"248\":1,\"753\":2,\"759\":1}}],[\"建议配合源码食用\",{\"1\":{\"707\":1}}],[\"建议大家不要修改\",{\"1\":{\"500\":1}}],[\"建立打包文档\",{\"1\":{\"695\":1}}],[\"建立一个\",{\"1\":{\"189\":1}}],[\"建造器通过一个可选的参数\",{\"1\":{\"638\":1}}],[\"极客学院\",{\"1\":{\"498\":1}}],[\"称为被动引用\",{\"1\":{\"497\":1}}],[\"修饰\",{\"1\":{\"612\":1,\"617\":1,\"621\":2}}],[\"修饰的类\",{\"1\":{\"612\":1}}],[\"修饰的变量会在修改后通知其他线程该变量已经被更改\",{\"1\":{\"602\":1}}],[\"修饰的常量除外\",{\"1\":{\"497\":1}}],[\"修饰的常量\",{\"1\":{\"495\":1}}],[\"修改以下部分\",{\"1\":{\"811\":1}}],[\"修改要注解的类\",{\"1\":{\"569\":1}}],[\"修改到其他线程中对应的值\",{\"1\":{\"529\":1}}],[\"修改了这个局部变量\",{\"1\":{\"513\":1}}],[\"修改的次数\",{\"1\":{\"500\":1}}],[\"修改显示部分\",{\"1\":{\"439\":1}}],[\"修改这两个\",{\"1\":{\"420\":1}}],[\"修改对应属性从而实现动画效果\",{\"1\":{\"336\":1}}],[\"修改数据\",{\"1\":{\"126\":1}}],[\"修改\",{\"1\":{\"39\":1,\"104\":2,\"300\":1,\"314\":1,\"329\":1,\"440\":1}}],[\"零值\",{\"1\":{\"495\":1}}],[\"英国\",{\"1\":{\"612\":1}}],[\"英文文档若无特殊说明都是引用官方文档\",{\"1\":{\"492\":1}}],[\"英寸的屏幕为例\",{\"1\":{\"101\":1}}],[\"英寸的屏幕上\",{\"1\":{\"100\":2}}],[\"连接一般分为\",{\"1\":{\"493\":1}}],[\"连接\",{\"1\":{\"490\":1,\"493\":1}}],[\"脑图\",{\"0\":{\"482\":1}}],[\"虚引用\",{\"0\":{\"481\":1}}],[\"虚拟机启动\",{\"1\":{\"753\":1}}],[\"虚拟机启动的时候被调用\",{\"1\":{\"228\":1}}],[\"虚拟机上实现了许多锁优化技术\",{\"1\":{\"609\":1}}],[\"虚拟机说明一些事情\",{\"1\":{\"564\":1}}],[\"虚拟机等启动时执行主类的main\",{\"1\":{\"497\":1}}],[\"虚拟机运行状态的过程\",{\"1\":{\"493\":1}}],[\"虚拟机来说\",{\"1\":{\"492\":1}}],[\"虚拟机类加载机制\",{\"1\":{\"489\":1}}],[\"虚拟机最大内存一定的情况下\",{\"1\":{\"465\":1}}],[\"虚拟机规范字没有规定任何\",{\"1\":{\"462\":1}}],[\"虚拟机栈和本地方法栈溢出\",{\"0\":{\"465\":1}}],[\"虚拟机栈作用类似\",{\"1\":{\"460\":1}}],[\"虚拟机栈\",{\"1\":{\"455\":1,\"472\":1}}],[\"虚拟机\",{\"1\":{\"454\":1,\"498\":2,\"601\":1,\"610\":1}}],[\"虚拟地址空间分为内核空间与用户空间\",{\"1\":{\"136\":1}}],[\"弱引用\",{\"0\":{\"480\":1}}],[\"哪怕抛出\",{\"1\":{\"478\":1}}],[\"没必要执行\",{\"1\":{\"475\":1}}],[\"没有左子节点\",{\"1\":{\"904\":1}}],[\"没有找到\",{\"1\":{\"850\":1}}],[\"没有邻接点\",{\"1\":{\"850\":1}}],[\"没有后继点的顶点\",{\"1\":{\"850\":2}}],[\"没有子节点的节点叫做叶子节点\",{\"1\":{\"832\":1}}],[\"没有new\",{\"1\":{\"761\":1}}],[\"没有具体实现\",{\"1\":{\"740\":1}}],[\"没有伪装\",{\"1\":{\"732\":1}}],[\"没有该子节点则不写内容\",{\"1\":{\"665\":1}}],[\"没有缓冲的通道\",{\"1\":{\"638\":1}}],[\"没有上下文切换的开销\",{\"1\":{\"622\":1}}],[\"没有在putfields\",{\"1\":{\"584\":1}}],[\"没有值\",{\"1\":{\"565\":2}}],[\"没有赋值\",{\"1\":{\"527\":1}}],[\"没有hash\",{\"1\":{\"501\":1}}],[\"没有主轴方向的约束\",{\"1\":{\"439\":1}}],[\"没有顶部\",{\"1\":{\"412\":1}}],[\"没有指定的图片\",{\"1\":{\"376\":1}}],[\"没有使用我们的\",{\"1\":{\"341\":1}}],[\"没有被\",{\"1\":{\"297\":1}}],[\"没有\",{\"1\":{\"205\":1,\"325\":1,\"417\":1}}],[\"没有相机权限\",{\"1\":{\"173\":1}}],[\"没有背景\",{\"1\":{\"159\":1}}],[\"没有的话先从网络下载\",{\"1\":{\"383\":1}}],[\"没有的话则先加载再缓存\",{\"1\":{\"377\":1}}],[\"没有的话执行imageprovider\",{\"1\":{\"374\":1}}],[\"没有的话\",{\"1\":{\"138\":1,\"351\":1}}],[\"没有任何关联\",{\"1\":{\"126\":1}}],[\"没有设置这个\",{\"1\":{\"111\":1}}],[\"没有键为key的数据\",{\"1\":{\"93\":1}}],[\"没有对基本类型的数据自动装箱\",{\"1\":{\"86\":1}}],[\"没有跨进程\",{\"1\":{\"71\":1}}],[\"没有可以处理点击事件的子\",{\"1\":{\"26\":1}}],[\"没有读写权限而导致操作失败的情况\",{\"1\":{\"6\":1}}],[\"没有他们的话这个小站不会存在\",{\"1\":{\"0\":1}}],[\"筛选所有已安装应用信息\",{\"0\":{\"817\":1}}],[\"筛选\",{\"1\":{\"475\":1}}],[\"死缓\",{\"1\":{\"475\":1}}],[\"死亡事件\",{\"0\":{\"65\":1}}],[\"死亡时\",{\"1\":{\"63\":1}}],[\"未安装\",{\"0\":{\"814\":1},\"1\":{\"814\":1}}],[\"未爬取具体文章内容\",{\"1\":{\"732\":1}}],[\"未登录时会执行\",{\"1\":{\"700\":1}}],[\"未优化前\",{\"1\":{\"614\":1}}],[\"未使用\",{\"1\":{\"474\":1}}],[\"未重合部分\",{\"1\":{\"132\":1}}],[\"防止太频繁访问被识别\",{\"1\":{\"731\":1}}],[\"防止标记的时候新\",{\"1\":{\"472\":1}}],[\"防止某进程正在访问共享资源时\",{\"1\":{\"137\":1}}],[\"垃圾回收\",{\"0\":{\"469\":1}}],[\"越容易尝试内存溢出\",{\"1\":{\"465\":1}}],[\"计晓云等译\",{\"1\":{\"883\":1}}],[\"计时器通道是一种特别的会合通道\",{\"1\":{\"638\":1}}],[\"计数器记录的是正在执行的虚拟机字节码指令的位置\",{\"1\":{\"462\":1}}],[\"计算的h值一般为\",{\"1\":{\"920\":1}}],[\"计算的工作量交给\",{\"1\":{\"131\":1}}],[\"计算次数\",{\"1\":{\"702\":1}}],[\"计算c+1的值\",{\"1\":{\"602\":1}}],[\"计算对象大小的工具\",{\"0\":{\"517\":1}}],[\"计算对应的\",{\"1\":{\"417\":1}}],[\"计算扰动分析\",{\"1\":{\"508\":1}}],[\"计算索引\",{\"0\":{\"504\":1}}],[\"计算索引时\",{\"1\":{\"500\":1}}],[\"计算得到的\",{\"1\":{\"500\":1}}],[\"计算而来\",{\"1\":{\"428\":1}}],[\"计算曲线在\",{\"1\":{\"361\":1}}],[\"计算animation<t>\",{\"1\":{\"361\":1}}],[\"计算值\",{\"1\":{\"324\":1}}],[\"计算出对应的\",{\"1\":{\"440\":1}}],[\"计算出来的真正的\",{\"1\":{\"440\":1}}],[\"计算出\",{\"1\":{\"440\":1}}],[\"计算出当前的\",{\"1\":{\"314\":1}}],[\"计算出接下来要\",{\"1\":{\"75\":1}}],[\"计算当前对应的\",{\"1\":{\"307\":1}}],[\"计算以至于能导致\",{\"1\":{\"285\":1}}],[\"计算实际应该填写的\",{\"1\":{\"196\":1}}],[\"计算完成后\",{\"1\":{\"146\":1}}],[\"计算方式不唯一\",{\"1\":{\"921\":1}}],[\"计算方式为\",{\"1\":{\"196\":1}}],[\"计算方式如下\",{\"1\":{\"100\":1}}],[\"计算方法如下\",{\"1\":{\"145\":1}}],[\"计算各个点对应控制点的坐标\",{\"1\":{\"144\":1}}],[\"计算控制点坐标\",{\"0\":{\"143\":1}}],[\"计算时就会只有\",{\"1\":{\"101\":1}}],[\"计算\",{\"1\":{\"100\":1,\"502\":1,\"507\":1}}],[\"计算key的index\",{\"1\":{\"95\":1}}],[\"计算key的hash值\",{\"1\":{\"92\":1,\"501\":1}}],[\"编码\",{\"1\":{\"737\":1}}],[\"编码的\",{\"1\":{\"519\":1}}],[\"编程思想\",{\"1\":{\"542\":1}}],[\"编译\",{\"1\":{\"931\":1}}],[\"编译出的代码和\",{\"1\":{\"772\":1}}],[\"编译依然可能包含一些无法被非虚拟化\",{\"1\":{\"772\":1}}],[\"编译器会要求\",{\"1\":{\"768\":1}}],[\"编译器\",{\"1\":{\"767\":1}}],[\"编译器生成的各种字面量和符号引用会放到方法区的运行时常量池中\",{\"1\":{\"461\":1}}],[\"编译为\",{\"1\":{\"765\":1}}],[\"编译为为kernel\",{\"1\":{\"765\":1}}],[\"编译文章\",{\"1\":{\"719\":2}}],[\"编译时报错\",{\"1\":{\"539\":1,\"540\":2}}],[\"编译通过\",{\"1\":{\"538\":1}}],[\"编译当前目录下的java文件\",{\"1\":{\"517\":1}}],[\"编译后如下\",{\"1\":{\"513\":1}}],[\"编辑图片\",{\"1\":{\"380\":1}}],[\"静态常量\",{\"1\":{\"807\":1}}],[\"静态内部类与类的静态变量不同\",{\"1\":{\"549\":1}}],[\"静态的方法\",{\"1\":{\"545\":1}}],[\"静态语句块等则不会有clinit\",{\"1\":{\"497\":1}}],[\"静态语句块会由编译器合并为clinit\",{\"1\":{\"497\":1}}],[\"静态绑定\",{\"1\":{\"490\":1}}],[\"静态变量\",{\"1\":{\"461\":1}}],[\"静态方法的类通常有对应的\",{\"1\":{\"358\":1}}],[\"允许更改值\",{\"1\":{\"619\":1}}],[\"允许的深度会导致\",{\"1\":{\"459\":1}}],[\"允许越界返回\",{\"1\":{\"413\":1}}],[\"永远<=table\",{\"1\":{\"501\":1}}],[\"永远停留在指定值的\",{\"1\":{\"317\":1}}],[\"永久代\",{\"1\":{\"455\":1}}],[\"养老区\",{\"1\":{\"455\":1}}],[\"老年代\",{\"1\":{\"455\":1,\"457\":1}}],[\"幸存者区\",{\"1\":{\"455\":1}}],[\"伊甸园\",{\"1\":{\"455\":1}}],[\"程序相关文件unix\",{\"1\":{\"686\":1}}],[\"程序块进入进入下一个\",{\"1\":{\"566\":1}}],[\"程序计数器\",{\"1\":{\"462\":1}}],[\"程序\",{\"1\":{\"454\":1}}],[\"程序最后执行的结果是通过dart\",{\"1\":{\"247\":1}}],[\"固有高度的\",{\"1\":{\"445\":1}}],[\"调试模式\",{\"1\":{\"808\":1}}],[\"调度\",{\"1\":{\"545\":1}}],[\"调整为\",{\"1\":{\"445\":1}}],[\"调用自身遍历该节点的右子树\",{\"1\":{\"834\":1}}],[\"调用自身遍历该节点的左子树\",{\"1\":{\"834\":1}}],[\"调用自身之后\",{\"1\":{\"614\":1}}],[\"调用插件\",{\"1\":{\"819\":1}}],[\"调用一次\",{\"1\":{\"744\":1}}],[\"调用函数之后\",{\"1\":{\"614\":1}}],[\"调用parcel\",{\"1\":{\"593\":1}}],[\"调用帮助类方法\",{\"1\":{\"570\":1}}],[\"调用findclass\",{\"1\":{\"485\":1}}],[\"调用findloadedclass\",{\"1\":{\"485\":1}}],[\"调用父类方法\",{\"1\":{\"728\":1}}],[\"调用父类mount方法\",{\"1\":{\"265\":1}}],[\"调用父加载器的loadclass\",{\"1\":{\"485\":1}}],[\"调用回调\",{\"1\":{\"399\":1}}],[\"调用完成\",{\"1\":{\"398\":1}}],[\"调用imagecache\",{\"1\":{\"376\":1}}],[\"调用buildowner的buildscope\",{\"1\":{\"270\":1}}],[\"调用setstate方法更新\",{\"1\":{\"369\":1}}],[\"调用setstate\",{\"1\":{\"270\":1}}],[\"调用renderobjectelement\",{\"1\":{\"265\":1}}],[\"调用componentelement\",{\"1\":{\"264\":2}}],[\"调用系统创建线程的函数\",{\"1\":{\"247\":1}}],[\"调用方法\",{\"1\":{\"728\":1}}],[\"调用方\",{\"1\":{\"244\":1,\"398\":1,\"757\":1}}],[\"调用内部方法\",{\"1\":{\"125\":1}}],[\"调用仍是同步调用\",{\"1\":{\"83\":1}}],[\"调用\",{\"1\":{\"82\":1,\"123\":1,\"124\":1,\"126\":1,\"238\":1,\"310\":1,\"332\":2,\"333\":1,\"346\":1,\"347\":1,\"383\":1,\"394\":1,\"438\":2,\"485\":1,\"612\":1,\"636\":1,\"744\":1}}],[\"调用本地写好的对应方法\",{\"1\":{\"71\":1}}],[\"调用enqueuemessage\",{\"1\":{\"56\":1}}],[\"调用服务中的方法\",{\"1\":{\"38\":1}}],[\"调用该方法\",{\"1\":{\"38\":1}}],[\"调用拦截方法\",{\"1\":{\"26\":1}}],[\"调用了setmeasureddimension\",{\"1\":{\"159\":1}}],[\"调用了getpostmessage\",{\"1\":{\"54\":1}}],[\"调用了子\",{\"1\":{\"26\":1}}],[\"调用了\",{\"1\":{\"25\":1,\"415\":1,\"822\":1}}],[\"互斥\",{\"1\":{\"645\":1}}],[\"互斥同步的思想是\",{\"1\":{\"606\":1}}],[\"互斥同步\",{\"0\":{\"606\":1}}],[\"互相之间\",{\"1\":{\"444\":1,\"445\":1}}],[\"互联网给了我莫大的支持与帮助\",{\"1\":{\"0\":1}}],[\"约束\",{\"1\":{\"444\":1}}],[\"约等于\",{\"1\":{\"343\":1}}],[\"约等于中密度屏幕\",{\"1\":{\"100\":1}}],[\"想要的大时\",{\"1\":{\"445\":1}}],[\"想要给\",{\"1\":{\"444\":1}}],[\"想要小一些的话\",{\"1\":{\"277\":1}}],[\"滑出这部分区域时\",{\"1\":{\"442\":1}}],[\"滑动机制的主力\",{\"1\":{\"427\":1}}],[\"滑动出来\",{\"1\":{\"416\":1}}],[\"滑动的原因\",{\"1\":{\"415\":1}}],[\"滑动的基础\",{\"1\":{\"405\":1}}],[\"滑动事件的关键\",{\"1\":{\"415\":1,\"418\":1}}],[\"滑动事件\",{\"1\":{\"409\":1}}],[\"滑动范围\",{\"1\":{\"405\":1}}],[\"滑动分析之\",{\"0\":{\"402\":1,\"422\":1,\"433\":1},\"1\":{\"422\":1}}],[\"滑动退出等图片操作常用的\",{\"1\":{\"385\":1}}],[\"滑动退出页面\",{\"1\":{\"380\":1}}],[\"滑动时隐藏键盘的逻辑\",{\"1\":{\"423\":1}}],[\"滑动时会先将\",{\"1\":{\"416\":1}}],[\"滑动时\",{\"1\":{\"112\":1}}],[\"滑动效果常用属性详解\",{\"1\":{\"78\":1}}],[\"滑动\",{\"0\":{\"75\":1},\"1\":{\"75\":1,\"77\":1}}],[\"顺利得到了尺寸\",{\"1\":{\"440\":1}}],[\"顺序会乱\",{\"1\":{\"655\":1}}],[\"顺序\",{\"1\":{\"42\":1}}],[\"换言之\",{\"1\":{\"439\":1}}],[\"换位\",{\"1\":{\"341\":1}}],[\"外部类\",{\"1\":{\"513\":1}}],[\"外部类引用this$0\",{\"1\":{\"512\":1}}],[\"外部类或者内部类修改这个局部变量后\",{\"1\":{\"510\":1}}],[\"外还可以自定义\",{\"1\":{\"492\":1}}],[\"外层添加\",{\"1\":{\"439\":1}}],[\"外\",{\"1\":{\"438\":1,\"440\":1}}],[\"外面添加一个gesturedetectorwidget\",{\"1\":{\"289\":1}}],[\"收集变量\",{\"1\":{\"771\":1}}],[\"收集在调用点的receiver\",{\"1\":{\"768\":1}}],[\"收集完成后再传给下一步\",{\"1\":{\"659\":1}}],[\"收集emit发送的值\",{\"1\":{\"652\":2}}],[\"收集由串行转化为并行可以节约时间\",{\"1\":{\"629\":1}}],[\"收集这个流\",{\"1\":{\"629\":1}}],[\"收缩包装\",{\"1\":{\"428\":1}}],[\"收到通知\",{\"1\":{\"438\":1}}],[\"收到通知并在herostate\",{\"1\":{\"353\":1}}],[\"收到系统帧回调时触发\",{\"1\":{\"327\":1}}],[\"收到\",{\"1\":{\"246\":1}}],[\"收到服务端返回后唤醒当前线程\",{\"1\":{\"138\":1}}],[\"收到内核中的\",{\"1\":{\"138\":1}}],[\"沿着边移动到其他顶点\",{\"1\":{\"846\":1}}],[\"沿着与轴方向\",{\"1\":{\"440\":1}}],[\"沿着\",{\"1\":{\"427\":2}}],[\"沿着相反方向修改数据\",{\"1\":{\"126\":1}}],[\"校验环境\",{\"0\":{\"802\":1}}],[\"校验是否是\",{\"1\":{\"694\":1}}],[\"校验\",{\"0\":{\"426\":1},\"1\":{\"426\":1}}],[\"填充\",{\"1\":{\"423\":1}}],[\"填充布局\",{\"1\":{\"167\":1}}],[\"遵守\",{\"1\":{\"438\":1}}],[\"遵从\",{\"1\":{\"422\":1}}],[\"遵循\",{\"1\":{\"138\":1,\"528\":1}}],[\"尝试将其恢复至\",{\"1\":{\"419\":1}}],[\"尝试在\",{\"1\":{\"203\":1}}],[\"机缘巧合\",{\"1\":{\"798\":1}}],[\"机型\",{\"1\":{\"418\":1}}],[\"机制来传递消息的\",{\"1\":{\"193\":1}}],[\"机制\",{\"1\":{\"135\":1,\"140\":1,\"485\":1}}],[\"现有限制下不会出现\",{\"1\":{\"418\":1}}],[\"现在我们知道了\",{\"1\":{\"529\":1}}],[\"现在的问题是\",{\"1\":{\"229\":1}}],[\"现在则需要在使用到对应权限时检测是否有该权限并作出相应处理\",{\"1\":{\"170\":1}}],[\"恢复了这些值\",{\"1\":{\"506\":1}}],[\"恢复并返回剩余没有使用的\",{\"1\":{\"418\":1}}],[\"恢复为\",{\"1\":{\"176\":1}}],[\"链表只保留第一个链节点的引用first\",{\"1\":{\"881\":1}}],[\"链表有以下分类\",{\"1\":{\"881\":1}}],[\"链表的大小不固定\",{\"1\":{\"881\":1}}],[\"链表的每个节点除了保存的数据外\",{\"1\":{\"881\":1}}],[\"链表等数据结构\",{\"1\":{\"878\":1}}],[\"链表\",{\"0\":{\"877\":1,\"881\":1},\"1\":{\"868\":1,\"869\":2}}],[\"链表和红黑树\",{\"1\":{\"523\":1}}],[\"链地址法\",{\"1\":{\"827\":2,\"828\":1}}],[\"链路调用\",{\"1\":{\"418\":1}}],[\"链接\",{\"1\":{\"111\":1,\"120\":1,\"136\":1,\"137\":1,\"286\":1,\"558\":1,\"584\":1,\"721\":1,\"733\":1}}],[\"识别和避免学习使用泛型过程中的陷阱\",{\"1\":{\"542\":1}}],[\"识别到\",{\"1\":{\"418\":1}}],[\"识别用户手势的属性\",{\"1\":{\"415\":1}}],[\"失效\",{\"1\":{\"415\":1,\"446\":1}}],[\"绝对值减少了\",{\"1\":{\"412\":1}}],[\"绝对不会\",{\"1\":{\"38\":1}}],[\"减少了阻塞\",{\"1\":{\"607\":1}}],[\"减去\",{\"1\":{\"439\":1,\"689\":1}}],[\"减去了\",{\"1\":{\"412\":1,\"418\":1}}],[\"减轻\",{\"1\":{\"412\":1}}],[\"能创建\",{\"1\":{\"430\":1}}],[\"能得出下面两种\",{\"1\":{\"424\":1}}],[\"能注意到\",{\"1\":{\"405\":1}}],[\"能够避免规则\",{\"1\":{\"904\":1}}],[\"能够流畅的访问数据库\",{\"1\":{\"786\":1}}],[\"能够实现协调\",{\"1\":{\"418\":1}}],[\"能够比较方便的实现\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"能够管理\",{\"1\":{\"396\":1}}],[\"好精巧的设计\",{\"1\":{\"527\":1}}],[\"好像是同一个\",{\"1\":{\"403\":1}}],[\"好处是可以对后续操作绘制的内容统一处理\",{\"1\":{\"334\":1}}],[\"顾名思义\",{\"1\":{\"402\":1}}],[\"超时处理\",{\"1\":{\"731\":1}}],[\"超出父级限制时可以滑动\",{\"1\":{\"445\":1}}],[\"超出\",{\"1\":{\"442\":1}}],[\"超详细\",{\"1\":{\"401\":1,\"483\":1}}],[\"超过千位\",{\"1\":{\"92\":1}}],[\"闲鱼\",{\"1\":{\"401\":1}}],[\"性能方面高出\",{\"1\":{\"596\":1}}],[\"性能好\",{\"1\":{\"596\":1}}],[\"性能差\",{\"1\":{\"588\":1}}],[\"性能消耗小\",{\"1\":{\"580\":1}}],[\"性能已经跟\",{\"1\":{\"400\":1}}],[\"性能更好\",{\"1\":{\"319\":1}}],[\"侧解码\",{\"1\":{\"400\":1}}],[\"侧管理\",{\"1\":{\"397\":1}}],[\"版本\",{\"1\":{\"805\":1}}],[\"版本中\",{\"1\":{\"400\":1}}],[\"版\",{\"1\":{\"542\":1}}],[\"版权协议\",{\"1\":{\"138\":1,\"528\":1}}],[\"版权声明\",{\"1\":{\"138\":1,\"528\":1}}],[\"拷贝>\",{\"1\":{\"398\":1}}],[\"入口类\",{\"1\":{\"736\":1}}],[\"入门知识\",{\"0\":{\"722\":1}}],[\"入门视频时的一些笔记\",{\"1\":{\"612\":1}}],[\"入参\",{\"1\":{\"398\":1}}],[\"入到另外一个页面\",{\"1\":{\"338\":1}}],[\"找出在\",{\"1\":{\"398\":1}}],[\"找到后用该子节点的值替换掉要删除的节点值\",{\"1\":{\"836\":1}}],[\"找到项目\",{\"1\":{\"813\":1}}],[\"找到用户环境变量\",{\"1\":{\"803\":1}}],[\"找到根节点\",{\"1\":{\"666\":1}}],[\"找到上一步创建的请求\",{\"1\":{\"398\":1}}],[\"找到父级节点中最近的\",{\"1\":{\"265\":1}}],[\"找到的话返回对应索引\",{\"1\":{\"87\":1}}],[\"立即取消\",{\"1\":{\"655\":1}}],[\"立即从powerimagerequestmanager\",{\"1\":{\"398\":1}}],[\"立即执行释放请求\",{\"1\":{\"398\":1}}],[\"省略部分代码\",{\"1\":{\"398\":1}}],[\"跨端通信获取图片资源\",{\"1\":{\"395\":1}}],[\"跨端通信从\",{\"1\":{\"394\":1}}],[\"工程到同一\",{\"1\":{\"791\":2}}],[\"工程或其他互联网资源\",{\"1\":{\"781\":1}}],[\"工程路径\",{\"1\":{\"718\":1}}],[\"工程的配置信息\",{\"1\":{\"279\":1}}],[\"工厂模式来创建\",{\"1\":{\"785\":1}}],[\"工厂函数与\",{\"1\":{\"638\":1}}],[\"工厂方法powerimageprovider\",{\"1\":{\"394\":1}}],[\"工作内存与主内存同步延迟导致\",{\"1\":{\"604\":1}}],[\"工作内存三者交互关系\",{\"1\":{\"601\":1}}],[\"工具文档化\",{\"1\":{\"565\":1}}],[\"采用尾插法\",{\"1\":{\"501\":1}}],[\"采用采用头插法\",{\"1\":{\"501\":1}}],[\"采用\",{\"1\":{\"391\":2,\"393\":1,\"445\":1}}],[\"采用不同的\",{\"1\":{\"348\":1}}],[\"借助\",{\"1\":{\"385\":1}}],[\"混入的\",{\"1\":{\"426\":1}}],[\"混入了\",{\"1\":{\"425\":1}}],[\"混入了extendedimageprovider\",{\"1\":{\"383\":1}}],[\"混合开发的图片加载库\",{\"1\":{\"400\":1}}],[\"混合开发图片加载库\",{\"1\":{\"388\":1}}],[\"混合项目开发的图片加载库\",{\"1\":{\"385\":1}}],[\"阿里巴巴出品的power\",{\"1\":{\"385\":1}}],[\"阿里的\",{\"1\":{\"376\":1}}],[\"仅显示用户账号\",{\"1\":{\"691\":1}}],[\"仅在预计不会由用户处理的异常上调用\",{\"1\":{\"640\":1}}],[\"仅表示可以有这些功能\",{\"1\":{\"612\":1}}],[\"仅源文件有效\",{\"1\":{\"565\":1}}],[\"仅就从网络加载图片而言\",{\"1\":{\"385\":1}}],[\"仅获取该widget执行一些操作\",{\"1\":{\"272\":1}}],[\"微信掘金效果\",{\"1\":{\"380\":2}}],[\"涌现了很多第三方图片加载控件\",{\"1\":{\"376\":1}}],[\"急速增大\",{\"1\":{\"376\":1}}],[\"网站所有文章列表并输出\",{\"1\":{\"730\":1}}],[\"网格加载平均大小几\",{\"1\":{\"376\":1}}],[\"网络请求相关信息\",{\"0\":{\"711\":1},\"1\":{\"709\":1}}],[\"网络中传递\",{\"1\":{\"588\":1}}],[\"网络进行操作的请求\",{\"1\":{\"243\":1,\"244\":1}}],[\"网络恢复\",{\"1\":{\"126\":1}}],[\"网络\",{\"1\":{\"126\":2}}],[\"网络等\",{\"1\":{\"126\":1,\"492\":1,\"580\":1}}],[\"张或者最大\",{\"1\":{\"375\":1}}],[\"属性详解\",{\"1\":{\"816\":1,\"824\":1}}],[\"属性的抽象描述\",{\"1\":{\"740\":1}}],[\"属性的时候只会触发\",{\"1\":{\"438\":1}}],[\"属性为\",{\"1\":{\"442\":1}}],[\"属性只接受能创建\",{\"1\":{\"422\":1}}],[\"属性\",{\"1\":{\"369\":1,\"370\":1,\"803\":1}}],[\"属于\",{\"1\":{\"576\":1}}],[\"属于客户端部分\",{\"1\":{\"62\":1}}],[\"属于比较基础性的内容\",{\"1\":{\"8\":1}}],[\"预先加载\",{\"1\":{\"365\":1}}],[\"预览\",{\"1\":{\"155\":1,\"931\":1}}],[\"预览如下\",{\"0\":{\"155\":1}}],[\"运算的具体实现并非原子性的\",{\"1\":{\"602\":1}}],[\"运算后产生误差\",{\"1\":{\"360\":1}}],[\"运行指定的代码\",{\"1\":{\"759\":1}}],[\"运行完这段语句并释放之后\",{\"1\":{\"546\":1}}],[\"运行到这里时\",{\"1\":{\"546\":1}}],[\"运行\",{\"0\":{\"680\":1,\"719\":1},\"1\":{\"493\":1}}],[\"运行的时候执行对应的\",{\"1\":{\"247\":1}}],[\"运行的整个流程\",{\"1\":{\"140\":1}}],[\"运行时常量池属于方法区\",{\"1\":{\"466\":1}}],[\"运行时常量池溢出\",{\"0\":{\"466\":1}}],[\"运行时常量池\",{\"1\":{\"461\":1}}],[\"运行时发现会出错\",{\"1\":{\"203\":1}}],[\"运行时可知\",{\"1\":{\"196\":1}}],[\"运行时权限是\",{\"1\":{\"170\":1}}],[\"运行时权限的一些处理流程\",{\"1\":{\"170\":1}}],[\"运行时权限\",{\"0\":{\"169\":1}}],[\"运行时\",{\"1\":{\"140\":1}}],[\"线性探测\",{\"1\":{\"827\":1}}],[\"线性插值\",{\"1\":{\"359\":1}}],[\"线程进行\",{\"1\":{\"712\":1}}],[\"线程本地存储\",{\"1\":{\"608\":1}}],[\"线程外部观察是无序\",{\"1\":{\"604\":1}}],[\"线程内是串行的语义\",{\"1\":{\"604\":1}}],[\"线程从内部观察时有序\",{\"1\":{\"604\":1}}],[\"线程安全与\",{\"0\":{\"600\":1}}],[\"线程组线程数为0时\",{\"1\":{\"560\":1}}],[\"线程管理之\",{\"1\":{\"530\":1}}],[\"线程一直运行\",{\"1\":{\"528\":1}}],[\"线程共享\",{\"1\":{\"461\":1}}],[\"线程请求的栈深度大于\",{\"1\":{\"459\":1}}],[\"线程私有\",{\"1\":{\"458\":1,\"462\":1}}],[\"线程绑定\",{\"1\":{\"285\":1}}],[\"线程要执行的方法指针\",{\"1\":{\"247\":1}}],[\"线程通过isolate中的messagehandler来执行任务\",{\"1\":{\"238\":1}}],[\"线程处理消息\",{\"1\":{\"193\":1}}],[\"线程实例化\",{\"1\":{\"191\":1}}],[\"线程是调度的基本单位\",{\"1\":{\"135\":1}}],[\"线程池\",{\"1\":{\"247\":1,\"528\":1}}],[\"线程池的常规调用进行接收\",{\"1\":{\"83\":1}}],[\"线程池中执行\",{\"1\":{\"247\":1}}],[\"线程池中排队\",{\"1\":{\"192\":1}}],[\"线程池中\",{\"1\":{\"65\":1}}],[\"线程池中运行完毕\",{\"1\":{\"63\":1}}],[\"线程\",{\"0\":{\"285\":1},\"1\":{\"63\":1,\"65\":1,\"190\":1,\"193\":2,\"601\":1,\"622\":1}}],[\"线程调用了\",{\"1\":{\"50\":1}}],[\"亦或者控制这些值变化的速度快慢\",{\"1\":{\"355\":1}}],[\"产生的间隔由tickermodel控制\",{\"1\":{\"638\":1}}],[\"产生的\",{\"1\":{\"357\":1}}],[\"产生\",{\"1\":{\"353\":1,\"355\":1,\"468\":1}}],[\"表容器大小未知时\",{\"1\":{\"828\":1}}],[\"表有两种存储方式\",{\"1\":{\"827\":1}}],[\"表是一种可以快速插入和查找的数据结构\",{\"1\":{\"826\":1}}],[\"表格来自\",{\"1\":{\"904\":1}}],[\"表格\",{\"1\":{\"786\":1}}],[\"表\",{\"0\":{\"825\":1},\"1\":{\"781\":1}}],[\"表达式会视为返回值\",{\"1\":{\"663\":1}}],[\"表达式总是被大括号括着\",{\"1\":{\"663\":1}}],[\"表达式形式如下\",{\"1\":{\"663\":1}}],[\"表达式的方法\",{\"1\":{\"662\":1}}],[\"表达式时\",{\"1\":{\"662\":1}}],[\"表达式在\",{\"0\":{\"661\":1}}],[\"表达式不返回任何结果\",{\"1\":{\"646\":1}}],[\"表达式允许我们使用其\",{\"1\":{\"646\":1}}],[\"表达式\",{\"0\":{\"646\":1},\"1\":{\"663\":2}}],[\"表明不再需要更多的元素\",{\"1\":{\"636\":1}}],[\"表现为\",{\"1\":{\"353\":1}}],[\"表示没有这样的点\",{\"1\":{\"850\":1}}],[\"表示没有更多的元素进入通道\",{\"1\":{\"636\":1}}],[\"表示接受关键词作为参数传入\",{\"1\":{\"726\":1}}],[\"表示参数个数可变\",{\"1\":{\"726\":1}}],[\"表示字符串内部不需要转义\",{\"1\":{\"723\":1}}],[\"表示引用该方法\",{\"1\":{\"664\":1}}],[\"表示变量或操作的最新值时\",{\"1\":{\"631\":1}}],[\"表示这个类可以用来序列化\",{\"1\":{\"581\":1}}],[\"表示week\",{\"1\":{\"577\":1}}],[\"表示只有完整的一周都在该年才算该年的第一周\",{\"1\":{\"575\":1}}],[\"表示只要包含第一天就算该年的第一周\",{\"1\":{\"575\":1}}],[\"表示有人以\",{\"1\":{\"572\":1}}],[\"表示该标记会被标记的\",{\"1\":{\"565\":1}}],[\"表示该方法返回值为\",{\"1\":{\"36\":1}}],[\"表示是否将注解信息添加在\",{\"1\":{\"565\":1}}],[\"表示为类属性\",{\"1\":{\"528\":1}}],[\"表示经过上述计算之后\",{\"1\":{\"412\":1}}],[\"表示可以任意超出界限\",{\"1\":{\"412\":1}}],[\"表示不可以应用到\",{\"1\":{\"412\":1}}],[\"表示不能继续滑动超出此值\",{\"1\":{\"412\":1}}],[\"表示不会主动结束动画\",{\"1\":{\"325\":1}}],[\"表示整个\",{\"1\":{\"258\":1}}],[\"表示他是一个特殊的方法\",{\"1\":{\"204\":1}}],[\"表示当前的\",{\"1\":{\"161\":1}}],[\"表示意图\",{\"1\":{\"125\":1}}],[\"表示改变了\",{\"1\":{\"112\":1}}],[\"表示\",{\"1\":{\"75\":1,\"100\":1,\"440\":1}}],[\"表示的是view\",{\"1\":{\"75\":1}}],[\"表示启动请求时是否有额外数据\",{\"1\":{\"36\":1}}],[\"表示能处理点击事件的子\",{\"1\":{\"26\":1}}],[\"路由变化\",{\"1\":{\"353\":1}}],[\"路径\",{\"1\":{\"57\":1}}],[\"统计字符数\",{\"1\":{\"704\":1}}],[\"统计文本中字母个数\",{\"1\":{\"612\":1}}],[\"统计当前\",{\"1\":{\"347\":1}}],[\"统一协调处理\",{\"1\":{\"415\":1}}],[\"统一让\",{\"1\":{\"395\":1}}],[\"统一处理\",{\"1\":{\"296\":2,\"404\":2,\"415\":1}}],[\"替换为\",{\"1\":{\"721\":1}}],[\"替换为我们自定义的\",{\"1\":{\"179\":1}}],[\"替换默认的过渡\",{\"1\":{\"346\":1}}],[\"替换页面切换时的默认过渡\",{\"1\":{\"344\":1}}],[\"刚开始这个标记元素可以为\",{\"1\":{\"898\":1}}],[\"刚开始排序的时候假设只有第一个元素是有序的\",{\"1\":{\"534\":1}}],[\"刚好看到大神\",{\"1\":{\"735\":1}}],[\"刚好处于由\",{\"1\":{\"341\":1}}],[\"刚才以及之前选出来的\",{\"1\":{\"532\":1}}],[\"刚刚创建的对象优先\",{\"1\":{\"457\":1}}],[\"刚刚从页面\",{\"1\":{\"343\":1}}],[\"始终与\",{\"1\":{\"343\":1}}],[\"始终都能够占满屏幕宽度\",{\"1\":{\"100\":1}}],[\"形成\",{\"1\":{\"921\":1}}],[\"形成两个n\",{\"1\":{\"913\":1}}],[\"形式的\",{\"1\":{\"768\":1}}],[\"形式替换掉原先的值\",{\"1\":{\"105\":1}}],[\"形状\",{\"1\":{\"342\":2}}],[\"根节点颜色为黑\",{\"1\":{\"902\":1}}],[\"根节点的在0\",{\"1\":{\"832\":1}}],[\"根左右\",{\"1\":{\"665\":1}}],[\"根号\",{\"1\":{\"342\":2,\"343\":1}}],[\"根据篇幅需要做了部分精简\",{\"1\":{\"781\":1}}],[\"根据刚刚创建的\",{\"1\":{\"758\":1}}],[\"根据是\",{\"1\":{\"757\":1}}],[\"根据提示操作即可\",{\"1\":{\"719\":1}}],[\"根据根节点坐标\",{\"1\":{\"666\":1}}],[\"根据之前的知识\",{\"1\":{\"666\":1}}],[\"根据之前的分析\",{\"1\":{\"329\":1}}],[\"根据这份jdk\",{\"1\":{\"575\":1}}],[\"根据jdk\",{\"1\":{\"572\":1}}],[\"根据java\",{\"1\":{\"85\":1}}],[\"根据romain\",{\"1\":{\"516\":1,\"523\":1}}],[\"根据需要加载类来解析未定义的符号\",{\"1\":{\"496\":1}}],[\"根据数组元素的类型不同\",{\"1\":{\"492\":1}}],[\"根据滑动方向的不同\",{\"1\":{\"420\":1}}],[\"根据实现方式的不同\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"根据官方power\",{\"1\":{\"400\":1}}],[\"根据官方的说法\",{\"1\":{\"400\":1}}],[\"根据阿里的描述\",{\"1\":{\"400\":1}}],[\"根据内存中的数据创建\",{\"1\":{\"397\":1}}],[\"根据构造方法的不同创建了不同的imageprovider对象作为image\",{\"1\":{\"372\":1}}],[\"根据动画进度创建\",{\"1\":{\"352\":1}}],[\"根据设定的时长\",{\"1\":{\"335\":1}}],[\"根据设计稿宽度\",{\"1\":{\"196\":1}}],[\"根据传入的animation<double>对象创建\",{\"1\":{\"357\":1}}],[\"根据传入的\",{\"1\":{\"302\":1,\"355\":1,\"394\":1,\"422\":1}}],[\"根据上述的代码\",{\"1\":{\"748\":1}}],[\"根据上述分析\",{\"1\":{\"316\":1,\"418\":1}}],[\"根据上述理论\",{\"1\":{\"273\":1}}],[\"根据上面创建的nmh创建dart\",{\"1\":{\"247\":2}}],[\"根据上下滑动的距离判断当前选中的字母\",{\"1\":{\"152\":1}}],[\"根据external的定义\",{\"1\":{\"243\":1}}],[\"根据创建\",{\"1\":{\"238\":1}}],[\"根据用户对权限的处理结果决定接下来的操作\",{\"1\":{\"172\":1}}],[\"根据android\",{\"1\":{\"138\":1}}],[\"根据不同的powerimageprovider\",{\"1\":{\"391\":1}}],[\"根据不同的方法调用创建对应的\",{\"1\":{\"315\":1}}],[\"根据不同的状态创建创建不同属性的\",{\"1\":{\"310\":1}}],[\"根据不同的\",{\"1\":{\"125\":1,\"153\":1}}],[\"根据\",{\"1\":{\"100\":2,\"112\":1,\"159\":1,\"262\":1,\"368\":1,\"397\":1,\"412\":2,\"417\":1,\"428\":1,\"440\":1}}],[\"根据方法\",{\"1\":{\"71\":1}}],[\"组成\",{\"1\":{\"767\":1}}],[\"组成的数组table保存数据\",{\"1\":{\"499\":1}}],[\"组成的裁剪遮罩\",{\"1\":{\"342\":1}}],[\"组合而成的一个实体\",{\"1\":{\"645\":1}}],[\"组合多个流\",{\"0\":{\"631\":1}}],[\"组合\",{\"1\":{\"493\":1}}],[\"组合在一起\",{\"1\":{\"420\":1}}],[\"组合的\",{\"1\":{\"417\":1}}],[\"组件展示图片\",{\"1\":{\"400\":1}}],[\"组件逻辑一致\",{\"1\":{\"393\":1}}],[\"组件一致\",{\"1\":{\"393\":1}}],[\"组件\",{\"1\":{\"388\":1}}],[\"组件实现图片加载\",{\"1\":{\"385\":1}}],[\"组件的主要区别在于\",{\"1\":{\"385\":1}}],[\"组件类似\",{\"1\":{\"382\":1}}],[\"组件加载图片的流程\",{\"1\":{\"377\":1}}],[\"组件占位\",{\"1\":{\"341\":2}}],[\"组件获取到其他\",{\"1\":{\"284\":1}}],[\"组件间传递数据\",{\"1\":{\"284\":1}}],[\"径向动画的本质还是\",{\"1\":{\"342\":1}}],[\"径向过渡\",{\"1\":{\"342\":1}}],[\"径向转化\",{\"1\":{\"342\":1}}],[\"逐渐变为\",{\"1\":{\"340\":1}}],[\"逐渐从\",{\"1\":{\"340\":1}}],[\"移动的次数要小很多\",{\"1\":{\"928\":1}}],[\"移动完毕后要保证访问了每个顶点\",{\"1\":{\"846\":1}}],[\"移动\",{\"0\":{\"682\":1},\"1\":{\"896\":1}}],[\"移动到目标层\",{\"1\":{\"912\":1}}],[\"移动到另外一个柱子的问题\",{\"1\":{\"912\":1}}],[\"移动到柱子c\",{\"1\":{\"912\":1}}],[\"移动到根节点空出的位置\",{\"1\":{\"859\":1}}],[\"移动到\",{\"1\":{\"340\":1}}],[\"移除后就得到一个有序数组\",{\"1\":{\"860\":1}}],[\"移除时要移动的节点要比较的稍微多些\",{\"1\":{\"859\":1}}],[\"移除指的是将根节点推出堆中\",{\"1\":{\"859\":1}}],[\"移除的时候为了保证满足堆的条件\",{\"1\":{\"857\":1}}],[\"移除回调\",{\"1\":{\"408\":1}}],[\"移除监听\",{\"1\":{\"310\":1,\"438\":1}}],[\"移除\",{\"0\":{\"845\":1,\"859\":1},\"1\":{\"254\":1,\"352\":1,\"857\":1}}],[\"页面卡顿等\",{\"1\":{\"376\":1}}],[\"页面切换时触发的\",{\"1\":{\"353\":1}}],[\"页面切换时过渡的\",{\"1\":{\"341\":1}}],[\"页面\",{\"1\":{\"344\":1,\"350\":1}}],[\"页面中的\",{\"1\":{\"341\":1}}],[\"页面将需要实现\",{\"1\":{\"340\":1}}],[\"页面的更新和用户事件处理都由\",{\"1\":{\"124\":1}}],[\"感兴趣的可以直接阅读官方文档\",{\"1\":{\"338\":1}}],[\"感谢作者张丹\",{\"1\":{\"813\":1}}],[\"感谢作者michaelx\",{\"1\":{\"796\":1}}],[\"感谢原作者的分享\",{\"1\":{\"675\":1}}],[\"感谢这篇文章\",{\"1\":{\"579\":1}}],[\"感谢以上各位朋友\",{\"1\":{\"0\":1}}],[\"感谢所有为以上提到的项目有过付出的人\",{\"1\":{\"0\":1}}],[\"飞入\",{\"1\":{\"353\":1}}],[\"飞\",{\"1\":{\"338\":1,\"353\":1}}],[\"小\",{\"1\":{\"878\":1,\"895\":1,\"910\":1,\"913\":2,\"918\":1,\"921\":1}}],[\"小数\",{\"1\":{\"723\":1}}],[\"小知识点\",{\"0\":{\"664\":1}}],[\"小大约\",{\"1\":{\"523\":1}}],[\"小于\",{\"1\":{\"343\":1,\"412\":2,\"418\":1}}],[\"小于几千个\",{\"1\":{\"85\":1,\"523\":1}}],[\"小结一下\",{\"1\":{\"398\":1}}],[\"小结\",{\"0\":{\"335\":1,\"554\":1}}],[\"倾斜\",{\"1\":{\"334\":1}}],[\"裁剪旋转翻转\",{\"1\":{\"380\":1}}],[\"裁剪画布的绘制范围\",{\"1\":{\"334\":1}}],[\"裁剪的场景中\",{\"1\":{\"6\":1}}],[\"缩放拖拽图片\",{\"1\":{\"380\":1}}],[\"缩放\",{\"1\":{\"334\":1}}],[\"合并两个有序的数组为新的有序数组\",{\"1\":{\"913\":1}}],[\"合并两个有序的数组\",{\"1\":{\"913\":1}}],[\"合并两个流的值\",{\"1\":{\"659\":1}}],[\"合并之后为\",{\"1\":{\"659\":2}}],[\"合并发射项\",{\"1\":{\"659\":1}}],[\"合并\",{\"0\":{\"630\":1},\"1\":{\"334\":1}}],[\"合成和混合两种\",{\"1\":{\"130\":1}}],[\"掉了一部分\",{\"1\":{\"418\":1}}],[\"掉当前的\",{\"1\":{\"334\":1}}],[\"掉本\",{\"1\":{\"30\":1}}],[\"范围\",{\"1\":{\"439\":1,\"689\":2}}],[\"范围为\",{\"1\":{\"418\":1}}],[\"范围是\",{\"1\":{\"412\":4}}],[\"范围内\",{\"1\":{\"333\":1,\"412\":1}}],[\"范围内的\",{\"0\":{\"211\":1}}],[\"范围无限大\",{\"1\":{\"333\":1}}],[\"跳过剩余步骤直接返回了\",{\"1\":{\"418\":1}}],[\"跳过\",{\"1\":{\"335\":1}}],[\"跳过了\",{\"1\":{\"332\":1}}],[\"跳转到\",{\"1\":{\"340\":1,\"341\":1}}],[\"跳转\",{\"1\":{\"284\":1}}],[\"跳转时会出现短暂黑屏\",{\"1\":{\"30\":1}}],[\"阶段执行代码\",{\"1\":{\"766\":1}}],[\"阶段的热点代码会被从普通il优化为ssa\",{\"1\":{\"766\":1}}],[\"阶段\",{\"1\":{\"332\":2,\"335\":2,\"766\":1}}],[\"阶段安排\",{\"1\":{\"332\":1}}],[\"随后当\",{\"1\":{\"332\":1}}],[\"随着每一帧的变化\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"随着\",{\"1\":{\"127\":1}}],[\"随着业务发展\",{\"1\":{\"126\":1}}],[\"随着项目的进行\",{\"1\":{\"122\":1}}],[\"帧刷新时\",{\"1\":{\"327\":1}}],[\"速度等建模\",{\"1\":{\"323\":1}}],[\"速度快\",{\"1\":{\"137\":1}}],[\"操纵正向\",{\"1\":{\"319\":1}}],[\"操纵从double\",{\"1\":{\"319\":1}}],[\"操作过程提示及说明如下\",{\"1\":{\"719\":1}}],[\"操作符\",{\"1\":{\"629\":1}}],[\"操作和界面操作串行\",{\"1\":{\"622\":1}}],[\"操作和与自己通信的\",{\"1\":{\"249\":1}}],[\"操作及网络请求等需要根据耗时操作更新界面的需求时\",{\"1\":{\"622\":1}}],[\"操作这些变量\",{\"1\":{\"554\":1}}],[\"操作数栈\",{\"1\":{\"459\":1}}],[\"操作等时\",{\"1\":{\"285\":1}}],[\"操作已经压入消息栈中等待触发在单独的线程中执行\",{\"1\":{\"249\":1}}],[\"操作完成时会通过\",{\"1\":{\"243\":1}}],[\"操作完成后再跳转到主\",{\"1\":{\"30\":1}}],[\"操作的类型\",{\"1\":{\"243\":1,\"244\":1}}],[\"操作文件的\",{\"1\":{\"243\":1}}],[\"操作可以绕过内核直接在用户态完成\",{\"1\":{\"136\":1}}],[\"操作系统相关的逻辑\",{\"1\":{\"126\":1}}],[\"操作思路是正确的\",{\"1\":{\"30\":1}}],[\"操作\",{\"0\":{\"843\":1,\"857\":1},\"1\":{\"30\":1,\"124\":1,\"243\":1,\"249\":1,\"689\":2,\"753\":1}}],[\"操作该图片\",{\"1\":{\"6\":1}}],[\"触达的\",{\"1\":{\"771\":1}}],[\"触达此值时\",{\"1\":{\"319\":1}}],[\"触发了垃圾回收\",{\"1\":{\"528\":1}}],[\"触发重建\",{\"1\":{\"369\":1}}],[\"触发\",{\"1\":{\"307\":1,\"333\":2,\"475\":1}}],[\"触发异常的时候不会崩溃\",{\"1\":{\"292\":1}}],[\"触发在\",{\"1\":{\"243\":1,\"244\":1}}],[\"触发该闹钟\",{\"1\":{\"13\":1}}],[\"触发时间\",{\"0\":{\"13\":1},\"1\":{\"11\":1}}],[\"至少有一条路径可以到达所有顶点的图叫做连通图\",{\"1\":{\"841\":1}}],[\"至少有一个\",{\"1\":{\"375\":1}}],[\"至少能够晚一些消寂于这广阔的数据海洋中\",{\"1\":{\"775\":1}}],[\"至少保证\",{\"1\":{\"319\":1}}],[\"至此已经完成了\",{\"1\":{\"549\":1}}],[\"至此\",{\"1\":{\"179\":1,\"202\":1,\"372\":1,\"441\":1,\"759\":1}}],[\"至此将looper\",{\"1\":{\"56\":1}}],[\"尽可能不让他人修改变更引用\",{\"1\":{\"528\":1}}],[\"尽管子协程已经设置了异常处理者\",{\"1\":{\"640\":1}}],[\"尽管为了优化性能\",{\"1\":{\"523\":1}}],[\"尽管有各种子类\",{\"1\":{\"318\":1}}],[\"尽量少的使用类\",{\"1\":{\"30\":1}}],[\"尽量避免写一些口水文\",{\"1\":{\"0\":1}}],[\"反之则不然\",{\"1\":{\"902\":1}}],[\"反之\",{\"1\":{\"585\":1}}],[\"反之亦然\",{\"1\":{\"286\":1}}],[\"反序列化得到的对象会被丢弃\",{\"1\":{\"583\":1}}],[\"反序列化\",{\"1\":{\"580\":1,\"581\":1,\"583\":1,\"587\":1}}],[\"反射的用法较为简单\",{\"1\":{\"554\":1}}],[\"反射获取资源\",{\"1\":{\"823\":1}}],[\"反射获取该类及其资源\",{\"1\":{\"819\":1}}],[\"反射获取插件\",{\"0\":{\"819\":1}}],[\"反射获取方法\",{\"1\":{\"553\":1}}],[\"反射获取变量\",{\"1\":{\"553\":1}}],[\"反射\",{\"1\":{\"552\":1}}],[\"反射简单应用\",{\"0\":{\"551\":1}}],[\"反向执行动画\",{\"1\":{\"329\":1}}],[\"反向开始朝向double\",{\"1\":{\"319\":1}}],[\"反向开始动画\",{\"1\":{\"319\":1}}],[\"反向运行的时长\",{\"1\":{\"319\":1}}],[\"反方向的\",{\"1\":{\"317\":1}}],[\"曲线等通知\",{\"1\":{\"335\":1}}],[\"曲线\",{\"1\":{\"312\":1}}],[\"首行默认以下命令\",{\"1\":{\"722\":1}}],[\"首次加载或者缓存被清空\",{\"1\":{\"376\":1}}],[\"首次\",{\"1\":{\"308\":1}}],[\"首先看一下\",{\"1\":{\"782\":1}}],[\"首先看看okhttputils的结构\",{\"1\":{\"709\":1}}],[\"首先根据\",{\"1\":{\"576\":1}}],[\"首先是在\",{\"1\":{\"398\":1}}],[\"首先创建了\",{\"1\":{\"398\":1}}],[\"首先创建整个应用程序使用的\",{\"1\":{\"211\":1}}],[\"首先通信的双方是\",{\"1\":{\"286\":1}}],[\"首先要添加相关依赖\",{\"1\":{\"209\":1}}],[\"首先要知道\",{\"1\":{\"138\":1}}],[\"首先\",{\"1\":{\"204\":1,\"364\":1,\"485\":1,\"783\":1}}],[\"首先需要请出第一个主角\",{\"1\":{\"201\":1}}],[\"首先被调用的是activity\",{\"1\":{\"25\":1}}],[\"渐变到\",{\"1\":{\"300\":1,\"314\":1}}],[\"渐变背景使用\",{\"1\":{\"146\":1}}],[\"停止从\",{\"1\":{\"744\":1}}],[\"停止\",{\"1\":{\"417\":1}}],[\"停止动画\",{\"1\":{\"322\":1}}],[\"停止等都封装在\",{\"1\":{\"300\":1,\"314\":1}}],[\"停止服务\",{\"1\":{\"36\":1}}],[\"隐藏时\",{\"1\":{\"344\":1}}],[\"隐藏掉\",{\"1\":{\"24\":1}}],[\"隐式动画会自动播放\",{\"1\":{\"312\":1}}],[\"隐式动画内部维护着自己的\",{\"1\":{\"302\":1}}],[\"隐式动画内部持有\",{\"1\":{\"302\":1}}],[\"隐式动画\",{\"1\":{\"300\":2,\"301\":1,\"312\":1,\"314\":2,\"329\":1}}],[\"底层基于\",{\"1\":{\"338\":1,\"340\":1}}],[\"底层实现\",{\"0\":{\"345\":1},\"1\":{\"300\":1}}],[\"底层是使用\",{\"1\":{\"83\":1}}],[\"底层是通过\",{\"1\":{\"82\":1}}],[\"颜色\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"全部内容\",{\"1\":{\"813\":1}}],[\"全部重新绘制\",{\"1\":{\"273\":1}}],[\"全都是用fragment实现\",{\"1\":{\"782\":1}}],[\"全名\",{\"1\":{\"691\":1}}],[\"全局的配置文件\",{\"1\":{\"807\":1}}],[\"全局安装\",{\"1\":{\"805\":1}}],[\"全局分析指示在更改优化代码的内容时丢弃优化代码\",{\"1\":{\"768\":1}}],[\"全局配置唯一的\",{\"1\":{\"708\":1}}],[\"全局变量\",{\"1\":{\"513\":1}}],[\"全局未捕获异常处理\",{\"1\":{\"297\":1}}],[\"捕获\",{\"1\":{\"656\":2}}],[\"捕获的错误\",{\"1\":{\"297\":1}}],[\"捕获处理\",{\"1\":{\"137\":1}}],[\"输入回车会自动创建\",{\"1\":{\"719\":1}}],[\"输入要发布的文章名称\",{\"1\":{\"719\":1}}],[\"输入和\",{\"1\":{\"701\":1}}],[\"输入\",{\"1\":{\"680\":1,\"719\":2,\"802\":1}}],[\"输入命令\",{\"1\":{\"672\":1,\"809\":1}}],[\"输入值为设计稿中对应的控件大小\",{\"1\":{\"196\":2}}],[\"输出不同\",{\"1\":{\"827\":1}}],[\"输出所有日志信息\",{\"1\":{\"808\":1}}],[\"输出加工数据\",{\"1\":{\"737\":1}}],[\"输出格式化的数据\",{\"1\":{\"736\":1}}],[\"输出汇总文档\",{\"1\":{\"731\":1}}],[\"输出汇总信息\",{\"1\":{\"731\":1}}],[\"输出\",{\"1\":{\"701\":1}}],[\"输出信息\",{\"1\":{\"695\":1}}],[\"输出目录\",{\"1\":{\"695\":1}}],[\"输出sizeof计算结果\",{\"1\":{\"517\":1}}],[\"输出到控制台\",{\"1\":{\"296\":1}}],[\"交换\",{\"1\":{\"534\":1}}],[\"交给\",{\"1\":{\"296\":2}}],[\"交互\",{\"1\":{\"123\":1,\"125\":1,\"126\":3,\"284\":1}}],[\"详细配置了访问的\",{\"1\":{\"708\":1}}],[\"详细介绍\",{\"1\":{\"598\":1}}],[\"详细的代码可以从advanced\",{\"1\":{\"342\":1}}],[\"详细的代码可以从simple\",{\"1\":{\"340\":1}}],[\"详细说明\",{\"0\":{\"293\":1}}],[\"详解\",{\"1\":{\"133\":1,\"483\":1}}],[\"任务的类型\",{\"1\":{\"787\":1}}],[\"任务分两种\",{\"1\":{\"292\":1}}],[\"任意一个流中的值发生变化都会触发执行计算\",{\"1\":{\"659\":1}}],[\"任意值任意次\",{\"1\":{\"629\":1}}],[\"任意\",{\"1\":{\"566\":1}}],[\"任意时间\",{\"1\":{\"14\":1}}],[\"行号\",{\"1\":{\"702\":1}}],[\"行\",{\"1\":{\"288\":1,\"704\":1}}],[\"行间距\",{\"1\":{\"33\":1}}],[\"列\",{\"1\":{\"288\":1}}],[\"列表为\",{\"1\":{\"427\":1}}],[\"列表为空\",{\"1\":{\"230\":1}}],[\"列表中在\",{\"1\":{\"427\":2}}],[\"列表中的字母标题\",{\"1\":{\"152\":1}}],[\"列表children\",{\"1\":{\"427\":1}}],[\"列表\",{\"1\":{\"420\":1,\"724\":1}}],[\"列表会一直执行\",{\"1\":{\"223\":1}}],[\"黄马\",{\"1\":{\"286\":1}}],[\"远程过程调用\",{\"1\":{\"286\":1}}],[\"远程调用不会阻塞\",{\"1\":{\"83\":1}}],[\"资源加载和\",{\"1\":{\"824\":1}}],[\"资源等\",{\"1\":{\"816\":1}}],[\"资源\",{\"1\":{\"286\":2}}],[\"资源文件\",{\"1\":{\"167\":2}}],[\"截止\",{\"1\":{\"286\":1}}],[\"挂起和结束时修改当前线程threadlocal的值为之前保存的值\",{\"1\":{\"625\":1}}],[\"挂起\",{\"1\":{\"285\":1}}],[\"挂起当前线程\",{\"1\":{\"138\":1}}],[\"栈为空\",{\"1\":{\"890\":3}}],[\"栈stack\",{\"1\":{\"887\":1}}],[\"栈和队列\",{\"0\":{\"885\":1}}],[\"栈帧中的本地变量表\",{\"1\":{\"472\":1}}],[\"栈帧过大或者虚拟机栈容量太小\",{\"1\":{\"465\":1}}],[\"栈帧\",{\"1\":{\"459\":1}}],[\"栈\",{\"0\":{\"871\":1,\"887\":1},\"1\":{\"284\":1,\"458\":1,\"868\":1}}],[\"区分了几种情况\",{\"1\":{\"757\":1}}],[\"区别不大\",{\"1\":{\"723\":1}}],[\"区别完全解析\",{\"1\":{\"498\":1}}],[\"区别在于\",{\"1\":{\"280\":1}}],[\"区\",{\"1\":{\"455\":3}}],[\"区和非\",{\"1\":{\"455\":1}}],[\"区域总体分两类\",{\"1\":{\"455\":1}}],[\"区域内的点击事件\",{\"1\":{\"76\":1}}],[\"万物皆控件\",{\"1\":{\"278\":1}}],[\"万一有某处遗忘了便会导致出错\",{\"1\":{\"218\":1}}],[\"稍微特殊一些\",{\"1\":{\"276\":1}}],[\"剩余的空间以展示某些内容\",{\"1\":{\"445\":1}}],[\"剩余空间的时候\",{\"1\":{\"275\":1}}],[\"剩下的则清空\",{\"1\":{\"471\":1}}],[\"剩下的内存\",{\"1\":{\"465\":1}}],[\"剩下按照和\",{\"1\":{\"400\":1}}],[\"剩下工作就是计算两个控制点的坐标\",{\"1\":{\"143\":1}}],[\"梁飞宇\",{\"1\":{\"274\":1}}],[\"学习的过程需要不断的重复\",{\"1\":{\"779\":1}}],[\"学习的过程需要不断的探索\",{\"1\":{\"0\":1}}],[\"学习笔记\",{\"0\":{\"612\":1,\"613\":1,\"628\":1}}],[\"学习\",{\"1\":{\"274\":1}}],[\"赋值给renderobject\",{\"1\":{\"265\":1}}],[\"赋予\",{\"1\":{\"52\":1,\"54\":1}}],[\"赋予权限有两种方式\",{\"1\":{\"6\":1}}],[\"赋予了权限\",{\"1\":{\"6\":2}}],[\"终以失败告终\",{\"1\":{\"798\":1}}],[\"终端输入\",{\"1\":{\"671\":1}}],[\"终止\",{\"1\":{\"349\":1}}],[\"终于到了我们这个\",{\"1\":{\"265\":1}}],[\"终点后一个点为afterpoint\",{\"1\":{\"144\":1}}],[\"终点分别为startpoint\",{\"1\":{\"144\":1}}],[\"间跳转\",{\"1\":{\"284\":1}}],[\"间接管理\",{\"1\":{\"266\":1}}],[\"间接调用了\",{\"1\":{\"264\":1}}],[\"间隔排序\",{\"1\":{\"921\":1}}],[\"间隔时间有两种\",{\"1\":{\"14\":1}}],[\"间隔时间\",{\"0\":{\"14\":1}}],[\"间隔多久重复一次\",{\"1\":{\"12\":1}}],[\"生命周期管理\",{\"1\":{\"824\":1}}],[\"生命周期内有多个\",{\"1\":{\"319\":1}}],[\"生命周期没有\",{\"1\":{\"287\":1}}],[\"生命周期\",{\"0\":{\"287\":1}}],[\"生产从\",{\"1\":{\"646\":1}}],[\"生产一个项目\",{\"1\":{\"629\":1}}],[\"生产者\",{\"1\":{\"617\":1}}],[\"生产\",{\"1\":{\"264\":1}}],[\"生成树\",{\"1\":{\"849\":1}}],[\"生成插件\",{\"0\":{\"818\":1}}],[\"生成网页并预览\",{\"1\":{\"716\":1}}],[\"生成一个新对象\",{\"1\":{\"545\":1}}],[\"生成的\",{\"1\":{\"377\":1}}],[\"生成渠道包\",{\"1\":{\"107\":1}}],[\"生成多个渠道文件夹\",{\"0\":{\"106\":1}}],[\"生成\",{\"1\":{\"71\":1,\"140\":1,\"670\":1}}],[\"必需\",{\"1\":{\"718\":3}}],[\"必要时更新child的slot\",{\"1\":{\"263\":1}}],[\"必须先退出当前关联的\",{\"1\":{\"763\":1}}],[\"必须先被连接\",{\"1\":{\"497\":1}}],[\"必须至少有一个参数\",{\"1\":{\"612\":1}}],[\"必须有颜色\",{\"1\":{\"902\":1}}],[\"必须有这个变量\",{\"1\":{\"594\":1}}],[\"必须有前两个参数\",{\"1\":{\"117\":1}}],[\"必须与读取的顺序对应\",{\"1\":{\"594\":1}}],[\"必须按照写入的顺序读取\",{\"1\":{\"594\":1}}],[\"必须是能产生\",{\"1\":{\"403\":1}}],[\"必须是能够产生\",{\"1\":{\"403\":1}}],[\"必须支持+\",{\"1\":{\"358\":1}}],[\"必须使用对应的resumecapability依次resume才可以恢复isolate\",{\"1\":{\"744\":1}}],[\"必须使用同一个\",{\"1\":{\"744\":1}}],[\"必须使用\",{\"1\":{\"334\":1}}],[\"必须返回\",{\"1\":{\"302\":1}}],[\"必须在\",{\"1\":{\"193\":1}}],[\"必须在主线程调用\",{\"1\":{\"190\":1}}],[\"必须各进程利用同步工具解决\",{\"1\":{\"137\":1}}],[\"必须设置\",{\"1\":{\"111\":1}}],[\"必须就是要实现联动的\",{\"1\":{\"111\":1}}],[\"必须一致\",{\"1\":{\"57\":1}}],[\"必须实现该方法\",{\"1\":{\"36\":1}}],[\"必须被指定\",{\"1\":{\"36\":1}}],[\"必须继承自\",{\"1\":{\"35\":1}}],[\"事实上\",{\"1\":{\"583\":1,\"769\":1}}],[\"事实上的final\",{\"1\":{\"511\":1}}],[\"事实也确实如此\",{\"1\":{\"263\":1}}],[\"事件时\",{\"1\":{\"418\":1}}],[\"事件之后\",{\"1\":{\"229\":1}}],[\"事件做拦截\",{\"1\":{\"179\":1}}],[\"事件联动\",{\"1\":{\"152\":1}}],[\"事件向上\",{\"1\":{\"126\":1}}],[\"事件中\",{\"1\":{\"74\":1}}],[\"事件\",{\"1\":{\"26\":2,\"125\":1,\"235\":1,\"350\":1,\"781\":1}}],[\"事件都需要调用onintercepttouchevent\",{\"1\":{\"26\":1}}],[\"事件分发\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"→widget\",{\"1\":{\"269\":1}}],[\"→\",{\"1\":{\"261\":4,\"262\":2,\"264\":15,\"265\":8,\"747\":3,\"753\":1,\"761\":3,\"767\":2,\"768\":4,\"878\":1,\"891\":1,\"895\":1,\"910\":1,\"918\":1}}],[\"↓\",{\"1\":{\"258\":1,\"263\":1}}],[\"框架执行重绘时\",{\"1\":{\"332\":1}}],[\"框架重新绘制内容\",{\"1\":{\"332\":1}}],[\"框架\",{\"0\":{\"736\":1},\"1\":{\"332\":1,\"708\":1}}],[\"框架底层实现动画的各个类\",{\"1\":{\"314\":1}}],[\"框架引起的异常\",{\"1\":{\"296\":1}}],[\"框架的类\",{\"1\":{\"254\":1}}],[\"框架层\",{\"1\":{\"140\":1}}],[\"件事\",{\"1\":{\"253\":1,\"270\":1,\"759\":1}}],[\"快速排序算法\",{\"1\":{\"927\":1}}],[\"快速排序所用的数组\",{\"1\":{\"927\":1}}],[\"快速排序的思路\",{\"0\":{\"925\":1},\"1\":{\"928\":1}}],[\"快速排序的时间复杂度是o\",{\"1\":{\"918\":1}}],[\"快速排序在大多数情况下都是最快的\",{\"1\":{\"922\":1}}],[\"快速排序在某些情况下时间复杂度可达到\",{\"1\":{\"860\":1}}],[\"快速排序\",{\"0\":{\"922\":1},\"1\":{\"868\":1,\"875\":3,\"925\":1}}],[\"快速滑动\",{\"1\":{\"112\":1}}],[\"快手\",{\"1\":{\"250\":1}}],[\"声明式\",{\"1\":{\"658\":1}}],[\"声明式捕获\",{\"0\":{\"633\":1},\"1\":{\"656\":1}}],[\"声明线程局部变量\",{\"1\":{\"625\":1}}],[\"声明\",{\"1\":{\"565\":1,\"620\":1}}],[\"声明系统线程类型\",{\"1\":{\"247\":1}}],[\"声明其为\",{\"1\":{\"60\":1}}],[\"见下文详细分析\",{\"1\":{\"759\":1}}],[\"见下文↓\",{\"1\":{\"500\":1}}],[\"见\",{\"1\":{\"247\":1,\"422\":1}}],[\"见上\",{\"1\":{\"190\":1}}],[\"激活这个端口\",{\"1\":{\"247\":1}}],[\"语句解释\",{\"0\":{\"808\":1}}],[\"语句\",{\"1\":{\"621\":1}}],[\"语句被锁定\",{\"1\":{\"546\":1}}],[\"语句执行向\",{\"1\":{\"247\":1}}],[\"语言的时候\",{\"1\":{\"798\":1}}],[\"语言的特性\",{\"1\":{\"547\":1}}],[\"语言有四个预留的注解\",{\"1\":{\"565\":1}}],[\"语言特性\",{\"1\":{\"333\":1}}],[\"语言编写\",{\"1\":{\"251\":1}}],[\"语言\",{\"1\":{\"209\":1,\"278\":1}}],[\"语言实现\",{\"1\":{\"195\":1}}],[\"步长越来越大到后面无法继续下去\",{\"1\":{\"827\":1}}],[\"步生成的静态博客内容添加到\",{\"1\":{\"794\":1}}],[\"步骤\",{\"1\":{\"708\":1,\"903\":1}}],[\"步骤如下\",{\"1\":{\"38\":1,\"39\":1}}],[\"步\",{\"1\":{\"254\":1,\"265\":1,\"490\":2,\"708\":1,\"751\":1,\"761\":1,\"767\":1,\"912\":1}}],[\"步分别是怎么实现的\",{\"1\":{\"246\":1}}],[\"释放\",{\"1\":{\"397\":1}}],[\"释放图片资源等\",{\"1\":{\"394\":1}}],[\"释放时机\",{\"1\":{\"388\":1}}],[\"释放资源\",{\"1\":{\"322\":1}}],[\"释放掉占用的\",{\"1\":{\"244\":1}}],[\"释放这个触发这个回调的\",{\"1\":{\"243\":1,\"244\":1}}],[\"端返回的信息\",{\"1\":{\"747\":1}}],[\"端注册才能正常使用\",{\"1\":{\"399\":1}}],[\"端通过powerimageloader\",{\"1\":{\"398\":1}}],[\"端通过消息分发接收到结果\",{\"1\":{\"247\":1}}],[\"端对应的方法\",{\"1\":{\"398\":1}}],[\"端为例分析一下\",{\"1\":{\"398\":1}}],[\"端向\",{\"1\":{\"398\":2,\"399\":1}}],[\"端处理完请求之后会回调\",{\"1\":{\"398\":1}}],[\"端发送的事件\",{\"1\":{\"398\":1}}],[\"端发送的图片加载结束事件\",{\"1\":{\"398\":1}}],[\"端发起请求的过程\",{\"1\":{\"398\":1}}],[\"端发起请求\",{\"1\":{\"397\":1}}],[\"端发起文件读写请求\",{\"0\":{\"243\":1}}],[\"端接收请求\",{\"1\":{\"397\":1}}],[\"端图片获取\",{\"0\":{\"399\":1}}],[\"端图片加载库比较成熟\",{\"1\":{\"397\":1}}],[\"端图片加载库管理\",{\"1\":{\"397\":1}}],[\"端图片展示\",{\"0\":{\"389\":1}}],[\"端图片展示和native\",{\"1\":{\"388\":1}}],[\"端解决方案存在图片内存释放时机\",{\"1\":{\"388\":1}}],[\"端加载解析图片\",{\"1\":{\"388\":1}}],[\"端展示图片\",{\"1\":{\"388\":1}}],[\"端只负责展示\",{\"1\":{\"385\":1}}],[\"端已有的图片加载库完成图片加载\",{\"1\":{\"385\":1}}],[\"端的处理过程\",{\"1\":{\"398\":1}}],[\"端的实现\",{\"1\":{\"247\":1}}],[\"端的\",{\"1\":{\"247\":1}}],[\"端\",{\"1\":{\"241\":1,\"398\":2,\"399\":1,\"400\":1}}],[\"去除非必须的生命周期长的对象\",{\"1\":{\"464\":1}}],[\"去检查执行一下\",{\"1\":{\"238\":1}}],[\"去掉共享的\",{\"1\":{\"465\":1}}],[\"去掉\",{\"1\":{\"203\":1}}],[\"告诉光栅\",{\"1\":{\"331\":1}}],[\"告诉\",{\"1\":{\"237\":1}}],[\"≠\",{\"0\":{\"237\":1},\"1\":{\"237\":1}}],[\"`entrypoint`\",{\"1\":{\"748\":1}}],[\"`paused`\",{\"1\":{\"748\":1}}],[\"`main`\",{\"1\":{\"748\":2}}],[\"``void\",{\"1\":{\"742\":1}}],[\"``sendport\",{\"1\":{\"742\":1}}],[\"`val`\",{\"1\":{\"666\":1}}],[\"`tosubtreecontext`\",{\"1\":{\"351\":1}}],[\"`to`\",{\"1\":{\"350\":2,\"351\":1}}],[\"`fromsubtreecontext`\",{\"1\":{\"351\":1}}],[\"`future`\",{\"1\":{\"231\":1}}],[\"`renderobjecttowidgetadapter`\",{\"1\":{\"256\":1}}],[\"`\",{\"1\":{\"231\":2}}],[\"`scheduleimmediate`\",{\"1\":{\"228\":1}}],[\"什么时候会被安排执行呢\",{\"1\":{\"229\":1}}],[\"了解泛型\",{\"1\":{\"542\":1}}],[\"了\",{\"0\":{\"511\":1},\"1\":{\"223\":1,\"273\":1,\"355\":1,\"375\":1,\"412\":3,\"680\":1,\"766\":1,\"767\":1}}],[\"放入\",{\"1\":{\"813\":1}}],[\"放入到相应的队列中\",{\"1\":{\"234\":1}}],[\"放入到\",{\"1\":{\"221\":1,\"341\":1}}],[\"放大缩小\",{\"1\":{\"338\":1}}],[\"放到后面\",{\"1\":{\"532\":1}}],[\"放到一个列表中\",{\"1\":{\"405\":1}}],[\"放到\",{\"1\":{\"167\":1,\"398\":1}}],[\"各有优劣\",{\"1\":{\"771\":1}}],[\"各种动画底层类关系\",{\"1\":{\"314\":1,\"355\":1}}],[\"各种事件\",{\"1\":{\"221\":1}}],[\"各个步骤按照顺序进行\",{\"1\":{\"490\":1}}],[\"各个时间都会通知到\",{\"1\":{\"349\":1}}],[\"各个\",{\"1\":{\"221\":1}}],[\"各个效果如下\",{\"1\":{\"132\":1}}],[\"各个层级的关注点分离\",{\"1\":{\"127\":1}}],[\"卡顿等情况\",{\"1\":{\"221\":1}}],[\"维基百科\",{\"1\":{\"849\":1,\"852\":1,\"883\":1,\"892\":2,\"915\":1}}],[\"维持有一个消息队列\",{\"1\":{\"221\":1}}],[\"维护的一款可用于java和android的依赖注入框架\",{\"1\":{\"199\":1}}],[\"权限验证\",{\"1\":{\"689\":1}}],[\"权限\",{\"1\":{\"689\":2}}],[\"权限之外\",{\"1\":{\"5\":1}}],[\"权衡之下我觉得这种方式是比较能接受的\",{\"1\":{\"213\":1}}],[\"特殊的\",{\"1\":{\"903\":1}}],[\"特征3保证了根节点是堆中最大的值\",{\"1\":{\"856\":1}}],[\"特征\",{\"0\":{\"856\":1}}],[\"特点\",{\"0\":{\"526\":1}}],[\"特点是实现方式灵活\",{\"1\":{\"329\":1}}],[\"特点是\",{\"1\":{\"329\":1}}],[\"特点是当涉及到的属性变化后\",{\"1\":{\"329\":1}}],[\"特别是在\",{\"1\":{\"622\":1}}],[\"特别是当\",{\"1\":{\"428\":1}}],[\"特别耗时的工作应当交给线程池处理\",{\"1\":{\"190\":1}}],[\"特定的powerimageprovider\",{\"1\":{\"390\":1}}],[\"特需\",{\"1\":{\"209\":1}}],[\"环境下安装和配置\",{\"1\":{\"668\":1}}],[\"环境\",{\"0\":{\"799\":1,\"800\":1},\"1\":{\"209\":1,\"716\":1}}],[\"环境变量\",{\"0\":{\"699\":1},\"1\":{\"3\":1,\"803\":1}}],[\"❤️\",{\"0\":{\"208\":1}}],[\"系列之重新认识\",{\"1\":{\"508\":1}}],[\"系列\",{\"1\":{\"206\":1,\"498\":1}}],[\"系统为二者分配同一个\",{\"1\":{\"816\":1}}],[\"系统运行时的用户数据\",{\"1\":{\"686\":1}}],[\"系统内核\",{\"1\":{\"686\":1}}],[\"系统在关闭该子线程前\",{\"1\":{\"560\":1}}],[\"系统会自动传入类对象\",{\"1\":{\"728\":1}}],[\"系统会自动用对象的hashcode\",{\"1\":{\"582\":1}}],[\"系统会对此进行优化\",{\"1\":{\"161\":1}}],[\"系统会根据过去的时间和重复间隔选择一个合适的时间来触发\",{\"1\":{\"13\":1}}],[\"系统中\",{\"1\":{\"140\":1}}],[\"系统启动示意图\",{\"1\":{\"140\":1}}],[\"系统启动框架图\",{\"1\":{\"140\":1}}],[\"系统第一个\",{\"1\":{\"140\":1}}],[\"系统的所有设备文件\",{\"1\":{\"686\":1}}],[\"系统的配置文件\",{\"1\":{\"686\":1}}],[\"系统的内核进程\",{\"1\":{\"140\":1}}],[\"系统的窗口机制如下图\",{\"1\":{\"24\":1}}],[\"系统之前的引导程序\",{\"1\":{\"140\":1}}],[\"系统从开机到\",{\"1\":{\"140\":1}}],[\"系统库+android\",{\"1\":{\"140\":1}}],[\"系统大体分为\",{\"1\":{\"140\":1}}],[\"系统开篇\",{\"1\":{\"140\":1}}],[\"系统架构简介\",{\"0\":{\"140\":1}}],[\"系统就会认为该\",{\"1\":{\"139\":1}}],[\"系统对每个接口方法的编号\",{\"1\":{\"138\":1}}],[\"系统对我们在\",{\"1\":{\"138\":1}}],[\"系统自动帮我们实现了更详细的内容\",{\"1\":{\"138\":1}}],[\"系统可以在必要时候回收他们\",{\"1\":{\"126\":1}}],[\"系统提供了\",{\"1\":{\"111\":1}}],[\"系统\",{\"1\":{\"38\":1,\"76\":1,\"140\":1,\"278\":1,\"691\":1}}],[\"系统窗口管理机制\",{\"1\":{\"24\":1}}],[\"继而在threadgroup\",{\"1\":{\"560\":1}}],[\"继续读取下一个\",{\"1\":{\"890\":1}}],[\"继续纵深访问\",{\"1\":{\"847\":1}}],[\"继续运行\",{\"1\":{\"626\":2}}],[\"继续执行代码1后面的代码直到最后一行\",{\"1\":{\"623\":1}}],[\"继续消耗\",{\"1\":{\"418\":1}}],[\"继续保留一遍下一次可能的复用\",{\"1\":{\"205\":1}}],[\"继承到的方法中\",{\"1\":{\"350\":1}}],[\"继承\",{\"1\":{\"300\":1,\"307\":1,\"312\":1,\"314\":1,\"333\":1,\"349\":1,\"728\":1}}],[\"继承自map\",{\"1\":{\"499\":1}}],[\"继承自multichildrenderobjectwidget\",{\"1\":{\"265\":1}}],[\"继承自classloader\",{\"1\":{\"486\":1}}],[\"继承自imageproviderext\",{\"1\":{\"394\":1}}],[\"继承自imageprovider\",{\"1\":{\"383\":1}}],[\"继承自父类\",{\"1\":{\"327\":1}}],[\"继承自\",{\"1\":{\"189\":1,\"191\":1,\"307\":1,\"316\":1,\"331\":1,\"333\":2,\"355\":1,\"359\":1,\"360\":1,\"371\":1,\"404\":1,\"405\":1,\"406\":1,\"423\":1,\"425\":1,\"437\":1,\"523\":1}}],[\"继承自dialog\",{\"1\":{\"167\":1}}],[\"继承自布局文件的父布局\",{\"1\":{\"117\":1}}],[\"继承的方法外\",{\"1\":{\"319\":1}}],[\"继承的\",{\"1\":{\"83\":1}}],[\"错误widget在debug和release模式下有一些区别\",{\"1\":{\"295\":1}}],[\"错误\",{\"1\":{\"203\":1}}],[\"桥梁\",{\"1\":{\"203\":1}}],[\"装\",{\"0\":{\"800\":1},\"1\":{\"203\":1}}],[\"像是ping\",{\"1\":{\"745\":1}}],[\"像padding\",{\"1\":{\"278\":1}}],[\"像一个袋子一样把\",{\"1\":{\"203\":1}}],[\"像素\",{\"1\":{\"100\":1,\"370\":1}}],[\"像素级\",{\"1\":{\"99\":1}}],[\"某种意义上他们像是一种enum\",{\"1\":{\"615\":1}}],[\"某个thread调用某个对象的同步方法\",{\"1\":{\"561\":1}}],[\"某个将\",{\"1\":{\"199\":1}}],[\"某一控件\",{\"1\":{\"33\":1}}],[\"示意图除非特殊注明外\",{\"1\":{\"781\":1}}],[\"示意图\",{\"1\":{\"344\":1}}],[\"示意图如下\",{\"1\":{\"344\":1}}],[\"示意图来自\",{\"1\":{\"136\":1,\"137\":1}}],[\"示例\",{\"1\":{\"281\":1,\"516\":1}}],[\"示例代码\",{\"1\":{\"199\":1,\"284\":1}}],[\"手指向上滑动屏幕此值增大\",{\"1\":{\"440\":1}}],[\"手势事件会被\",{\"1\":{\"418\":1}}],[\"手势事件会被其捕获并内部消耗\",{\"1\":{\"415\":1}}],[\"手势识别\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"手势等封装\",{\"1\":{\"382\":1}}],[\"手机屏幕真实高度\",{\"1\":{\"196\":1}}],[\"手动调用measure\",{\"1\":{\"160\":1}}],[\"获得\",{\"1\":{\"377\":1}}],[\"获得屏幕真实高度\",{\"1\":{\"196\":1}}],[\"获取希尔排序间隔\",{\"1\":{\"921\":1}}],[\"获取资源\",{\"0\":{\"823\":1}}],[\"获取未安装\",{\"1\":{\"821\":1}}],[\"获取其资源\",{\"1\":{\"819\":1}}],[\"获取当前\",{\"0\":{\"747\":1}}],[\"获取当前动画的\",{\"1\":{\"321\":1}}],[\"获取所有的文章节点\",{\"1\":{\"737\":1}}],[\"获取有用数据\",{\"1\":{\"736\":1}}],[\"获取中序排序中根节点的坐标\",{\"1\":{\"666\":1}}],[\"获取根节点\",{\"1\":{\"666\":1}}],[\"获取对应的\",{\"1\":{\"753\":1}}],[\"获取对应内存中的数据\",{\"1\":{\"397\":1}}],[\"获取对象的同时初始化\",{\"1\":{\"662\":1}}],[\"获取注解的值\",{\"1\":{\"569\":1}}],[\"获取注解对象\",{\"1\":{\"569\":1}}],[\"获取该类中的所有域变量\",{\"1\":{\"569\":1}}],[\"获取要反射\",{\"1\":{\"554\":1}}],[\"获取要反射的\",{\"1\":{\"554\":1}}],[\"获取要显示的联系人数据对应的英文tag集合\",{\"1\":{\"153\":1}}],[\"获取父级约束信息\",{\"1\":{\"444\":2,\"445\":1}}],[\"获取图片\",{\"1\":{\"398\":2}}],[\"获取图片信息\",{\"1\":{\"398\":1}}],[\"获取图片的过程\",{\"1\":{\"397\":1}}],[\"获取图片在内存中的指针\",{\"1\":{\"397\":1}}],[\"获取并监听\",{\"1\":{\"377\":1,\"382\":1}}],[\"获取指定类型的inheritedwidget\",{\"1\":{\"272\":1}}],[\"获取用于通信的sendport\",{\"1\":{\"247\":1}}],[\"获取一个新的\",{\"1\":{\"243\":1,\"244\":1}}],[\"获取网络信息\",{\"0\":{\"186\":1}}],[\"获取屏幕画面\",{\"0\":{\"185\":1}}],[\"获取或失去焦点的时候调用\",{\"1\":{\"160\":1}}],[\"获取从\",{\"1\":{\"147\":1}}],[\"获取到该锁的线程可以多次重入\",{\"1\":{\"603\":1}}],[\"获取到使用注解的类\",{\"1\":{\"569\":1}}],[\"获取到对应的\",{\"1\":{\"303\":1}}],[\"获取到的是一个没有执行构造方法的\",{\"1\":{\"547\":1}}],[\"获取到的\",{\"1\":{\"247\":1,\"370\":1}}],[\"获取到的状态栏是系统的状态栏\",{\"1\":{\"101\":1}}],[\"获取到内核\",{\"1\":{\"138\":1}}],[\"获取到虚拟地址\",{\"1\":{\"136\":1}}],[\"获取到处理后的状态更新界面\",{\"1\":{\"125\":1}}],[\"获取到\",{\"1\":{\"112\":1,\"138\":1,\"370\":1}}],[\"获取到当前线程的looper和messagequeue\",{\"1\":{\"56\":1}}],[\"获取状态栏高度的问题\",{\"0\":{\"101\":1}}],[\"获取\",{\"0\":{\"160\":1,\"821\":1,\"822\":1},\"1\":{\"92\":1,\"101\":1,\"105\":1,\"147\":1,\"196\":2,\"321\":1,\"367\":2,\"384\":1,\"394\":1,\"400\":1,\"405\":1,\"554\":1,\"754\":1,\"757\":1,\"819\":1}}],[\"获取数据\",{\"1\":{\"88\":1}}],[\"获取的对象\",{\"1\":{\"583\":1}}],[\"获取的\",{\"1\":{\"83\":1,\"393\":1,\"397\":1,\"405\":1}}],[\"获取的路径\",{\"1\":{\"6\":1}}],[\"获取客户端传过来的数据\",{\"1\":{\"71\":1}}],[\"获取msg\",{\"1\":{\"56\":1}}],[\"获取服务实例\",{\"1\":{\"38\":1}}],[\"获取服务端\",{\"1\":{\"38\":1}}],[\"获取实例调用\",{\"1\":{\"38\":1}}],[\"已实现\",{\"1\":{\"721\":1}}],[\"已知条件\",{\"1\":{\"196\":1}}],[\"已经是有序的\",{\"1\":{\"898\":1}}],[\"已经有一个公认的比较好的二次\",{\"1\":{\"827\":1}}],[\"已经有键为key的数据\",{\"1\":{\"93\":1}}],[\"已经配置好了环境变量\",{\"1\":{\"802\":1}}],[\"已经失效\",{\"1\":{\"735\":1}}],[\"已经分配了内存不为\",{\"1\":{\"547\":1}}],[\"已经排好顺序的最大值不用参与排序\",{\"1\":{\"532\":1}}],[\"已经存在值并且数量大于\",{\"1\":{\"501\":1}}],[\"已经确定了文本方向\",{\"1\":{\"424\":1}}],[\"已经由于某种原因超过\",{\"1\":{\"412\":2}}],[\"已经被赋予了对象\",{\"1\":{\"546\":1}}],[\"已经被监听了\",{\"1\":{\"375\":1}}],[\"已经被改成了\",{\"1\":{\"101\":1}}],[\"已经控制动画开始执行\",{\"1\":{\"307\":1}}],[\"已经完成了\",{\"1\":{\"232\":1}}],[\"已经完成任务了\",{\"1\":{\"139\":1}}],[\"已经消失或者还没生成\",{\"1\":{\"183\":1}}],[\"已经对\",{\"1\":{\"179\":1}}],[\"已经初始化好了\",{\"1\":{\"160\":1}}],[\"已经初始化完毕\",{\"1\":{\"160\":1}}],[\"已经提供了管道\",{\"1\":{\"135\":1}}],[\"已经绘制到了\",{\"1\":{\"145\":1}}],[\"已经绘制的图形\",{\"1\":{\"131\":1}}],[\"已经绘制好的图形为dst\",{\"1\":{\"130\":1}}],[\"已经决定拦截事件\",{\"1\":{\"26\":1}}],[\"概述\",{\"0\":{\"192\":1}}],[\"读权限4\",{\"1\":{\"689\":1}}],[\"读写\",{\"1\":{\"189\":1}}],[\"读取栈顶元素top\",{\"1\":{\"890\":1}}],[\"读取数据并加载到数据库中的后台任务seeddatabaseworker\",{\"1\":{\"781\":1}}],[\"读取数据时默认该对象不会被其他对象更改而不加锁\",{\"1\":{\"609\":1}}],[\"读取每一项内容并保存\",{\"1\":{\"737\":1}}],[\"读取快\",{\"1\":{\"724\":1}}],[\"读取的慢\",{\"1\":{\"630\":1}}],[\"读取的文件内容\",{\"1\":{\"243\":1}}],[\"读取c的值\",{\"1\":{\"602\":1}}],[\"读取之前序列化的两个对象\",{\"1\":{\"587\":1}}],[\"读取变量\",{\"1\":{\"584\":1}}],[\"读取文件的信息\",{\"1\":{\"243\":1}}],[\"读取文件时\",{\"1\":{\"241\":1}}],[\"读取文件过程分析\",{\"0\":{\"241\":1}}],[\"读取读取初始化代码\",{\"1\":{\"140\":1}}],[\"读取\",{\"1\":{\"104\":1,\"497\":1}}],[\"加\",{\"1\":{\"805\":1}}],[\"加一\",{\"1\":{\"760\":1}}],[\"加工\",{\"1\":{\"736\":1}}],[\"加密后的密码\",{\"1\":{\"584\":2}}],[\"加密文本并转化为\",{\"1\":{\"557\":1}}],[\"加密和解密的结果都是二进制的\",{\"1\":{\"557\":1}}],[\"加密\",{\"1\":{\"557\":2,\"558\":1}}],[\"加密算法进行加密后\",{\"1\":{\"556\":1}}],[\"加密解密应用\",{\"0\":{\"555\":1}}],[\"加到\",{\"1\":{\"534\":1}}],[\"加重\",{\"1\":{\"412\":1}}],[\"加载未安装\",{\"0\":{\"820\":1}}],[\"加载已安装应用资源\",{\"0\":{\"815\":1}}],[\"加载已安装应用\",{\"0\":{\"814\":1},\"1\":{\"814\":1}}],[\"加载可能会有问题\",{\"1\":{\"811\":1}}],[\"加载到\",{\"0\":{\"765\":1},\"1\":{\"766\":1,\"770\":1}}],[\"加载到图片之后进行解析\",{\"1\":{\"398\":1}}],[\"加载因子为\",{\"1\":{\"505\":1}}],[\"加载系数\",{\"1\":{\"500\":1}}],[\"加载而导致异常\",{\"1\":{\"485\":1}}],[\"加载\",{\"1\":{\"485\":1,\"490\":1,\"492\":1,\"781\":1,\"814\":1}}],[\"加载当前应用的\",{\"1\":{\"484\":1}}],[\"加载目录\",{\"1\":{\"484\":1}}],[\"加载核心类库\",{\"1\":{\"484\":1}}],[\"加载成功\",{\"1\":{\"399\":1}}],[\"加载失败\",{\"1\":{\"382\":1,\"399\":2}}],[\"加载大量图片导致的内存溢出的优化实践\",{\"1\":{\"378\":1}}],[\"加载图片\",{\"1\":{\"365\":1,\"376\":1,\"399\":1}}],[\"加载过程\",{\"0\":{\"485\":1},\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"加载引导程序到\",{\"1\":{\"140\":1}}],[\"加入支持泛型参数\",{\"1\":{\"538\":1}}],[\"加入到\",{\"1\":{\"247\":1}}],[\"加入的时候\",{\"1\":{\"228\":1}}],[\"加入\",{\"1\":{\"189\":1}}],[\"备注\",{\"1\":{\"189\":1,\"516\":1}}],[\"按顺序调用它的代码块\",{\"1\":{\"631\":1}}],[\"按位取反\",{\"1\":{\"507\":1}}],[\"按位异或\",{\"1\":{\"507\":1}}],[\"按位或\",{\"1\":{\"507\":1}}],[\"按位与\",{\"1\":{\"507\":1}}],[\"按钮绑定事件处理器\",{\"1\":{\"189\":1}}],[\"按照这个增量对数组arr进行插入排序\",{\"1\":{\"919\":1}}],[\"按照要删除的节点子节点数目的不同\",{\"1\":{\"836\":2}}],[\"按照要求输入即可\",{\"1\":{\"671\":1}}],[\"按照访问节点的顺序不同\",{\"1\":{\"834\":1}}],[\"按照默认的主题配置选择一个就好\",{\"1\":{\"810\":1}}],[\"按照优先级不断的依次从oob\",{\"1\":{\"761\":1}}],[\"按照优先级从前到后依次是\",{\"1\":{\"239\":1}}],[\"按照jdk1\",{\"1\":{\"576\":1}}],[\"按照排序速度依次是冒泡排序\",{\"1\":{\"531\":1}}],[\"按照开头的公式\",{\"1\":{\"516\":1}}],[\"按照列表的方向\",{\"1\":{\"427\":1}}],[\"按照列表反方向\",{\"1\":{\"427\":1}}],[\"按照正常创建\",{\"1\":{\"417\":1}}],[\"按照所处位置的不同\",{\"1\":{\"402\":1}}],[\"按照所占比重\",{\"1\":{\"357\":1}}],[\"按照自己的内容大小来\",{\"1\":{\"445\":1}}],[\"按照自己的大小来显示\",{\"1\":{\"276\":1}}],[\"按照自定义的规则展示\",{\"1\":{\"391\":1}}],[\"按照上述的要求\",{\"1\":{\"340\":1}}],[\"按照上述分析\",{\"1\":{\"301\":1}}],[\"按照上面分析的逻辑\",{\"1\":{\"273\":1}}],[\"按照上面的分析\",{\"1\":{\"236\":1}}],[\"按照\",{\"1\":{\"273\":1,\"404\":1,\"413\":1,\"440\":1,\"444\":1,\"528\":1,\"575\":1,\"896\":1,\"921\":1}}],[\"按照之前的分析\",{\"1\":{\"264\":1}}],[\"按照我们上一步的分析\",{\"1\":{\"263\":1}}],[\"按照指定的对齐方式进行定位\",{\"1\":{\"261\":1}}],[\"按照长度比例截取对应的\",{\"1\":{\"147\":1}}],[\"按照进度绘制贝塞尔曲线\",{\"1\":{\"147\":1}}],[\"按照贝塞尔曲线的定义\",{\"1\":{\"144\":1}}],[\"按照官方的定义\",{\"1\":{\"130\":1}}],[\"按照前述规则\",{\"1\":{\"93\":1}}],[\"描述类\",{\"1\":{\"565\":1}}],[\"描述参数\",{\"1\":{\"565\":1}}],[\"描述包\",{\"1\":{\"565\":1}}],[\"描述方法\",{\"1\":{\"565\":1}}],[\"描述局部变量\",{\"1\":{\"565\":1}}],[\"描述域\",{\"1\":{\"565\":1}}],[\"描述构造器\",{\"1\":{\"565\":1}}],[\"描述了\",{\"1\":{\"189\":1}}],[\"描述\",{\"1\":{\"189\":1}}],[\"很显然可以参照步骤1\",{\"1\":{\"912\":1}}],[\"很多时候我们用他来搭建静态博客\",{\"1\":{\"791\":1}}],[\"很多操作都能看到通过\",{\"1\":{\"243\":1}}],[\"很相似但又有不同\",{\"1\":{\"278\":1}}],[\"很明显\",{\"1\":{\"203\":1}}],[\"很简单的组件却花费了不少功夫\",{\"1\":{\"189\":1}}],[\"很遗憾在此之前\",{\"1\":{\"0\":1}}],[\"译\",{\"1\":{\"188\":1,\"598\":1}}],[\"记录左节点直到没有\",{\"1\":{\"665\":1}}],[\"记录图形操作的接口\",{\"1\":{\"334\":1}}],[\"记录下其坐标\",{\"1\":{\"897\":1}}],[\"记录下刚刚发起的请求\",{\"1\":{\"398\":1}}],[\"记录下来备用\",{\"1\":{\"114\":1}}],[\"记录下要滑动的数据\",{\"1\":{\"75\":1}}],[\"记得加上对应的端口\",{\"1\":{\"184\":1}}],[\"封装之后的\",{\"1\":{\"765\":1}}],[\"封装屏蔽掉滑动底层细节\",{\"1\":{\"422\":1}}],[\"封装好的动画\",{\"1\":{\"300\":1}}],[\"封装好的\",{\"1\":{\"300\":1}}],[\"封装后给别人\",{\"1\":{\"183\":1}}],[\"封装了客户端绑定服务端的一些方法\",{\"1\":{\"62\":1}}],[\"例子中的函数计算\",{\"1\":{\"614\":1}}],[\"例\",{\"1\":{\"182\":1}}],[\"例如颜色\",{\"1\":{\"153\":1}}],[\"例如\",{\"1\":{\"11\":1,\"105\":1,\"111\":1,\"122\":1,\"193\":1,\"196\":1,\"199\":1,\"629\":3,\"659\":2}}],[\"阅读笔记\",{\"0\":{\"181\":1},\"1\":{\"483\":1}}],[\"技术的拓展\",{\"1\":{\"772\":1}}],[\"技术\",{\"1\":{\"347\":1,\"791\":1}}],[\"技术之\",{\"1\":{\"180\":1}}],[\"技术类文章务必自己理解了\",{\"1\":{\"0\":1}}],[\"篇\",{\"1\":{\"180\":1,\"219\":1}}],[\"插值\",{\"1\":{\"358\":1}}],[\"插件化系列第\",{\"1\":{\"180\":1}}],[\"插入位置的父节点为根节点或父节点颜色为黑色\",{\"1\":{\"904\":1}}],[\"插入位置为根节点\",{\"1\":{\"904\":1}}],[\"插入指定节点都需要\",{\"1\":{\"881\":1}}],[\"插入排序>选择排序>冒泡排序\",{\"1\":{\"895\":1}}],[\"插入排序\",{\"0\":{\"898\":1},\"1\":{\"868\":1,\"875\":2,\"898\":1,\"921\":1}}],[\"插入排序法思想\",{\"1\":{\"534\":1}}],[\"插入排序法\",{\"0\":{\"534\":1}}],[\"插入操作思路是\",{\"1\":{\"858\":1}}],[\"插入边的时候需要注意\",{\"1\":{\"844\":1}}],[\"插入分为插入顶点和插入边\",{\"1\":{\"844\":1}}],[\"插入和删除的时间复杂度均为o\",{\"1\":{\"902\":1}}],[\"插入和删除\",{\"1\":{\"826\":1}}],[\"插入到右边的有序数组\",{\"1\":{\"898\":1}}],[\"插入到了\",{\"1\":{\"263\":1}}],[\"插入到\",{\"1\":{\"256\":1,\"262\":1,\"263\":1,\"264\":2,\"265\":1}}],[\"插入到线程池中\",{\"1\":{\"193\":1}}],[\"插入自己的逻辑\",{\"1\":{\"179\":1}}],[\"插入\",{\"0\":{\"844\":1,\"858\":1,\"904\":1},\"1\":{\"126\":1,\"265\":1,\"724\":1,\"904\":1}}],[\"做了双重锁定的单例处理\",{\"1\":{\"710\":1}}],[\"做了拦截\",{\"1\":{\"179\":1}}],[\"做一分析\",{\"1\":{\"422\":1}}],[\"做完了以上所有内容\",{\"1\":{\"215\":1}}],[\"做验证的手段有\",{\"1\":{\"66\":1}}],[\"里面传入了要展示的\",{\"1\":{\"279\":1}}],[\"里面的\",{\"1\":{\"246\":1}}],[\"里面为按钮添加监听事件\",{\"1\":{\"189\":1}}],[\"里面实现\",{\"1\":{\"179\":1}}],[\"里面定义的布局加载进来\",{\"1\":{\"117\":1}}],[\"欺骗系统对\",{\"1\":{\"179\":1}}],[\"欺骗系统调起\",{\"1\":{\"176\":1}}],[\"伪装为浏览器\",{\"1\":{\"731\":1}}],[\"伪装为\",{\"1\":{\"176\":1}}],[\"伪代码\",{\"1\":{\"26\":1}}],[\"样例代码\",{\"1\":{\"174\":1}}],[\"样式\",{\"1\":{\"167\":1,\"341\":1}}],[\"附带当前\",{\"1\":{\"759\":1}}],[\"附录\",{\"0\":{\"174\":1,\"180\":1,\"578\":1,\"861\":1}}],[\"附属在特定的父\",{\"1\":{\"76\":1}}],[\"向将当前顶点的所有可以访问的邻接点访问完毕\",{\"1\":{\"848\":1}}],[\"向右为\",{\"1\":{\"837\":1}}],[\"向编译器\",{\"1\":{\"564\":1}}],[\"向下遍历耗时\",{\"1\":{\"860\":1}}],[\"向下为正\",{\"1\":{\"440\":1}}],[\"向下滑动到初始位置\",{\"1\":{\"419\":1}}],[\"向下滑动\",{\"1\":{\"412\":2,\"418\":2}}],[\"向下滑动最小到初始位置\",{\"1\":{\"412\":2}}],[\"向下将这些指令转发至\",{\"1\":{\"244\":1}}],[\"向上为负\",{\"1\":{\"440\":1}}],[\"向上滑动\",{\"1\":{\"412\":2,\"418\":1}}],[\"向上滑动时\",{\"1\":{\"412\":1,\"419\":1}}],[\"向上遍历\",{\"1\":{\"265\":1}}],[\"向上承接来自\",{\"1\":{\"244\":1}}],[\"向\",{\"1\":{\"189\":2,\"243\":1,\"244\":1,\"247\":1,\"341\":1,\"732\":1}}],[\"向用户解释为什么需要改权限\",{\"1\":{\"173\":1}}],[\"向服务端发送消息\",{\"1\":{\"83\":1}}],[\"申请权限的结果在onrequestpermissionsresult\",{\"1\":{\"172\":1}}],[\"第n项\",{\"1\":{\"911\":1}}],[\"第n\",{\"1\":{\"911\":2}}],[\"第四步\",{\"1\":{\"673\":1}}],[\"第四级\",{\"1\":{\"264\":1}}],[\"第三方包\",{\"1\":{\"737\":1}}],[\"第三方类即是如此\",{\"1\":{\"203\":1}}],[\"第三步\",{\"1\":{\"672\":1,\"673\":1}}],[\"第\",{\"0\":{\"575\":1},\"1\":{\"542\":1,\"575\":1,\"911\":2}}],[\"第二版\",{\"1\":{\"865\":1,\"883\":1}}],[\"第二个本地\",{\"1\":{\"794\":1}}],[\"第二个参数\",{\"1\":{\"587\":1}}],[\"第二步\",{\"1\":{\"672\":1,\"673\":1}}],[\"第二种表示形式\",{\"1\":{\"534\":1}}],[\"第二种是传递信息\",{\"1\":{\"286\":1}}],[\"第二次序列化\",{\"1\":{\"587\":1}}],[\"第二次做的修改在序列化的时候并没有保存\",{\"1\":{\"587\":1}}],[\"第二次标记\",{\"1\":{\"475\":1}}],[\"第二次请求时为\",{\"1\":{\"173\":1}}],[\"第二次申请时返回\",{\"1\":{\"172\":1}}],[\"第一天\",{\"1\":{\"809\":1}}],[\"第一页内容并输出\",{\"1\":{\"736\":1}}],[\"第一步\",{\"1\":{\"672\":1,\"673\":1}}],[\"第一个本地\",{\"1\":{\"794\":1}}],[\"第一个为根节点\",{\"1\":{\"665\":1}}],[\"第一个异常赢得了胜利\",{\"1\":{\"640\":1}}],[\"第一个点\",{\"1\":{\"144\":1}}],[\"第一次进入会要求输入\",{\"1\":{\"671\":1}}],[\"第一次调用立马返回\",{\"1\":{\"638\":1}}],[\"第一次读的时候是\",{\"1\":{\"630\":1}}],[\"第一次序列化\",{\"1\":{\"587\":1}}],[\"第一次标记\",{\"1\":{\"475\":1}}],[\"第一次插入\",{\"1\":{\"305\":1}}],[\"第一次请求时为\",{\"1\":{\"173\":1}}],[\"第一次启动时长时间白屏\",{\"1\":{\"30\":1}}],[\"第一种是调用方法\",{\"1\":{\"286\":1}}],[\"第一种\",{\"1\":{\"6\":1}}],[\"半透明\",{\"1\":{\"167\":1}}],[\"背景透明\",{\"1\":{\"167\":1}}],[\"背景设置为透明\",{\"1\":{\"30\":1}}],[\"圆半径\",{\"1\":{\"342\":1}}],[\"圆角背景\",{\"1\":{\"167\":1}}],[\"圆圈外部\",{\"1\":{\"126\":1}}],[\"圆圈内部\",{\"1\":{\"126\":1}}],[\"持久性库在\",{\"1\":{\"786\":1}}],[\"持续时间ms\",{\"1\":{\"167\":1}}],[\"持有\",{\"1\":{\"71\":1,\"123\":2,\"398\":1}}],[\"持有的renderobject\",{\"1\":{\"265\":1}}],[\"持有的\",{\"1\":{\"52\":1,\"425\":1,\"426\":1,\"758\":1}}],[\"带权图的生成树中\",{\"1\":{\"849\":1}}],[\"带缓冲的通道\",{\"1\":{\"638\":1}}],[\"带有对象引用类型的所有实例域则都必须声明为\",{\"1\":{\"583\":1}}],[\"带着这个疑问\",{\"1\":{\"265\":1}}],[\"带进度更新的弹窗\",{\"1\":{\"166\":1}}],[\"带来的是不同层级之间耦合降低\",{\"1\":{\"127\":1}}],[\"树\",{\"1\":{\"832\":3,\"868\":1,\"869\":1}}],[\"树内部\",{\"1\":{\"160\":1}}],[\"树的状态变更可能被调用多次\",{\"1\":{\"160\":1}}],[\"树的状态变更\",{\"1\":{\"160\":1}}],[\"窗口焦点变化\",{\"1\":{\"160\":1}}],[\"模拟解密\",{\"1\":{\"584\":1}}],[\"模拟加密\",{\"1\":{\"584\":1}}],[\"模拟器访问localhost会默认访问手机的本地网址\",{\"1\":{\"184\":1}}],[\"模拟器访问电脑\",{\"0\":{\"184\":1}}],[\"模糊\",{\"1\":{\"167\":1}}],[\"模式下检查确保\",{\"1\":{\"424\":1}}],[\"模式下为空\",{\"1\":{\"295\":1}}],[\"模式展示图片\",{\"1\":{\"391\":2}}],[\"模式则会显示为灰底区域\",{\"1\":{\"292\":1}}],[\"模式\",{\"1\":{\"159\":1}}],[\"模块\",{\"1\":{\"105\":1}}],[\"父红\",{\"1\":{\"904\":2}}],[\"父节点为红色\",{\"1\":{\"904\":1}}],[\"父节点关键字大于该点\",{\"1\":{\"858\":1}}],[\"父节点\",{\"1\":{\"857\":1}}],[\"父节点频次为两个子节点之和\",{\"1\":{\"837\":1}}],[\"父协程被取消的时候\",{\"1\":{\"622\":1}}],[\"父类出参为\",{\"1\":{\"618\":1}}],[\"父类入参为\",{\"1\":{\"618\":1}}],[\"父类的变量值\",{\"1\":{\"585\":1}}],[\"父类的clinit\",{\"1\":{\"497\":1}}],[\"父类未继承\",{\"0\":{\"585\":1}}],[\"父类指定了\",{\"1\":{\"158\":1}}],[\"父加载器没有找到\",{\"1\":{\"485\":1}}],[\"父加载器为空则调用\",{\"1\":{\"485\":1}}],[\"父加载器不为空则调用父加载器的\",{\"1\":{\"485\":1}}],[\"父级空间不足时可以滚动\",{\"1\":{\"444\":1}}],[\"父容器没有限定\",{\"1\":{\"158\":1}}],[\"种实现\",{\"1\":{\"827\":1}}],[\"种方式\",{\"1\":{\"580\":1,\"748\":1,\"768\":1}}],[\"种方式绑定\",{\"1\":{\"112\":1}}],[\"种称为对一个类的主动引用\",{\"1\":{\"497\":1}}],[\"种状态\",{\"1\":{\"316\":1}}],[\"种情况\",{\"1\":{\"263\":1,\"836\":2}}],[\"种\",{\"1\":{\"239\":1,\"319\":1}}],[\"种常用方法\",{\"1\":{\"190\":1}}],[\"种可能值\",{\"1\":{\"158\":1}}],[\"低位相同概率高\",{\"1\":{\"500\":1}}],[\"低\",{\"1\":{\"158\":1}}],[\"低于\",{\"1\":{\"30\":1}}],[\"决定任务一次性还是重复的\",{\"1\":{\"787\":1}}],[\"决定于父容器的尺寸\",{\"1\":{\"158\":1}}],[\"决定\",{\"1\":{\"157\":1}}],[\"决定了算法的速度\",{\"1\":{\"927\":1}}],[\"决定了\",{\"1\":{\"157\":2}}],[\"几个相互邻接的顶点组成的线叫做路径\",{\"1\":{\"841\":1}}],[\"几\",{\"1\":{\"637\":1}}],[\"几乎相差\",{\"1\":{\"523\":1}}],[\"几乎所有的方法都是后期绑定的\",{\"1\":{\"490\":1}}],[\"几乎所有情况下都等同于\",{\"1\":{\"157\":1}}],[\"几秒钟\",{\"1\":{\"13\":1}}],[\"该节点是叶节点\",{\"1\":{\"859\":1}}],[\"该图的所有生成树都是最小生成树\",{\"1\":{\"849\":1}}],[\"该数组中不直接保存数据\",{\"1\":{\"827\":1}}],[\"该对象还没有构造完毕\",{\"1\":{\"604\":1}}],[\"该对象在方法区中\",{\"1\":{\"492\":1}}],[\"该值会在类发生改变时变化\",{\"1\":{\"582\":1}}],[\"该线程可以再次回到锁池竞争该对象的锁\",{\"1\":{\"561\":1}}],[\"该变量是一个定制的\",{\"1\":{\"525\":1}}],[\"该接口只有一个方法\",{\"1\":{\"214\":1}}],[\"该\",{\"1\":{\"160\":1,\"763\":1}}],[\"该类用来画出字母导航栏\",{\"1\":{\"153\":1}}],[\"该方法所有可以做的工作\",{\"1\":{\"475\":1}}],[\"该方法\",{\"1\":{\"475\":1}}],[\"该方法失效\",{\"1\":{\"179\":1}}],[\"该方法是用来从前台删除服务\",{\"1\":{\"43\":1}}],[\"该方法的作用是把当前服务设置为前台服务\",{\"1\":{\"43\":1}}],[\"故而采用另一种办法手动同步网站\",{\"1\":{\"812\":1}}],[\"故而文件结构如下\",{\"1\":{\"736\":1}}],[\"故而虽然volatile修饰的变量在所有线程可见\",{\"1\":{\"602\":1}}],[\"故而会调用bootstrap\",{\"1\":{\"485\":1}}],[\"故而面对大量高清大图加载的场景\",{\"1\":{\"376\":1}}],[\"故而也\",{\"1\":{\"376\":1}}],[\"故而\",{\"1\":{\"343\":2}}],[\"故而在其内部自定义了一个继承自\",{\"1\":{\"153\":1}}],[\"故而大多数软件多渠道打包配置如下\",{\"1\":{\"104\":1}}],[\"切割\",{\"1\":{\"664\":1}}],[\"切换目录\",{\"0\":{\"683\":1}}],[\"切换页面时\",{\"1\":{\"349\":1}}],[\"切换方式\",{\"1\":{\"346\":1}}],[\"切换到hexo分支\",{\"1\":{\"793\":1}}],[\"切换到指定的\",{\"1\":{\"756\":1}}],[\"切换到同一级的linux目录\",{\"1\":{\"683\":1}}],[\"切换到当前用户home路径下\",{\"1\":{\"683\":1}}],[\"切换到新建立的分支\",{\"1\":{\"674\":1}}],[\"切换到\",{\"1\":{\"344\":1}}],[\"切换时\",{\"1\":{\"343\":2}}],[\"切换退出当前\",{\"1\":{\"247\":1}}],[\"切换回来\",{\"1\":{\"247\":1}}],[\"切换动画设置为渐变效果\",{\"1\":{\"30\":1}}],[\"切断\",{\"1\":{\"148\":1}}],[\"总权重最小的称为最小生成树\",{\"1\":{\"849\":1}}],[\"总是被设置在由\",{\"1\":{\"640\":1}}],[\"总共遍历\",{\"1\":{\"532\":1}}],[\"总之\",{\"1\":{\"412\":1}}],[\"总的来说\",{\"1\":{\"360\":1}}],[\"总长度\",{\"1\":{\"147\":1}}],[\"总结一下\",{\"1\":{\"761\":1}}],[\"总结一下他们各自的角色\",{\"1\":{\"335\":1}}],[\"总结起来其结论就是\",{\"1\":{\"522\":1}}],[\"总结\",{\"0\":{\"28\":1,\"56\":1,\"127\":1,\"266\":1,\"277\":1,\"312\":1,\"327\":1,\"336\":1,\"353\":1,\"361\":1,\"377\":1,\"385\":1,\"400\":1,\"420\":1,\"431\":1,\"446\":1,\"529\":1,\"577\":1,\"597\":1,\"713\":1,\"762\":1,\"867\":1,\"928\":1}}],[\"动态加载机制的研究\",{\"1\":{\"824\":1}}],[\"动态支持时\",{\"1\":{\"497\":1}}],[\"动态绑定\",{\"1\":{\"490\":2}}],[\"动态链接将符号引用\",{\"1\":{\"496\":1}}],[\"动态链接\",{\"1\":{\"459\":1}}],[\"动态计算\",{\"1\":{\"417\":1}}],[\"动态调整数组的大小\",{\"1\":{\"92\":1}}],[\"动图\",{\"1\":{\"399\":1}}],[\"动图示意如下\",{\"1\":{\"142\":1}}],[\"动画组件\",{\"1\":{\"353\":1}}],[\"动画实际播放的过渡动画内容\",{\"1\":{\"352\":1}}],[\"动画实现的各种方式及其原理\",{\"1\":{\"336\":1}}],[\"动画执行时\",{\"1\":{\"347\":1}}],[\"动画执行的解释\",{\"1\":{\"341\":1}}],[\"动画后状态的变化而更改\",{\"1\":{\"347\":1}}],[\"动画开始时占位\",{\"1\":{\"346\":1}}],[\"动画开始\",{\"1\":{\"344\":1}}],[\"动画将要结束时\",{\"1\":{\"343\":1}}],[\"动画变到最大时\",{\"1\":{\"342\":1}}],[\"动画变到最小时\",{\"1\":{\"342\":1}}],[\"动画播放的时候在圆和正方形之间切换\",{\"1\":{\"342\":1}}],[\"动画播放完毕之后\",{\"1\":{\"341\":1}}],[\"动画之上做了一层由\",{\"1\":{\"342\":1}}],[\"动画只支持大小和位移变化\",{\"1\":{\"342\":1}}],[\"动画进行中的图解\",{\"1\":{\"341\":1}}],[\"动画正在运行中\",{\"1\":{\"341\":1}}],[\"动画正向\",{\"1\":{\"319\":1}}],[\"动画框架读取要跳转去的\",{\"1\":{\"341\":1}}],[\"动画框架会先隐藏\",{\"1\":{\"341\":1}}],[\"动画作用于\",{\"1\":{\"340\":1}}],[\"动画会作用的地方\",{\"1\":{\"340\":1}}],[\"动画默认只支持大小\",{\"1\":{\"340\":1}}],[\"动画不会生效\",{\"1\":{\"340\":1}}],[\"动画是基于\",{\"1\":{\"353\":1}}],[\"动画是如何实现这个效果的呢\",{\"1\":{\"341\":1}}],[\"动画是指可以在切换页面时自动跨页面实现\",{\"1\":{\"338\":1}}],[\"动画是否复杂到需要合成系统设置缓存\",{\"1\":{\"331\":1}}],[\"动画便是使用显式动画中的\",{\"1\":{\"336\":1}}],[\"动画的目标尺寸\",{\"1\":{\"350\":1}}],[\"动画的过渡组件动画渐变的方式\",{\"1\":{\"344\":1}}],[\"动画的变化而变化\",{\"1\":{\"343\":1}}],[\"动画的进度和方向\",{\"1\":{\"342\":1}}],[\"动画的简单使用代码基础上进行修改\",{\"1\":{\"342\":1}}],[\"动画的\",{\"1\":{\"340\":1,\"346\":1}}],[\"动画的使用比较简单\",{\"1\":{\"340\":1}}],[\"动画的内容是一个反复变大又缩小的蓝色小球\",{\"1\":{\"330\":1}}],[\"动画的开始结束动都由这些\",{\"1\":{\"309\":1}}],[\"动画\",{\"1\":{\"329\":1,\"336\":1,\"342\":1,\"347\":1,\"349\":3,\"351\":1,\"352\":1,\"368\":1}}],[\"动画中\",{\"1\":{\"327\":1,\"341\":1}}],[\"动画中也起到很重要的作用\",{\"1\":{\"323\":1}}],[\"动画被标记为\",{\"1\":{\"322\":1}}],[\"动画相关的\",{\"1\":{\"314\":1}}],[\"动画效果介绍\",{\"1\":{\"313\":1,\"328\":1}}],[\"动画时\",{\"1\":{\"312\":1}}],[\"动画都是类似实现\",{\"1\":{\"307\":1}}],[\"动画主要限定在\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"动画分析之\",{\"0\":{\"300\":1,\"314\":1,\"329\":1,\"338\":1,\"355\":1}}],[\"贝塞尔曲线介绍\",{\"0\":{\"142\":1}}],[\"贝塞尔曲线是用节点和控制点绘制的高精度曲线\",{\"1\":{\"141\":1}}],[\"扼要内容如图\",{\"1\":{\"140\":1}}],[\"桌面\",{\"1\":{\"140\":1}}],[\"孵化的第一个进程\",{\"1\":{\"140\":1}}],[\"管理任务\",{\"0\":{\"787\":1}}],[\"管理数据与页面的交互\",{\"0\":{\"785\":1}}],[\"管理要下载的链接\",{\"1\":{\"736\":1}}],[\"管理当前用户信息\",{\"0\":{\"691\":1}}],[\"管理员权限进入\",{\"1\":{\"678\":1}}],[\"管理图片的比较适用于\",{\"1\":{\"400\":1}}],[\"管理图片\",{\"1\":{\"395\":1}}],[\"管理图片内存的图片加载框架比如\",{\"1\":{\"376\":1}}],[\"管理缓存\",{\"1\":{\"376\":1}}],[\"管理的所有\",{\"1\":{\"341\":1}}],[\"管理着我们所说的\",{\"1\":{\"254\":1}}],[\"管理\",{\"1\":{\"254\":1,\"266\":1,\"341\":1,\"402\":1,\"422\":1,\"433\":1}}],[\"管理系统服务\",{\"1\":{\"140\":1}}],[\"管道指\",{\"1\":{\"638\":1}}],[\"管道\",{\"0\":{\"638\":1},\"1\":{\"137\":3}}],[\"初次之外\",{\"1\":{\"857\":1}}],[\"初次启动\",{\"1\":{\"31\":1}}],[\"初始运行方法\",{\"1\":{\"759\":2}}],[\"初始化各个变量\",{\"1\":{\"737\":1}}],[\"初始化各种自定义属性\",{\"1\":{\"153\":1}}],[\"初始化秘钥\",{\"1\":{\"557\":1}}],[\"初始化类的时候初始化静态变量\",{\"1\":{\"497\":1}}],[\"初始化有且只有以下五种情况\",{\"1\":{\"497\":1}}],[\"初始化为默认值\",{\"1\":{\"495\":1}}],[\"初始化时\",{\"1\":{\"497\":1}}],[\"初始化时可以为\",{\"1\":{\"319\":1}}],[\"初始化时候的入参configuration的值\",{\"1\":{\"258\":1}}],[\"初始化大小适配工具类\",{\"1\":{\"196\":1}}],[\"初始化\",{\"1\":{\"167\":1,\"195\":1,\"398\":1,\"490\":1,\"497\":2,\"557\":1,\"711\":1,\"751\":1}}],[\"初始化硬件参数等\",{\"1\":{\"140\":1}}],[\"袁辉辉博客\",{\"1\":{\"140\":1,\"498\":1}}],[\"引入协变\",{\"1\":{\"539\":1}}],[\"引入了分区存储\",{\"1\":{\"5\":1}}],[\"引擎会调用powerimageplugin\",{\"1\":{\"398\":1,\"399\":1}}],[\"引擎注册对应的方法\",{\"1\":{\"398\":1}}],[\"引擎持有的\",{\"1\":{\"388\":1}}],[\"引导\",{\"1\":{\"332\":1}}],[\"引导芯片从\",{\"1\":{\"140\":1}}],[\"引起\",{\"1\":{\"273\":2}}],[\"引用其他key的值\",{\"1\":{\"697\":1}}],[\"引用逃逸\",{\"1\":{\"604\":2,\"610\":1}}],[\"引用的是\",{\"1\":{\"612\":1}}],[\"引用的等级来划分\",{\"1\":{\"528\":1}}],[\"引用的对象\",{\"1\":{\"472\":1}}],[\"引用类型大小为\",{\"1\":{\"516\":1}}],[\"引用类\",{\"1\":{\"492\":1}}],[\"引用计数算法\",{\"0\":{\"474\":1}}],[\"引用\",{\"1\":{\"241\":1,\"474\":1,\"516\":1,\"521\":1,\"747\":1}}],[\"引用该插件\",{\"1\":{\"209\":1}}],[\"引用并将其发给\",{\"1\":{\"138\":1}}],[\"博主\",{\"1\":{\"138\":1,\"528\":1}}],[\"博客就搭建好了\",{\"1\":{\"813\":1}}],[\"博客就在本地搭建好了\",{\"1\":{\"806\":1}}],[\"博客的网址就是\",{\"1\":{\"813\":1}}],[\"博客的全过程\",{\"1\":{\"716\":1}}],[\"博客了\",{\"1\":{\"806\":1}}],[\"博客要同步的\",{\"1\":{\"718\":1}}],[\"博客文章源文件路径\",{\"1\":{\"718\":1}}],[\"博客输出路径\",{\"1\":{\"718\":1}}],[\"博客路径\",{\"1\":{\"718\":1}}],[\"博客园\",{\"1\":{\"162\":1,\"824\":1}}],[\"博客\",{\"1\":{\"43\":1,\"44\":1,\"105\":1,\"112\":1,\"113\":1,\"140\":1,\"250\":1,\"483\":1,\"498\":3,\"558\":1,\"816\":1,\"824\":1}}],[\"秘密\",{\"1\":{\"138\":1}}],[\"命令可以直接命令行操作\",{\"1\":{\"800\":1}}],[\"命令行输入如下命令\",{\"1\":{\"719\":1}}],[\"命令式\",{\"1\":{\"658\":1}}],[\"命令将自己注册成\",{\"1\":{\"138\":1}}],[\"命名为\",{\"1\":{\"809\":1}}],[\"命名关键词参数\",{\"1\":{\"726\":1}}],[\"命名规则\",{\"1\":{\"723\":1}}],[\"命名的类\",{\"1\":{\"329\":2}}],[\"命名的\",{\"1\":{\"311\":1}}],[\"命名的一众子类\",{\"1\":{\"308\":1}}],[\"命名\",{\"1\":{\"300\":2,\"314\":2,\"358\":1}}],[\"命名管道\",{\"1\":{\"137\":1}}],[\"比选择排序快一些\",{\"1\":{\"898\":1}}],[\"比冒泡快一倍\",{\"1\":{\"898\":1}}],[\"比快速排序更适于非随机数据\",{\"1\":{\"875\":1}}],[\"比子节点大的位置\",{\"1\":{\"859\":1}}],[\"比等待中的任务数pending\",{\"1\":{\"760\":1}}],[\"比生产慢\",{\"1\":{\"630\":1}}],[\"比构建慢的时候\",{\"1\":{\"630\":1}}],[\"比serializable麻烦\",{\"1\":{\"592\":1}}],[\"比特\",{\"1\":{\"516\":1}}],[\"比特对齐\",{\"1\":{\"516\":7}}],[\"比父级给的约束大时\",{\"1\":{\"440\":1}}],[\"比\",{\"1\":{\"309\":1,\"412\":1,\"439\":1,\"445\":1}}],[\"比较好实现\",{\"1\":{\"849\":1}}],[\"比较占地方\",{\"1\":{\"842\":1}}],[\"比较\",{\"0\":{\"828\":1},\"1\":{\"896\":1}}],[\"比较方便\",{\"1\":{\"813\":1}}],[\"比较简单\",{\"1\":{\"737\":1}}],[\"比较偏基础\",{\"1\":{\"612\":1}}],[\"比较并交换\",{\"1\":{\"607\":1}}],[\"比较耗费性能\",{\"1\":{\"428\":1,\"446\":1}}],[\"比较耗性能\",{\"1\":{\"334\":1,\"431\":1}}],[\"比较容易理解\",{\"1\":{\"276\":1}}],[\"比较特殊\",{\"1\":{\"138\":1,\"223\":1}}],[\"比如三角数组就是一个简单的递归\",{\"1\":{\"911\":1}}],[\"比如执行\",{\"1\":{\"768\":1}}],[\"比如手机\",{\"1\":{\"765\":1}}],[\"比如isolate\",{\"1\":{\"759\":1}}],[\"比如你要添加一个文件\",{\"1\":{\"672\":1}}],[\"比如说\",{\"1\":{\"640\":1}}],[\"比如非连续判断\",{\"1\":{\"522\":1}}],[\"比如非法内存访问\",{\"1\":{\"137\":1}}],[\"比如一些native方法或者artificial\",{\"1\":{\"767\":1}}],[\"比如一直位于屏幕下方的版权信息\",{\"1\":{\"445\":1}}],[\"比如一个\",{\"1\":{\"427\":1}}],[\"比如竖屏变为横屏等\",{\"1\":{\"442\":1}}],[\"比如在\",{\"1\":{\"439\":1}}],[\"比如是否可以滚动或弹性滚动等\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"比如external\",{\"1\":{\"398\":1}}],[\"比如network\",{\"1\":{\"398\":1}}],[\"比如glide\",{\"1\":{\"376\":1}}],[\"比如网络图片没有磁盘缓存\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"比如网络请求\",{\"1\":{\"122\":1}}],[\"比如从页面\",{\"1\":{\"344\":1}}],[\"比如监听进度从而实现旋转\",{\"1\":{\"342\":1}}],[\"比如暂停动画\",{\"1\":{\"302\":1}}],[\"比如异步的方法\",{\"1\":{\"297\":1}}],[\"比如输出到控制台\",{\"1\":{\"296\":1}}],[\"比如本例中的\",{\"1\":{\"256\":1}}],[\"比如appcomponent类\",{\"1\":{\"217\":1}}],[\"比如请求网络\",{\"1\":{\"126\":1}}],[\"比如请求数据库\",{\"1\":{\"126\":1}}],[\"比如数据库\",{\"1\":{\"126\":1}}],[\"比如过滤新闻列表\",{\"1\":{\"126\":1}}],[\"比如格式化日期等\",{\"1\":{\"126\":1}}],[\"比如登录逻辑\",{\"1\":{\"126\":1}}],[\"比如下载数据\",{\"1\":{\"125\":1}}],[\"比如用户点击页面event之后\",{\"1\":{\"124\":1}}],[\"比如调用\",{\"1\":{\"123\":1,\"766\":1}}],[\"比如\",{\"1\":{\"122\":1,\"125\":1,\"126\":1,\"144\":1,\"303\":1,\"314\":2,\"329\":1,\"334\":1,\"358\":1,\"365\":1,\"376\":1,\"398\":1,\"399\":1,\"402\":1,\"403\":1,\"404\":1,\"413\":1,\"419\":1,\"422\":3,\"433\":1,\"436\":1,\"440\":1,\"495\":1,\"575\":2,\"630\":1,\"662\":1,\"744\":1,\"759\":1,\"765\":1,\"768\":1}}],[\"比如某一行\",{\"1\":{\"33\":1}}],[\"逻辑语句\",{\"0\":{\"725\":1}}],[\"逻辑\",{\"1\":{\"138\":1,\"418\":2}}],[\"理论和实践\",{\"1\":{\"542\":1}}],[\"理论上的\",{\"1\":{\"138\":1}}],[\"理解及应用场景\",{\"1\":{\"530\":1}}],[\"理顺了才写\",{\"1\":{\"0\":1}}],[\"身份\",{\"1\":{\"138\":1}}],[\"效率\",{\"0\":{\"874\":1}}],[\"效率会变得很差\",{\"1\":{\"826\":1}}],[\"效率最高的\",{\"1\":{\"137\":1}}],[\"效果之前\",{\"1\":{\"439\":1}}],[\"效果的\",{\"1\":{\"418\":1}}],[\"效果\",{\"1\":{\"402\":1,\"418\":1,\"422\":1,\"433\":1,\"444\":1}}],[\"效果和expanded一致\",{\"1\":{\"276\":1}}],[\"效果不错\",{\"1\":{\"114\":1}}],[\"效果预览\",{\"0\":{\"109\":1,\"119\":1},\"1\":{\"119\":1}}],[\"缓冲发射项\",{\"1\":{\"659\":1}}],[\"缓冲允许发送者在被挂起前发送多个元素\",{\"1\":{\"638\":1}}],[\"缓冲区大小\",{\"1\":{\"638\":1}}],[\"缓冲小\",{\"1\":{\"137\":1}}],[\"缓存区已满或不存在时调用方会被挂起\",{\"1\":{\"636\":1}}],[\"缓存区大小比较有限\",{\"1\":{\"137\":1}}],[\"缓存的功能\",{\"1\":{\"385\":1}}],[\"缓存的图片状态\",{\"1\":{\"375\":1}}],[\"缓存的图片\",{\"1\":{\"375\":1}}],[\"缓存\",{\"1\":{\"384\":1,\"385\":2}}],[\"缓存图片原始数据\",{\"1\":{\"384\":1}}],[\"缓存不存在或者读取失败\",{\"1\":{\"383\":1}}],[\"缓存到\",{\"1\":{\"383\":1}}],[\"缓存网络图片\",{\"1\":{\"380\":1}}],[\"缓存有关的类\",{\"1\":{\"375\":1}}],[\"次就可以完成排序\",{\"1\":{\"897\":1}}],[\"次后\",{\"1\":{\"896\":1}}],[\"次减少到了\",{\"1\":{\"857\":1}}],[\"次数分别为\",{\"1\":{\"744\":1}}],[\"次方\",{\"1\":{\"501\":1}}],[\"次\",{\"1\":{\"137\":4,\"138\":1,\"533\":1,\"534\":1,\"857\":1}}],[\"杀死某个进程等\",{\"1\":{\"137\":1}}],[\"常见应用\",{\"0\":{\"666\":1}}],[\"常见的有\",{\"1\":{\"422\":1,\"433\":1}}],[\"常见的有singlechildscrollview\",{\"1\":{\"402\":1}}],[\"常见的用法是传入animationcontroller\",{\"1\":{\"359\":1}}],[\"常规的作业和监督作业之间的另一个重要区别是异常处理\",{\"1\":{\"644\":1}}],[\"常量等等\",{\"1\":{\"753\":1}}],[\"常量池中的所有字面量几乎都是通过constant\",{\"1\":{\"519\":1}}],[\"常量\",{\"1\":{\"461\":1,\"723\":1}}],[\"常用数组实现\",{\"1\":{\"856\":1}}],[\"常用\",{\"1\":{\"693\":1,\"809\":1}}],[\"常用目录\",{\"0\":{\"686\":1}}],[\"常用作服务器缓存\",{\"1\":{\"479\":1}}],[\"常用方法\",{\"1\":{\"190\":1}}],[\"常用的可执行文件\",{\"1\":{\"686\":1}}],[\"常用的通信方式\",{\"1\":{\"140\":1}}],[\"常用的存储键值对的数据结构是hashmap\",{\"1\":{\"85\":1}}],[\"常作为一种锁机制\",{\"1\":{\"137\":1}}],[\"信号是进程间通信中唯一的异步通信机制\",{\"1\":{\"137\":1}}],[\"信号变量\",{\"1\":{\"137\":1}}],[\"信号\",{\"1\":{\"137\":2}}],[\"信号量是为了保护进程共享资源在同一时刻只能被一个进程访问\",{\"1\":{\"137\":1}}],[\"信号量\",{\"1\":{\"137\":2}}],[\"信息\",{\"0\":{\"821\":1},\"1\":{\"516\":1,\"817\":1}}],[\"信息复制两次\",{\"1\":{\"137\":1}}],[\"信息了\",{\"1\":{\"104\":1}}],[\"套接字\",{\"1\":{\"137\":2}}],[\"额外的\",{\"1\":{\"137\":1}}],[\"优化为\",{\"1\":{\"768\":1}}],[\"优化方案优雅的实现\",{\"1\":{\"31\":1}}],[\"优缺点\",{\"0\":{\"588\":1,\"592\":1,\"596\":1},\"1\":{\"471\":1,\"472\":1,\"473\":1,\"474\":1}}],[\"优缺点参考\",{\"1\":{\"137\":1}}],[\"优劣对比\",{\"0\":{\"419\":1,\"442\":1}}],[\"优先级低的在队尾\",{\"1\":{\"873\":1}}],[\"优先级队列\",{\"0\":{\"873\":1,\"889\":1},\"1\":{\"868\":1,\"870\":1}}],[\"优先考虑二叉树\",{\"1\":{\"869\":1}}],[\"优先将一个节点的所有邻接点依次访问\",{\"1\":{\"848\":1}}],[\"优先处理\",{\"1\":{\"745\":1}}],[\"优先消息\",{\"1\":{\"745\":1}}],[\"优先选择\",{\"1\":{\"400\":1}}],[\"优先从缓存中读取\",{\"1\":{\"383\":1}}],[\"优先从\",{\"1\":{\"374\":1}}],[\"优先使用\",{\"1\":{\"351\":1,\"606\":1}}],[\"优先以\",{\"1\":{\"335\":1}}],[\"优先取\",{\"1\":{\"331\":1}}],[\"优先执行\",{\"1\":{\"221\":1}}],[\"函数计算得到的下标中\",{\"1\":{\"826\":1}}],[\"函数体跟在一个\",{\"1\":{\"663\":1}}],[\"函数将buffer\",{\"1\":{\"629\":1}}],[\"函数可以结合reified实现实体化类型参数\",{\"1\":{\"621\":1}}],[\"函数需要添加\",{\"1\":{\"621\":1}}],[\"函数非局部返回\",{\"1\":{\"621\":1}}],[\"函数\",{\"1\":{\"136\":1,\"664\":1}}],[\"函数从上一级接受数据\",{\"1\":{\"126\":1}}],[\"普通消息\",{\"1\":{\"745\":1}}],[\"普通用户需要验证权限\",{\"1\":{\"689\":1}}],[\"普通写法\",{\"1\":{\"662\":1}}],[\"普通的取消\",{\"1\":{\"641\":1}}],[\"普通的同步方法\",{\"1\":{\"239\":1}}],[\"普通递归和尾递归都存在栈溢出风险\",{\"1\":{\"614\":1}}],[\"普通递归\",{\"1\":{\"614\":1}}],[\"普通变量则需要等线程操作完毕\",{\"1\":{\"602\":1}}],[\"普通单例\",{\"0\":{\"545\":1}}],[\"普通图片\",{\"1\":{\"399\":1}}],[\"普通开发者不可见\",{\"1\":{\"193\":1}}],[\"普通\",{\"1\":{\"158\":1}}],[\"普通文件映射就是将一个文件与一块内存建立起映射关系\",{\"1\":{\"136\":1}}],[\"普通类等类管理数据\",{\"1\":{\"126\":1}}],[\"映射到相应的一组连续的物理页面\",{\"1\":{\"136\":1}}],[\"堆栈\",{\"1\":{\"892\":1}}],[\"堆排序和快速排序时间复杂度都是\",{\"1\":{\"860\":1}}],[\"堆排序\",{\"0\":{\"860\":1},\"1\":{\"868\":1,\"875\":3}}],[\"堆可以进行插入\",{\"1\":{\"857\":1}}],[\"堆是完全二叉树\",{\"1\":{\"856\":1}}],[\"堆是一种特殊的二叉树\",{\"1\":{\"855\":1}}],[\"堆中\",{\"1\":{\"492\":1}}],[\"堆溢出\",{\"0\":{\"464\":1}}],[\"堆\",{\"0\":{\"854\":1},\"1\":{\"136\":1,\"457\":1,\"870\":1}}],[\"非叶子节点\",{\"1\":{\"859\":1}}],[\"非受限\",{\"1\":{\"624\":1}}],[\"非局部返回\",{\"1\":{\"621\":1}}],[\"非阻塞同步\",{\"0\":{\"607\":1}}],[\"非静态\",{\"1\":{\"516\":1}}],[\"非引用类\",{\"1\":{\"492\":1}}],[\"非数组类\",{\"1\":{\"492\":1}}],[\"非\",{\"1\":{\"359\":1,\"455\":1}}],[\"非商业转载请注明出处\",{\"1\":{\"136\":1,\"286\":1}}],[\"非必须\",{\"1\":{\"105\":1,\"167\":1,\"251\":1}}],[\"商业转载请联系作者获得授权\",{\"1\":{\"136\":1,\"286\":1}}],[\"著作权归作者所有\",{\"1\":{\"136\":1,\"286\":1}}],[\"掘金\",{\"1\":{\"136\":1,\"240\":2,\"286\":1}}],[\"消费者\",{\"1\":{\"617\":1}}],[\"消息并压入\",{\"1\":{\"745\":1}}],[\"消息\",{\"1\":{\"238\":1,\"744\":1,\"745\":2}}],[\"消息机制用于同进程的线程间\",{\"1\":{\"140\":1}}],[\"消息队列\",{\"1\":{\"135\":1,\"137\":2}}],[\"消耗的内容\",{\"1\":{\"418\":1}}],[\"消耗的那一部分内容\",{\"1\":{\"418\":1}}],[\"消耗\",{\"1\":{\"137\":1,\"418\":2,\"419\":1}}],[\"消耗该事件\",{\"1\":{\"26\":1}}],[\"含义\",{\"1\":{\"132\":1,\"566\":1}}],[\"硬件加速\",{\"1\":{\"131\":1,\"133\":1}}],[\"硬件加速的本质是把一部分\",{\"1\":{\"131\":1}}],[\"宽\",{\"1\":{\"159\":1}}],[\"宽高\",{\"0\":{\"163\":1},\"1\":{\"130\":1,\"398\":1}}],[\"宽度rdp\",{\"1\":{\"196\":1}}],[\"宽度wpx\",{\"1\":{\"196\":1}}],[\"宽度等\",{\"1\":{\"189\":1}}],[\"宽度分别为父容器的\",{\"1\":{\"182\":1}}],[\"宽度是物理条件无法更改\",{\"1\":{\"100\":1}}],[\"宽度一致\",{\"1\":{\"100\":1}}],[\"宽度为\",{\"1\":{\"100\":2}}],[\"宽度\",{\"1\":{\"100\":4,\"196\":2}}],[\"共有\",{\"1\":{\"316\":1}}],[\"共享\",{\"1\":{\"758\":1}}],[\"共享同一份代码\",{\"1\":{\"751\":1}}],[\"共享同一份代码的\",{\"1\":{\"742\":2}}],[\"共享数据值存在于同一个线程中\",{\"1\":{\"608\":1}}],[\"共享缓冲区直接付附加到进程虚拟地址空间\",{\"1\":{\"137\":1}}],[\"共享内存空间\",{\"1\":{\"140\":1}}],[\"共享内存\",{\"1\":{\"137\":2}}],[\"共享内存和\",{\"1\":{\"135\":1}}],[\"共享库以及栈\",{\"1\":{\"136\":1}}],[\"共\",{\"1\":{\"130\":1}}],[\"卷起来了~\",{\"1\":{\"128\":1}}],[\"干净的架构初学者指南\",{\"1\":{\"128\":1}}],[\"架构的简单示意图\",{\"1\":{\"781\":1}}],[\"架构中各部分的作用\",{\"1\":{\"781\":1}}],[\"架构图\",{\"1\":{\"388\":1}}],[\"架构\",{\"0\":{\"780\":1},\"1\":{\"128\":1}}],[\"架构指南\",{\"1\":{\"128\":1}}],[\"架构模式一览\",{\"0\":{\"121\":1}}],[\"抽象越深\",{\"1\":{\"127\":1}}],[\"抽象类\",{\"1\":{\"123\":1}}],[\"构建器中注册它没有任何效果\",{\"1\":{\"640\":1}}],[\"构建器中的代码直到流被收集的时候才运行\",{\"1\":{\"629\":1}}],[\"构建器生产了\",{\"1\":{\"630\":1}}],[\"构建器定义了一个发射固定值集的流\",{\"1\":{\"629\":1}}],[\"构建\",{\"1\":{\"126\":1,\"128\":1}}],[\"构造方法指定的\",{\"1\":{\"367\":1}}],[\"构造方法\",{\"0\":{\"319\":1}}],[\"构造方法会获取到mlooper和mqueue以及mcallback\",{\"1\":{\"52\":1}}],[\"构造函数之外\",{\"1\":{\"390\":1}}],[\"构造函数中只有一个必传项imageprovider\",{\"1\":{\"365\":1}}],[\"构造函数\",{\"1\":{\"56\":1}}],[\"屏蔽了底层的实现\",{\"1\":{\"126\":1}}],[\"屏幕等\",{\"1\":{\"701\":2}}],[\"屏幕帧刷新\",{\"1\":{\"314\":1}}],[\"屏幕点击\",{\"1\":{\"230\":1}}],[\"屏幕刷新等\",{\"1\":{\"239\":1}}],[\"屏幕刷新\",{\"1\":{\"221\":2,\"336\":1}}],[\"屏幕宽度总\",{\"1\":{\"196\":1}}],[\"屏幕宽度为\",{\"1\":{\"100\":2}}],[\"屏幕实际像素宽度\",{\"1\":{\"196\":1}}],[\"屏幕的实际水平\",{\"1\":{\"196\":1}}],[\"屏幕的总\",{\"1\":{\"100\":4,\"196\":4}}],[\"屏幕适配方案\",{\"1\":{\"196\":2}}],[\"屏幕适配方式\",{\"1\":{\"102\":1,\"197\":1}}],[\"屏幕适配\",{\"0\":{\"194\":1,\"195\":1}}],[\"屏幕总\",{\"1\":{\"100\":2}}],[\"屏幕\",{\"1\":{\"100\":1}}],[\"屏幕尺寸\",{\"1\":{\"100\":1}}],[\"屏幕每平方英寸有多少像素\",{\"1\":{\"100\":1}}],[\"刷新页面\",{\"1\":{\"254\":1}}],[\"刷新等事件也在此类\",{\"1\":{\"230\":1}}],[\"刷新\",{\"1\":{\"126\":1,\"189\":1,\"285\":1}}],[\"看知乎\",{\"1\":{\"779\":1}}],[\"看这篇就够了\",{\"1\":{\"598\":1}}],[\"看这里\",{\"1\":{\"583\":1}}],[\"看源码可以知道\",{\"1\":{\"591\":1}}],[\"看起来很完美\",{\"1\":{\"547\":1}}],[\"看起来好像是前一个页面的\",{\"1\":{\"340\":1}}],[\"看起来是从起点慢慢绘制到终点去的\",{\"1\":{\"147\":1}}],[\"看一下具体的实现\",{\"1\":{\"398\":1}}],[\"看一下实际生成的\",{\"1\":{\"251\":1}}],[\"看一下dart\",{\"1\":{\"248\":1}}],[\"看一下portmap\",{\"1\":{\"247\":1}}],[\"看一个\",{\"1\":{\"126\":1}}],[\"看到\",{\"1\":{\"83\":1}}],[\"块中启动协程\",{\"1\":{\"126\":1}}],[\"块或构造函数中启动异步操作\",{\"1\":{\"126\":1}}],[\"状态\",{\"1\":{\"645\":1,\"748\":1}}],[\"状态便不会再更改\",{\"1\":{\"280\":1}}],[\"状态字段的\",{\"1\":{\"126\":1}}],[\"状态字段时\",{\"1\":{\"126\":1}}],[\"状态时\",{\"1\":{\"126\":1}}],[\"状态栏等\",{\"1\":{\"76\":1}}],[\"警告⚠️\",{\"1\":{\"173\":1}}],[\"警告\",{\"1\":{\"126\":1}}],[\"驱动此隐式动画的\",{\"1\":{\"302\":1}}],[\"驱动等等\",{\"1\":{\"140\":1}}],[\"驱动程序调用\",{\"1\":{\"138\":1}}],[\"驱动的\",{\"1\":{\"138\":1}}],[\"驱动会为这个\",{\"1\":{\"138\":1}}],[\"驱动会根据发送数据包的大小\",{\"1\":{\"138\":1}}],[\"驱动会自动为它创建\",{\"1\":{\"138\":1}}],[\"驱动\",{\"1\":{\"126\":1,\"138\":2}}],[\"控件的\",{\"1\":{\"340\":1}}],[\"控件的setstate\",{\"1\":{\"282\":1}}],[\"控件中调用\",{\"1\":{\"282\":1}}],[\"控件在从\",{\"1\":{\"341\":1}}],[\"控件在屏幕中应该展示的像素大小\",{\"1\":{\"196\":1}}],[\"控件在\",{\"1\":{\"196\":1}}],[\"控件在设计稿中的大小n\",{\"1\":{\"196\":1}}],[\"控件设计稿中的宽度\",{\"1\":{\"196\":1}}],[\"控件绑定处理器\",{\"1\":{\"189\":1}}],[\"控件\",{\"1\":{\"167\":1,\"340\":1}}],[\"控件组\",{\"0\":{\"114\":1}}],[\"控制界面切换\",{\"0\":{\"783\":1}}],[\"控制动画的开始和结束\",{\"1\":{\"312\":1}}],[\"控制\",{\"1\":{\"126\":1,\"312\":1,\"331\":1}}],[\"强大功能的同时\",{\"1\":{\"786\":1}}],[\"强制使用\",{\"1\":{\"737\":1}}],[\"强软弱虚\",{\"1\":{\"528\":1}}],[\"强引用\",{\"0\":{\"478\":1}}],[\"强关联\",{\"1\":{\"126\":1}}],[\"强调单一数据源\",{\"1\":{\"125\":1}}],[\"繁重\",{\"1\":{\"126\":1}}],[\"大法\",{\"1\":{\"780\":1}}],[\"大多数应用如今已经不能正常使用了\",{\"1\":{\"775\":1}}],[\"大多数情况下会减少消耗\",{\"1\":{\"609\":1}}],[\"大神致敬\",{\"1\":{\"732\":1}}],[\"大部分内容都参考\",{\"1\":{\"675\":1}}],[\"大王叫我来巡山的回答\",{\"1\":{\"562\":1}}],[\"大对象\",{\"1\":{\"457\":1}}],[\"大\",{\"1\":{\"418\":1,\"457\":1,\"878\":1,\"895\":1,\"910\":1,\"913\":2,\"918\":1,\"921\":1}}],[\"大可能是由于\",{\"1\":{\"412\":1}}],[\"大图片会出现内存峰值偏高\",{\"1\":{\"397\":1}}],[\"大而全\",{\"1\":{\"385\":1}}],[\"大于等于\",{\"1\":{\"412\":2}}],[\"大于\",{\"1\":{\"343\":1,\"418\":1,\"445\":1}}],[\"大体分为\",{\"1\":{\"332\":1}}],[\"大体可以分为三大类\",{\"1\":{\"329\":1}}],[\"大体的逻辑示意如下\",{\"1\":{\"125\":1}}],[\"大类\",{\"1\":{\"302\":1,\"309\":1}}],[\"大袋子\",{\"1\":{\"203\":1}}],[\"大小可以预测时使用\",{\"1\":{\"869\":1}}],[\"大小的数组保存\",{\"1\":{\"842\":1}}],[\"大小的内容\",{\"1\":{\"243\":1}}],[\"大小的内存\",{\"1\":{\"137\":1}}],[\"大小由\",{\"1\":{\"428\":1}}],[\"大小由父级指定\",{\"1\":{\"427\":1}}],[\"大小等属性返回\",{\"1\":{\"398\":1}}],[\"大小等于内存总量\",{\"1\":{\"136\":1}}],[\"大小为\",{\"1\":{\"343\":2}}],[\"大小为maxszie\",{\"1\":{\"276\":1}}],[\"大小之间的缩放系数\",{\"1\":{\"196\":1}}],[\"大小rdp\",{\"1\":{\"196\":1}}],[\"大小\",{\"1\":{\"158\":1,\"196\":1,\"353\":2,\"439\":1,\"516\":4,\"517\":1}}],[\"大小是\",{\"1\":{\"92\":1}}],[\"⚠️\",{\"1\":{\"125\":1,\"126\":1}}],[\"探究\",{\"1\":{\"124\":1}}],[\"探究平常用法背后的实现原理\",{\"1\":{\"0\":1}}],[\"降低了内存泄露风险\",{\"1\":{\"124\":1}}],[\"便会自动帮我们创建并更新静态网页\",{\"1\":{\"795\":1}}],[\"便会调用该\",{\"1\":{\"189\":1}}],[\"便和这个\",{\"1\":{\"763\":1}}],[\"便可以将interface中方法的实现委托给类a的对象a\",{\"1\":{\"619\":1}}],[\"便可以开始执行\",{\"1\":{\"351\":1}}],[\"便可以根据其值修改自身属性\",{\"1\":{\"315\":1}}],[\"便可以根据此值修改\",{\"1\":{\"314\":1}}],[\"便可以自动从\",{\"1\":{\"300\":1}}],[\"便可以打包不同渠道的\",{\"1\":{\"104\":1}}],[\"便于调试\",{\"1\":{\"126\":1}}],[\"便于测试\",{\"1\":{\"124\":1}}],[\"暴露给\",{\"1\":{\"126\":1}}],[\"暴露\",{\"1\":{\"126\":1}}],[\"暴露出来的数据\",{\"1\":{\"125\":1}}],[\"暴露出来的数据并更新\",{\"1\":{\"124\":1}}],[\"暴露访问数据的接口\",{\"1\":{\"123\":1}}],[\"存放皮肤的目录\",{\"1\":{\"807\":1}}],[\"存放博客正文内容\",{\"1\":{\"807\":1}}],[\"存放类信息\",{\"1\":{\"461\":1}}],[\"存放基本数据和对象的引用\",{\"1\":{\"458\":1}}],[\"存放所有对象实例\",{\"1\":{\"457\":1}}],[\"存活时间长的老年对象\",{\"1\":{\"457\":1}}],[\"存在的问题\",{\"1\":{\"145\":1}}],[\"存在一定的耦合\",{\"1\":{\"123\":1}}],[\"存储达到容量\",{\"1\":{\"827\":1}}],[\"存储方式\",{\"0\":{\"827\":1,\"842\":1}}],[\"存储在\",{\"1\":{\"179\":1}}],[\"存储了\",{\"1\":{\"126\":1}}],[\"存储\",{\"1\":{\"92\":1,\"806\":1}}],[\"存储所有\",{\"1\":{\"92\":1}}],[\"存储单个数据的成本小\",{\"1\":{\"86\":1}}],[\"访问并标记\",{\"1\":{\"847\":1}}],[\"访问一个邻接的未访问顶点\",{\"1\":{\"847\":1}}],[\"访问这个节点\",{\"1\":{\"834\":1}}],[\"访问对应一个\",{\"1\":{\"708\":1}}],[\"访问时\",{\"1\":{\"546\":1}}],[\"访问本地资源\",{\"1\":{\"290\":1}}],[\"访问资源时对信号量进行等待操作\",{\"1\":{\"137\":1}}],[\"访问\",{\"1\":{\"123\":1,\"247\":1}}],[\"访问外部存储空间中的媒体文件除了需要read\",{\"1\":{\"5\":1}}],[\"崩溃\",{\"1\":{\"123\":1}}],[\"使其成为当前顶点\",{\"1\":{\"848\":1}}],[\"使所有节点的关键值按照升序被访问\",{\"1\":{\"834\":1}}],[\"使您可以更轻松地开发出色的\",{\"1\":{\"781\":1}}],[\"使代码更加简洁\",{\"1\":{\"663\":1}}],[\"使之看起来从一种状态渐变为另外一种状态\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"使之启动\",{\"1\":{\"179\":1}}],[\"使当前mainapplication继承自hasactivityinjector\",{\"1\":{\"214\":1}}],[\"使得编译器在编译时将递归转化为迭代\",{\"1\":{\"614\":1}}],[\"使得方法使用的其他类的更改不太可能破坏这个代码\",{\"1\":{\"496\":1}}],[\"使得在\",{\"1\":{\"282\":1,\"420\":1}}],[\"使得\",{\"1\":{\"123\":1,\"376\":1,\"405\":1,\"769\":1}}],[\"使用前先初始化\",{\"1\":{\"927\":1}}],[\"使用下标来访问保存的元素\",{\"1\":{\"879\":1}}],[\"使用在\",{\"1\":{\"784\":1}}],[\"使用在osthread\",{\"1\":{\"761\":1}}],[\"使用中参数的传递\",{\"1\":{\"783\":1,\"788\":1}}],[\"使用内联缓存\",{\"1\":{\"767\":1}}],[\"使用封装过的\",{\"1\":{\"765\":1}}],[\"使用已有的\",{\"1\":{\"760\":1}}],[\"使用isolate\",{\"1\":{\"757\":1}}],[\"使用imageprovider\",{\"1\":{\"372\":1}}],[\"使用全局的initialize\",{\"1\":{\"751\":1}}],[\"使用createwithinexistingisolategroup创建\",{\"1\":{\"751\":1}}],[\"使用不同\",{\"1\":{\"744\":1}}],[\"使用同一个\",{\"1\":{\"744\":1}}],[\"使用时直接\",{\"1\":{\"727\":1}}],[\"使用时\",{\"1\":{\"727\":1}}],[\"使用时需要注意\",{\"1\":{\"308\":1}}],[\"使用其他文件的函数\",{\"0\":{\"727\":1}}],[\"使用方法\",{\"0\":{\"717\":1,\"743\":1}}],[\"使用方法总结\",{\"1\":{\"675\":1}}],[\"使用起来更加连贯\",{\"1\":{\"708\":1}}],[\"使用起来也更加简洁\",{\"1\":{\"662\":1}}],[\"使用起来也比较方便\",{\"1\":{\"442\":1}}],[\"使用bz2\",{\"1\":{\"695\":1}}],[\"使用build\",{\"1\":{\"70\":1}}],[\"使用命令\",{\"1\":{\"672\":4,\"673\":1}}],[\"使用androidstudio同步工程到github\",{\"0\":{\"668\":1}}],[\"使用代码表示如下\",{\"1\":{\"666\":1}}],[\"使用线程安全的数据结构\",{\"1\":{\"645\":1}}],[\"使用父类泛型的对象可以赋值给使用子类泛型的对象\",{\"1\":{\"617\":1}}],[\"使用子类泛型的对象可以赋值给使用父类泛型的对象\",{\"1\":{\"617\":1}}],[\"使用这种方法可以加密\",{\"1\":{\"584\":1}}],[\"使用serialversionuid标记当前serializable的版本\",{\"1\":{\"582\":1}}],[\"使用sqflite\",{\"1\":{\"376\":1}}],[\"使用初始化之后的变量\",{\"1\":{\"570\":1}}],[\"使用了过时的类或方法时的警告\",{\"1\":{\"566\":1}}],[\"使用了自己的\",{\"1\":{\"415\":1}}],[\"使用注解\",{\"0\":{\"570\":1},\"1\":{\"564\":1,\"570\":1}}],[\"使用threadlocal时会发生内存泄漏的前提条件\",{\"1\":{\"528\":1}}],[\"使用与解析\",{\"0\":{\"527\":1}}],[\"使用系统\",{\"1\":{\"492\":1}}],[\"使用简单\",{\"1\":{\"442\":1,\"446\":1}}],[\"使用新的\",{\"1\":{\"440\":1}}],[\"使用示例\",{\"0\":{\"430\":1}}],[\"使用我们创建好的\",{\"1\":{\"423\":1}}],[\"使用hashmap移除数据时\",{\"1\":{\"503\":1}}],[\"使用hashmap获取数据时\",{\"1\":{\"502\":1}}],[\"使用hashmap保存数据时\",{\"1\":{\"501\":1}}],[\"使用hash\",{\"1\":{\"501\":1}}],[\"使用headersliverbuilder提供\",{\"1\":{\"402\":1}}],[\"使用hookapplication\",{\"1\":{\"178\":1}}],[\"使用返回的图片信息\",{\"1\":{\"398\":1}}],[\"使用powerimageloader\",{\"1\":{\"398\":2}}],[\"使用指定的\",{\"1\":{\"396\":1}}],[\"使用于混合项目的图片加载库\",{\"1\":{\"376\":1}}],[\"使用获得的\",{\"1\":{\"368\":1}}],[\"使用默认的\",{\"1\":{\"351\":1}}],[\"使用是可以继承此类\",{\"1\":{\"335\":1}}],[\"使用抗锯齿效果会很好\",{\"1\":{\"334\":1}}],[\"使用者可以从父类\",{\"1\":{\"327\":1}}],[\"使用者可以通过\",{\"1\":{\"327\":1}}],[\"使用者可以用它来控制\",{\"1\":{\"318\":1}}],[\"使用者需要负责创建\",{\"1\":{\"312\":1}}],[\"使用者不可以直接控制动画\",{\"1\":{\"312\":1}}],[\"使用者实现\",{\"1\":{\"308\":1}}],[\"使用者只能设置动画的\",{\"1\":{\"329\":1}}],[\"使用者只能设置\",{\"1\":{\"302\":1}}],[\"使用传入的\",{\"1\":{\"306\":1}}],[\"使用各种内置的\",{\"1\":{\"300\":1,\"314\":1}}],[\"使用或未使用到inheritedwidget\",{\"1\":{\"273\":1}}],[\"使用dart\",{\"1\":{\"246\":2}}],[\"使用只需要两个步骤即可\",{\"1\":{\"195\":1}}],[\"使用详解\",{\"1\":{\"188\":1,\"206\":1}}],[\"使用以下方式则可以正常获取\",{\"1\":{\"160\":1}}],[\"使用最佳匹配算法从缓存池中找到一块大小合适的空间\",{\"1\":{\"138\":1}}],[\"使用透明部分的像素与已有图形对应位置交叉作用\",{\"1\":{\"131\":1}}],[\"使用自定义控件组\",{\"0\":{\"118\":1}}],[\"使用自定义属性\",{\"1\":{\"117\":1}}],[\"使用到的类有\",{\"1\":{\"108\":1}}],[\"使用场景难免有些受限\",{\"1\":{\"105\":1}}],[\"使用的是绝对路径\",{\"1\":{\"811\":1}}],[\"使用的是\",{\"1\":{\"442\":1}}],[\"使用的状态\",{\"1\":{\"123\":1}}],[\"使用的应该也是此原理\",{\"1\":{\"105\":1}}],[\"使用的\",{\"1\":{\"101\":1,\"394\":1,\"403\":1,\"409\":1}}],[\"使用的一些问题\",{\"0\":{\"79\":1}}],[\"使用服务端的\",{\"1\":{\"83\":1}}],[\"使用该关键字时\",{\"1\":{\"83\":1}}],[\"使用\",{\"0\":{\"191\":1,\"339\":1,\"510\":1},\"1\":{\"63\":1,\"82\":1,\"83\":1,\"103\":1,\"113\":1,\"124\":1,\"125\":1,\"126\":3,\"148\":1,\"162\":1,\"166\":1,\"195\":1,\"196\":1,\"199\":1,\"234\":1,\"244\":1,\"249\":1,\"278\":1,\"284\":1,\"300\":1,\"304\":1,\"307\":1,\"314\":1,\"317\":1,\"322\":1,\"329\":1,\"330\":1,\"332\":1,\"334\":1,\"358\":2,\"365\":1,\"375\":1,\"393\":1,\"397\":1,\"398\":1,\"399\":1,\"439\":1,\"524\":1,\"598\":1,\"612\":1,\"620\":1,\"629\":3,\"663\":1,\"694\":1,\"701\":1,\"708\":1,\"745\":1,\"765\":1,\"798\":1}}],[\"使用提供的方法绑定服务\",{\"1\":{\"38\":1}}],[\"使用rtc\",{\"1\":{\"13\":1}}],[\"使用elapsed\",{\"1\":{\"13\":1}}],[\"隔离解耦\",{\"1\":{\"126\":1}}],[\"隔离\",{\"1\":{\"123\":1,\"285\":1}}],[\"层是指从根节点到该节点的\",{\"1\":{\"832\":1}}],[\"层新建\",{\"1\":{\"748\":1}}],[\"层孵化一个新的\",{\"1\":{\"742\":1}}],[\"层实现为isolate\",{\"1\":{\"748\":2}}],[\"层实现\",{\"1\":{\"740\":1}}],[\"层实现名称是ioservice\",{\"1\":{\"246\":1}}],[\"层通信\",{\"1\":{\"244\":1}}],[\"层处理完这些\",{\"1\":{\"244\":1}}],[\"层的调用者\",{\"1\":{\"748\":1}}],[\"层的\",{\"1\":{\"244\":1,\"246\":2,\"247\":2,\"249\":1,\"740\":1}}],[\"层的eventhander中名为event\",{\"1\":{\"237\":1}}],[\"层发送消息触发\",{\"1\":{\"243\":1}}],[\"层之间\",{\"1\":{\"140\":1}}],[\"层和\",{\"1\":{\"140\":1}}],[\"层不再直接调用\",{\"1\":{\"125\":1}}],[\"层\",{\"1\":{\"122\":1,\"140\":5,\"249\":1,\"606\":1,\"832\":1}}],[\"包和\",{\"1\":{\"484\":1}}],[\"包裹的\",{\"1\":{\"420\":1}}],[\"包裹之后执行的\",{\"1\":{\"228\":1}}],[\"包含所有的静态化文件\",{\"1\":{\"813\":1}}],[\"包含了要创建的\",{\"1\":{\"769\":1}}],[\"包含其持有对象的大小\",{\"1\":{\"516\":1}}],[\"包含在内\",{\"1\":{\"412\":1}}],[\"包含底部导航栏\",{\"1\":{\"196\":1}}],[\"包装\",{\"1\":{\"254\":1}}],[\"包括栈\",{\"1\":{\"870\":1}}],[\"包括表和对表的操作\",{\"1\":{\"781\":1}}],[\"包括数据\",{\"1\":{\"781\":1}}],[\"包括隐藏文件\",{\"1\":{\"688\":1}}],[\"包括私有的\",{\"1\":{\"554\":1}}],[\"包括父类或接口的\",{\"1\":{\"554\":1}}],[\"包括包名\",{\"1\":{\"553\":1}}],[\"包括了\",{\"1\":{\"403\":1}}],[\"包括异步的都可以捕获到\",{\"1\":{\"297\":1}}],[\"包括inheritedwidget\",{\"1\":{\"272\":1}}],[\"包括\",{\"1\":{\"122\":1,\"493\":1}}],[\"包版本保持一致\",{\"1\":{\"2\":1}}],[\"业务逻辑层\",{\"1\":{\"126\":1}}],[\"业务逻辑\",{\"1\":{\"122\":1}}],[\"更详细的教程可以参考这里\",{\"1\":{\"803\":1}}],[\"更适用于\",{\"1\":{\"400\":1}}],[\"更适用于进程中断控制\",{\"1\":{\"137\":1}}],[\"更改权限\",{\"1\":{\"689\":1}}],[\"更改\",{\"1\":{\"332\":1,\"654\":1}}],[\"更改状态\",{\"1\":{\"282\":1}}],[\"更改其相应的state\",{\"1\":{\"282\":1}}],[\"更改或者\",{\"1\":{\"278\":1}}],[\"更改参数少的构造方法的super\",{\"1\":{\"117\":1}}],[\"更容易测试和维护\",{\"1\":{\"127\":1}}],[\"更容易单元测试和维护\",{\"1\":{\"123\":1}}],[\"更新博客内容\",{\"0\":{\"795\":1}}],[\"更新文件\",{\"1\":{\"730\":1}}],[\"更新内容\",{\"1\":{\"730\":1}}],[\"更新了\",{\"1\":{\"415\":1}}],[\"更新当前\",{\"1\":{\"413\":1}}],[\"更新为当前\",{\"1\":{\"411\":1}}],[\"更新自己的\",{\"1\":{\"370\":1}}],[\"更新后\",{\"1\":{\"305\":1}}],[\"更新而被重新创建\",{\"1\":{\"278\":1}}],[\"更新child\",{\"1\":{\"263\":1,\"264\":1}}],[\"更新来间接管理\",{\"1\":{\"254\":1}}],[\"更新按钮\",{\"1\":{\"189\":1}}],[\"更新\",{\"1\":{\"126\":1,\"189\":1,\"282\":1,\"305\":1,\"367\":1,\"368\":2,\"371\":1,\"408\":1,\"412\":1,\"415\":1,\"418\":1,\"423\":1,\"439\":1,\"492\":1}}],[\"更新登录状态等流程\",{\"1\":{\"126\":1}}],[\"更需要有条理的总结\",{\"1\":{\"0\":1,\"779\":1}}],[\"定向\",{\"1\":{\"701\":1}}],[\"定位泄露对象\",{\"1\":{\"464\":1}}],[\"定位一个更加合理的固有高度\",{\"1\":{\"445\":1}}],[\"定位\",{\"1\":{\"352\":1}}],[\"定义要执行的任务内容\",{\"1\":{\"787\":1}}],[\"定义各个界面之前的切换关系\",{\"1\":{\"783\":1}}],[\"定义入口类\",{\"1\":{\"737\":1}}],[\"定义类\",{\"1\":{\"728\":1}}],[\"定义的方法返回值类型相同\",{\"1\":{\"662\":1}}],[\"定义的方法和\",{\"1\":{\"662\":1}}],[\"定义只需要一步\",{\"1\":{\"662\":1}}],[\"定义方法\",{\"1\":{\"662\":1}}],[\"定义时的警告\",{\"1\":{\"566\":1}}],[\"定义一个接口\",{\"1\":{\"662\":1}}],[\"定义一个注解帮助类\",{\"1\":{\"564\":1}}],[\"定义一个注解类\",{\"1\":{\"564\":1}}],[\"定义一个待反射的类\",{\"1\":{\"553\":1}}],[\"定义一些类\",{\"1\":{\"273\":1}}],[\"定义\",{\"1\":{\"344\":1,\"346\":1,\"575\":1}}],[\"定义了对表格\",{\"1\":{\"786\":1}}],[\"定义了例如插入数据\",{\"1\":{\"781\":1}}],[\"定义了存储的数据项及其格式\",{\"1\":{\"781\":1}}],[\"定义了一系列网络请求基本的参数\",{\"1\":{\"711\":1}}],[\"定义了一个预先设定的动作\",{\"1\":{\"189\":1}}],[\"定义了\",{\"1\":{\"189\":1}}],[\"定义控件组布局\",{\"0\":{\"115\":1}}],[\"定时返回unit的channel\",{\"1\":{\"636\":1}}],[\"定时任务及循环任务基础大集合\",{\"1\":{\"22\":1}}],[\"定时输出\",{\"1\":{\"0\":1}}],[\"打印前\",{\"1\":{\"638\":1}}],[\"打开本地地址\",{\"1\":{\"806\":1}}],[\"打开命令行\",{\"1\":{\"805\":1}}],[\"打开\",{\"1\":{\"802\":1,\"811\":1,\"813\":1}}],[\"打开终端\",{\"1\":{\"680\":1}}],[\"打开终端执行以下命令\",{\"1\":{\"679\":1}}],[\"打开文件\",{\"1\":{\"243\":1,\"737\":1}}],[\"打开服务\",{\"1\":{\"189\":1}}],[\"打包\",{\"1\":{\"695\":2}}],[\"打包后格式\",{\"1\":{\"693\":1}}],[\"打包进messagehandler的消息队列中\",{\"1\":{\"247\":1}}],[\"打包提供给\",{\"1\":{\"203\":1}}],[\"打包为多个\",{\"1\":{\"30\":1}}],[\"打造一个炫酷的详情页\",{\"1\":{\"113\":1}}],[\"泡在网上的日子\",{\"1\":{\"113\":1}}],[\"由更加基础的通用数据结构组成\",{\"1\":{\"870\":1}}],[\"由activity通过navigation控制切换\",{\"1\":{\"782\":1}}],[\"由一条\",{\"1\":{\"767\":1}}],[\"由intermediate\",{\"1\":{\"767\":1}}],[\"由所有在这个\",{\"1\":{\"758\":1}}],[\"由用户控制\",{\"1\":{\"622\":1}}],[\"由指令重排\",{\"1\":{\"604\":1}}],[\"由objectoutputstream\",{\"1\":{\"581\":1}}],[\"由上述代码可知\",{\"1\":{\"438\":1}}],[\"由子类根据需要实现\",{\"1\":{\"429\":1}}],[\"由构造方法中必传的\",{\"1\":{\"319\":1}}],[\"由系统控件控制动画\",{\"1\":{\"300\":1,\"314\":1}}],[\"由内核创建匿名文件并与内存进行映射\",{\"1\":{\"136\":1}}],[\"由\",{\"1\":{\"125\":1,\"126\":1,\"140\":4,\"352\":1,\"398\":1,\"609\":1}}],[\"由此数据才变为可用数据\",{\"1\":{\"737\":1}}],[\"由此形成的格式一般是类似\",{\"1\":{\"695\":1}}],[\"由此可以计算出enumclazz实际占用的大小应该是\",{\"1\":{\"521\":1}}],[\"由此我们可以计算出设计稿中的控件在\",{\"1\":{\"196\":1}}],[\"由此\",{\"1\":{\"124\":1,\"159\":1,\"521\":1}}],[\"由简到难手把手带你撸三款\",{\"1\":{\"113\":1}}],[\"由于插入排序在排序进行到后期\",{\"1\":{\"919\":1}}],[\"由于之前的\",{\"1\":{\"813\":1}}],[\"由于是不同时间装的期间还重装了几次系统\",{\"1\":{\"812\":1}}],[\"由于原网站特性\",{\"1\":{\"732\":1}}],[\"由于内部类自动持有外部类的this引用\",{\"1\":{\"604\":1}}],[\"由于枚举类型的对象是唯一的\",{\"1\":{\"550\":1}}],[\"由于泛型的类型在运行时会被擦除\",{\"1\":{\"539\":1}}],[\"由于泛型类型参数会在运行时被擦除\",{\"1\":{\"538\":1}}],[\"由于sparsearray类的\",{\"1\":{\"523\":1}}],[\"由于string类是final的\",{\"1\":{\"461\":1}}],[\"由于他默认持有外部类的引用\",{\"1\":{\"516\":1}}],[\"由于他需要二分法查找的影响会比hashmap慢很多\",{\"1\":{\"92\":1}}],[\"由于默认的获取\",{\"1\":{\"785\":1}}],[\"由于默认的\",{\"1\":{\"422\":1}}],[\"由于将图片下载这个过程交给了原生成熟的图片加载库处理\",{\"1\":{\"376\":1}}],[\"由于我们已经在appcomponent中包括了androidinjectionmodule\",{\"1\":{\"214\":1}}],[\"由于我们开发者只能接触到\",{\"1\":{\"193\":1}}],[\"由于主进程被阻塞的同时成为了后台进程\",{\"1\":{\"30\":1}}],[\"由于child\",{\"1\":{\"26\":1}}],[\"由于闹钟会在设备关机的时候被取消\",{\"1\":{\"17\":1}}],[\"由于上述方式获取到的uri只对本\",{\"1\":{\"6\":1}}],[\"由于\",{\"1\":{\"5\":1,\"33\":1,\"160\":1,\"415\":1,\"444\":1,\"501\":1,\"510\":1,\"538\":1,\"545\":1,\"601\":1,\"602\":1,\"603\":1,\"645\":1,\"903\":1}}],[\"针对本文中的例子做了一些修改\",{\"1\":{\"218\":1}}],[\"针对\",{\"1\":{\"112\":1,\"113\":1,\"152\":1,\"490\":1}}],[\"尺寸和父级一致\",{\"1\":{\"444\":1}}],[\"尺寸时\",{\"1\":{\"444\":2}}],[\"尺寸大于父级尺寸时\",{\"1\":{\"445\":1}}],[\"尺寸大于父级尺寸\",{\"1\":{\"444\":1}}],[\"尺寸大于\",{\"1\":{\"440\":1}}],[\"尺寸大\",{\"1\":{\"439\":1}}],[\"尺寸或者位置发生了变化\",{\"1\":{\"112\":1}}],[\"尺寸或者位置发生变化时\",{\"1\":{\"112\":1}}],[\"尺寸为\",{\"1\":{\"100\":2,\"101\":1}}],[\"确认当前的\",{\"1\":{\"813\":1}}],[\"确认是否拦截点击事件\",{\"1\":{\"26\":1}}],[\"确保如\",{\"1\":{\"485\":1}}],[\"确保了在\",{\"1\":{\"747\":1}}],[\"确保了\",{\"1\":{\"444\":1}}],[\"确保结果永远不会大于使用\",{\"1\":{\"358\":1}}],[\"确保\",{\"1\":{\"327\":1}}],[\"确定虚拟方法的具体执行\",{\"1\":{\"771\":1}}],[\"确定不会变化\",{\"1\":{\"358\":1}}],[\"确定\",{\"1\":{\"112\":1}}],[\"才获取该单例\",{\"1\":{\"549\":1}}],[\"才取这里的\",{\"1\":{\"331\":1}}],[\"才能继续访问\",{\"1\":{\"546\":1}}],[\"才能识别手势并处理\",{\"1\":{\"415\":1}}],[\"才能确定大小\",{\"1\":{\"157\":1}}],[\"才能实现绑定效果\",{\"1\":{\"111\":1}}],[\"才会退出\",{\"1\":{\"623\":1}}],[\"才会进行初始化\",{\"1\":{\"547\":1}}],[\"才会去执行\",{\"1\":{\"223\":1}}],[\"才会出现下述效果\",{\"1\":{\"132\":1}}],[\"才会执行ontouchevent\",{\"1\":{\"27\":1}}],[\"个有序子数组\",{\"1\":{\"921\":1}}],[\"个间隔为\",{\"1\":{\"921\":1}}],[\"个圆盘通过柱子b\",{\"1\":{\"912\":1}}],[\"个子节点的树叫做二叉树\",{\"1\":{\"833\":1}}],[\"个或者多个子节点\",{\"1\":{\"832\":1}}],[\"个或多个都会报错\",{\"1\":{\"652\":1}}],[\"个元素\",{\"1\":{\"786\":1,\"896\":1,\"897\":1,\"913\":2}}],[\"个元素都是无序的\",{\"1\":{\"534\":1}}],[\"个页面\",{\"1\":{\"782\":1}}],[\"个入参\",{\"1\":{\"742\":1}}],[\"个部分\",{\"1\":{\"709\":1}}],[\"个示例\",{\"1\":{\"663\":1}}],[\"个发射的值\",{\"1\":{\"653\":1}}],[\"个数\",{\"1\":{\"911\":2}}],[\"个数值\",{\"1\":{\"646\":1}}],[\"个数字\",{\"1\":{\"638\":1}}],[\"个数不同也不行\",{\"1\":{\"60\":1}}],[\"个对象的hashmap<integer\",{\"1\":{\"523\":1}}],[\"个字符\",{\"1\":{\"519\":1}}],[\"个字母\",{\"1\":{\"152\":1}}],[\"个参数\",{\"1\":{\"247\":1}}],[\"个步骤\",{\"1\":{\"246\":1}}],[\"个模块\",{\"1\":{\"140\":1}}],[\"个\",{\"1\":{\"130\":1,\"254\":1,\"273\":2,\"516\":2,\"523\":1,\"744\":1,\"913\":1}}],[\"个类或其子类时\",{\"1\":{\"111\":1}}],[\"个实现类\",{\"1\":{\"111\":1}}],[\"高级排序\",{\"0\":{\"917\":1}}],[\"高级系统设置\",{\"1\":{\"803\":1}}],[\"高级特性与最佳实践\",{\"1\":{\"454\":1,\"610\":1}}],[\"高的测量值\",{\"1\":{\"159\":1}}],[\"高\",{\"1\":{\"157\":3,\"158\":1,\"160\":1}}],[\"高层模块\",{\"1\":{\"126\":1}}],[\"高度\",{\"1\":{\"111\":1}}],[\"高度需大于\",{\"1\":{\"111\":1}}],[\"高对应的总\",{\"1\":{\"100\":1}}],[\"联系人列表滑动时\",{\"1\":{\"152\":1}}],[\"联系人列表有两个要点\",{\"1\":{\"152\":1}}],[\"联系在一起\",{\"1\":{\"56\":1}}],[\"联动效果的dependency\",{\"1\":{\"111\":1}}],[\"联动的子\",{\"1\":{\"111\":1}}],[\"尹\",{\"1\":{\"111\":1}}],[\"作用对象\",{\"1\":{\"701\":1}}],[\"作用根据传入的\",{\"1\":{\"358\":1}}],[\"作用的方式\",{\"1\":{\"355\":1}}],[\"作比较\",{\"1\":{\"152\":1}}],[\"作者\",{\"1\":{\"111\":1,\"136\":1,\"137\":1,\"286\":1,\"584\":1,\"675\":1}}],[\"作为参数\",{\"1\":{\"742\":1}}],[\"作为入口类\",{\"1\":{\"731\":1}}],[\"作为关键词参数\",{\"1\":{\"726\":1}}],[\"作为有序部分的最后一个元素\",{\"1\":{\"534\":1}}],[\"作为方法区数据的访问入口\",{\"1\":{\"492\":1}}],[\"作为遵守\",{\"1\":{\"446\":1}}],[\"作为父级\",{\"1\":{\"439\":1,\"445\":1}}],[\"作为这里的入参\",{\"1\":{\"423\":1}}],[\"作为其直接子类\",{\"1\":{\"431\":1}}],[\"作为其\",{\"1\":{\"405\":1}}],[\"作为renderimage\",{\"1\":{\"377\":1}}],[\"作为一个\",{\"1\":{\"372\":1,\"377\":1,\"436\":1}}],[\"作为将\",{\"1\":{\"266\":1}}],[\"作为child参数传入的rootwidget\",{\"1\":{\"256\":1}}],[\"作为\",{\"1\":{\"253\":1,\"256\":1,\"264\":1,\"265\":1,\"302\":1,\"332\":1,\"335\":2,\"340\":1,\"361\":1,\"405\":1,\"439\":1,\"445\":1}}],[\"作为大小单位即可\",{\"1\":{\"196\":1}}],[\"作为更通用的接口\",{\"1\":{\"137\":1}}],[\"作为第三方统计平台\",{\"1\":{\"104\":1}}],[\"作为单位\",{\"1\":{\"100\":1}}],[\"变成了\",{\"1\":{\"690\":1}}],[\"变量对所有线程可见\",{\"1\":{\"602\":1}}],[\"变量\",{\"1\":{\"461\":1,\"525\":1,\"552\":1,\"554\":1,\"593\":1,\"723\":1}}],[\"变为负值\",{\"1\":{\"418\":1}}],[\"变为可见\",{\"1\":{\"111\":1}}],[\"变换画布\",{\"1\":{\"334\":1}}],[\"变化的值\",{\"1\":{\"412\":1}}],[\"变化的时候并不会触发此控件重建\",{\"1\":{\"273\":1}}],[\"变化时\",{\"1\":{\"440\":1}}],[\"变化时通知\",{\"0\":{\"408\":1}}],[\"变化时会调用此方法通知子类\",{\"1\":{\"307\":1}}],[\"变化为大于\",{\"1\":{\"343\":1}}],[\"变化等情况下会直接调用\",{\"1\":{\"333\":1}}],[\"变化则创建新的\",{\"1\":{\"305\":1}}],[\"变化\",{\"1\":{\"75\":1,\"153\":1,\"316\":1,\"340\":1,\"367\":1}}],[\"变化了\",{\"1\":{\"64\":1}}],[\"​\",{\"1\":{\"106\":1,\"116\":2,\"118\":1,\"612\":3,\"719\":1}}],[\"问题分析\",{\"0\":{\"576\":1}}],[\"问题\",{\"1\":{\"104\":1}}],[\"问题描述\",{\"0\":{\"80\":1}}],[\"若此时序列数不是\",{\"1\":{\"913\":1}}],[\"若节点是红色\",{\"1\":{\"902\":1}}],[\"若父加载器为空\",{\"1\":{\"485\":1}}],[\"若内存不够则会被\",{\"1\":{\"479\":1}}],[\"若\",{\"1\":{\"475\":1,\"850\":1}}],[\"若是则放到\",{\"1\":{\"475\":1}}],[\"若执行的是\",{\"1\":{\"462\":1}}],[\"若执行\",{\"1\":{\"462\":1}}],[\"若无法显示可点击这里查看\",{\"1\":{\"202\":1,\"203\":1,\"204\":1}}],[\"若无此类要求可直接使用\",{\"1\":{\"104\":1}}],[\"若用户选择了不再提示则一直为\",{\"1\":{\"173\":1}}],[\"若与前一个相同则不显示\",{\"1\":{\"152\":1}}],[\"若手动指定为\",{\"1\":{\"36\":1}}],[\"$ddata\",{\"1\":{\"833\":1}}],[\"$drawable\",{\"1\":{\"823\":1}}],[\"$sdpath\",{\"1\":{\"821\":1}}],[\"$sysdir\",{\"1\":{\"486\":1}}],[\"$mipmap\",{\"1\":{\"819\":1}}],[\"$message\",{\"1\":{\"742\":3}}],[\"$b\",{\"1\":{\"631\":2}}],[\"$a\",{\"1\":{\"631\":2}}],[\"$value\",{\"1\":{\"630\":2,\"631\":1,\"646\":2,\"656\":2}}],[\"$key​\",{\"1\":{\"697\":1}}],[\"$k\",{\"1\":{\"629\":1}}],[\"$num\",{\"1\":{\"912\":1}}],[\"$number\",{\"1\":{\"625\":1}}],[\"$node\",{\"1\":{\"834\":1}}],[\"$name\",{\"1\":{\"486\":1}}],[\"$navigator\",{\"1\":{\"351\":1}}],[\"$classname\",{\"1\":{\"619\":2}}],[\"$curve\",{\"1\":{\"359\":1}}],[\"$currenttimems\",{\"1\":{\"241\":1}}],[\"$url\",{\"1\":{\"383\":1}}],[\"$to\",{\"1\":{\"912\":2}}],[\"$time\",{\"1\":{\"630\":1}}],[\"$timeelapsestring$\",{\"1\":{\"241\":1}}],[\"$t\",{\"1\":{\"360\":1}}],[\"$pop\",{\"1\":{\"847\":1,\"848\":1}}],[\"$parentwidget\",{\"1\":{\"295\":1}}],[\"$prefix\",{\"1\":{\"241\":1}}],[\"$error\",{\"1\":{\"297\":1}}],[\"$e\",{\"1\":{\"294\":2,\"403\":1,\"656\":3}}],[\"$element\",{\"1\":{\"222\":1}}],[\"$iid\",{\"1\":{\"833\":1}}],[\"$i\",{\"1\":{\"289\":1,\"629\":1,\"656\":1}}],[\"$index\",{\"1\":{\"276\":1,\"403\":1,\"434\":1}}],[\"$it\",{\"1\":{\"187\":1,\"612\":1,\"631\":1}}],[\"$resource\",{\"1\":{\"399\":1}}],[\"$repeatcounter\",{\"1\":{\"222\":1}}],[\"$rootproject\",{\"1\":{\"209\":3}}],[\"$waitforinjectclass\",{\"1\":{\"215\":1}}],[\"$\",{\"1\":{\"104\":2,\"105\":2,\"196\":4,\"230\":1,\"241\":2,\"243\":1,\"273\":9,\"295\":2,\"351\":1,\"359\":1,\"612\":2,\"625\":2,\"631\":1,\"645\":1,\"664\":1,\"742\":4,\"748\":2,\"794\":1,\"850\":1}}],[\"友盟初始化appkey和channel\",{\"1\":{\"104\":1}}],[\"友盟\",{\"1\":{\"104\":1}}],[\"友盟配置\",{\"0\":{\"104\":1}}],[\"正式的\",{\"1\":{\"575\":1}}],[\"正式启动\",{\"1\":{\"176\":1}}],[\"正如上面分析的\",{\"1\":{\"442\":1}}],[\"正如之前所言\",{\"1\":{\"436\":1}}],[\"正如我们之前所说\",{\"1\":{\"436\":1}}],[\"正常联动\",{\"1\":{\"419\":1}}],[\"正常使用\",{\"1\":{\"397\":1}}],[\"正负\",{\"1\":{\"412\":1}}],[\"正在使用的图片\",{\"1\":{\"375\":1}}],[\"正在加载中的图片\",{\"1\":{\"375\":1}}],[\"正确的绘制出遮罩效果\",{\"1\":{\"162\":1}}],[\"正确配置\",{\"1\":{\"103\":1}}],[\"正文\",{\"0\":{\"100\":1,\"171\":1,\"650\":1}}],[\"国内很多软件都使用的是\",{\"1\":{\"104\":1}}],[\"国内\",{\"1\":{\"103\":1}}],[\"国内较快的仓库\",{\"1\":{\"2\":1}}],[\"望解答多谢\",{\"1\":{\"102\":1}}],[\"拉丁吴\",{\"1\":{\"102\":1}}],[\"适用于页面内容通常为全部可见\",{\"1\":{\"446\":1}}],[\"适用于日常场景\",{\"1\":{\"400\":1}}],[\"适用于\",{\"1\":{\"319\":2,\"442\":1}}],[\"适用于没有预设编辑的物理模拟动画\",{\"1\":{\"319\":1}}],[\"适用于将原先线性变化的\",{\"1\":{\"317\":1}}],[\"适用于动画可能会变化的情况\",{\"1\":{\"317\":1}}],[\"适用于有可注入的构造函数并且包含控制类型实例如何重用的类\",{\"1\":{\"205\":1}}],[\"适用于大量并发请求\",{\"1\":{\"57\":1}}],[\"适合实时更新后台任务进度的工作\",{\"1\":{\"190\":1}}],[\"适配自定义\",{\"0\":{\"163\":1}}],[\"适配方案\",{\"1\":{\"102\":1}}],[\"目标层\",{\"1\":{\"912\":1}}],[\"目标版本是\",{\"1\":{\"5\":1}}],[\"目前只实现了爬取\",{\"1\":{\"736\":1}}],[\"目前已经分析了底层实现的部分\",{\"1\":{\"300\":1}}],[\"目前稳定高效的\",{\"1\":{\"102\":1}}],[\"目的\",{\"1\":{\"112\":2}}],[\"目录设置如此\",{\"1\":{\"811\":1}}],[\"目录的解释\",{\"0\":{\"807\":1}}],[\"目录\",{\"1\":{\"243\":1,\"244\":1,\"731\":1}}],[\"目录下面新建一个嵌套导航图\",{\"1\":{\"783\":1}}],[\"目录下的文件读取\",{\"1\":{\"612\":1}}],[\"目录下的\",{\"1\":{\"484\":1}}],[\"目录下\",{\"1\":{\"167\":1,\"680\":1,\"813\":1}}],[\"目录下新建对应渠道文件夹\",{\"1\":{\"106\":1}}],[\"目录树如下\",{\"1\":{\"106\":1}}],[\"支持a\",{\"1\":{\"723\":1}}],[\"支持加载以及失败显示\",{\"1\":{\"380\":1}}],[\"支持的格式有\",{\"1\":{\"365\":1}}],[\"支持的数据格式\",{\"0\":{\"59\":1}}],[\"支持更加丰富的动画\",{\"1\":{\"357\":1}}],[\"支持\",{\"1\":{\"278\":1,\"358\":1,\"418\":1}}],[\"支持不同的像素密度\",{\"1\":{\"102\":1}}],[\"骚年你的屏幕适配方式该升级了\",{\"1\":{\"102\":1}}],[\"又称堆栈\",{\"1\":{\"887\":1}}],[\"又可以像数组那样快速查找\",{\"1\":{\"832\":1}}],[\"又再次用起了\",{\"1\":{\"798\":1}}],[\"又当生产者时\",{\"1\":{\"617\":1}}],[\"又由于列表不能保存不同的类型\",{\"1\":{\"540\":1}}],[\"又有\",{\"1\":{\"504\":1}}],[\"又要求占据所有剩余空间从而导致出错\",{\"1\":{\"445\":1}}],[\"又要求类不能是抽象的\",{\"1\":{\"213\":1}}],[\"又会因为\",{\"1\":{\"445\":1}}],[\"又会导致\",{\"1\":{\"445\":1}}],[\"又需要保证在父级空间不足时能够完整显示所有\",{\"1\":{\"444\":1}}],[\"又是如何实现滑动效果的呢\",{\"1\":{\"440\":1}}],[\"又是怎样才显示到屏幕上的\",{\"1\":{\"251\":1}}],[\"又吹风\",{\"1\":{\"250\":1}}],[\"又将\",{\"1\":{\"247\":1}}],[\"又被称为字符设备或裸设备\",{\"1\":{\"243\":1}}],[\"又通过androidinjector从appcomponent中拿到mainactivitymodule中的androidinjector\",{\"1\":{\"217\":1}}],[\"又根据\",{\"1\":{\"196\":1,\"439\":1}}],[\"又根据这个文章\",{\"1\":{\"33\":1}}],[\"又负责业务逻辑及数据更新\",{\"1\":{\"122\":1}}],[\"又知道\",{\"1\":{\"101\":1}}],[\"导入用到的各个类\",{\"1\":{\"737\":1}}],[\"导致插入和移动的次数越来越多\",{\"1\":{\"919\":1}}],[\"导致死锁\",{\"1\":{\"561\":1}}],[\"导致即使到了运行时也无法发现这个错误\",{\"1\":{\"538\":1}}],[\"导致内存浪费\",{\"1\":{\"474\":1}}],[\"导致每次\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"导致其重叠部分的内容看起来好像在\",{\"1\":{\"342\":1}}],[\"导致其臃肿难以维护\",{\"1\":{\"122\":1}}],[\"导致build\",{\"1\":{\"295\":1}}],[\"导致的结果就是\",{\"1\":{\"271\":1}}],[\"导致错误\",{\"1\":{\"203\":1}}],[\"导致\",{\"1\":{\"123\":1,\"273\":2,\"405\":1}}],[\"导致显示异常\",{\"1\":{\"101\":1}}],[\"导图\",{\"0\":{\"45\":1}}],[\"设其坐标为max\",{\"1\":{\"897\":1}}],[\"设一个栈用于保存运算符\",{\"1\":{\"890\":1}}],[\"设定所有排序\",{\"1\":{\"878\":1}}],[\"设元素下标为x\",{\"1\":{\"857\":1}}],[\"设计不同界面切换效果\",{\"1\":{\"783\":1}}],[\"设计中的关键部分\",{\"1\":{\"783\":1}}],[\"设计用来执行并行操作\",{\"1\":{\"623\":1}}],[\"设计用来以阻塞的方式执行协程代码\",{\"1\":{\"623\":1}}],[\"设计稿中的屏幕宽度\",{\"1\":{\"196\":1}}],[\"设计稿屏幕宽度\",{\"1\":{\"196\":1}}],[\"设计稿宽度对应设备水平方向\",{\"1\":{\"196\":1}}],[\"设计稿总宽度dpx\",{\"1\":{\"196\":1}}],[\"设为\",{\"1\":{\"532\":1}}],[\"设要绘制的图形为src\",{\"1\":{\"130\":1}}],[\"设备文件分为\",{\"1\":{\"243\":1}}],[\"设备\",{\"1\":{\"100\":2}}],[\"设置了\",{\"1\":{\"823\":1}}],[\"设置新建一个\",{\"1\":{\"810\":1}}],[\"设置新的状态\",{\"1\":{\"300\":1,\"314\":1}}],[\"设置环境变量\",{\"0\":{\"678\":1}}],[\"设置类\",{\"1\":{\"497\":1}}],[\"设置虚引用只是为了在对象被\",{\"1\":{\"481\":1}}],[\"设置为\",{\"1\":{\"253\":1}}],[\"设置的事件是打开一个\",{\"1\":{\"189\":1}}],[\"设置的闹钟间隔为\",{\"1\":{\"13\":1}}],[\"设置默认值\",{\"0\":{\"163\":1}}],[\"设置二者重叠部分的绘制方式\",{\"1\":{\"162\":1}}],[\"设置当前选中的字母\",{\"1\":{\"153\":1}}],[\"设置滑动监听事件\",{\"1\":{\"152\":1}}],[\"设置监听事件\",{\"1\":{\"118\":1}}],[\"设置主\",{\"1\":{\"30\":1}}],[\"设置一个每天指定时间循环的闹钟\",{\"0\":{\"19\":1}}],[\"设置重复任务\",{\"0\":{\"8\":1}}],[\"设置\",{\"1\":{\"2\":1,\"3\":1,\"110\":1,\"112\":1,\"159\":1,\"189\":1,\"444\":2,\"696\":1}}],[\"占的内存\",{\"1\":{\"465\":1}}],[\"占用内存大小在sparsearray和hashmap之间\",{\"1\":{\"523\":1}}],[\"占用内存小\",{\"1\":{\"462\":1}}],[\"占用\",{\"1\":{\"519\":2}}],[\"占用大小为\",{\"1\":{\"523\":2}}],[\"占用大小\",{\"1\":{\"516\":1,\"519\":1}}],[\"占用了\",{\"1\":{\"516\":1}}],[\"占用的\",{\"1\":{\"405\":1}}],[\"占用的内存\",{\"1\":{\"365\":1}}],[\"占位\",{\"1\":{\"347\":1}}],[\"占据剩余空间\",{\"1\":{\"439\":1}}],[\"占据的大小既不全是父布局的剩余空间\",{\"1\":{\"276\":1}}],[\"占据容器的剩余空间\",{\"1\":{\"276\":1}}],[\"占比来分配每个\",{\"1\":{\"276\":1}}],[\"占\",{\"1\":{\"100\":1}}],[\"单链表\",{\"1\":{\"881\":2}}],[\"单引号\",{\"1\":{\"697\":1}}],[\"单例模式\",{\"1\":{\"583\":1,\"598\":1}}],[\"单但为了更好的避免这种情况的发生我们使用threadlocal时遵守以下两个小原则\",{\"1\":{\"528\":1}}],[\"单个线程最大栈内存=最大线程数量\",{\"1\":{\"465\":1}}],[\"单线程下\",{\"1\":{\"465\":1}}],[\"单线程\",{\"1\":{\"465\":1}}],[\"单独画两个圆\",{\"1\":{\"334\":1}}],[\"单独出来等\",{\"1\":{\"123\":1}}],[\"单位保持一致\",{\"1\":{\"196\":1}}],[\"单位转换为像素时所必须使用的缩放系数\",{\"1\":{\"100\":1}}],[\"单一事实来源\",{\"1\":{\"126\":1}}],[\"单一数据来源\",{\"1\":{\"126\":1}}],[\"单向数据流\",{\"1\":{\"126\":2}}],[\"单纯类\",{\"1\":{\"126\":1}}],[\"单就\",{\"1\":{\"26\":1}}],[\"字典\",{\"1\":{\"724\":1,\"737\":1}}],[\"字符串前面加\",{\"1\":{\"723\":1}}],[\"字符串\",{\"1\":{\"723\":1}}],[\"字符串在常量池中以constant\",{\"1\":{\"519\":1}}],[\"字符\",{\"1\":{\"704\":1}}],[\"字型\",{\"1\":{\"637\":2}}],[\"字段解析\",{\"1\":{\"496\":1}}],[\"字段表示根据当前像素密度指定将\",{\"1\":{\"100\":1}}],[\"字节所需的填充\",{\"1\":{\"516\":1}}],[\"字节码验证\",{\"1\":{\"494\":1}}],[\"字节跳动\",{\"1\":{\"102\":1}}],[\"字面量\",{\"1\":{\"461\":1}}],[\"字母导航栏要留出方法\",{\"1\":{\"152\":1}}],[\"字母导航栏\",{\"1\":{\"152\":1}}],[\"字体的高度＝上坡度＋下坡度＋行间距\",{\"1\":{\"33\":1}}],[\"给新增的变量默认值\",{\"1\":{\"582\":1}}],[\"给另一个对象提供依赖的技术\",{\"1\":{\"199\":1}}],[\"给服务端发消息\",{\"1\":{\"138\":1}}],[\"给服务发消息\",{\"1\":{\"39\":1}}],[\"给viewmodel\",{\"1\":{\"125\":1}}],[\"给\",{\"0\":{\"146\":1,\"147\":1},\"1\":{\"125\":4,\"404\":2,\"445\":2}}],[\"给控件组内部控件添加点击事件监听\",{\"1\":{\"117\":1}}],[\"给的设计稿一般都是以像素\",{\"1\":{\"100\":1}}],[\"选出一个枢纽\",{\"1\":{\"927\":1}}],[\"选出来的这个值c\",{\"1\":{\"923\":1}}],[\"选中间的数作为枢纽\",{\"1\":{\"926\":1,\"927\":1}}],[\"选取一个枢纽\",{\"1\":{\"925\":1}}],[\"选取一个中间值\",{\"1\":{\"880\":1}}],[\"选用\",{\"1\":{\"556\":1}}],[\"选择数组最右端元素作为枢纽\",{\"1\":{\"927\":1}}],[\"选择了某个植物后\",{\"1\":{\"782\":1}}],[\"选择了基于今日头条的androidautosize适配方案\",{\"1\":{\"99\":1}}],[\"选择是否发布文章到网站\",{\"1\":{\"719\":1}}],[\"选择是否用\",{\"1\":{\"719\":1}}],[\"选择\",{\"1\":{\"671\":1,\"810\":1,\"813\":1}}],[\"选择排序的思想\",{\"1\":{\"533\":1}}],[\"选择排序\",{\"0\":{\"533\":1,\"897\":1},\"1\":{\"868\":1,\"875\":1,\"897\":1}}],[\"选择排序和插入排序\",{\"1\":{\"531\":1}}],[\"选择在正方向上离我们最远的\",{\"1\":{\"417\":1}}],[\"选择内置的隐式动画\",{\"1\":{\"312\":1}}],[\"选好方向\",{\"1\":{\"0\":1}}],[\"然后依次向元素父节点遍历\",{\"1\":{\"858\":1}}],[\"然后进入这个文件夹\",{\"1\":{\"806\":1}}],[\"然后转化为machine\",{\"1\":{\"766\":1}}],[\"然后推送到设备上面\",{\"1\":{\"765\":1}}],[\"然后选择execute执行即可\",{\"1\":{\"708\":1}}],[\"然后复制右边的有个https\",{\"1\":{\"673\":1}}],[\"然后把这个添加提交到本地的仓库\",{\"1\":{\"672\":1}}],[\"然后异常传递给父协程\",{\"1\":{\"640\":1}}],[\"然后哪个值先出来\",{\"1\":{\"631\":1}}],[\"然后对结果调用\",{\"1\":{\"631\":1}}],[\"然后对其flatmapconcat\",{\"1\":{\"631\":1}}],[\"然后阻塞其他线程进入\",{\"1\":{\"603\":1}}],[\"然后自身在父级约束条件下尽可能满足\",{\"1\":{\"440\":1}}],[\"然后自身在满足父级约束的情况下应用\",{\"1\":{\"439\":1}}],[\"然后发出\",{\"1\":{\"418\":1}}],[\"然后返回\",{\"1\":{\"418\":1}}],[\"然后是\",{\"1\":{\"418\":1}}],[\"然后以此计算\",{\"1\":{\"417\":1}}],[\"然后会有地方处理\",{\"1\":{\"413\":1}}],[\"然后会执行powerimageloader\",{\"1\":{\"398\":1}}],[\"然后powerimagerequestmanager\",{\"1\":{\"399\":1}}],[\"然后根据是否创建了new\",{\"1\":{\"761\":1}}],[\"然后根据\",{\"1\":{\"368\":1,\"424\":1}}],[\"然后根据tween\",{\"1\":{\"336\":1}}],[\"然后根据事件失败或者成功\",{\"1\":{\"249\":1}}],[\"然后抗锯齿会分别执行两次\",{\"1\":{\"334\":1}}],[\"然后中通过下面的方法实现\",{\"1\":{\"284\":1}}],[\"然后执行\",{\"1\":{\"271\":1}}],[\"然后将剩下的元素全部依次复制到a的末尾\",{\"1\":{\"913\":1}}],[\"然后将其生成的\",{\"1\":{\"770\":1}}],[\"然后将其与thread\",{\"1\":{\"753\":1}}],[\"然后将结果\",{\"1\":{\"767\":1}}],[\"然后将我们传入的\",{\"1\":{\"265\":1}}],[\"然后将activity传入inject\",{\"1\":{\"216\":1}}],[\"然后调用dart\",{\"1\":{\"753\":1}}],[\"然后调用powerimagebaserequest\",{\"1\":{\"398\":1}}],[\"然后调用其insertrenderobjectchild方法将当前的\",{\"1\":{\"265\":1}}],[\"然后调用此element\",{\"1\":{\"259\":1}}],[\"然后这个\",{\"1\":{\"262\":1}}],[\"然后创建一个对应的dart\",{\"1\":{\"247\":1}}],[\"然后创建了\",{\"1\":{\"216\":1}}],[\"然后使用这个\",{\"1\":{\"753\":1}}],[\"然后使用\",{\"1\":{\"243\":1}}],[\"然后使用indexof\",{\"1\":{\"92\":1}}],[\"然后等待返回结果\",{\"1\":{\"243\":1}}],[\"然后判断是否有\",{\"1\":{\"239\":1}}],[\"然后系统会在时间到了之后\",{\"1\":{\"237\":1}}],[\"然后计算出\",{\"1\":{\"234\":1}}],[\"然后不停的从\",{\"1\":{\"221\":1}}],[\"然后当mainactivity之中需要使用到mainactivitysubcomponent时\",{\"1\":{\"217\":1}}],[\"然后\",{\"1\":{\"213\":1,\"229\":1,\"405\":1,\"521\":1,\"631\":2,\"765\":1}}],[\"然后再分别移动指针\",{\"1\":{\"924\":1}}],[\"然后再将排好序的两个数组归并在一起得到有序数组\",{\"1\":{\"913\":1}}],[\"然后再将其绘制到原有图层\",{\"1\":{\"131\":1}}],[\"然后再对照规则检查是否需要调整红黑树\",{\"1\":{\"904\":1}}],[\"然后再依次移除即可\",{\"1\":{\"860\":1}}],[\"然后再移向下一层\",{\"1\":{\"848\":1}}],[\"然后再返回上一层的邻接顶点中还可以访问的顶点\",{\"1\":{\"847\":1}}],[\"然后再从这个\",{\"1\":{\"769\":1}}],[\"然后再执行未优化过程\",{\"1\":{\"768\":1}}],[\"然后再在dart\",{\"1\":{\"759\":1}}],[\"然后再在使用该类的时候使用\",{\"1\":{\"202\":1}}],[\"然后再等待所有内部协程结束\",{\"1\":{\"623\":1}}],[\"然后再修改为其他\",{\"1\":{\"317\":1}}],[\"然后再使用\",{\"1\":{\"235\":1}}],[\"然后再检查一次\",{\"1\":{\"230\":1}}],[\"然后重写ontouchevent\",{\"1\":{\"153\":1}}],[\"然后结合valueanimator实时获得对应长度的\",{\"1\":{\"147\":1}}],[\"然后通过powerimagechannel发送请求\",{\"1\":{\"398\":1}}],[\"然后通过renderobjecttowidgetelement\",{\"1\":{\"266\":1}}],[\"然后通过\",{\"1\":{\"136\":1,\"228\":1,\"398\":1}}],[\"然后删除对应位置的数据\",{\"1\":{\"95\":1}}],[\"然后取出对应的数据value并返回即可\",{\"1\":{\"94\":1}}],[\"然后在enqueueentrypointinvocationandnotifyspawner方法中将\",{\"1\":{\"759\":1}}],[\"然后在调用诸如out\",{\"1\":{\"584\":1}}],[\"然后在其renderimage\",{\"1\":{\"372\":1}}],[\"然后在要跳转到的第二个页面\",{\"1\":{\"340\":1}}],[\"然后在代码中使用\",{\"1\":{\"196\":1}}],[\"然后在ondraw\",{\"1\":{\"147\":1}}],[\"然后在\",{\"1\":{\"57\":1,\"112\":1,\"123\":1,\"372\":1,\"783\":1}}],[\"位整数\",{\"1\":{\"519\":1}}],[\"位运算\",{\"0\":{\"507\":1},\"1\":{\"507\":1}}],[\"位于\",{\"1\":{\"341\":1,\"343\":2}}],[\"位于sdk\",{\"1\":{\"244\":1}}],[\"位移的动画\",{\"1\":{\"338\":1}}],[\"位设计稿屏幕宽度\",{\"1\":{\"196\":1}}],[\"位表示\",{\"1\":{\"158\":2}}],[\"位\",{\"1\":{\"158\":1,\"500\":1,\"516\":1,\"519\":1,\"690\":1}}],[\"位置在runtime\",{\"1\":{\"740\":1}}],[\"位置在sdk\",{\"1\":{\"740\":2}}],[\"位置参数\",{\"1\":{\"726\":1}}],[\"位置的值的类\",{\"1\":{\"361\":1}}],[\"位置\",{\"1\":{\"353\":1,\"545\":1}}],[\"位置变化从而推测出\",{\"1\":{\"342\":1}}],[\"位置和大小的路径动画\",{\"1\":{\"341\":1}}],[\"位置等属性\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"位置发生变化\",{\"1\":{\"112\":1}}],[\"位置不变\",{\"1\":{\"75\":1}}],[\"位保存\",{\"1\":{\"92\":4}}],[\"改密码\",{\"0\":{\"692\":1}}],[\"改用户\",{\"1\":{\"691\":1}}],[\"改为非线性的\",{\"1\":{\"317\":1}}],[\"改动等时\",{\"1\":{\"90\":1}}],[\"改变节点颜色\",{\"1\":{\"902\":1}}],[\"改变而变化的\",{\"1\":{\"440\":1}}],[\"改变的时候\",{\"1\":{\"440\":1}}],[\"改变通知\",{\"1\":{\"325\":1}}],[\"改变了则重写添加\",{\"1\":{\"310\":1}}],[\"改变其状态\",{\"1\":{\"280\":1}}],[\"改变大小为父容器分配的大小\",{\"1\":{\"277\":1}}],[\"改变大小\",{\"1\":{\"276\":1}}],[\"改变\",{\"1\":{\"74\":1}}],[\"~如果正常的话\",{\"1\":{\"812\":1}}],[\"~double\",{\"1\":{\"412\":1}}],[\"~pflag3\",{\"1\":{\"159\":1}}],[\"~\",{\"1\":{\"145\":1,\"238\":1,\"243\":1,\"325\":1,\"412\":4,\"507\":1,\"683\":1,\"700\":5,\"784\":1,\"812\":1}}],[\"~end\",{\"1\":{\"92\":1}}],[\"~0\",{\"1\":{\"92\":1}}],[\"~containerhelpers\",{\"1\":{\"87\":1}}],[\"~index\",{\"1\":{\"93\":1}}],[\"~i\",{\"1\":{\"87\":1}}],[\"应当考虑使用基于\",{\"1\":{\"446\":1}}],[\"应当将不需要每次更新的\",{\"1\":{\"308\":1}}],[\"应该要以祖节点右旋\",{\"1\":{\"904\":1}}],[\"应该就可以正常使用了\",{\"1\":{\"803\":1}}],[\"应该将coroutineexceptionhandler\",{\"1\":{\"640\":1}}],[\"应该尽可能采用这种方式\",{\"1\":{\"583\":1}}],[\"应该被作为被标注的程序成员的公共\",{\"1\":{\"565\":1}}],[\"应该为负值\",{\"1\":{\"412\":1}}],[\"应该能了解\",{\"1\":{\"327\":1}}],[\"应该是\",{\"1\":{\"263\":1}}],[\"应该分配一个单一事实来源\",{\"1\":{\"126\":1}}],[\"应该使用数据模型\",{\"1\":{\"126\":1}}],[\"应该添加的位置\",{\"1\":{\"93\":1}}],[\"应该插入的位置\",{\"1\":{\"87\":1}}],[\"应该插入的位置的取反值\",{\"1\":{\"87\":1}}],[\"应用开发这方面比较火的是butter\",{\"1\":{\"564\":1}}],[\"应用于\",{\"1\":{\"355\":1}}],[\"应用一个\",{\"1\":{\"317\":1}}],[\"应用到自身的\",{\"1\":{\"316\":1}}],[\"应用请求暂停\",{\"1\":{\"287\":1}}],[\"应用可见\",{\"1\":{\"287\":1}}],[\"应用在后台运行\",{\"1\":{\"287\":1}}],[\"应用处于非活动状态\",{\"1\":{\"287\":1}}],[\"应用程序加载器\",{\"1\":{\"484\":1}}],[\"应用程序\",{\"1\":{\"128\":1}}],[\"应用中定义的数据类型\",{\"1\":{\"126\":1}}],[\"应用层\",{\"1\":{\"126\":1,\"140\":1}}],[\"应用常常要分发到多个应用商店\",{\"1\":{\"103\":1}}],[\"应用\",{\"1\":{\"76\":1,\"413\":1,\"417\":1,\"418\":2,\"777\":1,\"778\":1,\"779\":1,\"781\":1}}],[\"添加回调\",{\"1\":{\"408\":1}}],[\"添加目标\",{\"1\":{\"340\":1}}],[\"添加监听以触发\",{\"1\":{\"332\":1}}],[\"添加监听\",{\"1\":{\"332\":2,\"438\":1}}],[\"添加监听事件\",{\"1\":{\"189\":2}}],[\"添加了监听\",{\"1\":{\"332\":1}}],[\"添加点击事件\",{\"1\":{\"289\":1}}],[\"添加为\",{\"1\":{\"266\":1}}],[\"添加到\",{\"1\":{\"259\":1,\"265\":1}}],[\"添加到heap或者timer\",{\"1\":{\"235\":1}}],[\"添加到链表头部\",{\"1\":{\"232\":1}}],[\"添加\",{\"1\":{\"189\":1,\"426\":1,\"670\":1}}],[\"添加动画\",{\"0\":{\"147\":1}}],[\"添加渐变背景\",{\"0\":{\"146\":1}}],[\"添加方法先用二分法查找key对应的位置\",{\"1\":{\"87\":1}}],[\"添加依赖\",{\"1\":{\"2\":1,\"104\":1}}],[\"查找数据\",{\"1\":{\"869\":1}}],[\"查找下一个顶点\",{\"1\":{\"850\":1}}],[\"查找没有后继点的顶点\",{\"1\":{\"850\":1}}],[\"查找其未访问的邻接点\",{\"1\":{\"848\":1}}],[\"查找当前栈顶元素未访问的邻接点\",{\"1\":{\"847\":1}}],[\"查找\",{\"1\":{\"759\":2,\"836\":1,\"881\":1,\"902\":1}}],[\"查找符合条件的第一个值\",{\"1\":{\"652\":1}}],[\"查找是否已经存在key对应的值\",{\"1\":{\"523\":1}}],[\"查找对应位置的node\",{\"1\":{\"502\":1}}],[\"查阅文档定义可知\",{\"1\":{\"276\":1}}],[\"查阅源码可知\",{\"1\":{\"258\":1}}],[\"查阅\",{\"1\":{\"243\":1}}],[\"查阅相应的资料后大体有以下几种方案\",{\"1\":{\"30\":1}}],[\"查看汉诺塔和递归排序源码\",{\"1\":{\"914\":1}}],[\"查看链表源码\",{\"1\":{\"882\":1}}],[\"查看源码\",{\"1\":{\"864\":1,\"929\":1}}],[\"查看拓扑排序源码\",{\"1\":{\"851\":1}}],[\"查看dfs\",{\"1\":{\"851\":1}}],[\"查看哈夫曼编码源码\",{\"1\":{\"838\":1}}],[\"查看二叉树源码\",{\"1\":{\"838\":1}}],[\"查看帮助信息\",{\"1\":{\"808\":1}}],[\"查看所有别名\",{\"1\":{\"698\":1}}],[\"查看所有变量\",{\"1\":{\"697\":1}}],[\"查看shell命令历史\",{\"1\":{\"697\":1}}],[\"查看指令的位置\",{\"1\":{\"696\":1}}],[\"查看类型\",{\"1\":{\"696\":1}}],[\"查看环境变量\",{\"1\":{\"696\":1}}],[\"查看打包文件的内容\",{\"1\":{\"695\":1}}],[\"查看用户相关信息\",{\"1\":{\"691\":1}}],[\"查看用户所在群组\",{\"1\":{\"691\":1}}],[\"查看某人或者自己相关的uid\",{\"1\":{\"691\":1}}],[\"查看文件格式信息\",{\"1\":{\"685\":1}}],[\"查看文件信息\",{\"0\":{\"685\":1}}],[\"查看当前仓库有几个分支\",{\"1\":{\"674\":1}}],[\"查看实现\",{\"1\":{\"360\":1}}],[\"查看\",{\"0\":{\"691\":1},\"1\":{\"204\":2,\"805\":1,\"808\":1}}],[\"查看gc\",{\"1\":{\"86\":1}}],[\"查询数据等操作\",{\"1\":{\"781\":1}}],[\"查询是否有\",{\"1\":{\"767\":1}}],[\"查询是否已经加载该类\",{\"1\":{\"485\":1}}],[\"查询内容\",{\"1\":{\"702\":1}}],[\"查询本地是否有符合该描述\",{\"1\":{\"138\":1}}],[\"查询到已经注册的内核\",{\"1\":{\"138\":1}}],[\"查询所需的服务呢\",{\"1\":{\"138\":1}}],[\"复数\",{\"1\":{\"723\":1}}],[\"复现出来\",{\"1\":{\"418\":1}}],[\"复制\",{\"0\":{\"682\":1}}],[\"复制算法\",{\"0\":{\"471\":1}}],[\"复制了一次\",{\"1\":{\"138\":1}}],[\"复制数组\",{\"1\":{\"86\":1}}],[\"复杂度\",{\"1\":{\"272\":1}}],[\"复杂度o\",{\"1\":{\"272\":1}}],[\"复杂的逻辑单独提取出来\",{\"1\":{\"126\":1}}],[\"复杂的视图可以组合复用多个\",{\"1\":{\"123\":1}}],[\"复杂项目可选\",{\"1\":{\"126\":1}}],[\"复用\",{\"1\":{\"55\":1}}],[\"涉及到新建\",{\"1\":{\"86\":1}}],[\"涉及到的类\",{\"1\":{\"335\":1}}],[\"涉及到的类以及他们的关系图如下\",{\"1\":{\"329\":1}}],[\"涉及到的类主要有\",{\"1\":{\"329\":2}}],[\"涉及到的\",{\"1\":{\"57\":1}}],[\"避免切换线程\",{\"1\":{\"622\":1}}],[\"避免因为\",{\"1\":{\"500\":1}}],[\"避免了将其包装为一个node对象的开销\",{\"1\":{\"523\":1}}],[\"避免了将其封装为node对象带来的内存消耗\",{\"1\":{\"85\":1}}],[\"避免了\",{\"1\":{\"360\":1}}],[\"避免\",{\"1\":{\"126\":1,\"604\":1}}],[\"避免内存泄露\",{\"1\":{\"124\":1}}],[\"避免在\",{\"1\":{\"123\":1}}],[\"避免泄漏\",{\"1\":{\"104\":1}}],[\"避免出现分配内存\",{\"1\":{\"55\":1}}],[\"他内部有n个有序的子数组\",{\"1\":{\"919\":1}}],[\"他可以负责fragment\",{\"1\":{\"783\":1}}],[\"他和上述isolate\",{\"1\":{\"757\":1}}],[\"他不会处理异常\",{\"1\":{\"658\":1}}],[\"他运行在线程当中\",{\"1\":{\"622\":1}}],[\"他通过监听offset的变化展示children的一部分来实现滑动的视觉效果\",{\"1\":{\"427\":1}}],[\"他也创建了一个statelesselement\",{\"1\":{\"264\":1}}],[\"他创建的\",{\"1\":{\"259\":1}}],[\"他会根据当前是\",{\"1\":{\"710\":1}}],[\"他会根据客户端和服务端是否在同一进程而决定返回\",{\"1\":{\"83\":1}}],[\"他会\",{\"1\":{\"428\":1}}],[\"他会占据父级给的最大空间\",{\"1\":{\"427\":1}}],[\"他会强制\",{\"1\":{\"276\":1}}],[\"他会强制将child的size改为\",{\"1\":{\"258\":1}}],[\"他对应的祖先节点就是持有\",{\"1\":{\"256\":1}}],[\"他对应的实现是\",{\"1\":{\"232\":1}}],[\"他又是如何实现与\",{\"1\":{\"244\":1}}],[\"他就会立即执行属于\",{\"1\":{\"223\":1}}],[\"他们凭空创建\",{\"1\":{\"767\":1}}],[\"他们从\",{\"1\":{\"767\":1}}],[\"他们之间通过不同的action连接起来\",{\"1\":{\"783\":1}}],[\"他们之间共享\",{\"1\":{\"762\":1}}],[\"他们之间的关系可以表示为下图\",{\"1\":{\"205\":1}}],[\"他们之间的关系可以用下图表示\",{\"1\":{\"204\":1}}],[\"他们会根据\",{\"1\":{\"424\":1}}],[\"他们根据各自的特点对图片进行处理后\",{\"1\":{\"398\":1}}],[\"他们都继承自powerimagebaserequest\",{\"1\":{\"398\":1}}],[\"他们都是concurrency\",{\"1\":{\"221\":1}}],[\"他们提供了animation<t>\",{\"1\":{\"361\":1}}],[\"他们相交的区域也从圆变为圆角\",{\"1\":{\"343\":1}}],[\"他们有自己的队列\",{\"1\":{\"292\":1}}],[\"他们的关系大致如图\",{\"1\":{\"740\":1}}],[\"他们的关系如下\",{\"1\":{\"265\":1,\"314\":1}}],[\"他们的具体实现在timer\",{\"1\":{\"234\":1}}],[\"他们的执行顺序如下\",{\"1\":{\"221\":1}}],[\"他的主要实现是\",{\"1\":{\"770\":1}}],[\"他的主要逻辑在\",{\"1\":{\"423\":1}}],[\"他的主要逻辑都在\",{\"1\":{\"264\":1}}],[\"他的this引用就已经被发布出去了\",{\"1\":{\"604\":1}}],[\"他的逻辑在network\",{\"1\":{\"383\":1}}],[\"他的逻辑如下\",{\"1\":{\"263\":1}}],[\"他的构造函数分别是\",{\"1\":{\"382\":1}}],[\"他的obtainkey\",{\"1\":{\"374\":1}}],[\"他的两个构造方法分别是\",{\"1\":{\"319\":1}}],[\"他的子类是有限的\",{\"1\":{\"615\":1}}],[\"他的子类也可以根据需要重写此方法以返回自己的\",{\"1\":{\"424\":1}}],[\"他的子类\",{\"1\":{\"310\":1}}],[\"他的子widget可以通过他来获取这些状态\",{\"1\":{\"271\":1}}],[\"他的线程和\",{\"1\":{\"285\":1}}],[\"他的继承关系是\",{\"1\":{\"269\":1}}],[\"他的内容比较简单\",{\"1\":{\"264\":1}}],[\"他的child也正是我们的\",{\"1\":{\"262\":1}}],[\"他的几个属性如下\",{\"1\":{\"261\":1}}],[\"他的定义如下\",{\"1\":{\"243\":1}}],[\"他的实现在\",{\"1\":{\"237\":1}}],[\"他的实现如下\",{\"1\":{\"237\":1}}],[\"他的实现是\",{\"1\":{\"234\":1}}],[\"他的实现应该是线程安全的\",{\"1\":{\"205\":1}}],[\"他的\",{\"1\":{\"92\":1,\"217\":1,\"246\":1,\"256\":1,\"375\":1}}],[\"他的优点主要在于没有对保存的数据二次封装\",{\"1\":{\"86\":1}}],[\"他是将key和value全部保存在一个数组中\",{\"1\":{\"85\":1}}],[\"平衡树\",{\"1\":{\"869\":1}}],[\"平台特有\",{\"1\":{\"580\":1}}],[\"平台来说\",{\"1\":{\"85\":1}}],[\"平移的时候\",{\"1\":{\"74\":1}}],[\"保持自身大小\",{\"1\":{\"440\":1}}],[\"保持一致\",{\"1\":{\"270\":2,\"343\":1,\"416\":1}}],[\"保存在手机端\",{\"1\":{\"556\":1}}],[\"保存的是t\",{\"1\":{\"541\":1}}],[\"保存的是一个引用类型的对象\",{\"1\":{\"527\":1}}],[\"保存的便是t\",{\"1\":{\"540\":1}}],[\"保存的就是属于当前线程的独立的变量\",{\"1\":{\"529\":1}}],[\"保存对象的\",{\"1\":{\"516\":1}}],[\"保存值\",{\"0\":{\"505\":1}}],[\"保存没有被使用的\",{\"1\":{\"418\":1}}],[\"保存创建的请求\",{\"1\":{\"398\":1}}],[\"保存发起的图片请求\",{\"1\":{\"398\":1}}],[\"保存\",{\"1\":{\"380\":1,\"506\":2,\"523\":3}}],[\"保存数据\",{\"0\":{\"499\":1,\"786\":1},\"1\":{\"96\":1,\"737\":1}}],[\"保存数据和java\",{\"1\":{\"85\":1}}],[\"保证线程安全\",{\"1\":{\"608\":1}}],[\"保证线程安全的实质是保证对数据操作的原子性\",{\"1\":{\"601\":1}}],[\"保证同一时刻只能被一个线程使用\",{\"1\":{\"606\":1}}],[\"保证\",{\"0\":{\"633\":1},\"1\":{\"445\":1,\"494\":1}}],[\"保证了\",{\"1\":{\"444\":1}}],[\"保证了布局在不同大小的屏幕上\",{\"1\":{\"100\":1}}],[\"保证其可以正常访问\",{\"1\":{\"6\":1}}],[\"日志\",{\"1\":{\"809\":1}}],[\"日记categories\",{\"1\":{\"809\":1}}],[\"日期\",{\"1\":{\"675\":1}}],[\"日本\",{\"1\":{\"612\":1}}],[\"日所在的周就是当年的第一周\",{\"1\":{\"577\":1}}],[\"日\",{\"1\":{\"576\":1}}],[\"日在在这个跨年周\",{\"1\":{\"575\":1}}],[\"日的星期一开始的一周\",{\"1\":{\"575\":1}}],[\"日至\",{\"1\":{\"575\":1}}],[\"日这一周\",{\"1\":{\"575\":1}}],[\"日常开发中\",{\"1\":{\"85\":1}}],[\"日后逐渐深入源码\",{\"1\":{\"0\":1}}],[\"两\",{\"1\":{\"912\":1}}],[\"两条这样的路径之前的值的大小没有一定的关系\",{\"1\":{\"856\":1}}],[\"两部分\",{\"1\":{\"794\":1}}],[\"两大部分\",{\"1\":{\"300\":1}}],[\"两类\",{\"1\":{\"243\":1}}],[\"两种计算\",{\"1\":{\"517\":1}}],[\"两种加载图片的方式\",{\"1\":{\"400\":1}}],[\"两种方案展示图片的过程\",{\"1\":{\"397\":1}}],[\"两种方法使用到的\",{\"1\":{\"101\":1}}],[\"两种\",{\"1\":{\"286\":1,\"301\":1}}],[\"两种情况\",{\"1\":{\"112\":1}}],[\"两者占用内存小\",{\"1\":{\"523\":1}}],[\"两者可以相互访问\",{\"1\":{\"205\":1}}],[\"两者应该依赖于抽象\",{\"1\":{\"126\":1}}],[\"两者的不同之处在于\",{\"1\":{\"282\":1}}],[\"两者的差异在于在实现coordinatorlayout\",{\"1\":{\"112\":1}}],[\"两者的连线就是\",{\"1\":{\"57\":1}}],[\"两者不一致\",{\"1\":{\"92\":1}}],[\"两者一致\",{\"1\":{\"92\":1}}],[\"两个顶点对应的链表\",{\"1\":{\"844\":1}}],[\"两个顶点之间有边连接\",{\"1\":{\"841\":1}}],[\"两个最小的字符\",{\"1\":{\"837\":1}}],[\"两个\",{\"1\":{\"816\":1}}],[\"两个流中的值一一对应\",{\"1\":{\"659\":1}}],[\"两个方法\",{\"1\":{\"333\":1}}],[\"两个方法都只是用来初始化了imessenger\",{\"1\":{\"83\":1}}],[\"两个是同一个对象\",{\"1\":{\"263\":1}}],[\"两个控制点的坐标为\",{\"1\":{\"145\":1}}],[\"两个原子操作\",{\"1\":{\"137\":1}}],[\"两个构造方法我们也可以知道\",{\"1\":{\"83\":1}}],[\"取出\",{\"1\":{\"837\":1}}],[\"取出一个\",{\"1\":{\"761\":1}}],[\"取出事件并执行\",{\"1\":{\"221\":1}}],[\"取余数\",{\"1\":{\"501\":1}}],[\"取得其最大值\",{\"1\":{\"439\":1}}],[\"取得服务端的\",{\"1\":{\"83\":1}}],[\"取值\",{\"1\":{\"412\":1,\"723\":1}}],[\"取自\",{\"1\":{\"355\":1}}],[\"取的是主线程的\",{\"1\":{\"193\":1}}],[\"取消网络请求cancel\",{\"1\":{\"712\":1}}],[\"取消之前的收集器\",{\"1\":{\"652\":1}}],[\"取消所有的子协程来让主协程结束\",{\"1\":{\"638\":1}}],[\"取消子协程\",{\"1\":{\"638\":1}}],[\"取消接收来自这个通道的剩余元素\",{\"1\":{\"636\":1}}],[\"取消服务\",{\"1\":{\"41\":1}}],[\"取消绑定时回调\",{\"1\":{\"38\":1}}],[\"取消闹钟\",{\"0\":{\"16\":1}}],[\"关键代码\",{\"0\":{\"737\":1}}],[\"关键词参数\",{\"1\":{\"726\":1}}],[\"关键字\",{\"1\":{\"508\":1}}],[\"关键字用于修改远程调用的行为\",{\"1\":{\"83\":1}}],[\"关键就在\",{\"1\":{\"370\":1}}],[\"关键方法\",{\"1\":{\"357\":1}}],[\"关系\",{\"1\":{\"314\":1}}],[\"关闭通道并从中删除所有缓存的元素\",{\"1\":{\"636\":1}}],[\"关闭通道\",{\"1\":{\"636\":1}}],[\"关闭dart\",{\"1\":{\"247\":1}}],[\"关闭\",{\"1\":{\"247\":1}}],[\"关闭硬件加速\",{\"1\":{\"131\":1}}],[\"关注点分离\",{\"1\":{\"126\":1}}],[\"关联的\",{\"1\":{\"768\":1}}],[\"关联起来执行\",{\"1\":{\"763\":1}}],[\"关联起来\",{\"1\":{\"124\":1}}],[\"关联\",{\"1\":{\"123\":2}}],[\"关于oob\",{\"1\":{\"761\":1}}],[\"关于枚举的更详细资料\",{\"1\":{\"550\":1}}],[\"关于是否应该在\",{\"1\":{\"522\":1}}],[\"关于动画的开始\",{\"1\":{\"300\":1,\"314\":1}}],[\"关于他主要有两个方法\",{\"1\":{\"228\":1}}],[\"关于fragment加入到activity的\",{\"1\":{\"217\":1}}],[\"关于构造函数\",{\"1\":{\"193\":1}}],[\"关于硬件加速更详细的说明可以参考这里\",{\"1\":{\"131\":1}}],[\"关于\",{\"0\":{\"0\":1},\"1\":{\"43\":1,\"123\":1,\"329\":1,\"508\":1,\"522\":1}}],[\"kshutdown\",{\"1\":{\"761\":2}}],[\"kforbidmarked\",{\"1\":{\"753\":1}}],[\"kfreeport\",{\"1\":{\"247\":1}}],[\"kvmisolatename\",{\"1\":{\"753\":1}}],[\"khtml\",{\"1\":{\"731\":1}}],[\"kw\",{\"1\":{\"726\":1}}],[\"kproperty<\",{\"1\":{\"619\":4}}],[\"kg\",{\"1\":{\"557\":4}}],[\"k已经被回收了\",{\"1\":{\"528\":1}}],[\"kreleasemode\",{\"1\":{\"376\":1}}],[\"kdebugmode\",{\"1\":{\"302\":1,\"368\":1,\"370\":1}}],[\"kdeletedport\",{\"1\":{\"247\":1}}],[\"kok\",{\"1\":{\"761\":9}}],[\"koobpriority\",{\"1\":{\"745\":1,\"761\":4}}],[\"kozsir\",{\"1\":{\"267\":1}}],[\"kotlincn\",{\"1\":{\"663\":1}}],[\"kotlinx\",{\"1\":{\"622\":4,\"638\":2}}],[\"kotlin\",{\"0\":{\"612\":1,\"613\":1,\"616\":1,\"617\":1,\"628\":1,\"648\":1,\"661\":1},\"1\":{\"80\":1,\"126\":1,\"128\":2,\"195\":1,\"196\":1,\"204\":2,\"209\":3,\"612\":1,\"614\":2,\"621\":1,\"622\":1,\"625\":1,\"626\":1,\"627\":3,\"636\":1,\"647\":2,\"649\":2,\"660\":1}}],[\"kclassid\",{\"1\":{\"248\":1}}],[\"kminint\",{\"1\":{\"247\":1}}],[\"kmask2\",{\"1\":{\"247\":2}}],[\"kmask1\",{\"1\":{\"247\":2}}],[\"knife\",{\"1\":{\"564\":1}}],[\"knewport\",{\"1\":{\"247\":1}}],[\"knormalpriority\",{\"1\":{\"247\":1,\"759\":1,\"761\":4}}],[\"known\",{\"1\":{\"348\":1,\"771\":1}}],[\"know\",{\"1\":{\"224\":1,\"233\":2,\"237\":1,\"350\":1,\"598\":1}}],[\"kliveport\",{\"1\":{\"247\":1}}],[\"karray\",{\"1\":{\"247\":1}}],[\"kapt\",{\"1\":{\"209\":3}}],[\"kisaotruntime\",{\"1\":{\"753\":3}}],[\"kisolateliboobmsg\",{\"1\":{\"745\":1}}],[\"kisweb\",{\"1\":{\"253\":1}}],[\"kinvalidthreadjoinid\",{\"1\":{\"247\":1}}],[\"kinterruptmessagesize\",{\"1\":{\"237\":3}}],[\"kill\",{\"1\":{\"139\":1,\"742\":4,\"745\":1}}],[\"k\",{\"0\":{\"93\":1},\"1\":{\"247\":1,\"500\":2,\"528\":2,\"578\":2,\"629\":1,\"703\":1,\"862\":1}}],[\"ktimedout\",{\"1\":{\"761\":1}}],[\"ktimerid\",{\"1\":{\"237\":1}}],[\"kthreadinnative\",{\"1\":{\"753\":1}}],[\"kthreadd\",{\"1\":{\"140\":1}}],[\"ktransparentimage\",{\"1\":{\"383\":1}}],[\"kt\",{\"1\":{\"77\":1,\"141\":1,\"615\":1}}],[\"ketset\",{\"1\":{\"850\":2}}],[\"keptalive\",{\"1\":{\"376\":1}}],[\"kept\",{\"1\":{\"247\":1,\"351\":1}}],[\"kernelisolate\",{\"1\":{\"753\":3}}],[\"kernel\",{\"1\":{\"140\":3,\"752\":3,\"753\":5,\"757\":30,\"763\":7,\"765\":6,\"766\":2,\"767\":4,\"768\":1,\"771\":1}}],[\"keyarr\",{\"1\":{\"847\":4,\"848\":4}}],[\"keywords\",{\"1\":{\"726\":2}}],[\"key=value\",{\"1\":{\"697\":1,\"699\":1}}],[\"keygen\",{\"1\":{\"670\":1}}],[\"keygenerator\",{\"1\":{\"557\":2}}],[\"keyboarddismissbehavior\",{\"1\":{\"423\":1,\"436\":1}}],[\"keytomd5\",{\"1\":{\"383\":1}}],[\"keyedsubtree\",{\"1\":{\"347\":1}}],[\"keyevent\",{\"1\":{\"25\":4}}],[\"keyset\",{\"1\":{\"523\":1}}],[\"keys\",{\"1\":{\"90\":3,\"523\":1,\"670\":2,\"847\":1,\"848\":1,\"850\":1}}],[\"keycode\",{\"1\":{\"25\":1}}],[\"key\",{\"0\":{\"87\":1,\"88\":1,\"89\":1,\"93\":1,\"94\":1,\"95\":1},\"1\":{\"20\":1,\"39\":1,\"63\":1,\"85\":4,\"86\":1,\"87\":8,\"88\":4,\"89\":4,\"92\":21,\"93\":2,\"94\":2,\"104\":4,\"105\":1,\"159\":1,\"173\":4,\"179\":4,\"255\":1,\"256\":6,\"259\":8,\"262\":6,\"264\":8,\"273\":16,\"276\":8,\"295\":1,\"302\":4,\"309\":4,\"310\":4,\"311\":4,\"331\":4,\"342\":4,\"346\":5,\"347\":2,\"349\":1,\"351\":1,\"365\":5,\"374\":11,\"376\":12,\"377\":1,\"383\":12,\"384\":4,\"392\":2,\"393\":2,\"395\":5,\"398\":1,\"500\":4,\"501\":1,\"502\":1,\"503\":1,\"523\":5,\"525\":1,\"527\":5,\"557\":11,\"612\":1,\"670\":5,\"702\":2,\"827\":2,\"850\":1,\"858\":2,\"859\":8,\"880\":9}}],[\"keepalive\",{\"1\":{\"351\":1,\"375\":2,\"376\":1}}],[\"keepplaceholder\",{\"1\":{\"347\":2}}],[\"keep\",{\"1\":{\"0\":1,\"30\":3,\"126\":1,\"193\":1,\"247\":1,\"761\":1}}],[\"源文件到\",{\"1\":{\"718\":1}}],[\"源文件路径等有不存在路径时的警告\",{\"1\":{\"566\":1}}],[\"源码要点浅析\",{\"1\":{\"508\":1}}],[\"源码中表示具体的值\",{\"1\":{\"461\":1}}],[\"源码中\",{\"1\":{\"265\":1}}],[\"源码的简单分析\",{\"1\":{\"190\":1}}],[\"源码解析\",{\"0\":{\"190\":1,\"513\":1}}],[\"源码路径\",{\"1\":{\"168\":1}}],[\"源码及使用见github\",{\"1\":{\"132\":1}}],[\"源码\",{\"0\":{\"120\":1,\"154\":1,\"168\":1,\"733\":1,\"829\":1,\"838\":1,\"851\":1,\"864\":1,\"882\":1,\"891\":1,\"899\":1,\"906\":1,\"914\":1,\"929\":1},\"1\":{\"96\":3,\"111\":1,\"558\":1,\"763\":1}}],[\"源码实现\",{\"1\":{\"82\":1}}],[\"源码详解\",{\"0\":{\"81\":1}}],[\"源码分析一下\",{\"1\":{\"221\":1}}],[\"源码分析mconnection\",{\"1\":{\"138\":1}}],[\"源码分析\",{\"0\":{\"301\":1,\"315\":1,\"330\":1,\"356\":1,\"404\":1,\"423\":1,\"435\":1,\"739\":1,\"746\":1},\"1\":{\"77\":1,\"595\":1,\"596\":1,\"598\":1}}],[\"源代码编译成内核的过程\",{\"1\":{\"765\":1}}],[\"源代码已经上传github\",{\"1\":{\"720\":1}}],[\"源代码路径\",{\"1\":{\"180\":1}}],[\"源代码在我的\",{\"1\":{\"154\":1}}],[\"源代码\",{\"0\":{\"720\":1},\"1\":{\"29\":1}}],[\"子节点比插入值小的地方\",{\"1\":{\"858\":1}}],[\"子节点的关键字\",{\"1\":{\"856\":1}}],[\"子句查询\",{\"1\":{\"646\":1}}],[\"子句\",{\"1\":{\"646\":4}}],[\"子句不能正常完成时的警告\",{\"1\":{\"566\":1}}],[\"子协程执行完毕才会退出\",{\"1\":{\"623\":2}}],[\"子函数\",{\"1\":{\"621\":2}}],[\"子线程run\",{\"1\":{\"560\":1}}],[\"子级数量尽可能少\",{\"1\":{\"445\":1}}],[\"子级的\",{\"1\":{\"445\":1}}],[\"子类如果有与父类同名方法\",{\"1\":{\"728\":1}}],[\"子类继承父类\",{\"1\":{\"728\":1}}],[\"子类方法不会自己调用父类方法\",{\"1\":{\"728\":1}}],[\"子类最多返回和父类一样范围的参数\",{\"1\":{\"618\":1}}],[\"子类至少接收和父类一样范围的参数\",{\"1\":{\"618\":1}}],[\"子类等不受影响\",{\"1\":{\"497\":1}}],[\"子类必须实现的方法\",{\"1\":{\"333\":1}}],[\"子类必须实现此方法\",{\"1\":{\"306\":1}}],[\"子类只需重写\",{\"1\":{\"317\":1}}],[\"子类可以选择自己主动监听\",{\"1\":{\"307\":1}}],[\"子类可以使用其获取对应的\",{\"1\":{\"304\":1}}],[\"子类可以实现该\",{\"1\":{\"62\":1}}],[\"子类在此方法内部\",{\"1\":{\"303\":1}}],[\"子类\",{\"1\":{\"300\":1,\"307\":1,\"309\":1,\"314\":1,\"358\":1}}],[\"子类中\",{\"1\":{\"253\":1}}],[\"子\",{\"1\":{\"76\":1,\"112\":3}}],[\"zzg1229059735\",{\"1\":{\"528\":1}}],[\"zi\",{\"1\":{\"528\":1}}],[\"zip将两个流\",{\"1\":{\"631\":1}}],[\"zip\",{\"1\":{\"492\":1,\"631\":1,\"659\":1}}],[\"zero\",{\"1\":{\"233\":1,\"235\":5,\"236\":4,\"237\":1,\"238\":3,\"307\":1,\"320\":1,\"330\":1,\"331\":1,\"332\":1,\"427\":1,\"440\":1}}],[\"zones\",{\"1\":{\"231\":1}}],[\"zonedelegate\",{\"1\":{\"224\":1}}],[\"zonefunction\",{\"1\":{\"224\":1}}],[\"zone\",{\"1\":{\"224\":16,\"232\":3,\"233\":12,\"234\":8,\"243\":1,\"244\":1,\"247\":2,\"296\":3,\"297\":1,\"578\":6,\"752\":1,\"753\":2,\"759\":20}}],[\"zygote\",{\"1\":{\"140\":6}}],[\"zh\",{\"1\":{\"811\":1}}],[\"zhy\",{\"1\":{\"708\":1,\"711\":3,\"712\":2}}],[\"zhihu\",{\"1\":{\"137\":1}}],[\"zhang31jian\",{\"1\":{\"105\":1}}],[\"zhushou91\",{\"1\":{\"104\":1}}],[\"z\",{\"1\":{\"76\":4,\"341\":1,\"578\":2,\"665\":1,\"695\":1,\"753\":1}}],[\"三数据项取中\",{\"1\":{\"926\":1,\"927\":1}}],[\"三角数\",{\"1\":{\"911\":1}}],[\"三步\",{\"1\":{\"439\":1}}],[\"三种运算\",{\"1\":{\"358\":1}}],[\"三\",{\"1\":{\"254\":1,\"517\":1}}],[\"三者的关系来梳理一下\",{\"1\":{\"251\":1}}],[\"三者关系\",{\"1\":{\"44\":1}}],[\"三阶贝塞尔曲线\",{\"1\":{\"141\":1,\"143\":1}}],[\"三部分\",{\"1\":{\"126\":1}}],[\"三个\",{\"1\":{\"76\":1}}],[\"显式动画\",{\"1\":{\"300\":1,\"301\":1,\"309\":1,\"312\":1,\"314\":1,\"329\":1}}],[\"显然单纯的使用\",{\"1\":{\"798\":1}}],[\"显然\",{\"1\":{\"757\":1}}],[\"显然这样十分危险\",{\"1\":{\"547\":1}}],[\"显然我们是无法用\",{\"1\":{\"202\":1}}],[\"显然又调用了\",{\"1\":{\"25\":1}}],[\"显示没有该字符的行号\",{\"1\":{\"702\":1}}],[\"显示压缩前后压缩比\",{\"1\":{\"694\":1}}],[\"显示在\",{\"1\":{\"424\":1}}],[\"显示在屏幕上面\",{\"1\":{\"405\":1}}],[\"显示在锁屏界面上\",{\"1\":{\"76\":1}}],[\"显示为边长约为\",{\"1\":{\"343\":1}}],[\"显示为直径为\",{\"1\":{\"343\":1}}],[\"显示动画\",{\"1\":{\"310\":2}}],[\"显示\",{\"1\":{\"111\":1,\"783\":1}}],[\"让您摆脱编写样板代码的工作并简化复杂任务\",{\"1\":{\"781\":1}}],[\"让我推翻了上一次的结论\",{\"1\":{\"579\":1}}],[\"让我们在用反射时访问私有变量\",{\"1\":{\"553\":1}}],[\"让我们分别看一下他们是如何获取的\",{\"1\":{\"395\":1}}],[\"让我们分析一下这个\",{\"1\":{\"263\":1}}],[\"让我们来分别看一下\",{\"1\":{\"391\":1}}],[\"让我们来分析一下sendport\",{\"1\":{\"244\":1}}],[\"让我们再看一下\",{\"1\":{\"259\":1,\"405\":1}}],[\"让我们再看一下他的具体实现\",{\"1\":{\"244\":1}}],[\"让我们接下来一个一个分析一下\",{\"1\":{\"251\":1}}],[\"让我们使用\",{\"1\":{\"251\":1}}],[\"让我们运行一个\",{\"1\":{\"251\":1}}],[\"让我们挨个分析一下\",{\"1\":{\"247\":1}}],[\"让我们看一下他是怎么来的\",{\"1\":{\"756\":1}}],[\"让我们看一下在\",{\"1\":{\"747\":1}}],[\"让我们看一下这三个值的来历\",{\"1\":{\"439\":1}}],[\"让我们看一下这个方法的实现\",{\"1\":{\"243\":1}}],[\"让我们看一下flexible的源码\",{\"1\":{\"276\":1}}],[\"让我们看一下\",{\"1\":{\"265\":1}}],[\"让我们看一下super\",{\"1\":{\"265\":1}}],[\"让我们看一下上述方法的具体实现\",{\"1\":{\"224\":1}}],[\"让我们先看一下第一个方法\",{\"1\":{\"228\":1}}],[\"让其实现hasfragmentinjector即可\",{\"1\":{\"217\":1}}],[\"让任意向下的滚动都会导致该\",{\"1\":{\"111\":1}}],[\"让\",{\"1\":{\"76\":1,\"355\":1,\"418\":4,\"439\":1}}],[\"让你深入理解\",{\"1\":{\"44\":1}}],[\"值使用两个字节来表示\",{\"1\":{\"519\":1}}],[\"值对hashmap的数组长度length的余数\",{\"1\":{\"504\":1}}],[\"值对应状态而无动画\",{\"1\":{\"308\":1}}],[\"值的\",{\"1\":{\"422\":1}}],[\"值的构造方法\",{\"1\":{\"319\":1}}],[\"值之间创建线性的插值\",{\"1\":{\"358\":1}}],[\"值为其他类型\",{\"1\":{\"523\":1}}],[\"值为\",{\"1\":{\"317\":1}}],[\"值和的二分之一\",{\"1\":{\"317\":1}}],[\"值和之前不一样的才会触发动画\",{\"1\":{\"308\":1}}],[\"值一样则无动画\",{\"1\":{\"308\":1}}],[\"值rdp还是未知的\",{\"1\":{\"196\":1}}],[\"值m\",{\"1\":{\"196\":1}}],[\"值不一样\",{\"1\":{\"101\":1}}],[\"值\",{\"1\":{\"75\":1,\"92\":1,\"158\":1,\"305\":1,\"307\":1,\"358\":1,\"413\":1,\"500\":2}}],[\"利用堆根节点关键值最大这一特性\",{\"1\":{\"860\":1}}],[\"利用堆根节点关键值最大这个属性\",{\"1\":{\"857\":1}}],[\"利用上述的参数可以并通过generaterequest\",{\"1\":{\"711\":1}}],[\"利用readresolve\",{\"1\":{\"583\":1}}],[\"利用该\",{\"1\":{\"189\":1}}],[\"利用\",{\"0\":{\"672\":1,\"790\":1},\"1\":{\"75\":1,\"285\":1}}],[\"重复步骤\",{\"1\":{\"913\":1,\"927\":1}}],[\"重复步骤1\",{\"1\":{\"880\":1}}],[\"重复\",{\"1\":{\"848\":1,\"896\":1}}],[\"重复闹钟具有以下特征\",{\"1\":{\"11\":1}}],[\"重点修改script\",{\"1\":{\"794\":1}}],[\"重建二叉树\",{\"0\":{\"665\":1},\"1\":{\"667\":1}}],[\"重入锁\",{\"1\":{\"606\":1}}],[\"重新下载\",{\"1\":{\"376\":1}}],[\"重新安排绘制\",{\"1\":{\"333\":1}}],[\"重新\",{\"1\":{\"312\":1}}],[\"重新创建新的\",{\"1\":{\"322\":1}}],[\"重新创建\",{\"1\":{\"273\":1}}],[\"重新绘制了\",{\"1\":{\"273\":1}}],[\"重新绘制\",{\"1\":{\"273\":1,\"440\":1}}],[\"重新执行state的build\",{\"1\":{\"269\":1}}],[\"重写父类方法\",{\"1\":{\"566\":1}}],[\"重写findclass\",{\"1\":{\"486\":1}}],[\"重写了父类的\",{\"1\":{\"360\":1}}],[\"重写了createstate\",{\"1\":{\"282\":1}}],[\"重写对应方法\",{\"1\":{\"191\":1}}],[\"重写\",{\"1\":{\"153\":1,\"394\":1}}],[\"重写该类主要是为了实现\",{\"1\":{\"153\":1}}],[\"重合部分\",{\"1\":{\"132\":1}}],[\"重装上阵\",{\"1\":{\"126\":1,\"128\":1}}],[\"重要性\",{\"1\":{\"182\":1}}],[\"重要\",{\"1\":{\"126\":1,\"287\":1}}],[\"重绘\",{\"1\":{\"75\":2}}],[\"通用数据结构速度统计\",{\"1\":{\"869\":1}}],[\"通用数据结构\",{\"0\":{\"869\":1},\"1\":{\"868\":1}}],[\"通用方法\",{\"1\":{\"740\":1}}],[\"通道\",{\"1\":{\"645\":1,\"646\":1}}],[\"通信原语表示未来可知\",{\"1\":{\"645\":1}}],[\"通信\",{\"0\":{\"398\":1},\"1\":{\"138\":2,\"140\":2,\"243\":2}}],[\"通信过程如下\",{\"1\":{\"138\":1}}],[\"通信并注册\",{\"1\":{\"138\":1}}],[\"通信主要涉及一下对象\",{\"1\":{\"138\":1}}],[\"通信的所有角色\",{\"1\":{\"138\":1}}],[\"通常会丢弃优化后的代码\",{\"1\":{\"768\":1}}],[\"通常会持有\",{\"1\":{\"122\":1}}],[\"通常意味着\",{\"1\":{\"768\":1}}],[\"通常的规则是\",{\"1\":{\"640\":1}}],[\"通常是完全可见的\",{\"1\":{\"442\":1}}],[\"通常是\",{\"1\":{\"310\":1,\"312\":1,\"358\":1}}],[\"通常是一个抽象类或者接口\",{\"1\":{\"202\":1}}],[\"通常用在interaction\",{\"1\":{\"272\":1}}],[\"通常成为块设备\",{\"1\":{\"243\":1}}],[\"通常被用于实现应用程序的\",{\"1\":{\"122\":1}}],[\"通知监听者\",{\"1\":{\"410\":1}}],[\"通知结果\",{\"1\":{\"398\":1}}],[\"通知原先的inheritedelement的\",{\"1\":{\"271\":1}}],[\"通知event\",{\"1\":{\"238\":1}}],[\"通知接收信号的进程发生了什么事情\",{\"1\":{\"137\":1}}],[\"通知\",{\"1\":{\"75\":2,\"412\":1,\"413\":3}}],[\"通过不同的方法拆分成小的子数组\",{\"1\":{\"928\":1}}],[\"通过反射加载类\",{\"0\":{\"823\":1}}],[\"通过反射获取到类中使用注解的变量\",{\"1\":{\"564\":1}}],[\"通过hexo可以将我们写的markdown文档格式化为静态网页\",{\"1\":{\"791\":1}}],[\"通过hash值计算value应该保存的位置i\",{\"1\":{\"501\":1}}],[\"通过官方文档可知\",{\"1\":{\"783\":1}}],[\"通过bindingadapter对xml中的数据做预处理\",{\"1\":{\"781\":1}}],[\"通过buildowner的schedulebuildfor\",{\"1\":{\"270\":1}}],[\"通过databinding与viewmodel中的可观察数据livedata绑定在一起\",{\"1\":{\"781\":1}}],[\"通过循环遍历获取所有文章列表信息\",{\"1\":{\"731\":1}}],[\"通过okhttprequestbuilder收集网络请求的属性并传递给okhttprequest\",{\"1\":{\"713\":1}}],[\"通过travis提供的免费\",{\"1\":{\"791\":1}}],[\"通过threadlocal\",{\"1\":{\"625\":1}}],[\"通过texture和ffi技术借助原生图片加载库加载图片\",{\"1\":{\"388\":1}}],[\"通过遍历\",{\"1\":{\"569\":1}}],[\"通过这个特性我们可以确保在反序列化的时候也能实现单例\",{\"1\":{\"583\":1}}],[\"通过这种算法\",{\"1\":{\"557\":1}}],[\"通过这一个方法处理所有来自\",{\"1\":{\"125\":1}}],[\"通过atestclsobj\",{\"1\":{\"554\":1}}],[\"通过appcomponent找到我们在mainactivitymodule提供的对应的androidinjector\",{\"1\":{\"216\":1}}],[\"通过clazz\",{\"1\":{\"554\":1}}],[\"通过class\",{\"1\":{\"554\":1}}],[\"通过普通类加载器加载\",{\"1\":{\"492\":1}}],[\"通过将其设置为自定义的\",{\"1\":{\"487\":1}}],[\"通过将一个虚拟内存区域与一个硬盘上的文件关联起来\",{\"1\":{\"136\":1}}],[\"通过监听offset的变化展示children的一部分来实现滑动的视觉效果\",{\"1\":{\"428\":1}}],[\"通过根据传入的\",{\"1\":{\"422\":1}}],[\"通过powerimagebaserequest\",{\"1\":{\"398\":1}}],[\"通过proxyintent\",{\"1\":{\"179\":1}}],[\"通过上面的分析\",{\"1\":{\"393\":1,\"748\":1}}],[\"通过上述步骤\",{\"1\":{\"418\":1}}],[\"通过上述代码\",{\"1\":{\"247\":1,\"423\":1}}],[\"通过上述分析\",{\"1\":{\"63\":1,\"257\":1}}],[\"通过对比\",{\"1\":{\"393\":1}}],[\"通过对业务逻辑的进一步抽象\",{\"1\":{\"126\":1}}],[\"通过imageprovider\",{\"1\":{\"374\":1}}],[\"通过intent传递出去的imguri\",{\"1\":{\"6\":1}}],[\"通过rawimage传入到canvas\",{\"1\":{\"370\":1}}],[\"通过receiveport\",{\"1\":{\"285\":1}}],[\"通过renderobjecttowidgetelement\",{\"1\":{\"259\":1}}],[\"通过指定cachewidth和cacheheight可以让引擎按照指定大小解码图片\",{\"1\":{\"365\":1}}],[\"通过二者的配合\",{\"1\":{\"342\":1}}],[\"通过传入的\",{\"1\":{\"327\":1}}],[\"通过调用rebuild\",{\"1\":{\"271\":1}}],[\"通过synchronize\",{\"1\":{\"604\":2}}],[\"通过statefulwidget的state\",{\"1\":{\"271\":1}}],[\"通过send方法触发ioservicecallback执行对应的\",{\"1\":{\"249\":1}}],[\"通过管理\",{\"1\":{\"266\":1}}],[\"通过widget\",{\"1\":{\"265\":1}}],[\"通过一些列操作\",{\"1\":{\"249\":1}}],[\"通过与ioservice跨isolate通信\",{\"1\":{\"241\":1}}],[\"通过eventhandler发送\",{\"1\":{\"238\":1}}],[\"通过messagehandler\",{\"1\":{\"236\":1}}],[\"通过两种方式创建的\",{\"1\":{\"234\":1}}],[\"通过观察上面的两份代码\",{\"1\":{\"218\":1}}],[\"通过观察上述分析\",{\"1\":{\"126\":1}}],[\"通过该factory和mainactivitysubcomponent中的builder产生关联\",{\"1\":{\"217\":1}}],[\"通过之前的代码我们可以知道\",{\"1\":{\"217\":1}}],[\"通过查看其源码可以知道其背后是\",{\"1\":{\"205\":1}}],[\"通过重写\",{\"1\":{\"179\":1,\"395\":1}}],[\"通过系统检查后\",{\"1\":{\"179\":1}}],[\"通过自定义\",{\"1\":{\"152\":1,\"166\":1}}],[\"通过持有的\",{\"1\":{\"138\":1}}],[\"通过抽象接口解耦\",{\"1\":{\"126\":1}}],[\"通过使用\",{\"1\":{\"124\":1,\"126\":1,\"342\":1}}],[\"通过如下语句获取从用户使用时赋给这些属性的值\",{\"1\":{\"116\":1}}],[\"通过在项目中生成多个渠道的文件夹\",{\"1\":{\"106\":1}}],[\"通过通过\",{\"1\":{\"104\":1}}],[\"通过分别打印这两种\",{\"1\":{\"101\":1}}],[\"通过创建\",{\"1\":{\"57\":1}}],[\"通过for循环\",{\"1\":{\"49\":1}}],[\"通过\",{\"0\":{\"175\":1,\"790\":1,\"819\":1},\"1\":{\"39\":1,\"56\":1,\"71\":1,\"101\":1,\"110\":1,\"112\":2,\"122\":1,\"124\":1,\"125\":1,\"138\":5,\"176\":1,\"192\":1,\"243\":3,\"244\":3,\"247\":1,\"249\":1,\"256\":1,\"282\":1,\"284\":1,\"286\":1,\"314\":1,\"316\":1,\"321\":1,\"367\":1,\"385\":1,\"404\":1,\"405\":1,\"418\":2,\"420\":1,\"423\":1,\"425\":1,\"485\":1,\"612\":1,\"640\":1,\"814\":1,\"816\":1}}],[\"通过以上方案\",{\"1\":{\"30\":1}}],[\"通过他调用继承自\",{\"1\":{\"26\":1}}],[\"景色\",{\"1\":{\"75\":1}}],[\"数量已经最大了\",{\"1\":{\"760\":1}}],[\"数字\",{\"1\":{\"723\":1,\"841\":1,\"890\":1}}],[\"数字越大重要性越低\",{\"1\":{\"182\":1}}],[\"数组是一种数据存储结构\",{\"1\":{\"879\":1}}],[\"数组元素是保存着顶点和他所有的邻接点的链表\",{\"1\":{\"842\":1}}],[\"数组只能存放定义的实际类型以及他们的子类型\",{\"1\":{\"538\":1}}],[\"数组引用类型\",{\"1\":{\"521\":1}}],[\"数组占用的大小\",{\"1\":{\"519\":1}}],[\"数组数据占用大小\",{\"1\":{\"516\":1}}],[\"数组大小固定\",{\"1\":{\"879\":1}}],[\"数组大小标记length\",{\"1\":{\"516\":1}}],[\"数组大小\",{\"1\":{\"516\":1}}],[\"数组长度\",{\"1\":{\"516\":1}}],[\"数组类的可见性与其元素类的可见性一致\",{\"1\":{\"492\":1}}],[\"数组类的元素加载\",{\"1\":{\"492\":1}}],[\"数组类不通过类加载器创建\",{\"1\":{\"492\":1}}],[\"数组类\",{\"1\":{\"492\":1}}],[\"数组\",{\"0\":{\"877\":1,\"879\":1},\"1\":{\"457\":1,\"737\":1,\"868\":1,\"869\":2,\"879\":1,\"883\":1}}],[\"数据大小不可预知\",{\"1\":{\"869\":1}}],[\"数据量小\",{\"1\":{\"869\":1}}],[\"数据结构和算法\",{\"1\":{\"865\":1,\"883\":1}}],[\"数据结构\",{\"0\":{\"825\":1,\"831\":1,\"840\":1,\"854\":1,\"867\":1,\"877\":1,\"885\":1,\"894\":1,\"901\":1,\"909\":1,\"917\":1},\"2\":{\"830\":1,\"839\":1,\"853\":1,\"866\":1,\"876\":1,\"884\":1,\"893\":1,\"900\":1,\"908\":1,\"916\":1,\"930\":1}}],[\"数据访问结构\",{\"1\":{\"786\":1}}],[\"数据访问对象\",{\"1\":{\"781\":1}}],[\"数据访问对象dao和数据库database三个层次\",{\"1\":{\"781\":1}}],[\"数据并输出\",{\"0\":{\"734\":1}}],[\"数据类型\",{\"0\":{\"723\":1}}],[\"数据类\",{\"1\":{\"612\":1}}],[\"数据来自这里\",{\"1\":{\"523\":1}}],[\"数据区占用的大小如下\",{\"1\":{\"516\":1}}],[\"数据区\",{\"1\":{\"516\":1}}],[\"数据以数组或链表形式保存\",{\"1\":{\"501\":1}}],[\"数据创建含有对应的\",{\"1\":{\"393\":1}}],[\"数据共享之\",{\"1\":{\"274\":1}}],[\"数据拷贝\",{\"1\":{\"138\":1}}],[\"数据内存复制\",{\"1\":{\"137\":1}}],[\"数据从写端流入管道\",{\"1\":{\"137\":1}}],[\"数据复制\",{\"1\":{\"137\":3}}],[\"数据向下\",{\"1\":{\"126\":1}}],[\"数据驱动\",{\"1\":{\"126\":1}}],[\"数据层\",{\"1\":{\"126\":1}}],[\"数据是单向流动的\",{\"1\":{\"125\":1}}],[\"数据可以双向绑定\",{\"1\":{\"125\":1}}],[\"数据双向绑定\",{\"1\":{\"124\":1}}],[\"数据库使用实现\",{\"1\":{\"781\":1}}],[\"数据库管理缓存的网络图片加载库\",{\"1\":{\"376\":1}}],[\"数据库数据\",{\"1\":{\"126\":1}}],[\"数据库读取的工具类\",{\"1\":{\"126\":1}}],[\"数据库等\",{\"1\":{\"126\":1}}],[\"数据库\",{\"1\":{\"124\":1,\"126\":1,\"781\":1,\"786\":1}}],[\"数据读写\",{\"1\":{\"122\":1}}],[\"数据\",{\"1\":{\"122\":1,\"126\":1,\"136\":1,\"506\":1,\"735\":1}}],[\"数据流\",{\"1\":{\"71\":2}}],[\"数不一定都是相同的\",{\"1\":{\"100\":1}}],[\"数值依次递增\",{\"1\":{\"74\":1}}],[\"竖轴为\",{\"1\":{\"74\":1}}],[\"轴方向上处于所有\",{\"1\":{\"341\":1}}],[\"轴坐标\",{\"1\":{\"74\":2}}],[\"轴\",{\"1\":{\"74\":4}}],[\"之序列化详解\",{\"1\":{\"598\":1}}],[\"之刨根问底\",{\"1\":{\"562\":1}}],[\"之四\",{\"1\":{\"498\":1}}],[\"之上设置\",{\"1\":{\"417\":1}}],[\"之所以不会\",{\"1\":{\"412\":1}}],[\"之下所有区域的\",{\"1\":{\"402\":1}}],[\"之一\",{\"1\":{\"273\":1}}],[\"之类\",{\"1\":{\"422\":1}}],[\"之类中\",{\"1\":{\"272\":1}}],[\"之类的字段\",{\"1\":{\"251\":1}}],[\"之类的操作会调用这个方法\",{\"1\":{\"243\":1}}],[\"之类的方法\",{\"1\":{\"193\":1,\"617\":2}}],[\"之外\",{\"1\":{\"251\":1,\"305\":1,\"308\":1,\"311\":1,\"317\":1,\"385\":1}}],[\"之外的交给其他\",{\"1\":{\"76\":1}}],[\"之\",{\"1\":{\"232\":1,\"240\":2,\"267\":1,\"274\":1,\"508\":1,\"598\":1,\"824\":1,\"907\":1}}],[\"之旅\",{\"0\":{\"198\":1}}],[\"之间没有\",{\"1\":{\"863\":1}}],[\"之间时调用\",{\"1\":{\"358\":1}}],[\"之间\",{\"1\":{\"140\":1,\"360\":1,\"412\":3}}],[\"之间传递的intent类\",{\"1\":{\"125\":1}}],[\"之间的桥梁\",{\"1\":{\"784\":1}}],[\"之间的最大值\",{\"1\":{\"439\":1}}],[\"之间的跳转由\",{\"1\":{\"341\":1}}],[\"之间的代码运行时是隔离的\",{\"1\":{\"221\":1}}],[\"之间的系统调用层\",{\"1\":{\"140\":1}}],[\"之间的依赖关系\",{\"1\":{\"112\":1}}],[\"之间的联动\",{\"1\":{\"110\":1}}],[\"之后将该顶点打印\",{\"1\":{\"848\":1}}],[\"之后打开同步的项目\",{\"1\":{\"813\":1}}],[\"之后win\",{\"1\":{\"802\":1}}],[\"之后就可以在\",{\"1\":{\"783\":1}}],[\"之后就进入到选择同步的仓库\",{\"1\":{\"671\":1}}],[\"之后经过\",{\"1\":{\"771\":1}}],[\"之后才可以根据遍历的规则切换到下一子树\",{\"1\":{\"665\":1}}],[\"之后才继续执行普通\",{\"1\":{\"229\":1}}],[\"之后再将拍好序的数组合并\",{\"1\":{\"913\":1}}],[\"之后再根据找到的根节点将中序排序分为左\",{\"1\":{\"666\":1}}],[\"之后再执行下一轮的\",{\"1\":{\"631\":1}}],[\"之后再在使用完毕后同步到主内存中\",{\"1\":{\"601\":1}}],[\"之后再开始\",{\"1\":{\"350\":1}}],[\"之后必须调用本方法\",{\"1\":{\"584\":1}}],[\"之后必须调用out\",{\"1\":{\"584\":1}}],[\"之后他们都可以回到锁池竞争该对象的锁\",{\"1\":{\"561\":1}}],[\"之后都会触发\",{\"1\":{\"440\":1}}],[\"之后的位置了\",{\"1\":{\"888\":1}}],[\"之后的使用中就不需要再去反复创建了\",{\"1\":{\"710\":1}}],[\"之后的尺寸和\",{\"1\":{\"439\":1}}],[\"之后的\",{\"1\":{\"427\":1}}],[\"之后滑动视图中的\",{\"1\":{\"415\":1}}],[\"之后没有变化\",{\"1\":{\"413\":1}}],[\"之后会出现的越界值\",{\"1\":{\"412\":1}}],[\"之后在\",{\"1\":{\"249\":1}}],[\"之后\",{\"1\":{\"230\":1,\"234\":1,\"238\":1,\"256\":1,\"367\":1,\"415\":1,\"418\":1,\"439\":1,\"759\":2}}],[\"之后我们就可以使用\",{\"1\":{\"204\":1}}],[\"之后出现的处理权限的新方式\",{\"1\":{\"170\":1}}],[\"之后用户态就可以通过操作这段虚拟地址来操作内存了\",{\"1\":{\"136\":1}}],[\"之后如果\",{\"1\":{\"123\":1}}],[\"之后更新\",{\"1\":{\"123\":1,\"370\":1}}],[\"之应用层总结与分析\",{\"1\":{\"72\":1}}],[\"之前发布的几个\",{\"0\":{\"775\":1}}],[\"之前优化的条件不满足了\",{\"1\":{\"768\":1}}],[\"之前的代码在一个单独的协程运行\",{\"1\":{\"629\":1}}],[\"之前的\",{\"1\":{\"427\":1}}],[\"之前的文章\",{\"1\":{\"0\":1}}],[\"之前在\",{\"1\":{\"418\":1}}],[\"之前执行\",{\"1\":{\"398\":1}}],[\"之前提到的extendedimageprovider为\",{\"1\":{\"384\":1}}],[\"之前分析的\",{\"1\":{\"309\":1}}],[\"之前调用\",{\"1\":{\"215\":1}}],[\"之前\",{\"0\":{\"633\":1},\"1\":{\"24\":1,\"519\":1}}],[\"二分法查找\",{\"1\":{\"880\":1}}],[\"二叉搜索树很快\",{\"1\":{\"869\":1}}],[\"二叉搜索树因为节点要满足左子节点\",{\"1\":{\"836\":1}}],[\"二叉搜索树的最小值是左子树中最左端没有子节点的左子节点\",{\"1\":{\"835\":1}}],[\"二叉搜索树的最大值是右子树中最右端没有子节点的右子节点\",{\"1\":{\"835\":1}}],[\"二叉搜索树\",{\"0\":{\"833\":1},\"1\":{\"869\":1}}],[\"二叉树\",{\"0\":{\"831\":1}}],[\"二叉树遍历算法总结\",{\"1\":{\"667\":1}}],[\"二叉树的遍历根据根节点与左右子节点的遍历顺序的不同分为三种\",{\"1\":{\"665\":1}}],[\"二次探测效果好\",{\"1\":{\"828\":1}}],[\"二次探测法\",{\"1\":{\"828\":1}}],[\"二次探测\",{\"1\":{\"827\":1}}],[\"二进制格式\",{\"1\":{\"494\":1}}],[\"二者最终还是创建了\",{\"1\":{\"393\":1}}],[\"二者都继承自widget\",{\"1\":{\"269\":1}}],[\"二者的滑动效果联动在一起\",{\"1\":{\"403\":1}}],[\"二者的runtimetype和key一样\",{\"1\":{\"263\":1}}],[\"二者的使用几乎没有差别\",{\"1\":{\"209\":1}}],[\"二者的耦合很低\",{\"1\":{\"124\":1}}],[\"二者的区别如下图\",{\"1\":{\"123\":1}}],[\"二者的\",{\"1\":{\"101\":1}}],[\"二阶贝塞尔曲线\",{\"1\":{\"143\":1}}],[\"二\",{\"1\":{\"72\":1,\"542\":1,\"824\":1}}],[\"代\",{\"1\":{\"832\":1}}],[\"代替默认的\",{\"1\":{\"808\":1}}],[\"代替\",{\"1\":{\"524\":1}}],[\"代理\",{\"1\":{\"317\":1}}],[\"代理等改变系统原有的行为以达到自己的目的\",{\"1\":{\"176\":1}}],[\"代理类\",{\"1\":{\"138\":1}}],[\"代理类对象\",{\"1\":{\"71\":1}}],[\"代码在\",{\"1\":{\"766\":1}}],[\"代码有两种方式\",{\"1\":{\"763\":1}}],[\"代码有节略\",{\"1\":{\"193\":1}}],[\"代码运行的地方\",{\"1\":{\"762\":1}}],[\"代码中调用isolate\",{\"1\":{\"757\":1}}],[\"代码中的注解替换为真正要实现的逻辑\",{\"1\":{\"569\":1}}],[\"代码中的参数顺序一致\",{\"1\":{\"247\":1}}],[\"代码编号\",{\"1\":{\"701\":1}}],[\"代码编译成\",{\"1\":{\"602\":1}}],[\"代码块捕获的异常仅仅应该被用来作为额外调试信息的资源\",{\"1\":{\"640\":1}}],[\"代码上下文的正确方式\",{\"1\":{\"629\":1,\"654\":1}}],[\"代码是一行行进行的\",{\"1\":{\"545\":1}}],[\"代码缓存区\",{\"1\":{\"455\":1}}],[\"代码会执行final\",{\"1\":{\"418\":1}}],[\"代码会执行到outerdelta\",{\"1\":{\"418\":1}}],[\"代码示例\",{\"0\":{\"273\":1}}],[\"代码十分简单\",{\"1\":{\"259\":1}}],[\"代码拿到返回的\",{\"1\":{\"246\":1}}],[\"代码的代码\",{\"1\":{\"564\":1}}],[\"代码的\",{\"1\":{\"244\":1}}],[\"代码创建\",{\"1\":{\"241\":1}}],[\"代码参考\",{\"1\":{\"221\":1}}],[\"代码分析\",{\"0\":{\"193\":1,\"224\":1,\"231\":1}}],[\"代码如下\",{\"1\":{\"186\":1,\"533\":1,\"534\":1,\"731\":1}}],[\"代码层级越多\",{\"1\":{\"127\":1}}],[\"代码实现如下\",{\"1\":{\"125\":1}}],[\"代码量增加\",{\"1\":{\"123\":1}}],[\"代码设置\",{\"1\":{\"112\":1}}],[\"代码\",{\"0\":{\"167\":1,\"173\":1,\"557\":1,\"731\":1},\"1\":{\"80\":1,\"701\":1,\"763\":2,\"768\":2}}],[\"代表一项单独的任务\",{\"1\":{\"787\":1}}],[\"代表了一系列的\",{\"1\":{\"189\":1}}],[\"代表\",{\"1\":{\"74\":2,\"76\":1,\"189\":1}}],[\"代表原始位置信息的\",{\"1\":{\"74\":1}}],[\"代表不自动创建\",{\"1\":{\"38\":1}}],[\"转而连接到a上\",{\"1\":{\"903\":1}}],[\"转换规则\",{\"1\":{\"890\":1}}],[\"转换\",{\"1\":{\"765\":1}}],[\"转义\",{\"1\":{\"723\":1}}],[\"转到给\",{\"1\":{\"420\":1}}],[\"转到了\",{\"1\":{\"25\":1}}],[\"转发调用\",{\"1\":{\"418\":1}}],[\"转发过来的滑动事件\",{\"1\":{\"404\":1}}],[\"转化\",{\"1\":{\"357\":1}}],[\"转化为具体方法的调用\",{\"1\":{\"496\":1}}],[\"转化为曲线在\",{\"1\":{\"360\":1}}],[\"转化为\",{\"1\":{\"179\":1,\"316\":2,\"768\":1}}],[\"转化为客户端需要的\",{\"1\":{\"71\":1}}],[\"转载请附上原文出处链接及本声明\",{\"1\":{\"138\":1,\"528\":1}}],[\"传输\",{\"1\":{\"580\":1}}],[\"传输效率低\",{\"1\":{\"137\":2}}],[\"传来的数据\",{\"1\":{\"284\":1}}],[\"传给\",{\"1\":{\"254\":1,\"282\":1,\"349\":1}}],[\"传给参数\",{\"1\":{\"247\":1}}],[\"传了进去\",{\"1\":{\"193\":1}}],[\"传入到自定义的\",{\"1\":{\"405\":1}}],[\"传入到\",{\"1\":{\"308\":2}}],[\"传入的是classloader\",{\"1\":{\"593\":1}}],[\"传入的是\",{\"1\":{\"418\":1}}],[\"传入的值分别是\",{\"1\":{\"256\":1}}],[\"传入的\",{\"1\":{\"193\":1,\"332\":2,\"333\":1,\"436\":1}}],[\"传入\",{\"1\":{\"192\":1,\"371\":1,\"405\":1}}],[\"传入参数开始执行\",{\"1\":{\"191\":1}}],[\"传递参数时\",{\"1\":{\"785\":1}}],[\"传递到了\",{\"1\":{\"138\":2}}],[\"传递给serviceport后\",{\"1\":{\"244\":1}}],[\"传递给\",{\"1\":{\"125\":1,\"353\":1}}],[\"传递给其他客户端\",{\"1\":{\"41\":1}}],[\"传递给服务端\",{\"1\":{\"39\":1}}],[\"传回客户端\",{\"1\":{\"71\":1}}],[\"流取消\",{\"0\":{\"657\":1}}],[\"流默认运行在收集器提供的上下文中\",{\"1\":{\"654\":1}}],[\"流上下文\",{\"0\":{\"654\":1}}],[\"流的收集\",{\"0\":{\"652\":1}}],[\"流的异常有如下捕获方式\",{\"1\":{\"632\":1}}],[\"流完成\",{\"0\":{\"634\":1,\"658\":1}}],[\"流异常\",{\"0\":{\"632\":1}}],[\"流构造器中的协程上下文默认和\",{\"1\":{\"629\":1}}],[\"流构建器\",{\"1\":{\"629\":1}}],[\"流在不阻塞主线程的情况下\",{\"1\":{\"629\":1}}],[\"流等\",{\"1\":{\"221\":1}}],[\"流程概述\",{\"1\":{\"189\":1}}],[\"流程如下\",{\"1\":{\"140\":1}}],[\"流\",{\"1\":{\"71\":1}}],[\"所做的那样\",{\"1\":{\"643\":1}}],[\"所做的更改也会实时更新到外部类中\",{\"1\":{\"513\":1}}],[\"所包含的日期也不一定全部都是当年的日期\",{\"1\":{\"574\":1}}],[\"所谓的通过threadlocal实现线程本地变量与其他线程隔离\",{\"1\":{\"529\":1}}],[\"所属的\",{\"1\":{\"527\":1}}],[\"所需时间为\",{\"1\":{\"826\":1}}],[\"所需不会滑动\",{\"1\":{\"444\":1}}],[\"所需的\",{\"1\":{\"307\":1}}],[\"所创建的\",{\"1\":{\"405\":1}}],[\"所处位置的区域\",{\"1\":{\"347\":1}}],[\"所在层\",{\"1\":{\"912\":1}}],[\"所在周为该年第一周\",{\"1\":{\"576\":1}}],[\"所在的外层函数\",{\"1\":{\"621\":1}}],[\"所在的\",{\"1\":{\"247\":1}}],[\"所在进程中\",{\"1\":{\"138\":1}}],[\"所指定动作\",{\"1\":{\"189\":1}}],[\"所保存的数据个数\",{\"1\":{\"86\":1}}],[\"所有大于c的移动到右边\",{\"1\":{\"923\":1}}],[\"所有小于c的移动到左边\",{\"1\":{\"923\":1}}],[\"所有排序顺序为\",{\"1\":{\"895\":1}}],[\"所有权益归原作者所有\",{\"1\":{\"781\":1}}],[\"所有有效文章列表\",{\"1\":{\"732\":1}}],[\"所有文章列表\",{\"0\":{\"729\":1}}],[\"所有用户可见\",{\"1\":{\"686\":2}}],[\"所有节点都被完全遍历\",{\"1\":{\"665\":1}}],[\"所有同级的子协程都会被关闭\",{\"1\":{\"640\":1}}],[\"所有它的子协程也会被递归的取消\",{\"1\":{\"622\":1}}],[\"所有方法可以直接用类名调用\",{\"1\":{\"612\":1}}],[\"所有线程公用的数据保存在主内存中\",{\"1\":{\"601\":1}}],[\"所有线程共享\",{\"1\":{\"457\":1}}],[\"所有基本数据类型\",{\"1\":{\"568\":1}}],[\"所有需要保存在常量池中的数据\",{\"1\":{\"519\":1}}],[\"所有\",{\"1\":{\"340\":1}}],[\"所有想滚动出屏幕的\",{\"1\":{\"111\":1}}],[\"所有的植物信息列表\",{\"1\":{\"782\":1}}],[\"所有的类方法必须至少有一个参数\",{\"1\":{\"728\":1}}],[\"所有的\",{\"1\":{\"86\":2,\"138\":1,\"179\":1,\"766\":1}}],[\"所有可以在\",{\"1\":{\"71\":1}}],[\"所以先对父节点\",{\"1\":{\"904\":1}}],[\"所以从1开始\",{\"1\":{\"898\":1}}],[\"所以比冒泡快\",{\"1\":{\"897\":1}}],[\"所以删除需要分以下几种情况\",{\"1\":{\"836\":1}}],[\"所以默认就是可以互相访问任意数据\",{\"1\":{\"816\":1}}],[\"所以走的是runlightweight\",{\"1\":{\"751\":1}}],[\"所以暂时不需要实现\",{\"1\":{\"736\":1}}],[\"所以对下载功能做了简单的伪装\",{\"1\":{\"731\":1}}],[\"所以其肯定要持有\",{\"1\":{\"710\":1}}],[\"所以就是将\",{\"1\":{\"813\":1}}],[\"所以就需要对齐进行必要的封装以简化网络请求流程\",{\"1\":{\"708\":1}}],[\"所以就会使\",{\"1\":{\"415\":1}}],[\"所以上述simple\",{\"1\":{\"651\":1}}],[\"所以上面的等式相当于给\",{\"1\":{\"501\":1}}],[\"所以那些可以被\",{\"1\":{\"640\":1}}],[\"所以用\",{\"1\":{\"621\":1}}],[\"所以最好赋予一个默认的值\",{\"1\":{\"582\":1}}],[\"所以2010\",{\"1\":{\"576\":1}}],[\"所以2019\",{\"1\":{\"576\":1}}],[\"所以这时候采用手动同步网站\",{\"1\":{\"813\":1}}],[\"所以这一周被划归为2019年的第53周\",{\"1\":{\"576\":1}}],[\"所以这里新建了一个\",{\"1\":{\"813\":1}}],[\"所以这里执行的是runheavyweight\",{\"1\":{\"755\":1}}],[\"所以这里\",{\"1\":{\"412\":1}}],[\"所以这里的\",{\"1\":{\"375\":1}}],[\"所以这里使用\",{\"1\":{\"352\":1}}],[\"所以这里会将\",{\"1\":{\"256\":1}}],[\"所以这里为他创建了一个对应的\",{\"1\":{\"255\":1}}],[\"所以是实现单例的较优选择\",{\"1\":{\"550\":1}}],[\"所以也不能保存任何\",{\"1\":{\"540\":1}}],[\"所以也不会执行\",{\"1\":{\"418\":1}}],[\"所以也不会触发\",{\"1\":{\"30\":1}}],[\"所以拒绝向其中传递任何类型对象\",{\"1\":{\"540\":1}}],[\"所以将类型检查放到了编译期\",{\"1\":{\"539\":1}}],[\"所以我们只要破坏其中一个条件就可以避免内存泄漏\",{\"1\":{\"528\":1}}],[\"所以我们会在之前对\",{\"1\":{\"380\":1}}],[\"所以为\",{\"1\":{\"527\":1}}],[\"所以一个\",{\"1\":{\"519\":1}}],[\"所以一个完整的\",{\"1\":{\"138\":1}}],[\"所以无需suspend修饰\",{\"1\":{\"651\":1}}],[\"所以无论何时\",{\"1\":{\"513\":1}}],[\"所以无法被回收\",{\"1\":{\"474\":1}}],[\"所以无法应用\",{\"1\":{\"418\":1}}],[\"所以会稍微慢一些\",{\"1\":{\"602\":1}}],[\"所以会比普通类的对象多\",{\"1\":{\"516\":1}}],[\"所以会比较耗费性能\",{\"1\":{\"445\":1}}],[\"所以会在其slivers中直接传入\",{\"1\":{\"426\":1}}],[\"所以空间足够时\",{\"1\":{\"444\":1,\"445\":1}}],[\"所以直接返回\",{\"1\":{\"424\":1}}],[\"所以直接使用inflatewidget\",{\"1\":{\"259\":1}}],[\"所以整个\",{\"1\":{\"420\":1}}],[\"所以没有执行\",{\"1\":{\"418\":1}}],[\"所以此\",{\"1\":{\"409\":1}}],[\"所以此处不用再绘制\",{\"1\":{\"145\":1}}],[\"所以创建好的\",{\"1\":{\"405\":1}}],[\"所以更推荐使用\",{\"1\":{\"400\":1}}],[\"所以只会被调用一次\",{\"1\":{\"747\":1}}],[\"所以只能自救一次\",{\"1\":{\"475\":1}}],[\"所以只能从另外一个角度考虑\",{\"1\":{\"33\":1}}],[\"所以只要\",{\"1\":{\"397\":1}}],[\"所以大部分使用方式和官方类似\",{\"1\":{\"381\":1}}],[\"所以注意进度为\",{\"1\":{\"370\":1}}],[\"所以又出现了flutter\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"所以他们的相交处为\",{\"1\":{\"343\":2}}],[\"所以可以看到\",{\"1\":{\"710\":1}}],[\"所以可以执行\",{\"1\":{\"621\":1}}],[\"所以可以得出结论\",{\"1\":{\"575\":1}}],[\"所以可以上下滑动\",{\"1\":{\"444\":1}}],[\"所以可以解决这个问题\",{\"1\":{\"439\":1}}],[\"所以可以通过\",{\"1\":{\"333\":1}}],[\"所以可以在state调用setstate\",{\"1\":{\"269\":1}}],[\"所以不会冲突\",{\"1\":{\"888\":1}}],[\"所以不会再继续新建\",{\"1\":{\"546\":1}}],[\"所以不能保存\",{\"1\":{\"540\":1}}],[\"所以不能直接为\",{\"1\":{\"189\":1}}],[\"所以不需要\",{\"1\":{\"513\":1}}],[\"所以不应当再操作它\",{\"1\":{\"308\":1}}],[\"所以还需要将二进制与十六进制互转\",{\"1\":{\"557\":1}}],[\"所以还不能自动触发\",{\"1\":{\"307\":1}}],[\"所以还是所有的非const\",{\"1\":{\"271\":1}}],[\"所以每次\",{\"1\":{\"273\":1}}],[\"所以需要\",{\"1\":{\"513\":1}}],[\"所以需要在这里获取最新的\",{\"1\":{\"273\":1}}],[\"所以需要监听设备开机广播\",{\"1\":{\"17\":1}}],[\"所以当when\",{\"1\":{\"615\":1}}],[\"所以当同样使用int类型的key保存数据时\",{\"1\":{\"523\":1}}],[\"所以当\",{\"1\":{\"273\":1}}],[\"所以后面对children的处理在本例中不涉及\",{\"1\":{\"265\":1}}],[\"所以实际上执行下方的方法\",{\"1\":{\"253\":1}}],[\"所以file\",{\"1\":{\"243\":1}}],[\"所以如果内部类所处的方法\",{\"1\":{\"513\":1}}],[\"所以如果\",{\"1\":{\"418\":1}}],[\"所以如果这些\",{\"1\":{\"221\":1}}],[\"所以如果判断当前并非第一次申请该权限\",{\"1\":{\"172\":1}}],[\"所以接下来的代码如下\",{\"1\":{\"214\":1}}],[\"所以dagger\",{\"1\":{\"214\":1}}],[\"所以限制了\",{\"1\":{\"193\":1}}],[\"所以mhandler=getmainhandler\",{\"1\":{\"193\":1}}],[\"所以即使是同一个threadlocal对象\",{\"1\":{\"527\":1}}],[\"所以即使在其他线程执行\",{\"1\":{\"527\":1}}],[\"所以即使要执行\",{\"1\":{\"183\":1}}],[\"所以即使使用了\",{\"1\":{\"100\":1}}],[\"所以在执行\",{\"1\":{\"812\":1}}],[\"所以在以上述方式执行代码的同时会记录以下信息\",{\"1\":{\"768\":1}}],[\"所以在此期间如果有其他的线程访问这段代码\",{\"1\":{\"602\":1}}],[\"所以在\",{\"1\":{\"545\":1,\"640\":1,\"793\":1}}],[\"所以在这里不会被计算\",{\"1\":{\"445\":1}}],[\"所以在oncreate\",{\"1\":{\"160\":1}}],[\"所以在绘制曲线图时可以先将坐标原点向下平移一段距离\",{\"1\":{\"148\":1}}],[\"所以在绘制文字时\",{\"1\":{\"33\":1}}],[\"所以调用\",{\"1\":{\"138\":1}}],[\"所以使用状态栏高度来控制布局的时候就会展示异常\",{\"1\":{\"101\":1}}],[\"所以\",{\"1\":{\"33\":1,\"75\":1,\"111\":1,\"145\":2,\"196\":2,\"256\":2,\"273\":3,\"340\":1,\"341\":1,\"404\":1,\"405\":1,\"415\":1,\"418\":1,\"422\":1,\"461\":1,\"504\":1,\"519\":1,\"547\":2,\"550\":1,\"771\":1,\"811\":1}}],[\"所以基本不用担心会触发java\",{\"1\":{\"30\":1}}],[\"图中有环\",{\"1\":{\"850\":1}}],[\"图中还有顶点\",{\"1\":{\"850\":1}}],[\"图的操作有插入\",{\"1\":{\"843\":1}}],[\"图一般有两种存储方式\",{\"1\":{\"842\":1}}],[\"图\",{\"0\":{\"840\":1},\"1\":{\"841\":1,\"868\":1}}],[\"图片内存优化实践\",{\"1\":{\"401\":1}}],[\"图片框架架构演进\",{\"1\":{\"401\":1}}],[\"图片库高燃新登场\",{\"1\":{\"401\":1}}],[\"图片库加载图片\",{\"1\":{\"394\":1}}],[\"图片数据\",{\"1\":{\"400\":1}}],[\"图片浏览\",{\"1\":{\"380\":1}}],[\"图片会一直被持有\",{\"1\":{\"375\":1}}],[\"图片会被imagecache\",{\"1\":{\"375\":1}}],[\"图片的加载逻辑在其handlerequest方法中\",{\"1\":{\"399\":1}}],[\"图片的\",{\"1\":{\"375\":1}}],[\"图片的获取与缓存\",{\"1\":{\"373\":1}}],[\"图片\",{\"1\":{\"375\":1}}],[\"图片获取与缓存\",{\"0\":{\"373\":1}}],[\"图片加载两部分\",{\"1\":{\"388\":1}}],[\"图片加载过程中的回调\",{\"1\":{\"376\":1}}],[\"图片加载成功\",{\"1\":{\"368\":1,\"376\":1}}],[\"图片加载方案分析之\",{\"0\":{\"363\":1,\"379\":1,\"387\":1}}],[\"图片展示的流程\",{\"0\":{\"364\":1}}],[\"图片来自于android\",{\"1\":{\"516\":1}}],[\"图片来自\",{\"1\":{\"138\":3,\"142\":1,\"516\":2}}],[\"图片来源\",{\"1\":{\"71\":1}}],[\"图标\",{\"1\":{\"103\":1}}],[\"图标启动\",{\"1\":{\"30\":1}}],[\"发布\",{\"1\":{\"931\":1}}],[\"发布文章\",{\"1\":{\"719\":1}}],[\"发布完后默认打开该网页\",{\"1\":{\"718\":1}}],[\"发布到对应\",{\"1\":{\"716\":1}}],[\"发射一个异常\",{\"1\":{\"656\":1}}],[\"发射下一个值\",{\"1\":{\"629\":1,\"651\":1,\"656\":1}}],[\"发射\",{\"1\":{\"629\":1}}],[\"发生在这里\",{\"1\":{\"763\":1}}],[\"发生\",{\"1\":{\"501\":1}}],[\"发生变化了\",{\"1\":{\"303\":1}}],[\"发出\",{\"1\":{\"412\":1,\"413\":1}}],[\"发出通知\",{\"1\":{\"315\":1}}],[\"发来了不认识的事件\",{\"1\":{\"398\":1}}],[\"发现了真正的原因\",{\"1\":{\"579\":1}}],[\"发现\",{\"1\":{\"204\":1}}],[\"发起请求加载图片\",{\"1\":{\"398\":1}}],[\"发起请求至服务端\",{\"1\":{\"71\":2}}],[\"发起的请求完成后会执行下述代码\",{\"1\":{\"398\":1}}],[\"发起的图片加载完成之后\",{\"1\":{\"398\":1}}],[\"发起图片请求\",{\"1\":{\"398\":1}}],[\"发起\",{\"1\":{\"126\":1}}],[\"发送到主通道\",{\"1\":{\"646\":1}}],[\"发送一条消息以用来从一个\",{\"1\":{\"645\":1}}],[\"发送和接收操作是\",{\"1\":{\"638\":1}}],[\"发送下一个值\",{\"1\":{\"629\":1}}],[\"发送获取释放图片指令\",{\"1\":{\"397\":1}}],[\"发送指令时\",{\"1\":{\"247\":1}}],[\"发送指令\",{\"1\":{\"243\":1}}],[\"发送将用户操作使用intent\",{\"1\":{\"125\":1}}],[\"发送\",{\"1\":{\"125\":2,\"247\":1,\"423\":1,\"636\":1}}],[\"发送消息时\",{\"1\":{\"398\":1,\"399\":1}}],[\"发送消息\",{\"1\":{\"83\":2,\"193\":1,\"243\":3,\"244\":4,\"646\":1,\"742\":1}}],[\"发送有序消息队列\",{\"1\":{\"82\":1}}],[\"发送的一个值\",{\"1\":{\"652\":1}}],[\"发送的消息\",{\"1\":{\"236\":1}}],[\"发送的\",{\"1\":{\"52\":1}}],[\"新生成的文章在目录\",{\"1\":{\"809\":1}}],[\"新生代\",{\"1\":{\"457\":1}}],[\"新的文章date\",{\"1\":{\"809\":1}}],[\"新的文章\",{\"1\":{\"809\":3}}],[\"新增\",{\"1\":{\"505\":1}}],[\"新动画从动画当前值开始\",{\"1\":{\"308\":1}}],[\"新建文章\",{\"0\":{\"809\":1}}],[\"新建文件\",{\"0\":{\"684\":1}}],[\"新建了一个\",{\"1\":{\"371\":1,\"747\":1}}],[\"新建线程的属性\",{\"1\":{\"247\":1}}],[\"新建的\",{\"1\":{\"247\":1,\"742\":1}}],[\"新建图层\",{\"1\":{\"131\":1}}],[\"新建该类的对象会提示出错\",{\"1\":{\"117\":1}}],[\"新建\",{\"0\":{\"178\":1},\"1\":{\"117\":1,\"189\":1,\"810\":1}}],[\"新建组合控件的类\",{\"0\":{\"117\":1}}],[\"新建自定义属性文件\",{\"0\":{\"116\":1}}],[\"新建一个名字为\",{\"1\":{\"810\":1}}],[\"新建一个仓库\",{\"1\":{\"671\":1}}],[\"新建一个\",{\"1\":{\"70\":1}}],[\"新开一个进程\",{\"1\":{\"30\":1}}],[\"新开一个进程并在其中进行multidex\",{\"1\":{\"30\":1}}],[\"验证一下\",{\"1\":{\"587\":1}}],[\"验证字节流符合\",{\"1\":{\"494\":1}}],[\"验证内容包括\",{\"1\":{\"494\":1}}],[\"验证和准备\",{\"1\":{\"493\":1}}],[\"验证\",{\"1\":{\"66\":1,\"490\":1,\"493\":1,\"494\":1,\"497\":1}}],[\"虽然对这些知识并不是很熟悉\",{\"1\":{\"798\":1}}],[\"虽然随着使用的\",{\"1\":{\"775\":1}}],[\"虽然unoptimizing\",{\"1\":{\"768\":1}}],[\"虽然整体的逻辑已经很简单了\",{\"1\":{\"708\":1}}],[\"虽然\",{\"1\":{\"382\":1,\"397\":1}}],[\"虽然inheritedwidget的确只标记了那些依赖了他的widget\",{\"1\":{\"271\":1}}],[\"虽然在服务端中回调客户端的方法是在服务端的\",{\"1\":{\"63\":1}}],[\"虽然也提供循环任务的\",{\"1\":{\"10\":1}}],[\"呢\",{\"1\":{\"63\":1,\"251\":1}}],[\"那就将等待中的任务数\",{\"1\":{\"760\":1}}],[\"那就发送通知\",{\"1\":{\"760\":1}}],[\"那就是用\",{\"1\":{\"549\":1}}],[\"那这样岂不是没法反序列化这些数据了\",{\"1\":{\"506\":1}}],[\"那些在\",{\"1\":{\"376\":1}}],[\"那里拿到ui\",{\"1\":{\"372\":1}}],[\"那里异步获得文件句柄\",{\"1\":{\"243\":1}}],[\"那里接受处理\",{\"1\":{\"193\":1}}],[\"那么剩下的问题就成了如何将other从柱子a移动到柱子b\",{\"1\":{\"912\":1}}],[\"那么问题就变成了如何将bottom和other这\",{\"1\":{\"912\":1}}],[\"那么只需要将右边的元素依次拿出来插入到左边的有序数组中即可\",{\"1\":{\"898\":1}}],[\"那么完全二叉树只有最后一层的右边会出现没有叶子节点的情况\",{\"1\":{\"863\":1}}],[\"那么最小生成树将只有一个\",{\"1\":{\"849\":1}}],[\"那么最多滑动到\",{\"1\":{\"412\":1}}],[\"那么去访问下一个未访问的邻接点\",{\"1\":{\"847\":1}}],[\"那么等待已有的\",{\"1\":{\"761\":1}}],[\"那么要想\",{\"1\":{\"744\":1}}],[\"那么你可以使用\",{\"1\":{\"673\":1}}],[\"那么该\",{\"1\":{\"663\":1}}],[\"那么该怎么适配呢\",{\"1\":{\"100\":1}}],[\"那么启动该子协程后\",{\"1\":{\"623\":1}}],[\"那么父类必须要有一个公开的无参构造函数\",{\"1\":{\"585\":1}}],[\"那么很明显这一周属于2020年的天数\",{\"1\":{\"576\":1}}],[\"那么本周所有日期的week\",{\"1\":{\"575\":1}}],[\"那么本线程获取到的也会是变更后的值\",{\"1\":{\"527\":1}}],[\"那么list<\",{\"1\":{\"540\":1}}],[\"那么threadlocals中保存的threadlocal<\",{\"1\":{\"528\":1}}],[\"那么默认会展示\",{\"1\":{\"427\":1}}],[\"那么它是在什么时候被调用的呢\",{\"1\":{\"426\":1}}],[\"那么它将完全展开\",{\"1\":{\"111\":1}}],[\"那么它将被滚动到收缩或展开\",{\"1\":{\"111\":1}}],[\"那么此时最多向上滑动\",{\"1\":{\"412\":1}}],[\"那么我们立即得知\",{\"1\":{\"350\":1}}],[\"那么我们不难得到以下方程\",{\"1\":{\"196\":1}}],[\"那么允许\",{\"1\":{\"276\":1}}],[\"那么依旧用的是之前的\",{\"1\":{\"273\":1}}],[\"那么他的子类也自动支持序列化与反序列化\",{\"1\":{\"585\":1}}],[\"那么他就不会被rebuild\",{\"1\":{\"269\":1}}],[\"那么他会在\",{\"1\":{\"223\":1}}],[\"那么这个属性是如何影响到我们的\",{\"1\":{\"370\":1}}],[\"那么这里的\",{\"1\":{\"265\":1}}],[\"那么这一切dagger\",{\"1\":{\"199\":1}}],[\"那么在右半部分数组查找\",{\"1\":{\"880\":1}}],[\"那么在进行注解的时候\",{\"1\":{\"568\":1}}],[\"那么在判断\",{\"1\":{\"547\":1}}],[\"那么在哪里发起和结束\",{\"1\":{\"347\":1}}],[\"那么在\",{\"1\":{\"251\":1}}],[\"那么假设依赖类service现在有两个构造方法\",{\"1\":{\"203\":1}}],[\"那么可以判断用户选择了不再提示\",{\"1\":{\"173\":1}}],[\"那么终止点\",{\"1\":{\"144\":1}}],[\"那么当新的值生产出来时\",{\"1\":{\"630\":1}}],[\"那么当用户滑动屏幕导致\",{\"1\":{\"440\":1}}],[\"那么当从\",{\"1\":{\"341\":1}}],[\"那么当沿着当前线段移动\",{\"1\":{\"142\":1}}],[\"那么当该方法返回时\",{\"1\":{\"139\":1}}],[\"那么\",{\"1\":{\"111\":1,\"138\":1,\"196\":1,\"244\":1,\"341\":1,\"343\":1,\"412\":2,\"418\":1,\"445\":2,\"541\":1,\"547\":1,\"630\":1,\"709\":1,\"783\":1}}],[\"那么就应该调用对应的方法\",{\"1\":{\"767\":1}}],[\"那么就\",{\"1\":{\"424\":1}}],[\"那么就添加为\",{\"1\":{\"232\":1}}],[\"那么就只能更改\",{\"1\":{\"100\":1}}],[\"那么就能保证同一\",{\"1\":{\"100\":1}}],[\"那么不会再调用\",{\"1\":{\"26\":1}}],[\"那他是怎么保证跨进程注册\",{\"1\":{\"63\":1}}],[\"依然可以收到消息\",{\"1\":{\"745\":1}}],[\"依然可以通过\",{\"1\":{\"183\":1}}],[\"依然要遵循以上三种遍历的先后顺序\",{\"1\":{\"665\":1}}],[\"依旧是\",{\"1\":{\"343\":1}}],[\"依旧会阻塞其他方法的执行\",{\"1\":{\"221\":1}}],[\"依次插入6\",{\"1\":{\"903\":1}}],[\"依次查找\",{\"1\":{\"858\":1}}],[\"依次推出有向图中没有后继点的顶点作为排序的最后项\",{\"1\":{\"850\":1}}],[\"依次沿着顶点某一个邻接点\",{\"1\":{\"847\":1}}],[\"依次循环直到优先级队列中只有一个节点\",{\"1\":{\"837\":1}}],[\"依次\",{\"1\":{\"837\":1}}],[\"依次从左端数组取出元素比较\",{\"1\":{\"898\":1}}],[\"依次从oob\",{\"1\":{\"761\":1}}],[\"依次从1\",{\"1\":{\"485\":1}}],[\"依次调用\",{\"1\":{\"744\":1}}],[\"依次调用performxxx\",{\"1\":{\"157\":1}}],[\"依次展平流\",{\"1\":{\"655\":1}}],[\"依次完整执行多级操作的\",{\"1\":{\"637\":1}}],[\"依次执行内部代码\",{\"1\":{\"623\":1}}],[\"依次类推\",{\"1\":{\"532\":1,\"903\":1}}],[\"依次进行比较\",{\"1\":{\"532\":1}}],[\"依次协调\",{\"1\":{\"420\":1}}],[\"依次遍历\",{\"1\":{\"417\":1,\"850\":1,\"921\":1}}],[\"依次取出来执行\",{\"1\":{\"63\":1}}],[\"依赖注入的方法\",{\"1\":{\"199\":1}}],[\"依赖注入\",{\"1\":{\"199\":1,\"206\":1}}],[\"依赖于原生图片加载库\",{\"1\":{\"376\":1}}],[\"依赖于基础框架\",{\"1\":{\"126\":1}}],[\"依赖于\",{\"1\":{\"126\":1}}],[\"依赖方会通过\",{\"1\":{\"112\":1}}],[\"依赖\",{\"1\":{\"30\":1,\"199\":1}}],[\"供\",{\"1\":{\"125\":1,\"347\":1,\"365\":1}}],[\"供使用者获取指定时间\",{\"1\":{\"360\":1}}],[\"供使用\",{\"1\":{\"117\":1}}],[\"供客户端调用\",{\"1\":{\"63\":1}}],[\"供服务端回调\",{\"1\":{\"62\":1}}],[\"都无法满足时\",{\"1\":{\"847\":1}}],[\"都需要再次重新创建对应的静态网页\",{\"1\":{\"791\":1}}],[\"都需要设置这个\",{\"1\":{\"111\":1}}],[\"都执行了run\",{\"1\":{\"759\":1}}],[\"都默认支持在使用isolate\",{\"1\":{\"740\":1}}],[\"都默认持有这个\",{\"1\":{\"138\":1}}],[\"都合法\",{\"1\":{\"684\":1}}],[\"都不一样\",{\"1\":{\"557\":1}}],[\"都不能将\",{\"1\":{\"538\":1}}],[\"都不能改变\",{\"1\":{\"75\":1}}],[\"都必须执行垃圾回收\",{\"1\":{\"523\":1}}],[\"都必须实现\",{\"1\":{\"333\":1}}],[\"都有一个当前方法到运行时常量池\",{\"1\":{\"496\":1}}],[\"都按照最长的尺寸布局\",{\"1\":{\"439\":1}}],[\"都应用的是\",{\"1\":{\"418\":1}}],[\"都应该以此宽度为准来获取其他控件的大小\",{\"1\":{\"196\":1}}],[\"都使用\",{\"1\":{\"409\":1}}],[\"都来自\",{\"1\":{\"405\":1}}],[\"都采用了\",{\"1\":{\"397\":1}}],[\"都继承自\",{\"1\":{\"355\":1,\"426\":1}}],[\"都提供了创建\",{\"1\":{\"349\":1}}],[\"都被移除\",{\"1\":{\"341\":1}}],[\"都被重建\",{\"1\":{\"273\":1}}],[\"都加入到\",{\"1\":{\"266\":1}}],[\"都是将一个大的待排序数组\",{\"1\":{\"928\":1}}],[\"都是红色违反了规则3\",{\"1\":{\"903\":1}}],[\"都是抽象数据结构\",{\"1\":{\"870\":1}}],[\"都是先调用rawreceiveport获取rawreceiveport\",{\"1\":{\"748\":1}}],[\"都是保证将对共享变量的操作限制在同一个线程中\",{\"1\":{\"645\":1}}],[\"都是一样的\",{\"1\":{\"557\":1}}],[\"都是继承自\",{\"1\":{\"424\":1,\"426\":1}}],[\"都是继承自官方\",{\"1\":{\"382\":1}}],[\"都是所处的\",{\"1\":{\"405\":1}}],[\"都是\",{\"1\":{\"371\":1,\"538\":1}}],[\"都是随着时间线性变化\",{\"1\":{\"314\":1}}],[\"都是属于implicitly\",{\"1\":{\"300\":1,\"314\":1}}],[\"都是在dart\",{\"1\":{\"757\":1}}],[\"都是在\",{\"1\":{\"257\":1}}],[\"都是使用vmlibraryhooks\",{\"1\":{\"234\":1}}],[\"都为\",{\"1\":{\"256\":1}}],[\"都要执行没有被执行的\",{\"1\":{\"238\":1}}],[\"都可以用\",{\"1\":{\"584\":1}}],[\"都可\",{\"1\":{\"196\":1}}],[\"都具有独立的地址空间\",{\"1\":{\"140\":1}}],[\"都会是默认的值或者是在父类无参构造函数中初始化的值\",{\"1\":{\"585\":1}}],[\"都会叠加\",{\"1\":{\"500\":1}}],[\"都会将其\",{\"1\":{\"442\":1}}],[\"都会使得\",{\"1\":{\"438\":1}}],[\"都会对齐添加监听\",{\"1\":{\"438\":1}}],[\"都会通过\",{\"1\":{\"319\":1}}],[\"都会重建\",{\"1\":{\"273\":1}}],[\"都会保证\",{\"1\":{\"235\":1}}],[\"都会检查执行\",{\"1\":{\"229\":1}}],[\"都会检查并执行\",{\"1\":{\"229\":1}}],[\"都会被丢弃\",{\"1\":{\"630\":1}}],[\"都会被启动\",{\"1\":{\"629\":1}}],[\"都会被当做一个个\",{\"1\":{\"221\":1}}],[\"都会被拦截\",{\"1\":{\"179\":1}}],[\"都会被重置\",{\"1\":{\"26\":1}}],[\"都会执行\",{\"1\":{\"112\":1,\"350\":1}}],[\"都会调用paintingbinding\",{\"1\":{\"375\":1}}],[\"都会调用\",{\"1\":{\"92\":1}}],[\"都会运行在同一线程\",{\"1\":{\"63\":1}}],[\"都放到\",{\"1\":{\"57\":1}}],[\"循环\",{\"1\":{\"759\":1}}],[\"循环遍历这些链接\",{\"1\":{\"731\":1}}],[\"循环中通过mqueue\",{\"1\":{\"56\":1}}],[\"循环提示用户直到满足指定的条件\",{\"1\":{\"9\":1}}],[\"池中已有的对象\",{\"1\":{\"55\":1}}],[\"自带终端窗口\",{\"1\":{\"802\":1}}],[\"自带的回调方法\",{\"1\":{\"53\":1}}],[\"自适应自旋\",{\"1\":{\"609\":1}}],[\"自旋锁\",{\"1\":{\"609\":1}}],[\"自然不会存在两处更新不同步的问题\",{\"1\":{\"512\":1}}],[\"自身的尺寸是父级给定的最大尺寸\",{\"1\":{\"439\":1}}],[\"自己搭建的博客又时常由于空间提供商的各种问题而无法访问\",{\"1\":{\"798\":1}}],[\"自己以便在主轴上匹配\",{\"1\":{\"428\":1}}],[\"自己绘制动画\",{\"1\":{\"312\":1}}],[\"自己也能rebuilt\",{\"1\":{\"272\":1}}],[\"自己处理完异常后\",{\"1\":{\"296\":1}}],[\"自己处理\",{\"1\":{\"124\":1}}],[\"自定义函数\",{\"0\":{\"726\":1}}],[\"自定义变量\",{\"0\":{\"697\":1}}],[\"自定义序列化过程\",{\"0\":{\"584\":1}}],[\"自定义注解\",{\"0\":{\"567\":1}}],[\"自定义动画\",{\"1\":{\"329\":2}}],[\"自定义以及\",{\"1\":{\"166\":1}}],[\"自定义透明背景的\",{\"0\":{\"165\":1}}],[\"自定义接口\",{\"1\":{\"117\":1}}],[\"自定义\",{\"0\":{\"151\":1,\"156\":1,\"486\":1},\"1\":{\"112\":3,\"113\":1,\"131\":1,\"133\":2,\"162\":1,\"167\":1,\"485\":1,\"486\":1}}],[\"自定义的类加载器完成加载\",{\"1\":{\"492\":1}}],[\"自定义的\",{\"0\":{\"152\":1},\"1\":{\"60\":1}}],[\"自动化部署文章\",{\"0\":{\"931\":1}}],[\"自动化之旅\",{\"1\":{\"107\":1}}],[\"自动\",{\"1\":{\"812\":1}}],[\"自动调用viewmodel的oncleared\",{\"1\":{\"785\":1}}],[\"自动打开网页\",{\"1\":{\"719\":1}}],[\"自动创建发布\",{\"0\":{\"715\":1}}],[\"自动执行脚本\",{\"1\":{\"699\":1}}],[\"自动判断添加哪些文件\",{\"1\":{\"672\":1}}],[\"自动的传播异常\",{\"1\":{\"640\":1}}],[\"自动生成的类\",{\"1\":{\"783\":1}}],[\"自动生成的parcelable代码不会处理\",{\"1\":{\"593\":1}}],[\"自动生成一个\",{\"1\":{\"70\":1}}],[\"自动添加监听\",{\"1\":{\"425\":1}}],[\"自动添加依赖\",{\"1\":{\"2\":1}}],[\"自动渐变到新的属性\",{\"1\":{\"329\":1}}],[\"自动触发\",{\"1\":{\"310\":1}}],[\"自动删除无用依赖\",{\"1\":{\"2\":1}}],[\"过程主要在\",{\"1\":{\"264\":1}}],[\"过程\",{\"0\":{\"161\":1,\"271\":1}}],[\"过程分析\",{\"0\":{\"46\":1,\"242\":1}}],[\"过于繁重\",{\"1\":{\"126\":1}}],[\"过渡层\",{\"1\":{\"912\":1}}],[\"过渡流操作符\",{\"0\":{\"653\":1}}],[\"过渡操作符应用于上游流\",{\"1\":{\"629\":1,\"653\":1}}],[\"过渡动画\",{\"1\":{\"351\":3}}],[\"过渡动画相关\",{\"1\":{\"348\":1}}],[\"过渡的过程\",{\"1\":{\"341\":1}}],[\"过渡到\",{\"1\":{\"308\":1}}],[\"过渡\",{\"1\":{\"30\":1,\"346\":1}}],[\"配置有误\",{\"1\":{\"813\":1}}],[\"配置环境变量方法\",{\"0\":{\"803\":1}}],[\"配置相关的一些属性\",{\"1\":{\"711\":1}}],[\"配置email\",{\"1\":{\"670\":1}}],[\"配置用户名\",{\"1\":{\"670\":1}}],[\"配置\",{\"0\":{\"670\":1,\"679\":1,\"806\":1,\"810\":1},\"1\":{\"670\":1}}],[\"配置方法数超过\",{\"1\":{\"31\":1}}],[\"配合oneach\",{\"1\":{\"652\":1}}],[\"配合ascontextelement\",{\"1\":{\"625\":1}}],[\"配合原文食用口味更佳\",{\"1\":{\"44\":1}}],[\"异步会有对应回调\",{\"1\":{\"708\":1}}],[\"异步流\",{\"0\":{\"629\":1},\"1\":{\"647\":1}}],[\"异步异常\",{\"1\":{\"294\":1}}],[\"异步读取文件\",{\"1\":{\"243\":2}}],[\"异步操作不应是创建对象时的附带效应\",{\"1\":{\"126\":1}}],[\"异步消息处理机制\",{\"1\":{\"44\":1}}],[\"异步消息机制\",{\"0\":{\"44\":1}}],[\"异常被抛出后\",{\"1\":{\"640\":1}}],[\"异常的传播\",{\"0\":{\"640\":1}}],[\"异常处理\",{\"0\":{\"656\":1},\"1\":{\"298\":1}}],[\"异常\",{\"0\":{\"639\":1},\"1\":{\"30\":1,\"465\":1}}],[\"真\",{\"1\":{\"732\":1}}],[\"真实面试题之\",{\"1\":{\"508\":1}}],[\"真正影响我们格式化日期结果的是simpledateformat中的calendar对象对应的值\",{\"1\":{\"575\":1}}],[\"真正展示图片内容\",{\"1\":{\"392\":1}}],[\"真正从网络加载图片的方法\",{\"1\":{\"374\":1}}],[\"真正在路由切换时操作\",{\"1\":{\"349\":1}}],[\"真正在屏幕上显示的内容这里了\",{\"1\":{\"265\":1}}],[\"真正执行逻辑的类\",{\"1\":{\"404\":1}}],[\"真正执行请求\",{\"1\":{\"398\":1}}],[\"真正执行\",{\"1\":{\"192\":1}}],[\"真正实现对数据的增删改查\",{\"1\":{\"126\":1}}],[\"真正的完全详解\",{\"1\":{\"43\":1}}],[\"真是惭愧\",{\"1\":{\"0\":1}}],[\"先将其按大小划分为左右两部分\",{\"1\":{\"927\":1}}],[\"先假设第一个数是已经排好序的\",{\"1\":{\"921\":1}}],[\"先取一个适当的增量n\",{\"1\":{\"919\":1}}],[\"先进先出\",{\"1\":{\"872\":1}}],[\"先进后出\",{\"1\":{\"871\":1}}],[\"先访问当前顶点的所有邻接顶点\",{\"1\":{\"848\":1}}],[\"先经过\",{\"1\":{\"771\":1}}],[\"先用模拟数据在\",{\"1\":{\"770\":1}}],[\"先用二分法查找\",{\"1\":{\"87\":1,\"88\":1}}],[\"先详细看一下获取new\",{\"1\":{\"760\":1}}],[\"先是用isolate\",{\"1\":{\"753\":1}}],[\"先是更新了imagestream\",{\"1\":{\"368\":1}}],[\"先根据前序排序\",{\"1\":{\"666\":1}}],[\"先根据请求参数创建好请求并返回给\",{\"1\":{\"398\":1}}],[\"先左子树\",{\"1\":{\"665\":2}}],[\"先遍历根节点\",{\"1\":{\"665\":1}}],[\"先执行\",{\"1\":{\"655\":1}}],[\"先执行完毕所有的同步方法\",{\"1\":{\"239\":1}}],[\"先顺序收集所有流\",{\"1\":{\"655\":1}}],[\"先依次对\",{\"1\":{\"631\":1}}],[\"先了解几个知识点\",{\"1\":{\"572\":1}}],[\"先了解几个基础方法\",{\"1\":{\"365\":1}}],[\"先了解两个概念\",{\"1\":{\"561\":1}}],[\"先说结论\",{\"1\":{\"510\":1}}],[\"先于init\",{\"1\":{\"497\":1}}],[\"先触发父类的初始化\",{\"1\":{\"497\":1}}],[\"先移除已有的监听\",{\"1\":{\"438\":1}}],[\"先等达到\",{\"1\":{\"419\":1}}],[\"先消耗\",{\"1\":{\"418\":1}}],[\"先让\",{\"1\":{\"418\":1,\"439\":1}}],[\"先从当前\",{\"1\":{\"753\":1}}],[\"先从根节点开始\",{\"1\":{\"665\":1}}],[\"先从\",{\"1\":{\"418\":1}}],[\"先恢复\",{\"1\":{\"418\":1}}],[\"先创建对应的请求\",{\"1\":{\"399\":1}}],[\"先仅从网络加载图片\",{\"1\":{\"383\":1}}],[\"先尝试从缓存文件中读取图片\",{\"1\":{\"383\":1}}],[\"先来看一个使用\",{\"1\":{\"330\":1}}],[\"先使用\",{\"1\":{\"317\":1}}],[\"先行返回\",{\"1\":{\"244\":1}}],[\"先通过\",{\"1\":{\"241\":1}}],[\"先在当前\",{\"1\":{\"265\":1}}],[\"先在\",{\"1\":{\"241\":1}}],[\"先在marray中查找key对应的索引index\",{\"1\":{\"93\":1}}],[\"先获取了当前的时间戳\",{\"1\":{\"234\":1}}],[\"先看一个属性\",{\"1\":{\"440\":1}}],[\"先看一下navigation的定义\",{\"1\":{\"783\":1}}],[\"先看一下的createisolategroupandsetup实现\",{\"1\":{\"757\":1}}],[\"先看一下sdk\",{\"1\":{\"747\":1}}],[\"先看一下sparearray的结构\",{\"1\":{\"86\":1}}],[\"先看一下常用的几个方法是怎么实现的\",{\"1\":{\"746\":1}}],[\"先看一下这些日期对应的星期\",{\"1\":{\"576\":1}}],[\"先看一下在最顶层的renderview\",{\"1\":{\"258\":1}}],[\"先看一下\",{\"1\":{\"236\":1,\"259\":1,\"418\":1,\"438\":1}}],[\"先看一下futrue\",{\"1\":{\"232\":1}}],[\"先看一下arraymap的结构\",{\"1\":{\"92\":1}}],[\"先看几种会触发此类事件的方法\",{\"1\":{\"230\":1}}],[\"先解释几个概念\",{\"1\":{\"199\":1}}],[\"先绘制背景\",{\"1\":{\"332\":1}}],[\"先绘制dst\",{\"1\":{\"132\":1}}],[\"先绘制src\",{\"1\":{\"132\":1}}],[\"先查找key的索引\",{\"1\":{\"94\":1}}],[\"先向后\",{\"1\":{\"92\":1}}],[\"先启动后绑定\",{\"1\":{\"42\":1}}],[\"先绑定后启动\",{\"1\":{\"42\":1}}],[\"结语\",{\"0\":{\"732\":1}}],[\"结\",{\"1\":{\"690\":1}}],[\"结构正确\",{\"1\":{\"494\":1}}],[\"结合两个流的值\",{\"1\":{\"659\":1}}],[\"结合\",{\"1\":{\"612\":1}}],[\"结合以上结论\",{\"1\":{\"577\":1}}],[\"结合时间\",{\"1\":{\"327\":1}}],[\"结合上述的分析后\",{\"1\":{\"30\":1}}],[\"结束查找\",{\"1\":{\"880\":1}}],[\"结束遍历\",{\"1\":{\"731\":1}}],[\"结束时才会展示\",{\"1\":{\"347\":1}}],[\"结束\",{\"1\":{\"312\":1,\"355\":1}}],[\"结论\",{\"0\":{\"239\":1,\"249\":1}}],[\"结果为\",{\"1\":{\"487\":1}}],[\"结果\",{\"1\":{\"42\":1,\"805\":1}}],[\"期间执行绑定\",{\"1\":{\"41\":1}}],[\"多占一个排序数组的大小\",{\"1\":{\"913\":1}}],[\"多\",{\"1\":{\"760\":1}}],[\"多次pause\",{\"1\":{\"744\":1}}],[\"多次序列化同一个对象\",{\"0\":{\"587\":1}}],[\"多倍\",{\"1\":{\"596\":1}}],[\"多线程编码中\",{\"1\":{\"601\":1}}],[\"多线程时\",{\"1\":{\"465\":1}}],[\"多线程\",{\"1\":{\"465\":1}}],[\"多出的空隙由\",{\"1\":{\"444\":1}}],[\"多了一层本地磁盘缓存\",{\"1\":{\"385\":1}}],[\"多核心处理任务\",{\"1\":{\"285\":1}}],[\"多个\",{\"1\":{\"763\":1}}],[\"多个值\",{\"1\":{\"726\":1}}],[\"多个线程申请锁时必须按照申请时间顺序获得锁\",{\"1\":{\"606\":1}}],[\"多个线程使用同一个共享数据时\",{\"1\":{\"606\":1}}],[\"多个线程的中只会有一个线程执行一次clinit\",{\"1\":{\"497\":1}}],[\"多个进程可以访问一个公用的内存空间\",{\"1\":{\"137\":1}}],[\"多个客户端可连接一个服务端\",{\"1\":{\"41\":1}}],[\"多渠道打包知识\",{\"0\":{\"103\":1}}],[\"多数时候是\",{\"1\":{\"38\":1}}],[\"回这个\",{\"1\":{\"767\":1}}],[\"回到要存放的目录下\",{\"1\":{\"673\":1}}],[\"回到我们的\",{\"1\":{\"259\":1}}],[\"回收时获取系统通知\",{\"1\":{\"481\":1}}],[\"回收之前都存在\",{\"1\":{\"480\":1}}],[\"回收\",{\"1\":{\"479\":2}}],[\"回收的对象\",{\"1\":{\"478\":1}}],[\"回收过程\",{\"0\":{\"475\":1}}],[\"回收算法\",{\"0\":{\"470\":1}}],[\"回收使用完的\",{\"1\":{\"49\":1}}],[\"回去执行对应的文件操作\",{\"1\":{\"247\":1}}],[\"回调方法\",{\"1\":{\"708\":1}}],[\"回调方法返回此\",{\"1\":{\"38\":1}}],[\"回调嵌套等导致代码可读性查的问题\",{\"1\":{\"622\":1}}],[\"回调powerimageresponse\",{\"1\":{\"399\":1}}],[\"回调时执行animationcontroller\",{\"1\":{\"319\":1}}],[\"回调事件\",{\"1\":{\"249\":1}}],[\"回调结果\",{\"1\":{\"243\":1}}],[\"回调\",{\"1\":{\"232\":1,\"247\":2}}],[\"回调的具体方法\",{\"1\":{\"62\":1}}],[\"回调接口\",{\"1\":{\"62\":1}}],[\"回复消息\",{\"1\":{\"39\":1}}],[\"回复客户端消息\",{\"1\":{\"39\":1}}],[\"接着再从无序部分取出一个元素与有序部分的元素依次比较\",{\"1\":{\"534\":1}}],[\"接管\",{\"1\":{\"415\":1}}],[\"接受\",{\"1\":{\"312\":1}}],[\"接下来会插入数据\",{\"1\":{\"501\":1}}],[\"接下来分析一下之前提到的\",{\"1\":{\"397\":1}}],[\"接下来实现一种使用inheritedwidget的方法\",{\"1\":{\"273\":1}}],[\"接下来实现一种基础的使用inheritedwidget的方法\",{\"1\":{\"273\":1}}],[\"接下来我们逐一分析一下他们的源码\",{\"1\":{\"423\":1}}],[\"接下来我们逐一分析上述涉及到的类的作用\",{\"1\":{\"330\":1}}],[\"接下来我们分析一下\",{\"1\":{\"264\":1}}],[\"接下来我们看一下前\",{\"1\":{\"246\":1}}],[\"接下来便按照之前的逻辑\",{\"1\":{\"216\":1}}],[\"接下来看一下在主线程和后台线程之间是如何依靠\",{\"1\":{\"193\":1}}],[\"接下来\",{\"1\":{\"179\":1}}],[\"接口clinit\",{\"1\":{\"497\":1}}],[\"接口类除外\",{\"1\":{\"497\":1}}],[\"接口解析\",{\"1\":{\"496\":1}}],[\"接口方法解析\",{\"1\":{\"496\":1}}],[\"接口方法\",{\"1\":{\"123\":1}}],[\"接口生成\",{\"1\":{\"63\":1}}],[\"接口对象\",{\"1\":{\"62\":1}}],[\"接口\",{\"1\":{\"59\":1,\"60\":1,\"71\":1,\"316\":1,\"333\":1,\"416\":1,\"438\":1,\"497\":1,\"565\":1}}],[\"接口的构造方法clinit\",{\"1\":{\"497\":1}}],[\"接口的具体方法\",{\"1\":{\"138\":1}}],[\"接口的\",{\"1\":{\"138\":1}}],[\"接口的实现类也无需执行接口的clinit\",{\"1\":{\"497\":1}}],[\"接口的实现最终接收此调用时\",{\"1\":{\"83\":1}}],[\"接口的实力对象并提供公共方法给客户端使用\",{\"1\":{\"38\":1}}],[\"接口的方法\",{\"1\":{\"63\":1}}],[\"接口的对象\",{\"1\":{\"59\":1}}],[\"接口定义语言\",{\"1\":{\"57\":1,\"84\":1}}],[\"接收方的版本多扩展了一些字段\",{\"1\":{\"584\":1}}],[\"接收传入的\",{\"1\":{\"440\":1}}],[\"接收传入的方法\",{\"1\":{\"282\":1}}],[\"接收外部所有的滑动事件全部归集到\",{\"1\":{\"404\":1}}],[\"接收图片成功加载的事件\",{\"1\":{\"397\":1}}],[\"接收数据\",{\"1\":{\"189\":1}}],[\"接收服务端返回的\",{\"1\":{\"39\":1}}],[\"接收\",{\"1\":{\"39\":1,\"71\":1,\"636\":1}}],[\"接收并处理\",{\"1\":{\"39\":1}}],[\"接收客户端每个调用的回调\",{\"1\":{\"39\":1}}],[\"与第一次\",{\"1\":{\"827\":1}}],[\"与当前\",{\"1\":{\"817\":1}}],[\"与之相比\",{\"1\":{\"771\":1}}],[\"与之绑定\",{\"1\":{\"248\":1,\"254\":1,\"256\":2}}],[\"与列表类似\",{\"1\":{\"724\":1}}],[\"与具体执行网络请求有关的方法\",{\"1\":{\"709\":1}}],[\"与它发送元素的通道相关联\",{\"1\":{\"645\":1}}],[\"与它接收消息的通道相关联\",{\"1\":{\"645\":1}}],[\"与三个特征\",{\"0\":{\"604\":1}}],[\"与下一个有序元素进行比较\",{\"1\":{\"534\":1}}],[\"与有序部分的最后一个元素\",{\"1\":{\"534\":1}}],[\"与其后的另外一个元素继续进行比较\",{\"1\":{\"532\":1}}],[\"与其无限拓展\",{\"1\":{\"445\":1}}],[\"与反射机制\",{\"1\":{\"498\":1}}],[\"与圆内切的正方形边长\",{\"1\":{\"342\":1}}],[\"与此同时如果这个节点有右子节点\",{\"1\":{\"836\":2}}],[\"与此同时\",{\"1\":{\"341\":1}}],[\"与此同时对应的\",{\"1\":{\"249\":1}}],[\"与上一个页面的\",{\"1\":{\"340\":1}}],[\"与上述两者不太一样的是\",{\"1\":{\"269\":1}}],[\"与父类componentelement\",{\"1\":{\"270\":1}}],[\"与自己绑定\",{\"1\":{\"256\":1}}],[\"与管道不同\",{\"1\":{\"137\":1}}],[\"与信号\",{\"1\":{\"137\":1}}],[\"与另一个子\",{\"1\":{\"112\":1}}],[\"与\",{\"0\":{\"91\":1,\"283\":1,\"623\":1,\"635\":1},\"1\":{\"103\":1,\"112\":1,\"126\":1,\"132\":1,\"196\":1,\"243\":1,\"247\":1,\"273\":1,\"314\":1,\"334\":1,\"342\":2,\"357\":1,\"397\":1,\"418\":1,\"428\":1,\"460\":1,\"501\":1,\"508\":1,\"534\":1,\"612\":1,\"629\":1,\"668\":1,\"740\":1,\"767\":1,\"771\":1,\"783\":1}}],[\"与客户端调用服务端方法在同一线程\",{\"1\":{\"63\":1}}],[\"与不同进程通信\",{\"1\":{\"39\":1}}],[\"与事件分发的方法有三个\",{\"1\":{\"26\":1}}],[\"解压\",{\"1\":{\"695\":1,\"837\":2}}],[\"解压文件\",{\"1\":{\"694\":1}}],[\"解包\",{\"1\":{\"695\":2}}],[\"解密部分变量\",{\"1\":{\"584\":1}}],[\"解密\",{\"1\":{\"557\":1}}],[\"解密用法\",{\"1\":{\"556\":1}}],[\"解除私有限定\",{\"1\":{\"553\":1}}],[\"解除绑定\",{\"1\":{\"38\":1}}],[\"解释几个概念\",{\"1\":{\"461\":1}}],[\"解码前的数据拷贝影响较小\",{\"1\":{\"400\":1}}],[\"解耦\",{\"1\":{\"123\":1}}],[\"解决了不同的布局间交互的逻辑\",{\"1\":{\"784\":1}}],[\"解决了第三方依赖引用的问题\",{\"1\":{\"203\":1}}],[\"解决方法参考\",{\"1\":{\"528\":1}}],[\"解决同步和互斥问题\",{\"1\":{\"137\":1}}],[\"解决\",{\"1\":{\"104\":1}}],[\"解决代码如下\",{\"1\":{\"80\":1}}],[\"解析参数\",{\"1\":{\"749\":1,\"754\":1,\"759\":2}}],[\"解析文档内容\",{\"1\":{\"737\":1}}],[\"解析网页内容\",{\"1\":{\"737\":1}}],[\"解析分为\",{\"1\":{\"496\":1}}],[\"解析加载的图片信息\",{\"1\":{\"383\":1}}],[\"解析未知格式\",{\"1\":{\"365\":1}}],[\"解析\",{\"0\":{\"83\":1,\"268\":1,\"269\":1},\"1\":{\"493\":1,\"496\":1,\"497\":1}}],[\"解绑\",{\"1\":{\"35\":1,\"41\":1}}],[\"参见关于合并的相关章节\",{\"1\":{\"631\":1}}],[\"参阅\",{\"1\":{\"550\":1}}],[\"参2\",{\"1\":{\"189\":1}}],[\"参1是用于指定被更新\",{\"1\":{\"189\":1}}],[\"参1\",{\"1\":{\"189\":1}}],[\"参与\",{\"1\":{\"138\":1}}],[\"参数类型小写\",{\"1\":{\"783\":1}}],[\"参数args\",{\"1\":{\"759\":1}}],[\"参数传入\",{\"1\":{\"718\":1}}],[\"参数等信息\",{\"1\":{\"708\":1}}],[\"参数如下\",{\"1\":{\"566\":1}}],[\"参数含义\",{\"1\":{\"247\":1}}],[\"参数为\",{\"1\":{\"243\":1}}],[\"参数代表唯一标识通知的整型数\",{\"1\":{\"43\":1}}],[\"参数\",{\"1\":{\"38\":1,\"566\":1,\"726\":1,\"759\":1,\"805\":1,\"808\":4}}],[\"参考资源\",{\"0\":{\"824\":1}}],[\"参考资料\",{\"0\":{\"22\":1,\"29\":1,\"67\":1,\"72\":1,\"78\":1,\"84\":1,\"96\":1,\"102\":1,\"128\":1,\"149\":1,\"164\":1,\"188\":1,\"206\":1,\"219\":1,\"240\":1,\"250\":1,\"267\":1,\"274\":1,\"313\":1,\"328\":1,\"337\":1,\"354\":1,\"362\":1,\"378\":1,\"386\":1,\"401\":1,\"421\":1,\"432\":1,\"447\":1,\"508\":1,\"514\":1,\"524\":1,\"530\":1,\"542\":1,\"562\":1,\"579\":1,\"598\":1,\"610\":1,\"627\":1,\"647\":1,\"667\":1,\"773\":1,\"788\":1,\"852\":1,\"892\":1,\"915\":1}}],[\"参考这里\",{\"1\":{\"523\":1}}],[\"参考一个\",{\"1\":{\"516\":1}}],[\"参考链接\",{\"0\":{\"290\":1,\"865\":1}}],[\"参考了几篇文章\",{\"1\":{\"180\":1}}],[\"参考了这个文章\",{\"1\":{\"123\":1}}],[\"参考自这里\",{\"1\":{\"517\":1}}],[\"参考自\",{\"1\":{\"125\":1,\"162\":1}}],[\"参考\",{\"1\":{\"124\":1}}],[\"参考下图\",{\"1\":{\"91\":1}}],[\"参考文章\",{\"0\":{\"197\":1,\"298\":1,\"571\":1},\"1\":{\"33\":1,\"300\":2,\"314\":2}}],[\"参考文档\",{\"0\":{\"31\":1,\"796\":1,\"907\":1}}],[\"参考文献\",{\"0\":{\"7\":1,\"113\":1,\"133\":1,\"498\":1,\"558\":1,\"660\":1,\"883\":1}}],[\"被暂停\",{\"1\":{\"768\":1}}],[\"被认为是完全动态的\",{\"1\":{\"767\":1}}],[\"被限制并封装到该协程中的状态以及一个与其它协程通信的\",{\"1\":{\"645\":1}}],[\"被重置为上一个通过ascontextelement\",{\"1\":{\"625\":1}}],[\"被重新创建时\",{\"1\":{\"305\":1}}],[\"被装载时被获取\",{\"1\":{\"565\":1}}],[\"被编译器丢弃\",{\"1\":{\"565\":1}}],[\"被引入\",{\"1\":{\"536\":1}}],[\"被应用\",{\"1\":{\"412\":1}}],[\"被移除\",{\"1\":{\"341\":1}}],[\"被其持有\",{\"1\":{\"308\":1}}],[\"被\",{\"1\":{\"296\":1,\"334\":1,\"617\":1,\"745\":2}}],[\"被调用过\",{\"1\":{\"235\":1}}],[\"被调用后一直无返回值时\",{\"1\":{\"36\":1}}],[\"被调用后\",{\"1\":{\"26\":1}}],[\"被我们当做设计稿中控件大小与设备中控件\",{\"1\":{\"196\":1}}],[\"被执行时\",{\"1\":{\"160\":1}}],[\"被销毁时调用此方法\",{\"1\":{\"123\":1}}],[\"被意外销毁\",{\"1\":{\"38\":1}}],[\"客户端创建\",{\"1\":{\"708\":1}}],[\"客户端的实现\",{\"1\":{\"83\":1}}],[\"客户端的\",{\"1\":{\"83\":2}}],[\"客户端远程请求经过系统封装后调用该方法\",{\"1\":{\"71\":1}}],[\"客户端会被挂起\",{\"1\":{\"63\":1}}],[\"客户端调用服务端方法\",{\"1\":{\"63\":1}}],[\"客户端调用服务端和服务端回调客户端方法\",{\"1\":{\"63\":1}}],[\"客户端从\",{\"1\":{\"62\":1}}],[\"客户端提供的方法\",{\"1\":{\"62\":1}}],[\"客户端使用\",{\"1\":{\"39\":1}}],[\"客户端\",{\"0\":{\"64\":1},\"1\":{\"38\":1,\"39\":2,\"57\":1,\"708\":1,\"799\":2,\"800\":1,\"801\":1,\"813\":2}}],[\"客户端通过其访问\",{\"1\":{\"38\":1}}],[\"创建保存数据的数组\",{\"1\":{\"827\":1}}],[\"创建以及同步\",{\"1\":{\"791\":1}}],[\"创建成功\",{\"1\":{\"759\":1}}],[\"创建isolatedata\",{\"1\":{\"757\":1}}],[\"创建时会被回调\",{\"1\":{\"756\":1}}],[\"创建配置一个新的\",{\"1\":{\"753\":1}}],[\"创建会占用内存\",{\"1\":{\"740\":1}}],[\"创建类对象\",{\"1\":{\"728\":1}}],[\"创建网络请求\",{\"1\":{\"708\":1}}],[\"创建新\",{\"0\":{\"742\":1}}],[\"创建新项目时默认的权限分别是\",{\"1\":{\"690\":1}}],[\"创建新的收集器\",{\"1\":{\"652\":1}}],[\"创建新的\",{\"1\":{\"247\":1,\"248\":1,\"259\":1,\"355\":1,\"753\":1}}],[\"创建文件\",{\"1\":{\"684\":1,\"731\":1}}],[\"创建文件夹\",{\"1\":{\"684\":1}}],[\"创建计时器通道\",{\"1\":{\"636\":1,\"638\":1}}],[\"创建密码器\",{\"1\":{\"557\":2}}],[\"创建线程安全的单例\",{\"0\":{\"543\":1}}],[\"创建继承自\",{\"1\":{\"420\":1}}],[\"创建蓝色波纹效果\",{\"1\":{\"413\":1}}],[\"创建供\",{\"1\":{\"394\":1}}],[\"创建自定义的\",{\"1\":{\"330\":1}}],[\"创建自己对应的\",{\"1\":{\"306\":1}}],[\"创建并返回dart\",{\"1\":{\"757\":1}}],[\"创建并返回该类的对象\",{\"1\":{\"711\":1}}],[\"创建并应用\",{\"1\":{\"404\":1}}],[\"创建并监听\",{\"1\":{\"327\":1}}],[\"创建并持有了\",{\"1\":{\"302\":1}}],[\"创建弹性的模拟\",{\"1\":{\"326\":1}}],[\"创建其他动画\",{\"1\":{\"318\":1}}],[\"创建所需要的\",{\"1\":{\"307\":1}}],[\"创建singlechildrenderobjectelement的时候传入的\",{\"1\":{\"262\":1}}],[\"创建对应的静态博客内容\",{\"1\":{\"794\":1}}],[\"创建对应的\",{\"1\":{\"308\":1,\"357\":1}}],[\"创建对应的renderobjecttowidgetelement\",{\"1\":{\"256\":1}}],[\"创建对象\",{\"1\":{\"193\":1}}],[\"创建好以后执行的方法\",{\"1\":{\"749\":1}}],[\"创建好之后进行统一的初始化操作\",{\"1\":{\"752\":1}}],[\"创建好之后\",{\"1\":{\"341\":1}}],[\"创建好\",{\"1\":{\"256\":1}}],[\"创建nativemessagehandler\",{\"1\":{\"247\":2}}],[\"创建dart\",{\"1\":{\"246\":1,\"757\":2}}],[\"创建了renderview对象\",{\"1\":{\"257\":1}}],[\"创建了一个\",{\"1\":{\"255\":1,\"745\":1}}],[\"创建了用于管理渲染管道的\",{\"1\":{\"253\":1}}],[\"创建了\",{\"1\":{\"246\":1,\"253\":1,\"265\":1,\"370\":1}}],[\"创建包含了提供androidinjector\",{\"1\":{\"217\":1}}],[\"创建实现了androidinjector<mainfragment>的mainfragmentsubcomponent\",{\"1\":{\"217\":1}}],[\"创建application的\",{\"1\":{\"217\":1}}],[\"创建属于整个activity的\",{\"1\":{\"213\":1}}],[\"创建某个activity专属的\",{\"1\":{\"212\":1}}],[\"创建单个\",{\"0\":{\"212\":1,\"213\":1}}],[\"创建代理类\",{\"1\":{\"138\":1}}],[\"创建一个文件夹\",{\"1\":{\"806\":1}}],[\"创建一个和当前的\",{\"1\":{\"742\":2}}],[\"创建一个和当前\",{\"1\":{\"742\":1}}],[\"创建一个网络请求\",{\"1\":{\"708\":1}}],[\"创建一个本地分支\",{\"1\":{\"674\":1}}],[\"创建一个本地仓库\",{\"1\":{\"672\":1}}],[\"创建一个inheritedwidget来传递数据\",{\"1\":{\"273\":1}}],[\"创建一个系统线程的包装类\",{\"1\":{\"247\":1}}],[\"创建一个nativemessagehandler\",{\"1\":{\"247\":1}}],[\"创建一个新的系统线程\",{\"1\":{\"759\":1}}],[\"创建一个新的animation<u>\",{\"1\":{\"327\":1}}],[\"创建一个新的\",{\"1\":{\"246\":1,\"759\":2}}],[\"创建一个jobservice可以避免这个情况\",{\"1\":{\"139\":1}}],[\"创建一个\",{\"1\":{\"83\":1,\"138\":1,\"189\":5,\"247\":2,\"708\":1,\"753\":1,\"808\":1}}],[\"创建的流的繁忙循环默认可以取消\",{\"1\":{\"657\":1}}],[\"创建的图片\",{\"1\":{\"396\":1}}],[\"创建的是封装了的\",{\"1\":{\"393\":1}}],[\"创建的位于\",{\"1\":{\"341\":1}}],[\"创建的multichildrenderobjectelement\",{\"1\":{\"265\":1}}],[\"创建的\",{\"1\":{\"63\":1,\"257\":1,\"307\":1,\"334\":1,\"382\":1,\"392\":1,\"393\":1,\"397\":1,\"403\":1,\"405\":2,\"415\":1,\"422\":1}}],[\"创建绑定对象\",{\"1\":{\"38\":1}}],[\"创建\",{\"0\":{\"234\":1,\"407\":1,\"651\":1,\"748\":1},\"1\":{\"38\":1,\"39\":3,\"57\":1,\"190\":1,\"252\":1,\"253\":1,\"254\":1,\"256\":1,\"263\":1,\"265\":2,\"273\":1,\"319\":2,\"330\":1,\"349\":1,\"365\":1,\"377\":1,\"393\":1,\"395\":1,\"396\":2,\"398\":1,\"407\":1,\"417\":4,\"431\":1,\"670\":1,\"674\":1,\"712\":1,\"756\":1,\"757\":1,\"758\":3}}],[\"类委托\",{\"1\":{\"619\":1}}],[\"类还未找到\",{\"1\":{\"565\":1}}],[\"类编译时会产生类型未检查转换的警告\",{\"1\":{\"538\":1}}],[\"类通过一种别扭的方法绕过了这个问题\",{\"1\":{\"538\":1}}],[\"类或接口在被初始化之前\",{\"1\":{\"497\":1}}],[\"类方法解析\",{\"1\":{\"496\":1}}],[\"类肯定不同\",{\"1\":{\"484\":1}}],[\"类加载过程\",{\"1\":{\"498\":1}}],[\"类加载根据加载的类不同分为两种\",{\"1\":{\"492\":1}}],[\"类加载的地方是开发人员可控性最强的地方\",{\"1\":{\"492\":1}}],[\"类加载一共\",{\"1\":{\"490\":1}}],[\"类加载机制详解\",{\"1\":{\"498\":1}}],[\"类加载机制具体过程\",{\"0\":{\"491\":1}}],[\"类加载机制一般分为三部分\",{\"1\":{\"490\":1}}],[\"类加载机制\",{\"0\":{\"490\":1},\"1\":{\"498\":2}}],[\"类加载机制解析\",{\"0\":{\"488\":1}}],[\"类加载机制之\",{\"0\":{\"483\":1}}],[\"类加载器不同\",{\"1\":{\"484\":1}}],[\"类加载后\",{\"1\":{\"461\":1}}],[\"类结构图\",{\"1\":{\"388\":1}}],[\"类修改为\",{\"1\":{\"342\":1}}],[\"类及其子类才会创建\",{\"1\":{\"264\":1}}],[\"类中定义\",{\"1\":{\"243\":1,\"244\":1}}],[\"类中的方法\",{\"1\":{\"264\":1}}],[\"类中的\",{\"1\":{\"138\":1}}],[\"类和对应的布局文件\",{\"1\":{\"189\":1}}],[\"类的时候\",{\"1\":{\"548\":1}}],[\"类的加载\",{\"1\":{\"498\":1}}],[\"类的方法\",{\"1\":{\"265\":1}}],[\"类的performtraversals\",{\"1\":{\"157\":1}}],[\"类的直接子\",{\"1\":{\"110\":1}}],[\"类是一个抽象类\",{\"1\":{\"126\":1}}],[\"类变化等时需要同步修改\",{\"1\":{\"123\":1}}],[\"类似启动新线程\",{\"1\":{\"623\":1}}],[\"类似c\",{\"1\":{\"602\":1}}],[\"类似的步骤展示图片\",{\"1\":{\"400\":1}}],[\"类似于collectlatest\",{\"1\":{\"655\":1}}],[\"类似于线程的锁\",{\"1\":{\"645\":1}}],[\"类似于数组中object\",{\"1\":{\"539\":1}}],[\"类似于\",{\"1\":{\"284\":1,\"297\":1,\"636\":1,\"640\":1}}],[\"类似于窗户\",{\"1\":{\"75\":1}}],[\"类似\",{\"1\":{\"122\":1,\"286\":1,\"287\":3,\"288\":1,\"357\":1,\"473\":1,\"503\":1,\"631\":1}}],[\"类时实现对监听事件的处理\",{\"1\":{\"117\":1}}],[\"类时候具体重写的方法不一样\",{\"1\":{\"112\":1}}],[\"类实例以实现跨进程通信\",{\"1\":{\"83\":1}}],[\"类我们可以联想到这里应该有一个\",{\"1\":{\"83\":1}}],[\"类持有\",{\"1\":{\"71\":1}}],[\"类型错误\",{\"1\":{\"541\":1}}],[\"类型转化错误\",{\"1\":{\"540\":1}}],[\"类型转化为其他的类型比如\",{\"1\":{\"314\":1}}],[\"类型不兼容\",{\"1\":{\"539\":1}}],[\"类型信息\",{\"1\":{\"498\":1}}],[\"类型是否为\",{\"0\":{\"426\":1},\"1\":{\"426\":1}}],[\"类型是extendednetworkimageprovider\",{\"1\":{\"382\":1}}],[\"类型的数组\",{\"1\":{\"538\":1}}],[\"类型的插值\",{\"1\":{\"360\":1}}],[\"类型的对象\",{\"1\":{\"357\":1}}],[\"类型的值\",{\"1\":{\"355\":1,\"357\":1}}],[\"类型的\",{\"1\":{\"330\":1,\"355\":1,\"359\":1}}],[\"类型的方法\",{\"1\":{\"316\":1,\"426\":1}}],[\"类型的异常\",{\"1\":{\"294\":1}}],[\"类型的child\",{\"1\":{\"258\":1}}],[\"类型的measure\",{\"1\":{\"159\":1}}],[\"类型为threadlocal<\",{\"1\":{\"525\":1}}],[\"类型为\",{\"1\":{\"247\":1}}],[\"类型\",{\"1\":{\"60\":1,\"357\":2,\"391\":1,\"426\":1,\"459\":1,\"519\":1,\"568\":4,\"583\":1,\"708\":1,\"768\":1}}],[\"类\",{\"0\":{\"38\":1,\"728\":1},\"1\":{\"62\":1,\"70\":1,\"110\":4,\"112\":1,\"122\":1,\"153\":1,\"166\":1,\"193\":1,\"203\":1,\"314\":1,\"316\":1,\"330\":1,\"342\":1,\"349\":1,\"398\":1,\"415\":4,\"461\":1,\"496\":1,\"497\":1,\"517\":1,\"594\":1}}],[\"用数组实现的队列大小固定\",{\"1\":{\"888\":1}}],[\"用链表实现的队列可以自由扩充\",{\"1\":{\"888\":1}}],[\"用链地址法比较好\",{\"1\":{\"828\":1}}],[\"用一段连续的内存来保存\",{\"1\":{\"879\":1}}],[\"用一个值专门记录要移动到的下标\",{\"1\":{\"857\":1}}],[\"用一个\",{\"1\":{\"842\":1}}],[\"用他实现的优先级队列插入和删除时间复杂度都是o\",{\"1\":{\"855\":1}}],[\"用队列实现\",{\"1\":{\"848\":1}}],[\"用栈实现\",{\"1\":{\"847\":1}}],[\"用字符代替对应的编码\",{\"1\":{\"837\":1}}],[\"用字符的编码替代字符\",{\"1\":{\"837\":1}}],[\"用官网的安装包\",{\"1\":{\"800\":1}}],[\"用如下代码将布局与页面绑定到一起\",{\"1\":{\"784\":1}}],[\"用逗号分隔\",{\"1\":{\"726\":1}}],[\"用新的值执行\",{\"1\":{\"652\":1}}],[\"用类全限定名获取类的二进制字节流\",{\"1\":{\"492\":1}}],[\"用作\",{\"1\":{\"480\":1}}],[\"用例\",{\"0\":{\"403\":1,\"434\":1}}],[\"用该\",{\"1\":{\"189\":2}}],[\"用来切换界面了\",{\"1\":{\"783\":1}}],[\"用来使用数据类xxxrepository类的实例创建对应的viewmodel\",{\"1\":{\"781\":1}}],[\"用来演示如何使用\",{\"1\":{\"781\":1}}],[\"用来调用方法\",{\"1\":{\"766\":1}}],[\"用来存储所有的\",{\"1\":{\"763\":1}}],[\"用来执行\",{\"1\":{\"763\":2}}],[\"用来创建执行网络请求的requestcall\",{\"1\":{\"711\":1}}],[\"用来逐个在\",{\"1\":{\"637\":1}}],[\"用来从\",{\"1\":{\"594\":1}}],[\"用来生成其他自定义的注解\",{\"1\":{\"565\":1}}],[\"用来保存线程私有的数据\",{\"1\":{\"525\":1}}],[\"用来在协程之间传递多个值\",{\"1\":{\"637\":1}}],[\"用来在运行时获取给定类的构造函数\",{\"1\":{\"552\":1}}],[\"用来在遍历的过程中检查\",{\"1\":{\"500\":1}}],[\"用来在scenebuilder\",{\"1\":{\"334\":1}}],[\"用来遍历\",{\"1\":{\"500\":1}}],[\"用来支持方法代码\",{\"1\":{\"496\":1}}],[\"用来指代某种值得符号\",{\"1\":{\"461\":1}}],[\"用来对\",{\"1\":{\"417\":1}}],[\"用来放置\",{\"1\":{\"351\":1}}],[\"用来监听\",{\"1\":{\"335\":1}}],[\"用来触发\",{\"1\":{\"330\":1}}],[\"用来触发消息\",{\"1\":{\"247\":1}}],[\"用来管理与\",{\"1\":{\"254\":1}}],[\"用来管理\",{\"1\":{\"253\":1}}],[\"用来向他发消息的\",{\"1\":{\"243\":1,\"244\":1}}],[\"用来向用户展示\",{\"1\":{\"126\":1}}],[\"用来响应点击事件\",{\"1\":{\"189\":1}}],[\"用来初始化进程管理\",{\"1\":{\"140\":1}}],[\"用户硬件挂载点\",{\"1\":{\"686\":1}}],[\"用户需要通过writeexternal\",{\"1\":{\"589\":1}}],[\"用户传入的\",{\"1\":{\"416\":1}}],[\"用户通过\",{\"1\":{\"377\":1}}],[\"用户\",{\"1\":{\"367\":1,\"691\":1,\"696\":1,\"816\":1}}],[\"用户可以访问任何用户文件\",{\"1\":{\"689\":1}}],[\"用户可以通过传入\",{\"1\":{\"312\":1}}],[\"用户可能会以为系统卡顿\",{\"1\":{\"30\":1}}],[\"用户拒绝了赋予权限\",{\"1\":{\"173\":1}}],[\"用户同意后开始申请权限\",{\"1\":{\"173\":1}}],[\"用户态在该虚拟地址区域读写就相当于读写这个文件\",{\"1\":{\"136\":1}}],[\"用户空间包括代码\",{\"1\":{\"136\":1}}],[\"用户不会丢失数据\",{\"1\":{\"126\":1}}],[\"用户界面\",{\"1\":{\"122\":1}}],[\"用户动态给这些属性赋值\",{\"1\":{\"116\":1}}],[\"用法\",{\"0\":{\"61\":1}}],[\"用于实现\",{\"1\":{\"716\":1}}],[\"用于更新下载进度等\",{\"1\":{\"711\":1}}],[\"用于生成\",{\"1\":{\"711\":1}}],[\"用于异步返回多个值\",{\"1\":{\"649\":1}}],[\"用于方法的参数\",{\"1\":{\"617\":1}}],[\"用于方法的返回值\",{\"1\":{\"617\":1}}],[\"用于返回可迭代的数组\",{\"1\":{\"612\":1}}],[\"用于查缺补漏\",{\"1\":{\"612\":1}}],[\"用于查找指定\",{\"1\":{\"346\":1}}],[\"用于描述其它类型的\",{\"1\":{\"565\":1}}],[\"用于获取\",{\"1\":{\"416\":1}}],[\"用于获取图片\",{\"1\":{\"390\":1}}],[\"用于防止在快速滑动的时候加载图片\",{\"1\":{\"367\":1}}],[\"用于绘制内容\",{\"1\":{\"331\":1}}],[\"用于操纵动画\",{\"1\":{\"319\":1}}],[\"用于驱动隐式动画\",{\"1\":{\"302\":1}}],[\"用于管理\",{\"1\":{\"254\":1}}],[\"用于将\",{\"1\":{\"254\":1}}],[\"用于将部分信息统一放置在本地配置文件中\",{\"1\":{\"104\":1}}],[\"用于远程服务通信\",{\"1\":{\"244\":1}}],[\"用于向\",{\"1\":{\"243\":1,\"244\":2}}],[\"用于提供androidinjector\",{\"1\":{\"212\":1}}],[\"用于调用\",{\"1\":{\"178\":1}}],[\"用于调用客户端的具体方法\",{\"1\":{\"62\":1}}],[\"用于进程间\",{\"1\":{\"140\":1}}],[\"用于和用户交互\",{\"1\":{\"126\":1}}],[\"用于和嵌套滑动事件绑定\",{\"1\":{\"111\":1}}],[\"用于本地调用\",{\"1\":{\"83\":1}}],[\"用于服务端\",{\"1\":{\"83\":2}}],[\"用于服务端往客户端通信\",{\"1\":{\"62\":1}}],[\"用于在\",{\"1\":{\"71\":1,\"193\":1}}],[\"用于\",{\"1\":{\"57\":1,\"323\":1,\"326\":1,\"415\":1}}],[\"用于连续作业\",{\"1\":{\"36\":1}}],[\"用msg\",{\"1\":{\"56\":1}}],[\"用其将\",{\"1\":{\"39\":1}}],[\"用\",{\"0\":{\"671\":1},\"1\":{\"39\":2,\"70\":1,\"104\":1,\"737\":1,\"813\":1,\"842\":1,\"849\":1}}],[\"最简单的\",{\"1\":{\"926\":1}}],[\"最简单有效的方法是使用后将其移除\",{\"1\":{\"528\":1}}],[\"最慢的排序\",{\"1\":{\"896\":1}}],[\"最先插入的在队首\",{\"1\":{\"872\":1}}],[\"最初的\",{\"1\":{\"769\":1}}],[\"最通用的一种称为\",{\"1\":{\"629\":1}}],[\"最强解析\",{\"1\":{\"598\":1}}],[\"最近在学习\",{\"1\":{\"798\":1}}],[\"最近在项目里面遇到了屏幕适配的问题\",{\"1\":{\"99\":1}}],[\"最近看到一个帖子\",{\"1\":{\"572\":1}}],[\"最近手机中涉及到用户账户密码保存的问题\",{\"1\":{\"556\":1}}],[\"最长为\",{\"0\":{\"519\":1}}],[\"最多交换\",{\"1\":{\"533\":1}}],[\"最多会返回未执行的\",{\"1\":{\"418\":1}}],[\"最多向下滑动到\",{\"1\":{\"418\":1}}],[\"最小生成树边比顶点数小\",{\"1\":{\"849\":1}}],[\"最小生成树\",{\"0\":{\"849\":1}}],[\"最小值\",{\"1\":{\"412\":2}}],[\"最小宽以及它的布局文件\",{\"1\":{\"189\":1}}],[\"最常用的子类是\",{\"1\":{\"318\":1}}],[\"最重要的是使用\",{\"1\":{\"305\":1}}],[\"最大\",{\"1\":{\"897\":1}}],[\"最大值和最小值\",{\"0\":{\"835\":1}}],[\"最大值不限定\",{\"1\":{\"412\":2}}],[\"最大滑动范围之后\",{\"1\":{\"419\":1}}],[\"最大为\",{\"1\":{\"412\":1}}],[\"最大只能是父容器分配的大小\",{\"1\":{\"277\":1}}],[\"最大可以是父容器分配给flexible的大小\",{\"1\":{\"276\":1}}],[\"最\",{\"1\":{\"251\":1,\"266\":1}}],[\"最终结果\",{\"1\":{\"903\":1}}],[\"最终通过new\",{\"1\":{\"748\":1}}],[\"最终还是调用了okhttp3\",{\"1\":{\"712\":1}}],[\"最终用来保存threadlocal以及对应值的是一个entry数组\",{\"1\":{\"528\":1}}],[\"最终是越界的\",{\"1\":{\"413\":1}}],[\"最终是在\",{\"1\":{\"352\":1}}],[\"最终返回的是rawimage\",{\"1\":{\"391\":1}}],[\"最终执行\",{\"1\":{\"333\":1}}],[\"最终执行的是\",{\"1\":{\"264\":1}}],[\"最终由\",{\"1\":{\"332\":1}}],[\"最终调用\",{\"1\":{\"259\":1,\"357\":1}}],[\"最终回调用户需要的命令\",{\"1\":{\"249\":1}}],[\"最终都会使用\",{\"1\":{\"238\":1}}],[\"最终都是调用的\",{\"1\":{\"234\":1}}],[\"最终会通过powerimageplugin\",{\"1\":{\"398\":1}}],[\"最终会返回经过封装的texture\",{\"1\":{\"391\":1}}],[\"最终会触发\",{\"1\":{\"235\":1}}],[\"最终会被传输到绑定这个服务时所用的\",{\"1\":{\"138\":1}}],[\"最终贝塞尔曲线\",{\"1\":{\"145\":1}}],[\"最终在flutterview\",{\"1\":{\"334\":1}}],[\"最终在\",{\"1\":{\"138\":1,\"262\":1,\"332\":1}}],[\"最终事件会传递给下层具有焦点的\",{\"1\":{\"76\":1}}],[\"最原始的开发方式\",{\"1\":{\"122\":1}}],[\"最后插入的数据在队尾\",{\"1\":{\"872\":1}}],[\"最后插入的数据在栈顶\",{\"1\":{\"871\":1}}],[\"最后将\",{\"1\":{\"768\":1}}],[\"最后在创建了新的\",{\"1\":{\"759\":1}}],[\"最后在当前\",{\"1\":{\"749\":1}}],[\"最后在非当前\",{\"1\":{\"248\":1}}],[\"最后是根据\",{\"1\":{\"747\":1}}],[\"最后是通过rawreceiveport\",{\"1\":{\"243\":1}}],[\"最后通过该call对象的\",{\"1\":{\"713\":1}}],[\"最后通过msg\",{\"1\":{\"49\":1}}],[\"最后把本地仓库\",{\"1\":{\"672\":1}}],[\"最后反序列化后的\",{\"1\":{\"584\":1}}],[\"最后如果有\",{\"1\":{\"419\":1}}],[\"最后交给\",{\"1\":{\"418\":1}}],[\"最后只有\",{\"1\":{\"415\":1}}],[\"最后会通过调用wait\",{\"1\":{\"560\":1}}],[\"最后会调用\",{\"1\":{\"415\":1}}],[\"最后会根据情况调用\",{\"1\":{\"193\":1}}],[\"最后绘制前景\",{\"1\":{\"332\":1}}],[\"最后还调用了didupdatetweens\",{\"1\":{\"303\":1}}],[\"最后都执行了一下三步\",{\"1\":{\"757\":1}}],[\"最后都是执行的messagehandlertask\",{\"1\":{\"761\":1}}],[\"最后都是调用了\",{\"1\":{\"243\":1,\"748\":1}}],[\"最后都是使用\",{\"1\":{\"235\":1}}],[\"最后都会触发\",{\"1\":{\"238\":1}}],[\"最后调用\",{\"1\":{\"234\":1,\"236\":1}}],[\"最后调用的是\",{\"1\":{\"224\":1}}],[\"最后介绍一下在\",{\"1\":{\"209\":1}}],[\"最后\",{\"1\":{\"193\":1,\"784\":1}}],[\"最后一个元素中该引用为null\",{\"1\":{\"881\":1}}],[\"最后一个输入空数据\",{\"1\":{\"737\":1}}],[\"最后一个为根节点\",{\"1\":{\"665\":1}}],[\"最后一个点\",{\"1\":{\"144\":1}}],[\"最后一周的影响\",{\"1\":{\"575\":1,\"577\":1}}],[\"最后一列\",{\"1\":{\"264\":1}}],[\"最后一次调用startservice\",{\"1\":{\"36\":1}}],[\"最后也是在sendmessagedelayed方法中调用sendmessageattime\",{\"1\":{\"54\":1}}],[\"最好是持久模型\",{\"1\":{\"126\":1}}],[\"最好先判断是否为\",{\"1\":{\"38\":1}}],[\"最好在\",{\"1\":{\"36\":1}}],[\"最安全\",{\"1\":{\"36\":1}}],[\"除过这里用到的取法之外\",{\"1\":{\"927\":1}}],[\"除文章中罗列的链接外\",{\"1\":{\"524\":1}}],[\"除以上三种外\",{\"1\":{\"484\":1}}],[\"除非子类特别调用父类的方法\",{\"1\":{\"728\":1}}],[\"除非特殊说明\",{\"1\":{\"516\":1}}],[\"除非在时间和空间比较特殊的情况下\",{\"1\":{\"500\":1}}],[\"除非imagestreamcompleter没有\",{\"1\":{\"375\":1}}],[\"除非是挂起的\",{\"1\":{\"36\":1}}],[\"除了常见的android\",{\"1\":{\"784\":1}}],[\"除了可以使用系统的\",{\"1\":{\"492\":1}}],[\"除了父级传入的\",{\"1\":{\"440\":1}}],[\"除了设置修改\",{\"1\":{\"438\":1}}],[\"除了上述在修改\",{\"1\":{\"438\":1}}],[\"除了上述与\",{\"1\":{\"357\":1}}],[\"除了修改部分类为\",{\"1\":{\"394\":1}}],[\"除了powerimage\",{\"1\":{\"390\":1}}],[\"除了之前文章中分析的传入\",{\"1\":{\"355\":1}}],[\"除了之前提到的各个属性之外\",{\"1\":{\"346\":1}}],[\"除了\",{\"1\":{\"350\":1,\"383\":1}}],[\"除了从\",{\"1\":{\"319\":1}}],[\"除了后面要详细分析的\",{\"1\":{\"317\":1}}],[\"除了直接继承\",{\"1\":{\"308\":1,\"311\":1}}],[\"除了检查并更新\",{\"1\":{\"305\":1}}],[\"除了调用父类的mount方法外\",{\"1\":{\"256\":1}}],[\"除了我们在代码里面添加的\",{\"1\":{\"251\":1}}],[\"除了同步读写文件是对返回的文件引用直接操作外\",{\"1\":{\"243\":1}}],[\"除了future\",{\"1\":{\"231\":1}}],[\"除了下面列出来的使用\",{\"1\":{\"230\":1}}],[\"除了处理本身变化外\",{\"1\":{\"152\":1}}],[\"除了处理本身的变化外\",{\"1\":{\"152\":1}}],[\"除了部分字体等显示需要微调外\",{\"1\":{\"101\":1}}],[\"除了socket\",{\"1\":{\"69\":1}}],[\"除此之外再没有用到\",{\"1\":{\"474\":1}}],[\"除此之外\",{\"1\":{\"33\":1,\"316\":1,\"319\":1,\"332\":1,\"385\":1}}],[\"默认要插入的点是有序的\",{\"1\":{\"898\":1}}],[\"默认生成\",{\"1\":{\"809\":1}}],[\"默认执行时直接从kernel\",{\"1\":{\"766\":1}}],[\"默认值必须不可变\",{\"1\":{\"726\":1}}],[\"默认参数必须是参数中后面的几位\",{\"1\":{\"726\":1}}],[\"默认参数\",{\"1\":{\"726\":1}}],[\"默认第一列\",{\"1\":{\"703\":1}}],[\"默认以第一列排序\",{\"1\":{\"703\":1}}],[\"默认容量为\",{\"1\":{\"505\":1}}],[\"默认主轴尺寸尽可能的小\",{\"1\":{\"444\":1}}],[\"默认返回\",{\"1\":{\"439\":1,\"726\":1}}],[\"默认创建的\",{\"1\":{\"415\":1}}],[\"默认会创建在同一个\",{\"1\":{\"762\":1}}],[\"默认会创建\",{\"1\":{\"405\":1}}],[\"默认的皮肤\",{\"1\":{\"807\":1}}],[\"默认的初始化方法\",{\"1\":{\"728\":1}}],[\"默认的第01周的定义\",{\"1\":{\"576\":1}}],[\"默认的负载因子0\",{\"1\":{\"500\":1}}],[\"默认的\",{\"1\":{\"397\":1}}],[\"默认的是\",{\"1\":{\"182\":1}}],[\"默认提供了image用于从网络\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"默认线性的在\",{\"1\":{\"358\":1}}],[\"默认使用\",{\"1\":{\"344\":1}}],[\"默认\",{\"1\":{\"344\":1,\"426\":1,\"500\":1,\"505\":1}}],[\"默认是按照当前的进度线性计算返回的值\",{\"1\":{\"358\":1}}],[\"默认是\",{\"1\":{\"352\":1,\"703\":1}}],[\"默认是用相同大小的\",{\"1\":{\"347\":1}}],[\"默认是使用\",{\"1\":{\"344\":1}}],[\"默认是居中\",{\"1\":{\"259\":1}}],[\"默认实现的\",{\"1\":{\"342\":1}}],[\"默认标记动画为\",{\"1\":{\"322\":1}}],[\"默认分别为\",{\"1\":{\"319\":2}}],[\"默认构造方法\",{\"1\":{\"319\":1}}],[\"默认没有动画\",{\"1\":{\"302\":1}}],[\"默认情况下\",{\"1\":{\"276\":1,\"295\":1}}],[\"默认情况下他使用的fit模式是flexfit\",{\"1\":{\"276\":1}}],[\"默认启用\",{\"1\":{\"161\":1}}],[\"默认在\",{\"1\":{\"50\":1}}],[\"默认运行在创建他的线程中\",{\"1\":{\"36\":1}}],[\"默认为黑色\",{\"1\":{\"902\":1}}],[\"默认为所有数组的父类\",{\"1\":{\"538\":1}}],[\"默认为空\",{\"1\":{\"415\":1}}],[\"默认为主线程\",{\"1\":{\"63\":1}}],[\"默认为\",{\"1\":{\"27\":1,\"74\":1,\"324\":1,\"501\":1,\"638\":1}}],[\"前端也类似\",{\"1\":{\"888\":1}}],[\"前序遍历\",{\"1\":{\"665\":2,\"666\":1,\"834\":1}}],[\"前五步是类加载机制\",{\"1\":{\"490\":1}}],[\"前至少经历两个标记过程\",{\"1\":{\"475\":1}}],[\"前后缓存区域的内容\",{\"1\":{\"442\":1}}],[\"前后传入的值不同便可以自动从\",{\"1\":{\"314\":1}}],[\"前后传入的值不同\",{\"1\":{\"300\":1}}],[\"前景的绘制\",{\"1\":{\"335\":1}}],[\"前者优先级高\",{\"1\":{\"745\":1}}],[\"前者执行失败才会执行后者\",{\"1\":{\"701\":1}}],[\"前者执行成功才会执行后者\",{\"1\":{\"701\":1}}],[\"前者对待异常是不处理的\",{\"1\":{\"640\":1}}],[\"前者用于生成\",{\"1\":{\"307\":1}}],[\"前者一旦创建\",{\"1\":{\"280\":1}}],[\"前者在共有的进程中进行\",{\"1\":{\"36\":1}}],[\"前三个属性含义很明显\",{\"1\":{\"261\":1}}],[\"前三者都需要\",{\"1\":{\"10\":1}}],[\"前面我们知道renderview其实是一个\",{\"1\":{\"255\":1}}],[\"前言\",{\"0\":{\"69\":1,\"82\":1,\"99\":1,\"199\":1,\"209\":1,\"601\":1,\"649\":1,\"707\":1,\"781\":1,\"791\":1,\"826\":1,\"832\":1,\"841\":1,\"855\":1,\"868\":1,\"878\":1,\"886\":1,\"902\":1,\"910\":1,\"918\":1}}],[\"前台服务和通知\",{\"0\":{\"43\":1}}],[\"有序\",{\"1\":{\"921\":1}}],[\"有序数组插入\",{\"1\":{\"880\":1}}],[\"有序数组查找快\",{\"1\":{\"880\":1}}],[\"有序数组\",{\"0\":{\"880\":1},\"1\":{\"913\":2}}],[\"有序性\",{\"1\":{\"604\":1}}],[\"有序性三个特征进行的\",{\"1\":{\"604\":1}}],[\"有后继点\",{\"1\":{\"850\":1}}],[\"有着非常优雅的架构与十分简洁的代码\",{\"1\":{\"781\":1}}],[\"有new\",{\"1\":{\"761\":1}}],[\"有不同的获取数据的方式\",{\"1\":{\"757\":1}}],[\"有不同的项目\",{\"1\":{\"103\":1}}],[\"有了okhttpclient对象之后\",{\"1\":{\"711\":1}}],[\"有了以上知识\",{\"1\":{\"576\":1}}],[\"有效\",{\"1\":{\"699\":1}}],[\"有效则开始动画\",{\"1\":{\"308\":1}}],[\"有空格的话需要用引号包住\",{\"1\":{\"697\":1}}],[\"有空闲的或者已经达到最大数目了\",{\"1\":{\"759\":1}}],[\"有空闲\",{\"1\":{\"244\":1}}],[\"有指定的容量一样\",{\"1\":{\"638\":1}}],[\"有需要对其增加一个方法\",{\"1\":{\"612\":1}}],[\"有参的情况如下\",{\"1\":{\"612\":1}}],[\"有什么区别\",{\"1\":{\"562\":1}}],[\"有什么优势和限制\",{\"1\":{\"402\":1,\"433\":1}}],[\"有set\",{\"1\":{\"525\":1}}],[\"有哪些区别\",{\"1\":{\"508\":1}}],[\"有以下全局变量\",{\"0\":{\"500\":1}}],[\"有以下几种类\",{\"1\":{\"399\":1}}],[\"有类变量赋值\",{\"1\":{\"497\":1}}],[\"有人说在堆中\",{\"1\":{\"492\":1}}],[\"有三个柱子\",{\"1\":{\"912\":1}}],[\"有三个常用选项\",{\"1\":{\"76\":1}}],[\"有三种类加载器\",{\"1\":{\"484\":1}}],[\"有该注解则会被\",{\"1\":{\"565\":1}}],[\"有该\",{\"1\":{\"461\":1}}],[\"有关的类有\",{\"1\":{\"740\":1}}],[\"有关的逻辑\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"有关的三个方法外\",{\"1\":{\"357\":1}}],[\"有对应的特殊类\",{\"1\":{\"358\":1}}],[\"有常用的方法\",{\"1\":{\"334\":1}}],[\"有两种途径\",{\"1\":{\"606\":1}}],[\"有两种使用方式\",{\"1\":{\"333\":1}}],[\"有两种构造方法\",{\"1\":{\"319\":1}}],[\"有两个子节点\",{\"1\":{\"859\":1}}],[\"有两个主要作用\",{\"1\":{\"284\":1}}],[\"有两个目的\",{\"1\":{\"112\":1}}],[\"有布局\",{\"1\":{\"288\":1}}],[\"有时候看起来似乎他的\",{\"1\":{\"276\":1}}],[\"有一组数据\",{\"1\":{\"911\":1}}],[\"有一个\",{\"1\":{\"763\":1}}],[\"有一个关联的\",{\"1\":{\"259\":1}}],[\"有一些内置的动画\",{\"1\":{\"300\":1,\"314\":1}}],[\"有一下限制\",{\"1\":{\"190\":1}}],[\"有且仅有一个\",{\"1\":{\"258\":1}}],[\"有自己的\",{\"1\":{\"221\":1}}],[\"有其他需求可以再自己实现\",{\"1\":{\"167\":1}}],[\"有背景\",{\"1\":{\"159\":1}}],[\"有的话就用调用\",{\"1\":{\"767\":1}}],[\"有的话就返回从\",{\"1\":{\"583\":1}}],[\"有的话就立即执行\",{\"1\":{\"239\":1}}],[\"有的话查找其位置\",{\"1\":{\"523\":1}}],[\"有的话直接返回本地对象\",{\"1\":{\"138\":1}}],[\"有的话则标记为deleted\",{\"1\":{\"89\":1}}],[\"有权限校验\",{\"1\":{\"138\":1}}],[\"有长度限制\",{\"1\":{\"137\":2}}],[\"有\",{\"1\":{\"36\":1,\"158\":1,\"183\":1,\"417\":1,\"418\":2,\"507\":1,\"744\":1,\"748\":1}}],[\"有几分钟内的误差\",{\"1\":{\"13\":1}}],[\"无向不带权图中\",{\"1\":{\"849\":1}}],[\"无日志输出模式\",{\"1\":{\"808\":1}}],[\"无末尾逗号\",{\"1\":{\"737\":1}}],[\"无权限\",{\"1\":{\"689\":1}}],[\"无提示\",{\"1\":{\"682\":1}}],[\"无同步方案\",{\"0\":{\"608\":1}}],[\"无符号右移\",{\"1\":{\"507\":1}}],[\"无则创建并返回\",{\"1\":{\"461\":1}}],[\"无限大时\",{\"1\":{\"445\":1}}],[\"无限期运行\",{\"1\":{\"36\":1}}],[\"无法右旋\",{\"1\":{\"904\":1}}],[\"无法进行\",{\"1\":{\"771\":1}}],[\"无法直接转化为字符串\",{\"1\":{\"557\":1}}],[\"无法同时访问初始化语句\",{\"1\":{\"547\":1}}],[\"无法\",{\"1\":{\"529\":1}}],[\"无法影响其生存时间\",{\"1\":{\"481\":1}}],[\"无法消耗\",{\"1\":{\"418\":1}}],[\"无法识别手势\",{\"1\":{\"415\":1}}],[\"无需遍历时效果最好\",{\"1\":{\"826\":1}}],[\"无需手动传入\",{\"1\":{\"728\":1}}],[\"无需再返回当前函数\",{\"1\":{\"614\":1}}],[\"无需再滑动才会向上滑动列表\",{\"1\":{\"403\":1}}],[\"无需改动\",{\"1\":{\"30\":1}}],[\"无论如何\",{\"1\":{\"538\":1,\"761\":1}}],[\"无论这些thread使用的是同一个threadlocal对象还是完全不同的threadlocal对象\",{\"1\":{\"526\":1}}],[\"无论\",{\"1\":{\"405\":1,\"412\":1,\"442\":1}}],[\"无论哪种实现方式\",{\"1\":{\"333\":1}}],[\"无论他们是否使用到了inheritedwidget\",{\"1\":{\"273\":1}}],[\"无论是哪种\",{\"1\":{\"761\":1}}],[\"无论是runheavyweight\",{\"1\":{\"759\":1}}],[\"无论是恶意的流还是不完整的流\",{\"1\":{\"584\":1}}],[\"无论是在\",{\"1\":{\"415\":1}}],[\"无论是普通的文件格式\",{\"1\":{\"243\":1}}],[\"无论是单次的还是循环的\",{\"1\":{\"234\":1}}],[\"无论是\",{\"1\":{\"126\":1,\"221\":1,\"235\":1,\"238\":1,\"349\":1,\"361\":1,\"388\":1,\"426\":1}}],[\"无须复制\",{\"1\":{\"137\":1}}],[\"无生命周期\",{\"1\":{\"126\":1}}],[\"无\",{\"1\":{\"36\":1,\"471\":1}}],[\"无关\",{\"1\":{\"35\":1,\"126\":1}}],[\"销毁时\",{\"1\":{\"35\":1}}],[\"绑定布局和数据\",{\"0\":{\"784\":1}}],[\"绑定一些数据\",{\"1\":{\"752\":1}}],[\"绑定分为静态绑定和动态绑定\",{\"1\":{\"490\":1}}],[\"绑定到指定\",{\"1\":{\"256\":1}}],[\"绑定到之前生成的renderview上面\",{\"1\":{\"255\":1}}],[\"绑定到\",{\"1\":{\"252\":1,\"254\":2,\"256\":1,\"266\":1}}],[\"绑定到服务端获取\",{\"1\":{\"57\":1}}],[\"绑定事件\",{\"1\":{\"124\":1}}],[\"绑定和启动转换\",{\"0\":{\"42\":1}}],[\"绑定服务是异步进行的\",{\"1\":{\"41\":1}}],[\"绑定服务时的注意事项\",{\"0\":{\"41\":1}}],[\"绑定服务时被调用\",{\"1\":{\"38\":1}}],[\"绑定服务\",{\"1\":{\"38\":1}}],[\"绑定服务的三种方式\",{\"0\":{\"37\":1}}],[\"绑定在一起的\",{\"1\":{\"83\":1}}],[\"绑定在一起\",{\"1\":{\"35\":1,\"410\":1}}],[\"绑定\",{\"1\":{\"35\":1,\"112\":1,\"247\":1,\"409\":1,\"753\":1}}],[\"服务器\",{\"1\":{\"806\":1}}],[\"服务的binderproxy对象\",{\"1\":{\"138\":1}}],[\"服务之\",{\"1\":{\"138\":1}}],[\"服务如下所示\",{\"1\":{\"83\":1}}],[\"服务连接成功后\",{\"1\":{\"64\":1}}],[\"服务连接成功\",{\"1\":{\"62\":1}}],[\"服务与客户端双向通信\",{\"1\":{\"39\":1}}],[\"服务中公共方法\",{\"1\":{\"38\":1}}],[\"服务端的\",{\"1\":{\"83\":1}}],[\"服务端回调客户端方法运行在客户端主线程\",{\"1\":{\"63\":1}}],[\"服务端\",{\"0\":{\"63\":1},\"1\":{\"38\":2,\"39\":1,\"57\":1}}],[\"服务解绑\",{\"1\":{\"35\":1}}],[\"服务绑定\",{\"1\":{\"35\":1}}],[\"上建立的项目\",{\"1\":{\"813\":1}}],[\"上传网站\",{\"0\":{\"811\":1}}],[\"上传工程到\",{\"1\":{\"675\":1}}],[\"上自动部署\",{\"0\":{\"790\":1}}],[\"上提供了一个抽象层\",{\"1\":{\"786\":1}}],[\"上运行\",{\"1\":{\"770\":1}}],[\"上图中\",{\"1\":{\"765\":1}}],[\"上加一个\",{\"1\":{\"445\":1}}],[\"上回我们对\",{\"1\":{\"422\":1}}],[\"上触发\",{\"1\":{\"409\":1}}],[\"上较大尺寸可能会\",{\"1\":{\"400\":1}}],[\"上应用加减乘运算\",{\"1\":{\"358\":1}}],[\"上添加过渡组件\",{\"1\":{\"352\":1}}],[\"上层路径\",{\"1\":{\"683\":1}}],[\"上层\",{\"1\":{\"341\":1}}],[\"上节我们说道\",{\"1\":{\"259\":1}}],[\"上篇文章介绍了dagger\",{\"1\":{\"209\":1}}],[\"上所有的控件\",{\"1\":{\"189\":1}}],[\"上\",{\"1\":{\"126\":1,\"400\":1}}],[\"上面对应的user\",{\"1\":{\"791\":1}}],[\"上面是\",{\"1\":{\"766\":1}}],[\"上面不一样\",{\"1\":{\"753\":1}}],[\"上面时的步骤的总结\",{\"1\":{\"675\":1}}],[\"上面删除这个分支\",{\"1\":{\"674\":1}}],[\"上面了\",{\"1\":{\"671\":1,\"812\":1}}],[\"上面将工程同步到\",{\"1\":{\"671\":1}}],[\"上面添加\",{\"1\":{\"670\":1}}],[\"上面的代码就支持了app\",{\"1\":{\"784\":1}}],[\"上面的代码中还分别调用了\",{\"1\":{\"423\":1}}],[\"上面的实现源码\",{\"1\":{\"517\":1}}],[\"上面的滑动事件\",{\"1\":{\"405\":1}}],[\"上面的博客\",{\"1\":{\"0\":1}}],[\"上面提到的这种\",{\"1\":{\"519\":1}}],[\"上面提到\",{\"1\":{\"399\":1}}],[\"上面分析了\",{\"1\":{\"370\":1}}],[\"上面进行\",{\"1\":{\"334\":1}}],[\"上面说道\",{\"1\":{\"265\":1}}],[\"上面我们分析到\",{\"1\":{\"265\":1}}],[\"上面执行\",{\"1\":{\"189\":1}}],[\"上面涉及到的代码路径\",{\"1\":{\"180\":1}}],[\"上面\",{\"1\":{\"122\":1,\"247\":1,\"254\":1,\"334\":1,\"398\":1,\"419\":1,\"668\":1,\"674\":1,\"794\":1}}],[\"上述这些分析是保守的\",{\"1\":{\"771\":1}}],[\"上述这些步骤能够实施的关键\",{\"1\":{\"244\":1}}],[\"上述这种基于乐观假设的优化\",{\"1\":{\"768\":1}}],[\"上述isolate\",{\"1\":{\"748\":1}}],[\"上述方法会被编译为类似下面的过程\",{\"1\":{\"547\":1}}],[\"上述所有的\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"上述其余构造函数都根据传入的string\",{\"1\":{\"390\":1}}],[\"上述三值都为\",{\"1\":{\"375\":1}}],[\"上述三者中\",{\"1\":{\"126\":1}}],[\"上述关于\",{\"1\":{\"355\":1}}],[\"上述四种方法\",{\"1\":{\"319\":1}}],[\"上述分析是继承\",{\"1\":{\"307\":1}}],[\"上述几种情况都没有处理的异常\",{\"1\":{\"297\":1}}],[\"上述几种情况都没有处理的\",{\"1\":{\"296\":1}}],[\"上述涉及到的几个类彼此之间到底是什么关系\",{\"1\":{\"251\":1}}],[\"上述两种库都是基于\",{\"1\":{\"385\":1}}],[\"上述两种方法最终都会直接触发\",{\"1\":{\"332\":1}}],[\"上述两种方式中\",{\"1\":{\"314\":1}}],[\"上述两种\",{\"1\":{\"221\":1}}],[\"上述完整的代码如下\",{\"1\":{\"217\":1}}],[\"上述完整代码如下\",{\"1\":{\"203\":1,\"204\":1}}],[\"上述问题的解决方案是在另外一个方法上加一个注解\",{\"1\":{\"204\":1}}],[\"上述代码中执行到的extendednetworkimageprovider\",{\"1\":{\"383\":1}}],[\"上述代码中的mainerrorwidget是一个自定义的展示错误信息的页面\",{\"1\":{\"295\":1}}],[\"上述代码中的\",{\"1\":{\"203\":1,\"365\":1}}],[\"上述代码是我们使用\",{\"1\":{\"330\":1}}],[\"上述代码的效果如下\",{\"1\":{\"251\":1}}],[\"上述代码的详细分析可以参考作者的文章\",{\"1\":{\"126\":1}}],[\"上述代码最后将结果包装成了\",{\"1\":{\"247\":1}}],[\"上述值中\",{\"1\":{\"196\":1}}],[\"上述\",{\"1\":{\"125\":1,\"398\":1}}],[\"上述架构循序渐进\",{\"1\":{\"121\":1}}],[\"上述的屏幕适配方案使用简单\",{\"1\":{\"101\":1}}],[\"上述无论是\",{\"1\":{\"75\":1}}],[\"上占得像素是等比例变化的\",{\"1\":{\"100\":1}}],[\"上的值\",{\"1\":{\"412\":1}}],[\"上的组件是单独管理的\",{\"1\":{\"341\":1}}],[\"上的\",{\"1\":{\"100\":1}}],[\"上文的isolate\",{\"1\":{\"752\":1}}],[\"上文\",{\"1\":{\"93\":1}}],[\"上方移动\",{\"1\":{\"75\":1}}],[\"上坡度\",{\"1\":{\"33\":1}}],[\"坡底到下一行坡顶的距离\",{\"1\":{\"33\":1}}],[\"坡底\",{\"1\":{\"33\":1}}],[\"坡顶\",{\"1\":{\"33\":1}}],[\"得知了子类中是否有\",{\"1\":{\"304\":1}}],[\"得静态内部类\",{\"1\":{\"153\":1}}],[\"得出所需要的效果\",{\"1\":{\"131\":1}}],[\"得出结论\",{\"1\":{\"33\":1}}],[\"得到一个基本有序的数组\",{\"1\":{\"919\":1}}],[\"得到一个sendport\",{\"1\":{\"249\":1}}],[\"得到并更新数据state后\",{\"1\":{\"124\":1}}],[\"得到\",{\"1\":{\"87\":1}}],[\"得到两种值\",{\"1\":{\"74\":1}}],[\"得到执行\",{\"1\":{\"10\":1}}],[\"+threadlocal\",{\"1\":{\"527\":4}}],[\"+thread\",{\"1\":{\"527\":2}}],[\"++leftindex\",{\"1\":{\"927\":1}}],[\"++size\",{\"1\":{\"880\":1}}],[\"++i\",{\"1\":{\"418\":1}}],[\"++\",{\"1\":{\"247\":2,\"760\":2}}],[\"+=\",{\"1\":{\"238\":3,\"265\":1}}],[\"+id\",{\"1\":{\"118\":1,\"124\":1,\"167\":1,\"189\":1,\"783\":4,\"784\":1}}],[\"+1\",{\"1\":{\"93\":1,\"94\":1,\"474\":1}}],[\"+\",{\"1\":{\"33\":7,\"54\":1,\"63\":2,\"64\":2,\"71\":1,\"74\":2,\"90\":1,\"92\":1,\"95\":2,\"138\":1,\"144\":2,\"145\":5,\"153\":4,\"173\":2,\"193\":3,\"234\":3,\"247\":3,\"256\":1,\"324\":1,\"325\":1,\"329\":2,\"330\":1,\"358\":1,\"369\":1,\"398\":2,\"399\":1,\"405\":2,\"412\":7,\"440\":3,\"441\":1,\"442\":1,\"513\":4,\"516\":21,\"519\":3,\"521\":16,\"532\":4,\"533\":1,\"534\":3,\"553\":2,\"557\":5,\"584\":3,\"586\":11,\"587\":3,\"590\":10,\"602\":1,\"625\":1,\"641\":1,\"663\":1,\"666\":1,\"689\":1,\"712\":1,\"731\":3,\"737\":1,\"753\":1,\"759\":1,\"760\":1,\"802\":1,\"819\":1,\"827\":2,\"859\":2,\"890\":11,\"896\":3,\"897\":2,\"898\":1,\"911\":4,\"913\":2,\"921\":3,\"927\":1}}],[\"就称为三角数组\",{\"1\":{\"911\":1}}],[\"就称图为带权图\",{\"1\":{\"841\":1}}],[\"就称图是有向图\",{\"1\":{\"841\":1}}],[\"就交换\",{\"1\":{\"896\":1}}],[\"就得到有序数组\",{\"1\":{\"880\":1}}],[\"就选择去访问该点邻接点的邻接点\",{\"1\":{\"848\":1}}],[\"就说明\",{\"1\":{\"802\":1}}],[\"就说明用户选择了不再提示\",{\"1\":{\"172\":1}}],[\"就等待已有的\",{\"1\":{\"759\":1}}],[\"就已经终止了而导致这些方法收不到回调\",{\"1\":{\"740\":1}}],[\"就发生了被限制访问\",{\"1\":{\"732\":1}}],[\"就做到了这一点\",{\"1\":{\"708\":1}}],[\"就先对其调用\",{\"1\":{\"631\":1}}],[\"就读取\",{\"1\":{\"630\":1}}],[\"就要返回\",{\"1\":{\"594\":1}}],[\"就要保证屏幕的总\",{\"1\":{\"100\":1}}],[\"就像访问本程序的数据一样\",{\"1\":{\"816\":1}}],[\"就像流一样\",{\"1\":{\"629\":1,\"653\":1}}],[\"就像使用集合与序列一样\",{\"1\":{\"629\":1}}],[\"就像\",{\"1\":{\"564\":1,\"638\":1,\"643\":1}}],[\"就像是一个设计好的处理预案\",{\"1\":{\"189\":1}}],[\"就可能会抛出异常\",{\"1\":{\"519\":1}}],[\"就可以在有向无环图中完成拓扑排序\",{\"1\":{\"850\":1}}],[\"就可以自动部署到\",{\"1\":{\"812\":1}}],[\"就可以看到本地搭建好的\",{\"1\":{\"806\":1}}],[\"就可以拥有一个在线的静态博客\",{\"1\":{\"791\":1}}],[\"就可以正常运行\",{\"1\":{\"680\":1}}],[\"就可以避免这个问题\",{\"1\":{\"397\":1}}],[\"就可以将其保存在static\",{\"1\":{\"358\":1}}],[\"就可以和\",{\"1\":{\"246\":1}}],[\"就可以计算出baseline的y坐标\",{\"1\":{\"33\":1}}],[\"就应该考虑使用\",{\"1\":{\"442\":1}}],[\"就只会请求最新的值\",{\"1\":{\"630\":1}}],[\"就只限制宽度\",{\"1\":{\"439\":1}}],[\"就只限制高度\",{\"1\":{\"439\":1}}],[\"就只更新child的slot\",{\"1\":{\"263\":1}}],[\"就\",{\"1\":{\"434\":1}}],[\"就由\",{\"1\":{\"418\":1}}],[\"就表示当前\",{\"1\":{\"417\":1}}],[\"就无法协调\",{\"1\":{\"415\":1}}],[\"就不限制主轴方向的尺寸\",{\"1\":{\"439\":1}}],[\"就不能再超了\",{\"1\":{\"412\":1}}],[\"就不会\",{\"1\":{\"273\":1}}],[\"就展示失败信息\",{\"1\":{\"383\":1}}],[\"就从网络加载\",{\"1\":{\"383\":1}}],[\"就将父节点移动到插入值的位置\",{\"1\":{\"858\":1}}],[\"就将\",{\"1\":{\"765\":1}}],[\"就将此图片加入\",{\"1\":{\"376\":1}}],[\"就将其加入\",{\"1\":{\"376\":1}}],[\"就去下载\",{\"1\":{\"376\":1}}],[\"就加入\",{\"1\":{\"376\":1}}],[\"就加入到\",{\"1\":{\"232\":1}}],[\"就直接返回\",{\"1\":{\"376\":1}}],[\"就包裹\",{\"1\":{\"370\":1}}],[\"就停止监听\",{\"1\":{\"321\":1}}],[\"就在电脑上面安装好了\",{\"1\":{\"805\":1}}],[\"就在刚刚写下这句话的时候\",{\"1\":{\"732\":1}}],[\"就在本文编辑的过程中\",{\"1\":{\"731\":1}}],[\"就在此时\",{\"1\":{\"545\":1}}],[\"就在同一个值\",{\"1\":{\"317\":1}}],[\"就在该行限定的高度内居中显示\",{\"1\":{\"33\":1}}],[\"就使用内置的显式动画结合自己创建的\",{\"1\":{\"312\":1}}],[\"就会很耗性能\",{\"1\":{\"869\":1}}],[\"就会减少复制的次数\",{\"1\":{\"857\":1}}],[\"就会通过livedata主动通知布局更新界面\",{\"1\":{\"781\":1}}],[\"就会通过isolate\",{\"1\":{\"754\":1}}],[\"就会发生冲突\",{\"1\":{\"602\":1}}],[\"就会去调用该对象的writeexternal方法\",{\"1\":{\"591\":1}}],[\"就会去找这个对象是否已经被序列化过了\",{\"1\":{\"587\":1}}],[\"就会被回收掉\",{\"1\":{\"528\":1}}],[\"就会被认为built\",{\"1\":{\"271\":1}}],[\"就会在内容过长的时候发生overflowed错误并且无法滑动\",{\"1\":{\"439\":1}}],[\"就会保证用户可以上下滑动\",{\"1\":{\"434\":1}}],[\"就会强制\",{\"1\":{\"276\":1}}],[\"就会执行一次此类普通\",{\"1\":{\"230\":1}}],[\"就会执行\",{\"1\":{\"189\":1}}],[\"就调用下面的方法👇\",{\"1\":{\"583\":1}}],[\"就调用下一个\",{\"1\":{\"193\":1}}],[\"就调用\",{\"1\":{\"383\":1}}],[\"就调用child\",{\"1\":{\"263\":1}}],[\"就有了对应的widget和element\",{\"1\":{\"256\":1}}],[\"就安排更新帧\",{\"1\":{\"254\":1}}],[\"就新建一个\",{\"1\":{\"760\":1}}],[\"就新建\",{\"1\":{\"244\":1}}],[\"就通过\",{\"1\":{\"235\":1}}],[\"就添加监听\",{\"1\":{\"232\":1}}],[\"就立即返回结果\",{\"1\":{\"231\":1}}],[\"就执行messagehandlertask\",{\"1\":{\"759\":1}}],[\"就执行createisolategroupandsetuphelper\",{\"1\":{\"757\":1}}],[\"就执行createandsetupserviceisolate\",{\"1\":{\"757\":1}}],[\"就执行createandsetupdartdevisolate\",{\"1\":{\"757\":1}}],[\"就执行createandsetupkernelisolate\",{\"1\":{\"757\":1}}],[\"就执行这个\",{\"1\":{\"591\":2}}],[\"就执行一次步骤\",{\"1\":{\"239\":1}}],[\"就执行普通的\",{\"1\":{\"239\":1}}],[\"就执行\",{\"1\":{\"230\":1}}],[\"就知道了有个对象需要它来帮助我们注入\",{\"1\":{\"201\":1}}],[\"就实现了启动通过已经注册了的\",{\"1\":{\"179\":1}}],[\"就需要用到\",{\"1\":{\"785\":1}}],[\"就需要结合\",{\"1\":{\"444\":1}}],[\"就需要在其外部包裹一个statefulwidget\",{\"1\":{\"271\":1}}],[\"就需要同时也更改client对应的方法\",{\"1\":{\"199\":1}}],[\"就需要重写onmeasure\",{\"1\":{\"159\":1}}],[\"就需要考虑\",{\"1\":{\"82\":1}}],[\"就画出背景\",{\"1\":{\"153\":1}}],[\"就是一个递归\",{\"1\":{\"911\":1}}],[\"就是满足条件\",{\"1\":{\"850\":1}}],[\"就是多出来的那一部分\",{\"1\":{\"439\":1}}],[\"就是我们前文提到的那个integer\",{\"1\":{\"519\":1}}],[\"就是我们传入的\",{\"1\":{\"436\":1}}],[\"就是我们在\",{\"1\":{\"243\":1,\"244\":1}}],[\"就是继承自\",{\"1\":{\"430\":1}}],[\"就是借助\",{\"1\":{\"358\":1}}],[\"就是\",{\"1\":{\"265\":1,\"343\":1,\"436\":1}}],[\"就是为了帮助我们解决这个问题\",{\"1\":{\"199\":1}}],[\"就是上述的\",{\"1\":{\"196\":2}}],[\"就是本案例中触发子\",{\"1\":{\"111\":1}}],[\"就是平时在\",{\"1\":{\"24\":1}}],[\"就出触发gc\",{\"1\":{\"90\":1}}],[\"文中引用的文字全部来自http\",{\"1\":{\"813\":1}}],[\"文本可以跨行\",{\"1\":{\"723\":1}}],[\"文本方向\",{\"1\":{\"251\":1}}],[\"文章格式\",{\"1\":{\"809\":1}}],[\"文章创建\",{\"1\":{\"716\":1}}],[\"文章并同步\",{\"0\":{\"715\":1}}],[\"文章参考\",{\"1\":{\"43\":1}}],[\"文档链接\",{\"1\":{\"794\":1}}],[\"文档推送到\",{\"1\":{\"791\":1}}],[\"文档后\",{\"1\":{\"791\":1}}],[\"文档到\",{\"1\":{\"791\":1}}],[\"文档\",{\"0\":{\"790\":1},\"1\":{\"575\":1}}],[\"文档关于日期的定义\",{\"1\":{\"572\":1}}],[\"文档中的定义\",{\"1\":{\"575\":1}}],[\"文档中\",{\"1\":{\"565\":1}}],[\"文字在控件上下居中\",{\"1\":{\"33\":1}}],[\"文字在一行居中显示\",{\"1\":{\"33\":1}}],[\"文字的上下高度中心\",{\"1\":{\"33\":1}}],[\"文字的上下中心\",{\"1\":{\"33\":1}}],[\"文件箱\",{\"1\":{\"807\":1}}],[\"文件的目录下\",{\"1\":{\"806\":1}}],[\"文件的名字自动替我们生成的\",{\"1\":{\"784\":1}}],[\"文件默认格式\",{\"1\":{\"722\":1}}],[\"文件并打开\",{\"1\":{\"719\":1}}],[\"文件打包\",{\"0\":{\"693\":1}}],[\"文件群组权限一项默认为该群组\",{\"1\":{\"691\":1}}],[\"文件权限与\",{\"0\":{\"690\":1}}],[\"文件相关\",{\"0\":{\"687\":1}}],[\"文件和目录名字除了\",{\"1\":{\"684\":1}}],[\"文件夹用于放置博客\",{\"1\":{\"813\":1}}],[\"文件夹\",{\"0\":{\"684\":1},\"1\":{\"690\":1}}],[\"文件夹下\",{\"1\":{\"57\":1}}],[\"文件解压\",{\"1\":{\"677\":1}}],[\"文件读取\",{\"1\":{\"612\":1}}],[\"文件后可以看到\",{\"1\":{\"602\":1}}],[\"文件描述\",{\"1\":{\"594\":1}}],[\"文件是使用一种变体utf\",{\"1\":{\"519\":1}}],[\"文件格式规范\",{\"1\":{\"494\":1}}],[\"文件格式验证\",{\"1\":{\"494\":1}}],[\"文件等获取图片\",{\"1\":{\"390\":1}}],[\"文件等加载图片\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"文件路径\",{\"1\":{\"243\":1}}],[\"文件信息\",{\"1\":{\"104\":1}}],[\"文件可以一步打包多个渠道\",{\"1\":{\"103\":1}}],[\"文件特点\",{\"0\":{\"58\":1}}],[\"文件供二者依赖\",{\"1\":{\"57\":1}}],[\"文件放到一个\",{\"1\":{\"57\":1}}],[\"文件处理完毕后再加载主\",{\"1\":{\"30\":1}}],[\"文件合并优化等耗时操作\",{\"1\":{\"30\":1}}],[\"文件中保存\",{\"1\":{\"580\":1}}],[\"文件中有效\",{\"1\":{\"565\":1}}],[\"文件中的字节流信息符合虚拟机的要求\",{\"1\":{\"494\":1}}],[\"文件中声明即可\",{\"1\":{\"170\":1}}],[\"文件中\",{\"1\":{\"30\":2}}],[\"文件中提供而导致java\",{\"1\":{\"30\":1}}],[\"文件\",{\"0\":{\"719\":1},\"1\":{\"30\":1,\"57\":1,\"70\":1,\"135\":1,\"138\":2,\"484\":1,\"690\":1,\"809\":2}}],[\"文件分区存储在图片读写的适配\",{\"0\":{\"4\":1}}],[\"因而\",{\"1\":{\"123\":1}}],[\"因而节省了内存\",{\"1\":{\"85\":1}}],[\"因为左边的数组是有序的\",{\"1\":{\"898\":1}}],[\"因为交换次数少\",{\"1\":{\"897\":1}}],[\"因为他对每个顶点只访问一次\",{\"1\":{\"849\":1}}],[\"因为他用了\",{\"1\":{\"273\":1}}],[\"因为需要将学习过程中的一些笔记\",{\"1\":{\"798\":1}}],[\"因为spawnuri中isolatespawnstate的isolategroup为nulltrp\",{\"1\":{\"755\":1}}],[\"因为执行到这里的都有\",{\"1\":{\"751\":1}}],[\"因为有多个\",{\"1\":{\"793\":1}}],[\"因为有可能会在进行正则匹配时造成误删等问题\",{\"1\":{\"684\":1}}],[\"因为有两个方法都可以提供service\",{\"1\":{\"203\":1}}],[\"因为流只会在被收集的时候才会被启动\",{\"1\":{\"651\":1}}],[\"因为在这种情况下它总是有工作要做\",{\"1\":{\"645\":1}}],[\"因为在绘制文字时\",{\"1\":{\"33\":1}}],[\"因为没有办法从该\",{\"1\":{\"621\":1}}],[\"因为泛型是通过擦除实现的\",{\"1\":{\"538\":1}}],[\"因为全局变量是通过传入内部类的\",{\"1\":{\"512\":1}}],[\"因为至少需要对\",{\"1\":{\"445\":1}}],[\"因为此时大小不超过数组的队列前端已经指向\",{\"1\":{\"888\":1}}],[\"因为此时限制了\",{\"1\":{\"418\":1}}],[\"因为此时可能\",{\"1\":{\"412\":2}}],[\"因为当\",{\"1\":{\"418\":1}}],[\"因为这里我们的isolate→group不为空\",{\"1\":{\"751\":1}}],[\"因为这些变量不会变化\",{\"1\":{\"593\":1}}],[\"因为这个库是官方\",{\"1\":{\"380\":1}}],[\"因为这表示上一个页面还存在\",{\"1\":{\"350\":1}}],[\"因为每次\",{\"1\":{\"273\":1}}],[\"因为\",{\"1\":{\"259\":1,\"273\":1,\"358\":1,\"381\":1,\"418\":1,\"431\":1,\"538\":1,\"771\":1}}],[\"因为child==null\",{\"1\":{\"259\":1}}],[\"因为widgetsflutterbinding继承自\",{\"1\":{\"253\":1}}],[\"因为异步代码在对象完全初始化之前可能会对该对象执行读写操作\",{\"1\":{\"126\":1}}],[\"因为避免了自动装箱\",{\"1\":{\"85\":1}}],[\"因此调用\",{\"1\":{\"767\":1}}],[\"因此synchronize是重量级操作\",{\"1\":{\"603\":1}}],[\"因此在线程操作数据时需要考虑线程并发时操作数据的同步问题\",{\"1\":{\"601\":1}}],[\"因此只剩下\",{\"1\":{\"519\":1}}],[\"因此理论上允许的的最大长度是2^16=65536\",{\"1\":{\"519\":1}}],[\"因此应当保证\",{\"1\":{\"445\":1}}],[\"因此\",{\"1\":{\"137\":1,\"446\":1}}],[\"因此要尽量减少对其的依赖\",{\"1\":{\"126\":1}}],[\"因此两个\",{\"1\":{\"57\":1}}],[\"因此即使应用未运行\",{\"1\":{\"11\":1}}],[\"因内存不足被杀死\",{\"1\":{\"36\":2}}],[\"简述\",{\"0\":{\"484\":1,\"489\":1}}],[\"简单易实现\",{\"1\":{\"918\":1}}],[\"简单排序\",{\"0\":{\"894\":1,\"895\":1}}],[\"简单爬虫写的内容\",{\"1\":{\"735\":1}}],[\"简单\",{\"1\":{\"588\":1}}],[\"简单计算一下这个enumclazz的大小\",{\"1\":{\"521\":1}}],[\"简单总结一下\",{\"1\":{\"377\":1}}],[\"简单梳理一下图片从加载到展示的过程\",{\"1\":{\"364\":1}}],[\"简单使用\",{\"0\":{\"340\":1,\"553\":1,\"741\":1}}],[\"简单许多\",{\"1\":{\"309\":1}}],[\"简单来说如下\",{\"1\":{\"377\":1}}],[\"简单来说\",{\"1\":{\"300\":1,\"314\":1}}],[\"简单入门\",{\"0\":{\"278\":1}}],[\"简单的可以理解为程序编译期的绑定\",{\"1\":{\"490\":1}}],[\"简单的\",{\"1\":{\"251\":1,\"266\":1}}],[\"简化数据流的管理\",{\"1\":{\"125\":1}}],[\"简要说明\",{\"0\":{\"110\":1}}],[\"简书\",{\"1\":{\"33\":1,\"113\":2,\"206\":1}}],[\"简介\",{\"0\":{\"24\":1,\"166\":1,\"170\":1,\"176\":1,\"544\":1,\"552\":1,\"556\":1,\"716\":1,\"730\":1,\"735\":1}}],[\"来控制程序版本真是一件令人愉悦的事件\",{\"1\":{\"798\":1}}],[\"来优化\",{\"1\":{\"768\":1}}],[\"来处理消息\",{\"1\":{\"761\":1}}],[\"来处理任务\",{\"1\":{\"760\":1}}],[\"来看一下对应的isolate\",{\"1\":{\"749\":1}}],[\"来看一下他是怎么实现的\",{\"1\":{\"247\":1}}],[\"来\",{\"1\":{\"744\":1}}],[\"来进行取消\",{\"1\":{\"640\":1}}],[\"来进行依赖绑定\",{\"1\":{\"112\":1}}],[\"来指定\",{\"1\":{\"638\":1}}],[\"来确保类有一个唯一的对象\",{\"1\":{\"544\":1}}],[\"来限制对局部变量的更改\",{\"1\":{\"513\":1}}],[\"来引用的\",{\"1\":{\"512\":1}}],[\"来解决此问题\",{\"1\":{\"445\":1}}],[\"来获取一些使此\",{\"1\":{\"438\":1}}],[\"来获取对象的\",{\"1\":{\"92\":1}}],[\"来转发给\",{\"1\":{\"415\":1}}],[\"来管理图片缓存\",{\"1\":{\"397\":1}}],[\"来缓存一些图片\",{\"1\":{\"384\":1}}],[\"来展示图片\",{\"1\":{\"370\":1,\"393\":1}}],[\"来创建线性插值\",{\"1\":{\"359\":1}}],[\"来实现动态调用\",{\"1\":{\"767\":1}}],[\"来实现相同的目的\",{\"1\":{\"643\":1}}],[\"来实现布局逻辑\",{\"1\":{\"436\":1}}],[\"来实现\",{\"1\":{\"308\":1,\"444\":1}}],[\"来触发inheritedwidget重建\",{\"1\":{\"271\":1}}],[\"来发消息触发\",{\"1\":{\"243\":1,\"244\":1}}],[\"来说基本可以满足要求\",{\"1\":{\"388\":1}}],[\"来说\",{\"1\":{\"237\":1,\"358\":1,\"388\":1,\"442\":1}}],[\"来说其他和他交互的都是\",{\"1\":{\"138\":1}}],[\"来避免内存资源的浪费\",{\"1\":{\"136\":1}}],[\"来访问数据\",{\"1\":{\"126\":1}}],[\"来根据用户输入处理\",{\"1\":{\"122\":1}}],[\"来存放这些\",{\"1\":{\"63\":1}}],[\"来源2\",{\"1\":{\"519\":1}}],[\"来源\",{\"1\":{\"33\":1,\"112\":1,\"136\":1,\"538\":1,\"573\":1,\"575\":1,\"675\":1}}],[\"来自\",{\"1\":{\"26\":1,\"140\":1,\"578\":1}}],[\"下可以运行start\",{\"1\":{\"719\":1}}],[\"下可能显示不全的情况\",{\"1\":{\"442\":1}}],[\"下一步便是创建一个适当的网络请求\",{\"1\":{\"711\":1}}],[\"下一帧屏幕刷新\",{\"1\":{\"270\":1}}],[\"下配置\",{\"0\":{\"676\":1}}],[\"下安装\",{\"1\":{\"675\":1}}],[\"下篇\",{\"1\":{\"627\":1,\"647\":1}}],[\"下的\",{\"1\":{\"484\":1,\"758\":1}}],[\"下称\",{\"1\":{\"420\":1}}],[\"下\",{\"1\":{\"416\":1,\"675\":1}}],[\"下载并安装\",{\"1\":{\"801\":1}}],[\"下载并返回网页内容\",{\"1\":{\"737\":1}}],[\"下载软件\",{\"1\":{\"799\":1}}],[\"下载网页内容\",{\"1\":{\"736\":1}}],[\"下载到的\",{\"1\":{\"677\":1}}],[\"下载\",{\"0\":{\"677\":1}}],[\"下载失败了\",{\"1\":{\"383\":1}}],[\"下载对应进度条的图片资源\",{\"1\":{\"167\":1}}],[\"下所有的\",{\"1\":{\"346\":1}}],[\"下为红底黄字错误信息\",{\"1\":{\"295\":1}}],[\"下级的节点\",{\"1\":{\"256\":1}}],[\"下有效\",{\"1\":{\"176\":1}}],[\"下新建\",{\"1\":{\"167\":1,\"189\":1}}],[\"下图是viewmodel和activity的生命周期对比\",{\"1\":{\"785\":1}}],[\"下图是google\",{\"1\":{\"781\":1}}],[\"下图是\",{\"1\":{\"341\":1,\"355\":1,\"763\":1,\"781\":1}}],[\"下图是一个被statefulwidget包裹的inheritedwidget在setsate\",{\"1\":{\"271\":1}}],[\"下图是二阶贝塞尔曲线绘制方法介绍\",{\"1\":{\"142\":1}}],[\"下图描述了\",{\"1\":{\"140\":1}}],[\"下图中的\",{\"1\":{\"126\":1}}],[\"下图的\",{\"1\":{\"126\":1}}],[\"下图表示paint\",{\"1\":{\"33\":1}}],[\"下面采用的是找该节点的右子树最小值\",{\"1\":{\"836\":1}}],[\"下面就把整个建站的过程大概梳理一下\",{\"1\":{\"798\":1}}],[\"下面两行代码解决编码问题\",{\"1\":{\"737\":1}}],[\"下面提供了两个结局思路\",{\"1\":{\"547\":1}}],[\"下面称其为\",{\"1\":{\"405\":1}}],[\"下面对这些类逐一分析\",{\"1\":{\"404\":1}}],[\"下面的实现\",{\"1\":{\"753\":1}}],[\"下面的\",{\"1\":{\"403\":1,\"413\":1}}],[\"下面的代码依旧是在当前\",{\"1\":{\"247\":1}}],[\"下面着重分析一下执行图片请求的逻辑\",{\"1\":{\"398\":1}}],[\"下面以\",{\"1\":{\"398\":1}}],[\"下面分别分析\",{\"1\":{\"388\":1}}],[\"下面所有的子\",{\"1\":{\"273\":1}}],[\"下面再分析\",{\"1\":{\"264\":1}}],[\"下面我们详细分析一下这个过程\",{\"1\":{\"259\":1}}],[\"下面我们对ibookmanager\",{\"1\":{\"71\":1}}],[\"下面\",{\"1\":{\"256\":1,\"811\":1}}],[\"下面是排序算法比较\",{\"1\":{\"875\":1}}],[\"下面是以上数据结构的速度\",{\"1\":{\"869\":1}}],[\"下面是以上思路的\",{\"1\":{\"196\":1}}],[\"下面是dart\",{\"1\":{\"766\":1}}],[\"下面是使用serializable实现序列化与反序列化的简单示例\",{\"1\":{\"586\":1}}],[\"下面是hashmap的结构\",{\"1\":{\"523\":1}}],[\"下面是\",{\"1\":{\"383\":1}}],[\"下面是一个parcelable的实现\",{\"1\":{\"594\":1}}],[\"下面是一个\",{\"1\":{\"281\":1,\"282\":1,\"403\":1,\"434\":1}}],[\"下面是一个简单的示例代码\",{\"1\":{\"123\":1}}],[\"下面是我们这个\",{\"1\":{\"266\":1}}],[\"下面是到目前为止涉及到的类关系示意图\",{\"1\":{\"243\":1}}],[\"下面为该挂件设置具体的布局样式\",{\"1\":{\"189\":1}}],[\"下面这两个类无需关注\",{\"1\":{\"513\":1}}],[\"下面这两个是实际实现网络\",{\"1\":{\"126\":1}}],[\"下面这段代码中service就是client的依赖\",{\"1\":{\"199\":1}}],[\"下面这些是系统根据我们在\",{\"1\":{\"138\":1}}],[\"下面这个来自\",{\"1\":{\"131\":1}}],[\"下面这个方法在不同系统分别采用不同方式获取文件对应的uri\",{\"1\":{\"6\":1}}],[\"下面代码的整体架构如下\",{\"1\":{\"126\":1}}],[\"下同\",{\"1\":{\"63\":1,\"145\":1,\"190\":1,\"193\":1,\"492\":1}}],[\"下坡度\",{\"1\":{\"33\":1}}],[\"坐标指向该值\",{\"1\":{\"897\":1}}],[\"坐标系中的\",{\"1\":{\"348\":1}}],[\"坐标负值\",{\"1\":{\"148\":1}}],[\"坐标原点在左上角而做的特殊处理\",{\"1\":{\"145\":1}}],[\"坐标和结束的的\",{\"1\":{\"143\":2}}],[\"坐标减去\",{\"1\":{\"75\":1}}],[\"坐标基础上加上\",{\"1\":{\"33\":1}}],[\"坐标\",{\"1\":{\"33\":1,\"75\":1,\"143\":2}}],[\"yml\",{\"0\":{\"794\":1},\"1\":{\"794\":1,\"807\":1,\"808\":1,\"811\":1}}],[\"yield\",{\"1\":{\"625\":1,\"629\":1}}],[\"y表示的是我们日常使用的年份\",{\"1\":{\"572\":1}}],[\"yyyy\",{\"0\":{\"572\":1},\"1\":{\"572\":1,\"576\":8,\"577\":1,\"579\":2}}],[\"ylxfc\",{\"1\":{\"542\":1}}],[\"yaml\",{\"1\":{\"279\":1}}],[\"year不一定是当年的值\",{\"1\":{\"577\":1}}],[\"year不一定是当年的年份值\",{\"1\":{\"575\":1}}],[\"year都是属于2019\",{\"1\":{\"576\":1}}],[\"year都是次年的\",{\"1\":{\"575\":1}}],[\"year的结论\",{\"1\":{\"576\":1}}],[\"year表示的是这个周所属的年份\",{\"1\":{\"573\":1}}],[\"year\",{\"0\":{\"573\":1,\"574\":1},\"1\":{\"572\":1,\"573\":6,\"574\":3,\"577\":1,\"578\":7}}],[\"yet\",{\"1\":{\"376\":1,\"748\":1}}],[\"yellow\",{\"1\":{\"276\":1,\"444\":1,\"445\":1}}],[\"yes\",{\"1\":{\"173\":2}}],[\"y3\",{\"1\":{\"143\":1}}],[\"y2\",{\"1\":{\"143\":2}}],[\"y1\",{\"1\":{\"143\":2}}],[\"youtube\",{\"1\":{\"740\":2}}],[\"yout\",{\"1\":{\"719\":1}}],[\"youname是你的\",{\"1\":{\"672\":1}}],[\"you\",{\"1\":{\"123\":1,\"126\":1,\"183\":1,\"285\":5,\"448\":3,\"586\":3,\"598\":1,\"719\":1,\"728\":1,\"822\":2}}],[\"yoursite\",{\"1\":{\"811\":3}}],[\"yourrepo是你要上传到\",{\"1\":{\"672\":1}}],[\"yourrepo\",{\"1\":{\"672\":1}}],[\"yourname\",{\"1\":{\"672\":1,\"810\":1,\"812\":2,\"813\":3}}],[\"youremail\",{\"1\":{\"670\":1}}],[\"yourqualifiername替代\",{\"1\":{\"204\":1}}],[\"yourqualifiername\",{\"1\":{\"204\":2}}],[\"your\",{\"1\":{\"6\":3,\"126\":1,\"183\":1,\"285\":1,\"340\":1,\"448\":1,\"670\":3,\"718\":5,\"719\":1,\"793\":1,\"811\":1,\"822\":1}}],[\"ydpi=403\",{\"1\":{\"101\":2}}],[\"y根据场景不同可以是一行的行中心\",{\"1\":{\"33\":1}}],[\"y\",{\"1\":{\"33\":14,\"74\":7,\"75\":2,\"143\":4,\"144\":6,\"145\":6,\"146\":1,\"148\":1,\"153\":4,\"196\":1,\"578\":2,\"663\":2,\"719\":4,\"842\":1}}],[\"绘制蓝色波纹\",{\"1\":{\"418\":1}}],[\"绘制到\",{\"1\":{\"398\":1}}],[\"绘制到屏幕上面\",{\"1\":{\"253\":1}}],[\"绘制自定义效果等功能\",{\"1\":{\"380\":1}}],[\"绘制自身\",{\"1\":{\"161\":1}}],[\"绘制文字应该使用\",{\"1\":{\"334\":1}}],[\"绘制文字时\",{\"1\":{\"33\":1}}],[\"绘制在屏幕上\",{\"1\":{\"334\":1}}],[\"绘制的内容应当在\",{\"1\":{\"333\":1}}],[\"绘制的主要逻辑都在\",{\"1\":{\"331\":1}}],[\"绘制内容\",{\"1\":{\"333\":1}}],[\"绘制前景\",{\"1\":{\"331\":1}}],[\"绘制与\",{\"0\":{\"268\":1,\"269\":1}}],[\"绘制过程简析\",{\"0\":{\"251\":1}}],[\"绘制过程分为以下几步\",{\"1\":{\"161\":1}}],[\"绘制两个图形重叠部分\",{\"0\":{\"162\":1}}],[\"绘制装饰\",{\"1\":{\"161\":1}}],[\"绘制背景\",{\"1\":{\"161\":1,\"331\":1}}],[\"绘制流程\",{\"0\":{\"159\":1}}],[\"绘制坐标时\",{\"1\":{\"148\":1}}],[\"绘制对应的\",{\"1\":{\"147\":1}}],[\"绘制\",{\"0\":{\"33\":1},\"1\":{\"157\":1,\"161\":1,\"221\":1,\"330\":1,\"372\":1,\"440\":1}}],[\"即序列数为\",{\"1\":{\"913\":1}}],[\"即当尾端\",{\"1\":{\"888\":1}}],[\"即在前\",{\"1\":{\"863\":1}}],[\"即在声明的时候就将对象初始化\",{\"1\":{\"548\":1}}],[\"即堆的每个节点关键字都大于\",{\"1\":{\"856\":1}}],[\"即存在类似\",{\"1\":{\"850\":1}}],[\"即表示\",{\"1\":{\"842\":1}}],[\"即右子节点或者右子节点的最后一个左子节点\",{\"1\":{\"836\":1}}],[\"即查找的位置依次是x\",{\"1\":{\"827\":2}}],[\"即插件\",{\"1\":{\"817\":1}}],[\"即将到来消息的迭代器\",{\"1\":{\"645\":1}}],[\"即将点击事件从\",{\"1\":{\"26\":1}}],[\"即先执行代码块\",{\"1\":{\"631\":1}}],[\"即假设原先为array<array<int>>\",{\"1\":{\"631\":1}}],[\"即每个构建值发生变化时都会触发\",{\"1\":{\"631\":1}}],[\"即自身返回值依赖于下一级函数\",{\"1\":{\"614\":1}}],[\"即一个线程对数据的操作能够及时的更新到其他使用该数据的线程中\",{\"1\":{\"601\":1}}],[\"即调用线程\",{\"1\":{\"560\":1}}],[\"即容器将数组在运行时才会有的类型检查放到了编译期\",{\"1\":{\"540\":1}}],[\"即直接引用\",{\"1\":{\"496\":1}}],[\"即晚期绑定\",{\"1\":{\"490\":1}}],[\"即前期绑定\",{\"1\":{\"490\":1}}],[\"即前文所说的\",{\"1\":{\"193\":1}}],[\"即时编译器编译后的代码\",{\"1\":{\"461\":1}}],[\"即最大滑动范围\",{\"1\":{\"412\":1}}],[\"即恢复初始位置\",{\"1\":{\"412\":1}}],[\"即向下滑动\",{\"1\":{\"412\":3}}],[\"即向上滑动\",{\"1\":{\"412\":3}}],[\"即底部出现\",{\"1\":{\"412\":1}}],[\"即使有全局和局部分析\",{\"1\":{\"772\":1}}],[\"即使处理消息时\",{\"1\":{\"745\":1}}],[\"即使不同步也是线程安全的\",{\"1\":{\"608\":1}}],[\"即使在第一次序列化并保存后修改了这个对象的部分属性\",{\"1\":{\"587\":1}}],[\"即使这些值在子类对象中已经被修改了\",{\"1\":{\"585\":1}}],[\"即使类结构有变化\",{\"1\":{\"582\":1}}],[\"即使\",{\"1\":{\"540\":1,\"745\":3}}],[\"即使设置了\",{\"1\":{\"418\":1}}],[\"即使此方法返回\",{\"1\":{\"333\":1}}],[\"即使参数类型\",{\"1\":{\"60\":1}}],[\"即可实时更新博客内容的方法\",{\"1\":{\"791\":1}}],[\"即可完成排序\",{\"1\":{\"532\":1}}],[\"即可\",{\"1\":{\"310\":2,\"744\":2,\"836\":2}}],[\"即`renderobjecttowidgetelement`\",{\"1\":{\"256\":1}}],[\"即抛型\",{\"1\":{\"223\":1}}],[\"即单例\",{\"1\":{\"205\":1}}],[\"即是使用了\",{\"1\":{\"193\":1}}],[\"即这种情况下\",{\"1\":{\"159\":1}}],[\"即\",{\"1\":{\"101\":1,\"138\":2,\"140\":1,\"398\":1,\"416\":2,\"501\":1,\"541\":1}}],[\"即上述方程等价于\",{\"1\":{\"100\":1}}],[\"即上图中的center\",{\"1\":{\"33\":1}}],[\"即景色向右移动\",{\"1\":{\"75\":1}}],[\"即客户端调用服务端时所在的线程\",{\"1\":{\"63\":1}}],[\"即添加一个\",{\"1\":{\"57\":1}}],[\"即执行multidex\",{\"1\":{\"30\":1}}],[\"只在正式的数据和模拟训练的配置无法匹配的时候执行\",{\"1\":{\"770\":1}}],[\"只在这里处理和\",{\"1\":{\"126\":1}}],[\"只捕获上游异常\",{\"1\":{\"656\":1}}],[\"只取前\",{\"1\":{\"653\":1}}],[\"只接受\",{\"1\":{\"652\":1}}],[\"只接受可以创建\",{\"1\":{\"405\":1}}],[\"只支持阻塞代码\",{\"1\":{\"650\":1}}],[\"只支持可以生成\",{\"1\":{\"446\":1}}],[\"只支持可以创建\",{\"1\":{\"426\":1}}],[\"只获取并处理最新的值\",{\"1\":{\"659\":1}}],[\"只获取前两个\",{\"1\":{\"629\":1}}],[\"只获取指定类型的widget\",{\"1\":{\"272\":1}}],[\"只计算该\",{\"1\":{\"516\":1}}],[\"只使用一半\",{\"1\":{\"471\":1}}],[\"只管理已经加载完成的图片\",{\"1\":{\"376\":1}}],[\"只要有比插入点小的元素\",{\"1\":{\"898\":1}}],[\"只要有足够内存就不会被\",{\"1\":{\"479\":1}}],[\"只要新建一个符合\",{\"1\":{\"795\":1}}],[\"只要数据库中的数据有更新\",{\"1\":{\"781\":1}}],[\"只要保持一致即可\",{\"1\":{\"582\":1}}],[\"只要obj指向的对象改变\",{\"1\":{\"526\":1}}],[\"只要值变化就执行\",{\"1\":{\"332\":1}}],[\"只要值变化就\",{\"1\":{\"332\":1}}],[\"只要\",{\"1\":{\"300\":1,\"314\":1}}],[\"只要各个点满足条件\",{\"1\":{\"142\":1}}],[\"只是在每次插入的时候都进行排序\",{\"1\":{\"889\":1}}],[\"只是持有了一个真正要执行的方法体的placeholder指向lazycompilestub\",{\"1\":{\"766\":1}}],[\"只是一个例子\",{\"1\":{\"673\":1}}],[\"只是一个标记\",{\"1\":{\"581\":1}}],[\"只是根据传参创建请求并保存\",{\"1\":{\"398\":1}}],[\"只是替子类做了监听\",{\"1\":{\"310\":1}}],[\"只是监听传入的\",{\"1\":{\"310\":1}}],[\"只是查找到\",{\"1\":{\"273\":1}}],[\"只是为了和text对应表示这里本应该有一个对应的renderobject\",{\"1\":{\"264\":1}}],[\"只不过他的子类可以有多个实例\",{\"1\":{\"615\":1}}],[\"只不过它支持\",{\"1\":{\"523\":1}}],[\"只不过它可以将多个\",{\"1\":{\"357\":1}}],[\"只不过编译器判断该局部变量不会再被修改时\",{\"1\":{\"511\":1}}],[\"只不过\",{\"1\":{\"393\":1}}],[\"只不过在\",{\"1\":{\"342\":1}}],[\"只不过由于fragment的特性\",{\"1\":{\"217\":1}}],[\"只不过没有反应\",{\"1\":{\"27\":1}}],[\"只有父节点为红色这种情况需要进行修正\",{\"1\":{\"904\":1}}],[\"只有左节点\",{\"1\":{\"859\":2}}],[\"只有简单的\",{\"1\":{\"782\":1}}],[\"只有一个参数\",{\"1\":{\"620\":1}}],[\"只有明确调用静态内部类的时候才会初始化静态内部类\",{\"1\":{\"549\":1}}],[\"只有要用到该实例时\",{\"1\":{\"549\":1}}],[\"只有数组对象才有\",{\"1\":{\"516\":1}}],[\"只有table为空\",{\"1\":{\"501\":1}}],[\"只有直接定义其的类才会\",{\"1\":{\"497\":1}}],[\"只有横轴方向的约束\",{\"1\":{\"439\":1}}],[\"只有在访问的时候才生产对应的项目\",{\"1\":{\"629\":1}}],[\"只有在程序结束才会被回收\",{\"1\":{\"528\":1}}],[\"只有在\",{\"1\":{\"418\":1}}],[\"只有主动调用\",{\"1\":{\"415\":1}}],[\"只有内存中的\",{\"1\":{\"376\":1}}],[\"只有当没有\",{\"1\":{\"371\":1}}],[\"只有动画未开始\",{\"1\":{\"347\":1}}],[\"只有根据目标\",{\"1\":{\"341\":1}}],[\"只有传入\",{\"1\":{\"308\":1}}],[\"只有\",{\"1\":{\"264\":1,\"273\":2,\"576\":1}}],[\"只有newwidget\",{\"1\":{\"263\":1}}],[\"只有屏幕水平\",{\"1\":{\"196\":1}}],[\"只有第一个客户端绑定时才会调用服务onbind\",{\"1\":{\"41\":1}}],[\"只能访问指定元素\",{\"1\":{\"870\":1}}],[\"只能一次性返回多个值\",{\"1\":{\"650\":1}}],[\"只能作为生产者调用\",{\"1\":{\"617\":1}}],[\"只能在内存中存在\",{\"1\":{\"580\":1}}],[\"只能在主线程实例化\",{\"1\":{\"193\":1}}],[\"只能等\",{\"1\":{\"546\":1}}],[\"只能是\",{\"1\":{\"438\":1}}],[\"只能滑到最大范围\",{\"1\":{\"412\":2}}],[\"只能容纳可以产生\",{\"1\":{\"405\":1}}],[\"只能通过double\",{\"1\":{\"361\":1}}],[\"只能通过\",{\"1\":{\"247\":1}}],[\"只能被执行一次\",{\"1\":{\"193\":1}}],[\"只能承载很小的信息量\",{\"1\":{\"137\":1}}],[\"只绘制src与dst未重合部分\",{\"1\":{\"132\":1}}],[\"只绘制src与dst重合部分\",{\"1\":{\"132\":1}}],[\"只绘制src\",{\"1\":{\"132\":1}}],[\"只绘制dst与src未重合部分\",{\"1\":{\"132\":1}}],[\"只绘制dst与src重合部分\",{\"1\":{\"132\":1}}],[\"只绘制dst\",{\"1\":{\"132\":1}}],[\"只暴露这个状态\",{\"1\":{\"126\":1}}],[\"只会解析加载的类和库的基本信息\",{\"1\":{\"766\":1}}],[\"只会捕获发送在他之前的异常\",{\"1\":{\"632\":1}}],[\"只会记录下首次出现的实例的引用\",{\"1\":{\"461\":1}}],[\"只会终止执行出错代码之后的逻辑\",{\"1\":{\"292\":1}}],[\"只会更新那些在inheritedwidget这里注册依赖了的widget\",{\"1\":{\"273\":1}}],[\"只会沿一个方向流动\",{\"1\":{\"126\":1}}],[\"只会被调用一次\",{\"1\":{\"36\":1}}],[\"只通过\",{\"1\":{\"126\":1}}],[\"只负责处理和提供数据\",{\"1\":{\"124\":1}}],[\"只需一次resume就可以恢复isolate\",{\"1\":{\"744\":1}}],[\"只需一次拷贝的\",{\"1\":{\"138\":1}}],[\"只需持有\",{\"1\":{\"123\":1}}],[\"只需要将other移动到柱子b\",{\"1\":{\"912\":1}}],[\"只需要将待排序的数组依次插入堆中\",{\"1\":{\"860\":1}}],[\"只需要找出最小数量的边即可\",{\"1\":{\"849\":1}}],[\"只需要一个\",{\"1\":{\"710\":1}}],[\"只需要实现接口\",{\"1\":{\"588\":1}}],[\"只需要实现serializable接口即可\",{\"1\":{\"580\":1}}],[\"只需要在在\",{\"1\":{\"310\":1}}],[\"只需要在\",{\"1\":{\"112\":1}}],[\"只需要按当前待注销的\",{\"1\":{\"63\":1}}],[\"只需要添加一个过渡页面为启动\",{\"1\":{\"30\":1}}],[\"只用于服务端和客户端串行的传递消息\",{\"1\":{\"82\":1}}],[\"只处理\",{\"1\":{\"76\":1}}],[\"完整的二叉树也会被建立起来\",{\"1\":{\"666\":1}}],[\"完整语法形式的参数声明放在大括号内\",{\"1\":{\"663\":1}}],[\"完全二叉树与满二叉树的区别\",{\"1\":{\"865\":1}}],[\"完全二叉树\",{\"0\":{\"863\":1},\"1\":{\"863\":2}}],[\"完全在该文档指导下完成\",{\"1\":{\"796\":1}}],[\"完全解析\",{\"1\":{\"625\":1,\"627\":1}}],[\"完全给了\",{\"1\":{\"418\":1}}],[\"完全处理滑动事件\",{\"1\":{\"418\":1}}],[\"完全自定义\",{\"1\":{\"390\":1}}],[\"完全可以没有\",{\"1\":{\"203\":1}}],[\"完全加载好后再将背景切换为普通模式\",{\"1\":{\"30\":1}}],[\"完成了支持内部单个\",{\"1\":{\"441\":1}}],[\"完成\",{\"1\":{\"131\":1,\"286\":1}}],[\"完成后再关闭当前进程\",{\"1\":{\"30\":1}}],[\"待排序的数组\",{\"1\":{\"913\":1}}],[\"待排序的文件的分隔符\",{\"1\":{\"703\":1}}],[\"待实现\",{\"1\":{\"719\":1}}],[\"待整理\",{\"1\":{\"628\":1}}],[\"待主\",{\"1\":{\"30\":1}}],[\"待定的intent是一个pendingintent\",{\"1\":{\"15\":1}}],[\"待定的\",{\"0\":{\"15\":1}}],[\"执行管理\",{\"1\":{\"787\":1}}],[\"执行操作\",{\"1\":{\"767\":1}}],[\"执行分为下面几步\",{\"1\":{\"763\":1}}],[\"执行代码的示意图\",{\"1\":{\"763\":1}}],[\"执行threadpool\",{\"1\":{\"761\":1}}],[\"执行具体的消息分发内容\",{\"1\":{\"759\":1}}],[\"执行具体的逻辑\",{\"1\":{\"247\":1}}],[\"执行网络请求\",{\"0\":{\"712\":1}}],[\"执行网络请求的过程\",{\"1\":{\"708\":1}}],[\"执行对应代码\",{\"1\":{\"708\":1}}],[\"执行cls就等于执行clear\",{\"1\":{\"698\":1}}],[\"执行权限1\",{\"1\":{\"689\":1}}],[\"执行结束后才执行\",{\"1\":{\"658\":1}}],[\"执行指定\",{\"1\":{\"636\":1}}],[\"执行反序列化结果\",{\"1\":{\"584\":1}}],[\"执行了未检查的转换时的警告\",{\"1\":{\"566\":1}}],[\"执行了什么\",{\"1\":{\"193\":1}}],[\"执行到语句\",{\"1\":{\"547\":1}}],[\"执行到\",{\"1\":{\"545\":1}}],[\"执行到这里后\",{\"1\":{\"247\":1}}],[\"执行静态方法\",{\"1\":{\"497\":1}}],[\"执行类\",{\"1\":{\"497\":1}}],[\"执行死刑\",{\"1\":{\"475\":1}}],[\"执行paintingbinding\",{\"1\":{\"374\":1}}],[\"执行performrebuild\",{\"1\":{\"271\":1}}],[\"执行其\",{\"1\":{\"349\":1}}],[\"执行一次\",{\"1\":{\"341\":1}}],[\"执行该方法\",{\"1\":{\"282\":1}}],[\"执行创建\",{\"1\":{\"247\":1}}],[\"执行析构函数\",{\"1\":{\"247\":1}}],[\"执行完后才能执行\",{\"1\":{\"635\":1}}],[\"执行完\",{\"1\":{\"247\":1}}],[\"执行完方法返回的数据\",{\"1\":{\"243\":1,\"244\":1}}],[\"执行完操作之后再回调结果\",{\"1\":{\"241\":1}}],[\"执行完毕再切换回当前\",{\"1\":{\"247\":1}}],[\"执行完毕后\",{\"1\":{\"560\":1}}],[\"执行完毕后就会被赋值\",{\"1\":{\"247\":1}}],[\"执行完毕后返回他的值\",{\"1\":{\"223\":1}}],[\"执行完毕\",{\"1\":{\"231\":1,\"247\":1}}],[\"执行完毕之后\",{\"1\":{\"229\":1,\"243\":1,\"244\":1,\"247\":1}}],[\"执行任务\",{\"1\":{\"237\":1,\"759\":1}}],[\"执行用户点击\",{\"1\":{\"221\":1}}],[\"执行时间的\",{\"1\":{\"193\":1}}],[\"执行后\",{\"1\":{\"192\":1}}],[\"执行所需的\",{\"1\":{\"183\":1}}],[\"执行不同的逻辑\",{\"1\":{\"125\":1}}],[\"执行相应操作\",{\"1\":{\"71\":1}}],[\"执行\",{\"1\":{\"30\":1,\"49\":1,\"138\":1,\"183\":1,\"225\":1,\"229\":1,\"235\":1,\"243\":1,\"244\":1,\"247\":2,\"333\":1,\"352\":1,\"497\":1,\"684\":1,\"742\":1,\"753\":1,\"763\":1,\"765\":3}}],[\"提出一个阈值\",{\"1\":{\"927\":1}}],[\"提出的跨平台开发框架\",{\"1\":{\"278\":1}}],[\"提交到远程的\",{\"1\":{\"672\":1}}],[\"提心\",{\"1\":{\"560\":1}}],[\"提示开始发布文章\",{\"1\":{\"719\":1}}],[\"提示符前面的内容\",{\"1\":{\"697\":1}}],[\"提示如you\",{\"1\":{\"670\":1}}],[\"提示用户到设置中开启\",{\"1\":{\"173\":1}}],[\"提示️\",{\"1\":{\"173\":1}}],[\"提示等用户友好的页面\",{\"1\":{\"30\":1}}],[\"提取通用的业务逻辑传递给\",{\"1\":{\"126\":1}}],[\"提供一套管理单个\",{\"1\":{\"438\":1}}],[\"提供一些自己特有的内容\",{\"1\":{\"436\":1}}],[\"提供一个可以折叠的\",{\"1\":{\"110\":1}}],[\"提供按照\",{\"1\":{\"425\":1}}],[\"提供像buildslivers之类的方法方便子类能够快速实现一个\",{\"1\":{\"422\":1}}],[\"提供多种创建方式\",{\"1\":{\"390\":1}}],[\"提供ffi和texture两种图片展示方式\",{\"1\":{\"376\":1}}],[\"提供给前面创建的\",{\"1\":{\"353\":1}}],[\"提供给\",{\"1\":{\"333\":1}}],[\"提供\",{\"1\":{\"327\":1,\"333\":1}}],[\"提供进一步封装的\",{\"1\":{\"314\":1}}],[\"提供了在协程之间传递多个值的方法\",{\"1\":{\"636\":1}}],[\"提供了检测\",{\"1\":{\"426\":1}}],[\"提供了一种尾递归优化的方法\",{\"1\":{\"614\":1}}],[\"提供了一些方法供\",{\"1\":{\"438\":1}}],[\"提供了一些通用的方法\",{\"1\":{\"384\":1}}],[\"提供了一套简单易用的\",{\"1\":{\"251\":1}}],[\"提供了将\",{\"1\":{\"316\":1}}],[\"提供了\",{\"1\":{\"309\":1,\"400\":1}}],[\"提供了常见的动画效果\",{\"1\":{\"308\":1}}],[\"提供依赖实例所必须的\",{\"1\":{\"213\":1}}],[\"提供的android\",{\"1\":{\"523\":1}}],[\"提供的动画\",{\"1\":{\"314\":1}}],[\"提供的\",{\"1\":{\"138\":1,\"395\":1,\"397\":1}}],[\"提供日期格式化工具\",{\"1\":{\"126\":1}}],[\"提供数据的读写方法之后\",{\"1\":{\"124\":1}}],[\"提醒用户的需求\",{\"1\":{\"8\":1}}],[\"检测是否已经加载\",{\"1\":{\"485\":1}}],[\"检测是否需要解释为什么需要改权限\",{\"1\":{\"173\":1}}],[\"检测到尚未进行\",{\"1\":{\"30\":1}}],[\"检查虚拟机堆参数是否可以调大\",{\"1\":{\"464\":1}}],[\"检查\",{\"1\":{\"140\":1}}],[\"检查是否需要拦截\",{\"1\":{\"26\":1}}],[\"检验密码\",{\"1\":{\"126\":1}}],[\"体验并不好\",{\"1\":{\"30\":1}}],[\"启用压缩为例\",{\"1\":{\"516\":1}}],[\"启用快速\",{\"1\":{\"111\":1}}],[\"启用当日循环闹钟\",{\"1\":{\"20\":1}}],[\"启动的协程中\",{\"1\":{\"640\":1}}],[\"启动的时候\",{\"1\":{\"228\":1}}],[\"启动带缓冲的通道\",{\"1\":{\"638\":1}}],[\"启动并发的协程以验证主线程并未阻塞\",{\"1\":{\"629\":1}}],[\"启动和恢复时保存threadlocal在当前线程的值\",{\"1\":{\"625\":1}}],[\"启动类加载器\",{\"1\":{\"484\":1}}],[\"启动了一个循环\",{\"1\":{\"761\":1}}],[\"启动了\",{\"1\":{\"257\":1}}],[\"启动之后的第一次\",{\"1\":{\"257\":1}}],[\"启动之前看到的一直是桌面的样子而非白屏\",{\"1\":{\"30\":1}}],[\"启动处理\",{\"1\":{\"235\":1}}],[\"启动未在\",{\"1\":{\"178\":1}}],[\"启动未注册\",{\"0\":{\"175\":1},\"1\":{\"179\":1}}],[\"启动开机动画\",{\"1\":{\"140\":1}}],[\"启动组件传递过来的\",{\"1\":{\"36\":1}}],[\"启动时间更短\",{\"1\":{\"771\":1}}],[\"启动时\",{\"1\":{\"36\":1}}],[\"启动时生命周期会出现异常\",{\"1\":{\"30\":1}}],[\"启动\",{\"1\":{\"35\":2,\"42\":1,\"140\":2,\"671\":1,\"806\":1}}],[\"启动一个\",{\"0\":{\"35\":1}}],[\"十分影响体验\",{\"1\":{\"30\":1}}],[\"主页面\",{\"1\":{\"782\":1}}],[\"主体中的最后一个\",{\"1\":{\"663\":1}}],[\"主作用域内启动的协程中是没有意义的\",{\"1\":{\"640\":1}}],[\"主内存\",{\"1\":{\"601\":1}}],[\"主轴方向最小尺寸是父级大小\",{\"1\":{\"444\":1}}],[\"主轴方向的尺寸作为自己的\",{\"1\":{\"405\":1}}],[\"主轴尺寸\",{\"1\":{\"405\":1}}],[\"主动设置\",{\"1\":{\"415\":2}}],[\"主动发送请求到\",{\"1\":{\"398\":1}}],[\"主动画\",{\"1\":{\"354\":1}}],[\"主动管理动画\",{\"1\":{\"300\":1}}],[\"主线程或者普通线程池\",{\"1\":{\"710\":1}}],[\"主线程安全\",{\"1\":{\"126\":1}}],[\"主线程\",{\"1\":{\"30\":1}}],[\"主要目的是快速创建出可执行代码\",{\"1\":{\"767\":1}}],[\"主要创建\",{\"1\":{\"756\":1}}],[\"主要改动如下\",{\"1\":{\"731\":1}}],[\"主要增加了初始化所有\",{\"1\":{\"731\":1}}],[\"主要群组\",{\"1\":{\"691\":1}}],[\"主要提供使用注解的方法\",{\"1\":{\"569\":1}}],[\"主要加载核心类库\",{\"1\":{\"484\":1}}],[\"主要场所\",{\"1\":{\"457\":1}}],[\"主要添加了两项功能\",{\"1\":{\"406\":1}}],[\"主要实现通过\",{\"1\":{\"394\":1}}],[\"主要逻辑是创建和更新\",{\"1\":{\"437\":1}}],[\"主要逻辑是将传入的参数slivers作为list<widget>\",{\"1\":{\"430\":1}}],[\"主要逻辑是分别创建对应的\",{\"1\":{\"424\":1}}],[\"主要逻辑就是创建\",{\"1\":{\"371\":1}}],[\"主要逻辑\",{\"1\":{\"357\":1}}],[\"主要封装了fromhero\",{\"1\":{\"348\":1}}],[\"主要在于\",{\"1\":{\"343\":1}}],[\"主要作用是创建继承自\",{\"1\":{\"405\":1}}],[\"主要作用是创建自定义的\",{\"1\":{\"404\":1}}],[\"主要作用是将\",{\"1\":{\"335\":1}}],[\"主要作为进程间以及同一进程内不同线程之间的同步手段\",{\"1\":{\"137\":1}}],[\"主要区别在于不同方法方法创建了不同的\",{\"1\":{\"319\":1}}],[\"主要分为\",{\"1\":{\"302\":1}}],[\"主要分为两大类\",{\"1\":{\"300\":1,\"314\":1}}],[\"主要分为两部分\",{\"1\":{\"57\":1}}],[\"主要做了\",{\"1\":{\"270\":1}}],[\"主要处理的方法有四类\",{\"1\":{\"247\":1}}],[\"主要有以下形式\",{\"1\":{\"535\":1}}],[\"主要有以下几点改变\",{\"1\":{\"394\":1}}],[\"主要有以下几种方式\",{\"1\":{\"135\":1}}],[\"主要有两个作用\",{\"1\":{\"405\":1}}],[\"主要有如下用法\",{\"1\":{\"365\":1}}],[\"主要有\",{\"1\":{\"319\":1,\"565\":2,\"768\":1}}],[\"主要有三种使用方式\",{\"1\":{\"300\":1,\"314\":1}}],[\"主要有对文件\",{\"1\":{\"243\":1,\"244\":1}}],[\"主要看一下timer\",{\"1\":{\"235\":1}}],[\"主要的作用是持有\",{\"1\":{\"316\":1}}],[\"主要的作用是将这些线程放到线程池中\",{\"1\":{\"193\":1}}],[\"主要的逻辑都在build方法中\",{\"1\":{\"264\":1}}],[\"主要的逻辑在他的父类\",{\"1\":{\"259\":1}}],[\"主要的流程有\",{\"1\":{\"247\":1}}],[\"主要的设计思想\",{\"0\":{\"196\":1}}],[\"主要基于\",{\"1\":{\"190\":1,\"402\":2,\"422\":2,\"433\":2}}],[\"主要是持有一个和\",{\"1\":{\"748\":1}}],[\"主要是isolate\",{\"1\":{\"740\":1}}],[\"主要是数据存取\",{\"1\":{\"737\":1}}],[\"主要是将\",{\"1\":{\"407\":1}}],[\"主要是检查入参是否合规\",{\"1\":{\"360\":1}}],[\"主要是提供了操纵\",{\"1\":{\"347\":1}}],[\"主要是提供\",{\"1\":{\"347\":1}}],[\"主要是对官方介绍的理解与分析\",{\"1\":{\"338\":1}}],[\"主要是在一维空间对物理进行位置\",{\"1\":{\"323\":1}}],[\"主要是监听\",{\"1\":{\"300\":1,\"314\":1}}],[\"主要是\",{\"1\":{\"286\":1}}],[\"主要是通过第三方插件beautifulsoup解析数据\",{\"1\":{\"737\":1}}],[\"主要是通过\",{\"1\":{\"286\":1}}],[\"主要是修改了\",{\"1\":{\"189\":1}}],[\"主要是为了自己能够在学习的过程中有计划的总结学习到的知识\",{\"1\":{\"0\":1,\"779\":1}}],[\"主要思想是找到系统实现该过程的逻辑\",{\"1\":{\"179\":1}}],[\"主要涉及类\",{\"1\":{\"707\":1}}],[\"主要涉及三方面\",{\"1\":{\"564\":1}}],[\"主要涉及到以下类\",{\"1\":{\"404\":1}}],[\"主要涉及\",{\"1\":{\"166\":1}}],[\"主要代码如下\",{\"1\":{\"731\":1}}],[\"主要代码在这里\",{\"1\":{\"243\":1}}],[\"主要代码\",{\"1\":{\"153\":1,\"179\":1}}],[\"主要参考文章\",{\"1\":{\"138\":1}}],[\"主要参考书目\",{\"1\":{\"69\":1}}],[\"主要用在\",{\"1\":{\"593\":1}}],[\"主要用在进程的中断控制\",{\"1\":{\"137\":1}}],[\"主要用途是更新\",{\"1\":{\"404\":1}}],[\"主要用于减少大型\",{\"1\":{\"770\":1}}],[\"主要用于不通机器或跨网络的通信\",{\"1\":{\"137\":1}}],[\"主要用于\",{\"1\":{\"12\":2}}],[\"主要使用到的文件\",{\"1\":{\"82\":1}}],[\"主要流程分为两部分\",{\"1\":{\"26\":1}}],[\"主要讲解一下如何将对外分享的uri赋予读写权限\",{\"1\":{\"6\":1}}],[\"安装配置\",{\"0\":{\"804\":1}}],[\"安装分为两种\",{\"1\":{\"800\":1}}],[\"安装时按照默认的配置\",{\"1\":{\"800\":1}}],[\"安装\",{\"0\":{\"669\":1,\"801\":1,\"805\":1},\"1\":{\"800\":2,\"801\":1}}],[\"安装后第一次启动时\",{\"1\":{\"30\":1}}],[\"安全模式\",{\"1\":{\"808\":1}}],[\"安全的使用\",{\"1\":{\"618\":1}}],[\"安全应用\",{\"0\":{\"444\":1,\"445\":1}}],[\"安排重新绘制\",{\"1\":{\"335\":1}}],[\"安排重复闹钟\",{\"1\":{\"22\":1}}],[\"安排屏幕帧绘制\",{\"1\":{\"252\":1}}],[\"安排执行\",{\"1\":{\"232\":1,\"787\":1}}],[\"❷标记需要框架自动实例化的对象\",{\"1\":{\"201\":1}}],[\"❷\",{\"1\":{\"30\":1,\"201\":1}}],[\"❶标记依赖类的构造方法\",{\"1\":{\"201\":1}}],[\"❶\",{\"1\":{\"30\":1,\"201\":1}}],[\"将后面的数字依次与其比较\",{\"1\":{\"921\":1}}],[\"将增量减小\",{\"1\":{\"921\":1}}],[\"将大数组分为较小的数组\",{\"1\":{\"921\":1}}],[\"将排序结果写入原待排序数组\",{\"1\":{\"921\":1}}],[\"将待排序数组分为\",{\"1\":{\"921\":1}}],[\"将待排序的元素分为有序和无序两种\",{\"1\":{\"534\":1}}],[\"将左边无须的元素依次插入到右边有序数组中\",{\"1\":{\"919\":1}}],[\"将剩余的数组全部复制到新数组\",{\"1\":{\"913\":1}}],[\"将合并好的两个有序子数组合并\",{\"1\":{\"913\":1}}],[\"将b中比a中小的元素都复制到a中对应位置\",{\"1\":{\"913\":1}}],[\"将序列每相邻两个数字进行归并操作\",{\"1\":{\"913\":1}}],[\"将一个数组\",{\"1\":{\"913\":1}}],[\"将一个子\",{\"1\":{\"110\":1,\"112\":1}}],[\"将汉诺塔问题简化为\",{\"1\":{\"912\":1}}],[\"将除最底部的圆盘bottom之外的所有圆盘当做一个整体other\",{\"1\":{\"912\":1}}],[\"将父节点137设置为黑色\",{\"1\":{\"904\":1}}],[\"将父节点下沉\",{\"1\":{\"858\":1}}],[\"将节点颜色更改为黑色\",{\"1\":{\"904\":1}}],[\"将34的父节点23设置黑\",{\"1\":{\"903\":1}}],[\"将max与每一项比较\",{\"1\":{\"897\":1}}],[\"将mainfragmentsubcomponent加入到想要加入的类的\",{\"1\":{\"217\":1}}],[\"将mainactivitymodule加入到应用程序的\",{\"1\":{\"213\":1}}],[\"将x插入栈中\",{\"1\":{\"890\":1}}],[\"将x压入栈中\",{\"1\":{\"890\":2}}],[\"将top推出\",{\"1\":{\"890\":1}}],[\"将top移动到该位置\",{\"1\":{\"859\":1}}],[\"将toindex指向空出的地方\",{\"1\":{\"858\":1}}],[\"将不满足的元素下沉\",{\"1\":{\"858\":1}}],[\"将元素插入到数组最后一位\",{\"1\":{\"858\":1}}],[\"将修改的值移动到对应的位置\",{\"1\":{\"857\":1}}],[\"将修改过的\",{\"1\":{\"765\":1}}],[\"将字符按照出现的频次生成优先级队列\",{\"1\":{\"837\":1}}],[\"将字节流中静态存储结构转化为方法区的运行时数据结构\",{\"1\":{\"492\":1}}],[\"将该点a的内侧孙子\",{\"1\":{\"903\":1}}],[\"将该``左节点\",{\"1\":{\"903\":1}}],[\"将该节点a放到右节点b的位置\",{\"1\":{\"903\":1}}],[\"将该节点移动到找到的下标处\",{\"1\":{\"859\":1}}],[\"将该值存储在该位置即可\",{\"1\":{\"860\":1}}],[\"将该值插入到对应下标\",{\"1\":{\"858\":1}}],[\"将该元素插入该处\",{\"1\":{\"858\":1}}],[\"将该邻接点当做新的顶点压入栈中\",{\"1\":{\"847\":1}}],[\"将该子节点的父节点指向其右子节点\",{\"1\":{\"836\":1}}],[\"将该方法传入\",{\"1\":{\"282\":1}}],[\"将上文获得到的\",{\"1\":{\"813\":1}}],[\"将上次在\",{\"1\":{\"813\":1}}],[\"将上述创建的\",{\"1\":{\"264\":1}}],[\"将第\",{\"1\":{\"794\":1}}],[\"将第一个元素\",{\"1\":{\"532\":1}}],[\"将更新提交到\",{\"1\":{\"791\":1}}],[\"将更改后的\",{\"1\":{\"282\":1}}],[\"将布局中的组件捆绑到\",{\"1\":{\"784\":1}}],[\"将二者联系起来\",{\"1\":{\"784\":1}}],[\"将二叉树分为左\",{\"1\":{\"666\":1}}],[\"将itemview的viewmodel与布局xml中绑定在一起\",{\"1\":{\"781\":1}}],[\"将所有圆盘依次转移到另外一个圆盘上面\",{\"1\":{\"912\":1}}],[\"将所有潜在的可触达的功能编译为\",{\"1\":{\"771\":1}}],[\"将所有有效链接全部加入\",{\"1\":{\"731\":1}}],[\"将调用的类与方法映射在一起\",{\"1\":{\"767\":1}}],[\"将运行产生的内核二进制文件\",{\"1\":{\"765\":1}}],[\"将处理好的数据按格式输出\",{\"1\":{\"736\":1}}],[\"将处理结果以其他形式返回\",{\"1\":{\"614\":1}}],[\"将处理结果\",{\"1\":{\"243\":1,\"244\":1}}],[\"将值为value的key添加到环境变量\",{\"1\":{\"699\":1}}],[\"将file压缩成file\",{\"1\":{\"694\":1}}],[\"将本地分支同步到\",{\"1\":{\"674\":1}}],[\"将本地的项目同步到\",{\"1\":{\"668\":1}}],[\"将前序排序也分为左右两个子树的前序排序\",{\"1\":{\"666\":1}}],[\"将collect的代码移动到oneach中\",{\"1\":{\"656\":1}}],[\"将收集到的流交给\",{\"1\":{\"655\":1}}],[\"将嵌套有flow的flow\",{\"1\":{\"655\":1}}],[\"将异常处理者设置在\",{\"1\":{\"640\":1}}],[\"将类的属性名称和map中的key一一对应\",{\"1\":{\"619\":1}}],[\"将类型作为类型参数传入\",{\"1\":{\"536\":1}}],[\"将同一类型的属性的get\",{\"1\":{\"619\":1}}],[\"将结果赋予c这几步来完成\",{\"1\":{\"602\":1}}],[\"将结果从工作内存写入到主内存中才可以被其他线程可见\",{\"1\":{\"602\":1}}],[\"将结果通过\",{\"1\":{\"244\":1}}],[\"将变量写入到\",{\"1\":{\"594\":1}}],[\"将变量访问转化为运行时内存\",{\"1\":{\"496\":1}}],[\"将使用到注解的变量初始化\",{\"1\":{\"569\":1}}],[\"将加密\",{\"1\":{\"557\":1}}],[\"将无序部分的一个元素\",{\"1\":{\"534\":1}}],[\"将最底层\",{\"1\":{\"912\":1}}],[\"将最上层\",{\"1\":{\"912\":1}}],[\"将最后一个未排序元素与这一轮遍历找到的最大值交换\",{\"1\":{\"533\":1}}],[\"将最新数据展示到\",{\"1\":{\"126\":1}}],[\"将较大的元素\",{\"1\":{\"532\":1}}],[\"将key和value直接保存在数组中\",{\"1\":{\"523\":1}}],[\"将script\",{\"1\":{\"757\":1}}],[\"将sizeof\",{\"1\":{\"517\":1}}],[\"将src绘制在dst上面\",{\"1\":{\"132\":1}}],[\"将对象总大小对齐到\",{\"1\":{\"516\":1}}],[\"将对于的\",{\"1\":{\"265\":1}}],[\"将外部类的引用和局部变量作为内部类的参数传入到内部类中\",{\"1\":{\"513\":1}}],[\"将外部文件缓存本地的步骤参考第一步操作即可自行完成\",{\"1\":{\"6\":1}}],[\"将外部文件保存到本地并获取\",{\"1\":{\"6\":1}}],[\"将数组划分为两个子数组\",{\"1\":{\"925\":1}}],[\"将数组无限分成两份\",{\"1\":{\"913\":1}}],[\"将数组无限的分成两份分别进行排序\",{\"1\":{\"913\":1}}],[\"将数组与引导类加载器标识\",{\"1\":{\"492\":1}}],[\"将数据项直接存储的链表中\",{\"1\":{\"827\":1}}],[\"将数据保存在通过\",{\"1\":{\"826\":1}}],[\"将数据保存到了thread对象自己的threadlocals中\",{\"1\":{\"527\":1}}],[\"将数据的的具体实现与viewmodel对数据的操作解耦\",{\"1\":{\"781\":1}}],[\"将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间\",{\"1\":{\"138\":1}}],[\"将数据从发送缓存区复制过来\",{\"1\":{\"138\":1}}],[\"将数据写入到管道\",{\"1\":{\"137\":1}}],[\"将文件\",{\"1\":{\"492\":1}}],[\"将首次出现的对象实例复制到永久代\",{\"1\":{\"461\":1}}],[\"将按照父级的最小高度设置\",{\"1\":{\"445\":1}}],[\"将请求信息返回给\",{\"1\":{\"398\":1}}],[\"将请求结果返回\",{\"1\":{\"398\":1}}],[\"将请求保存到powerimageloader\",{\"1\":{\"398\":1}}],[\"将ui\",{\"1\":{\"371\":1}}],[\"将自身加入\",{\"1\":{\"410\":1}}],[\"将自身作为\",{\"1\":{\"357\":1}}],[\"将自己和传入的\",{\"1\":{\"410\":1}}],[\"将自己的\",{\"1\":{\"256\":1}}],[\"将接收\",{\"1\":{\"357\":1}}],[\"将接口暴露给客户端\",{\"1\":{\"57\":1}}],[\"将此\",{\"1\":{\"316\":1,\"409\":1}}],[\"将任意属性在\",{\"1\":{\"300\":1,\"314\":1}}],[\"将之前创建的buildowner与自己绑定\",{\"1\":{\"266\":1}}],[\"将我们的\",{\"1\":{\"252\":1}}],[\"将用户的\",{\"1\":{\"249\":1}}],[\"将用户操作通过\",{\"1\":{\"125\":1}}],[\"将线程切换到新创建的系统线程\",{\"1\":{\"247\":1}}],[\"将当前数组一分为二\",{\"1\":{\"880\":1}}],[\"将当前剩余数据最大值选出来\",{\"1\":{\"860\":1}}],[\"将当前任务加入到tasks\",{\"1\":{\"760\":1}}],[\"将当前的\",{\"1\":{\"334\":1}}],[\"将当前\",{\"1\":{\"232\":1,\"246\":1}}],[\"将当前画布保存为新的一层\",{\"1\":{\"162\":1}}],[\"将传入的\",{\"1\":{\"225\":1}}],[\"将传过来的数据取出来\",{\"1\":{\"71\":1}}],[\"将装有可以产生依赖的\",{\"1\":{\"203\":1}}],[\"将准备好参数\",{\"1\":{\"193\":1}}],[\"将参数传入\",{\"1\":{\"193\":1}}],[\"将参数\",{\"1\":{\"192\":1}}],[\"将返回我们自定义的\",{\"1\":{\"179\":1}}],[\"将原有的\",{\"1\":{\"179\":1}}],[\"将需要的\",{\"1\":{\"138\":1}}],[\"将需要回传的数据写入\",{\"1\":{\"71\":1}}],[\"将生成的\",{\"1\":{\"138\":1}}],[\"将ls\",{\"1\":{\"137\":1}}],[\"将其指向的元素交换位置\",{\"1\":{\"924\":1}}],[\"将其左节点c向上进一位插入到该节点a原先的位置\",{\"1\":{\"903\":1}}],[\"将其放到对应位置\",{\"1\":{\"897\":1}}],[\"将其放到catch之前\",{\"1\":{\"656\":1}}],[\"将其与当前未排序的最后一项交换\",{\"1\":{\"897\":1}}],[\"将其与上一步找到的entrypoint结合\",{\"1\":{\"759\":1}}],[\"将其打印出来\",{\"1\":{\"847\":1}}],[\"将其父节点指向其子节点\",{\"1\":{\"836\":2}}],[\"将其父节点的指向设为\",{\"1\":{\"836\":2}}],[\"将其发布到合适的空间就可以正常显示\",{\"1\":{\"813\":1}}],[\"将其简单分为\",{\"1\":{\"547\":1}}],[\"将其分发给\",{\"1\":{\"404\":1}}],[\"将其分为两大类\",{\"1\":{\"314\":1}}],[\"将其\",{\"1\":{\"353\":1}}],[\"将其大小和位置与为\",{\"1\":{\"341\":1}}],[\"将其变为同步任务\",{\"1\":{\"294\":1}}],[\"将其标记为dirty\",{\"1\":{\"271\":1}}],[\"将其绑定到\",{\"1\":{\"265\":1}}],[\"将其使用\",{\"1\":{\"228\":1}}],[\"将其压入栈中\",{\"1\":{\"847\":1}}],[\"将其压入\",{\"1\":{\"192\":1}}],[\"将其闭合\",{\"1\":{\"146\":1}}],[\"将其翻译为物理地址\",{\"1\":{\"136\":1}}],[\"将其转化为对应\",{\"1\":{\"57\":1}}],[\"将dst绘制在src上面\",{\"1\":{\"132\":1}}],[\"将dst与src的透明与不透明颜色相互作用\",{\"1\":{\"132\":1}}],[\"将新图层绘制到原有图层上\",{\"1\":{\"131\":1}}],[\"将关注点分离\",{\"1\":{\"126\":1}}],[\"将从\",{\"1\":{\"123\":1}}],[\"将两个或多个子\",{\"1\":{\"112\":1}}],[\"将在到达这个最小高度的时候开始显示\",{\"1\":{\"111\":1}}],[\"将被固定在屏幕顶部\",{\"1\":{\"111\":1}}],[\"将服务端的\",{\"1\":{\"71\":1}}],[\"将\",{\"0\":{\"633\":1},\"1\":{\"35\":1,\"52\":2,\"71\":1,\"123\":2,\"124\":1,\"126\":2,\"138\":1,\"193\":2,\"247\":2,\"253\":2,\"254\":1,\"256\":2,\"263\":1,\"265\":1,\"314\":1,\"355\":1,\"357\":1,\"398\":1,\"404\":1,\"405\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"441\":1,\"534\":1,\"765\":1,\"768\":1,\"897\":1,\"904\":1,\"912\":1}}],[\"将这些类添加到主\",{\"1\":{\"30\":1}}],[\"此文对我帮助很大\",{\"1\":{\"813\":1}}],[\"此文为鸿洋博客阅读笔记\",{\"1\":{\"44\":1}}],[\"此电脑\",{\"1\":{\"803\":1}}],[\"此内存区域是唯一一个在\",{\"1\":{\"462\":1}}],[\"此情况\",{\"1\":{\"418\":1}}],[\"此后还会要求你输入一个本地密码\",{\"1\":{\"671\":1}}],[\"此后再在renderimage\",{\"1\":{\"377\":1}}],[\"此后无需调用就可将同一个\",{\"1\":{\"41\":1}}],[\"此\",{\"1\":{\"331\":1}}],[\"此类题的解答思路一般为\",{\"1\":{\"666\":1}}],[\"此类能够实现切换的同时修改\",{\"1\":{\"343\":1}}],[\"此类动画还可以改变duration和curve\",{\"1\":{\"319\":1}}],[\"此类\",{\"1\":{\"300\":2,\"314\":2}}],[\"此方法在\",{\"1\":{\"418\":1}}],[\"此方法在满足\",{\"1\":{\"413\":1}}],[\"此方法的一种使用方式如下\",{\"1\":{\"417\":1}}],[\"此方法是\",{\"1\":{\"415\":1}}],[\"此方法是widgetsflutterbinding的另外一个混合类widgetsbinding负责具体实现\",{\"1\":{\"254\":1}}],[\"此方法不会主动创建\",{\"1\":{\"412\":1}}],[\"此方法返回的是没有使用的\",{\"1\":{\"412\":1}}],[\"此方法会回调powerimagebaserequest\",{\"1\":{\"399\":1}}],[\"此方法会调用imagecache\",{\"1\":{\"374\":1}}],[\"此方法内部执行powerimagebaserequest\",{\"1\":{\"399\":1}}],[\"此方法调用上面\",{\"1\":{\"398\":1}}],[\"此方法使用一个通用的\",{\"1\":{\"396\":1}}],[\"此方法获取的图片会被\",{\"1\":{\"383\":1}}],[\"此方法位于\",{\"1\":{\"247\":1}}],[\"此方法传入一个布尔值\",{\"1\":{\"43\":1}}],[\"此处又用到了一次该点\",{\"1\":{\"848\":1}}],[\"此处由于我是将网站放在二级目录\",{\"1\":{\"811\":1}}],[\"此处为\",{\"1\":{\"690\":1}}],[\"此处为替代\",{\"1\":{\"569\":1}}],[\"此处异常会被\",{\"1\":{\"656\":1}}],[\"此处如有异常\",{\"1\":{\"656\":1}}],[\"此处会校验\",{\"1\":{\"426\":1}}],[\"此处\",{\"1\":{\"418\":2}}],[\"此处的delegate就是我们之前传入的\",{\"1\":{\"418\":1}}],[\"此处的\",{\"1\":{\"403\":1,\"415\":1,\"418\":1,\"437\":2}}],[\"此处错误在release中也会调用fluttererror\",{\"1\":{\"295\":1}}],[\"此处仅做提前展示\",{\"1\":{\"264\":1}}],[\"此处限制\",{\"1\":{\"193\":1}}],[\"此处发送\",{\"1\":{\"193\":1}}],[\"此处创建\",{\"1\":{\"193\":1}}],[\"此处是\",{\"1\":{\"112\":1}}],[\"此前开发者只需要应用需要的权限在\",{\"1\":{\"170\":1}}],[\"此布局将在滚动到达这个最小高度的时候折叠\",{\"1\":{\"111\":1}}],[\"此代码同样强制在\",{\"1\":{\"80\":1}}],[\"此外viewmodel与lifecycle的结合可以保证在activity等生命周期结束后数据得到及时的清理\",{\"1\":{\"785\":1}}],[\"此外可以通过viewmodel在绑定到同一个activity的fragment之间共享数据\",{\"1\":{\"783\":1}}],[\"此外arraymap的\",{\"1\":{\"523\":1}}],[\"此外在okhttputils的结构中可以注意到有一个mplatform的变量\",{\"1\":{\"710\":1}}],[\"此外在\",{\"1\":{\"405\":1}}],[\"此外根据贝壳的分析\",{\"1\":{\"388\":1}}],[\"此外比较特殊的是他的\",{\"1\":{\"325\":1}}],[\"此外也可以通过\",{\"1\":{\"314\":1}}],[\"此外还需要有一个专门管理爬虫活动的主类\",{\"1\":{\"736\":1}}],[\"此外还可以写到一些文件中\",{\"1\":{\"699\":1}}],[\"此外还可以看到提供该\",{\"1\":{\"213\":1}}],[\"此外还持有了\",{\"1\":{\"415\":1}}],[\"此外还提供了一个\",{\"1\":{\"384\":1}}],[\"此外还封装了过渡动画相关的get\",{\"1\":{\"348\":1}}],[\"此外还调用了\",{\"1\":{\"303\":1}}],[\"此外还有一个抽象方法\",{\"1\":{\"711\":1}}],[\"此外还有一种用来传输数据的widget\",{\"1\":{\"269\":1}}],[\"此外还有包含了数据的对象大小计算方式如下\",{\"1\":{\"516\":1}}],[\"此外还有\",{\"1\":{\"344\":1}}],[\"此外还有美团的多渠道打包技术等\",{\"1\":{\"107\":1}}],[\"此外两个关系为\",{\"1\":{\"205\":1}}],[\"此外mvi\",{\"1\":{\"125\":1}}],[\"此外子进程中的过渡\",{\"1\":{\"30\":1}}],[\"此外\",{\"1\":{\"30\":1,\"39\":1,\"56\":1,\"63\":1,\"95\":1,\"125\":1,\"187\":1,\"205\":1,\"256\":1,\"344\":1,\"373\":1,\"375\":1,\"384\":2,\"400\":1,\"438\":1,\"461\":1,\"516\":1,\"523\":2,\"584\":1,\"593\":1,\"757\":1,\"763\":1,\"785\":1,\"786\":1}}],[\"此时已经有足够的信息让\",{\"1\":{\"766\":1}}],[\"此时这里返回\",{\"1\":{\"759\":1}}],[\"此时反序列化时\",{\"1\":{\"585\":1}}],[\"此时由于\",{\"1\":{\"547\":1}}],[\"此时由编译器或其它连接程序实现\",{\"1\":{\"490\":1}}],[\"此时可以在上面例子的基础上增加\",{\"1\":{\"445\":1}}],[\"此时会检测大小和数量\",{\"1\":{\"376\":2}}],[\"此时service类的\",{\"1\":{\"203\":1}}],[\"此时如果有进程\",{\"1\":{\"137\":1}}],[\"此时\",{\"1\":{\"36\":1,\"160\":1,\"343\":2,\"376\":1,\"412\":6,\"444\":1,\"545\":1,\"546\":1,\"547\":1,\"766\":1,\"813\":1}}],[\"此时需要添加\",{\"1\":{\"30\":1}}],[\"此时点击事件从\",{\"1\":{\"25\":1}}],[\"官方定义是在指定约束条件成熟时可靠的在后台执行对应的任务\",{\"1\":{\"787\":1}}],[\"官方介绍是参考rxjava等响应式流实现的\",{\"1\":{\"649\":1}}],[\"官方推荐一下两种方式\",{\"1\":{\"626\":1}}],[\"官方推荐我们使用sparearray和arraymap\",{\"1\":{\"85\":1}}],[\"官方的\",{\"1\":{\"394\":1}}],[\"官方的实现为radial\",{\"1\":{\"342\":1}}],[\"官方的定义\",{\"1\":{\"100\":1}}],[\"官方对其定义是\",{\"1\":{\"402\":1,\"433\":1}}],[\"官方对\",{\"1\":{\"341\":1,\"422\":1}}],[\"官方给了一张图以供参考\",{\"1\":{\"329\":1}}],[\"官方给了一张图\",{\"1\":{\"300\":1,\"314\":1}}],[\"官方示例代码\",{\"1\":{\"219\":1}}],[\"官方示例代码中学到的一个小技巧了\",{\"1\":{\"218\":1}}],[\"官方\",{\"1\":{\"209\":1,\"385\":1,\"763\":1}}],[\"官方手册\",{\"1\":{\"206\":1}}],[\"官方如今力推的模式\",{\"1\":{\"126\":1}}],[\"官方提供了\",{\"1\":{\"124\":1}}],[\"官方文档未相关描述\",{\"1\":{\"492\":1}}],[\"官方文档\",{\"1\":{\"104\":1,\"219\":1}}],[\"官方方法如下\",{\"1\":{\"30\":1}}],[\"官网对\",{\"1\":{\"781\":1}}],[\"官网异常处理\",{\"1\":{\"298\":1}}],[\"官网\",{\"1\":{\"22\":1,\"240\":1,\"342\":1,\"344\":1,\"788\":1}}],[\"官网介绍\",{\"1\":{\"11\":1}}],[\"时间负责度都是\",{\"1\":{\"895\":1}}],[\"时间复杂度是o\",{\"1\":{\"913\":1}}],[\"时间复杂度\",{\"1\":{\"896\":1,\"897\":1,\"898\":1}}],[\"时间复杂度为o\",{\"1\":{\"857\":1}}],[\"时间复杂度都是o\",{\"1\":{\"857\":1}}],[\"时几乎没有性能损失\",{\"1\":{\"828\":1}}],[\"时获取的是当前唯一的\",{\"1\":{\"747\":1}}],[\"时获取到的future便会收到回调\",{\"1\":{\"243\":1}}],[\"时使用\",{\"1\":{\"617\":2}}],[\"时使用animatable\",{\"1\":{\"303\":1}}],[\"时就会再生成一个新对象\",{\"1\":{\"545\":1}}],[\"时都会先检查一下\",{\"1\":{\"426\":1}}],[\"时都会调用此方法\",{\"1\":{\"333\":1}}],[\"时则会使用\",{\"1\":{\"393\":1}}],[\"时后者才会真正的\",{\"1\":{\"371\":1}}],[\"时要切换回图片\",{\"1\":{\"370\":1}}],[\"时曲线上对应的值\",{\"1\":{\"360\":1}}],[\"时报错\",{\"1\":{\"346\":1}}],[\"时执行\",{\"1\":{\"307\":1}}],[\"时没有动画\",{\"1\":{\"305\":1}}],[\"时出错的话\",{\"1\":{\"295\":1}}],[\"时传入的方法\",{\"1\":{\"247\":1}}],[\"时无此变量\",{\"1\":{\"179\":1}}],[\"时将存活对象复制到另一半内存\",{\"1\":{\"471\":1}}],[\"时将\",{\"1\":{\"176\":1}}],[\"时两个图形重叠部分的绘制方式\",{\"1\":{\"162\":1}}],[\"时会自动扩容\",{\"1\":{\"505\":1}}],[\"时会通过\",{\"1\":{\"333\":1}}],[\"时会被调用多次\",{\"1\":{\"160\":1}}],[\"时会返回与\",{\"1\":{\"71\":1}}],[\"时候创建的\",{\"1\":{\"256\":1}}],[\"时候控件的大小\",{\"1\":{\"159\":1}}],[\"时候注意\",{\"1\":{\"148\":1}}],[\"时调用对应的方法即可\",{\"1\":{\"153\":1}}],[\"时序图\",{\"1\":{\"138\":1}}],[\"时丢弃\",{\"1\":{\"89\":1}}],[\"时实现的方法\",{\"1\":{\"71\":1}}],[\"时的设置\",{\"1\":{\"812\":1}}],[\"时的警告\",{\"1\":{\"566\":1}}],[\"时的\",{\"1\":{\"36\":1}}],[\"时\",{\"1\":{\"30\":3,\"92\":1,\"110\":1,\"112\":1,\"138\":1,\"159\":1,\"176\":1,\"273\":1,\"314\":1,\"332\":1,\"334\":1,\"341\":1,\"344\":1,\"367\":1,\"375\":1,\"376\":1,\"377\":1,\"393\":1,\"409\":1,\"412\":7,\"415\":1,\"418\":4,\"500\":1,\"504\":1,\"547\":2,\"575\":1}}],[\"白屏的处理优化\",{\"0\":{\"30\":1}}],[\"白白耽搁了一晚上的时间\",{\"1\":{\"0\":1}}],[\"以此类推\",{\"1\":{\"919\":1}}],[\"以此来移除不可达的方法\",{\"1\":{\"771\":1}}],[\"以组节点53为支点左旋\",{\"1\":{\"904\":1}}],[\"以祖父节点为支点左旋\",{\"1\":{\"904\":1}}],[\"以祖父节6点为支点左旋\",{\"1\":{\"903\":1}}],[\"以34为支点右旋\",{\"1\":{\"903\":1}}],[\"以某个支点旋转\",{\"1\":{\"903\":1}}],[\"以满足排序规则\",{\"1\":{\"889\":1}}],[\"以正确的顺序输出排序结果\",{\"1\":{\"850\":1}}],[\"以向左为\",{\"1\":{\"837\":1}}],[\"以中序遍历为例\",{\"1\":{\"834\":1}}],[\"以实现部署多个\",{\"1\":{\"791\":1}}],[\"以实现当\",{\"1\":{\"312\":1}}],[\"以供参考\",{\"1\":{\"738\":1}}],[\"以英文月份排序\",{\"1\":{\"703\":1}}],[\"以数组排序\",{\"1\":{\"703\":1}}],[\"以第几列为标准排序\",{\"1\":{\"703\":1}}],[\"以分页形式查看文件内容\",{\"1\":{\"685\":1}}],[\"以文本格式查看文件全部内容\",{\"1\":{\"685\":1}}],[\"以备后用\",{\"1\":{\"671\":1}}],[\"以保证某一侧的子树\",{\"1\":{\"665\":1}}],[\"以粗粒度限制线程\",{\"1\":{\"645\":1}}],[\"以细粒度限制线程\",{\"1\":{\"645\":1}}],[\"以外的异常\",{\"1\":{\"640\":1}}],[\"以时间换取空间\",{\"1\":{\"614\":1}}],[\"以后\",{\"1\":{\"609\":1}}],[\"以后得回调方法\",{\"1\":{\"246\":1}}],[\"以确保它包含\",{\"1\":{\"538\":1}}],[\"以确保绘制的背景在我们需要的范围内\",{\"1\":{\"146\":1}}],[\"以enumclazz\",{\"1\":{\"521\":1}}],[\"以extendedimage\",{\"1\":{\"382\":1}}],[\"以string\",{\"1\":{\"461\":1}}],[\"以在\",{\"1\":{\"427\":1}}],[\"以一个垂直方向向下布局的滑动列表为例\",{\"1\":{\"412\":1}}],[\"以从网络加载图片为例\",{\"1\":{\"376\":1}}],[\"以networkimage加载网络图片的过程为例\",{\"1\":{\"374\":1}}],[\"以image\",{\"1\":{\"365\":1}}],[\"以当前\",{\"1\":{\"341\":1}}],[\"以达到控制动画的效果\",{\"1\":{\"335\":1}}],[\"以获取\",{\"1\":{\"331\":1}}],[\"以触发\",{\"1\":{\"312\":1}}],[\"以维护动画\",{\"1\":{\"312\":1}}],[\"以管理动画\",{\"1\":{\"302\":1}}],[\"以竖屏情况下屏幕宽度为例\",{\"1\":{\"196\":1}}],[\"以设计稿宽度和屏幕水平方法大小为准\",{\"1\":{\"195\":1}}],[\"以上时候读写性能会很差\",{\"1\":{\"827\":1}}],[\"以上所有类型的数组\",{\"1\":{\"568\":1}}],[\"以上所有情况的警告\",{\"1\":{\"566\":1}}],[\"以上所有代码如下\",{\"1\":{\"215\":1}}],[\"以上\",{\"1\":{\"497\":1}}],[\"以上分析为\",{\"1\":{\"398\":1}}],[\"以上就是\",{\"1\":{\"332\":1}}],[\"以上完整的代码可以参考这里\",{\"1\":{\"202\":1}}],[\"以上介绍了线程和线程池部分的内容\",{\"1\":{\"193\":1}}],[\"以上都没有找到\",{\"1\":{\"92\":1}}],[\"以替换系统的\",{\"1\":{\"179\":1}}],[\"以通过系统的检查\",{\"1\":{\"179\":1}}],[\"以通过他来响应用户的交互\",{\"1\":{\"123\":1}}],[\"以其宽度为例\",{\"1\":{\"163\":1}}],[\"以path\",{\"1\":{\"143\":1}}],[\"以初始化这个虚拟内存区域的内容\",{\"1\":{\"136\":1}}],[\"以下操作以邻接表方式为例\",{\"1\":{\"843\":1}}],[\"以下为原文提到的其他方法\",{\"1\":{\"671\":1}}],[\"以下为非必须代码\",{\"1\":{\"612\":1}}],[\"以下为示例\",{\"1\":{\"116\":1}}],[\"以下示例皆为从小到大的排序\",{\"1\":{\"531\":1}}],[\"以下所说的计算\",{\"1\":{\"516\":1}}],[\"以下类都是基于\",{\"1\":{\"431\":1}}],[\"以下是错误信息\",{\"1\":{\"295\":1}}],[\"以下是代码\",{\"1\":{\"189\":1}}],[\"以下数据为\",{\"1\":{\"196\":1}}],[\"以下内容来自\",{\"1\":{\"136\":1}}],[\"以下加载\",{\"0\":{\"30\":1}}],[\"以便以后查看\",{\"1\":{\"798\":1}}],[\"以便您将精力集中放在所需的代码上\",{\"1\":{\"781\":1}}],[\"以便从\",{\"1\":{\"742\":1}}],[\"以便学习如何封装常见工具的思想\",{\"1\":{\"707\":1}}],[\"以便日后查验\",{\"1\":{\"649\":1}}],[\"以便更新\",{\"1\":{\"437\":1}}],[\"以便让\",{\"1\":{\"396\":1}}],[\"以便对一部分图片缓存统一处理\",{\"1\":{\"384\":1}}],[\"以便\",{\"1\":{\"365\":1,\"418\":1}}],[\"以便产生非线性的动画\",{\"1\":{\"361\":1}}],[\"以便为\",{\"1\":{\"359\":1}}],[\"以便实时改变过渡组件\",{\"1\":{\"352\":1}}],[\"以便告诉\",{\"1\":{\"282\":1}}],[\"以便当该widget变化的时候\",{\"1\":{\"272\":1}}],[\"以便在充分利用\",{\"1\":{\"786\":1}}],[\"以便在下次屏幕刷新时安排rebuilt\",{\"1\":{\"270\":1}}],[\"以便在屏幕下次刷新的时候显示\",{\"1\":{\"257\":1}}],[\"以便向\",{\"1\":{\"243\":1,\"244\":1}}],[\"以便其他控件指定选中的字母\",{\"1\":{\"152\":1}}],[\"以便其他控件获取当前选中的字母\",{\"1\":{\"152\":1}}],[\"以便可以在\",{\"1\":{\"116\":1}}],[\"以便整理数组结构\",{\"1\":{\"90\":1}}],[\"以\",{\"1\":{\"101\":1,\"270\":1,\"279\":1,\"307\":1,\"308\":1,\"329\":2,\"332\":1,\"349\":1,\"399\":1,\"440\":1,\"463\":1,\"516\":1}}],[\"以我们使用的设计稿宽度为\",{\"1\":{\"100\":1}}],[\"以适配屏幕宽度为例\",{\"1\":{\"100\":1}}],[\"以横轴为\",{\"1\":{\"74\":1}}],[\"以屏幕左上角顶点为原点\",{\"1\":{\"74\":1}}],[\"以及顺着某一个节点一直到遇到叶节点的路径上的节点关键字是依次递减的\",{\"1\":{\"856\":1}}],[\"以及任务执行的条件\",{\"1\":{\"787\":1}}],[\"以及custom\",{\"1\":{\"783\":1}}],[\"以及他们如何巧妙的搭配使用\",{\"1\":{\"781\":1}}],[\"以及他们是如何添加到我们的\",{\"1\":{\"257\":1}}],[\"以及无聊时瞎琢磨得出来的稀奇古怪的想法放到这里\",{\"1\":{\"779\":1}}],[\"以及类型在程序中是如何应用的\",{\"1\":{\"771\":1}}],[\"以及如何关联这些对象的说明信息\",{\"1\":{\"769\":1}}],[\"以及将解析好的数据格式化输出\",{\"1\":{\"737\":1}}],[\"以及便利这些\",{\"1\":{\"731\":1}}],[\"以及挂起友好且遵从结构化并发\",{\"1\":{\"649\":1}}],[\"以及实施更复杂的转换\",{\"1\":{\"629\":1}}],[\"以及实现了\",{\"1\":{\"59\":1}}],[\"以及跨进程传递对象等时使用parcelable以节省性能\",{\"1\":{\"597\":1}}],[\"以及基于\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"以及超大图内存峰值等问题\",{\"1\":{\"388\":1}}],[\"以及图片大小sizebytes\",{\"1\":{\"375\":1}}],[\"以及热更新\",{\"1\":{\"367\":1}}],[\"以及依赖于特定设备的格式\",{\"1\":{\"365\":1}}],[\"以及power\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"以及绘制过渡\",{\"1\":{\"347\":1}}],[\"以及控制其\",{\"1\":{\"347\":1}}],[\"以及根据初始化以及开始\",{\"1\":{\"347\":1}}],[\"以及使用\",{\"1\":{\"332\":1}}],[\"以及一个\",{\"1\":{\"765\":1}}],[\"以及一个获取图片像素大小的sizebytes方法\",{\"1\":{\"369\":1}}],[\"以及一系列\",{\"1\":{\"329\":1}}],[\"以及一系列以\",{\"1\":{\"329\":1}}],[\"以及一下几种会按照同步方法立即执行的方式\",{\"1\":{\"222\":1}}],[\"以及展示对应的\",{\"1\":{\"310\":1}}],[\"以及执行调用方需要的功能呢\",{\"1\":{\"244\":1}}],[\"以及其简单用法\",{\"1\":{\"199\":1}}],[\"以及我们需要求得的控件在设备中的\",{\"1\":{\"196\":1}}],[\"以及普通的线程\",{\"1\":{\"190\":1}}],[\"以及颜色变化\",{\"1\":{\"132\":1}}],[\"以及\",{\"1\":{\"123\":1,\"138\":1,\"158\":1,\"230\":1,\"259\":1,\"278\":1,\"309\":1,\"332\":1,\"385\":1,\"403\":1,\"439\":1,\"575\":1,\"640\":2,\"768\":1,\"770\":1,\"781\":1}}],[\"以及和\",{\"1\":{\"110\":1}}],[\"以及在实际使用中遇到的一个问题\",{\"1\":{\"99\":1}}],[\"以及通过二分法查找索引都会消耗性能\",{\"1\":{\"86\":1}}],[\"以及主进程的主\",{\"1\":{\"30\":1}}],[\"以调用服务的公共方法\",{\"1\":{\"38\":1}}],[\"以启动服务以及执行其他操作\",{\"1\":{\"11\":1}}],[\"再对其进行归并\",{\"1\":{\"913\":1}}],[\"再以983为新节点\",{\"1\":{\"904\":1}}],[\"再以父节点作为新插入的点\",{\"1\":{\"904\":1}}],[\"再以toindex为起点向下比较\",{\"1\":{\"859\":1}}],[\"再依次向下遍历\",{\"1\":{\"859\":1}}],[\"再遍历下一条\",{\"1\":{\"847\":1}}],[\"再哈希法比二次探测好\",{\"1\":{\"828\":1}}],[\"再哈希法\",{\"1\":{\"827\":1,\"828\":1}}],[\"再到自己开始尝试搭建博客\",{\"1\":{\"798\":1}}],[\"再到结合\",{\"1\":{\"127\":1}}],[\"再移除一些不可达方法\",{\"1\":{\"771\":1}}],[\"再判断是否有热点代码需要优化\",{\"1\":{\"768\":1}}],[\"再判断是否调用\",{\"1\":{\"333\":1}}],[\"再回退到\",{\"1\":{\"766\":1}}],[\"再根节点\",{\"1\":{\"665\":1}}],[\"再根子树\",{\"1\":{\"665\":1}}],[\"再根据yyyy表示的是week\",{\"1\":{\"576\":1}}],[\"再根据下面的\",{\"1\":{\"393\":1}}],[\"再右子树\",{\"1\":{\"665\":2}}],[\"再左子树\",{\"1\":{\"665\":1}}],[\"再执行\",{\"1\":{\"812\":1}}],[\"再执行collect等方法\",{\"1\":{\"655\":1}}],[\"再执行另外一个\",{\"1\":{\"221\":1}}],[\"再同时收集结果流\",{\"1\":{\"655\":1}}],[\"再去访问其邻接点的所有可以访问邻接点\",{\"1\":{\"848\":1}}],[\"再去请求下一个流\",{\"1\":{\"655\":1}}],[\"再去更新\",{\"1\":{\"285\":1}}],[\"再比如下面这个示例中的2010\",{\"1\":{\"576\":1}}],[\"再调用不同的方法对这些变量\",{\"1\":{\"564\":1}}],[\"再通过其获取到resources对象\",{\"1\":{\"823\":1}}],[\"再通过反射获取对应的资源\",{\"1\":{\"814\":1}}],[\"再通过\",{\"1\":{\"556\":1}}],[\"再通过父类绘制\",{\"1\":{\"332\":1}}],[\"再将增量n减一\",{\"1\":{\"919\":1}}],[\"再将bottom移动到柱子c即可\",{\"1\":{\"912\":1}}],[\"再将数组最后一个节点\",{\"1\":{\"859\":1}}],[\"再将其部署到\",{\"1\":{\"791\":1}}],[\"再将\",{\"1\":{\"534\":1,\"896\":1}}],[\"再将滑动分配给\",{\"1\":{\"419\":1}}],[\"再结合官方的描述\",{\"1\":{\"523\":1}}],[\"再从3\",{\"1\":{\"485\":1}}],[\"再为新的\",{\"1\":{\"438\":1}}],[\"再尝试将\",{\"1\":{\"419\":1}}],[\"再加上一个前序排序\",{\"1\":{\"666\":1}}],[\"再加上在\",{\"1\":{\"519\":1}}],[\"再加上\",{\"1\":{\"405\":1,\"516\":1}}],[\"再变为正方形\",{\"1\":{\"343\":1}}],[\"再来看一下dart\",{\"1\":{\"247\":1}}],[\"再来看看我们写的对应的\",{\"1\":{\"138\":1}}],[\"再来看看一个完整的流程\",{\"1\":{\"138\":1}}],[\"再仔细看一下\",{\"1\":{\"193\":1}}],[\"再查下去\",{\"1\":{\"193\":1}}],[\"再讲\",{\"1\":{\"176\":1}}],[\"再决定如何申请权限requestpermissions\",{\"1\":{\"172\":1}}],[\"再绘制对应坐标\",{\"1\":{\"148\":1}}],[\"再在顶部绘制src与dst重合的部分\",{\"1\":{\"132\":1}}],[\"再在顶部绘制dst与src重合的部分\",{\"1\":{\"132\":1}}],[\"再看\",{\"1\":{\"193\":1}}],[\"再看一下创建\",{\"1\":{\"753\":1}}],[\"再看一下dart\",{\"1\":{\"247\":1}}],[\"再看一下\",{\"1\":{\"126\":1,\"193\":1,\"357\":1}}],[\"再看一眼上述的公式\",{\"1\":{\"100\":1}}],[\"再看看内部类outclass$1\",{\"1\":{\"513\":1}}],[\"再看看getimessenger\",{\"1\":{\"83\":1}}],[\"再看看\",{\"1\":{\"25\":1,\"83\":1,\"193\":1,\"523\":1}}],[\"再向前查询是否有相同的key\",{\"1\":{\"92\":1}}],[\"再次减小排序\",{\"1\":{\"921\":1}}],[\"再次分别循环分析左右两个子树的结构\",{\"1\":{\"666\":1}}],[\"再次执行\",{\"1\":{\"545\":1}}],[\"再次\",{\"1\":{\"75\":1}}],[\"再逐层分发到\",{\"1\":{\"28\":1}}],[\"经验\",{\"1\":{\"779\":1}}],[\"经验总结放到这里\",{\"1\":{\"0\":1}}],[\"经典的使用分为\",{\"1\":{\"708\":1}}],[\"经典的使用方式\",{\"1\":{\"403\":1}}],[\"经常动态生成大量\",{\"1\":{\"467\":1}}],[\"经常在\",{\"1\":{\"122\":1}}],[\"经历几次\",{\"1\":{\"457\":2}}],[\"经过包装再返回到调用方\",{\"1\":{\"747\":1}}],[\"经过8\",{\"1\":{\"516\":1}}],[\"经过上面的分析\",{\"1\":{\"352\":1}}],[\"经过上述检查\",{\"1\":{\"424\":1}}],[\"经过上述代码\",{\"1\":{\"349\":1}}],[\"经过上述分析可以知道\",{\"1\":{\"376\":1}}],[\"经过上述分析\",{\"1\":{\"327\":1,\"361\":1}}],[\"经过处理后赋值给\",{\"1\":{\"264\":1}}],[\"经过\",{\"1\":{\"28\":1,\"690\":1}}],[\"处获取的\",{\"1\":{\"405\":1}}],[\"处对应的值\",{\"1\":{\"360\":1}}],[\"处于运动状态时返回\",{\"1\":{\"317\":1}}],[\"处于不可用状态下\",{\"1\":{\"27\":1}}],[\"处理非随机数据时会慢到o\",{\"1\":{\"875\":1}}],[\"处理任务\",{\"1\":{\"760\":2}}],[\"处理消息\",{\"1\":{\"759\":1}}],[\"处理后\",{\"1\":{\"655\":1}}],[\"处理的\",{\"1\":{\"436\":1}}],[\"处理的逻辑会日益增长\",{\"1\":{\"126\":1}}],[\"处理用户\",{\"1\":{\"420\":1}}],[\"处理用户的输入\",{\"1\":{\"123\":1}}],[\"处理回调\",{\"1\":{\"397\":1}}],[\"处理引导着\",{\"1\":{\"258\":1}}],[\"处理两种消息\",{\"1\":{\"221\":1}}],[\"处理请求权限的结果\",{\"1\":{\"173\":1}}],[\"处理业务逻辑\",{\"1\":{\"126\":1}}],[\"处理逻辑\",{\"1\":{\"125\":1}}],[\"处理\",{\"0\":{\"245\":1},\"1\":{\"76\":1,\"125\":2,\"229\":1,\"310\":1,\"366\":1,\"398\":1,\"404\":1,\"415\":1,\"418\":1,\"759\":1}}],[\"处理服务端回复\",{\"1\":{\"39\":1}}],[\"处理客户端\",{\"1\":{\"39\":1}}],[\"处理点击事件\",{\"1\":{\"26\":1}}],[\"注销时执行~\",{\"1\":{\"700\":1}}],[\"注销登录时调用执行\",{\"1\":{\"699\":1}}],[\"注销的是指定的\",{\"1\":{\"63\":1}}],[\"注解要实现的逻辑\",{\"1\":{\"569\":1}}],[\"注解帮助类\",{\"0\":{\"569\":1}}],[\"注解参数支持数据类型如下\",{\"1\":{\"568\":1}}],[\"注解参数只可以为\",{\"1\":{\"568\":1}}],[\"注解元素必须有明确的值\",{\"1\":{\"568\":1}}],[\"注解类\",{\"0\":{\"568\":1}}],[\"注解不能继承其他注解或接口\",{\"1\":{\"565\":1}}],[\"注解\",{\"0\":{\"564\":1},\"1\":{\"564\":1,\"571\":1}}],[\"注解从小于\",{\"1\":{\"343\":1}}],[\"注册新账户\",{\"1\":{\"810\":1}}],[\"注册并登录\",{\"1\":{\"810\":1}}],[\"注册获取\",{\"1\":{\"398\":1}}],[\"注册与\",{\"1\":{\"398\":1}}],[\"注册到了\",{\"1\":{\"256\":1}}],[\"注册到\",{\"1\":{\"256\":1}}],[\"注册事件\",{\"1\":{\"189\":1}}],[\"注册的\",{\"1\":{\"178\":1}}],[\"注册回调方法\",{\"1\":{\"63\":1}}],[\"注册\",{\"1\":{\"35\":1,\"160\":1}}],[\"注册了\",{\"1\":{\"27\":1}}],[\"注\",{\"1\":{\"30\":1,\"264\":1,\"813\":1}}],[\"注意下面这里的\",{\"1\":{\"754\":1}}],[\"注意下面这个方法\",{\"1\":{\"273\":1}}],[\"注意此时只是为as分配了内存\",{\"1\":{\"547\":1}}],[\"注意此处监听了\",{\"1\":{\"307\":1}}],[\"注意不是创建\",{\"1\":{\"265\":1}}],[\"注意如果是\",{\"1\":{\"209\":1}}],[\"注意如果需要更新进度\",{\"1\":{\"191\":1}}],[\"注意是类\",{\"1\":{\"203\":1}}],[\"注意三个参数\",{\"1\":{\"117\":1}}],[\"注意其直接子\",{\"1\":{\"111\":1}}],[\"注意这里参与比较的是max\",{\"1\":{\"897\":1}}],[\"注意这里需要是完整的类名\",{\"1\":{\"553\":1}}],[\"注意这里获取到是线程本身的\",{\"1\":{\"527\":1}}],[\"注意这里获取到了\",{\"1\":{\"351\":1}}],[\"注意这里调用\",{\"1\":{\"426\":1}}],[\"注意这里只给\",{\"1\":{\"415\":1}}],[\"注意这里只是加入到\",{\"1\":{\"376\":1}}],[\"注意这里使用的从\",{\"1\":{\"405\":1}}],[\"注意这里使用了子类实现的\",{\"1\":{\"310\":1}}],[\"注意这里将\",{\"1\":{\"349\":1}}],[\"注意这里给父类传入了\",{\"1\":{\"330\":1}}],[\"注意这里返回了\",{\"1\":{\"264\":1}}],[\"注意这里用\",{\"1\":{\"255\":1}}],[\"注意这里创建了\",{\"1\":{\"253\":1}}],[\"注意这里\",{\"1\":{\"215\":1,\"253\":1,\"262\":2,\"587\":1}}],[\"注意这里要指明\",{\"1\":{\"213\":1}}],[\"注意这里会调用\",{\"1\":{\"193\":1}}],[\"注意这里注册了一个\",{\"1\":{\"189\":1}}],[\"注意这里传入了\",{\"1\":{\"123\":1,\"405\":1}}],[\"注意这里一定要判断非空\",{\"1\":{\"63\":1}}],[\"注意这里是\",{\"1\":{\"62\":1,\"213\":1}}],[\"注意这里的\",{\"1\":{\"340\":1,\"374\":1,\"751\":1}}],[\"注意这里的参数\",{\"1\":{\"246\":1}}],[\"注意这里的关键代码\",{\"1\":{\"229\":1}}],[\"注意这里的要求\",{\"1\":{\"193\":1}}],[\"注意这里的构造方法传入的是\",{\"1\":{\"83\":1}}],[\"注意这里的pintent需要与设置闹钟时的pendingintent一致\",{\"1\":{\"21\":1}}],[\"注意这里的requestcode\",{\"1\":{\"15\":1}}],[\"注意事项\",{\"0\":{\"60\":1,\"131\":1,\"148\":1}}],[\"注意该方法并不会停止服务\",{\"1\":{\"43\":1}}],[\"注意\",{\"1\":{\"2\":1,\"39\":1,\"63\":2,\"71\":1,\"74\":1,\"116\":1,\"117\":1,\"125\":1,\"126\":1,\"246\":2,\"247\":1,\"370\":1,\"392\":2,\"486\":1,\"516\":1,\"569\":1,\"575\":1,\"584\":1,\"645\":1,\"726\":1,\"744\":1,\"896\":1,\"897\":1,\"904\":1}}],[\"可执行文件承载了一个称为内核服务\",{\"1\":{\"765\":1}}],[\"可变参数\",{\"1\":{\"726\":1}}],[\"可传达\",{\"1\":{\"645\":1}}],[\"可重入代码\",{\"1\":{\"608\":1}}],[\"可达标记存活\",{\"1\":{\"472\":1}}],[\"可视为一个特殊的\",{\"1\":{\"341\":1}}],[\"可能没法处理部分情况\",{\"1\":{\"768\":1}}],[\"可能需要执行依赖于相应流的最新值的计算\",{\"1\":{\"631\":1}}],[\"可能被虚拟机忽略\",{\"1\":{\"565\":1}}],[\"可能有无限的高度时\",{\"1\":{\"445\":1}}],[\"可能有虚拟按键的情况\",{\"1\":{\"196\":1}}],[\"可能在准确性上犯错\",{\"1\":{\"771\":1}}],[\"可能在不同时间关联不同的\",{\"1\":{\"763\":1}}],[\"可能在用到\",{\"1\":{\"548\":1}}],[\"可能在\",{\"1\":{\"412\":1}}],[\"可能是最通俗易懂的自动发布博客图文教程\",{\"1\":{\"796\":1}}],[\"可能是\",{\"1\":{\"375\":2}}],[\"可能是线性变化\",{\"1\":{\"360\":1}}],[\"可能同时在\",{\"1\":{\"375\":1}}],[\"可能可能同时也是\",{\"1\":{\"375\":1}}],[\"可能修改\",{\"1\":{\"308\":1}}],[\"可能导致某些设置有误\",{\"1\":{\"812\":1}}],[\"可能导致\",{\"1\":{\"221\":1}}],[\"可能会产生逆序和环形链表\",{\"1\":{\"501\":1}}],[\"可能会通过折叠展开等方式改变尺寸时\",{\"1\":{\"428\":1}}],[\"可能会显得有些臃肿\",{\"1\":{\"385\":1}}],[\"可能会出现毛刺\",{\"1\":{\"334\":1}}],[\"可能会导致\",{\"1\":{\"412\":1}}],[\"可能会导致细微且难以诊断的错误\",{\"1\":{\"126\":1}}],[\"可能会导致崩溃\",{\"1\":{\"123\":1}}],[\"可能会调用到的类加载到了主\",{\"1\":{\"30\":1}}],[\"可知\",{\"1\":{\"196\":1}}],[\"可知mremote便是指向\",{\"1\":{\"138\":1}}],[\"可移植\",{\"1\":{\"126\":1}}],[\"可使用的状态\",{\"1\":{\"123\":1}}],[\"可选\",{\"0\":{\"116\":1},\"1\":{\"83\":2,\"131\":1,\"307\":1,\"311\":1,\"331\":1,\"497\":1,\"718\":2,\"799\":1,\"800\":1}}],[\"可见是直接取的当前线程对应的\",{\"1\":{\"747\":1}}],[\"可见性\",{\"1\":{\"604\":2}}],[\"可见性发生变化就会被回调\",{\"1\":{\"160\":1}}],[\"可见处理\",{\"1\":{\"437\":1}}],[\"可见的\",{\"1\":{\"431\":1}}],[\"可见在计算\",{\"1\":{\"417\":1}}],[\"可见对于ffi和texture方案\",{\"1\":{\"398\":1}}],[\"可见生命周期内绑定\",{\"1\":{\"41\":1}}],[\"可见\",{\"1\":{\"27\":1,\"111\":1,\"193\":1,\"237\":1,\"415\":1,\"426\":1,\"749\":1}}],[\"可以选取数组第一个或者最后一个元素\",{\"1\":{\"926\":1}}],[\"可以选择使用\",{\"1\":{\"309\":1}}],[\"可以想象\",{\"1\":{\"920\":1}}],[\"可以指向数组开始位置\",{\"1\":{\"888\":1}}],[\"可以指定一个\",{\"1\":{\"384\":1}}],[\"可以进行压入push和推出pop操作\",{\"1\":{\"887\":1}}],[\"可以进行堆排序\",{\"1\":{\"860\":1}}],[\"可以配置成运行在同一个进程中\",{\"1\":{\"816\":1}}],[\"可以相互访问代码\",{\"1\":{\"816\":1}}],[\"可以让云服务器代替我们实现\",{\"1\":{\"791\":1}}],[\"可以让开发者在\",{\"1\":{\"251\":1}}],[\"可以提供对表格的操作方法\",{\"1\":{\"786\":1}}],[\"可以帮助我们很好地学习\",{\"1\":{\"781\":1}}],[\"可以共享常量\",{\"1\":{\"753\":1}}],[\"可以正常发送的原因是\",{\"1\":{\"745\":1}}],[\"可以满足客户端需求\",{\"1\":{\"732\":1}}],[\"可以爬取\",{\"1\":{\"732\":1}}],[\"可以输入\",{\"1\":{\"726\":1}}],[\"可以输出key的值\",{\"1\":{\"697\":1}}],[\"可以输出到文件\",{\"1\":{\"580\":1}}],[\"可以\",{\"1\":{\"726\":1}}],[\"可以没有\",{\"1\":{\"726\":1}}],[\"可以和xx\",{\"1\":{\"664\":1}}],[\"可以很好的替代匿名内部类\",{\"1\":{\"663\":1}}],[\"可以放到\",{\"1\":{\"662\":1}}],[\"可以放弃等待\",{\"1\":{\"606\":1}}],[\"可以添加\",{\"1\":{\"657\":1}}],[\"可以允许为空\",{\"1\":{\"646\":1}}],[\"可以调用非局部返回\",{\"1\":{\"621\":1}}],[\"可以拦截赋值操作\",{\"1\":{\"619\":1}}],[\"可以安全读取\",{\"1\":{\"618\":1}}],[\"可以安全的应用\",{\"1\":{\"540\":1}}],[\"可以先对其进行忙循环\",{\"1\":{\"609\":1}}],[\"可以自定义一个classname\",{\"1\":{\"612\":1}}],[\"可以自定义要参与到序列化与反序列化的变量\",{\"1\":{\"592\":1}}],[\"可以自由实现它\",{\"1\":{\"460\":1}}],[\"可以自由修改实现\",{\"1\":{\"125\":1}}],[\"可以持久化保存\",{\"1\":{\"588\":1}}],[\"可以手动指定\",{\"1\":{\"582\":1}}],[\"可以这么想\",{\"1\":{\"540\":1}}],[\"可以合法的指向一个list<\",{\"1\":{\"540\":1}}],[\"可以参考下文\",{\"1\":{\"522\":1}}],[\"可以参考文章\",{\"1\":{\"517\":1}}],[\"可以参考stackoverflow\",{\"1\":{\"517\":1}}],[\"可以参考这篇文章\",{\"1\":{\"516\":1,\"580\":1}}],[\"可以参考这个项目\",{\"1\":{\"123\":1}}],[\"可以参照这张图\",{\"1\":{\"516\":1}}],[\"可以省略参数\",{\"1\":{\"662\":1}}],[\"可以省略\",{\"1\":{\"511\":1}}],[\"可以增加负载因子loadfactor的值\",{\"1\":{\"500\":1}}],[\"可以回收\",{\"1\":{\"475\":1}}],[\"可以定位到内存中的\",{\"1\":{\"461\":1}}],[\"可以完全显示\",{\"1\":{\"444\":1}}],[\"可以按需分布\",{\"1\":{\"444\":1,\"445\":1}}],[\"可以按照给定的\",{\"1\":{\"355\":1}}],[\"可以按照以下顺序选择实现方式\",{\"1\":{\"312\":1}}],[\"可以保证在父级无法完整显示\",{\"1\":{\"442\":1}}],[\"可以创建\",{\"1\":{\"422\":1}}],[\"可以产生的线程数就会越少\",{\"1\":{\"465\":1}}],[\"可以产生\",{\"1\":{\"418\":1}}],[\"可以识别手势\",{\"1\":{\"415\":1}}],[\"可以推迟或者影响\",{\"1\":{\"409\":1}}],[\"可以监听\",{\"1\":{\"405\":1}}],[\"可以知道\",{\"1\":{\"393\":1,\"576\":1}}],[\"可以分为三种\",{\"1\":{\"834\":1}}],[\"可以分为两大类\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"可以分为下面这几种情况\",{\"1\":{\"263\":1}}],[\"可以分别使用maximumsize和maximumsizebytes修改配置\",{\"1\":{\"375\":1}}],[\"可以直接引用该方法\",{\"1\":{\"662\":1}}],[\"可以直接用类名\",{\"1\":{\"612\":1}}],[\"可以直接传入canvas\",{\"1\":{\"371\":1}}],[\"可以直接展示ui\",{\"1\":{\"371\":1}}],[\"可以降低负载因子\",{\"1\":{\"500\":1}}],[\"可以降低\",{\"1\":{\"365\":1}}],[\"可以返回一个新的\",{\"1\":{\"361\":1}}],[\"可以为空\",{\"1\":{\"358\":1}}],[\"可以为传入的\",{\"1\":{\"317\":1}}],[\"可以此方法作用是结合两个\",{\"1\":{\"357\":1}}],[\"可以等比例缩放\",{\"1\":{\"344\":1}}],[\"可以被用来替代\",{\"1\":{\"643\":1}}],[\"可以被用于这些目的\",{\"1\":{\"642\":1}}],[\"可以被组合起来创建各种\",{\"1\":{\"422\":1}}],[\"可以被独立管理\",{\"1\":{\"341\":1}}],[\"可以被\",{\"1\":{\"335\":1}}],[\"可以被客户端通过\",{\"1\":{\"38\":1}}],[\"可以传入\",{\"1\":{\"333\":1,\"726\":1}}],[\"可以组合多个\",{\"1\":{\"317\":1}}],[\"可以与\",{\"1\":{\"314\":1}}],[\"可以考虑使用\",{\"1\":{\"312\":1}}],[\"可以考虑使用isolates\",{\"1\":{\"285\":1}}],[\"可以考虑进一步自定义实现隐式动画\",{\"1\":{\"312\":1}}],[\"可以开始\",{\"1\":{\"305\":1}}],[\"可以开始动画\",{\"1\":{\"304\":1}}],[\"可以开始调用服务的一系列方法\",{\"1\":{\"64\":1}}],[\"可以大体分为\",{\"1\":{\"301\":1}}],[\"可以依次考虑\",{\"1\":{\"300\":1,\"314\":1}}],[\"可以理解为一个沙盒\",{\"1\":{\"297\":1}}],[\"可以类比为android中的thread\",{\"1\":{\"297\":1}}],[\"可以预先缓存final\",{\"1\":{\"296\":1}}],[\"可以重写\",{\"1\":{\"287\":1}}],[\"可以称之为隧道\",{\"1\":{\"286\":1}}],[\"可以间接访问\",{\"1\":{\"286\":1}}],[\"可以访问\",{\"1\":{\"286\":1}}],[\"可以占据的空间大小\",{\"1\":{\"276\":1}}],[\"可以使用循环队列解决伪溢出问题\",{\"1\":{\"888\":1}}],[\"可以使用二分查找\",{\"1\":{\"880\":1}}],[\"可以使用isolategroup来解决\",{\"1\":{\"740\":1}}],[\"可以使用imagecache\",{\"1\":{\"375\":1}}],[\"可以使用source\",{\"1\":{\"700\":1}}],[\"可以使用sync\",{\"1\":{\"285\":1}}],[\"可以使用命令\",{\"1\":{\"673\":2}}],[\"可以使用操作符转换流\",{\"1\":{\"629\":1}}],[\"可以使用下面的方法实现读\",{\"1\":{\"584\":1}}],[\"可以使用\",{\"1\":{\"336\":1,\"340\":1,\"539\":1,\"672\":1}}],[\"可以使用自定义实现显式动画\",{\"1\":{\"312\":1}}],[\"可以使用await等待其执行完毕\",{\"1\":{\"294\":1}}],[\"可以使用expanded或flexible\",{\"1\":{\"275\":1}}],[\"可以使用以下方式\",{\"1\":{\"6\":1}}],[\"可以简单理解为\",{\"1\":{\"269\":1}}],[\"可以得知\",{\"1\":{\"247\":1}}],[\"可以有两种操作\",{\"1\":{\"905\":1}}],[\"可以有方法\",{\"1\":{\"612\":1}}],[\"可以有多个\",{\"1\":{\"203\":1}}],[\"可以有一个比较完美的解决方案\",{\"1\":{\"30\":1}}],[\"可以设置的值参考下图\",{\"1\":{\"162\":1}}],[\"可以获取宽\",{\"1\":{\"160\":1}}],[\"可以绘制实际的\",{\"1\":{\"148\":1}}],[\"可以避免阻塞\",{\"1\":{\"137\":1}}],[\"可以关闭硬件加速\",{\"1\":{\"131\":1}}],[\"可以加速绘制速度\",{\"1\":{\"131\":1}}],[\"可以从下述例子详细看一下代码执行的时候各个方法执行过程\",{\"1\":{\"221\":1}}],[\"可以从本地\",{\"1\":{\"126\":1}}],[\"可以从客户端的得到的\",{\"1\":{\"83\":1}}],[\"可以复用\",{\"1\":{\"126\":1}}],[\"可以看其最后只是将requestcall和callback传递给了okhttputils类的execute方法\",{\"1\":{\"712\":1}}],[\"可以看做是官方文档的不完全翻译\",{\"1\":{\"209\":1}}],[\"可以看下图\",{\"1\":{\"126\":1}}],[\"可以看出\",{\"1\":{\"125\":1,\"132\":1,\"224\":1,\"347\":1,\"440\":1}}],[\"可以看到isolate\",{\"1\":{\"754\":1}}],[\"可以看到okhttprequestbuilder只是将网络请求的相关参数传递到okhttprequest中\",{\"1\":{\"711\":1}}],[\"可以看到大体上可以将其分为\",{\"1\":{\"709\":1}}],[\"可以看到两次获取的是完全相同的对象\",{\"1\":{\"587\":1}}],[\"可以看到使用了\",{\"1\":{\"546\":1}}],[\"可以看到在\",{\"1\":{\"439\":1}}],[\"可以看到在mainactivitymodule中提供了一个方法利用刚刚mainactivitysubcomponent中提供的mainactivitysubcomponent\",{\"1\":{\"213\":1}}],[\"可以看到其createelement创建的是\",{\"1\":{\"264\":1}}],[\"可以看到其内部还有\",{\"1\":{\"251\":1}}],[\"可以看到无论是单次还是循环的\",{\"1\":{\"235\":1}}],[\"可以看到这两个方法到最后都相当于调用了thread对象的threadlocals的set\",{\"1\":{\"527\":1}}],[\"可以看到这里\",{\"1\":{\"440\":1,\"587\":1}}],[\"可以看到这里最后的关键方法是sendport\",{\"1\":{\"244\":1}}],[\"可以看到这里实际上是调用了\",{\"1\":{\"234\":1}}],[\"可以看到这种问题的优化思路主要在于如何在避免java\",{\"1\":{\"30\":1}}],[\"可以看到除了\",{\"1\":{\"144\":1}}],[\"可以看到\",{\"1\":{\"25\":1,\"199\":1,\"228\":2,\"231\":1,\"234\":2,\"243\":2,\"244\":1,\"251\":1,\"256\":1,\"259\":1,\"265\":1,\"276\":1,\"310\":1,\"331\":1,\"333\":1,\"341\":1,\"347\":1,\"368\":1,\"376\":1,\"424\":1,\"430\":1,\"436\":1,\"439\":1,\"513\":1,\"747\":1,\"748\":1,\"753\":1,\"761\":1,\"781\":1}}],[\"可以实现下面的方法\",{\"1\":{\"584\":1}}],[\"可以实现由圆变为正方形的过渡动画\",{\"1\":{\"342\":1}}],[\"可以实现此方法\",{\"1\":{\"307\":1}}],[\"可以实现clean\",{\"1\":{\"126\":1}}],[\"可以实现\",{\"1\":{\"124\":1}}],[\"可以不直接和\",{\"1\":{\"123\":1}}],[\"可以比较专注于\",{\"1\":{\"123\":1}}],[\"可以根据需要实现\",{\"1\":{\"333\":1}}],[\"可以根据需求增减\",{\"1\":{\"116\":1}}],[\"可以根据项目规模大小递进选择\",{\"1\":{\"121\":1}}],[\"可以发现\",{\"1\":{\"101\":1}}],[\"可以通过umask查看umask\",{\"1\":{\"690\":1}}],[\"可以通过writeobject\",{\"1\":{\"585\":1}}],[\"可以通过\",{\"1\":{\"334\":1}}],[\"可以通过try\",{\"1\":{\"294\":1}}],[\"可以通过对该方法就行包装\",{\"1\":{\"282\":1}}],[\"可以通过动态更改其包含的\",{\"1\":{\"282\":1}}],[\"可以通过屏幕对角线的像素数\",{\"1\":{\"100\":1}}],[\"可以通过context\",{\"1\":{\"6\":1}}],[\"可以注意到\",{\"1\":{\"282\":1}}],[\"可以注意到在客户端通过messenger\",{\"1\":{\"83\":1}}],[\"可以注意到一个细节\",{\"1\":{\"63\":1}}],[\"可以往\",{\"1\":{\"71\":1}}],[\"可以在那些\",{\"1\":{\"769\":1}}],[\"可以在创建\",{\"1\":{\"740\":1}}],[\"可以在打开的页面预览后做决定\",{\"1\":{\"719\":1}}],[\"可以在加入其它操作\",{\"1\":{\"619\":1}}],[\"可以在加载类的时候做一些特殊的事情\",{\"1\":{\"487\":1}}],[\"可以在类和方法中\",{\"1\":{\"536\":1}}],[\"可以在\",{\"1\":{\"475\":1}}],[\"可以在最开始使用\",{\"1\":{\"333\":1}}],[\"可以在runapp方法中替换这个默认的错误界面\",{\"1\":{\"295\":1}}],[\"可以在res\",{\"1\":{\"6\":1}}],[\"可以在其外部包裹一层\",{\"1\":{\"282\":1}}],[\"可以在这里预览\",{\"1\":{\"360\":1}}],[\"可以在这里获取宽高\",{\"1\":{\"160\":1}}],[\"可以在这个布局里面\",{\"1\":{\"110\":1}}],[\"可以在下面的两个网站在线体验贝塞尔曲线\",{\"1\":{\"142\":1}}],[\"可以在客户端调用服务所实现的方法\",{\"1\":{\"138\":1}}],[\"可以在客户端死亡的时候自动注销掉对应的\",{\"1\":{\"63\":1}}],[\"可以在java文件中获取到\",{\"1\":{\"105\":1}}],[\"可以在服务的\",{\"1\":{\"66\":1}}],[\"可以将前者的标准输出当做后者的输入\",{\"1\":{\"701\":1}}],[\"可以将collect中执行的代码放到oneach中\",{\"1\":{\"652\":1}}],[\"可以将各种集合与序列转换为流\",{\"1\":{\"629\":1}}],[\"可以将其传给\",{\"1\":{\"311\":1}}],[\"可以将几乎所有的和dagger\",{\"1\":{\"209\":1}}],[\"可以将一个livedata经过处理转化为另外一个livedata\",{\"1\":{\"187\":1}}],[\"可以将一些重要的业务抽象出来\",{\"1\":{\"126\":1}}],[\"可以将\",{\"1\":{\"57\":1,\"405\":1,\"622\":1,\"631\":1,\"769\":1}}],[\"可以将获取到的图片缓存到\",{\"1\":{\"6\":1}}],[\"可以是正则表达式\",{\"1\":{\"702\":1}}],[\"可以是以下几种\",{\"1\":{\"472\":1}}],[\"可以是任意你喜欢的名字\",{\"1\":{\"204\":1}}],[\"可以是任意需要的大小\",{\"1\":{\"158\":1}}],[\"可以是这个值以内的任意大小\",{\"1\":{\"158\":1}}],[\"可以是\",{\"1\":{\"36\":1,\"122\":3}}],[\"可以展示进度\",{\"1\":{\"30\":1}}],[\"可以处理点击事件\",{\"1\":{\"26\":1}}],[\"可以用$key\",{\"1\":{\"697\":1}}],[\"可以用于确定流收集是正常完成\",{\"1\":{\"658\":1}}],[\"可以用buffer\",{\"1\":{\"629\":1}}],[\"可以用如下命令\",{\"1\":{\"517\":1}}],[\"可以用try\",{\"1\":{\"475\":1}}],[\"可以用this\",{\"1\":{\"24\":1}}],[\"可以用\",{\"1\":{\"466\":1,\"726\":1}}],[\"可以用来定义用户从不同的界面切换\",{\"1\":{\"783\":1}}],[\"可以用来判断文本布局方向\",{\"1\":{\"424\":1}}],[\"可以用来打开service\",{\"1\":{\"15\":1}}],[\"可以查询可能会调用的\",{\"1\":{\"6\":1}}],[\"可以继承fileprovider类并修改下文中name字段\",{\"1\":{\"6\":1}}],[\"寻找可以处理点击事件的子\",{\"1\":{\"26\":1}}],[\"寻找一个可以处理点击事件的子\",{\"1\":{\"26\":1}}],[\"判断优化的条件是否满足\",{\"1\":{\"768\":1}}],[\"判断周日期的标准与iso\",{\"1\":{\"575\":1}}],[\"判断as是否为null\",{\"1\":{\"547\":1}}],[\"判断为\",{\"1\":{\"545\":2}}],[\"判断\",{\"1\":{\"304\":1,\"737\":1}}],[\"判断有需要时调用state\",{\"1\":{\"270\":1}}],[\"判断是否画出导航title\",{\"1\":{\"153\":1}}],[\"判断是否要开始根据\",{\"1\":{\"112\":1}}],[\"判断是否需要拦截\",{\"1\":{\"26\":1}}],[\"判断要拦截该事件\",{\"1\":{\"26\":1}}],[\"进制文本转为二进制\",{\"1\":{\"557\":1}}],[\"进制\",{\"1\":{\"557\":1}}],[\"进而可以操作类的私有变量\",{\"1\":{\"554\":1}}],[\"进而决定了\",{\"1\":{\"158\":1}}],[\"进阶使用\",{\"0\":{\"342\":1,\"443\":1}}],[\"进入之后\",{\"1\":{\"813\":1}}],[\"进入仓库主页\",{\"1\":{\"810\":1}}],[\"进入存放\",{\"1\":{\"806\":1}}],[\"进入和推出的交互逻辑\",{\"1\":{\"783\":1}}],[\"进入要所要上传文件的目录\",{\"1\":{\"672\":1}}],[\"进入android\",{\"1\":{\"671\":1}}],[\"进入\",{\"1\":{\"140\":1,\"670\":1,\"680\":1,\"768\":1,\"810\":1}}],[\"进入到源码看一下\",{\"1\":{\"83\":1}}],[\"进程孵化的系统进程\",{\"1\":{\"140\":1}}],[\"进程孵化的第一个\",{\"1\":{\"140\":1}}],[\"进程孵化出用户守护进程\",{\"1\":{\"140\":1}}],[\"进程的父进程\",{\"1\":{\"140\":1}}],[\"进程创建\",{\"1\":{\"140\":1}}],[\"进程间通信之管道\",{\"1\":{\"137\":1}}],[\"进程\",{\"1\":{\"137\":3,\"140\":14,\"454\":1}}],[\"进程对共享对象的写操作对于其他也使用到该共享对象的进程是可见的\",{\"1\":{\"136\":1}}],[\"进程是资源分配的基本单位\",{\"1\":{\"135\":1}}],[\"进程时他们也被销毁后\",{\"1\":{\"126\":1}}],[\"进一步封装\",{\"1\":{\"436\":1}}],[\"进一步演化出了\",{\"1\":{\"125\":1}}],[\"进一步加工处理\",{\"1\":{\"6\":1}}],[\"进化出\",{\"1\":{\"124\":1}}],[\"进行右旋\",{\"1\":{\"904\":1}}],[\"进行数据绑定\",{\"1\":{\"757\":1}}],[\"进行初始化\",{\"1\":{\"753\":1}}],[\"进行实例控制\",{\"1\":{\"583\":1}}],[\"进行解密\",{\"1\":{\"557\":1}}],[\"进行比较\",{\"1\":{\"534\":1}}],[\"进行类加载\",{\"1\":{\"497\":1}}],[\"进行两次\",{\"1\":{\"445\":1}}],[\"进行\",{\"1\":{\"439\":1,\"781\":1}}],[\"进行通信\",{\"1\":{\"397\":1}}],[\"进行消息中转\",{\"1\":{\"249\":1}}],[\"进行文件操作\",{\"1\":{\"249\":1}}],[\"进行异步通信\",{\"1\":{\"243\":1}}],[\"进行跨进程通信\",{\"1\":{\"138\":1}}],[\"进行相应处理\",{\"1\":{\"112\":1}}],[\"进行想要实现的变化\",{\"1\":{\"112\":1}}],[\"进行更新\",{\"1\":{\"26\":1}}],[\"遍历等操作\",{\"1\":{\"857\":1}}],[\"遍历图中每个顶点\",{\"1\":{\"850\":1}}],[\"遍历图\",{\"1\":{\"850\":1}}],[\"遍历树指安装一定的顺序访问数的每个节点\",{\"1\":{\"834\":1}}],[\"遍历树查找是否存在与key一致的node\",{\"1\":{\"502\":1}}],[\"遍历数组中对应的链表找到空位并保存\",{\"1\":{\"827\":1}}],[\"遍历找到对应的node并删除\",{\"1\":{\"503\":1}}],[\"遍历链表查找是否存在与key一致的node\",{\"1\":{\"502\":1}}],[\"遍历了所有的children将其插入到\",{\"1\":{\"265\":1}}],[\"遍历子\",{\"1\":{\"26\":1}}],[\"遍历\",{\"0\":{\"834\":1},\"1\":{\"26\":1,\"303\":1,\"534\":1,\"636\":1,\"737\":1}}],[\"后的树\",{\"1\":{\"904\":1}}],[\"后缀表达式源码\",{\"1\":{\"891\":1}}],[\"后缀表达式\",{\"1\":{\"890\":4}}],[\"后继节点\",{\"1\":{\"836\":1}}],[\"后期计划\",{\"0\":{\"721\":1}}],[\"后期也可以改为post\",{\"1\":{\"718\":1}}],[\"后期稳定\",{\"1\":{\"13\":1}}],[\"后右子树\",{\"1\":{\"665\":1}}],[\"后序遍历\",{\"1\":{\"665\":1,\"834\":1}}],[\"后局部变量不要求用\",{\"0\":{\"511\":1}}],[\"后文详述\",{\"1\":{\"492\":1}}],[\"后文附有本方案的\",{\"1\":{\"195\":1}}],[\"后面是否需要再走\",{\"1\":{\"766\":1}}],[\"后面的就不会执行\",{\"1\":{\"700\":1}}],[\"后面紧跟要操作的文件\",{\"1\":{\"695\":1}}],[\"后面\",{\"1\":{\"534\":1}}],[\"后面再详细分析\",{\"1\":{\"395\":1}}],[\"后面会再讲到\",{\"1\":{\"26\":1}}],[\"后这两个圆相当于一个整体\",{\"1\":{\"334\":1}}],[\"后续排序的特点\",{\"1\":{\"666\":1}}],[\"后续排序来逆向生成二叉树\",{\"1\":{\"666\":1}}],[\"后续遍历\",{\"1\":{\"665\":1}}],[\"后续操作都是在一个新的\",{\"1\":{\"334\":1}}],[\"后续所有的\",{\"1\":{\"257\":1}}],[\"后续的滑动事件才能被响应\",{\"1\":{\"112\":1}}],[\"后\",{\"1\":{\"238\":1,\"247\":1,\"547\":1,\"557\":1}}],[\"后者关于数组大小的计算中width\",{\"1\":{\"516\":1}}],[\"后者会将\",{\"1\":{\"405\":1}}],[\"后者创建的\",{\"1\":{\"405\":1}}],[\"后者又创建了\",{\"1\":{\"404\":1}}],[\"后者又会调用powerimageloader\",{\"1\":{\"399\":1}}],[\"后者持有加载的图片的\",{\"1\":{\"398\":1}}],[\"后者提供了get\",{\"1\":{\"383\":1}}],[\"后者则创建了renderimage并最终将\",{\"1\":{\"372\":1}}],[\"后者则使用生成的\",{\"1\":{\"307\":1}}],[\"后者是解码的图片数据的不透明句柄\",{\"1\":{\"371\":1}}],[\"后者实际是黑色透明\",{\"1\":{\"358\":1}}],[\"后者被\",{\"1\":{\"334\":1}}],[\"后者的\",{\"1\":{\"235\":1}}],[\"后者在名字为\",{\"1\":{\"36\":1}}],[\"后台线程\",{\"1\":{\"193\":1}}],[\"后必须显示的启动服务\",{\"1\":{\"62\":1}}],[\"且节点总数是\",{\"1\":{\"862\":1}}],[\"且队列不为空\",{\"1\":{\"848\":1}}],[\"且当所有的子协程被终止的时候\",{\"1\":{\"640\":1}}],[\"且它被用来提供一个稳定的协程层次结构来进行结构化并发而无需依赖\",{\"1\":{\"640\":1}}],[\"且后面没有set\",{\"1\":{\"528\":1}}],[\"且\",{\"1\":{\"417\":1,\"817\":1}}],[\"且向下滑动时这里\",{\"1\":{\"412\":1}}],[\"且只能被调用一次\",{\"1\":{\"190\":1}}],[\"且该子\",{\"1\":{\"110\":1}}],[\"且侵入小\",{\"1\":{\"101\":1}}],[\"且disallowintercept为\",{\"1\":{\"26\":1}}],[\"且最小间隔\",{\"1\":{\"10\":1}}],[\"983\",{\"1\":{\"904\":2}}],[\"9e8922486154\",{\"1\":{\"667\":1}}],[\"952\",{\"1\":{\"631\":1}}],[\"9344l\",{\"1\":{\"587\":1}}],[\"97821\",{\"1\":{\"675\":1}}],[\"978\",{\"1\":{\"578\":1}}],[\"96\",{\"1\":{\"578\":1}}],[\"9d729c9c94c4\",{\"1\":{\"516\":1}}],[\"92397\",{\"1\":{\"400\":1}}],[\"94e0d\",{\"1\":{\"251\":2,\"259\":1}}],[\"99\",{\"1\":{\"100\":1,\"101\":1}}],[\"9bfed6e127cc\",{\"1\":{\"77\":1}}],[\"9159904\",{\"1\":{\"77\":1}}],[\"9\",{\"1\":{\"26\":1,\"195\":1,\"247\":1,\"494\":1,\"519\":1,\"827\":1,\"857\":1,\"890\":3}}],[\"拦截异常\",{\"1\":{\"634\":1}}],[\"拦截该事件\",{\"1\":{\"26\":1}}],[\"拦截事件\",{\"1\":{\"26\":1}}],[\"会很耗时\",{\"1\":{\"919\":1}}],[\"会出现找不到没有后继点的顶点\",{\"1\":{\"850\":1}}],[\"会显示用户在植物目录中选择并种植的植物信息\",{\"1\":{\"782\":1}}],[\"会显示为灰色布局\",{\"1\":{\"295\":1}}],[\"会对应创建一个新的系统线程\",{\"1\":{\"760\":1}}],[\"会返回\",{\"1\":{\"748\":1}}],[\"会删除file\",{\"1\":{\"694\":1}}],[\"会丢弃来不及处理的中间值\",{\"1\":{\"659\":1}}],[\"会取消掉所有子协程\",{\"1\":{\"641\":1}}],[\"会阻塞调用线程\",{\"1\":{\"629\":1}}],[\"会打印一个\",{\"1\":{\"636\":1}}],[\"会打印\",{\"1\":{\"625\":1}}],[\"会运行一个新的协程线程\",{\"1\":{\"623\":1}}],[\"会有一些特殊方法\",{\"1\":{\"622\":1}}],[\"会有一定的浪费\",{\"1\":{\"472\":1}}],[\"会优先尝试使用轻量级锁\",{\"1\":{\"609\":1}}],[\"会自动取出不必要的锁\",{\"1\":{\"609\":1}}],[\"会自动向上到其父类中查找\",{\"1\":{\"565\":1}}],[\"会消耗大量的时间\",{\"1\":{\"603\":1}}],[\"会进入该界面显示植物详细介绍\",{\"1\":{\"782\":1}}],[\"会进入等待池\",{\"1\":{\"561\":1}}],[\"会进入锁池和其他类似的线程一起竞争该对象的锁\",{\"1\":{\"561\":1}}],[\"会导致部分数据重复\",{\"1\":{\"732\":1}}],[\"会导致严重的问题\",{\"1\":{\"506\":1}}],[\"会导致渐变为黑色\",{\"1\":{\"358\":1}}],[\"会产生两个对象\",{\"1\":{\"461\":1}}],[\"会一次性创建所有\",{\"1\":{\"446\":1}}],[\"会强制其\",{\"1\":{\"445\":1}}],[\"会只创建屏幕可见部分\",{\"1\":{\"442\":1}}],[\"会得到最大的主轴尺寸\",{\"1\":{\"439\":1}}],[\"会比\",{\"1\":{\"418\":1}}],[\"会比较明显\",{\"1\":{\"376\":1}}],[\"会发出\",{\"1\":{\"413\":1}}],[\"会应用\",{\"1\":{\"413\":1}}],[\"会等于\",{\"1\":{\"412\":1}}],[\"会使用此来操作\",{\"1\":{\"411\":1}}],[\"会使用\",{\"1\":{\"393\":1,\"772\":1}}],[\"会根据不同情况采取以下一系列算法组合进行内存回收\",{\"1\":{\"469\":1}}],[\"会根据\",{\"1\":{\"393\":1}}],[\"会按照实际情况更新\",{\"1\":{\"415\":1}}],[\"会按照传入的\",{\"1\":{\"377\":1}}],[\"会按照他们的\",{\"1\":{\"276\":1}}],[\"会依次展示出\",{\"1\":{\"427\":1}}],[\"会依次尝试从\",{\"1\":{\"376\":1}}],[\"会依次安排背景\",{\"1\":{\"335\":1}}],[\"会尝试应用到\",{\"1\":{\"419\":1}}],[\"会尝试使用平台\",{\"1\":{\"365\":1}}],[\"会尝试重新调用\",{\"1\":{\"36\":1}}],[\"会展示出越界的效果\",{\"1\":{\"413\":1}}],[\"会展示\",{\"1\":{\"344\":1}}],[\"会从制定的\",{\"1\":{\"762\":1}}],[\"会从\",{\"1\":{\"761\":1}}],[\"会从网络下载\",{\"1\":{\"376\":1}}],[\"会从网络\",{\"1\":{\"365\":1}}],[\"会从小变大\",{\"1\":{\"343\":1}}],[\"会从链表尾部开始读取\",{\"1\":{\"232\":1}}],[\"会和之前的\",{\"1\":{\"334\":1}}],[\"会要求实现其所有方法属性\",{\"1\":{\"333\":1}}],[\"会\",{\"1\":{\"329\":1,\"457\":1,\"458\":1,\"460\":1,\"461\":2}}],[\"会监听传入的\",{\"1\":{\"335\":1}}],[\"会监听\",{\"1\":{\"310\":1,\"423\":1}}],[\"会执行\",{\"1\":{\"367\":1,\"418\":2}}],[\"会执行动画\",{\"1\":{\"302\":1}}],[\"会执行下面的方法\",{\"1\":{\"247\":1}}],[\"会被取消\",{\"1\":{\"630\":1}}],[\"会被改为切换到的协程所使用的的值\",{\"1\":{\"625\":1}}],[\"会被分为\",{\"1\":{\"602\":1}}],[\"会被压缩为\",{\"1\":{\"473\":1}}],[\"会被\",{\"1\":{\"405\":1}}],[\"会被发送到这里处理\",{\"1\":{\"297\":1}}],[\"会被回调的方法\",{\"1\":{\"247\":1}}],[\"会交由当前代码所在的zone处理\",{\"1\":{\"292\":1}}],[\"会加入\",{\"1\":{\"273\":1}}],[\"会判断以下几种情况\",{\"1\":{\"270\":1}}],[\"会创建renderimage并在renderimage\",{\"1\":{\"366\":1}}],[\"会创建\",{\"1\":{\"256\":1,\"334\":1,\"405\":1}}],[\"会创建一个\",{\"1\":{\"228\":1}}],[\"会是一个新的线程\",{\"1\":{\"247\":1}}],[\"会压入消息栈中\",{\"1\":{\"247\":1}}],[\"会先遍历完本层所有的顶点\",{\"1\":{\"848\":1}}],[\"会先顺着一个邻接点一直走到头\",{\"1\":{\"847\":1}}],[\"会先往深处遍历完一条路径\",{\"1\":{\"847\":1}}],[\"会先删除f1\",{\"1\":{\"684\":1}}],[\"会先计算key的hash值\",{\"1\":{\"500\":1}}],[\"会先尝试下滑\",{\"1\":{\"419\":1}}],[\"会先向上滑动\",{\"1\":{\"403\":1,\"418\":1}}],[\"会先通过powerimageloader\",{\"1\":{\"398\":1}}],[\"会先通过\",{\"1\":{\"247\":1}}],[\"会先执行rawreceiveport原本的\",{\"1\":{\"229\":1}}],[\"会切换出当前\",{\"1\":{\"247\":1}}],[\"会分别使用messagehandler执行或者在名为\",{\"1\":{\"238\":1}}],[\"会调用其exit\",{\"1\":{\"560\":1}}],[\"会调用此方法\",{\"1\":{\"398\":1}}],[\"会调用paintimage方法绘制\",{\"1\":{\"372\":1}}],[\"会调用inheritedelement的update\",{\"1\":{\"271\":1}}],[\"会调用对应的element的markneedsbuild\",{\"1\":{\"270\":1}}],[\"会调用下面的方法\",{\"1\":{\"247\":1}}],[\"会调用\",{\"1\":{\"243\":1,\"244\":1,\"305\":1,\"497\":1}}],[\"会调用eventhandlerimplementation\",{\"1\":{\"237\":1}}],[\"会调用这个方法\",{\"1\":{\"123\":1}}],[\"会将这些锁合并为一个大锁\",{\"1\":{\"609\":1}}],[\"会将\",{\"1\":{\"404\":1}}],[\"会将自己注册到\",{\"1\":{\"273\":1}}],[\"会将其加入到\",{\"1\":{\"237\":1}}],[\"会将此值转换为相应的实际像素数\",{\"1\":{\"100\":1}}],[\"会触发在\",{\"1\":{\"413\":1}}],[\"会触发\",{\"1\":{\"228\":1,\"325\":1}}],[\"会通过指令重排来优化代码\",{\"1\":{\"602\":1}}],[\"会通过\",{\"1\":{\"332\":1,\"367\":1}}],[\"会通过context\",{\"1\":{\"138\":1}}],[\"会通过一系列条件判断是由\",{\"1\":{\"26\":1}}],[\"会持有\",{\"1\":{\"123\":1}}],[\"会覆盖掉低值的\",{\"1\":{\"76\":1}}],[\"会向左\",{\"1\":{\"75\":1}}],[\"会主动移除其注册的\",{\"1\":{\"63\":1}}],[\"会绑定宿主\",{\"1\":{\"42\":1}}],[\"会重建服务并传递给最后一个\",{\"1\":{\"36\":1}}],[\"会在切换协程的时候失效\",{\"1\":{\"625\":1}}],[\"会在反序列化时用到并返回这里提供的对象\",{\"1\":{\"583\":1}}],[\"会在这里被处理\",{\"1\":{\"296\":1}}],[\"会在这里回调\",{\"1\":{\"193\":1}}],[\"会在同步方法之后立即执行\",{\"1\":{\"229\":1}}],[\"会在同步方法执行完毕之后立即被执行\",{\"1\":{\"223\":1}}],[\"会在普通的\",{\"1\":{\"221\":1}}],[\"会在app\",{\"1\":{\"70\":1}}],[\"会在设置点击事件时被设置为\",{\"1\":{\"27\":1}}],[\"会在\",{\"1\":{\"27\":1,\"243\":1,\"247\":1,\"412\":1}}],[\"会回调该方法\",{\"1\":{\"26\":1}}],[\"是右节点\",{\"1\":{\"904\":1}}],[\"是左节点\",{\"1\":{\"904\":1}}],[\"是和栈相对的一种抽象数据类型\",{\"1\":{\"888\":1}}],[\"是具有图\",{\"1\":{\"849\":1}}],[\"是具体执行读取文件的地方\",{\"1\":{\"243\":1}}],[\"是小于数组容量的质数\",{\"1\":{\"827\":1}}],[\"是第一生产力\",{\"1\":{\"791\":1}}],[\"是用户和内容交互的桥梁\",{\"1\":{\"696\":1}}],[\"是用来区分\",{\"1\":{\"744\":1}}],[\"是用来创建\",{\"1\":{\"424\":1}}],[\"是用来管理\",{\"1\":{\"253\":1}}],[\"是用来标记类在其范围内只能被实例化一次\",{\"1\":{\"205\":1}}],[\"是本地仓库\",{\"1\":{\"673\":1}}],[\"是生成的\",{\"1\":{\"670\":1}}],[\"是函数具体的行为\",{\"1\":{\"663\":1}}],[\"是什么类型的\",{\"1\":{\"621\":1}}],[\"是的话就直接写入引用\",{\"1\":{\"587\":1}}],[\"是的话向\",{\"1\":{\"416\":1}}],[\"是获取该类及其实现的接口中所有的\",{\"1\":{\"569\":1}}],[\"是获取图片资源的基类\",{\"1\":{\"374\":1}}],[\"是描述\",{\"1\":{\"564\":1}}],[\"是要加密的内容\",{\"1\":{\"557\":1}}],[\"是要依赖的子\",{\"1\":{\"112\":1}}],[\"是int类型而非被自动装箱后的integer对象\",{\"1\":{\"523\":1}}],[\"是类构造器方法\",{\"1\":{\"497\":1}}],[\"是线程安全的\",{\"1\":{\"497\":1}}],[\"是将类或者接口组合到\",{\"1\":{\"493\":1}}],[\"是将标准输入输出连接起来的进程\",{\"1\":{\"137\":1}}],[\"是内存溢出\",{\"1\":{\"464\":1}}],[\"是内存泄漏\",{\"1\":{\"464\":1}}],[\"是内部比实际要大\",{\"1\":{\"438\":1}}],[\"是为\",{\"1\":{\"460\":1}}],[\"是为了将\",{\"1\":{\"412\":1}}],[\"是根据\",{\"1\":{\"440\":1}}],[\"是根节点\",{\"1\":{\"256\":1}}],[\"是取值主轴方向的\",{\"1\":{\"439\":1}}],[\"是来自于\",{\"1\":{\"437\":2}}],[\"是依赖于封装\",{\"1\":{\"436\":1}}],[\"是遵守\",{\"1\":{\"433\":1}}],[\"是真正显示在屏幕上的\",{\"1\":{\"422\":1}}],[\"是真正可以应用的\",{\"1\":{\"412\":1}}],[\"是未执行的\",{\"1\":{\"418\":1}}],[\"是剩下的\",{\"1\":{\"418\":1}}],[\"是负值\",{\"1\":{\"418\":1}}],[\"是直接指定的\",{\"1\":{\"417\":1}}],[\"是可以应用到\",{\"1\":{\"412\":1}}],[\"是可以使用的对象\",{\"1\":{\"199\":1}}],[\"是因为\",{\"1\":{\"412\":1}}],[\"是继承自\",{\"1\":{\"405\":1}}],[\"是给\",{\"1\":{\"403\":1}}],[\"是power\",{\"1\":{\"394\":1}}],[\"是ffi还是texture\",{\"1\":{\"390\":1}}],[\"是file\",{\"1\":{\"243\":1}}],[\"是个不错的选择\",{\"1\":{\"385\":1}}],[\"是个抽象类\",{\"1\":{\"383\":1}}],[\"是图片实际大小\",{\"1\":{\"376\":1}}],[\"是对\",{\"1\":{\"371\":1}}],[\"是原始的\",{\"1\":{\"370\":1}}],[\"是ui\",{\"1\":{\"370\":1}}],[\"是由可以有多个边的顶点组成的结构\",{\"1\":{\"841\":1}}],[\"是由协程\",{\"1\":{\"645\":1}}],[\"是由圆形变成正方形的过渡动画\",{\"1\":{\"342\":1}}],[\"是由内核创建的第一个进程\",{\"1\":{\"140\":1}}],[\"是animationcontroller通过\",{\"1\":{\"336\":1}}],[\"是android\",{\"1\":{\"140\":1}}],[\"是单线程的\",{\"1\":{\"285\":1}}],[\"是如何实现这一点的呢\",{\"1\":{\"709\":1}}],[\"是如何找到并插入到\",{\"1\":{\"265\":1}}],[\"是如何被加入\",{\"1\":{\"264\":1}}],[\"是在dart\",{\"1\":{\"752\":1}}],[\"是在创建threadlocal的时候\",{\"1\":{\"529\":1}}],[\"是在jvm\",{\"1\":{\"497\":1}}],[\"是在new\",{\"1\":{\"497\":1}}],[\"是在运行时常量池中动态确定符号引用的具体值的过程\",{\"1\":{\"496\":1}}],[\"是在传入的begin\",{\"1\":{\"358\":1}}],[\"是在\",{\"1\":{\"262\":1,\"409\":1}}],[\"是renderpositionedbox\",{\"1\":{\"259\":1}}],[\"是singlechildrenderobjectelement\",{\"1\":{\"259\":1}}],[\"是创建\",{\"1\":{\"256\":1}}],[\"是怎么将我们编写的\",{\"1\":{\"251\":1}}],[\"是做什么的\",{\"1\":{\"244\":1}}],[\"是以不定长度的字元传送资料\",{\"1\":{\"243\":1}}],[\"是以固定大小长度来传送转移资料\",{\"1\":{\"243\":1}}],[\"是以正常远程调用形式将其作为来自\",{\"1\":{\"83\":1}}],[\"是抽象类\",{\"1\":{\"234\":1}}],[\"是延迟完成的\",{\"1\":{\"232\":1}}],[\"是封装后的\",{\"1\":{\"183\":1}}],[\"是钩子的意思\",{\"1\":{\"176\":1}}],[\"是父容器的\",{\"1\":{\"158\":1}}],[\"是每一个字母所在单元的高度\",{\"1\":{\"153\":1}}],[\"是所有通用排序中最快的\",{\"1\":{\"918\":1}}],[\"是所有\",{\"1\":{\"140\":1}}],[\"是所有用户进程鼻祖\",{\"1\":{\"140\":1}}],[\"是所有内核进程的鼻祖\",{\"1\":{\"140\":1}}],[\"是启动\",{\"1\":{\"140\":1}}],[\"是一组具有相同类型元素的集合\",{\"1\":{\"879\":1}}],[\"是一致的\",{\"1\":{\"768\":1}}],[\"是一种抽象数据类型\",{\"1\":{\"887\":1}}],[\"是一种特殊的队列\",{\"1\":{\"873\":1}}],[\"是一种双向机制\",{\"1\":{\"641\":1}}],[\"是一种renderobjectwidget\",{\"1\":{\"265\":1}}],[\"是一种架构思想\",{\"1\":{\"126\":1}}],[\"是一串可以有不同类型的消息块的链表\",{\"1\":{\"137\":1}}],[\"是一个二叉树的节点\",{\"1\":{\"833\":1}}],[\"是一个接口或者抽象类\",{\"1\":{\"786\":1}}],[\"是一个普通类\",{\"1\":{\"786\":1}}],[\"是一个继承自roomdatabase的抽象类\",{\"1\":{\"786\":1}}],[\"是一个协程\",{\"1\":{\"645\":1}}],[\"是一个标记注解\",{\"1\":{\"565\":2}}],[\"是一个同步方法\",{\"1\":{\"560\":1}}],[\"是一个抽象类\",{\"1\":{\"422\":1}}],[\"是一个可以在内部嵌套其他\",{\"1\":{\"402\":1}}],[\"是一个利用原生库加载\",{\"1\":{\"400\":1}}],[\"是一个leafrenderobjectwidget\",{\"1\":{\"366\":1}}],[\"是一个数据类\",{\"1\":{\"348\":1}}],[\"是一个新的\",{\"1\":{\"308\":1}}],[\"是一个renderobjectelement\",{\"1\":{\"259\":1}}],[\"是一个中转站\",{\"1\":{\"244\":1}}],[\"是一个对象\",{\"1\":{\"199\":1}}],[\"是一个类变量\",{\"1\":{\"193\":1}}],[\"是一个实现了材料设计的默认垂直布局的\",{\"1\":{\"110\":1}}],[\"是一个虚拟像素单位\",{\"1\":{\"100\":1}}],[\"是一个状态栏的通知\",{\"1\":{\"43\":1}}],[\"是一个\",{\"1\":{\"24\":1,\"26\":1,\"158\":1,\"346\":1,\"349\":1}}],[\"是平台无关的抽象逻辑\",{\"1\":{\"126\":1}}],[\"是否需要将右节点的左子节点指向当前点的左子节点\",{\"1\":{\"836\":1}}],[\"是否spawn\",{\"1\":{\"759\":1}}],[\"是否\",{\"1\":{\"759\":1}}],[\"是否是完整\",{\"1\":{\"737\":1}}],[\"是否成功\",{\"1\":{\"670\":1}}],[\"是否扩容的阈值\",{\"1\":{\"500\":1}}],[\"是否被改动过来\",{\"1\":{\"500\":1}}],[\"是否可见\",{\"1\":{\"442\":1}}],[\"是否有必要执行\",{\"1\":{\"475\":1}}],[\"是否有\",{\"1\":{\"424\":1}}],[\"是否悬浮\",{\"1\":{\"416\":1}}],[\"是否同步手势\",{\"1\":{\"346\":1}}],[\"是否同时处理\",{\"1\":{\"246\":1}}],[\"是否会在下一帧变化\",{\"1\":{\"331\":1}}],[\"是否不等于\",{\"1\":{\"304\":1}}],[\"是否等于\",{\"1\":{\"238\":1}}],[\"是否竖屏\",{\"1\":{\"196\":1}}],[\"是否已注册的验证\",{\"1\":{\"179\":1}}],[\"是否依附到\",{\"1\":{\"117\":1}}],[\"是否强制使用\",{\"1\":{\"92\":1}}],[\"是否调用\",{\"1\":{\"86\":1}}],[\"是否能被其他应用隐式调用\",{\"1\":{\"36\":1}}],[\"是其他类型则使用arraymap\",{\"1\":{\"85\":1,\"523\":1}}],[\"是基本类型\",{\"1\":{\"85\":1,\"523\":1}}],[\"是分别是\",{\"1\":{\"74\":1}}],[\"是两个不同的对象\",{\"1\":{\"63\":1}}],[\"是从\",{\"1\":{\"63\":1,\"342\":1,\"392\":1}}],[\"是确定的\",{\"1\":{\"33\":1}}],[\"是\",{\"1\":{\"25\":1,\"36\":1,\"62\":1,\"71\":1,\"74\":2,\"82\":1,\"101\":1,\"112\":1,\"122\":1,\"126\":2,\"138\":1,\"140\":2,\"159\":1,\"190\":1,\"193\":1,\"204\":1,\"223\":1,\"235\":1,\"237\":1,\"243\":1,\"244\":1,\"258\":1,\"259\":2,\"264\":2,\"278\":1,\"315\":1,\"340\":1,\"349\":1,\"358\":1,\"365\":1,\"374\":1,\"404\":1,\"405\":2,\"412\":1,\"413\":1,\"418\":2,\"420\":1,\"424\":3,\"427\":1,\"431\":1,\"438\":1,\"440\":1,\"587\":1,\"740\":2,\"762\":1,\"783\":1,\"813\":1}}],[\"点这里\",{\"1\":{\"838\":2,\"851\":2,\"864\":1,\"882\":1,\"929\":1}}],[\"点这里查看源码\",{\"1\":{\"829\":1,\"899\":1,\"906\":1}}],[\"点这里查看\",{\"1\":{\"735\":1}}],[\"点这里可以找到\",{\"1\":{\"154\":1}}],[\"点击确认开始赋予权限\",{\"1\":{\"173\":1}}],[\"点击事件以及语义等等\",{\"1\":{\"333\":1}}],[\"点击事件发生后\",{\"1\":{\"25\":1}}],[\"点击事件\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"289\":1},\"1\":{\"239\":1}}],[\"点\",{\"1\":{\"145\":1,\"759\":1}}],[\"点的贝塞尔曲线时\",{\"1\":{\"145\":1}}],[\"点的运动轨迹就是一个贝塞尔曲线\",{\"1\":{\"142\":1}}],[\"点时\",{\"1\":{\"142\":1}}],[\"点整开始\",{\"1\":{\"12\":1}}],[\"原始权限\",{\"1\":{\"690\":1}}],[\"原文信息及链接如下\",{\"1\":{\"675\":1}}],[\"原文链接\",{\"1\":{\"138\":1,\"528\":1}}],[\"原本的异常被父协程所处理\",{\"1\":{\"640\":1}}],[\"原子性\",{\"1\":{\"604\":1}}],[\"原创\",{\"1\":{\"598\":1}}],[\"原密码\",{\"1\":{\"584\":2}}],[\"原则分配\",{\"1\":{\"444\":1}}],[\"原有的\",{\"1\":{\"393\":1}}],[\"原理如下\",{\"1\":{\"913\":1}}],[\"原理和算法详细介绍\",{\"1\":{\"907\":1}}],[\"原理同插入边\",{\"1\":{\"845\":1}}],[\"原理参考这篇文章parcelable\",{\"1\":{\"595\":1}}],[\"原理\",{\"0\":{\"516\":1,\"591\":1,\"595\":1},\"1\":{\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"621\":1,\"625\":1}}],[\"原理做一简单分析\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"原理分析\",{\"0\":{\"341\":1,\"343\":1}}],[\"原理解析\",{\"1\":{\"6\":1,\"7\":1,\"232\":1,\"240\":2}}],[\"原生语法层\",{\"1\":{\"606\":1}}],[\"原生方法直接操作物理内存时导致物理内存不够\",{\"1\":{\"468\":1}}],[\"原生提供的\",{\"1\":{\"376\":1}}],[\"原生的解决方案\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"原生\",{\"1\":{\"284\":1,\"377\":1}}],[\"原因是运行时类型会被擦除\",{\"1\":{\"540\":1}}],[\"原因是\",{\"1\":{\"519\":1}}],[\"原因是默认的serializable由于不同\",{\"1\":{\"506\":1}}],[\"原因是上面说到的\",{\"1\":{\"273\":1}}],[\"原因\",{\"1\":{\"465\":1}}],[\"原因如下所示\",{\"1\":{\"24\":1}}],[\"原\",{\"1\":{\"162\":1}}],[\"和队列定义一致\",{\"1\":{\"889\":1}}],[\"和两个叶子节点中最大的比较\",{\"1\":{\"859\":1}}],[\"和插入相比\",{\"1\":{\"859\":1}}],[\"和after\",{\"1\":{\"794\":1}}],[\"和他相关的有下面几个关键类\",{\"1\":{\"787\":1}}],[\"和他们的子类\",{\"1\":{\"314\":1}}],[\"和数据\",{\"1\":{\"784\":1}}],[\"和布局文件一样\",{\"1\":{\"783\":1}}],[\"和方法对应的\",{\"1\":{\"768\":1}}],[\"和已有的缓存类对应\",{\"1\":{\"767\":1}}],[\"和一个线程池\",{\"1\":{\"762\":1}}],[\"和全局变量\",{\"1\":{\"762\":1}}],[\"和isolate\",{\"1\":{\"757\":1}}],[\"和init\",{\"1\":{\"497\":1}}],[\"和queue\",{\"1\":{\"745\":1,\"761\":3}}],[\"和当前\",{\"1\":{\"742\":1,\"817\":1}}],[\"和当前的\",{\"1\":{\"35\":1,\"248\":1}}],[\"和false\",{\"1\":{\"723\":1}}],[\"和future<t>\",{\"1\":{\"374\":1}}],[\"和对应的\",{\"1\":{\"762\":1}}],[\"和对应名字发送到\",{\"1\":{\"138\":1}}],[\"和对应名字\",{\"1\":{\"138\":1}}],[\"和对请求结果的处理等的回调\",{\"1\":{\"711\":1}}],[\"和追加输出\",{\"1\":{\"701\":1}}],[\"和>>\",{\"1\":{\"701\":1}}],[\"和whoami输出当前用户名\",{\"1\":{\"691\":1}}],[\"和协程所在的线程没有关系\",{\"1\":{\"625\":1}}],[\"和objectinputstream的readfields\",{\"1\":{\"584\":1}}],[\"和getminimaldaysinfirstweek\",{\"1\":{\"575\":1}}],[\"和要赋予的类型\",{\"1\":{\"538\":1}}],[\"和hashmap类似\",{\"1\":{\"523\":1}}],[\"和hashmap相差无几\",{\"1\":{\"92\":1}}],[\"和构造方法是前期绑定的\",{\"1\":{\"490\":1}}],[\"和被\",{\"1\":{\"420\":1}}],[\"和使用\",{\"1\":{\"391\":1}}],[\"和load\",{\"1\":{\"374\":1}}],[\"和loop\",{\"1\":{\"50\":1}}],[\"和位置\",{\"1\":{\"340\":1}}],[\"和状态\",{\"1\":{\"327\":1}}],[\"和其他一些必须的信息即可\",{\"1\":{\"423\":1}}],[\"和其他\",{\"1\":{\"308\":1,\"438\":1}}],[\"和其他组件\",{\"1\":{\"126\":1}}],[\"和build\",{\"1\":{\"307\":1}}],[\"和上面的\",{\"1\":{\"300\":1,\"314\":1}}],[\"和本地操作系统或者应用\",{\"1\":{\"286\":1}}],[\"和romainguy\",{\"1\":{\"516\":1}}],[\"和routes\",{\"1\":{\"284\":1}}],[\"和readexternal\",{\"1\":{\"589\":1}}],[\"和read\",{\"1\":{\"243\":1}}],[\"和整个\",{\"1\":{\"273\":1}}],[\"和系统线程绑定\",{\"1\":{\"247\":1}}],[\"和新建的系统线程绑定\",{\"1\":{\"247\":1}}],[\"和设计稿对应物体大小\",{\"1\":{\"196\":1}}],[\"和主程序不在同一个进程为\",{\"1\":{\"189\":1}}],[\"和应用程序不再同一个进程当中\",{\"1\":{\"189\":1}}],[\"和switchmap\",{\"1\":{\"187\":1}}],[\"和startservice\",{\"1\":{\"35\":1}}],[\"和执行所需的\",{\"1\":{\"183\":1}}],[\"和proxyactivity\",{\"1\":{\"178\":1}}],[\"和父容器\",{\"1\":{\"158\":1}}],[\"和非系统\",{\"1\":{\"140\":1}}],[\"和这个接口绑定到一起\",{\"1\":{\"138\":1}}],[\"和实际的状态栏高度不一致\",{\"1\":{\"101\":1}}],[\"和messenger\",{\"1\":{\"83\":1}}],[\"和指定的接口绑定\",{\"1\":{\"71\":1}}],[\"和\",{\"0\":{\"76\":1,\"85\":1,\"203\":1,\"204\":1,\"205\":1,\"561\":1,\"580\":1,\"600\":1,\"670\":1,\"676\":1,\"799\":1},\"1\":{\"24\":1,\"26\":1,\"30\":1,\"39\":1,\"56\":1,\"71\":1,\"92\":1,\"106\":1,\"111\":1,\"112\":1,\"121\":1,\"122\":1,\"123\":5,\"124\":2,\"125\":4,\"126\":5,\"137\":1,\"138\":2,\"140\":1,\"158\":1,\"176\":1,\"179\":1,\"189\":1,\"193\":1,\"205\":1,\"206\":1,\"243\":2,\"247\":1,\"251\":1,\"254\":1,\"256\":1,\"266\":1,\"278\":2,\"280\":1,\"284\":1,\"286\":1,\"300\":1,\"301\":1,\"302\":4,\"305\":1,\"312\":2,\"316\":1,\"317\":3,\"327\":1,\"330\":1,\"332\":1,\"333\":1,\"334\":2,\"335\":1,\"341\":1,\"342\":1,\"343\":1,\"347\":1,\"348\":1,\"355\":5,\"358\":2,\"359\":2,\"374\":1,\"375\":1,\"382\":1,\"385\":2,\"388\":1,\"397\":4,\"398\":1,\"400\":1,\"403\":2,\"404\":8,\"405\":8,\"408\":1,\"409\":3,\"412\":8,\"415\":2,\"416\":1,\"417\":4,\"418\":3,\"419\":1,\"420\":2,\"423\":1,\"424\":2,\"431\":1,\"438\":1,\"439\":2,\"440\":1,\"441\":1,\"465\":1,\"484\":1,\"498\":1,\"508\":1,\"524\":1,\"538\":2,\"547\":2,\"562\":1,\"579\":1,\"580\":1,\"645\":1,\"675\":1,\"708\":1,\"723\":1,\"726\":1,\"740\":2,\"763\":1,\"765\":2,\"768\":1,\"769\":1,\"802\":1,\"803\":2,\"844\":1,\"896\":2}}],[\"到叶节点或空子节点的每一条边上的黑色节点数量必须相同\",{\"1\":{\"902\":1}}],[\"到队尾\",{\"1\":{\"896\":1}}],[\"到各种门户网站的博客\",{\"1\":{\"798\":1}}],[\"到时候会一起分析一下\",{\"1\":{\"751\":1}}],[\"到时间后取消当日循环闹钟\",{\"1\":{\"21\":1}}],[\"到官网下载\",{\"1\":{\"677\":1}}],[\"到本地即可\",{\"1\":{\"813\":1}}],[\"到本地仓库\",{\"1\":{\"672\":1}}],[\"到本文为止\",{\"1\":{\"336\":1}}],[\"到此注解目的达到\",{\"1\":{\"569\":1}}],[\"到此为止\",{\"1\":{\"440\":1}}],[\"到图片加载完成间隔比较短\",{\"1\":{\"376\":1}}],[\"到目前位置\",{\"1\":{\"405\":1}}],[\"到目前为止\",{\"1\":{\"202\":1,\"228\":1,\"264\":1,\"307\":1,\"373\":1,\"397\":1,\"440\":1}}],[\"到目标页面对应位置\",{\"1\":{\"353\":1}}],[\"到一起\",{\"1\":{\"203\":1}}],[\"到这里就顺利的在\",{\"1\":{\"671\":1}}],[\"到这里我们差不过分析了刚开始的\",{\"1\":{\"335\":1}}],[\"到这里我们发现\",{\"1\":{\"248\":1}}],[\"到这里跟\",{\"1\":{\"263\":1}}],[\"到这里\",{\"1\":{\"179\":1,\"196\":1,\"265\":1,\"424\":1,\"679\":1,\"680\":1,\"805\":1}}],[\"到文字中线的偏移量\",{\"1\":{\"33\":1}}],[\"到主\",{\"1\":{\"30\":1}}],[\"到达某个阈值\",{\"1\":{\"768\":1}}],[\"到达\",{\"1\":{\"28\":1}}],[\"到\",{\"0\":{\"198\":1},\"1\":{\"23\":1,\"33\":1,\"127\":1,\"193\":1,\"332\":1,\"341\":1,\"342\":1,\"343\":1,\"365\":1,\"418\":1,\"475\":1,\"614\":1,\"646\":1,\"673\":1,\"763\":1,\"812\":1,\"850\":1}}],[\"指运算符在操作数后面的\",{\"1\":{\"890\":1}}],[\"指运算符在操作数中间的\",{\"1\":{\"890\":1}}],[\"指执行类似flow\",{\"1\":{\"651\":1}}],[\"指从\",{\"1\":{\"621\":1}}],[\"指在代码执行的过程中\",{\"1\":{\"608\":1}}],[\"指对于变量的赋值会在定义该变量和使用该变量的值之间的任意位置执行\",{\"1\":{\"602\":1}}],[\"指的是从字节流中恢复java对象\",{\"1\":{\"580\":1}}],[\"指的是这一年所有的周\",{\"1\":{\"574\":1}}],[\"指将java对象转化为字节流以便在网络\",{\"1\":{\"580\":1}}],[\"指针指向超出数组大小时\",{\"1\":{\"888\":1}}],[\"指针\",{\"1\":{\"516\":1}}],[\"指向的数组实际类型\",{\"1\":{\"538\":1}}],[\"指向的仍然是旧的\",{\"1\":{\"513\":1}}],[\"指向了一条字节码指令的位置\",{\"1\":{\"459\":1}}],[\"指向\",{\"1\":{\"371\":1}}],[\"指向线程的指针\",{\"1\":{\"247\":1}}],[\"指向自己\",{\"1\":{\"235\":1}}],[\"指令类似基于\",{\"1\":{\"767\":1}}],[\"指令重排\",{\"1\":{\"602\":1}}],[\"指令发送到\",{\"1\":{\"249\":1}}],[\"指令时\",{\"1\":{\"247\":1}}],[\"指令之后\",{\"1\":{\"244\":1}}],[\"指定一个值c\",{\"1\":{\"923\":1}}],[\"指定一周的第一天\",{\"1\":{\"575\":1}}],[\"指定配置文件\",{\"1\":{\"808\":1}}],[\"指定在单独的协程中启动流的收集\",{\"1\":{\"652\":1}}],[\"指定serialversionuid\",{\"1\":{\"582\":1}}],[\"指定默认值\",{\"1\":{\"568\":1}}],[\"指定位置为空\",{\"1\":{\"501\":1}}],[\"指定大小以减轻计算\",{\"1\":{\"445\":1}}],[\"指定同一个\",{\"1\":{\"340\":1}}],[\"指定时间的速度\",{\"1\":{\"323\":1}}],[\"指定时间的位置\",{\"1\":{\"323\":1}}],[\"指定其subcomponents为mainfragmentsubcomponent\",{\"1\":{\"217\":1}}],[\"指定事件发生时会被执行的\",{\"1\":{\"189\":1}}],[\"指定被绑定处理器的控件id\",{\"1\":{\"189\":1}}],[\"指定该\",{\"1\":{\"111\":1}}],[\"指定了\",{\"1\":{\"110\":1}}],[\"指定的uri中创建并孵化一个\",{\"1\":{\"742\":1}}],[\"指定的\",{\"1\":{\"351\":1}}],[\"指定的范围变化\",{\"1\":{\"300\":1,\"314\":1}}],[\"指定的回调方法\",{\"1\":{\"53\":1}}],[\"指定的几种间隔时间\",{\"1\":{\"14\":1}}],[\"指示是否也删除状态栏通知\",{\"1\":{\"43\":1}}],[\"指手指点击屏幕后\",{\"1\":{\"23\":1}}],[\"直至\",{\"1\":{\"921\":1}}],[\"直观算法\",{\"1\":{\"667\":1}}],[\"直达所有元素都为有序元素\",{\"1\":{\"534\":1}}],[\"直径\",{\"1\":{\"342\":1}}],[\"直到子数组只有一个元素\",{\"1\":{\"925\":1}}],[\"直到子线程cthread执行完毕后\",{\"1\":{\"560\":1}}],[\"直到两个指针相遇\",{\"1\":{\"924\":1}}],[\"直到两份数组都是有序的\",{\"1\":{\"913\":1}}],[\"直到所有元素排序完毕\",{\"1\":{\"913\":1}}],[\"直到每个子数组只有一个元素\",{\"1\":{\"913\":1}}],[\"直到第\",{\"1\":{\"911\":1}}],[\"直到没有待排序的项目\",{\"1\":{\"896\":1}}],[\"直到没有可以访问的顶点\",{\"1\":{\"847\":1}}],[\"直到遇到top是\",{\"1\":{\"890\":1}}],[\"直到遇到top比父节点小\",{\"1\":{\"859\":1}}],[\"直到遇到\",{\"1\":{\"890\":1}}],[\"直到将该节点放到符合堆条件的位置或者到达叶子节点\",{\"1\":{\"859\":1}}],[\"直到查找到父节点比插入值大\",{\"1\":{\"858\":1}}],[\"直到找到\",{\"1\":{\"880\":1}}],[\"直到找到满足堆特征3\",{\"1\":{\"858\":1}}],[\"直到找到一个可用的\",{\"1\":{\"247\":1}}],[\"直到有顶点没有可以访问的邻接顶点\",{\"1\":{\"847\":1}}],[\"直到异常被处理\",{\"1\":{\"640\":1}}],[\"直到执行成功\",{\"1\":{\"607\":1}}],[\"直到该注解类型被找到或是查找完了\",{\"1\":{\"565\":1}}],[\"直到其内部所有协程\",{\"1\":{\"623\":1}}],[\"直到其他线程调用子线程cthread的notify\",{\"1\":{\"560\":1}}],[\"直到其为空再执行下一个\",{\"1\":{\"221\":1}}],[\"直到最后一位\",{\"1\":{\"896\":1}}],[\"直到最后一个没有排好序的元素\",{\"1\":{\"532\":1}}],[\"直到最顶层消耗掉点击事件\",{\"1\":{\"28\":1}}],[\"直到invalidate方法被调用\",{\"1\":{\"278\":1}}],[\"直到下一次因为\",{\"1\":{\"278\":1}}],[\"直到下面的\",{\"1\":{\"247\":1}}],[\"直到遍历完整个\",{\"1\":{\"266\":1}}],[\"直到当前\",{\"1\":{\"239\":1}}],[\"直到清空\",{\"1\":{\"230\":1}}],[\"直到\",{\"1\":{\"223\":1,\"230\":1,\"247\":1,\"769\":1,\"921\":1}}],[\"直到服务端方法在\",{\"1\":{\"63\":1}}],[\"直到超时或者满足指定的条件后取消该闹钟\",{\"1\":{\"19\":1}}],[\"直接插入\",{\"1\":{\"859\":1,\"904\":1}}],[\"直接插入链表或红黑树尾部\",{\"1\":{\"501\":1}}],[\"直接将数据存储在数组中\",{\"1\":{\"827\":1}}],[\"直接找一份\",{\"1\":{\"800\":1}}],[\"直接预览\",{\"1\":{\"783\":1}}],[\"直接粘贴到指定位置就行\",{\"1\":{\"670\":1}}],[\"直接修改threadlocal的值\",{\"1\":{\"625\":1}}],[\"直接执行语句\",{\"1\":{\"547\":1}}],[\"直接新建node并保存到table\",{\"1\":{\"505\":1}}],[\"直接创建\",{\"1\":{\"492\":1}}],[\"直接清理掉端边界外的内存\",{\"1\":{\"473\":1}}],[\"直接引用可以直接定位到内存中某一段地址\",{\"1\":{\"496\":1}}],[\"直接引用\",{\"1\":{\"461\":1}}],[\"直接转发给了\",{\"1\":{\"441\":1}}],[\"直接应用\",{\"1\":{\"417\":1}}],[\"直接进入\",{\"1\":{\"335\":1}}],[\"直接结束掉\",{\"1\":{\"296\":1}}],[\"直接覆盖旧值并返回\",{\"1\":{\"93\":1}}],[\"直接\",{\"1\":{\"0\":1,\"493\":1}}],[\"开放地址法性能下降很快\",{\"1\":{\"828\":1}}],[\"开放地址法又分为\",{\"1\":{\"827\":1}}],[\"开放地址法\",{\"1\":{\"827\":2,\"828\":1}}],[\"开头aa\",{\"1\":{\"723\":1}}],[\"开机必备文件\",{\"1\":{\"686\":1}}],[\"开机时执行\",{\"1\":{\"700\":1}}],[\"开机时\",{\"1\":{\"140\":1}}],[\"开启了动画\",{\"1\":{\"305\":1}}],[\"开眼快创\",{\"1\":{\"250\":1}}],[\"开始学习优雅的\",{\"0\":{\"780\":1}}],[\"开始的步骤类似\",{\"1\":{\"768\":1}}],[\"开始的无限的整数流\",{\"1\":{\"638\":1}}],[\"开始运行的第一个方法entrypoint\",{\"1\":{\"759\":1}}],[\"开始运行的第一个方法\",{\"1\":{\"759\":1}}],[\"开始同步就可以了\",{\"1\":{\"671\":1}}],[\"开始生产整数\",{\"1\":{\"638\":1}}],[\"开始执行语句\",{\"1\":{\"547\":1}}],[\"开始执行asingleton构造方法\",{\"1\":{\"547\":1}}],[\"开始执行\",{\"1\":{\"545\":1}}],[\"开始与其后的元素\",{\"1\":{\"532\":1}}],[\"开始遍历\",{\"1\":{\"472\":1}}],[\"开始滑动\",{\"1\":{\"418\":1}}],[\"开始时更新时\",{\"1\":{\"418\":1}}],[\"开始时调用\",{\"1\":{\"418\":1}}],[\"开始真正执行请求\",{\"1\":{\"398\":1}}],[\"开始全新的\",{\"1\":{\"351\":1}}],[\"开始\",{\"1\":{\"320\":1,\"521\":1,\"575\":1,\"576\":1,\"712\":1,\"809\":1}}],[\"开始和结束值等\",{\"1\":{\"312\":1}}],[\"开始动画\",{\"1\":{\"305\":1}}],[\"开始前准备工作\",{\"1\":{\"193\":1}}],[\"开始了\",{\"1\":{\"63\":1}}],[\"开始绘制\",{\"1\":{\"33\":1}}],[\"开始设置一个间隔\",{\"1\":{\"19\":1}}],[\"开发环境\",{\"0\":{\"676\":1}}],[\"开发的\",{\"1\":{\"388\":1,\"781\":1}}],[\"开发的一些基础知识\",{\"1\":{\"278\":1}}],[\"开发\",{\"1\":{\"279\":1}}],[\"开发进阶\",{\"1\":{\"133\":1}}],[\"开发架构的演进\",{\"1\":{\"127\":1}}],[\"开发者要注意\",{\"1\":{\"550\":1}}],[\"开发者并不实际拥有\",{\"1\":{\"126\":1}}],[\"开发者根据实际情况运用就好了\",{\"1\":{\"112\":1}}],[\"开发中\",{\"1\":{\"122\":1}}],[\"开发中官方推荐的使用的单位是\",{\"1\":{\"100\":1}}],[\"开发艺术探索\",{\"1\":{\"26\":1,\"29\":1,\"67\":1,\"69\":1,\"84\":1,\"164\":1,\"190\":1}}],[\"开发常用设置\",{\"0\":{\"1\":1}}],[\"x+\",{\"1\":{\"921\":1}}],[\"x+2\",{\"1\":{\"857\":1,\"921\":1}}],[\"x+1\",{\"1\":{\"857\":1,\"921\":1}}],[\"x++\",{\"1\":{\"638\":1}}],[\"x64http\",{\"1\":{\"805\":1}}],[\"x64\",{\"1\":{\"801\":1}}],[\"x64fre\",{\"1\":{\"241\":1}}],[\"xrange\",{\"1\":{\"731\":1}}],[\"xref\",{\"1\":{\"26\":1}}],[\"xs\",{\"1\":{\"725\":1}}],[\"x3\",{\"1\":{\"143\":1}}],[\"x2\",{\"1\":{\"143\":2}}],[\"x1\",{\"1\":{\"143\":2}}],[\"xor\",{\"1\":{\"132\":1}}],[\"xfermode的本质是处理dst与src重合与未重合部分的展示与否\",{\"1\":{\"132\":1}}],[\"xfermode是\",{\"1\":{\"130\":1}}],[\"xfermode\",{\"0\":{\"130\":1,\"132\":1},\"1\":{\"131\":2,\"162\":1}}],[\"xdpi\",{\"1\":{\"101\":3}}],[\"xdpi=403\",{\"1\":{\"101\":2}}],[\"xuxingxing002\",{\"1\":{\"33\":1}}],[\"x\",{\"0\":{\"30\":1},\"1\":{\"30\":1,\"33\":5,\"74\":6,\"75\":2,\"143\":4,\"144\":6,\"145\":10,\"146\":3,\"153\":3,\"215\":1,\"264\":2,\"320\":1,\"321\":1,\"323\":1,\"324\":2,\"325\":2,\"355\":1,\"578\":1,\"612\":2,\"638\":4,\"663\":2,\"689\":1,\"690\":2,\"695\":1,\"722\":1,\"723\":2,\"725\":2,\"731\":2,\"817\":6,\"857\":1,\"896\":7,\"897\":3,\"921\":8}}],[\"xxfile\",{\"1\":{\"727\":1}}],[\"xxxrepository类对应封装了这数据库appdatabase中对两个表的操作\",{\"1\":{\"781\":1}}],[\"xxxrepository类的出现时为了将viewmodel与数据的具体实现解耦合\",{\"1\":{\"781\":1}}],[\"xxxviewmodelfactory向activity等屏蔽了viewmodel的具体实现\",{\"1\":{\"781\":1}}],[\"xxxelement\",{\"1\":{\"251\":1}}],[\"xxxusecase\",{\"1\":{\"126\":1}}],[\"xxx\",{\"0\":{\"115\":1,\"117\":1,\"118\":1},\"1\":{\"116\":1,\"117\":4,\"178\":1,\"565\":2,\"570\":1,\"612\":1,\"672\":2,\"716\":1,\"718\":2,\"719\":3}}],[\"xx\",{\"1\":{\"19\":2,\"554\":1,\"612\":4,\"615\":1,\"664\":2}}],[\"xml中注册indexactivity和proxyactivity\",{\"1\":{\"178\":1}}],[\"xml中声明所需权限\",{\"1\":{\"172\":1}}],[\"xml下新建对应文件\",{\"1\":{\"116\":1}}],[\"xmlns\",{\"1\":{\"115\":2,\"167\":3,\"189\":3,\"783\":3,\"784\":5,\"816\":1}}],[\"xml并做如下配置\",{\"1\":{\"6\":1}}],[\"xml文件夹中新建file\",{\"1\":{\"6\":1}}],[\"xml\",{\"0\":{\"115\":1,\"116\":1},\"1\":{\"6\":2,\"35\":1,\"36\":1,\"39\":1,\"63\":1,\"103\":1,\"104\":1,\"105\":1,\"112\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"122\":1,\"153\":1,\"167\":2,\"170\":1,\"176\":1,\"178\":1,\"189\":9,\"783\":1,\"784\":5,\"816\":1}}],[\"方向\",{\"1\":{\"418\":1}}],[\"方便我们建立简单的网页来介绍项目\",{\"1\":{\"791\":1}}],[\"方便指导日后对\",{\"1\":{\"781\":1}}],[\"方便同时输出多个文档\",{\"1\":{\"731\":1}}],[\"方便复制\",{\"1\":{\"612\":1}}],[\"方便保存\",{\"1\":{\"557\":1}}],[\"方便接收其转发的事件\",{\"1\":{\"416\":1}}],[\"方便定位问题\",{\"1\":{\"126\":1}}],[\"方便移植\",{\"1\":{\"126\":1}}],[\"方便后续操作\",{\"1\":{\"90\":1}}],[\"方案在\",{\"1\":{\"400\":1}}],[\"方案则只有图片获取在\",{\"1\":{\"400\":1}}],[\"方案实际使用\",{\"1\":{\"400\":1}}],[\"方案创建的\",{\"1\":{\"397\":1}}],[\"方案采用的\",{\"1\":{\"397\":1}}],[\"方案时\",{\"1\":{\"393\":2}}],[\"方案\",{\"1\":{\"30\":1,\"398\":3,\"400\":1}}],[\"方案选择\",{\"0\":{\"10\":1}}],[\"方式创建一个序列\",{\"1\":{\"629\":1}}],[\"方式\",{\"1\":{\"527\":4,\"663\":1}}],[\"方式即binder\",{\"1\":{\"69\":1}}],[\"方式存活\",{\"1\":{\"42\":1}}],[\"方式❷\",{\"1\":{\"30\":1,\"202\":1}}],[\"方式❶\",{\"1\":{\"30\":1,\"202\":1}}],[\"方法清除这些数据以避免内存泄漏\",{\"1\":{\"785\":1}}],[\"方法等信息\",{\"1\":{\"771\":1}}],[\"方法开启循环\",{\"1\":{\"761\":1}}],[\"方法生成\",{\"1\":{\"731\":1}}],[\"方法增加一个file\",{\"1\":{\"731\":1}}],[\"方法修改如下\",{\"1\":{\"731\":1}}],[\"方法产生request\",{\"1\":{\"713\":1}}],[\"方法名\",{\"1\":{\"612\":1}}],[\"方法一直返回any\",{\"1\":{\"618\":1}}],[\"方法一节已经涉及到了\",{\"1\":{\"587\":1}}],[\"方法一致返回\",{\"1\":{\"325\":1}}],[\"方法分别不能与defaultwriteobject\",{\"1\":{\"584\":1}}],[\"方法来将序列化得到的对象初始化到正确的状态\",{\"1\":{\"584\":1}}],[\"方法来检索\",{\"1\":{\"41\":1}}],[\"方法进行处理以达到目的\",{\"1\":{\"564\":1}}],[\"方法则会唤醒所有在等待池中的线程\",{\"1\":{\"561\":1}}],[\"方法释放掉该对象的锁进入阻塞后\",{\"1\":{\"561\":1}}],[\"方法挂起当前线程\",{\"1\":{\"560\":1}}],[\"方法使当前线程阻塞\",{\"1\":{\"560\":1}}],[\"方法使用\",{\"1\":{\"327\":1,\"369\":1}}],[\"方法重载等时就使用枚举\",{\"1\":{\"522\":1}}],[\"方法重新进行\",{\"1\":{\"438\":1}}],[\"方法重新绘制内容\",{\"1\":{\"333\":1}}],[\"方法重新执行了一次\",{\"1\":{\"273\":1}}],[\"方法无需调用父类接口的clinit\",{\"1\":{\"497\":1}}],[\"方法无论类是否重写了\",{\"1\":{\"92\":1}}],[\"方法时才会执行\",{\"1\":{\"497\":1}}],[\"方法时\",{\"1\":{\"497\":1}}],[\"方法时丢弃掉这些数据\",{\"1\":{\"86\":1}}],[\"方法和变量的这种后期绑定\",{\"1\":{\"496\":1}}],[\"方法以及调用过\",{\"1\":{\"475\":1}}],[\"方法以规范对\",{\"1\":{\"360\":1}}],[\"方法尝试\",{\"1\":{\"466\":1}}],[\"方法区中常量引用的对象\",{\"1\":{\"472\":1}}],[\"方法区中的类静态属性引用的对象\",{\"1\":{\"472\":1}}],[\"方法区溢出\",{\"0\":{\"467\":1}}],[\"方法区\",{\"1\":{\"461\":1}}],[\"方法服务\",{\"1\":{\"460\":1}}],[\"方法出口等\",{\"1\":{\"459\":1}}],[\"方法校验\",{\"1\":{\"426\":1}}],[\"方法顾名思义\",{\"1\":{\"424\":1}}],[\"方法只会被调用一次\",{\"1\":{\"475\":1}}],[\"方法只会使用httpclient从网络中下载图片并返回\",{\"1\":{\"383\":1}}],[\"方法只能返回\",{\"1\":{\"422\":1}}],[\"方法内部执行了delegate\",{\"1\":{\"418\":1}}],[\"方法内部对mfirsttouchtarget进行更新\",{\"1\":{\"26\":1}}],[\"方法被调用时通过\",{\"1\":{\"405\":1}}],[\"方法被省略\",{\"1\":{\"333\":1}}],[\"方法请求加载图片\",{\"1\":{\"399\":1}}],[\"方法注册的\",{\"1\":{\"398\":1}}],[\"方法正是调用他们获取图片\",{\"1\":{\"398\":1}}],[\"方法或者powerimagebaserequest\",{\"1\":{\"398\":1}}],[\"方法加载图片\",{\"1\":{\"383\":1}}],[\"方法才是真正使用httpclient从网上获取图片资源的方法\",{\"1\":{\"374\":1}}],[\"方法通过canvas\",{\"1\":{\"377\":1}}],[\"方法通过\",{\"1\":{\"367\":1}}],[\"方法通知子类\",{\"1\":{\"303\":1}}],[\"方法而非\",{\"1\":{\"358\":1}}],[\"方法之前\",{\"1\":{\"418\":1}}],[\"方法之外\",{\"1\":{\"355\":1}}],[\"方法之后\",{\"1\":{\"269\":1}}],[\"方法主要是创建一个不存在于\",{\"1\":{\"748\":1}}],[\"方法主要作用是异步执行\",{\"1\":{\"408\":1}}],[\"方法主要影响的是\",{\"1\":{\"347\":1}}],[\"方法主要也是用来触发\",{\"1\":{\"228\":1}}],[\"方法供\",{\"1\":{\"346\":1}}],[\"方法供子类根据不同的状态创建\",{\"1\":{\"309\":1}}],[\"方法实际负责绘制内容\",{\"1\":{\"335\":1}}],[\"方法实现的单例也会遭受到攻击\",{\"1\":{\"583\":1}}],[\"方法实现滑动效果\",{\"1\":{\"425\":1}}],[\"方法实现如下\",{\"1\":{\"374\":1}}],[\"方法实现\",{\"1\":{\"319\":2,\"358\":1,\"625\":1}}],[\"方法实现和\",{\"1\":{\"282\":1}}],[\"方法实现是view\",{\"1\":{\"75\":1}}],[\"方法与之绑定\",{\"1\":{\"349\":1}}],[\"方法与此方法一一对应\",{\"1\":{\"334\":1}}],[\"方法与io\",{\"1\":{\"243\":1}}],[\"方法类似\",{\"1\":{\"334\":1,\"357\":1}}],[\"方法恢复\",{\"1\":{\"334\":1}}],[\"方法让使用者使用\",{\"1\":{\"333\":1}}],[\"方法绘制内容\",{\"1\":{\"332\":2}}],[\"方法监听\",{\"1\":{\"320\":1,\"333\":1}}],[\"方法是用来将\",{\"1\":{\"823\":1}}],[\"方法是一个\",{\"1\":{\"745\":1}}],[\"方法是抽象方法\",{\"1\":{\"429\":1}}],[\"方法是位于\",{\"1\":{\"372\":1}}],[\"方法是其实现动画的基石\",{\"1\":{\"320\":1}}],[\"方法是通过\",{\"1\":{\"138\":1}}],[\"方法更新的值或者null\",{\"1\":{\"625\":1}}],[\"方法更新\",{\"1\":{\"310\":1,\"405\":1}}],[\"方法计算对应的属性并展示\",{\"1\":{\"307\":1}}],[\"方法即可\",{\"1\":{\"307\":1,\"317\":1,\"374\":1}}],[\"方法由子类实现\",{\"1\":{\"304\":1}}],[\"方法还会将当前element标记为dirty\",{\"1\":{\"271\":1}}],[\"方法执行网络请求\",{\"1\":{\"713\":1}}],[\"方法执行后的流程图\",{\"1\":{\"271\":1}}],[\"方法执行之后\",{\"1\":{\"257\":1}}],[\"方法因各个element的实现而异\",{\"1\":{\"270\":1}}],[\"方法插入到渲染树中\",{\"1\":{\"259\":1}}],[\"方法最后一个参数是\",{\"1\":{\"662\":1}}],[\"方法最后调用了attachrootwidget\",{\"1\":{\"254\":1}}],[\"方法最后再这里调用了ioservice\",{\"1\":{\"246\":1}}],[\"方法最终调用\",{\"1\":{\"332\":1}}],[\"方法最终通过schedulerbinding\",{\"1\":{\"320\":1}}],[\"方法最终通过sendmessageattime\",{\"1\":{\"56\":1}}],[\"方法最终会调用sendmessageattime\",{\"1\":{\"52\":1}}],[\"方法创建了新的isolate\",{\"1\":{\"748\":1}}],[\"方法创建request\",{\"1\":{\"711\":1}}],[\"方法创建\",{\"1\":{\"254\":1,\"264\":1,\"310\":1,\"394\":1}}],[\"方法创建的是\",{\"1\":{\"415\":1}}],[\"方法创建的\",{\"1\":{\"246\":1,\"405\":1}}],[\"方法创建looper对象\",{\"1\":{\"48\":1}}],[\"方法异步读取文件\",{\"1\":{\"243\":1}}],[\"方法发送\",{\"1\":{\"235\":1}}],[\"方法携带\",{\"1\":{\"179\":1}}],[\"方法初始化各个变量\",{\"1\":{\"737\":1}}],[\"方法初始化\",{\"1\":{\"167\":1}}],[\"方法获取枚举对象实例\",{\"1\":{\"612\":1}}],[\"方法获取全部\",{\"1\":{\"554\":1}}],[\"方法获取全部公有变量\",{\"1\":{\"554\":1}}],[\"方法获取的实际是network\",{\"1\":{\"374\":1}}],[\"方法获取对应的值\",{\"1\":{\"358\":1}}],[\"方法获取\",{\"1\":{\"334\":1,\"357\":1,\"376\":1}}],[\"方法获取并显示最新的属性\",{\"1\":{\"303\":1}}],[\"方法获取到\",{\"1\":{\"216\":1,\"349\":1}}],[\"方法获取宽高\",{\"1\":{\"160\":1}}],[\"方法获取保存的looper对象并由此获取到messagequeue对象\",{\"1\":{\"49\":1}}],[\"方法设置了\",{\"1\":{\"159\":1}}],[\"方法调用了join\",{\"1\":{\"560\":1}}],[\"方法调用imageprovider\",{\"1\":{\"374\":1}}],[\"方法调用onmeasure\",{\"1\":{\"159\":1}}],[\"方法调用sendmessageattime\",{\"1\":{\"56\":1}}],[\"方法为例\",{\"1\":{\"143\":1}}],[\"方法传递到\",{\"1\":{\"138\":1}}],[\"方法返回未使用的\",{\"1\":{\"414\":1}}],[\"方法返回图片请求结果\",{\"1\":{\"399\":1}}],[\"方法返回值传入\",{\"1\":{\"357\":1}}],[\"方法返回null\",{\"1\":{\"295\":1}}],[\"方法返回\",{\"1\":{\"138\":1}}],[\"方法触发数据处理\",{\"1\":{\"125\":1}}],[\"方法也会先使用indexofkey\",{\"1\":{\"95\":1}}],[\"方法就比较简单了\",{\"1\":{\"94\":1}}],[\"方法我们在之前的文章中介绍过\",{\"1\":{\"83\":1}}],[\"方法会调用okhttprequestbuilder对象的generaterequest\",{\"1\":{\"713\":1}}],[\"方法会生成requestcall对象\",{\"1\":{\"713\":1}}],[\"方法会从等待池中唤醒一个指定线程\",{\"1\":{\"561\":1}}],[\"方法会先于子类执行\",{\"1\":{\"497\":1}}],[\"方法会先用二分法查找hash对应的index\",{\"1\":{\"92\":1}}],[\"方法会使用他所处\",{\"1\":{\"405\":1}}],[\"方法会触发widget的rebuild\",{\"1\":{\"270\":1}}],[\"方法会在通道缓存满的时候挂起调用方\",{\"1\":{\"645\":1}}],[\"方法会在\",{\"1\":{\"228\":1}}],[\"方法会在looper\",{\"1\":{\"53\":1}}],[\"方法会将\",{\"1\":{\"148\":1}}],[\"方法会\",{\"1\":{\"138\":1}}],[\"方法会创建一个\",{\"1\":{\"83\":1,\"304\":1}}],[\"方法可以保证同一时间只有一个协程访问指定代码\",{\"1\":{\"645\":1}}],[\"方法可以解除private\",{\"1\":{\"554\":1}}],[\"方法可以停止动画\",{\"1\":{\"327\":1}}],[\"方法可以自动判断是否需要反向并修改方向\",{\"1\":{\"325\":1}}],[\"方法可以创建一个新的将传入的\",{\"1\":{\"316\":1}}],[\"方法可以实现平滑的滑动\",{\"1\":{\"75\":1}}],[\"方法可以使用任意时间\",{\"1\":{\"14\":1}}],[\"方法的最后也调用了\",{\"1\":{\"751\":1}}],[\"方法的输出中有特殊的对象则传递对应的描述代码\",{\"1\":{\"594\":1}}],[\"方法的注意事项\",{\"1\":{\"461\":1}}],[\"方法的实现\",{\"1\":{\"235\":1}}],[\"方法的标志\",{\"1\":{\"71\":1}}],[\"方法的返回值意义如下\",{\"1\":{\"36\":1}}],[\"方法运行的线程\",{\"1\":{\"63\":1}}],[\"方法回调handler中的msg处理方法\",{\"1\":{\"56\":1}}],[\"方法将ui\",{\"1\":{\"377\":1}}],[\"方法将当前element标记为dirty\",{\"1\":{\"270\":1}}],[\"方法将nmh放到线程池中运行\",{\"1\":{\"247\":2}}],[\"方法将它们传递给服务端\",{\"1\":{\"71\":1}}],[\"方法将msg压入messagequeue中\",{\"1\":{\"56\":1}}],[\"方法将msg压入到messagequeue中\",{\"1\":{\"56\":1}}],[\"方法将runnable赋予msg\",{\"1\":{\"56\":1}}],[\"方法将\",{\"1\":{\"54\":2,\"235\":1,\"256\":1,\"360\":1,\"405\":1}}],[\"方法接收\",{\"1\":{\"38\":1}}],[\"方法启动\",{\"1\":{\"36\":1}}],[\"方法中webbrowser\",{\"1\":{\"718\":1}}],[\"方法中主动保存了部分数据\",{\"1\":{\"506\":1}}],[\"方法中自救一次\",{\"1\":{\"475\":1}}],[\"方法中也有对应操作\",{\"1\":{\"438\":1}}],[\"方法中会检验\",{\"1\":{\"426\":1}}],[\"方法中的\",{\"1\":{\"413\":1}}],[\"方法中初始化\",{\"1\":{\"405\":1}}],[\"方法中使用\",{\"1\":{\"397\":1}}],[\"方法中以用来获取\",{\"1\":{\"365\":1}}],[\"方法中实时创建\",{\"1\":{\"358\":1}}],[\"方法中并返回\",{\"1\":{\"357\":1}}],[\"方法中真正执行\",{\"1\":{\"352\":1}}],[\"方法中监听从\",{\"1\":{\"332\":1}}],[\"方法中重写对新的\",{\"1\":{\"332\":1}}],[\"方法中除了\",{\"1\":{\"324\":1}}],[\"方法中将\",{\"1\":{\"244\":1,\"411\":1}}],[\"方法中获取的\",{\"1\":{\"243\":1,\"244\":1}}],[\"方法中传入当前application的依赖\",{\"1\":{\"214\":1}}],[\"方法中执行\",{\"1\":{\"196\":1,\"236\":1,\"247\":1}}],[\"方法中可以使用\",{\"1\":{\"193\":1,\"327\":1}}],[\"方法中调用并返回defineclass\",{\"1\":{\"486\":1}}],[\"方法中调用原生的图片加载库获取\",{\"1\":{\"399\":1}}],[\"方法中调用了\",{\"1\":{\"279\":1}}],[\"方法中调用\",{\"1\":{\"191\":1}}],[\"方法中调用对应方法\",{\"1\":{\"173\":1}}],[\"方法中为\",{\"1\":{\"189\":1}}],[\"方法中返回\",{\"1\":{\"172\":1}}],[\"方法中绘制对应的\",{\"1\":{\"147\":1}}],[\"方法中创建的\",{\"1\":{\"405\":1}}],[\"方法中创建的请求并执行\",{\"1\":{\"398\":1}}],[\"方法中创建\",{\"1\":{\"334\":1,\"349\":1}}],[\"方法中创建一个线程\",{\"1\":{\"139\":1}}],[\"方法中创建looper及messagequeue对象并保存在sthreadlocal中\",{\"1\":{\"56\":1}}],[\"方法中被传入到\",{\"1\":{\"138\":1}}],[\"方法中通过\",{\"1\":{\"327\":1}}],[\"方法中通过返回值告知\",{\"1\":{\"112\":1}}],[\"方法中通过mylooper\",{\"1\":{\"56\":1}}],[\"方法中做验证\",{\"1\":{\"66\":1}}],[\"方法中进行\",{\"1\":{\"30\":1}}],[\"方法中\",{\"1\":{\"27\":1,\"39\":1,\"83\":1,\"138\":1,\"163\":1,\"256\":2,\"271\":1,\"361\":1,\"370\":1,\"391\":1,\"397\":1,\"398\":1,\"405\":1,\"420\":1,\"423\":1,\"424\":1,\"436\":1,\"591\":3}}],[\"方法中设置的视图\",{\"1\":{\"24\":1}}],[\"方法如下\",{\"1\":{\"26\":1}}],[\"方法判断是否需要拦截\",{\"1\":{\"26\":2}}],[\"方法\",{\"0\":{\"144\":1,\"145\":1},\"1\":{\"25\":2,\"26\":3,\"27\":3,\"30\":1,\"36\":1,\"50\":1,\"52\":3,\"53\":1,\"71\":1,\"75\":1,\"83\":2,\"86\":1,\"92\":1,\"105\":2,\"112\":2,\"117\":2,\"138\":1,\"146\":1,\"153\":2,\"157\":2,\"159\":4,\"178\":1,\"187\":1,\"189\":1,\"191\":2,\"192\":1,\"193\":3,\"235\":1,\"243\":2,\"244\":1,\"253\":1,\"256\":1,\"259\":1,\"265\":1,\"269\":1,\"270\":5,\"271\":3,\"279\":2,\"281\":1,\"282\":1,\"303\":1,\"304\":1,\"305\":1,\"307\":1,\"308\":1,\"319\":1,\"320\":1,\"326\":1,\"327\":1,\"332\":3,\"333\":2,\"350\":1,\"352\":1,\"355\":1,\"358\":2,\"360\":1,\"361\":1,\"374\":1,\"398\":2,\"399\":1,\"404\":1,\"415\":3,\"418\":3,\"420\":1,\"423\":2,\"426\":1,\"438\":1,\"440\":1,\"461\":1,\"462\":2,\"475\":1,\"497\":6,\"517\":1,\"527\":3,\"552\":1,\"554\":5,\"560\":2,\"564\":1,\"569\":2,\"583\":2,\"584\":1,\"587\":1,\"612\":1,\"712\":1,\"731\":2,\"742\":1,\"745\":1,\"748\":1,\"751\":1,\"756\":1,\"759\":3,\"761\":1,\"762\":1,\"766\":1}}],[\"4序列\",{\"1\":{\"913\":1}}],[\"483\",{\"1\":{\"904\":1}}],[\"480\",{\"1\":{\"100\":1}}],[\"480dpi\",{\"1\":{\"100\":1}}],[\"44\",{\"1\":{\"809\":2}}],[\"47openssl\",{\"1\":{\"805\":1}}],[\"49\",{\"1\":{\"731\":1}}],[\"49c477a875e84b2aae764c67f38f26b2\",{\"1\":{\"138\":1}}],[\"4s发射一次直接拼接\",{\"1\":{\"659\":2}}],[\"452\",{\"1\":{\"631\":1}}],[\"4+\",{\"1\":{\"523\":6}}],[\"4+8=12\",{\"1\":{\"516\":1}}],[\"4个\",{\"1\":{\"521\":1}}],[\"4g\",{\"1\":{\"519\":1}}],[\"41\",{\"1\":{\"247\":1}}],[\"411\",{\"1\":{\"101\":4}}],[\"411dp\",{\"1\":{\"100\":1}}],[\"404\",{\"1\":{\"932\":1}}],[\"40\",{\"1\":{\"247\":1,\"516\":1,\"920\":1}}],[\"40614\",{\"1\":{\"243\":2}}],[\"4000\",{\"1\":{\"806\":2}}],[\"400\",{\"1\":{\"138\":1,\"631\":2}}],[\"42\",{\"1\":{\"247\":1}}],[\"429a1ff3560c\",{\"1\":{\"139\":1}}],[\"426620\",{\"1\":{\"137\":1}}],[\"4f\",{\"1\":{\"101\":1}}],[\"4\",{\"0\":{\"107\":1,\"118\":1,\"462\":1,\"467\":1,\"474\":1,\"548\":1,\"771\":1},\"1\":{\"30\":1,\"111\":2,\"138\":1,\"140\":2,\"167\":1,\"173\":1,\"190\":1,\"247\":4,\"263\":1,\"273\":1,\"316\":1,\"369\":1,\"376\":2,\"396\":1,\"494\":2,\"495\":1,\"511\":2,\"516\":20,\"519\":5,\"521\":11,\"523\":6,\"528\":1,\"542\":1,\"547\":2,\"568\":1,\"575\":3,\"576\":3,\"580\":1,\"612\":1,\"617\":1,\"625\":2,\"630\":1,\"638\":1,\"651\":1,\"666\":3,\"674\":1,\"690\":1,\"745\":1,\"759\":1,\"805\":1,\"827\":2,\"904\":1,\"913\":1,\"919\":2}}],[\"4300\",{\"1\":{\"243\":1}}],[\"432\",{\"1\":{\"196\":1}}],[\"43\",{\"1\":{\"13\":1,\"904\":1}}],[\"46\",{\"1\":{\"13\":2}}],[\"651\",{\"1\":{\"631\":1}}],[\"65535\",{\"1\":{\"519\":1}}],[\"65534个字节\",{\"1\":{\"519\":1}}],[\"65534\",{\"0\":{\"519\":1},\"1\":{\"519\":1}}],[\"65536\",{\"1\":{\"30\":1,\"519\":1}}],[\"666\",{\"1\":{\"690\":1}}],[\"666l\",{\"1\":{\"586\":1}}],[\"66\",{\"1\":{\"553\":1}}],[\"6647114\",{\"1\":{\"142\":1}}],[\"6e802\",{\"1\":{\"262\":1}}],[\"644\",{\"1\":{\"690\":1}}],[\"64136\",{\"1\":{\"523\":1}}],[\"64\",{\"1\":{\"243\":1,\"505\":1,\"516\":1,\"519\":1}}],[\"64k\",{\"1\":{\"31\":1,\"243\":1}}],[\"6fb6d4\",{\"1\":{\"167\":1}}],[\"6211589\",{\"1\":{\"138\":3,\"139\":1}}],[\"615ffdd79e29\",{\"1\":{\"126\":1}}],[\"6a7a5f388bf7d\",{\"1\":{\"124\":1}}],[\"694\",{\"1\":{\"630\":1}}],[\"69px\",{\"1\":{\"101\":1}}],[\"696\",{\"1\":{\"13\":1}}],[\"6\",{\"0\":{\"120\":1,\"550\":1},\"1\":{\"62\":1,\"63\":1,\"100\":1,\"144\":1,\"247\":1,\"427\":3,\"461\":2,\"496\":1,\"501\":1,\"513\":2,\"568\":1,\"609\":1,\"731\":1,\"805\":2,\"911\":1}}],[\"634\",{\"1\":{\"13\":1}}],[\"60\",{\"1\":{\"13\":1,\"20\":1}}],[\"不存在伪溢出问题\",{\"1\":{\"888\":1}}],[\"不存在\",{\"1\":{\"880\":1}}],[\"不进行向上遍历\",{\"1\":{\"860\":1}}],[\"不是完全二叉树\",{\"1\":{\"863\":1}}],[\"不是内部或外部命令\",{\"1\":{\"802\":1}}],[\"不是所有的service类都可以被我们随意修改\",{\"1\":{\"202\":1}}],[\"不得不承认\",{\"1\":{\"798\":1}}],[\"不得为\",{\"1\":{\"43\":1}}],[\"不满足条件\",{\"1\":{\"850\":1}}],[\"不满足的话就丢弃优化代码\",{\"1\":{\"768\":1}}],[\"不满足第一周的条件\",{\"1\":{\"576\":1}}],[\"不断的在任务队列tasks\",{\"1\":{\"761\":1}}],[\"不断刷新绘图\",{\"1\":{\"147\":1}}],[\"不管哪一种都不会直接执行\",{\"1\":{\"763\":1}}],[\"不管是isolate\",{\"1\":{\"748\":1}}],[\"不管在什么样的屏幕上\",{\"1\":{\"100\":1}}],[\"不想执行任何语句\",{\"1\":{\"726\":1}}],[\"不发布文章\",{\"1\":{\"719\":1}}],[\"不编译文章\",{\"1\":{\"719\":1}}],[\"不受权限限制\",{\"1\":{\"689\":1}}],[\"不受其最大数量和最大总大小约束\",{\"1\":{\"376\":1}}],[\"不允许更改\",{\"1\":{\"619\":1}}],[\"不用再比较了\",{\"1\":{\"898\":1}}],[\"不用in或者out\",{\"1\":{\"617\":1}}],[\"不用手动添加移除\",{\"1\":{\"317\":1}}],[\"不变\",{\"1\":{\"617\":1}}],[\"不一定与源代码一致\",{\"1\":{\"738\":1}}],[\"不一定需要同步\",{\"1\":{\"608\":1}}],[\"不一定和代码中的顺序一致\",{\"1\":{\"602\":1}}],[\"不一致而报错\",{\"1\":{\"538\":1}}],[\"不一致\",{\"1\":{\"273\":1}}],[\"不够\",{\"1\":{\"576\":1}}],[\"不赞成使用的\",{\"1\":{\"566\":1}}],[\"不停止\",{\"1\":{\"528\":1}}],[\"不停的遍历\",{\"1\":{\"247\":1}}],[\"不停的通过mqueue获取到msg\",{\"1\":{\"49\":1}}],[\"不含引用对象的大小\",{\"1\":{\"521\":1}}],[\"不计算持有的\",{\"1\":{\"519\":1}}],[\"不涉及该对象所持有的对象本身的大小\",{\"1\":{\"516\":1}}],[\"不涉及具体项目应用\",{\"1\":{\"199\":1}}],[\"不对\",{\"1\":{\"511\":1}}],[\"不引用\",{\"1\":{\"474\":1}}],[\"不超过父级约束的时候只占据\",{\"1\":{\"439\":1}}],[\"不生效\",{\"1\":{\"418\":1}}],[\"不考虑\",{\"1\":{\"414\":1}}],[\"不执行剩余步骤\",{\"1\":{\"412\":1}}],[\"不需要\",{\"1\":{\"769\":1}}],[\"不需要重新\",{\"1\":{\"350\":1}}],[\"不需要绘制任何内容\",{\"1\":{\"161\":1}}],[\"不建议有其他变化\",{\"1\":{\"340\":1}}],[\"不推荐使用\",{\"1\":{\"334\":1}}],[\"不限制高度\",{\"1\":{\"439\":1}}],[\"不限制宽度\",{\"1\":{\"439\":1}}],[\"不限制\",{\"1\":{\"319\":1}}],[\"不为空则返回\",{\"1\":{\"506\":2}}],[\"不为空时\",{\"1\":{\"505\":1}}],[\"不为\",{\"1\":{\"319\":1,\"333\":1,\"347\":1,\"412\":1,\"417\":1}}],[\"不为null\",{\"1\":{\"259\":1}}],[\"不接受输入\",{\"1\":{\"287\":2}}],[\"不接受输入事件\",{\"1\":{\"76\":1}}],[\"不难看出\",{\"1\":{\"264\":1}}],[\"不过这次是用它来存储代码\",{\"1\":{\"798\":1}}],[\"不过可以发送\",{\"1\":{\"418\":1}}],[\"不过\",{\"1\":{\"382\":1,\"460\":1}}],[\"不过最后也是调用\",{\"1\":{\"243\":1}}],[\"不过放在\",{\"1\":{\"62\":1}}],[\"不应该在协程中使用\",{\"1\":{\"623\":1}}],[\"不应该依赖底层模块\",{\"1\":{\"126\":1}}],[\"不应当执行耗时方法\",{\"1\":{\"223\":1}}],[\"不知道用哪一个好\",{\"1\":{\"203\":1}}],[\"不可能对每个网络请求都写一次上述代码\",{\"1\":{\"708\":1}}],[\"不可能有虚拟按键\",{\"1\":{\"196\":1}}],[\"不可以调用非局部返回\",{\"1\":{\"621\":1}}],[\"不可达则未标记\",{\"1\":{\"472\":1}}],[\"不可滑动\",{\"1\":{\"439\":1}}],[\"不可见\",{\"1\":{\"287\":1,\"341\":2}}],[\"不可继续\",{\"1\":{\"173\":1}}],[\"不适用于信息交换\",{\"1\":{\"137\":1}}],[\"不合适频繁或信息量大的通信\",{\"1\":{\"137\":1}}],[\"不依赖于其他部分\",{\"1\":{\"126\":1}}],[\"不依赖于具体的技术或框架\",{\"1\":{\"126\":1}}],[\"不容易出错\",{\"1\":{\"126\":1}}],[\"不再继续递归\",{\"1\":{\"911\":1}}],[\"不再提醒\",{\"1\":{\"173\":1}}],[\"不再关心后续的发展\",{\"1\":{\"205\":1}}],[\"不再关心\",{\"1\":{\"124\":1}}],[\"不再和\",{\"1\":{\"123\":1}}],[\"不持有\",{\"1\":{\"124\":1}}],[\"不同点\",{\"1\":{\"623\":1}}],[\"不同thread可以通过一个threadlocal变量分别保存不同的变量而互不影响\",{\"1\":{\"526\":1}}],[\"不同位\",{\"1\":{\"507\":1}}],[\"不同为\",{\"1\":{\"500\":1,\"507\":1}}],[\"不同如下\",{\"1\":{\"497\":1}}],[\"不同而值展示\",{\"1\":{\"422\":1}}],[\"不同的\",{\"1\":{\"817\":1}}],[\"不同的系统实现不同\",{\"1\":{\"237\":1}}],[\"不同的是希尔排序的增量逐渐减小到\",{\"1\":{\"919\":1}}],[\"不同的是优先级高的在队首\",{\"1\":{\"873\":1}}],[\"不同的是此方法返回的是\",{\"1\":{\"357\":1}}],[\"不同的是\",{\"1\":{\"101\":1,\"428\":1}}],[\"不同xfermode绘制结果如下\",{\"1\":{\"130\":1}}],[\"不同\",{\"1\":{\"103\":2,\"106\":1}}],[\"不会尝试静态解析任何没有在\",{\"1\":{\"767\":1}}],[\"不会被\",{\"1\":{\"656\":1}}],[\"不会被缓存的图片\",{\"1\":{\"375\":1}}],[\"不会挂起后面的协程代码\",{\"1\":{\"652\":1}}],[\"不会产生并发问题\",{\"1\":{\"645\":1}}],[\"不会限定协程运行的线程\",{\"1\":{\"624\":1}}],[\"不会阻塞线程\",{\"1\":{\"645\":1}}],[\"不会阻塞其所在线程\",{\"1\":{\"623\":1}}],[\"不会阻塞当前线程\",{\"1\":{\"623\":1}}],[\"不会主动从\",{\"1\":{\"418\":1}}],[\"不会\",{\"1\":{\"412\":1}}],[\"不会越界\",{\"1\":{\"412\":1}}],[\"不会再加深越界\",{\"1\":{\"412\":2}}],[\"不会影响其他的图片缓存\",{\"1\":{\"384\":1}}],[\"不会触发通知\",{\"1\":{\"322\":1}}],[\"不会重新创建\",{\"1\":{\"273\":1}}],[\"不会缩减\",{\"1\":{\"86\":1}}],[\"不会唤醒机器\",{\"1\":{\"12\":1}}],[\"不获取焦点\",{\"1\":{\"76\":1}}],[\"不能查找或者遍历\",{\"1\":{\"870\":1}}],[\"不能满足\",{\"1\":{\"848\":1}}],[\"不能满足时\",{\"1\":{\"847\":1}}],[\"不能从\",{\"1\":{\"841\":1}}],[\"不能输出\",{\"1\":{\"827\":1}}],[\"不能变的变量\",{\"1\":{\"723\":1}}],[\"不能安全写入\",{\"1\":{\"618\":1}}],[\"不能作为消费者调用\",{\"1\":{\"617\":1}}],[\"不能有重复的\",{\"1\":{\"724\":1}}],[\"不能有泛型数组\",{\"0\":{\"538\":1}}],[\"不能有多个\",{\"1\":{\"340\":1}}],[\"不能直接调用其\",{\"1\":{\"190\":1}}],[\"不能直接通过路径访问文件\",{\"1\":{\"5\":1}}],[\"不能以数字开头\",{\"1\":{\"104\":1}}],[\"不能单独存在\",{\"1\":{\"76\":1}}],[\"不能使\",{\"1\":{\"75\":1}}],[\"不支持普通的滑动\",{\"1\":{\"419\":1}}],[\"不支持\",{\"1\":{\"418\":1}}],[\"不支持静态变量\",{\"1\":{\"60\":1}}],[\"不支持方法重载\",{\"1\":{\"60\":1}}],[\"不要在onresume\",{\"1\":{\"41\":1}}],[\"距离开机时间多久后启用闹钟\",{\"1\":{\"12\":1}}],[\"距离系统启动后的时间\",{\"1\":{\"12\":1}}],[\"它可以允许数据在诸如屏幕旋转的变化中存活下来\",{\"1\":{\"785\":1}}],[\"它可以用来模仿简单的转换\",{\"1\":{\"629\":1}}],[\"它处理\",{\"1\":{\"765\":1}}],[\"它也会在所有的子作业执行结束前等待\",{\"1\":{\"643\":1}}],[\"它只会单向的传播并且当子作业自身执行失败的时候将它们全部取消\",{\"1\":{\"643\":1}}],[\"它只是发送事务数据并立即返回\",{\"1\":{\"83\":1}}],[\"它类似于常规的\",{\"1\":{\"641\":1,\"642\":1}}],[\"它将取消具有该异常的父协程\",{\"1\":{\"640\":1}}],[\"它将被挂起直到发送被调用\",{\"1\":{\"638\":1}}],[\"它将折叠\",{\"1\":{\"111\":1}}],[\"它运行的速度很快\",{\"1\":{\"629\":1,\"653\":1}}],[\"它力求帮助开发者实现高性能和高可控的序列化过程\",{\"1\":{\"580\":1}}],[\"它能够被编译器解析\",{\"1\":{\"564\":1}}],[\"它更希望将自己\",{\"1\":{\"445\":1}}],[\"它主要的作用是将上面提到的三部分组合起来\",{\"1\":{\"422\":1}}],[\"它追踪这些\",{\"1\":{\"409\":1}}],[\"它在initstate\",{\"1\":{\"405\":1}}],[\"它为\",{\"1\":{\"405\":1}}],[\"它\",{\"1\":{\"405\":1}}],[\"它借助于\",{\"1\":{\"404\":1}}],[\"它是如何实现滚动效果\",{\"1\":{\"433\":1}}],[\"它是如何实现联动滚动效果\",{\"1\":{\"402\":1}}],[\"它是否对嵌套滑动感兴趣\",{\"1\":{\"112\":1}}],[\"它的主要作用就是在\",{\"1\":{\"752\":1}}],[\"它的主要逻辑在\",{\"1\":{\"302\":1}}],[\"它的定义是\",{\"1\":{\"445\":1}}],[\"它的泛型指定了\",{\"1\":{\"438\":1}}],[\"它的\",{\"1\":{\"372\":1}}],[\"它实现了父类\",{\"1\":{\"358\":1}}],[\"它继承自\",{\"1\":{\"307\":1,\"315\":1}}],[\"它创建了真正在屏幕上渲染的\",{\"1\":{\"265\":1}}],[\"它没有名字也不需要注册\",{\"1\":{\"138\":1}}],[\"它不需要通过\",{\"1\":{\"112\":1}}],[\"它会替换原始闹钟\",{\"1\":{\"11\":1,\"15\":1}}],[\"它们遵守先进先出原则\",{\"1\":{\"638\":1}}],[\"它们可以帮助您最大限度地降低应用的资源要求\",{\"1\":{\"11\":1}}],[\"它们可让您按设定的时间和\",{\"1\":{\"11\":1}}],[\"它们在应用外部运行\",{\"1\":{\"11\":1}}],[\"等当前比较完成就和未比较的最后一位交换\",{\"1\":{\"897\":1}}],[\"等中的资源添加到assetmanager中\",{\"1\":{\"823\":1}}],[\"等由于路径不对\",{\"1\":{\"811\":1}}],[\"等步骤\",{\"1\":{\"791\":1}}],[\"等数据\",{\"1\":{\"757\":1}}],[\"等成功之后将其处理后返回给\",{\"1\":{\"748\":1}}],[\"等来说\",{\"1\":{\"748\":1}}],[\"等设置为传入的对象\",{\"1\":{\"748\":1}}],[\"等平台对应的具体实现\",{\"1\":{\"740\":1}}],[\"等既可\",{\"1\":{\"713\":1}}],[\"等接口\",{\"1\":{\"712\":1}}],[\"等处理完再读取的时候构建器生产的是\",{\"1\":{\"630\":1}}],[\"等处理点击事件等等\",{\"1\":{\"332\":1}}],[\"等同于只有一个实例的类\",{\"1\":{\"612\":1}}],[\"等类\",{\"1\":{\"814\":1}}],[\"等类型\",{\"1\":{\"540\":1}}],[\"等类的关系简单示意\",{\"1\":{\"355\":1}}],[\"等关键类不会被自定义的\",{\"1\":{\"485\":1}}],[\"等内存紧张的设备中的缓存\",{\"1\":{\"480\":1}}],[\"等框架\",{\"1\":{\"467\":1}}],[\"等时需要开启\",{\"1\":{\"446\":1}}],[\"等非\",{\"1\":{\"445\":1}}],[\"等填充\",{\"1\":{\"445\":1}}],[\"等基于\",{\"1\":{\"442\":1}}],[\"等三个属性的时候会触发\",{\"1\":{\"438\":1}}],[\"等这些继承自\",{\"1\":{\"430\":1}}],[\"等这样的需求\",{\"1\":{\"12\":1}}],[\"等完全下拉之后\",{\"1\":{\"427\":1}}],[\"等继承自\",{\"1\":{\"422\":1,\"433\":1}}],[\"等继承自scrollview的\",{\"1\":{\"402\":1}}],[\"等产生的\",{\"1\":{\"420\":1}}],[\"等于\",{\"1\":{\"418\":2,\"689\":1}}],[\"等效果\",{\"0\":{\"444\":1,\"445\":1},\"1\":{\"418\":1}}],[\"等结合计算之后\",{\"1\":{\"418\":1}}],[\"等结合使\",{\"1\":{\"314\":1}}],[\"等情况\",{\"1\":{\"412\":1}}],[\"等和滑动有关的事件转发给\",{\"1\":{\"404\":1}}],[\"等组装在一起\",{\"1\":{\"404\":1}}],[\"等组成\",{\"1\":{\"126\":1}}],[\"等分别修改\",{\"1\":{\"404\":1}}],[\"等进行封装的\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"等直接对\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"等图片的实现\",{\"1\":{\"398\":1}}],[\"等都存在此问题\",{\"1\":{\"376\":1}}],[\"等都约定俗成在\",{\"1\":{\"374\":1}}],[\"等都继承自\",{\"1\":{\"365\":1}}],[\"等一众\",{\"1\":{\"374\":1}}],[\"等一致的话才会被认为命中缓存\",{\"1\":{\"374\":1}}],[\"等一系列参数计算出实时的值\",{\"1\":{\"336\":1}}],[\"等能够更快地加载\",{\"1\":{\"365\":1}}],[\"等依赖变化时会调用的地方\",{\"1\":{\"365\":1}}],[\"等封装到\",{\"1\":{\"353\":1}}],[\"等适用于\",{\"1\":{\"340\":1}}],[\"等各类参数传递给\",{\"1\":{\"335\":1}}],[\"等属性的时候会触发\",{\"1\":{\"438\":1}}],[\"等属性的变化\",{\"1\":{\"355\":1}}],[\"等属性配置其与之前图层的叠加方式\",{\"1\":{\"334\":1}}],[\"等属性变化时自动渐变到新值的动画效果\",{\"1\":{\"312\":1}}],[\"等的具体地址\",{\"1\":{\"461\":1}}],[\"等的\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"等的复制保存在\",{\"1\":{\"334\":1}}],[\"等的生命周期\",{\"1\":{\"124\":1}}],[\"等动画\",{\"1\":{\"327\":1}}],[\"等获取当前值\",{\"1\":{\"327\":1}}],[\"等方法保存其他变量\",{\"1\":{\"584\":1}}],[\"等方法修改了\",{\"1\":{\"438\":1}}],[\"等方法最终都是调用\",{\"1\":{\"372\":1}}],[\"等方法\",{\"1\":{\"349\":1}}],[\"等方法计算合适的\",{\"1\":{\"332\":1}}],[\"等方法创建不同的\",{\"1\":{\"327\":1}}],[\"等方式读取\",{\"1\":{\"6\":1}}],[\"等计算出当前的\",{\"1\":{\"314\":1}}],[\"等决定动画的时长\",{\"1\":{\"312\":1}}],[\"等捕获\",{\"1\":{\"296\":1}}],[\"等提示并输出错误堆栈信息\",{\"1\":{\"295\":1}}],[\"等对应的\",{\"1\":{\"266\":1}}],[\"等添加到手机上的呢\",{\"1\":{\"251\":1}}],[\"等实现的\",{\"1\":{\"336\":1}}],[\"等实现动画\",{\"1\":{\"330\":1}}],[\"等实现\",{\"1\":{\"243\":1}}],[\"等实现一个透明背景的\",{\"1\":{\"166\":1}}],[\"等创建的方法外\",{\"1\":{\"230\":1}}],[\"等普通的\",{\"1\":{\"223\":1}}],[\"等式后面的所有数据都为已知或者在\",{\"1\":{\"196\":1}}],[\"等比拉伸控件大小\",{\"1\":{\"195\":1}}],[\"等到当前一轮的遍历完成之后\",{\"1\":{\"533\":1}}],[\"等到当前的执行完了\",{\"1\":{\"193\":1}}],[\"等到\",{\"1\":{\"241\":1,\"403\":1}}],[\"等到通过系统验证\",{\"1\":{\"176\":1}}],[\"等级最高\",{\"1\":{\"182\":1}}],[\"等与滑动有关的方法中都有直接或间接的调用\",{\"1\":{\"417\":1}}],[\"等与滑动相关的方法被调用时执行\",{\"1\":{\"415\":1}}],[\"等与\",{\"1\":{\"126\":1}}],[\"等可以监听\",{\"1\":{\"124\":1}}],[\"等单位转化的方法如下\",{\"1\":{\"101\":1}}],[\"等源码发现他的数组只会增加\",{\"1\":{\"86\":1}}],[\"等引起的\",{\"1\":{\"75\":1}}],[\"等做验证\",{\"1\":{\"66\":1}}],[\"等服务端回调时会执行对应方法\",{\"1\":{\"64\":1}}],[\"等\",{\"0\":{\"178\":1},\"1\":{\"30\":1,\"86\":1,\"104\":1,\"122\":2,\"126\":1,\"135\":1,\"221\":1,\"296\":1,\"309\":1,\"314\":2,\"329\":1,\"376\":1,\"398\":1,\"419\":2,\"422\":1,\"446\":1,\"484\":1,\"726\":2,\"753\":1,\"763\":1,\"768\":1}}],[\"等待一会儿就可以看到更新后的博客了\",{\"1\":{\"791\":1}}],[\"等待有空闲的\",{\"1\":{\"760\":1}}],[\"等待内部流处理完毕后\",{\"1\":{\"655\":1}}],[\"等待可中断\",{\"1\":{\"606\":1}}],[\"等待池中的线程不会竞争该对象的锁\",{\"1\":{\"561\":1}}],[\"等待池\",{\"1\":{\"561\":1}}],[\"等待执行\",{\"1\":{\"193\":1}}],[\"等待下次gc\",{\"1\":{\"89\":1}}],[\"等待\",{\"1\":{\"30\":1,\"137\":1,\"731\":1}}],[\"等等类型\",{\"1\":{\"583\":1}}],[\"等等都在\",{\"1\":{\"423\":1}}],[\"等等一系列与\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"等等绘制各种形状\",{\"1\":{\"334\":1}}],[\"等等\",{\"1\":{\"11\":1,\"103\":1,\"106\":1,\"781\":1}}],[\"5d7206c5f265da03ab427181\",{\"1\":{\"584\":1}}],[\"55\",{\"1\":{\"578\":1}}],[\"56\",{\"1\":{\"516\":2,\"805\":1}}],[\"560\",{\"1\":{\"100\":1}}],[\"560dpi\",{\"1\":{\"100\":1}}],[\"5要在初始化那一步才进行\",{\"1\":{\"495\":1}}],[\"5b35a75e51882574ea3a25e3\",{\"1\":{\"286\":1}}],[\"512\",{\"1\":{\"237\":2}}],[\"51162011\",{\"1\":{\"149\":1}}],[\"51637678https\",{\"1\":{\"77\":1}}],[\"50\",{\"1\":{\"434\":1,\"523\":1}}],[\"50sp\",{\"1\":{\"189\":1}}],[\"500dp\",{\"1\":{\"167\":1}}],[\"500f\",{\"1\":{\"146\":1}}],[\"50971606\",{\"1\":{\"33\":1}}],[\"59c9cd59f265da065754e6f1\",{\"1\":{\"139\":1}}],[\"59f8691b51882534af254317\",{\"1\":{\"136\":2}}],[\"5a6l5l2t\",{\"1\":{\"138\":1}}],[\"5287d090e777\",{\"1\":{\"111\":1}}],[\"537\",{\"1\":{\"731\":2}}],[\"53\",{\"1\":{\"100\":1,\"574\":1,\"904\":2}}],[\"54266101\",{\"1\":{\"62\":1}}],[\"579\",{\"1\":{\"13\":1}}],[\"5\",{\"0\":{\"30\":1,\"119\":1,\"468\":1,\"549\":1},\"1\":{\"11\":1,\"30\":1,\"100\":1,\"101\":1,\"196\":1,\"247\":1,\"276\":3,\"330\":1,\"400\":1,\"427\":3,\"492\":1,\"494\":1,\"495\":3,\"496\":2,\"497\":1,\"498\":1,\"513\":2,\"568\":1,\"576\":3,\"625\":1,\"630\":2,\"638\":2,\"651\":1,\"666\":3,\"674\":1,\"731\":1,\"733\":1,\"745\":1,\"805\":1,\"827\":3,\"828\":1,\"857\":1,\"890\":2,\"919\":1,\"921\":1}}],[\"每轮结束后max就表示这轮比较最大的值坐标\",{\"1\":{\"897\":1}}],[\"每棵树有且只有一个根\",{\"1\":{\"832\":1}}],[\"每隔\",{\"1\":{\"636\":1}}],[\"每年最开始的几天和最后的几天的week\",{\"1\":{\"575\":1,\"577\":1}}],[\"每执行一个方法就会产生一个栈帧并压入栈中\",{\"1\":{\"459\":1}}],[\"每当需要增长数组或获取数组大小或获取条目值时\",{\"1\":{\"523\":1}}],[\"每当对象需要\",{\"1\":{\"333\":1}}],[\"每当新的\",{\"1\":{\"333\":1}}],[\"每当\",{\"1\":{\"315\":1}}],[\"每一项的计算结构都依赖于前一项的计算\",{\"1\":{\"911\":1}}],[\"每一层上的所有结点都有两个子结点二叉树\",{\"1\":{\"862\":1}}],[\"每一轮开始的时候\",{\"1\":{\"532\":1}}],[\"每一个子作业应该通过异常处理机制处理自身的异常\",{\"1\":{\"644\":1}}],[\"每一个\",{\"1\":{\"371\":1}}],[\"每一帧刷新\",{\"1\":{\"327\":1}}],[\"每一帧刷新后\",{\"1\":{\"314\":1}}],[\"每一次比较都可能要交换元素\",{\"1\":{\"532\":1}}],[\"每一次向屏幕添加\",{\"1\":{\"189\":1}}],[\"每一次通过\",{\"1\":{\"36\":1}}],[\"每个数组只有一个元素\",{\"1\":{\"913\":1}}],[\"每个序列包含\",{\"1\":{\"913\":1}}],[\"每个子数组的有序都依赖于其子数组的有序\",{\"1\":{\"913\":1}}],[\"每个元素都会排好序\",{\"1\":{\"896\":1}}],[\"每个节点保存有父节点和子节点的引用\",{\"1\":{\"881\":1}}],[\"每个节点只有指向下一个节点的引用\",{\"1\":{\"881\":1}}],[\"每个节点都可以有\",{\"1\":{\"832\":1}}],[\"每个堆的节点都满足堆的条件\",{\"1\":{\"856\":1}}],[\"每个顶点出现且只出现一次\",{\"1\":{\"850\":1}}],[\"每个顶点只访问一次\",{\"1\":{\"847\":1}}],[\"每个viewmodel有一个xxxviewmodelfactory类\",{\"1\":{\"781\":1}}],[\"每个界面的xml中的布局信息\",{\"1\":{\"781\":1}}],[\"每个node包含了以下信息\",{\"1\":{\"500\":1}}],[\"每个栈帧\",{\"1\":{\"496\":1}}],[\"每个线程每次获取单例都要进入同步锁\",{\"1\":{\"546\":1}}],[\"每个线程都有一个\",{\"1\":{\"487\":1}}],[\"每个线程栈分配的内存越大\",{\"1\":{\"465\":1}}],[\"每个类由加载它的类加载器和类本身确定其唯一性\",{\"1\":{\"484\":1}}],[\"每个页面不能有多个相同\",{\"1\":{\"346\":1}}],[\"每个任务是相互独立的\",{\"1\":{\"292\":1}}],[\"每个端不一样\",{\"1\":{\"247\":1}}],[\"每个项目改变都会回调对应的onchange\",{\"1\":{\"187\":1}}],[\"每个进程的输出被当做下一个进程的输入\",{\"1\":{\"137\":1}}],[\"每个\",{\"1\":{\"126\":1,\"708\":1,\"781\":1}}],[\"每个渠道有不同的包名\",{\"1\":{\"105\":1}}],[\"每次插入红色节点\",{\"1\":{\"904\":1}}],[\"每次有大的就\",{\"1\":{\"896\":1}}],[\"每次比较当前最大的值\",{\"1\":{\"897\":1}}],[\"每次比较满足条件就会交换\",{\"1\":{\"896\":1}}],[\"每次比较前1~\",{\"1\":{\"896\":1,\"897\":1}}],[\"每次比较最大元素都会\",{\"1\":{\"896\":1}}],[\"每次比较的时候找到的两个数中的较大值并记下其位置\",{\"1\":{\"533\":1}}],[\"每次比较的时候不交换\",{\"1\":{\"533\":1}}],[\"每次选出当前未排序的元素中最大的元素并放到队尾\",{\"1\":{\"896\":1}}],[\"每次从后端rear插入\",{\"1\":{\"888\":1}}],[\"每次弹出优先级最高的元素\",{\"1\":{\"873\":1}}],[\"每次先弹出队首的元素\",{\"1\":{\"872\":1}}],[\"每次前进的步长是根据另外一个\",{\"1\":{\"827\":1}}],[\"每次前进的步长为当前查找次数的平方\",{\"1\":{\"827\":1}}],[\"每次前进的步长为\",{\"1\":{\"827\":1}}],[\"每次更新博客时只需要将写好的\",{\"1\":{\"791\":1}}],[\"每次更新博客内容都需要在更新完\",{\"1\":{\"791\":1}}],[\"每次使用网络请求时只需要选择get\",{\"1\":{\"708\":1}}],[\"每次使用之前检测是否有改权限\",{\"1\":{\"173\":1}}],[\"每次经过特定的延迟都会从该通道进行消费并产生\",{\"1\":{\"638\":1}}],[\"每次新值出来就会取消还没有处理结束的旧流的操作\",{\"1\":{\"631\":1}}],[\"每次写数据时对比当前值与持有值是否一致\",{\"1\":{\"609\":1}}],[\"每次生成的\",{\"1\":{\"557\":1}}],[\"每次修改\",{\"1\":{\"500\":1}}],[\"每次new\",{\"1\":{\"461\":1}}],[\"每次通过imageprovider\",{\"1\":{\"375\":1}}],[\"每次需要往屏幕上绘制内容时会依次遍历这四个列表\",{\"1\":{\"253\":1}}],[\"每次只能移动最顶端的圆盘\",{\"1\":{\"912\":1}}],[\"每次只能访问栈顶元素top\",{\"1\":{\"887\":1}}],[\"每次只能访问栈顶元素\",{\"1\":{\"871\":1}}],[\"每次只异步读取一部分文本\",{\"1\":{\"243\":1}}],[\"每次只读取\",{\"1\":{\"243\":1}}],[\"每次执行完一个\",{\"1\":{\"239\":1}}],[\"每次执行完\",{\"1\":{\"238\":1}}],[\"每次执行完毕都会先检查执行\",{\"1\":{\"221\":1}}],[\"每次处理\",{\"1\":{\"229\":1}}],[\"每次申请权限时更新计数器\",{\"1\":{\"173\":1}}],[\"每次重绘都会调用\",{\"1\":{\"75\":1}}],[\"每次\",{\"1\":{\"26\":2,\"112\":1,\"528\":1}}],[\"每次点击事件回调该方法\",{\"1\":{\"26\":1}}],[\"每次都会被调用\",{\"1\":{\"26\":1}}],[\"每十分钟循环一次\",{\"1\":{\"20\":1}}],[\"每\",{\"1\":{\"11\":1}}],[\"每小时一次\",{\"1\":{\"11\":1}}],[\"每天一次\",{\"1\":{\"11\":1}}],[\"每天都要提醒\",{\"1\":{\"9\":1}}],[\"每天在指定时间范围内\",{\"1\":{\"9\":1}}],[\"则子节点必须是黑色\",{\"1\":{\"902\":1}}],[\"则剩下的肯定都小于该元素\",{\"1\":{\"898\":1}}],[\"则推出栈中的元素\",{\"1\":{\"890\":1}}],[\"则压入栈中\",{\"1\":{\"890\":1}}],[\"则它就是满二叉树\",{\"1\":{\"862\":1}}],[\"则它将被挂起直到接收被调用\",{\"1\":{\"638\":1}}],[\"则各个相关元素下标如下\",{\"1\":{\"857\":1}}],[\"则称这两个顶点是邻接的\",{\"1\":{\"841\":1}}],[\"则按照\",{\"1\":{\"836\":2}}],[\"则按照父级的最小尺寸来\",{\"1\":{\"439\":1}}],[\"则该二叉树称为二叉搜索树\",{\"1\":{\"833\":1}}],[\"则走过一定的步长找到另外一个空位\",{\"1\":{\"827\":1}}],[\"则充当布局\",{\"1\":{\"784\":1}}],[\"则管理着一个从\",{\"1\":{\"781\":1}}],[\"则优先调用子类方法\",{\"1\":{\"728\":1}}],[\"则押平后为\",{\"1\":{\"631\":1}}],[\"则其他子协程都会被取消\",{\"1\":{\"623\":1}}],[\"则有以下三种实现方式\",{\"1\":{\"618\":1}}],[\"则最后一个变量后为\",{\"1\":{\"612\":1}}],[\"则除了互斥锁的开销外\",{\"1\":{\"609\":1}}],[\"则就有可能发生\",{\"1\":{\"604\":1}}],[\"则很明显2010\",{\"1\":{\"576\":1}}],[\"则这个对象在所有的线程中还是共享的\",{\"1\":{\"529\":1}}],[\"则这里\",{\"1\":{\"413\":1}}],[\"则默认的父加载器为appclassloader\",{\"1\":{\"485\":1}}],[\"则默认为\",{\"1\":{\"36\":1}}],[\"则删除\",{\"1\":{\"474\":1}}],[\"则计数器为空\",{\"1\":{\"462\":1}}],[\"则内容无法滑动\",{\"1\":{\"434\":1}}],[\"则执行完\",{\"1\":{\"418\":1}}],[\"则返回\",{\"1\":{\"413\":1}}],[\"则返回的是背景的minimumwidth的值和android\",{\"1\":{\"159\":1}}],[\"则返回的是\",{\"1\":{\"71\":1,\"159\":1}}],[\"则根据\",{\"1\":{\"397\":1}}],[\"则根据这些值计算\",{\"1\":{\"336\":1}}],[\"则将上述序列再次归并\",{\"1\":{\"913\":1}}],[\"则将该点和插入点交换\",{\"1\":{\"898\":1}}],[\"则将\",{\"1\":{\"534\":1}}],[\"则将红黑树转化为链表\",{\"1\":{\"501\":1}}],[\"则将链表转化为红黑树\",{\"1\":{\"501\":1,\"505\":1}}],[\"则将一个字节数组转化为一个类的实例\",{\"1\":{\"486\":1}}],[\"则将图片绘制到surface中并返回textureid等信息\",{\"1\":{\"398\":1}}],[\"则将图片写入文件缓存\",{\"1\":{\"383\":1}}],[\"则将其转到新的方向\",{\"1\":{\"351\":1}}],[\"则展示占位\",{\"1\":{\"347\":1}}],[\"则上述步骤又会反向\",{\"1\":{\"341\":1}}],[\"则应该返回\",{\"1\":{\"333\":1}}],[\"则应该使用\",{\"1\":{\"302\":1}}],[\"则切换到第二个并不会调用\",{\"1\":{\"317\":1}}],[\"则更新其\",{\"1\":{\"305\":1}}],[\"则只会\",{\"1\":{\"412\":1}}],[\"则只会被drawn一次\",{\"1\":{\"278\":1}}],[\"则只是\",{\"1\":{\"35\":1}}],[\"则调用bootstrap\",{\"1\":{\"485\":1}}],[\"则调用\",{\"1\":{\"237\":1,\"485\":1}}],[\"则本步也是activity等\",{\"1\":{\"217\":1}}],[\"则是在本文最开始的mplatform提供的线程中进行\",{\"1\":{\"712\":1}}],[\"则是任何可迭代数据都有的用来遍历的方法\",{\"1\":{\"612\":1}}],[\"则是与\",{\"1\":{\"420\":1}}],[\"则是根据\",{\"1\":{\"417\":1}}],[\"则是负责实际绘制\",{\"1\":{\"335\":1}}],[\"则是目录路径等等\",{\"1\":{\"243\":1,\"244\":1}}],[\"则是文件路径\",{\"1\":{\"243\":1,\"244\":1}}],[\"则是数据\",{\"1\":{\"243\":1}}],[\"则是窗口的尺寸\",{\"1\":{\"158\":1}}],[\"则是指定绑定时是否自动创建\",{\"1\":{\"38\":1}}],[\"则恢复进程\",{\"1\":{\"137\":1}}],[\"则操作资源并将信号量\",{\"1\":{\"137\":1}}],[\"则无法作用到对应的图形\",{\"1\":{\"131\":1}}],[\"则实际负责数据读写\",{\"1\":{\"126\":1}}],[\"则使用\",{\"1\":{\"126\":1}}],[\"则不用\",{\"1\":{\"726\":1}}],[\"则不允许这个\",{\"1\":{\"621\":1}}],[\"则不能和\",{\"1\":{\"205\":1}}],[\"则不依赖上述二者方便调试和复用\",{\"1\":{\"126\":1}}],[\"则不会发送\",{\"1\":{\"412\":1}}],[\"则不会有任何影响\",{\"1\":{\"83\":1}}],[\"则不会回调本方法\",{\"1\":{\"26\":1}}],[\"则负责实现具体逻辑\",{\"1\":{\"126\":1}}],[\"则负责存储数据\",{\"1\":{\"123\":1}}],[\"则在图中不存在从\",{\"1\":{\"850\":1}}],[\"则在性能方面不行\",{\"1\":{\"771\":1}}],[\"则在调用协程运行\",{\"1\":{\"629\":1}}],[\"则在此分配具体值\",{\"1\":{\"495\":1}}],[\"则在此过程中\",{\"1\":{\"304\":1}}],[\"则在父级给的最大尺寸内展示一部分\",{\"1\":{\"440\":1}}],[\"则在这里与\",{\"1\":{\"123\":1}}],[\"则在窗户中看到的效果是景色向窗户左边移动\",{\"1\":{\"75\":1}}],[\"则需要在子类定义时传入父类\",{\"1\":{\"728\":1}}],[\"则需要子类自己处理\",{\"1\":{\"310\":1}}],[\"则需要手动关闭这个标志\",{\"1\":{\"161\":1}}],[\"则需要\",{\"1\":{\"112\":1,\"359\":1}}],[\"则需要设置alarmmanager\",{\"1\":{\"14\":1}}],[\"则依赖\",{\"1\":{\"112\":1}}],[\"则取反得到应该插入的位置\",{\"1\":{\"87\":1}}],[\"则取消任务\",{\"1\":{\"21\":1}}],[\"则直接打印\",{\"1\":{\"890\":1}}],[\"则直接插入value\",{\"1\":{\"501\":1}}],[\"则直接覆盖\",{\"1\":{\"87\":1}}],[\"则直接返回服务端的\",{\"1\":{\"71\":1}}],[\"则可能导致\",{\"1\":{\"333\":1}}],[\"则可能出现第三方\",{\"1\":{\"6\":1}}],[\"则可以指定流创建的协程上下文\",{\"1\":{\"629\":1}}],[\"则可以使用\",{\"1\":{\"329\":1}}],[\"则可以根据不同的需要切换不同的livedata\",{\"1\":{\"187\":1}}],[\"则可以更改\",{\"1\":{\"75\":1}}],[\"则表示该类group<t>满足\",{\"1\":{\"618\":1}}],[\"则表示\",{\"1\":{\"75\":1}}],[\"则代表认为滑动开始的最小距离\",{\"1\":{\"74\":1}}],[\"则代表自动创建\",{\"1\":{\"38\":1}}],[\"则通知也会被删除\",{\"1\":{\"43\":1}}],[\"则\",{\"1\":{\"36\":1,\"182\":1,\"475\":1,\"507\":1,\"538\":1,\"609\":1,\"625\":1}}],[\"则即使有\",{\"1\":{\"36\":1}}],[\"则整个控件的上下中间显示\",{\"1\":{\"33\":1}}],[\"则阻塞当前进程\",{\"1\":{\"30\":1}}],[\"则又一层层向上返回\",{\"1\":{\"28\":1}}],[\"则会返回null\",{\"1\":{\"638\":1}}],[\"则会挂起直到\",{\"1\":{\"629\":1}}],[\"则会序列化失败notserializableexception\",{\"1\":{\"581\":1}}],[\"则会报错\",{\"1\":{\"426\":1}}],[\"则会消耗完\",{\"1\":{\"418\":1}}],[\"则会再次从网络加载\",{\"1\":{\"376\":1}}],[\"则会展示\",{\"1\":{\"344\":1}}],[\"则会监听其变化\",{\"1\":{\"333\":1}}],[\"则会重新监听以触发\",{\"1\":{\"332\":1}}],[\"则会执行\",{\"1\":{\"332\":1}}],[\"则会执行本地对接口\",{\"1\":{\"138\":1}}],[\"则会先恢复到\",{\"1\":{\"418\":2}}],[\"则会先用构造方法创建\",{\"1\":{\"253\":1}}],[\"则会先执行montouchlistener\",{\"1\":{\"27\":1}}],[\"则会被添加到\",{\"1\":{\"235\":1}}],[\"则会一直返回\",{\"1\":{\"172\":1}}],[\"则会调用其\",{\"1\":{\"27\":1}}],[\"则会调用dispatchtransformedtouchevent\",{\"1\":{\"26\":1}}],[\"则会在刚开始的两三次出现间隔时间小于指定时间的情况\",{\"1\":{\"13\":1}}],[\"则闹钟会立即触发\",{\"1\":{\"11\":1}}],[\"请传入\",{\"1\":{\"358\":1}}],[\"请别人在适当的时候执行\",{\"1\":{\"183\":1}}],[\"请勿在更新\",{\"1\":{\"126\":1}}],[\"请避免在\",{\"1\":{\"126\":1}}],[\"请求指令\",{\"1\":{\"244\":1}}],[\"请求操作为\",{\"1\":{\"243\":1}}],[\"请求网络\",{\"0\":{\"186\":1}}],[\"请求登录\",{\"1\":{\"126\":1}}],[\"请求通过model请求网络\",{\"1\":{\"124\":1}}],[\"请求数据等\",{\"1\":{\"123\":1}}],[\"请求系统裁剪并返回图片为例展示对应的适配方法\",{\"1\":{\"5\":1}}],[\"请问两种获取屏幕密度的方式有什么区别\",{\"1\":{\"102\":1}}],[\"请参阅选择闹钟类型\",{\"1\":{\"11\":1}}],[\"如依次插入如下值\",{\"1\":{\"904\":1}}],[\"如1\",{\"1\":{\"890\":2}}],[\"如尾端→前端小→大\",{\"1\":{\"889\":1}}],[\"如a\",{\"1\":{\"879\":1}}],[\"如联网\",{\"1\":{\"787\":1}}],[\"如硬盘\",{\"1\":{\"686\":1}}],[\"如如下子树\",{\"1\":{\"665\":1}}],[\"如flow<string>\",{\"1\":{\"655\":1}}],[\"如flow<flow<string>>\",{\"1\":{\"655\":1}}],[\"如list等\",{\"1\":{\"650\":1}}],[\"如配合支持协程的\",{\"1\":{\"622\":1}}],[\"如每个线程的\",{\"1\":{\"608\":1}}],[\"如<t>会被擦除为objet\",{\"1\":{\"536\":1}}],[\"如s\",{\"1\":{\"461\":1}}],[\"如hello\",{\"1\":{\"461\":1}}],[\"如数组\",{\"1\":{\"457\":1}}],[\"如上图所示\",{\"1\":{\"355\":1}}],[\"如上节分析的\",{\"1\":{\"265\":1}}],[\"如下图就是一个完全二叉树\",{\"1\":{\"863\":1}}],[\"如下图就将复制次数从\",{\"1\":{\"857\":1}}],[\"如下代码虽然在编译期不会报错\",{\"1\":{\"538\":1}}],[\"如下\",{\"1\":{\"264\":1,\"538\":1,\"833\":1}}],[\"如下载等\",{\"1\":{\"36\":1}}],[\"如用户点击\",{\"1\":{\"221\":1}}],[\"如x\",{\"1\":{\"153\":1}}],[\"如何修改环境变量\",{\"1\":{\"803\":1}}],[\"如何根据\",{\"1\":{\"439\":1}}],[\"如何监听使用\",{\"1\":{\"370\":1}}],[\"如何获取变化的值\",{\"1\":{\"310\":1}}],[\"如何实现\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"如何与\",{\"1\":{\"138\":1}}],[\"如何处理两个图形重合部分的颜色变化\",{\"1\":{\"130\":1}}],[\"如何构建\",{\"1\":{\"128\":1}}],[\"如图\",{\"1\":{\"109\":1,\"137\":1,\"903\":1,\"912\":1}}],[\"如此反复直到\",{\"1\":{\"919\":1}}],[\"如此反复直到绘制滑动完毕\",{\"1\":{\"75\":1}}],[\"如此便没有发生类型擦除\",{\"1\":{\"621\":1}}],[\"如此可见\",{\"1\":{\"382\":1}}],[\"如此循环直到子\",{\"1\":{\"26\":1}}],[\"如内存不足\",{\"1\":{\"38\":1}}],[\"如\",{\"1\":{\"36\":1,\"76\":2,\"140\":1,\"221\":1,\"288\":1,\"467\":1,\"473\":1,\"568\":1,\"594\":1,\"698\":1,\"726\":1,\"827\":1,\"911\":1}}],[\"如果a>b\",{\"1\":{\"896\":1}}],[\"如果x优先于top\",{\"1\":{\"890\":1}}],[\"如果t<n\",{\"1\":{\"880\":1}}],[\"如果t==n那么查找结束\",{\"1\":{\"880\":1}}],[\"如果数组和链表都很慢时\",{\"1\":{\"869\":1}}],[\"如果将二叉树每层从左到右遍历\",{\"1\":{\"863\":1}}],[\"如果每次插入时候只保存数据\",{\"1\":{\"860\":1}}],[\"如果每次比较都需要交换数据的话会复制很多次\",{\"1\":{\"857\":1}}],[\"如果右节点比较大\",{\"1\":{\"859\":1}}],[\"如果左节点比较大\",{\"1\":{\"859\":1}}],[\"如果左节点大于本节点则交换\",{\"1\":{\"859\":1}}],[\"如果遇到比max大的\",{\"1\":{\"897\":1}}],[\"如果遇到比当前值top大的就将其复制到当前位置toindex\",{\"1\":{\"859\":1}}],[\"如果遇到优化失效的\",{\"1\":{\"766\":1}}],[\"如果小于则交换\",{\"1\":{\"859\":1}}],[\"如果父节点比插入值小\",{\"1\":{\"858\":1}}],[\"如果父类未初始化\",{\"1\":{\"497\":1}}],[\"如果顶点没有后继点\",{\"1\":{\"850\":1}}],[\"如果栈不为空\",{\"1\":{\"847\":1}}],[\"如果边被赋予一定的权值\",{\"1\":{\"841\":1}}],[\"如果图的每一条边的权值都互不相同\",{\"1\":{\"849\":1}}],[\"如果图的顶点只能从\",{\"1\":{\"841\":1}}],[\"如果图片还在加载中\",{\"1\":{\"376\":1}}],[\"如果该点没有未访问的邻接点\",{\"1\":{\"848\":1}}],[\"如果该子节点还有右子节点\",{\"1\":{\"836\":1}}],[\"如果该方法返回\",{\"1\":{\"27\":1}}],[\"如果二叉树的左子节点的关键字小于该节点\",{\"1\":{\"833\":1}}],[\"如果显示出\",{\"1\":{\"802\":1}}],[\"如果熟悉\",{\"1\":{\"800\":1}}],[\"如果程序调用计数器\",{\"1\":{\"768\":1}}],[\"如果成功运行了就更新上面的缓存\",{\"1\":{\"767\":1}}],[\"如果空闲count\",{\"1\":{\"760\":1}}],[\"如果以上都不满足\",{\"1\":{\"757\":1}}],[\"如果命名关键词前面有可变参数\",{\"1\":{\"726\":1}}],[\"如果你不想手动去合并\",{\"1\":{\"673\":1}}],[\"如果本地的版本不是最新的\",{\"1\":{\"673\":1}}],[\"如果推断出的该\",{\"1\":{\"663\":1}}],[\"如果只有这一个参数时\",{\"1\":{\"662\":1}}],[\"如果协程遇到除\",{\"1\":{\"640\":1}}],[\"如果接收先被调用\",{\"1\":{\"638\":1}}],[\"如果发送先被调用\",{\"1\":{\"638\":1}}],[\"如果构建运行的快\",{\"1\":{\"629\":1}}],[\"如果强行转换上下文会出错\",{\"1\":{\"629\":1}}],[\"如果使用这个方法更新\",{\"1\":{\"625\":1}}],[\"如果使用默认的\",{\"1\":{\"415\":1}}],[\"如果代码1是启动协程\",{\"1\":{\"623\":1}}],[\"如果中断其运行并运行其他的线程\",{\"1\":{\"608\":1}}],[\"如果中间通过\",{\"1\":{\"332\":1}}],[\"如果其他线程也用到了该数据则可能会出现问题\",{\"1\":{\"601\":1}}],[\"如果包含一个文件描述符\",{\"1\":{\"594\":1}}],[\"如果检测到当前对象是externalizable时\",{\"1\":{\"591\":1}}],[\"如果一个二叉树的层数为\",{\"1\":{\"862\":1}}],[\"如果一个邻接点再没有未访问的邻接点\",{\"1\":{\"847\":1}}],[\"如果一个类实现了serializable接口\",{\"1\":{\"585\":1}}],[\"如果一个类实现了序列化\",{\"1\":{\"585\":1}}],[\"如果一段代码中有连续的锁\",{\"1\":{\"609\":1}}],[\"如果一开始两个\",{\"1\":{\"317\":1}}],[\"如果采用readresolve实现的话\",{\"1\":{\"583\":1}}],[\"如果依赖\",{\"1\":{\"583\":1}}],[\"如果依赖于\",{\"1\":{\"232\":1}}],[\"如果class实现了readresolve\",{\"1\":{\"583\":1}}],[\"如果注解中的值不是\",{\"1\":{\"568\":1}}],[\"如果注册了\",{\"1\":{\"27\":2}}],[\"如果唯一唤醒的线程阻塞了并依赖其他线程唤醒\",{\"1\":{\"561\":1}}],[\"如果要执行的方法和\",{\"1\":{\"662\":1}}],[\"如果要遍历计算\",{\"1\":{\"516\":1}}],[\"如果要更新状态\",{\"1\":{\"271\":1}}],[\"如果红黑树数量小于\",{\"1\":{\"501\":1}}],[\"如果内存空间紧张而对时间效率要求不高\",{\"1\":{\"500\":1}}],[\"如果内存空间很多而又对时间效率要求很高\",{\"1\":{\"500\":1}}],[\"如果类没有静态赋值\",{\"1\":{\"497\":1}}],[\"如果java\",{\"1\":{\"497\":1}}],[\"如果虚拟机栈可以动态扩展\",{\"1\":{\"459\":1}}],[\"如果直接在\",{\"1\":{\"445\":1}}],[\"如果直接继承自\",{\"1\":{\"159\":1}}],[\"如果没法判断则抛出\",{\"1\":{\"424\":1}}],[\"如果没有可以访问的邻接点\",{\"1\":{\"848\":1}}],[\"如果没有可用的\",{\"1\":{\"244\":1}}],[\"如果没有指定则锁定对应的类对象或\",{\"1\":{\"603\":1}}],[\"如果没有指定\",{\"1\":{\"582\":1,\"625\":1}}],[\"如果没有指定父加载器\",{\"1\":{\"485\":1}}],[\"如果没有指定或者\",{\"1\":{\"436\":1}}],[\"如果没有加载到再依次经过extention\",{\"1\":{\"485\":1}}],[\"如果没有则调用imageprovider\",{\"1\":{\"374\":1}}],[\"如果没有满足条件的内置显式动画\",{\"1\":{\"312\":1}}],[\"如果没有权限则检测是否需要向用户解释为什么需要该权限activitycompat\",{\"1\":{\"172\":1}}],[\"如果没有\",{\"1\":{\"87\":1,\"418\":1}}],[\"如果支持泛型数组\",{\"1\":{\"538\":1}}],[\"如果支持\",{\"1\":{\"418\":1}}],[\"如果还不行再去执行阻塞操作\",{\"1\":{\"609\":1}}],[\"如果还是没有加载到该类\",{\"1\":{\"485\":1}}],[\"如果还是失败\",{\"1\":{\"383\":1}}],[\"如果还有剩下的\",{\"1\":{\"418\":2}}],[\"如果都没有滑动\",{\"1\":{\"417\":1}}],[\"如果都没有则会尝试执行传入的\",{\"1\":{\"376\":1}}],[\"如果可以\",{\"1\":{\"413\":1}}],[\"如果可以更新就更新否则就创建新的\",{\"1\":{\"263\":1}}],[\"如果为空再去考虑处理普通消息\",{\"1\":{\"745\":1}}],[\"如果为\",{\"1\":{\"412\":1}}],[\"如果向上滑动并且已经\",{\"1\":{\"412\":1}}],[\"如果向下滑动\",{\"1\":{\"412\":1}}],[\"如果这个对象的\",{\"1\":{\"594\":1}}],[\"如果这个threadlocal对象没有被引用\",{\"1\":{\"528\":1}}],[\"如果这二者都未命中缓存则从网络下载图片\",{\"1\":{\"385\":1}}],[\"如果这些动画还无法满足需求\",{\"1\":{\"336\":1}}],[\"如果从网络成功加载图片\",{\"1\":{\"383\":1}}],[\"如果快速滑动会导致\",{\"1\":{\"376\":1}}],[\"如果被监听的话\",{\"1\":{\"375\":1}}],[\"如果被点击了\",{\"1\":{\"153\":1}}],[\"如果想要自己处理序列化的过程\",{\"1\":{\"584\":1}}],[\"如果想要更深入的控制动画\",{\"1\":{\"302\":1}}],[\"如果想随时间变化\",{\"1\":{\"355\":1}}],[\"如果此值不为\",{\"1\":{\"344\":1}}],[\"如果又从\",{\"1\":{\"341\":1}}],[\"如果前后\",{\"1\":{\"333\":1}}],[\"如果两个数值相差小于等于此值则认为二者相等\",{\"1\":{\"323\":1}}],[\"如果动画已经结束了\",{\"1\":{\"321\":1}}],[\"如果上述两种方式还无法满足需求\",{\"1\":{\"329\":1}}],[\"如果上述方法仍然无法满足动画需求\",{\"1\":{\"312\":1}}],[\"如果上一步是activity\",{\"1\":{\"217\":1}}],[\"如果需要的话暂停创建好的\",{\"1\":{\"759\":1}}],[\"如果需要缓存时\",{\"1\":{\"383\":1}}],[\"如果需要缓存图片\",{\"1\":{\"383\":1}}],[\"如果需要渐变透明\",{\"1\":{\"358\":1}}],[\"如果需要手动主动控制动画\",{\"1\":{\"309\":1}}],[\"如果需要精确闹钟需要使用\",{\"1\":{\"11\":1}}],[\"如果改变flexible的fit为flexfit\",{\"1\":{\"277\":1}}],[\"如果子widget不是const\",{\"1\":{\"271\":1}}],[\"如果widget是const的\",{\"1\":{\"269\":1}}],[\"如果widgetsbinding\",{\"1\":{\"253\":1}}],[\"如果他是第一个\",{\"1\":{\"235\":1}}],[\"如果value不是\",{\"1\":{\"223\":1}}],[\"如果value\",{\"1\":{\"223\":1}}],[\"如果找到满足条件的顶点\",{\"1\":{\"850\":1}}],[\"如果找到就返回对应的值\",{\"1\":{\"88\":1}}],[\"如果找不到才会再到\",{\"1\":{\"203\":1}}],[\"如果service类是第三方提供的类\",{\"1\":{\"202\":1}}],[\"如果service类的构造方法有变更\",{\"1\":{\"199\":1}}],[\"如果不满足可以通过以下方式修正\",{\"1\":{\"902\":1}}],[\"如果不行\",{\"1\":{\"609\":1}}],[\"如果不一致则会使反序列化失败\",{\"1\":{\"582\":1}}],[\"如果不同的thread使用的threadlocal变量保存的是同一个引用类型的对象\",{\"1\":{\"526\":1}}],[\"如果不将这个外部类设置为final的话\",{\"1\":{\"510\":1}}],[\"如果不需要缓存或者从缓存中读取\",{\"1\":{\"383\":1}}],[\"如果不止要展示动画\",{\"1\":{\"312\":1}}],[\"如果不是则会抛出\",{\"1\":{\"426\":1}}],[\"如果不是新的则\",{\"1\":{\"308\":1}}],[\"如果不是第一次请求该权限\",{\"1\":{\"173\":1}}],[\"如果不定义的话\",{\"1\":{\"295\":1}}],[\"如果不设置该属性\",{\"1\":{\"36\":1}}],[\"如果透明区域过小\",{\"1\":{\"131\":1}}],[\"如果在间隔还没到的时候调用tickerchannel\",{\"1\":{\"638\":1}}],[\"如果在第一次操作失败到第二次再次尝试操作之间\",{\"1\":{\"607\":1}}],[\"如果在\",{\"1\":{\"139\":1}}],[\"如果在这个方法中\",{\"1\":{\"112\":1}}],[\"如果在服务正在前台运行时将其停止\",{\"1\":{\"43\":1}}],[\"如果它的底部\",{\"1\":{\"111\":1}}],[\"如果视图只有底部\",{\"1\":{\"111\":1}}],[\"如果视图是部分可见的\",{\"1\":{\"111\":1}}],[\"如果mhashes\",{\"1\":{\"95\":1}}],[\"如果index<0则返回index\",{\"1\":{\"92\":1}}],[\"如果已有的\",{\"1\":{\"759\":1}}],[\"如果已经越界了\",{\"1\":{\"412\":1}}],[\"如果已经在顶部出现\",{\"1\":{\"412\":1}}],[\"如果已经超出范围\",{\"1\":{\"412\":1}}],[\"如果已经存在\",{\"1\":{\"351\":1}}],[\"如果已经拦截了\",{\"1\":{\"26\":1}}],[\"如果已存在值则直接覆盖\",{\"1\":{\"87\":1}}],[\"如果大量并发或者跨进程调用服务端的方法\",{\"1\":{\"82\":1}}],[\"如果是运算符\",{\"1\":{\"890\":2}}],[\"如果是操作数\",{\"1\":{\"890\":1}}],[\"如果是使用isolate\",{\"1\":{\"754\":1}}],[\"如果是调用isolate\",{\"1\":{\"753\":1}}],[\"如果是\",{\"1\":{\"516\":1,\"583\":1,\"591\":2,\"757\":3,\"890\":1}}],[\"如果是不同的key\",{\"1\":{\"505\":1}}],[\"如果是不同的key则先尝试以链表保存数据\",{\"1\":{\"505\":1}}],[\"如果是不同的进程\",{\"1\":{\"71\":1}}],[\"如果是同一个key则覆盖旧的值\",{\"1\":{\"505\":1}}],[\"如果是树\",{\"1\":{\"502\":1}}],[\"如果是链表\",{\"1\":{\"502\":1}}],[\"如果是大量\",{\"1\":{\"446\":1}}],[\"如果是垂直布局\",{\"1\":{\"439\":1}}],[\"如果是水平布局\",{\"1\":{\"439\":1}}],[\"如果是上述两种\",{\"1\":{\"424\":1}}],[\"如果是启动框架\",{\"1\":{\"254\":1}}],[\"如果是目录\",{\"1\":{\"243\":1,\"244\":1}}],[\"如果是文件\",{\"1\":{\"243\":1,\"244\":1}}],[\"如果是待完成的或者忽略错误的\",{\"1\":{\"232\":1}}],[\"如果是相同的进程\",{\"1\":{\"71\":1}}],[\"如果客户端和服务端运行在不同进程\",{\"1\":{\"63\":1}}],[\"如果客户端和服务端运行在同一进程\",{\"1\":{\"63\":1}}],[\"如果底层没有处理点击事件\",{\"1\":{\"28\":1}}],[\"如果有比插入点大的\",{\"1\":{\"898\":1}}],[\"如果有大的就记录下位置\",{\"1\":{\"897\":1}}],[\"如果有空闲的\",{\"1\":{\"759\":1}}],[\"如果有对象在内部类语句之后构造\",{\"1\":{\"604\":1}}],[\"如果有则抛出异常\",{\"1\":{\"500\":1}}],[\"如果有则继续相应操作\",{\"1\":{\"172\":1}}],[\"如果有缓存\",{\"1\":{\"376\":1}}],[\"如果有指定占位\",{\"1\":{\"347\":1}}],[\"如果有多个expanded的话\",{\"1\":{\"276\":1}}],[\"如果有返回对应index\",{\"1\":{\"92\":1}}],[\"如果有\",{\"1\":{\"87\":1,\"230\":1,\"370\":1,\"418\":1,\"439\":1}}],[\"如果有子\",{\"1\":{\"26\":1}}],[\"如果有能处理点击事件的子\",{\"1\":{\"26\":1}}],[\"如果\",{\"1\":{\"26\":1,\"27\":2,\"83\":1,\"85\":2,\"112\":1,\"137\":1,\"138\":1,\"157\":1,\"159\":2,\"161\":1,\"232\":2,\"235\":1,\"276\":1,\"305\":2,\"308\":2,\"310\":1,\"311\":1,\"333\":2,\"334\":1,\"350\":1,\"358\":1,\"376\":4,\"385\":1,\"413\":1,\"418\":3,\"419\":1,\"424\":1,\"434\":1,\"439\":3,\"519\":1,\"523\":2,\"534\":1,\"583\":1,\"587\":1,\"612\":1,\"629\":1,\"630\":1,\"697\":1,\"767\":1,\"848\":1}}],[\"如果设置了montouchlistener的话\",{\"1\":{\"26\":1}}],[\"如果设置的是setinexactrepeating\",{\"1\":{\"14\":1}}],[\"如果当前类没有\",{\"1\":{\"565\":1}}],[\"如果当前的\",{\"1\":{\"237\":1}}],[\"如果当前\",{\"1\":{\"26\":1,\"412\":1,\"760\":1}}],[\"如果触发的时间早于当前系统时间的话\",{\"1\":{\"13\":1}}],[\"如果系统在休眠中则不会唤醒\",{\"1\":{\"12\":1}}],[\"如果您指定的触发时间为过去的时间\",{\"1\":{\"11\":1}}],[\"如你所见\",{\"1\":{\"0\":1}}],[\"而希尔排序在刚开始排序时\",{\"1\":{\"919\":1}}],[\"而插入排序的增量一直是\",{\"1\":{\"919\":1}}],[\"而每个这样的问题的解决都依赖于other的解决\",{\"1\":{\"912\":1}}],[\"而平衡树则不会\",{\"1\":{\"869\":1}}],[\"而其他的平台的博客限制又太多\",{\"1\":{\"798\":1}}],[\"而其余场景中\",{\"1\":{\"418\":1}}],[\"而做出相应变化\",{\"1\":{\"785\":1}}],[\"而网络请求的回调\",{\"1\":{\"712\":1}}],[\"而网络图片由于网速等导致\",{\"1\":{\"376\":1}}],[\"而序列\",{\"1\":{\"650\":1}}],[\"而一个\",{\"1\":{\"645\":1}}],[\"而launchin可以指定其在单独的协程程序中启动流的集合\",{\"1\":{\"635\":1}}],[\"而跳过中间生产的这些值\",{\"1\":{\"630\":1}}],[\"而线程在使用时先从主内存中取到线程私有的工作内存中\",{\"1\":{\"601\":1}}],[\"而只是再次存储一份引用\",{\"1\":{\"587\":1}}],[\"而只能配合\",{\"1\":{\"75\":1}}],[\"而发送方的版本没有这些字段\",{\"1\":{\"584\":1}}],[\"而发送请求到\",{\"1\":{\"241\":1}}],[\"而2010\",{\"1\":{\"576\":1}}],[\"而通过打印这个simpledateformat\",{\"1\":{\"575\":1}}],[\"而通过比较\",{\"1\":{\"83\":1}}],[\"而y表示的是week\",{\"1\":{\"572\":1}}],[\"而没有\",{\"1\":{\"566\":1}}],[\"而<t\",{\"1\":{\"536\":1}}],[\"而u2是无符号的\",{\"1\":{\"519\":1}}],[\"而hashmap的长度length又只能是\",{\"1\":{\"504\":1}}],[\"而i\",{\"1\":{\"495\":1}}],[\"而defineclass\",{\"1\":{\"486\":1}}],[\"而displaymetrics\",{\"1\":{\"100\":1}}],[\"而因为不管是\",{\"1\":{\"426\":1}}],[\"而最小滑动范围为\",{\"1\":{\"412\":1}}],[\"而后者依赖用户来最终消耗异常\",{\"1\":{\"640\":1}}],[\"而后者又主要负责创建和更新继承自\",{\"1\":{\"405\":1}}],[\"而后者则可以动态改变\",{\"1\":{\"280\":1}}],[\"而对于powerimageloader\",{\"1\":{\"398\":1}}],[\"而对于内存限制较大的\",{\"1\":{\"85\":1}}],[\"而power\",{\"1\":{\"388\":1}}],[\"而使用flowon\",{\"1\":{\"629\":1}}],[\"而使用body提供在填充\",{\"1\":{\"402\":1}}],[\"而使用blankj的工具类\",{\"1\":{\"101\":1}}],[\"而使用\",{\"1\":{\"334\":1,\"393\":1,\"415\":1}}],[\"而此方法内部又是执行\",{\"1\":{\"319\":1}}],[\"而不用保持次数一致\",{\"1\":{\"744\":1}}],[\"而不必在编译时获取该类\",{\"1\":{\"552\":1}}],[\"而不必每次都使用\",{\"1\":{\"384\":1}}],[\"而不能保存其子类\",{\"1\":{\"539\":1}}],[\"而不同\",{\"1\":{\"412\":1}}],[\"而不会影响其他线程分毫\",{\"1\":{\"527\":1}}],[\"而不会\",{\"1\":{\"412\":1}}],[\"而不会走到这里来\",{\"1\":{\"296\":1}}],[\"而不是再次序列化\",{\"1\":{\"587\":1}}],[\"而不是普通的\",{\"1\":{\"430\":1}}],[\"而不是规则\",{\"1\":{\"128\":1}}],[\"而不是精确的setrepeating\",{\"1\":{\"11\":1}}],[\"而reified修饰的类型参数会保证将用户调用时写的类型string同时也写入到被调用的地方\",{\"1\":{\"621\":1}}],[\"而release模式返回的是灰色widget\",{\"1\":{\"295\":1}}],[\"而renderobject则是实际渲染的对象\",{\"1\":{\"269\":1}}],[\"而该方法返回了自定义的productmanagerstate类对象\",{\"1\":{\"282\":1}}],[\"而flexible则会告诉\",{\"1\":{\"277\":1}}],[\"而如果将最终要移动值保存在临时变量中\",{\"1\":{\"857\":1}}],[\"而如果将其修改为final则保证了局部变量与内部类使用的值是一致的\",{\"1\":{\"510\":1}}],[\"而如果serialversionuid一致\",{\"1\":{\"582\":1}}],[\"而如果我们把第一周最小天数minimaldaysinfirstweek改为5天\",{\"1\":{\"576\":1}}],[\"而如果给\",{\"1\":{\"415\":1}}],[\"而如果没有\",{\"1\":{\"403\":1}}],[\"而如果是更新了\",{\"1\":{\"332\":1}}],[\"而如果有特别频繁的\",{\"1\":{\"285\":1}}],[\"而如果flexible的fit是flexfit\",{\"1\":{\"276\":1}}],[\"而如果更改\",{\"1\":{\"75\":1}}],[\"而componentelement\",{\"1\":{\"270\":1}}],[\"而statefulwidget因为有state\",{\"1\":{\"269\":1}}],[\"而switchmap\",{\"1\":{\"187\":1}}],[\"而作为第一次创建的\",{\"1\":{\"259\":1}}],[\"而newwidget也就是\",{\"1\":{\"259\":1}}],[\"而结合上面的代码\",{\"1\":{\"228\":1}}],[\"而把依赖提供给使用该依赖的对象\",{\"1\":{\"199\":1}}],[\"而来\",{\"1\":{\"140\":2}}],[\"而根据\",{\"1\":{\"431\":1}}],[\"而根据这篇文章\",{\"1\":{\"138\":1}}],[\"而根据上图可知\",{\"1\":{\"33\":1}}],[\"而无需投机性优化\",{\"1\":{\"771\":1}}],[\"而无需依赖定时器或持续运行后台服务\",{\"1\":{\"11\":1}}],[\"而无法主动终止\",{\"1\":{\"329\":1}}],[\"而无须通过其它手段获得\",{\"1\":{\"138\":1}}],[\"而进程接受到信号后可以忽略\",{\"1\":{\"137\":1}}],[\"而挂起\",{\"1\":{\"137\":1}}],[\"而为了进一步降低\",{\"1\":{\"125\":1}}],[\"而且如果数组恰好是反序的\",{\"1\":{\"919\":1}}],[\"而且容易出错\",{\"1\":{\"800\":1}}],[\"而且更换电脑后这些环境都需要重新设置一次\",{\"1\":{\"791\":1}}],[\"而且根本不需要切换到不同的上下文\",{\"1\":{\"645\":1}}],[\"而且他还可以判断是否是异常退出\",{\"1\":{\"634\":1}}],[\"而且方法的调用和消息的方法可以从任何一方发起\",{\"1\":{\"286\":1}}],[\"而且\",{\"1\":{\"124\":1,\"400\":1}}],[\"而且过渡\",{\"1\":{\"30\":1}}],[\"而是保存一个用来存储这些数据的链表\",{\"1\":{\"827\":1}}],[\"而是经过转化之后的\",{\"1\":{\"763\":1}}],[\"而是随环境切换\",{\"1\":{\"624\":1}}],[\"而是受到当年的第一周\",{\"1\":{\"577\":1}}],[\"而是受到每年的第\",{\"1\":{\"575\":1}}],[\"而是将\",{\"1\":{\"261\":1}}],[\"而是通过他的build方法返回一个可以产生\",{\"1\":{\"265\":1}}],[\"而是通过\",{\"1\":{\"254\":1,\"492\":1}}],[\"而是通过v\",{\"1\":{\"125\":1}}],[\"而是在生成内部类的时候将局部变量的引用拷贝了一份到内部类中\",{\"1\":{\"510\":1}}],[\"而是在\",{\"1\":{\"189\":1}}],[\"而是baseline\",{\"1\":{\"153\":1}}],[\"而是\",{\"1\":{\"124\":1,\"415\":1}}],[\"而是从\",{\"1\":{\"33\":1}}],[\"而系统实际的\",{\"1\":{\"101\":1}}],[\"而屏幕的总\",{\"1\":{\"100\":1}}],[\"而在图片完全加载完成之前\",{\"1\":{\"376\":1}}],[\"而在分辨率为\",{\"1\":{\"100\":1}}],[\"而在\",{\"1\":{\"100\":1,\"349\":1,\"415\":1}}],[\"而保证了数组后面都是\",{\"1\":{\"90\":1}}],[\"而这就是递归\",{\"1\":{\"912\":1}}],[\"而这两个值都属于本地化值\",{\"1\":{\"577\":1}}],[\"而这两者又都继承自\",{\"1\":{\"424\":1}}],[\"而这本来是不允许的\",{\"1\":{\"538\":1}}],[\"而这一切都通过他的animate方法实现\",{\"1\":{\"357\":1}}],[\"而这个任务的内容便是开启messagehandler\",{\"1\":{\"761\":1}}],[\"而这个\",{\"1\":{\"408\":1}}],[\"而这个factory就是我们后面要将mainactivitymodule中的依赖实例通过appcomponent传递给mainactivity实例的关键\",{\"1\":{\"213\":1}}],[\"而这个对象\",{\"1\":{\"83\":1}}],[\"而这里的背景和前景都由传入的\",{\"1\":{\"335\":1}}],[\"而这里的\",{\"1\":{\"83\":1}}],[\"而这还是我已经发现的有明显谬论的地方\",{\"1\":{\"0\":1}}],[\"而messenger也是用aidl来实现的\",{\"1\":{\"69\":1}}],[\"而非编程的方式\",{\"1\":{\"784\":1}}],[\"而非默认的\",{\"1\":{\"737\":1}}],[\"而非新建的对象\",{\"1\":{\"583\":1}}],[\"而非直接复制全局变量的值\",{\"1\":{\"512\":1}}],[\"而非转发到\",{\"1\":{\"415\":1}}],[\"而非加载的图片\",{\"1\":{\"370\":1}}],[\"而非在\",{\"1\":{\"358\":1}}],[\"而非接口\",{\"1\":{\"203\":1}}],[\"而非android\",{\"1\":{\"116\":1}}],[\"而非像hashmap那样将其封装为node对象后再保存\",{\"1\":{\"85\":1}}],[\"而非\",{\"1\":{\"62\":1,\"82\":1,\"126\":1,\"179\":1,\"358\":2,\"397\":1,\"802\":1}}],[\"而\",{\"1\":{\"43\":1,\"75\":1,\"123\":1,\"126\":5,\"140\":1,\"205\":2,\"213\":1,\"226\":1,\"243\":1,\"278\":1,\"300\":1,\"311\":1,\"314\":1,\"343\":1,\"355\":1,\"359\":1,\"361\":1,\"376\":1,\"393\":2,\"400\":1,\"417\":1,\"420\":1,\"439\":1,\"440\":1,\"445\":1,\"497\":1,\"519\":1,\"547\":1,\"575\":1,\"612\":1,\"630\":1,\"919\":1}}],[\"而论\",{\"1\":{\"26\":1}}],[\"您可以安排定期执行操作\",{\"1\":{\"11\":1}}],[\"您可以将它们与广播接收器结合使用\",{\"1\":{\"11\":1}}],[\"您也可以使用它们来触发事件或操作\",{\"1\":{\"11\":1}}],[\"闹钟开始时间早于当前时间\",{\"1\":{\"13\":1}}],[\"闹钟触发的时间\",{\"1\":{\"13\":1}}],[\"闹钟触发的待定\",{\"1\":{\"11\":1}}],[\"闹钟有两个类型\",{\"1\":{\"12\":1}}],[\"闹钟的间隔\",{\"1\":{\"11\":1}}],[\"闹钟类型\",{\"0\":{\"12\":1},\"1\":{\"11\":1}}],[\"闹钟具有以下特征\",{\"1\":{\"11\":1}}],[\"闹钟主要用于在应用程序生命周期之外进行定时操作\",{\"1\":{\"11\":1}}],[\"据此更新数据\",{\"1\":{\"125\":1}}],[\"据\",{\"1\":{\"11\":1}}],[\"分成两个子数组分别排序\",{\"1\":{\"913\":1}}],[\"分支中source目录\",{\"1\":{\"795\":1}}],[\"分支\",{\"1\":{\"794\":1}}],[\"分支的文件\",{\"1\":{\"794\":1}}],[\"分支的结构\",{\"0\":{\"793\":1}}],[\"分支下\",{\"1\":{\"793\":1}}],[\"分配哪些类的实例\",{\"1\":{\"771\":1}}],[\"分配\",{\"1\":{\"759\":1}}],[\"分配的尺寸只比\",{\"1\":{\"405\":1}}],[\"分配的内存除了映射进了接收方进程里\",{\"1\":{\"138\":1}}],[\"分隔\",{\"1\":{\"612\":1,\"726\":1}}],[\"分组的方法\",{\"1\":{\"384\":1}}],[\"分段读取文件\",{\"1\":{\"243\":1}}],[\"分别再找一个枢纽\",{\"1\":{\"927\":1}}],[\"分别形成两个n\",{\"1\":{\"913\":1}}],[\"分别输入git\",{\"1\":{\"802\":1}}],[\"分别置于两个设备上\",{\"1\":{\"765\":1}}],[\"分别设置了\",{\"1\":{\"439\":1}}],[\"分别设置对应页面布局setcontentview\",{\"1\":{\"178\":1}}],[\"分别使用\",{\"1\":{\"431\":1}}],[\"分别会是\",{\"1\":{\"422\":1}}],[\"分别应用于\",{\"1\":{\"416\":1}}],[\"分别涉及到\",{\"1\":{\"398\":1}}],[\"分别采用\",{\"1\":{\"397\":1}}],[\"分别创建对应的\",{\"1\":{\"394\":1}}],[\"分别在两个\",{\"1\":{\"340\":1}}],[\"分别被认为是\",{\"1\":{\"319\":1}}],[\"分别为\",{\"1\":{\"182\":1}}],[\"分别是控制点\",{\"1\":{\"143\":1}}],[\"分别是控制点的\",{\"1\":{\"143\":1}}],[\"分别是\",{\"1\":{\"74\":1,\"246\":1,\"759\":2}}],[\"分类\",{\"0\":{\"132\":1},\"1\":{\"457\":1,\"516\":1}}],[\"分为阻塞和异步两种方式\",{\"1\":{\"708\":1}}],[\"分为有参和无参\",{\"1\":{\"612\":1}}],[\"分为两种\",{\"1\":{\"497\":1}}],[\"分为两类\",{\"1\":{\"492\":1}}],[\"分为多个种类\",{\"1\":{\"264\":1}}],[\"分为\",{\"1\":{\"126\":1,\"130\":1,\"836\":2}}],[\"分为三部分\",{\"1\":{\"126\":1}}],[\"分为从设备上次启动时间和精准时间两种\",{\"1\":{\"13\":1}}],[\"分发\",{\"1\":{\"418\":1}}],[\"分发到了\",{\"1\":{\"26\":1}}],[\"分发事件\",{\"1\":{\"26\":1}}],[\"分钟唤醒一次的闹钟\",{\"1\":{\"19\":1}}],[\"分钟\",{\"1\":{\"13\":1}}],[\"分钟一次\",{\"1\":{\"11\":1}}],[\"分析为何\",{\"1\":{\"418\":1}}],[\"分析完了runapp\",{\"1\":{\"257\":1}}],[\"分析一下在这个过程中涉及到的\",{\"1\":{\"251\":1}}],[\"分析上述代码的逻辑\",{\"1\":{\"125\":1}}],[\"分析可知\",{\"1\":{\"101\":1}}],[\"分析\",{\"0\":{\"11\":1,\"71\":1,\"276\":1,\"381\":1,\"706\":1},\"1\":{\"152\":1,\"781\":1}}],[\"分享文件也许要通过fileprovider生成uri并赋予对应的权限\",{\"1\":{\"5\":1}}],[\"分享的uri读写文件\",{\"1\":{\"5\":1}}],[\"精确的时间\",{\"1\":{\"10\":1,\"12\":1}}],[\"相应的操作符族称为联合操作符\",{\"1\":{\"631\":1}}],[\"相应的工作流程概览\",{\"1\":{\"71\":1}}],[\"相同\",{\"1\":{\"817\":1}}],[\"相同点\",{\"1\":{\"623\":1}}],[\"相同为\",{\"1\":{\"500\":1,\"507\":2}}],[\"相同的\",{\"1\":{\"340\":1}}],[\"相互比较两个数组每项大小\",{\"1\":{\"913\":1}}],[\"相互循环使用\",{\"1\":{\"474\":1}}],[\"相互之间没有间隙\",{\"1\":{\"444\":1}}],[\"相互借鉴\",{\"1\":{\"0\":1}}],[\"相交部分是\",{\"1\":{\"342\":2}}],[\"相当于super\",{\"1\":{\"617\":1}}],[\"相当于extend\",{\"1\":{\"617\":1}}],[\"相当于除以\",{\"1\":{\"507\":1}}],[\"相当于乘以\",{\"1\":{\"507\":1}}],[\"相当于给他指定了一个约束\",{\"1\":{\"439\":1}}],[\"相当于使用animatable<t>\",{\"1\":{\"361\":1}}],[\"相当于一个独立的图层\",{\"1\":{\"334\":1}}],[\"相当于\",{\"1\":{\"279\":1,\"612\":2,\"724\":2}}],[\"相关\",{\"0\":{\"710\":1},\"1\":{\"709\":1}}],[\"相关的数据\",{\"1\":{\"785\":1}}],[\"相关的类\",{\"1\":{\"254\":1}}],[\"相关的实现\",{\"1\":{\"243\":1}}],[\"相关知识\",{\"0\":{\"34\":1,\"68\":1,\"73\":1}}],[\"相反的方法\",{\"1\":{\"440\":1}}],[\"相反\",{\"1\":{\"111\":1,\"500\":1}}],[\"相比于list等整体执行完毕才进行下一级操作的\",{\"1\":{\"637\":1}}],[\"相比hashmap而言\",{\"1\":{\"86\":1}}],[\"相比之下\",{\"1\":{\"10\":1}}],[\"相对比较轻量\",{\"1\":{\"385\":1}}],[\"相对于使用\",{\"1\":{\"442\":1}}],[\"相对于之前的\",{\"1\":{\"342\":1}}],[\"相对于隐式动画\",{\"1\":{\"310\":1}}],[\"相对于\",{\"1\":{\"123\":1,\"138\":1,\"394\":1}}],[\"相对于当前\",{\"1\":{\"74\":1}}],[\"相对于手机屏幕原点的坐标\",{\"1\":{\"74\":1}}],[\"相对来说体验也好了很多\",{\"1\":{\"30\":1}}],[\"甚至是\",{\"1\":{\"769\":1}}],[\"甚至更加简洁\",{\"1\":{\"662\":1}}],[\"甚至在\",{\"1\":{\"460\":1}}],[\"甚至在低版本上workmanager底层也是通过alarmmanager实现的\",{\"1\":{\"10\":1}}],[\"甚至\",{\"1\":{\"397\":1}}],[\"甚至主\",{\"1\":{\"30\":1}}],[\"甚至设备关机重启等情况下也会被执行\",{\"1\":{\"10\":1}}],[\"退出命令行\",{\"1\":{\"719\":2}}],[\"退出当前\",{\"1\":{\"247\":2}}],[\"退出\",{\"1\":{\"10\":1,\"230\":1,\"239\":1,\"296\":1}}],[\"退出之后也可以使用\",{\"1\":{\"10\":1}}],[\"jxv\",{\"1\":{\"695\":1}}],[\"jcv\",{\"1\":{\"695\":1}}],[\"jmm\",{\"0\":{\"604\":1},\"1\":{\"601\":1,\"604\":1}}],[\"jtp01255\",{\"1\":{\"538\":1}}],[\"j+1\",{\"1\":{\"534\":1}}],[\"j++\",{\"1\":{\"532\":1,\"533\":1}}],[\"j\",{\"1\":{\"532\":8,\"533\":4,\"534\":6,\"538\":1,\"584\":1,\"587\":1,\"695\":1,\"921\":4}}],[\"jdk主目录的绝对路径\",{\"1\":{\"678\":1,\"679\":2}}],[\"jdk\",{\"0\":{\"676\":1,\"677\":1},\"1\":{\"519\":1,\"530\":1,\"576\":1,\"578\":1,\"677\":2,\"679\":1}}],[\"jdk1\",{\"0\":{\"511\":1},\"1\":{\"461\":4,\"497\":1,\"501\":6,\"505\":1,\"508\":2,\"519\":1,\"523\":1,\"575\":2,\"577\":1,\"579\":1,\"609\":1}}],[\"jls\",{\"1\":{\"511\":3}}],[\"japan\",{\"1\":{\"612\":2}}],[\"jar\",{\"1\":{\"484\":4,\"492\":1,\"517\":8}}],[\"java8\",{\"1\":{\"663\":3}}],[\"java默认只要次年的\",{\"1\":{\"575\":1}}],[\"javadoc\",{\"1\":{\"565\":1}}],[\"javazejian\",{\"1\":{\"550\":1}}],[\"javaworld\",{\"1\":{\"524\":1}}],[\"javap\",{\"1\":{\"521\":1}}],[\"javaagent\",{\"1\":{\"517\":2}}],[\"javaclass\",{\"1\":{\"823\":1}}],[\"javac\",{\"1\":{\"517\":2,\"521\":1,\"679\":3}}],[\"javase\",{\"1\":{\"492\":1,\"511\":1,\"552\":1,\"573\":1,\"578\":1}}],[\"javascript\",{\"1\":{\"247\":1}}],[\"java用于启动targetintent\",{\"1\":{\"178\":1}}],[\"java这个文件简单分析一下\",{\"1\":{\"71\":1}}],[\"java\",{\"0\":{\"117\":1,\"118\":1,\"179\":1,\"459\":1,\"464\":1,\"499\":1,\"509\":1,\"515\":2,\"525\":1,\"531\":1,\"535\":1,\"543\":1,\"551\":1,\"555\":1,\"559\":1,\"564\":1,\"565\":1,\"572\":1,\"580\":1,\"600\":1},\"1\":{\"26\":2,\"35\":3,\"57\":4,\"62\":4,\"63\":3,\"70\":1,\"71\":3,\"77\":1,\"82\":2,\"83\":1,\"85\":1,\"96\":6,\"105\":2,\"116\":1,\"117\":4,\"118\":1,\"138\":7,\"140\":3,\"141\":1,\"152\":2,\"153\":2,\"167\":2,\"178\":3,\"186\":1,\"189\":3,\"204\":1,\"454\":3,\"455\":1,\"460\":1,\"461\":1,\"462\":2,\"472\":1,\"474\":1,\"483\":1,\"486\":2,\"487\":1,\"489\":1,\"490\":5,\"492\":1,\"493\":2,\"495\":1,\"497\":1,\"498\":6,\"500\":1,\"506\":1,\"508\":4,\"510\":1,\"514\":1,\"516\":6,\"517\":11,\"519\":3,\"521\":3,\"524\":1,\"535\":2,\"536\":1,\"538\":2,\"542\":5,\"545\":1,\"547\":1,\"549\":1,\"550\":1,\"552\":1,\"553\":2,\"558\":1,\"562\":2,\"564\":2,\"565\":2,\"566\":1,\"571\":2,\"573\":1,\"575\":3,\"577\":2,\"578\":1,\"579\":1,\"580\":4,\"584\":3,\"587\":2,\"591\":1,\"594\":1,\"598\":5,\"601\":3,\"602\":3,\"603\":1,\"610\":1,\"612\":2,\"621\":1,\"640\":1,\"662\":1,\"663\":1,\"678\":1,\"679\":3,\"708\":1,\"724\":2,\"785\":1,\"814\":1,\"819\":1,\"823\":3,\"865\":1,\"883\":1},\"2\":{\"563\":1,\"599\":1}}],[\"jre\",{\"1\":{\"484\":2}}],[\"jvms\",{\"1\":{\"492\":2}}],[\"jvm\",{\"0\":{\"454\":1,\"483\":1,\"488\":1},\"1\":{\"454\":3,\"455\":2,\"459\":1,\"460\":1,\"469\":1,\"484\":1,\"490\":2,\"492\":2,\"496\":1,\"497\":2,\"498\":4,\"506\":1,\"516\":1,\"517\":1,\"519\":1,\"586\":1,\"604\":1,\"609\":3,\"610\":1},\"2\":{\"611\":1}}],[\"jpeg\",{\"1\":{\"365\":1}}],[\"jpg\",{\"1\":{\"137\":1,\"138\":1}}],[\"job\",{\"1\":{\"641\":1,\"642\":1}}],[\"jobs\",{\"1\":{\"10\":1}}],[\"jobscheduler\",{\"1\":{\"10\":1}}],[\"jonathan\",{\"1\":{\"539\":1,\"541\":1}}],[\"joindeadworkerslocked\",{\"1\":{\"761\":1}}],[\"joined\",{\"1\":{\"247\":1,\"761\":1}}],[\"join\",{\"0\":{\"560\":1},\"1\":{\"247\":1,\"383\":3,\"560\":6,\"562\":1,\"761\":6}}],[\"jsonoutput\",{\"1\":{\"737\":1}}],[\"json\",{\"0\":{\"734\":1},\"1\":{\"285\":1,\"730\":2,\"731\":2,\"735\":1,\"736\":1,\"737\":5,\"781\":1,\"807\":1}}],[\"jsonplaceholder\",{\"1\":{\"285\":1}}],[\"js\",{\"1\":{\"142\":1,\"243\":1,\"285\":1,\"748\":1,\"807\":1}}],[\"jni\",{\"1\":{\"140\":1,\"472\":1}}],[\"jul\",{\"1\":{\"578\":1}}],[\"july\",{\"1\":{\"578\":1}}],[\"jumpto\",{\"1\":{\"404\":1,\"412\":1,\"415\":1,\"417\":1,\"438\":1}}],[\"juejin\",{\"1\":{\"128\":1,\"136\":2,\"139\":1,\"286\":1,\"584\":1}}],[\"just\",{\"1\":{\"126\":1,\"231\":1,\"247\":1,\"281\":1,\"376\":1,\"417\":1,\"763\":1,\"767\":1,\"931\":1}}],[\"jetbrains\",{\"1\":{\"622\":2}}],[\"jetpack是\",{\"1\":{\"781\":1}}],[\"jetpackcompose\",{\"1\":{\"125\":1}}],[\"jetpack\",{\"0\":{\"780\":1},\"1\":{\"124\":1,\"126\":1,\"781\":6,\"783\":1,\"788\":2}}],[\"jessyan\",{\"1\":{\"100\":2,\"102\":1}}],[\"jit\",{\"0\":{\"764\":1},\"1\":{\"757\":3,\"763\":4,\"769\":1,\"770\":4,\"771\":6,\"772\":1}}],[\"jianshu\",{\"1\":{\"33\":1,\"77\":2,\"111\":1,\"139\":1,\"516\":1,\"667\":1}}],[\"jixiaoyong1995\",{\"1\":{\"62\":1,\"63\":1,\"196\":1,\"586\":1,\"794\":1}}],[\"jixiaoyong\",{\"1\":{\"3\":1,\"62\":1,\"63\":1,\"77\":1,\"116\":2,\"118\":2,\"141\":1,\"196\":1,\"221\":1,\"342\":1,\"586\":2,\"622\":1,\"718\":1,\"794\":10,\"811\":2}}],[\"b→c\",{\"1\":{\"850\":1}}],[\"b→a\",{\"1\":{\"841\":1}}],[\"bfsqueue\",{\"1\":{\"848\":1}}],[\"bfs\",{\"0\":{\"848\":1},\"1\":{\"846\":1,\"848\":2,\"851\":1}}],[\"bs4\",{\"1\":{\"737\":1}}],[\"b忽略最前面的空格\",{\"1\":{\"703\":1}}],[\"biginteger\",{\"1\":{\"614\":5}}],[\"big\",{\"1\":{\"408\":1,\"445\":1,\"921\":1}}],[\"bitmapdrawable\",{\"1\":{\"399\":2}}],[\"bitmap\",{\"1\":{\"398\":4,\"400\":1}}],[\"binaries\",{\"1\":{\"763\":1}}],[\"binarynode\",{\"1\":{\"833\":3,\"834\":1}}],[\"binary中的ast中解析产生对应的control\",{\"1\":{\"767\":1}}],[\"binary中读取出了class\",{\"1\":{\"766\":1}}],[\"binary生成machine\",{\"1\":{\"767\":1}}],[\"binary创建il然后转化为machine\",{\"1\":{\"766\":1}}],[\"binary加载到\",{\"1\":{\"766\":1}}],[\"binary然后交给\",{\"1\":{\"765\":1}}],[\"binary\",{\"1\":{\"492\":2,\"494\":1,\"752\":1,\"757\":4,\"763\":2,\"765\":2,\"767\":3,\"768\":1,\"771\":1}}],[\"binarysearchhashes\",{\"1\":{\"92\":1}}],[\"binarysearch\",{\"1\":{\"87\":2,\"88\":1,\"89\":1,\"523\":1}}],[\"bin\",{\"1\":{\"228\":1,\"237\":4,\"243\":2,\"244\":3,\"246\":1,\"247\":3,\"583\":1,\"671\":1,\"679\":4,\"680\":1,\"686\":2,\"722\":1,\"752\":2,\"757\":2}}],[\"bindviews\",{\"1\":{\"569\":1,\"570\":1}}],[\"bindview\",{\"1\":{\"568\":1,\"569\":5,\"570\":1}}],[\"bindunarycallbackguarded<timer>\",{\"1\":{\"233\":1}}],[\"bindcallback\",{\"1\":{\"224\":1}}],[\"bindcallbackguarded\",{\"1\":{\"224\":2,\"233\":1}}],[\"bindinjectorfactory\",{\"1\":{\"213\":1}}],[\"bindingadapter\",{\"1\":{\"784\":1}}],[\"bindingbase\",{\"1\":{\"253\":6,\"254\":1}}],[\"binding\",{\"1\":{\"124\":1,\"252\":1,\"253\":4,\"254\":1,\"255\":1,\"256\":1,\"496\":1,\"784\":2}}],[\"binds\",{\"1\":{\"213\":2}}],[\"bindservicedata\",{\"1\":{\"138\":2}}],[\"bindservice\",{\"1\":{\"35\":3,\"38\":2,\"41\":1,\"62\":1,\"138\":2}}],[\"bindwaitforinjectclass\",{\"1\":{\"213\":1}}],[\"bindactivity\",{\"1\":{\"38\":1}}],[\"binder获取到\",{\"1\":{\"83\":1}}],[\"binderdied\",{\"1\":{\"63\":2,\"65\":1}}],[\"binder\",{\"0\":{\"38\":1,\"65\":1,\"138\":1},\"1\":{\"38\":7,\"57\":1,\"63\":11,\"65\":1,\"70\":1,\"71\":8,\"72\":1,\"82\":1,\"83\":4,\"138\":33,\"140\":3}}],[\"bind\",{\"1\":{\"35\":1,\"38\":2,\"62\":1,\"138\":1,\"224\":1,\"233\":2}}],[\"bmp\",{\"1\":{\"365\":1}}],[\"btn\",{\"1\":{\"189\":2}}],[\"btn1\",{\"1\":{\"178\":1}}],[\"bg\",{\"1\":{\"167\":1,\"819\":1}}],[\"bc\",{\"1\":{\"142\":1}}],[\"blendmode\",{\"1\":{\"334\":1}}],[\"blue\",{\"1\":{\"276\":1,\"330\":1}}],[\"blueaccent\",{\"1\":{\"273\":1,\"342\":1}}],[\"blankj\",{\"1\":{\"101\":1}}],[\"blob\",{\"1\":{\"77\":1,\"121\":1,\"141\":1,\"243\":1,\"247\":1,\"342\":1,\"752\":2}}],[\"blockquotehexo\",{\"1\":{\"805\":1}}],[\"blockingqueue\",{\"1\":{\"636\":1,\"638\":1}}],[\"blocked\",{\"1\":{\"629\":1}}],[\"blockdatalong\",{\"1\":{\"583\":1}}],[\"blockdata\",{\"1\":{\"583\":1}}],[\"blocksize\",{\"1\":{\"243\":3}}],[\"blocks\",{\"1\":{\"243\":1,\"768\":1}}],[\"block\",{\"1\":{\"33\":1,\"49\":1,\"243\":3,\"632\":1,\"753\":2}}],[\"blog\",{\"1\":{\"33\":3,\"62\":1,\"71\":1,\"77\":1,\"104\":1,\"105\":1,\"128\":2,\"137\":2,\"138\":6,\"139\":1,\"149\":1,\"205\":1,\"206\":1,\"247\":1,\"490\":1,\"497\":1,\"519\":1,\"524\":1,\"528\":1,\"550\":1,\"718\":5,\"794\":4,\"806\":3,\"809\":1,\"811\":3,\"813\":4}}],[\"b\",{\"1\":{\"63\":1,\"138\":2,\"144\":3,\"182\":2,\"187\":3,\"341\":14,\"343\":2,\"344\":3,\"474\":4,\"532\":1,\"534\":3,\"619\":5,\"631\":2,\"659\":2,\"744\":2,\"766\":1,\"850\":2,\"896\":3,\"913\":1}}],[\"bypasses\",{\"1\":{\"752\":1}}],[\"bytecontent\",{\"1\":{\"557\":2}}],[\"byte\",{\"1\":{\"516\":4,\"557\":9,\"568\":1,\"586\":1}}],[\"bytearr\",{\"1\":{\"486\":3}}],[\"bytearray\",{\"1\":{\"486\":1}}],[\"byteoutputstream\",{\"1\":{\"486\":1}}],[\"bytebuffer\",{\"1\":{\"486\":3}}],[\"bytedata\",{\"1\":{\"371\":1}}],[\"bytesbuilder\",{\"1\":{\"243\":1}}],[\"bytes\",{\"1\":{\"237\":2,\"243\":9,\"247\":1,\"374\":2,\"486\":5,\"516\":8,\"519\":6,\"521\":4,\"523\":14}}],[\"byhavior\",{\"1\":{\"112\":1}}],[\"by\",{\"1\":{\"62\":1,\"63\":2,\"124\":1,\"126\":1,\"138\":1,\"222\":2,\"223\":3,\"234\":1,\"235\":1,\"243\":1,\"247\":5,\"255\":1,\"285\":1,\"295\":1,\"302\":1,\"333\":1,\"351\":1,\"370\":1,\"418\":1,\"499\":1,\"528\":1,\"560\":1,\"580\":1,\"591\":1,\"619\":7,\"626\":1,\"636\":2,\"728\":1,\"740\":1,\"751\":1,\"756\":1,\"761\":2,\"763\":1,\"767\":1,\"794\":1,\"822\":1}}],[\"become\",{\"1\":{\"769\":1}}],[\"becomes\",{\"1\":{\"757\":2}}],[\"because\",{\"1\":{\"87\":1,\"126\":1,\"226\":1,\"234\":1,\"247\":1,\"308\":1,\"370\":1,\"376\":1,\"408\":1,\"523\":1,\"752\":1}}],[\"beautifulsoup\",{\"1\":{\"737\":4}}],[\"bennyhuo\",{\"1\":{\"612\":1}}],[\"benefit\",{\"1\":{\"247\":1}}],[\"belong\",{\"1\":{\"586\":2,\"587\":2}}],[\"belonging\",{\"1\":{\"584\":1}}],[\"below\",{\"1\":{\"262\":1,\"376\":1,\"412\":2,\"753\":1}}],[\"been\",{\"1\":{\"193\":1,\"228\":1,\"231\":2,\"238\":1,\"243\":1,\"256\":1,\"347\":1,\"350\":1,\"351\":1,\"374\":1,\"376\":1,\"398\":1,\"413\":1,\"748\":1,\"753\":2,\"761\":2}}],[\"behalf\",{\"1\":{\"183\":1}}],[\"behavior<t>\",{\"1\":{\"112\":1}}],[\"behavior=\",{\"1\":{\"110\":1,\"111\":2}}],[\"behavior\",{\"1\":{\"110\":3,\"111\":5,\"112\":5,\"113\":2,\"349\":1}}],[\"bezierpaint\",{\"1\":{\"147\":1}}],[\"bezierpath\",{\"1\":{\"145\":3,\"147\":1}}],[\"bezier\",{\"1\":{\"142\":1,\"147\":1}}],[\"beziermaker\",{\"1\":{\"142\":1}}],[\"bezierviewanim\",{\"1\":{\"141\":1}}],[\"beginactivity\",{\"0\":{\"417\":1},\"1\":{\"417\":5,\"418\":1}}],[\"beginning\",{\"1\":{\"358\":1}}],[\"beginners\",{\"1\":{\"128\":1,\"290\":1}}],[\"begin\",{\"1\":{\"304\":1,\"305\":1,\"307\":1,\"308\":4,\"324\":4,\"348\":4,\"349\":3,\"352\":1,\"358\":10,\"359\":1}}],[\"begins\",{\"1\":{\"247\":1}}],[\"beginbroadcast\",{\"1\":{\"63\":1}}],[\"betterprogramming\",{\"1\":{\"128\":1}}],[\"between\",{\"1\":{\"126\":1,\"253\":1,\"254\":1,\"302\":2,\"350\":1,\"358\":1,\"573\":1,\"763\":1}}],[\"beta\",{\"1\":{\"104\":1,\"105\":3,\"106\":1,\"286\":1}}],[\"best\",{\"1\":{\"125\":1}}],[\"beforepointf\",{\"1\":{\"144\":2}}],[\"before\",{\"1\":{\"92\":1,\"159\":1,\"226\":1,\"234\":1,\"237\":1,\"238\":1,\"247\":5,\"351\":2,\"384\":1,\"511\":1,\"527\":2,\"560\":1,\"586\":1,\"629\":1,\"711\":1,\"745\":2,\"753\":2,\"759\":1,\"761\":4}}],[\"being\",{\"1\":{\"33\":2,\"402\":1}}],[\"be\",{\"1\":{\"33\":1,\"48\":1,\"63\":1,\"92\":1,\"142\":1,\"183\":1,\"193\":2,\"205\":1,\"224\":1,\"225\":1,\"228\":1,\"230\":1,\"232\":4,\"233\":2,\"235\":1,\"236\":1,\"238\":1,\"243\":2,\"247\":9,\"253\":2,\"262\":1,\"264\":1,\"276\":2,\"302\":1,\"308\":1,\"311\":1,\"332\":2,\"347\":1,\"348\":1,\"350\":1,\"352\":1,\"359\":1,\"360\":1,\"370\":1,\"376\":2,\"395\":2,\"402\":1,\"408\":1,\"412\":5,\"417\":1,\"418\":1,\"433\":1,\"445\":1,\"493\":1,\"494\":2,\"511\":3,\"523\":2,\"586\":2,\"587\":2,\"629\":1,\"630\":1,\"636\":1,\"711\":1,\"742\":1,\"752\":1,\"753\":2,\"757\":4,\"759\":1,\"761\":1,\"763\":1,\"771\":3,\"822\":1}}],[\"branch\",{\"1\":{\"674\":3,\"813\":1}}],[\"bridge\",{\"1\":{\"255\":1}}],[\"breach\",{\"1\":{\"231\":1}}],[\"break\",{\"1\":{\"26\":1,\"117\":2,\"159\":2,\"179\":1,\"193\":2,\"247\":1,\"350\":2,\"352\":2,\"486\":1,\"496\":1,\"534\":1,\"560\":1,\"566\":1,\"761\":5,\"848\":1,\"850\":1,\"859\":3,\"880\":1,\"890\":5,\"898\":1,\"921\":1,\"927\":1}}],[\"browser\",{\"1\":{\"140\":1}}],[\"broadcast\",{\"1\":{\"19\":1,\"20\":1}}],[\"broadcast等等\",{\"1\":{\"15\":1}}],[\"broadcastreceiver\",{\"1\":{\"10\":1,\"135\":1,\"139\":2}}],[\"bodies\",{\"1\":{\"767\":1}}],[\"bodyisscrolled\",{\"1\":{\"405\":2}}],[\"bodystate\",{\"1\":{\"276\":2}}],[\"bodywidget\",{\"1\":{\"276\":2,\"295\":1}}],[\"body\",{\"1\":{\"243\":2,\"279\":1,\"284\":1,\"285\":1,\"295\":1,\"403\":4,\"404\":5,\"405\":11,\"415\":7,\"416\":1,\"417\":1,\"418\":2,\"419\":1,\"420\":3,\"511\":1,\"662\":1,\"712\":2}}],[\"both\",{\"1\":{\"630\":1,\"761\":1}}],[\"bottomleft\",{\"1\":{\"340\":2}}],[\"bottom\",{\"1\":{\"33\":2,\"74\":2,\"75\":1,\"352\":2,\"403\":1,\"858\":3}}],[\"bout\",{\"1\":{\"587\":2,\"591\":3}}],[\"bouncingscrollphysics\",{\"1\":{\"418\":4}}],[\"boundingboxfor\",{\"1\":{\"348\":3}}],[\"bound\",{\"1\":{\"285\":1}}],[\"boundcallback\",{\"1\":{\"233\":2}}],[\"bounds里面保存着要画的字的一些属性\",{\"1\":{\"153\":1}}],[\"bounds\",{\"1\":{\"26\":1,\"153\":3}}],[\"bold\",{\"1\":{\"264\":1}}],[\"boldtextoverride\",{\"1\":{\"264\":1}}],[\"boxing\",{\"1\":{\"523\":1}}],[\"boxhittestresult\",{\"1\":{\"441\":2}}],[\"boxconstraints\",{\"1\":{\"439\":3,\"444\":2,\"445\":2}}],[\"boxscrollview\",{\"1\":{\"431\":1}}],[\"boxfit\",{\"1\":{\"392\":1}}],[\"boxdecoration\",{\"1\":{\"365\":1}}],[\"boxpainter\",{\"1\":{\"365\":1}}],[\"box\",{\"1\":{\"251\":1,\"333\":1,\"347\":4,\"402\":1,\"422\":1,\"426\":1,\"430\":1,\"431\":1,\"433\":3,\"438\":2,\"441\":1,\"442\":1,\"446\":1}}],[\"bob\",{\"1\":{\"128\":2}}],[\"boilerplate\",{\"1\":{\"126\":1}}],[\"bool\",{\"1\":{\"224\":1,\"226\":1,\"231\":1,\"232\":3,\"234\":2,\"243\":2,\"247\":12,\"254\":1,\"273\":1,\"304\":3,\"319\":1,\"322\":1,\"323\":1,\"325\":1,\"330\":1,\"333\":4,\"346\":1,\"347\":3,\"350\":1,\"351\":1,\"352\":1,\"368\":1,\"369\":1,\"376\":2,\"383\":3,\"384\":1,\"395\":2,\"405\":1,\"415\":1,\"416\":1,\"417\":1,\"426\":1,\"441\":1,\"748\":17,\"751\":1,\"752\":2,\"753\":6,\"757\":4,\"759\":12,\"761\":6}}],[\"boolean>\",{\"1\":{\"523\":1}}],[\"boolean\",{\"1\":{\"25\":3,\"26\":10,\"27\":3,\"43\":1,\"48\":1,\"54\":2,\"63\":1,\"71\":1,\"80\":1,\"86\":1,\"92\":1,\"112\":3,\"138\":1,\"161\":1,\"179\":1,\"186\":1,\"398\":1,\"399\":4,\"485\":1,\"523\":1,\"568\":1,\"583\":2,\"587\":1,\"784\":2}}],[\"bootstarp\",{\"1\":{\"813\":1}}],[\"bootstrap\",{\"1\":{\"484\":1,\"485\":1,\"753\":1}}],[\"bootnaim\",{\"1\":{\"140\":1}}],[\"boot\",{\"1\":{\"17\":1,\"140\":3,\"686\":1}}],[\"bad\",{\"1\":{\"752\":1}}],[\"bababbaab\",{\"1\":{\"620\":1}}],[\"ballisticscrollactivity\",{\"1\":{\"417\":2}}],[\"ballistic\",{\"1\":{\"417\":2}}],[\"bashrc\",{\"1\":{\"700\":4}}],[\"bash\",{\"0\":{\"696\":1},\"1\":{\"696\":3,\"700\":4}}],[\"basic\",{\"1\":{\"259\":2,\"265\":1,\"768\":1}}],[\"bassy\",{\"1\":{\"250\":1}}],[\"basewirehandle\",{\"1\":{\"587\":1}}],[\"baseviewmodel\",{\"1\":{\"126\":1}}],[\"baseviewmodel<reposcontract\",{\"1\":{\"125\":1}}],[\"basefragment\",{\"1\":{\"126\":1}}],[\"baseline的竖坐标和文字上下实际中心的偏移量\",{\"1\":{\"33\":1}}],[\"baseline的y坐标\",{\"1\":{\"33\":1}}],[\"baseline\",{\"1\":{\"33\":6}}],[\"based\",{\"1\":{\"33\":1,\"126\":1,\"768\":1}}],[\"base\",{\"1\":{\"26\":1,\"30\":2,\"83\":1,\"95\":6,\"560\":2}}],[\"baidu\",{\"1\":{\"104\":1,\"105\":3,\"106\":1,\"149\":1,\"708\":2}}],[\"bar\",{\"1\":{\"101\":1,\"118\":2}}],[\"barutils\",{\"1\":{\"101\":1}}],[\"baeseline\",{\"1\":{\"33\":1}}],[\"backed\",{\"1\":{\"757\":1}}],[\"backup\",{\"1\":{\"718\":2}}],[\"backingarray是一个\",{\"1\":{\"538\":1}}],[\"backingarray的类型实际上就是\",{\"1\":{\"538\":1}}],[\"backingarray时没有产生\",{\"1\":{\"538\":1}}],[\"backingarray\",{\"1\":{\"538\":2}}],[\"backgrounddimenabled\",{\"1\":{\"167\":1}}],[\"backgrounddimenabled则可以去除半透明遮罩效果\",{\"1\":{\"167\":1}}],[\"background=\",{\"1\":{\"167\":1,\"189\":2}}],[\"backgroundrectf\",{\"1\":{\"162\":2}}],[\"background\",{\"1\":{\"161\":1,\"285\":1,\"768\":1}}],[\"backbuttonclicked\",{\"1\":{\"125\":2}}],[\"back\",{\"1\":{\"25\":2,\"125\":2,\"159\":1,\"243\":1,\"244\":1,\"350\":1,\"351\":1,\"759\":1}}],[\"backwards\",{\"1\":{\"10\":1}}],[\"batch\",{\"1\":{\"10\":1}}],[\"battery\",{\"1\":{\"10\":1}}],[\"buzz\",{\"1\":{\"646\":3}}],[\"bug\",{\"1\":{\"572\":1,\"759\":1}}],[\"buy\",{\"1\":{\"568\":1}}],[\"bubblesort\",{\"1\":{\"896\":1}}],[\"bubble\",{\"1\":{\"532\":2}}],[\"buckets\",{\"1\":{\"506\":2}}],[\"built\",{\"1\":{\"264\":6,\"270\":2,\"271\":2,\"351\":1,\"757\":1}}],[\"buildcall\",{\"1\":{\"712\":1}}],[\"buildcontext\",{\"1\":{\"255\":1,\"259\":2,\"264\":2,\"265\":1,\"273\":6,\"276\":1,\"279\":1,\"281\":1,\"282\":1,\"284\":1,\"295\":1,\"307\":1,\"308\":2,\"309\":1,\"310\":2,\"311\":2,\"331\":1,\"342\":1,\"346\":1,\"347\":1,\"348\":2,\"349\":1,\"351\":5,\"352\":2,\"365\":1,\"370\":1,\"391\":1,\"392\":2,\"393\":2,\"403\":1,\"405\":3,\"422\":1,\"423\":2,\"424\":5,\"429\":1,\"430\":2,\"436\":2,\"437\":2,\"444\":1,\"445\":1}}],[\"buildrequest\",{\"1\":{\"711\":2}}],[\"buildrequestbody\",{\"1\":{\"711\":1}}],[\"buildtree\",{\"1\":{\"666\":4}}],[\"buildtypes\",{\"1\":{\"30\":1}}],[\"buildviewport\",{\"0\":{\"424\":1},\"1\":{\"423\":2,\"424\":3}}],[\"buildviewportchrome\",{\"1\":{\"413\":1}}],[\"buildslivers\",{\"0\":{\"429\":1},\"1\":{\"405\":5,\"420\":1,\"422\":1,\"423\":3,\"429\":2,\"430\":2}}],[\"buildscope\",{\"1\":{\"256\":1}}],[\"build源码可以确定\",{\"1\":{\"393\":1}}],[\"buildimage\",{\"1\":{\"392\":2}}],[\"buildoverscrollindicator\",{\"1\":{\"413\":1}}],[\"buildoverlay创建的过渡\",{\"1\":{\"353\":1}}],[\"buildoverlay\",{\"1\":{\"352\":5}}],[\"buildowner\",{\"1\":{\"251\":2,\"254\":2,\"256\":3,\"258\":1,\"259\":1,\"262\":1,\"263\":1}}],[\"buildwidgetapp\",{\"1\":{\"349\":1}}],[\"build$\",{\"1\":{\"273\":2}}],[\"build方法中\",{\"1\":{\"382\":1}}],[\"build方法中被传入rawimage\",{\"1\":{\"372\":1}}],[\"build方法中创建rawimage\",{\"1\":{\"366\":1}}],[\"build方法获得的ui\",{\"1\":{\"371\":1}}],[\"build方法\",{\"1\":{\"264\":1}}],[\"builder会返回错误详细信息fluttererrordetails\",{\"1\":{\"295\":1}}],[\"builder返回一个widget替代出错的widget\",{\"1\":{\"295\":1}}],[\"builder<mainfragment>\",{\"1\":{\"217\":1}}],[\"builder<mainactivity>\",{\"1\":{\"212\":1}}],[\"builder实例生成了一个androidinjector\",{\"1\":{\"213\":1}}],[\"builder\",{\"1\":{\"173\":2,\"202\":1,\"212\":3,\"213\":2,\"243\":3,\"264\":1,\"276\":1,\"295\":2,\"308\":4,\"311\":9,\"340\":1,\"352\":2,\"405\":2,\"444\":1,\"445\":1,\"708\":2,\"711\":3,\"787\":1}}],[\"build>generate\",{\"1\":{\"104\":1}}],[\"build\",{\"0\":{\"370\":1},\"1\":{\"6\":4,\"30\":2,\"57\":1,\"70\":1,\"103\":1,\"104\":3,\"105\":1,\"196\":2,\"202\":1,\"264\":6,\"270\":6,\"271\":3,\"273\":7,\"276\":1,\"279\":1,\"281\":2,\"282\":1,\"284\":1,\"290\":1,\"292\":1,\"295\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":7,\"311\":1,\"312\":1,\"332\":1,\"334\":1,\"335\":1,\"342\":1,\"347\":1,\"349\":1,\"358\":1,\"370\":2,\"377\":1,\"391\":1,\"392\":1,\"393\":3,\"403\":1,\"405\":2,\"413\":1,\"420\":1,\"423\":2,\"429\":2,\"436\":1,\"439\":1,\"708\":3,\"710\":2,\"711\":4,\"753\":2}}],[\"buffer\",{\"1\":{\"629\":3,\"659\":1,\"749\":1,\"752\":1,\"753\":7,\"754\":2,\"757\":20}}],[\"buf\",{\"1\":{\"237\":2,\"557\":3}}],[\"but\",{\"1\":{\"225\":1,\"231\":1,\"232\":1,\"276\":1,\"351\":1,\"352\":1,\"376\":2,\"384\":1,\"412\":1,\"417\":1,\"426\":1,\"445\":1,\"494\":1,\"511\":2,\"523\":1,\"547\":1,\"615\":2,\"670\":1,\"761\":1}}],[\"button\",{\"1\":{\"26\":1,\"178\":1,\"189\":7,\"273\":1}}],[\"bundle\",{\"1\":{\"3\":1,\"39\":5,\"83\":1,\"126\":1,\"189\":1,\"215\":1,\"399\":1}}],[\"还保存着下一个节点的引用next\",{\"1\":{\"881\":1}}],[\"还使用了parent\",{\"1\":{\"757\":1}}],[\"还可以有\",{\"1\":{\"927\":1}}],[\"还可以进行堆排序\",{\"1\":{\"857\":1}}],[\"还可以对\",{\"1\":{\"786\":1}}],[\"还可以将viewmodel于livedata结合\",{\"1\":{\"785\":1}}],[\"还可以更简洁\",{\"1\":{\"664\":1}}],[\"还可以使用objectoutputstream的putfields\",{\"1\":{\"584\":1}}],[\"还可以使用\",{\"1\":{\"308\":1,\"311\":1}}],[\"还用it代替\",{\"1\":{\"662\":1}}],[\"还应用了\",{\"1\":{\"440\":1}}],[\"还改动了extendedimageprovider\",{\"1\":{\"384\":1}}],[\"还提供imagecache\",{\"1\":{\"375\":1}}],[\"还提供了\",{\"1\":{\"346\":1}}],[\"还提供了如下方法\",{\"1\":{\"319\":1}}],[\"还没有加载完成的\",{\"1\":{\"375\":1}}],[\"还通过\",{\"1\":{\"332\":1}}],[\"还希望能够控制动画开始\",{\"1\":{\"312\":1}}],[\"还调用了componentelement\",{\"1\":{\"264\":1}}],[\"还会执行\",{\"1\":{\"383\":1}}],[\"还会是live的\",{\"1\":{\"375\":1}}],[\"还会触发\",{\"1\":{\"256\":1}}],[\"还会调用的element\",{\"1\":{\"256\":1}}],[\"还会缩减数组的大小为osize\",{\"1\":{\"95\":1}}],[\"还多出来好几个\",{\"1\":{\"251\":1}}],[\"还要留出接口\",{\"1\":{\"152\":1}}],[\"还映射进了内核空间\",{\"1\":{\"138\":1}}],[\"还负责使用\",{\"1\":{\"125\":1}}],[\"还需要使用其返回值供自己使用\",{\"1\":{\"614\":1}}],[\"还需要\",{\"1\":{\"405\":1}}],[\"还需要注意一个新的角色buildowner\",{\"1\":{\"254\":1}}],[\"还需要添加一个\",{\"1\":{\"189\":1}}],[\"还需要实现这个loginview接口以便\",{\"1\":{\"123\":1}}],[\"还需要告诉\",{\"1\":{\"30\":1}}],[\"还有递归在汉诺塔问题上的应用\",{\"1\":{\"910\":1}}],[\"还有其他邻接点\",{\"1\":{\"850\":1}}],[\"还有其他的代码要执行\",{\"1\":{\"614\":1}}],[\"还有个计数器\",{\"1\":{\"767\":1}}],[\"还有方法或者伴生对象\",{\"1\":{\"612\":1}}],[\"还有轻量级锁的开销\",{\"1\":{\"609\":1}}],[\"还有android\",{\"1\":{\"523\":1}}],[\"还有以下可以替换\",{\"1\":{\"523\":1}}],[\"还有以下几类方法内部也是基于\",{\"1\":{\"319\":1}}],[\"还有用户自定义的类加载器\",{\"1\":{\"484\":1}}],[\"还有剩下的\",{\"1\":{\"418\":1}}],[\"还有几个属性可以供我们自定义\",{\"1\":{\"344\":1}}],[\"还有如下子类\",{\"1\":{\"317\":1}}],[\"还有就是该挂件的布局文件\",{\"1\":{\"189\":1}}],[\"还有一种可能就是序列化流被篡改了\",{\"1\":{\"584\":1}}],[\"还有一种方法\",{\"1\":{\"106\":1}}],[\"还有一部分同样重要的流程\",{\"1\":{\"373\":1}}],[\"还有一个链接两个\",{\"1\":{\"357\":1}}],[\"还有一个非常重要的问题\",{\"1\":{\"203\":1}}],[\"还有一个独有的\",{\"1\":{\"69\":1}}],[\"还有一点需注意\",{\"1\":{\"111\":1}}],[\"还有最近的workmanager和我们要用到的alarmmanager\",{\"1\":{\"10\":1}}],[\"还是为他们写一个索引文章\",{\"1\":{\"775\":1}}],[\"还是runlightweight\",{\"1\":{\"759\":1}}],[\"还是isolate\",{\"1\":{\"748\":1}}],[\"还是其他平台的不同被初始化为\",{\"1\":{\"710\":1}}],[\"还是有异常发生\",{\"1\":{\"658\":1}}],[\"还是使用枚举\",{\"1\":{\"583\":1}}],[\"还是第三方的extende\",{\"1\":{\"388\":1}}],[\"还是相反\",{\"1\":{\"342\":1}}],[\"还是之前的\",{\"1\":{\"273\":1}}],[\"还是普通的\",{\"1\":{\"221\":1}}],[\"还是会出现同一\",{\"1\":{\"100\":1}}],[\"还是\",{\"1\":{\"75\":1,\"126\":1,\"235\":1,\"238\":1,\"243\":1,\"349\":1,\"361\":1,\"415\":1,\"424\":1,\"426\":2,\"757\":2}}],[\"还是由子\",{\"1\":{\"26\":1}}],[\"还是裁剪之后保存的图片都给第三方\",{\"1\":{\"6\":1}}],[\"中较大的那个与\",{\"1\":{\"896\":1}}],[\"中缀表达式转化为后缀表达式\",{\"1\":{\"890\":1}}],[\"中缀表达式\",{\"1\":{\"890\":4}}],[\"中缀表达式与后缀表达式\",{\"0\":{\"890\":1}}],[\"中缀函数\",{\"0\":{\"620\":1}}],[\"中为组件加上这个属性就可以实现相应的效果\",{\"1\":{\"784\":1}}],[\"中声明的方式\",{\"1\":{\"784\":1}}],[\"中插入该导航\",{\"1\":{\"783\":1}}],[\"中重建对应的状态\",{\"1\":{\"769\":1}}],[\"中重写\",{\"1\":{\"117\":1}}],[\"中解析的调用\",{\"1\":{\"767\":1}}],[\"中之后\",{\"1\":{\"766\":1}}],[\"中优先处理的\",{\"1\":{\"745\":1}}],[\"中优化关键字\",{\"1\":{\"614\":1}}],[\"中有类似的应用有很多处\",{\"1\":{\"784\":1}}],[\"中有两种\",{\"1\":{\"745\":1,\"763\":1}}],[\"中有一个以\",{\"1\":{\"63\":1}}],[\"中分别实现下载\",{\"1\":{\"737\":1}}],[\"中序遍历法\",{\"1\":{\"834\":1}}],[\"中序遍历\",{\"1\":{\"665\":2,\"666\":1,\"834\":1}}],[\"中引用一些通用的变量\",{\"1\":{\"753\":1}}],[\"中引用的对象\",{\"1\":{\"472\":1}}],[\"中引进\",{\"1\":{\"663\":1}}],[\"中写法类似\",{\"1\":{\"662\":1}}],[\"中写入结果\",{\"1\":{\"71\":1}}],[\"中延迟执行完整操作\",{\"1\":{\"637\":1}}],[\"中间的\",{\"1\":{\"630\":1}}],[\"中挂起的时候取消\",{\"1\":{\"629\":1}}],[\"中国\",{\"1\":{\"612\":1}}],[\"中activity之间等传递对象\",{\"1\":{\"597\":1}}],[\"中恢复数据\",{\"1\":{\"594\":1}}],[\"中加入的数据\",{\"1\":{\"584\":1}}],[\"中加载图片并且完全采用\",{\"1\":{\"376\":1}}],[\"中实现序列化的方式有\",{\"1\":{\"580\":1}}],[\"中实现序列化的\",{\"1\":{\"580\":1}}],[\"中实际指向的两个\",{\"1\":{\"538\":1}}],[\"中实际保存的类型\",{\"1\":{\"538\":1}}],[\"中实际处理一个\",{\"1\":{\"228\":1}}],[\"中日期格式化的参数及含义\",{\"1\":{\"578\":1}}],[\"中判断周主要受到calendar对象的getfirstdayofweek\",{\"1\":{\"575\":1}}],[\"中常见的内建注解\",{\"1\":{\"566\":1}}],[\"中常用的子类有以下两种\",{\"1\":{\"323\":1}}],[\"中常用的有二阶\",{\"1\":{\"141\":1}}],[\"中给程序员看的注释一样\",{\"1\":{\"564\":1}}],[\"中唤醒被阻塞的调用线程\",{\"1\":{\"560\":1}}],[\"中反射\",{\"1\":{\"553\":1}}],[\"中三种常用的排序方法\",{\"0\":{\"531\":1}}],[\"中充当一个\",{\"1\":{\"527\":1}}],[\"中是如何找到当前的\",{\"1\":{\"747\":1}}],[\"中是如何绘制一个\",{\"1\":{\"251\":1}}],[\"中是\",{\"1\":{\"594\":1}}],[\"中是否应该使用枚举\",{\"0\":{\"522\":1}}],[\"中对应\",{\"1\":{\"748\":1}}],[\"中对应的方法\",{\"1\":{\"415\":1}}],[\"中对应的方法进行跨进程通信\",{\"1\":{\"138\":1}}],[\"中对应的位置和大小\",{\"1\":{\"341\":1}}],[\"中对应的位置和大小过渡到\",{\"1\":{\"341\":1}}],[\"中对应的属性也会随之变化\",{\"1\":{\"329\":1}}],[\"中对应的私有方法\",{\"1\":{\"234\":1}}],[\"中对应的代码即可\",{\"1\":{\"199\":1}}],[\"中对应的\",{\"1\":{\"196\":4}}],[\"中对象的大小\",{\"1\":{\"517\":1}}],[\"中则新增了红黑树\",{\"1\":{\"501\":1}}],[\"中则为\",{\"1\":{\"342\":1}}],[\"中将他与虚拟机栈合并\",{\"1\":{\"460\":1}}],[\"中将像素和\",{\"1\":{\"101\":1}}],[\"中直接退出\",{\"1\":{\"621\":1}}],[\"中直接使用\",{\"1\":{\"439\":1}}],[\"中直接复用\",{\"1\":{\"311\":1}}],[\"中由于用户手势或者通过\",{\"1\":{\"438\":1}}],[\"中基于\",{\"1\":{\"431\":1}}],[\"中基本上做了如下判断\",{\"1\":{\"232\":1}}],[\"中容纳了一个叫\",{\"1\":{\"434\":1}}],[\"中容纳\",{\"1\":{\"425\":1}}],[\"中默认会按照\",{\"1\":{\"424\":1}}],[\"中可滑动\",{\"1\":{\"419\":1}}],[\"中可以调用setstate\",{\"1\":{\"282\":1}}],[\"中可以直接写成\",{\"1\":{\"204\":1}}],[\"中可以读取参数\",{\"1\":{\"71\":1}}],[\"中可以用到的循环任务实现有handler\",{\"1\":{\"10\":1}}],[\"中被\",{\"1\":{\"418\":1}}],[\"中被调用\",{\"1\":{\"53\":1}}],[\"中传入的\",{\"1\":{\"749\":1}}],[\"中传入的是\",{\"1\":{\"436\":1}}],[\"中传入\",{\"1\":{\"742\":1}}],[\"中传入多个\",{\"1\":{\"419\":1}}],[\"中传给\",{\"1\":{\"409\":1}}],[\"中传输的接口都要继承自该接口\",{\"1\":{\"71\":1}}],[\"中持有了\",{\"1\":{\"405\":1}}],[\"中一个重要的属性就是\",{\"1\":{\"405\":1}}],[\"中列表时\",{\"1\":{\"403\":1}}],[\"中取数排序\",{\"1\":{\"926\":1,\"927\":1}}],[\"中取出消息并执行\",{\"1\":{\"761\":1}}],[\"中取出该\",{\"1\":{\"83\":1}}],[\"中取\",{\"1\":{\"744\":1}}],[\"中取回对应的请求\",{\"1\":{\"398\":1}}],[\"中powerimagerequestoptions\",{\"1\":{\"394\":1}}],[\"中presentation\",{\"1\":{\"126\":1}}],[\"中查找对应的缓存\",{\"1\":{\"377\":1}}],[\"中会累计很多正在下载中的图片\",{\"1\":{\"376\":1}}],[\"中下载图片所占大小是没有被\",{\"1\":{\"376\":1}}],[\"中追踪\",{\"1\":{\"376\":1}}],[\"中已经被设置\",{\"1\":{\"756\":1}}],[\"中已经有了\",{\"1\":{\"376\":2}}],[\"中已有内容的混合计算方式\",{\"1\":{\"130\":1}}],[\"中读取操作数\",{\"1\":{\"767\":1}}],[\"中读取\",{\"1\":{\"376\":1}}],[\"中执行的过程分析\",{\"1\":{\"766\":1}}],[\"中执行的方法分别是text\",{\"1\":{\"264\":1}}],[\"中执行\",{\"0\":{\"766\":1},\"1\":{\"621\":1}}],[\"中执行真正获取图片的逻辑\",{\"1\":{\"374\":1}}],[\"中返回的imageinfo\",{\"1\":{\"369\":1}}],[\"中应用\",{\"1\":{\"357\":1}}],[\"中从而作用于其创建的\",{\"1\":{\"355\":1}}],[\"中衍生出其他类型的\",{\"1\":{\"355\":1}}],[\"中主要由animationcontroller控制动画的开始\",{\"1\":{\"355\":1}}],[\"中创建一个新的\",{\"1\":{\"762\":1}}],[\"中创建\",{\"1\":{\"594\":1,\"748\":1}}],[\"中创建的\",{\"1\":{\"349\":1,\"420\":1}}],[\"中创建并持有\",{\"1\":{\"349\":1}}],[\"中找到对应的\",{\"1\":{\"348\":1}}],[\"中文文档\",{\"1\":{\"649\":1,\"660\":1}}],[\"中文官网\",{\"1\":{\"647\":1}}],[\"中文字虽然是second\",{\"1\":{\"341\":1}}],[\"中文互联网存在着很多\",{\"1\":{\"0\":1}}],[\"中只有一个\",{\"1\":{\"319\":1}}],[\"中只支持方法\",{\"1\":{\"60\":1}}],[\"中最小值\",{\"1\":{\"317\":1}}],[\"中最大值\",{\"1\":{\"317\":1,\"412\":2}}],[\"中获取该导航的实力\",{\"1\":{\"783\":1}}],[\"中获取消息并处理\",{\"1\":{\"761\":1}}],[\"中获取消息\",{\"1\":{\"761\":1}}],[\"中获取计数值\",{\"1\":{\"645\":1}}],[\"中获取的\",{\"1\":{\"392\":1}}],[\"中获取缓存的图片\",{\"1\":{\"374\":1}}],[\"中获取\",{\"1\":{\"374\":1}}],[\"中获取到\",{\"1\":{\"367\":1}}],[\"中获取当前\",{\"1\":{\"315\":1}}],[\"中获取meta\",{\"1\":{\"105\":1}}],[\"中帧刷新时\",{\"1\":{\"315\":1}}],[\"中动画的基石\",{\"1\":{\"315\":1}}],[\"中动画的实现分为\",{\"1\":{\"300\":1}}],[\"中关于动画的类有很多\",{\"1\":{\"314\":1}}],[\"中监听其并触发\",{\"1\":{\"309\":1}}],[\"中监听着rawreceiveport\",{\"1\":{\"244\":1}}],[\"中避免重绘\",{\"1\":{\"308\":1}}],[\"中内置的\",{\"1\":{\"307\":1}}],[\"中这些与动画有关的类如何选择\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"中与动画有关的\",{\"1\":{\"300\":1,\"314\":1}}],[\"中那么\",{\"1\":{\"287\":1}}],[\"中不同的界面间\",{\"1\":{\"284\":1}}],[\"中不显示\",{\"0\":{\"80\":1}}],[\"中两个重要的控件\",{\"1\":{\"278\":1}}],[\"中所有dirty的element执行element\",{\"1\":{\"270\":1}}],[\"中所有的代码\",{\"1\":{\"655\":1}}],[\"中所有的代码都在一个\",{\"1\":{\"221\":1}}],[\"中所有的\",{\"1\":{\"253\":1}}],[\"中看到的\",{\"1\":{\"262\":1}}],[\"中第一个\",{\"1\":{\"256\":1}}],[\"中快速开发出一个精美的\",{\"1\":{\"251\":1}}],[\"中serviceport将用户需要的\",{\"1\":{\"249\":1}}],[\"中向来时的\",{\"1\":{\"742\":1}}],[\"中向上找到父级中离得最近的\",{\"1\":{\"265\":1}}],[\"中向\",{\"1\":{\"247\":1,\"398\":1}}],[\"中转\",{\"0\":{\"244\":1}}],[\"中既没有\",{\"1\":{\"239\":1}}],[\"中没有\",{\"1\":{\"223\":1,\"230\":1,\"376\":1,\"418\":1}}],[\"中存在\",{\"1\":{\"417\":1}}],[\"中存在耗时长的方法\",{\"1\":{\"221\":1}}],[\"中存入客户端的数据\",{\"1\":{\"71\":1}}],[\"中运行\",{\"1\":{\"221\":1,\"770\":1}}],[\"中参照在activity实现的步骤实现hasfragmentinjector\",{\"1\":{\"217\":1}}],[\"中学到的一个小技巧\",{\"1\":{\"209\":1}}],[\"中注解字段特别需要的\",{\"1\":{\"204\":1}}],[\"中注册\",{\"1\":{\"189\":1}}],[\"中注册的\",{\"1\":{\"176\":1,\"398\":1}}],[\"中多线程处理方式之一\",{\"1\":{\"190\":1}}],[\"中各个组件及其样式\",{\"1\":{\"189\":1}}],[\"中都没有指定图片时\",{\"1\":{\"376\":1}}],[\"中都没有\",{\"1\":{\"376\":1}}],[\"中都无法有效获取\",{\"1\":{\"160\":1}}],[\"中都固定为\",{\"1\":{\"138\":1}}],[\"中y并不是text的最低端\",{\"1\":{\"153\":1}}],[\"中代码实现\",{\"1\":{\"126\":1}}],[\"中使用到的数据上\",{\"1\":{\"784\":1}}],[\"中使用协程\",{\"1\":{\"622\":1}}],[\"中使用枚举类\",{\"1\":{\"522\":1}}],[\"中使用枚举和常量所占用的大小对比romainguy有下图的对比\",{\"1\":{\"522\":1}}],[\"中使用\",{\"0\":{\"626\":1},\"1\":{\"382\":1,\"550\":1}}],[\"中使用imageprovider\",{\"1\":{\"377\":1}}],[\"中使用自动注入依赖\",{\"0\":{\"215\":1}}],[\"中使用如下\",{\"1\":{\"125\":1}}],[\"中使用该控件\",{\"1\":{\"118\":1}}],[\"中viewmodel\",{\"1\":{\"124\":1}}],[\"中出现诸如\",{\"1\":{\"123\":1}}],[\"中检索到的数据转化为\",{\"1\":{\"123\":1}}],[\"中检测到是第一次启动的话\",{\"1\":{\"30\":1}}],[\"中还会初始化并持有\",{\"1\":{\"123\":1}}],[\"中除了正常的逻辑之外\",{\"1\":{\"123\":1}}],[\"中除了基本数据类型\",{\"1\":{\"60\":1}}],[\"中即负责\",{\"1\":{\"122\":1}}],[\"中处理了\",{\"1\":{\"423\":1}}],[\"中处理\",{\"1\":{\"112\":1}}],[\"中页面有上述\",{\"1\":{\"111\":1}}],[\"中<meta\",{\"1\":{\"105\":1}}],[\"中计算得出的\",{\"1\":{\"93\":1}}],[\"中打开对应的网页\",{\"1\":{\"80\":1}}],[\"中区分调用的是哪个方法\",{\"1\":{\"71\":1}}],[\"中定义的方法写的接口\",{\"1\":{\"138\":1}}],[\"中定义的方法的具体实现\",{\"1\":{\"138\":1}}],[\"中定义的方法\",{\"1\":{\"71\":1}}],[\"中定义的\",{\"1\":{\"71\":1}}],[\"中用来指示paint绘制的内容与\",{\"1\":{\"130\":1}}],[\"中用于展示图片的\",{\"1\":{\"365\":1}}],[\"中用于\",{\"1\":{\"69\":1,\"82\":1}}],[\"中用到的内联缓存\",{\"1\":{\"772\":1}}],[\"中用到的\",{\"1\":{\"60\":1}}],[\"中配置\",{\"1\":{\"63\":1}}],[\"中便于多个客户端开发\",{\"1\":{\"62\":1}}],[\"中添加material组件使其应用样式即可\",{\"1\":{\"341\":1}}],[\"中添加第一个\",{\"1\":{\"340\":1}}],[\"中添加该控件\",{\"1\":{\"118\":1}}],[\"中添加\",{\"1\":{\"57\":1}}],[\"中通过\",{\"1\":{\"249\":1}}],[\"中通过sendmessagedelayed\",{\"1\":{\"56\":1}}],[\"中通过looper\",{\"1\":{\"56\":1}}],[\"中此值为\",{\"1\":{\"52\":1}}],[\"中的资源了\",{\"1\":{\"823\":1}}],[\"中的资源\",{\"0\":{\"814\":1,\"819\":1},\"1\":{\"814\":1}}],[\"中的工作内容\",{\"1\":{\"787\":1}}],[\"中的形式如下\",{\"1\":{\"784\":1}}],[\"中的图片到\",{\"1\":{\"781\":1}}],[\"中的示例代码\",{\"1\":{\"781\":1}}],[\"中的main方法\",{\"1\":{\"742\":1}}],[\"中的博客地址\",{\"1\":{\"718\":1}}],[\"中的post\",{\"1\":{\"718\":1}}],[\"中的private\",{\"1\":{\"138\":1}}],[\"中的权限\",{\"1\":{\"690\":1}}],[\"中的应用\",{\"0\":{\"661\":1}}],[\"中的代码\",{\"1\":{\"652\":1}}],[\"中的代码会在一个新的线程中执行\",{\"1\":{\"247\":1}}],[\"中的内容\",{\"1\":{\"651\":1,\"670\":1}}],[\"中的静态类\",{\"1\":{\"612\":1}}],[\"中的静态方法\",{\"1\":{\"612\":1}}],[\"中的read\",{\"1\":{\"604\":1}}],[\"中的泛型参数类型已经被擦除\",{\"1\":{\"538\":1}}],[\"中的泛型实现了参数类型化的概念\",{\"1\":{\"535\":1}}],[\"中的泛型\",{\"0\":{\"535\":1,\"617\":1}}],[\"中的原理及不同\",{\"1\":{\"508\":1}}],[\"中的初始化阶段\",{\"1\":{\"497\":1}}],[\"中的二进制字节流保存到虚拟机方法区和堆中\",{\"1\":{\"492\":1}}],[\"中的int\",{\"1\":{\"395\":1}}],[\"中的imageinfo\",{\"1\":{\"369\":1}}],[\"中的ui\",{\"1\":{\"393\":1}}],[\"中的所有\",{\"1\":{\"349\":1}}],[\"中的hero\",{\"1\":{\"336\":1}}],[\"中的动画\",{\"1\":{\"300\":1,\"301\":1,\"314\":1,\"329\":1}}],[\"中的错误处理分为以下几种\",{\"1\":{\"293\":1}}],[\"中的错误都会被fluttererror\",{\"1\":{\"292\":1}}],[\"中的异常处理\",{\"0\":{\"291\":1}}],[\"中的build方法\",{\"1\":{\"271\":1}}],[\"中的呢\",{\"1\":{\"265\":1}}],[\"中的sendport\",{\"1\":{\"246\":1}}],[\"中的调用方\",{\"1\":{\"244\":1}}],[\"中的调用方双向通信\",{\"1\":{\"244\":1}}],[\"中的任务\",{\"1\":{\"221\":1}}],[\"中的使用\",{\"0\":{\"210\":1,\"217\":1}}],[\"中的联系人姓名首字母对应的\",{\"1\":{\"152\":1}}],[\"中的跨进程通信\",{\"1\":{\"135\":1}}],[\"中的事件都通过发送\",{\"1\":{\"125\":1}}],[\"中的参数个数为参数最多的构造方法的参数数\",{\"1\":{\"117\":1}}],[\"中的\",{\"0\":{\"81\":1,\"85\":1},\"1\":{\"105\":2,\"112\":1,\"123\":1,\"176\":1,\"189\":3,\"213\":1,\"228\":1,\"229\":2,\"243\":1,\"244\":1,\"247\":1,\"249\":1,\"257\":1,\"278\":1,\"284\":1,\"289\":1,\"308\":1,\"329\":1,\"338\":1,\"341\":7,\"344\":1,\"363\":1,\"387\":1,\"393\":1,\"402\":1,\"404\":1,\"415\":2,\"416\":1,\"418\":2,\"422\":1,\"426\":1,\"433\":1,\"440\":1,\"483\":1,\"519\":1,\"562\":1,\"569\":1,\"579\":1,\"748\":1,\"753\":1,\"762\":2,\"769\":1,\"816\":1,\"824\":1}}],[\"中的坐标\",{\"1\":{\"74\":1}}],[\"中的公共方法\",{\"1\":{\"38\":1}}],[\"中的方法也可以刷新\",{\"1\":{\"282\":1}}],[\"中的方法类似\",{\"1\":{\"282\":1}}],[\"中的方法总共有\",{\"1\":{\"239\":1}}],[\"中的方法\",{\"1\":{\"36\":1,\"655\":1}}],[\"中的属性\",{\"1\":{\"36\":1}}],[\"中单独创建一个线程\",{\"1\":{\"36\":1}}],[\"中调用isolate\",{\"1\":{\"747\":1}}],[\"中调用此方法\",{\"1\":{\"398\":1}}],[\"中调用\",{\"1\":{\"35\":1,\"408\":2}}],[\"中绘制文字的方法如下\",{\"1\":{\"33\":1}}],[\"中在过渡\",{\"1\":{\"30\":1}}],[\"中\",{\"0\":{\"57\":1,\"68\":1,\"73\":1,\"79\":1,\"633\":1,\"765\":1},\"1\":{\"25\":1,\"28\":1,\"52\":2,\"54\":1,\"57\":1,\"69\":1,\"76\":1,\"92\":1,\"112\":1,\"116\":1,\"125\":4,\"126\":3,\"138\":1,\"140\":1,\"179\":1,\"193\":1,\"221\":1,\"230\":1,\"232\":1,\"247\":2,\"249\":1,\"254\":1,\"256\":3,\"259\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":4,\"266\":1,\"271\":1,\"275\":1,\"282\":1,\"302\":2,\"308\":1,\"310\":1,\"314\":1,\"323\":1,\"331\":1,\"341\":4,\"344\":1,\"353\":2,\"355\":1,\"360\":1,\"365\":1,\"366\":1,\"368\":1,\"372\":1,\"374\":1,\"376\":2,\"377\":1,\"383\":1,\"393\":2,\"398\":1,\"405\":2,\"410\":1,\"415\":3,\"423\":1,\"426\":1,\"437\":1,\"469\":1,\"472\":1,\"490\":1,\"498\":1,\"501\":1,\"505\":1,\"508\":1,\"517\":1,\"519\":3,\"538\":1,\"545\":1,\"577\":1,\"594\":1,\"598\":1,\"615\":1,\"712\":1,\"742\":1,\"748\":1,\"749\":1,\"756\":1,\"759\":1,\"767\":1,\"771\":1,\"784\":1,\"785\":1}}],[\"拆分需求\",{\"1\":{\"9\":1}}],[\"需判断\",{\"1\":{\"417\":1}}],[\"需要对先对当前节点的父节点进行右旋\",{\"1\":{\"904\":1}}],[\"需要对堆进行向上或向下的遍历\",{\"1\":{\"857\":1}}],[\"需要一个堆的数据结构\",{\"1\":{\"875\":1}}],[\"需要辅助存储空间\",{\"1\":{\"875\":1}}],[\"需要二者有相同的shareduserid\",{\"1\":{\"816\":1}}],[\"需要androidx\",{\"1\":{\"783\":1}}],[\"需要重新判断\",{\"1\":{\"766\":1}}],[\"需要重写的方法有\",{\"1\":{\"112\":2}}],[\"需要单独下载\",{\"1\":{\"737\":1}}],[\"需要手动调用\",{\"1\":{\"728\":1}}],[\"需要继承自error或者exception\",{\"1\":{\"726\":1}}],[\"需要系统支持该格式\",{\"1\":{\"719\":1}}],[\"需要系统权限\",{\"1\":{\"76\":1}}],[\"需要满足三个条件\",{\"1\":{\"620\":1}}],[\"需要自己实现对象的序列化内容\",{\"1\":{\"596\":1}}],[\"需要自己实现具体细节\",{\"1\":{\"580\":2}}],[\"需要获得本地的密钥\",{\"1\":{\"584\":1}}],[\"需要给出对应的值的名字\",{\"1\":{\"568\":1}}],[\"需要先初始化对应的类\",{\"1\":{\"497\":1}}],[\"需要先初始化主类\",{\"1\":{\"497\":1}}],[\"需要传入\",{\"1\":{\"430\":1}}],[\"需要判断是否此\",{\"1\":{\"424\":1}}],[\"需要处理一下\",{\"1\":{\"398\":1}}],[\"需要\",{\"1\":{\"359\":1,\"771\":1}}],[\"需要配合\",{\"1\":{\"329\":1}}],[\"需要使用者自己创建\",{\"1\":{\"300\":1,\"314\":1}}],[\"需要的话安排一次\",{\"1\":{\"254\":1}}],[\"需要用到\",{\"1\":{\"445\":1}}],[\"需要用\",{\"1\":{\"189\":1}}],[\"需要请求权限\",{\"1\":{\"186\":1}}],[\"需要解释为什么需要这个权限\",{\"1\":{\"173\":1}}],[\"需要说明的是\",{\"1\":{\"172\":1,\"624\":1}}],[\"需要绘制内容时\",{\"1\":{\"161\":1}}],[\"需要多次\",{\"1\":{\"157\":1}}],[\"需要有一个抽象接口将二者隔离\",{\"1\":{\"123\":1}}],[\"需要指定其\",{\"1\":{\"111\":1}}],[\"需要指定\",{\"1\":{\"111\":1}}],[\"需要是\",{\"1\":{\"110\":1,\"111\":1}}],[\"需要更深入了解原理可以阅读文末参考文献\",{\"1\":{\"99\":1}}],[\"需要在加载图片之前\",{\"1\":{\"398\":1}}],[\"需要在服务端实现\",{\"1\":{\"71\":1}}],[\"需要在计算出来的文字上下中心的\",{\"1\":{\"33\":1}}],[\"需要serviceconnection类\",{\"1\":{\"35\":1}}],[\"需要注意的地方\",{\"0\":{\"537\":1}}],[\"需要注意的是原先的页面布局信息<constraintlayout\",{\"1\":{\"784\":1}}],[\"需要注意的是提供给\",{\"1\":{\"43\":1}}],[\"需要注意的是\",{\"1\":{\"11\":1,\"130\":1,\"271\":1,\"295\":1,\"602\":1}}],[\"需要注意\",{\"1\":{\"131\":1,\"148\":1,\"176\":1,\"308\":1,\"405\":1,\"467\":1}}],[\"需要注意过渡\",{\"1\":{\"30\":1}}],[\"需要将\",{\"1\":{\"30\":1}}],[\"需要通过其他\",{\"1\":{\"5\":1}}],[\"需求刚好需要用到这些功能的话\",{\"1\":{\"385\":1}}],[\"需求需要实现\",{\"1\":{\"9\":1}}],[\"需求\",{\"0\":{\"9\":1}}],[\"近期有一个实现定时启动\",{\"1\":{\"8\":1}}],[\"|叫做管道\",{\"1\":{\"701\":1}}],[\"|delta|~maxscrollextent\",{\"1\":{\"412\":2}}],[\"|delta|~0\",{\"1\":{\"412\":2}}],[\"|delta|\",{\"1\":{\"412\":4}}],[\"||\",{\"1\":{\"26\":2,\"88\":1,\"125\":1,\"159\":2,\"193\":2,\"228\":1,\"231\":2,\"237\":1,\"247\":1,\"264\":1,\"265\":1,\"295\":1,\"332\":4,\"347\":1,\"351\":1,\"359\":1,\"360\":1,\"368\":2,\"392\":1,\"398\":2,\"405\":1,\"415\":1,\"701\":1,\"753\":3,\"759\":3,\"761\":3}}],[\"|\",{\"1\":{\"6\":1,\"137\":1,\"140\":1,\"232\":1,\"247\":1,\"250\":1,\"256\":4,\"263\":16,\"267\":2,\"369\":1,\"498\":1,\"507\":1,\"662\":2,\"697\":2,\"701\":1,\"779\":1,\"818\":1}}],[\"q键退出\",{\"1\":{\"685\":1}}],[\"qlee\",{\"1\":{\"243\":1}}],[\"qq\",{\"1\":{\"77\":1,\"798\":1}}],[\"qian520ao\",{\"1\":{\"71\":1}}],[\"quicksort1\",{\"1\":{\"927\":3}}],[\"quickarray\",{\"1\":{\"927\":11}}],[\"quickly\",{\"1\":{\"767\":1}}],[\"quick\",{\"0\":{\"449\":1}}],[\"quit\",{\"1\":{\"761\":1}}],[\"quits\",{\"1\":{\"247\":1}}],[\"quitallowed\",{\"1\":{\"48\":2}}],[\"qualifier的注解来实现和\",{\"1\":{\"204\":1}}],[\"qualifier注解可以知道\",{\"1\":{\"204\":1}}],[\"qualifier才是他实现标识限定符注解\",{\"1\":{\"204\":1}}],[\"qualifier\",{\"0\":{\"204\":1},\"1\":{\"204\":4}}],[\"quadto\",{\"1\":{\"143\":1}}],[\"question\",{\"1\":{\"137\":1}}],[\"queuefromtimeoutevent\",{\"1\":{\"238\":1}}],[\"queuefromzeroevent\",{\"1\":{\"238\":1}}],[\"queued\",{\"1\":{\"235\":1}}],[\"queue\",{\"1\":{\"49\":2,\"52\":1,\"221\":7,\"238\":1,\"247\":2,\"475\":1,\"744\":1,\"745\":6,\"759\":2,\"761\":14,\"848\":7}}],[\"querylocalinterface\",{\"1\":{\"71\":2,\"138\":1}}],[\"queryintentactivities\",{\"1\":{\"6\":1}}],[\"query\",{\"1\":{\"6\":1}}],[\"q\",{\"1\":{\"6\":1,\"629\":2}}],[\"并插入到对应位置\",{\"1\":{\"921\":1}}],[\"并插入到队列\",{\"1\":{\"848\":1}}],[\"并记录下空出的位置为toindex\",{\"1\":{\"859\":1}}],[\"并再和新的子节点比较\",{\"1\":{\"859\":1}}],[\"并说明有环存在即可\",{\"1\":{\"850\":1}}],[\"并添加\",{\"1\":{\"803\":1}}],[\"并添加对于自定义属性\",{\"1\":{\"116\":1}}],[\"并提交到\",{\"1\":{\"795\":1}}],[\"并提供了double\",{\"1\":{\"360\":1}}],[\"并提供\",{\"1\":{\"348\":1}}],[\"并同步到\",{\"1\":{\"794\":1}}],[\"并删除旧的博客内容\",{\"1\":{\"794\":1}}],[\"并删除掉即可\",{\"1\":{\"63\":1}}],[\"并增加\",{\"1\":{\"767\":1}}],[\"并运行\",{\"1\":{\"761\":1}}],[\"并通知\",{\"1\":{\"759\":1}}],[\"并通过帮助类真正实现注解逻辑\",{\"1\":{\"570\":1}}],[\"并通过herocontroller\",{\"1\":{\"349\":1}}],[\"并通过其管理动画\",{\"1\":{\"314\":1}}],[\"并通过其\",{\"1\":{\"300\":1}}],[\"并通过\",{\"1\":{\"39\":1,\"138\":1,\"353\":1}}],[\"并和当前\",{\"1\":{\"753\":1}}],[\"并处理\",{\"1\":{\"744\":1}}],[\"并处理逻辑\",{\"1\":{\"126\":1}}],[\"并以此将数组划分为两部分\",{\"1\":{\"927\":1}}],[\"并以此创建\",{\"1\":{\"334\":1}}],[\"并以\",{\"1\":{\"737\":1}}],[\"并回车\",{\"1\":{\"719\":1}}],[\"并回调\",{\"1\":{\"320\":1}}],[\"并据此产生call对象\",{\"1\":{\"713\":1}}],[\"并据此创建\",{\"1\":{\"341\":1}}],[\"并解压\",{\"0\":{\"677\":1}}],[\"并有可选的类型标注\",{\"1\":{\"663\":1}}],[\"并修改为\",{\"1\":{\"625\":1}}],[\"并修改了传入的值的话则不会相等\",{\"1\":{\"157\":1}}],[\"并阻塞其所在线程\",{\"1\":{\"623\":1}}],[\"并探讨一下其实现原理\",{\"1\":{\"580\":1}}],[\"并未执行asingleton的构造方法\",{\"1\":{\"547\":1}}],[\"并未使用\",{\"1\":{\"376\":1}}],[\"并没有在\",{\"1\":{\"748\":1}}],[\"并没有调用\",{\"1\":{\"415\":1}}],[\"并没有注册依赖\",{\"1\":{\"273\":1}}],[\"并生成\",{\"1\":{\"399\":1}}],[\"并指定回调方法为powerimagebaserequest\",{\"1\":{\"399\":1}}],[\"并加入到\",{\"1\":{\"376\":1}}],[\"并绑定\",{\"1\":{\"353\":1}}],[\"并伴随着位置\",{\"1\":{\"353\":1}}],[\"并转化得到其在\",{\"1\":{\"348\":1}}],[\"并引发\",{\"1\":{\"347\":1}}],[\"并执行该网络请求\",{\"1\":{\"708\":1}}],[\"并执行其handlerequest方法处理加载图片请求\",{\"1\":{\"399\":1}}],[\"并执行其方法\",{\"1\":{\"62\":1}}],[\"并执行\",{\"1\":{\"341\":1,\"398\":1,\"742\":1,\"762\":1}}],[\"并用该二进制表示形式创建类或者接口的过程\",{\"1\":{\"492\":1}}],[\"并用相同大小的\",{\"1\":{\"341\":1}}],[\"并用构造函数调用initview\",{\"1\":{\"167\":1}}],[\"并开启\",{\"1\":{\"327\":1}}],[\"并开始监听传入的\",{\"1\":{\"315\":1}}],[\"并发拼接\",{\"1\":{\"655\":1}}],[\"并发编程笔记\",{\"0\":{\"559\":1}}],[\"并发出\",{\"1\":{\"413\":1}}],[\"并发出通知\",{\"1\":{\"320\":1,\"321\":1,\"327\":1}}],[\"并发起\",{\"1\":{\"179\":1}}],[\"并保存数据\",{\"1\":{\"827\":1}}],[\"并保存源文件\",{\"1\":{\"719\":1}}],[\"并保存到数组res\",{\"1\":{\"737\":1}}],[\"并保存到\",{\"1\":{\"365\":1}}],[\"并保存对应数据\",{\"1\":{\"93\":1}}],[\"并保证当\",{\"1\":{\"319\":1}}],[\"并允许其他对象监听二者的变化\",{\"1\":{\"316\":1}}],[\"并对其作以修改\",{\"1\":{\"552\":1}}],[\"并对\",{\"1\":{\"315\":1}}],[\"并监听传入的\",{\"1\":{\"440\":1}}],[\"并监听其值变化\",{\"1\":{\"312\":1}}],[\"并监听回调\",{\"1\":{\"244\":1}}],[\"并传入无参\",{\"1\":{\"742\":1}}],[\"并传入ui\",{\"1\":{\"377\":1}}],[\"并传入\",{\"1\":{\"308\":1,\"423\":1}}],[\"并接受输入\",{\"1\":{\"287\":1}}],[\"并依此将\",{\"1\":{\"266\":1}}],[\"并作为\",{\"1\":{\"259\":1}}],[\"并作为根\",{\"1\":{\"254\":1}}],[\"并mount到\",{\"1\":{\"254\":1}}],[\"并触发\",{\"1\":{\"237\":1,\"310\":2,\"377\":1}}],[\"并丢弃掉后续\",{\"1\":{\"231\":1}}],[\"并行执行\",{\"1\":{\"221\":1,\"631\":1}}],[\"并获取到他实例化好的service对象注入到client中就可以了\",{\"1\":{\"203\":1}}],[\"并按照串行的顺序依次调用\",{\"1\":{\"193\":1}}],[\"并一并传入\",{\"1\":{\"193\":1}}],[\"并一直存活\",{\"1\":{\"35\":1}}],[\"并为按钮绑定监听事件\",{\"1\":{\"189\":1}}],[\"并改变字的颜色\",{\"1\":{\"153\":1}}],[\"并更新界面\",{\"1\":{\"152\":1}}],[\"并相应更新界面\",{\"1\":{\"152\":1}}],[\"并赋值给\",{\"1\":{\"147\":1}}],[\"并赋予其访问权限\",{\"1\":{\"6\":1}}],[\"并绘制\",{\"1\":{\"147\":1}}],[\"并根据我的需求更改了部分内容\",{\"1\":{\"791\":1}}],[\"并根据返回值调用子类\",{\"1\":{\"394\":1}}],[\"并根据\",{\"1\":{\"138\":1}}],[\"并从\",{\"1\":{\"125\":1}}],[\"并从中取出服务端传回来的数据\",{\"1\":{\"71\":1}}],[\"并暴露单一数据\",{\"1\":{\"125\":1}}],[\"并非\",{\"1\":{\"125\":1}}],[\"并实现\",{\"1\":{\"333\":1}}],[\"并实现动画效果\",{\"1\":{\"141\":1}}],[\"并实现抽象接口对应的方法即可\",{\"1\":{\"123\":1}}],[\"并实现客户端\",{\"1\":{\"83\":1}}],[\"并不针真的删除该点\",{\"1\":{\"905\":1}}],[\"并不是一个好办法\",{\"1\":{\"798\":1}}],[\"并不是从文字高度的中间开始绘制\",{\"1\":{\"33\":1}}],[\"并不包含\",{\"1\":{\"769\":1}}],[\"并不会处理\",{\"1\":{\"634\":1}}],[\"并不会再将对象的内容进行存储\",{\"1\":{\"587\":1}}],[\"并不会影响其他任务执行\",{\"1\":{\"292\":1}}],[\"并不推荐在\",{\"1\":{\"550\":1}}],[\"并不推荐该方法\",{\"1\":{\"475\":1}}],[\"并不需要立即获取到其单例\",{\"1\":{\"548\":1}}],[\"并不能真正真正绘制内容\",{\"1\":{\"397\":1}}],[\"并不产生\",{\"1\":{\"265\":1}}],[\"并不难\",{\"1\":{\"113\":1}}],[\"并返回下游流\",{\"1\":{\"629\":1,\"653\":1}}],[\"并返回其结果\",{\"1\":{\"583\":1}}],[\"并返回其指针\",{\"1\":{\"398\":1}}],[\"并返回结果\",{\"1\":{\"358\":1}}],[\"并返回红底黄字的错误原因widget\",{\"1\":{\"292\":1}}],[\"并返回\",{\"1\":{\"92\":1,\"357\":1,\"376\":1,\"393\":1}}],[\"并分别插入key和value\",{\"1\":{\"87\":1}}],[\"并请求服务端调用指定方法\",{\"1\":{\"71\":1}}],[\"并向\",{\"1\":{\"71\":1,\"398\":1}}],[\"并调用由子类实现的foreachtween\",{\"1\":{\"303\":1}}],[\"并调用其\",{\"1\":{\"191\":1}}],[\"并调用listener\",{\"1\":{\"117\":1}}],[\"并调用接口对应方法\",{\"1\":{\"57\":1}}],[\"并调用msg\",{\"1\":{\"49\":1}}],[\"并在布局中使用\",{\"1\":{\"784\":1}}],[\"并在新的线程运行\",{\"1\":{\"759\":1}}],[\"并在初始化完成后通知创建这个\",{\"1\":{\"753\":1}}],[\"并在内部调用self\",{\"1\":{\"731\":1}}],[\"并在块执行完毕后消耗掉这个\",{\"1\":{\"636\":1}}],[\"并在任何上游流发出值时重新计算它\",{\"1\":{\"631\":1}}],[\"并在readobject\",{\"1\":{\"506\":1}}],[\"并在检测到有重复\",{\"1\":{\"346\":1}}],[\"并在其变化时触发\",{\"1\":{\"335\":1}}],[\"并在每次执行完\",{\"1\":{\"238\":1}}],[\"并在每次普通的\",{\"1\":{\"229\":1}}],[\"并在\",{\"1\":{\"192\":1,\"235\":1,\"311\":1,\"353\":1,\"358\":1}}],[\"并在用户交互等情况下导致数据变化时\",{\"1\":{\"126\":1}}],[\"并在post\",{\"1\":{\"56\":1}}],[\"并在后台进程运行multidex\",{\"1\":{\"30\":1}}],[\"并共同参与处理\",{\"1\":{\"56\":1}}],[\"并由此获得mqueue\",{\"1\":{\"56\":1}}],[\"并将小的复制到新数组\",{\"1\":{\"913\":1}}],[\"并将左节点c的右节点赋值给该节点a\",{\"1\":{\"903\":1}}],[\"并将插入优先级队列中\",{\"1\":{\"837\":1}}],[\"并将优化后的代码绑定到方法上\",{\"1\":{\"768\":1}}],[\"并将数组用该类加载器标识\",{\"1\":{\"492\":1}}],[\"并将数据传递给\",{\"1\":{\"125\":1}}],[\"并将renderview设置为\",{\"1\":{\"266\":1}}],[\"并将renderview作为自己对应的\",{\"1\":{\"255\":1}}],[\"并将其压入\",{\"1\":{\"759\":1}}],[\"并将其传入创建\",{\"1\":{\"331\":1}}],[\"并将其作为整个\",{\"1\":{\"257\":1}}],[\"并将其作为当前\",{\"1\":{\"256\":1}}],[\"并将其设置为\",{\"1\":{\"253\":1}}],[\"并将上一个\",{\"1\":{\"235\":1}}],[\"并将androidinjectionmodule加入其中\",{\"1\":{\"211\":1}}],[\"并将事件暴露给上一级\",{\"1\":{\"126\":1}}],[\"并将结果更新到\",{\"1\":{\"122\":1}}],[\"并将\",{\"1\":{\"52\":1,\"248\":1,\"254\":1,\"256\":1,\"532\":1,\"757\":1}}],[\"并将主\",{\"1\":{\"30\":1}}],[\"并与当前线程关联保存在sthreadlocal中\",{\"1\":{\"48\":1}}],[\"并\",{\"1\":{\"30\":1,\"771\":1}}],[\"并且下面的圆盘要比上面的圆盘直径大\",{\"1\":{\"912\":1}}],[\"并且子节点关键字小于该点\",{\"1\":{\"858\":1}}],[\"并且容量大小不再变化时\",{\"1\":{\"828\":1}}],[\"并且登录\",{\"1\":{\"810\":1}}],[\"并且可以在不中断线程的情况下访问或修改\",{\"1\":{\"768\":1}}],[\"并且可以使用\",{\"1\":{\"445\":1}}],[\"并且目前为止\",{\"1\":{\"740\":1}}],[\"并且限制访问文件数量\",{\"1\":{\"731\":1}}],[\"并且使用\",{\"1\":{\"668\":1}}],[\"并且使用imagecache统一管理图片缓存\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"并且尊重调用它们的多个协程\",{\"1\":{\"638\":1}}],[\"并且只能处理上游的异常\",{\"1\":{\"634\":1}}],[\"并且去处理最新的值\",{\"1\":{\"630\":1}}],[\"并且每次\",{\"1\":{\"629\":1}}],[\"并且每次循环间隔有几毫秒的误差\",{\"1\":{\"13\":1}}],[\"并且参数都需要用\",{\"1\":{\"612\":1}}],[\"并且需要一个明确实现的\",{\"1\":{\"589\":1}}],[\"并且需要展示\",{\"1\":{\"347\":1}}],[\"并且起始年份包含的天数至少要有4天\",{\"1\":{\"576\":1}}],[\"并且当年的\",{\"1\":{\"576\":1}}],[\"并且之后的修改也不会\",{\"1\":{\"529\":1}}],[\"并且链表长度超过min\",{\"1\":{\"505\":1}}],[\"并且这个对象在其他线程被更改\",{\"1\":{\"527\":1}}],[\"并且这个尺寸超过了父级约束\",{\"1\":{\"439\":1}}],[\"并且这里的\",{\"1\":{\"376\":1}}],[\"并且已经得知文本方向\",{\"1\":{\"424\":1}}],[\"并且内部持有\",{\"1\":{\"409\":1}}],[\"并且还会在\",{\"1\":{\"405\":1}}],[\"并且混入了extendedimageprovider的子类\",{\"1\":{\"382\":1}}],[\"并且监听imagestream以便在图片加载成功之后获取imageinfo\",{\"1\":{\"372\":1}}],[\"并且大小也从\",{\"1\":{\"340\":1}}],[\"并且将上述第二步常见网络请求的过程也加入链式调用中\",{\"1\":{\"708\":1}}],[\"并且将自己注册到此widget\",{\"1\":{\"272\":1}}],[\"并且将我们在runapp传入的\",{\"1\":{\"266\":1}}],[\"并且初始化它以便在下一帧的时候对其进行渲染\",{\"1\":{\"257\":1}}],[\"并且有了自己的child\",{\"1\":{\"256\":1}}],[\"并且同时也将rootwidget和之前创建的\",{\"1\":{\"256\":1}}],[\"并且在\",{\"1\":{\"327\":1}}],[\"并且在最后调用dart\",{\"1\":{\"249\":1}}],[\"并且在api19+之后的所有的重复闹钟都不是精确的\",{\"1\":{\"11\":1}}],[\"并且添加到\",{\"1\":{\"247\":1}}],[\"并且选择了\",{\"1\":{\"173\":1}}],[\"并且返回值还是\",{\"1\":{\"358\":1}}],[\"并且返回值为\",{\"1\":{\"173\":1}}],[\"并且返回结果为\",{\"1\":{\"172\":1}}],[\"并且提供方法获取\",{\"1\":{\"153\":1}}],[\"并且包括透明区域在内的图片大小\",{\"1\":{\"130\":1}}],[\"并且\",{\"1\":{\"123\":2,\"308\":1,\"584\":1}}],[\"并且此时的\",{\"1\":{\"123\":1}}],[\"并且几乎所有的逻辑都写在\",{\"1\":{\"122\":1}}],[\"并且滑动的方向是垂直的\",{\"1\":{\"112\":1}}],[\"并且从这个时候开始慢慢展开\",{\"1\":{\"111\":1}}],[\"并且用数组直接保存\",{\"1\":{\"85\":1}}],[\"并且会在客户端被调用\",{\"1\":{\"71\":1}}],[\"并且直至服务死亡\",{\"1\":{\"36\":1}}],[\"并且要确保过渡\",{\"1\":{\"30\":1}}],[\"并且不是\",{\"1\":{\"26\":1}}],[\"并且恢复闹钟\",{\"1\":{\"17\":1}}],[\"并且唤醒设备\",{\"1\":{\"12\":1}}],[\"并且对于循环的间隔也更加灵活\",{\"1\":{\"10\":1}}],[\"并且重新生成uri并赋予将要处理该图的第三方\",{\"1\":{\"6\":1}}],[\"对排序速度影响较大\",{\"1\":{\"921\":1}}],[\"对这些小数组进行插入排序\",{\"1\":{\"921\":1}}],[\"对获得的结果\",{\"1\":{\"903\":1}}],[\"对获取到的数据进行解析\",{\"1\":{\"736\":1}}],[\"对获取到的内容进行分析\",{\"1\":{\"736\":1}}],[\"对指定下标元素读写快\",{\"1\":{\"879\":1}}],[\"对其叶子节点上的字符赋予编码\",{\"1\":{\"837\":1}}],[\"对其进行相应的编辑即可\",{\"1\":{\"809\":1}}],[\"对网站静态化处理后\",{\"1\":{\"812\":1}}],[\"对网页数据进行解析\",{\"1\":{\"737\":1}}],[\"对不同的\",{\"1\":{\"793\":1}}],[\"对dao的封装\",{\"1\":{\"781\":1}}],[\"对查找到的文本显示颜色\",{\"1\":{\"702\":1}}],[\"对整数做平方\",{\"1\":{\"638\":1}}],[\"对文章进行静态化处理\",{\"1\":{\"813\":1}}],[\"对文本进行加密和解密\",{\"1\":{\"557\":1}}],[\"对文件的操作引用\",{\"1\":{\"243\":1}}],[\"对判断是否需要初始化进行了同步锁\",{\"1\":{\"546\":1}}],[\"对上面的代码稍作优化\",{\"1\":{\"546\":1}}],[\"对比一下差异\",{\"1\":{\"748\":1}}],[\"对比查看这里\",{\"1\":{\"501\":1}}],[\"对比\",{\"1\":{\"412\":1}}],[\"对比两种代码发现获取状态栏高度的代码逻辑几乎一样\",{\"1\":{\"101\":1}}],[\"对传入的\",{\"1\":{\"408\":2}}],[\"对官方\",{\"1\":{\"376\":1}}],[\"对齐\",{\"1\":{\"341\":1}}],[\"对画布进行平移\",{\"1\":{\"334\":1}}],[\"对此相应\",{\"1\":{\"284\":1}}],[\"对android工程的影响极小\",{\"1\":{\"209\":1}}],[\"对启动\",{\"1\":{\"179\":1}}],[\"对申请结果进行处理\",{\"1\":{\"173\":1}}],[\"对信号量进行发送操作\",{\"1\":{\"137\":1}}],[\"对信号量的操作只有一下\",{\"1\":{\"137\":1}}],[\"对资源执行完操作后\",{\"1\":{\"137\":1}}],[\"对该文件进行\",{\"1\":{\"136\":1}}],[\"对外提供更多的接口\",{\"1\":{\"712\":1}}],[\"对外提供一个公有\",{\"1\":{\"545\":1}}],[\"对外提供宽高以及image\",{\"1\":{\"371\":1}}],[\"对外暴露操纵\",{\"1\":{\"404\":1}}],[\"对外暴露无可修改数据\",{\"1\":{\"126\":1}}],[\"对外发出\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"对外分享有权限的\",{\"1\":{\"6\":1}}],[\"对要监听点击事件的控件设置监听\",{\"1\":{\"117\":1}}],[\"对\",{\"1\":{\"112\":2,\"126\":2,\"332\":2,\"528\":1,\"547\":1,\"649\":1,\"781\":1}}],[\"对数组进行扩容\",{\"1\":{\"93\":1}}],[\"对mhashes中最后一个与key的hash一致的后一位index取反\",{\"1\":{\"92\":1}}],[\"对mfirsttouchtarget\",{\"1\":{\"26\":1}}],[\"对二分法查找到的值再取反\",{\"1\":{\"87\":1}}],[\"对项目改动少并且逻辑较为简单\",{\"1\":{\"30\":1}}],[\"对点击事件进行处理\",{\"1\":{\"26\":1}}],[\"对象来自于\",{\"1\":{\"712\":1}}],[\"对象生成对应的\",{\"1\":{\"711\":1}}],[\"对象即可\",{\"1\":{\"710\":1}}],[\"对象还没有被构造完成\",{\"1\":{\"604\":1}}],[\"对象atestclsobj\",{\"1\":{\"554\":1}}],[\"对象clazz\",{\"1\":{\"554\":1}}],[\"对象只是在\",{\"1\":{\"527\":1}}],[\"对象到底占用多大内存\",{\"1\":{\"516\":1,\"517\":1}}],[\"对象实际包含的数据\",{\"1\":{\"516\":1}}],[\"对象头\",{\"1\":{\"516\":3,\"519\":1,\"521\":2}}],[\"对象在内存中的大小包括以下\",{\"1\":{\"516\":1}}],[\"对象在构造方法中退出了调用方法的分支\",{\"1\":{\"247\":1}}],[\"对象大小的方法\",{\"1\":{\"517\":1}}],[\"对象大小\",{\"1\":{\"516\":2}}],[\"对象没有明确规定实在java\",{\"1\":{\"492\":1}}],[\"对象过多导致\",{\"1\":{\"464\":1}}],[\"对象则返回\",{\"1\":{\"461\":1}}],[\"对象则是通过服务端的\",{\"1\":{\"83\":1}}],[\"对象引用\",{\"0\":{\"477\":1},\"1\":{\"459\":1}}],[\"对象引用及名字后将其保存到查找表中\",{\"1\":{\"138\":1}}],[\"对象展示图片\",{\"1\":{\"393\":1}}],[\"对象全局唯一\",{\"1\":{\"375\":1}}],[\"对象会传入\",{\"1\":{\"365\":1}}],[\"对象被回收\",{\"1\":{\"247\":1}}],[\"对象创建一个\",{\"1\":{\"189\":1}}],[\"对象并且在public\",{\"1\":{\"138\":1}}],[\"对象的弱引用\",{\"1\":{\"528\":1}}],[\"对象的操作不会影响本线程\",{\"1\":{\"527\":1}}],[\"对象的sparsearray\",{\"1\":{\"523\":1}}],[\"对象的大小是\",{\"1\":{\"519\":1}}],[\"对象的大小及其应用\",{\"0\":{\"515\":1},\"1\":{\"96\":1}}],[\"对象的大小及其应用可以知道\",{\"1\":{\"85\":1}}],[\"对象的时候初始化非静态变量\",{\"1\":{\"497\":1}}],[\"对象的时候调用\",{\"1\":{\"138\":1}}],[\"对象的缓存\",{\"1\":{\"375\":1}}],[\"对象的onserviceconnected方法中\",{\"1\":{\"138\":1}}],[\"对象的原因\",{\"1\":{\"83\":1}}],[\"对象本身的大小\",{\"1\":{\"516\":1}}],[\"对象本身\",{\"1\":{\"71\":1}}],[\"对象找到已经注册了的\",{\"1\":{\"63\":1}}],[\"对象为\",{\"1\":{\"63\":1,\"189\":1}}],[\"对象是同一个\",{\"1\":{\"63\":1}}],[\"对象不同\",{\"1\":{\"63\":1}}],[\"对象中获取到\",{\"1\":{\"62\":1}}],[\"对象必须在主线程\",{\"1\":{\"190\":1}}],[\"对象必须新建一个同名\",{\"1\":{\"60\":1}}],[\"对象必须显示\",{\"1\":{\"60\":1}}],[\"对象发送给\",{\"1\":{\"39\":1}}],[\"对象\",{\"0\":{\"476\":1},\"1\":{\"24\":1,\"39\":2,\"57\":1,\"60\":1,\"63\":1,\"71\":1,\"83\":2,\"138\":2,\"189\":10,\"191\":1,\"214\":1,\"243\":1,\"246\":1,\"304\":1,\"309\":1,\"333\":1,\"335\":3,\"355\":1,\"368\":1,\"374\":1,\"391\":2,\"393\":1,\"398\":3,\"405\":1,\"461\":1,\"492\":1,\"498\":1,\"513\":2,\"519\":1,\"527\":1,\"547\":1,\"603\":1,\"608\":1,\"612\":1,\"710\":1,\"712\":1}}],[\"对于这些小于\",{\"1\":{\"927\":1}}],[\"对于这种\",{\"1\":{\"621\":1}}],[\"对于这种情况\",{\"1\":{\"442\":1}}],[\"对于这种场景\",{\"1\":{\"6\":1}}],[\"对于数组arr中的元素来说\",{\"1\":{\"919\":1}}],[\"对于数组的大小计算\",{\"1\":{\"516\":1}}],[\"对于case\",{\"1\":{\"904\":1}}],[\"对于在数组中保存的堆\",{\"1\":{\"857\":1}}],[\"对于有环存在\",{\"1\":{\"850\":1}}],[\"对于异步返回多个值的需求\",{\"1\":{\"650\":1}}],[\"对于异步方法产生异常等flutter框架没有捕获的情况\",{\"1\":{\"292\":1}}],[\"对于作用域的并发\",{\"1\":{\"643\":1}}],[\"对于不能直接修改的类\",{\"1\":{\"612\":1}}],[\"对于不同的调用请求\",{\"1\":{\"398\":1}}],[\"对于kotlin语言来说\",{\"1\":{\"593\":1}}],[\"对于network\",{\"1\":{\"374\":1}}],[\"对于动画的控制则由\",{\"1\":{\"310\":1}}],[\"对于普通的错误\",{\"1\":{\"294\":1}}],[\"对于上述的\",{\"1\":{\"317\":1}}],[\"对于上述的结论\",{\"1\":{\"276\":1}}],[\"对于上述步骤获取到的图片\",{\"1\":{\"6\":1}}],[\"对于\",{\"1\":{\"237\":1,\"294\":1,\"300\":1,\"314\":1,\"350\":1,\"358\":1,\"748\":1,\"811\":1}}],[\"对于我们自己定义的类\",{\"1\":{\"202\":1}}],[\"对于复杂项目\",{\"1\":{\"126\":1}}],[\"对于简单的项目来说\",{\"1\":{\"123\":1}}],[\"对于其他每个密度\",{\"1\":{\"100\":1}}],[\"对应项目的\",{\"1\":{\"795\":1}}],[\"对应下文的\",{\"1\":{\"767\":1}}],[\"对应生成多行\",{\"1\":{\"767\":1}}],[\"对应我们在\",{\"1\":{\"749\":1}}],[\"对应我们在之前遇到的用来管理\",{\"1\":{\"254\":1}}],[\"对应\",{\"1\":{\"492\":1}}],[\"对应页面上原先\",{\"1\":{\"347\":1}}],[\"对应于\",{\"1\":{\"193\":1}}],[\"对应一个包装类xxxrepository类供viewmodel使用\",{\"1\":{\"781\":1}}],[\"对应一个\",{\"1\":{\"76\":1}}],[\"对应的节点\",{\"1\":{\"836\":1}}],[\"对应的节点目前还没有分析到\",{\"1\":{\"264\":1}}],[\"对应的类之外\",{\"1\":{\"394\":1}}],[\"对应的图片\",{\"1\":{\"372\":1}}],[\"对应的实现\",{\"1\":{\"372\":1}}],[\"对应的值\",{\"1\":{\"357\":1}}],[\"对应的state\",{\"1\":{\"353\":1}}],[\"对应的navigatorstate\",{\"1\":{\"349\":1}}],[\"对应的属性\",{\"1\":{\"312\":1}}],[\"对应的这一级中\",{\"1\":{\"264\":1}}],[\"对应的数据\",{\"1\":{\"243\":1,\"244\":1}}],[\"对应的大小\",{\"1\":{\"159\":1}}],[\"对应的字母\",{\"1\":{\"152\":1}}],[\"对应的索引\",{\"1\":{\"87\":1}}],[\"对应的\",{\"1\":{\"77\":1,\"159\":1,\"179\":1,\"246\":1,\"256\":3,\"259\":1,\"261\":1,\"262\":1,\"263\":2,\"264\":2,\"265\":1,\"266\":1,\"375\":1,\"397\":1,\"413\":1,\"527\":1,\"742\":1,\"749\":1,\"759\":1,\"783\":1}}],[\"对应的处理方法\",{\"1\":{\"49\":1}}],[\"对应的照片\",{\"1\":{\"6\":1}}],[\"对应context\",{\"1\":{\"6\":1}}],[\"对应权限\",{\"1\":{\"6\":1}}],[\"3之间的增量是\",{\"1\":{\"919\":1}}],[\"3当祖父节点没有左节点无法右旋时的特殊处理\",{\"1\":{\"904\":1}}],[\"3s\",{\"1\":{\"731\":1}}],[\"3s发射一次\",{\"1\":{\"659\":2}}],[\"3b\",{\"1\":{\"659\":1}}],[\"3c\",{\"1\":{\"659\":2}}],[\"3向上查询\",{\"1\":{\"485\":1}}],[\"3中\",{\"1\":{\"296\":1}}],[\"38\",{\"1\":{\"247\":1}}],[\"384\",{\"1\":{\"138\":1}}],[\"37\",{\"1\":{\"247\":1}}],[\"375\",{\"1\":{\"195\":2,\"196\":3}}],[\"375dp\",{\"1\":{\"100\":4}}],[\"35\",{\"1\":{\"247\":1}}],[\"33\",{\"1\":{\"247\":1}}],[\"31uv\",{\"1\":{\"805\":1}}],[\"31\",{\"1\":{\"247\":1,\"576\":2}}],[\"315\",{\"1\":{\"196\":2}}],[\"3187320\",{\"1\":{\"138\":1,\"139\":1}}],[\"30以yyyy格式化为什么会出现问题\",{\"1\":{\"576\":1}}],[\"30的\",{\"1\":{\"572\":1}}],[\"30时出现2020\",{\"1\":{\"572\":1}}],[\"300dp\",{\"1\":{\"189\":1}}],[\"300\",{\"1\":{\"167\":2,\"629\":2,\"630\":2,\"631\":2,\"679\":2,\"731\":1}}],[\"30\",{\"1\":{\"158\":1,\"247\":1,\"276\":1,\"576\":2,\"578\":1,\"776\":1}}],[\"3245399\",{\"1\":{\"904\":1}}],[\"32\",{\"1\":{\"158\":1,\"244\":1,\"247\":1,\"500\":1,\"521\":1,\"904\":1}}],[\"320\",{\"1\":{\"100\":1,\"445\":1}}],[\"39\",{\"1\":{\"247\":1}}],[\"391137\",{\"1\":{\"138\":1}}],[\"39440766\",{\"1\":{\"137\":1}}],[\"36097\",{\"1\":{\"740\":1}}],[\"360dp\",{\"1\":{\"100\":1}}],[\"36\",{\"1\":{\"247\":1,\"731\":2}}],[\"36778087\",{\"1\":{\"63\":1}}],[\"3的话\",{\"1\":{\"95\":1}}],[\"34\",{\"1\":{\"13\":1,\"247\":1,\"903\":1}}],[\"3\",{\"0\":{\"40\":1,\"106\":1,\"117\":1,\"230\":1,\"461\":1,\"466\":1,\"473\":1,\"534\":1,\"547\":1,\"628\":1,\"770\":1},\"1\":{\"6\":1,\"30\":2,\"36\":1,\"38\":1,\"95\":1,\"100\":1,\"112\":2,\"138\":1,\"140\":1,\"157\":1,\"158\":1,\"167\":1,\"173\":1,\"182\":2,\"222\":3,\"239\":1,\"246\":1,\"247\":6,\"251\":1,\"254\":1,\"263\":1,\"273\":1,\"292\":1,\"294\":1,\"295\":1,\"330\":1,\"332\":2,\"376\":1,\"400\":1,\"427\":3,\"490\":1,\"493\":1,\"494\":1,\"495\":1,\"498\":1,\"511\":1,\"547\":1,\"568\":1,\"576\":1,\"583\":1,\"606\":1,\"612\":1,\"622\":2,\"625\":1,\"629\":5,\"630\":4,\"631\":6,\"645\":1,\"651\":2,\"656\":1,\"659\":2,\"666\":3,\"674\":1,\"690\":2,\"708\":3,\"709\":1,\"723\":3,\"724\":5,\"731\":1,\"745\":1,\"747\":1,\"748\":3,\"759\":4,\"766\":1,\"768\":1,\"782\":1,\"786\":1,\"794\":1,\"827\":3,\"836\":8,\"847\":4,\"848\":4,\"890\":4,\"904\":2,\"912\":5,\"919\":1,\"921\":7,\"927\":1}}],[\"83\",{\"1\":{\"904\":1}}],[\"8389461\",{\"1\":{\"516\":1,\"522\":1}}],[\"8ares\",{\"1\":{\"805\":1}}],[\"85\",{\"1\":{\"805\":1}}],[\"854\",{\"1\":{\"631\":1}}],[\"87\",{\"1\":{\"731\":1}}],[\"822\",{\"1\":{\"578\":1}}],[\"82715741\",{\"1\":{\"528\":1}}],[\"8601的标准\",{\"1\":{\"576\":1}}],[\"8601\",{\"1\":{\"575\":1,\"578\":1}}],[\"8601兼容\",{\"1\":{\"575\":1}}],[\"8byte对齐\",{\"1\":{\"519\":1}}],[\"8格式来存放字符的\",{\"1\":{\"519\":1}}],[\"8比特对齐\",{\"1\":{\"516\":1,\"521\":2}}],[\"8072\",{\"1\":{\"523\":1}}],[\"80\",{\"1\":{\"276\":1,\"403\":1}}],[\"8080\",{\"1\":{\"184\":1}}],[\"800f\",{\"1\":{\"146\":2}}],[\"89210950\",{\"1\":{\"137\":1}}],[\"8888则会发生一次\",{\"1\":{\"398\":1}}],[\"88\",{\"1\":{\"100\":1,\"101\":4}}],[\"84418369http\",{\"1\":{\"33\":1}}],[\"84418369\",{\"1\":{\"33\":1}}],[\"8\",{\"0\":{\"511\":1},\"1\":{\"6\":1,\"12\":1,\"62\":1,\"63\":1,\"115\":1,\"116\":1,\"131\":1,\"133\":1,\"167\":1,\"196\":1,\"247\":1,\"330\":1,\"501\":5,\"505\":1,\"508\":3,\"511\":2,\"516\":16,\"519\":3,\"521\":2,\"523\":2,\"530\":1,\"552\":1,\"557\":1,\"663\":1,\"722\":1,\"737\":2,\"784\":1,\"805\":1,\"816\":1}}],[\"umask\",{\"0\":{\"690\":1},\"1\":{\"690\":2}}],[\"umeninfo\",{\"1\":{\"104\":1}}],[\"umeng\",{\"1\":{\"104\":9,\"105\":1}}],[\"ugo\",{\"1\":{\"689\":1}}],[\"u用户\",{\"1\":{\"689\":1}}],[\"uk\",{\"1\":{\"612\":4}}],[\"u013380694\",{\"1\":{\"519\":1,\"524\":1}}],[\"u013309870\",{\"1\":{\"497\":1}}],[\"u2\",{\"1\":{\"519\":1}}],[\"u1\",{\"1\":{\"519\":2}}],[\"u\",{\"1\":{\"316\":1,\"578\":1}}],[\"uword\",{\"1\":{\"247\":4,\"761\":1}}],[\"ue\",{\"1\":{\"172\":1}}],[\"udf\",{\"1\":{\"126\":1}}],[\"unoptimizing\",{\"1\":{\"767\":1,\"768\":1}}],[\"unoptimized\",{\"0\":{\"767\":1},\"1\":{\"766\":1,\"767\":1,\"768\":3}}],[\"unexpected\",{\"1\":{\"748\":1}}],[\"unable\",{\"1\":{\"748\":1}}],[\"unaryfunction\",{\"1\":{\"748\":1}}],[\"unalias\",{\"1\":{\"698\":1}}],[\"unavailable\",{\"1\":{\"395\":1,\"757\":1}}],[\"unlock\",{\"1\":{\"645\":1}}],[\"unlike\",{\"1\":{\"285\":1}}],[\"unlimited\",{\"1\":{\"251\":1}}],[\"unfocus\",{\"1\":{\"423\":1,\"436\":1}}],[\"unmounted\",{\"1\":{\"370\":1}}],[\"undef\",{\"1\":{\"753\":1}}],[\"undefined\",{\"1\":{\"247\":1,\"462\":1}}],[\"underlying\",{\"1\":{\"552\":1}}],[\"underscroll\",{\"1\":{\"412\":2,\"418\":4}}],[\"understand\",{\"1\":{\"267\":1}}],[\"untrackedpendingimage\",{\"1\":{\"376\":4}}],[\"untracked\",{\"1\":{\"375\":1}}],[\"untitled\",{\"1\":{\"264\":1,\"276\":1,\"740\":1}}],[\"until\",{\"1\":{\"264\":1,\"753\":2,\"759\":1,\"761\":2,\"896\":2,\"897\":2,\"898\":1,\"921\":3}}],[\"untag\",{\"1\":{\"248\":2}}],[\"unbounded\",{\"1\":{\"319\":1}}],[\"unblocksigprof\",{\"1\":{\"247\":1}}],[\"unbindservice\",{\"1\":{\"35\":1,\"38\":1}}],[\"unreachable\",{\"1\":{\"237\":1,\"247\":1,\"745\":1}}],[\"unregistereventhandler\",{\"1\":{\"398\":1}}],[\"unregister\",{\"1\":{\"63\":2,\"752\":1}}],[\"unregistercallback\",{\"1\":{\"62\":2,\"63\":1}}],[\"unwinding\",{\"1\":{\"231\":1}}],[\"unsupported\",{\"1\":{\"748\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"583\":1}}],[\"unsupportederror\",{\"1\":{\"227\":1,\"234\":2}}],[\"unshared\",{\"1\":{\"583\":4,\"587\":7,\"591\":4}}],[\"unspecified\",{\"1\":{\"158\":1,\"159\":1}}],[\"unconfined\",{\"1\":{\"624\":2}}],[\"uncaughtexceptionhandler\",{\"1\":{\"297\":2,\"640\":1}}],[\"uncaught\",{\"1\":{\"231\":2}}],[\"unchecked\",{\"1\":{\"193\":1,\"566\":1}}],[\"uncle\",{\"1\":{\"128\":2}}],[\"uninstalled\",{\"1\":{\"817\":1}}],[\"unix内核\",{\"1\":{\"696\":1}}],[\"unicode\",{\"1\":{\"519\":1,\"737\":1}}],[\"unimplementederror\",{\"1\":{\"360\":1}}],[\"uniquekey\",{\"1\":{\"398\":5}}],[\"unique\",{\"1\":{\"247\":6,\"749\":1,\"750\":1,\"754\":1,\"758\":1,\"759\":2,\"760\":1,\"761\":6}}],[\"universus\",{\"1\":{\"138\":4,\"139\":1}}],[\"unidirectional\",{\"1\":{\"126\":1}}],[\"unit\",{\"1\":{\"101\":8,\"196\":1,\"618\":1,\"636\":1,\"638\":2,\"662\":2,\"663\":1,\"753\":2}}],[\"unusual\",{\"1\":{\"63\":1,\"384\":1}}],[\"uint8\",{\"1\":{\"753\":3,\"757\":1,\"758\":2}}],[\"uint8list>\",{\"1\":{\"384\":2}}],[\"uint8list\",{\"1\":{\"243\":2,\"365\":1,\"374\":1,\"383\":3,\"396\":2,\"397\":1}}],[\"uid\",{\"1\":{\"66\":1,\"138\":1}}],[\"ui\",{\"0\":{\"268\":1,\"269\":1},\"1\":{\"50\":1,\"65\":1,\"99\":1,\"100\":1,\"102\":1,\"122\":1,\"123\":2,\"124\":1,\"125\":3,\"126\":18,\"190\":1,\"193\":4,\"196\":1,\"221\":1,\"282\":3,\"285\":4,\"325\":2,\"330\":1,\"334\":2,\"369\":1,\"370\":1,\"371\":4,\"372\":4,\"374\":3,\"383\":2,\"384\":1,\"392\":1,\"393\":1,\"396\":6,\"397\":7,\"400\":1,\"401\":1,\"405\":1,\"622\":1,\"712\":1,\"753\":1,\"784\":1,\"785\":2}}],[\"usr\",{\"1\":{\"679\":2,\"686\":4,\"722\":1}}],[\"usa\",{\"1\":{\"612\":3}}],[\"usage\",{\"1\":{\"522\":1}}],[\"usually\",{\"1\":{\"408\":1}}],[\"us\",{\"1\":{\"241\":1,\"384\":1,\"417\":1}}],[\"useful\",{\"1\":{\"302\":1,\"309\":1}}],[\"uses\",{\"1\":{\"264\":1,\"496\":1}}],[\"usecase<moviedetails\",{\"1\":{\"126\":1}}],[\"usecase<out\",{\"1\":{\"126\":1}}],[\"usecase\",{\"1\":{\"126\":3}}],[\"usertag\",{\"1\":{\"753\":4}}],[\"usermod\",{\"1\":{\"691\":1}}],[\"userdel\",{\"1\":{\"691\":1}}],[\"userdetail\",{\"1\":{\"125\":1}}],[\"useradd\",{\"1\":{\"691\":1}}],[\"users\",{\"1\":{\"691\":1}}],[\"user\",{\"1\":{\"125\":3,\"126\":1,\"138\":1,\"350\":1,\"352\":1,\"486\":1,\"670\":2,\"731\":1,\"794\":2,\"816\":2}}],[\"userid\",{\"1\":{\"125\":3}}],[\"username$\",{\"1\":{\"697\":1}}],[\"username在删除用户时\",{\"1\":{\"691\":1}}],[\"username\",{\"1\":{\"123\":3,\"670\":1,\"691\":2,\"692\":1,\"697\":1,\"784\":2}}],[\"use\",{\"1\":{\"92\":1,\"231\":1,\"243\":1,\"244\":2,\"247\":1,\"285\":1,\"309\":1,\"359\":1,\"376\":2,\"511\":1,\"552\":1,\"604\":1,\"629\":1,\"662\":1,\"728\":1,\"748\":1,\"757\":1,\"761\":2,\"822\":1}}],[\"usedports\",{\"1\":{\"244\":7}}],[\"used\",{\"1\":{\"33\":1,\"228\":1,\"247\":6,\"255\":1,\"262\":1,\"333\":1,\"360\":1,\"376\":1,\"412\":1,\"511\":2,\"519\":1,\"615\":1,\"630\":1,\"636\":1,\"753\":1,\"759\":2,\"770\":1}}],[\"using\",{\"1\":{\"33\":1,\"234\":1,\"274\":2,\"365\":1,\"412\":1,\"430\":1,\"448\":1,\"753\":1,\"761\":1,\"763\":1,\"771\":1}}],[\"upperbound\",{\"1\":{\"319\":3,\"320\":1,\"321\":1,\"327\":1}}],[\"updateuionmainthread\",{\"1\":{\"622\":1}}],[\"updateuserscrolldirection\",{\"1\":{\"417\":1,\"418\":1}}],[\"updateparent\",{\"1\":{\"408\":1}}],[\"updateparentdata\",{\"1\":{\"256\":1,\"265\":1}}],[\"updatecandrag\",{\"1\":{\"404\":1,\"408\":1,\"415\":4}}],[\"updatechild方法\",{\"1\":{\"264\":1}}],[\"updatechild的逻辑分为\",{\"1\":{\"263\":1}}],[\"updatechild\",{\"1\":{\"256\":3,\"259\":1,\"263\":1,\"264\":2,\"270\":2,\"271\":2,\"273\":1}}],[\"updateshadow\",{\"1\":{\"408\":2}}],[\"updateshouldnotify\",{\"1\":{\"273\":1}}],[\"updatesourcestream\",{\"0\":{\"368\":1},\"1\":{\"367\":2}}],[\"updateeffectiveobservers\",{\"1\":{\"349\":1}}],[\"updateherocontroller方法中会使用其获取\",{\"1\":{\"349\":1}}],[\"updatetween\",{\"1\":{\"305\":1}}],[\"updatedelegate\",{\"1\":{\"411\":1}}],[\"updated\",{\"1\":{\"263\":1,\"270\":2,\"347\":1}}],[\"updaterenderobject\",{\"1\":{\"259\":1,\"424\":2,\"437\":1}}],[\"updateinheritance\",{\"1\":{\"256\":1}}],[\"updateappwidget\",{\"1\":{\"189\":1}}],[\"update\",{\"1\":{\"187\":3,\"189\":2,\"263\":1,\"270\":1,\"271\":1,\"282\":1,\"285\":1,\"384\":1,\"418\":2,\"679\":2,\"719\":1,\"731\":1,\"794\":1}}],[\"uptimemillis\",{\"1\":{\"52\":1,\"54\":1}}],[\"up\",{\"1\":{\"25\":1,\"27\":2,\"153\":1,\"234\":1,\"235\":1,\"237\":1,\"350\":1,\"412\":1,\"417\":1,\"418\":1,\"424\":1,\"440\":1,\"560\":1,\"630\":1,\"745\":1,\"753\":2,\"770\":1}}],[\"utils\",{\"0\":{\"179\":1},\"1\":{\"178\":2,\"179\":1,\"752\":4,\"753\":2,\"759\":2}}],[\"util\",{\"1\":{\"62\":3,\"63\":3,\"101\":1,\"138\":4,\"179\":1,\"508\":1,\"523\":3,\"573\":1}}],[\"utc\",{\"1\":{\"12\":1}}],[\"utf8\",{\"1\":{\"519\":2,\"749\":2,\"754\":4}}],[\"utf8类型表示\",{\"1\":{\"519\":1}}],[\"utf\",{\"1\":{\"6\":1,\"115\":1,\"116\":1,\"167\":1,\"519\":1,\"557\":1,\"722\":1,\"737\":2,\"784\":1,\"816\":1}}],[\"uri等等\",{\"1\":{\"759\":1}}],[\"uris\",{\"1\":{\"752\":1}}],[\"uri\",{\"1\":{\"6\":11,\"662\":4,\"742\":5,\"748\":14,\"749\":1,\"752\":6,\"754\":6,\"757\":16,\"758\":2,\"759\":5,\"762\":2}}],[\"urlparse\",{\"1\":{\"737\":1}}],[\"urlopen\",{\"1\":{\"731\":1,\"737\":1}}],[\"urllib2\",{\"1\":{\"731\":2,\"737\":2}}],[\"urls\",{\"1\":{\"730\":1,\"731\":17}}],[\"url\",{\"1\":{\"2\":1,\"80\":2,\"126\":2,\"365\":1,\"374\":3,\"383\":2,\"673\":2,\"708\":3,\"711\":9,\"718\":1,\"731\":16,\"736\":2,\"737\":16,\"752\":1,\"756\":1,\"811\":3}}],[\"兼容适配\",{\"1\":{\"6\":1,\"7\":1}}],[\"746510375\",{\"1\":{\"740\":1}}],[\"777\",{\"1\":{\"690\":1}}],[\"77\",{\"1\":{\"583\":1,\"598\":1}}],[\"7767430\",{\"1\":{\"247\":1}}],[\"7默认算法\",{\"1\":{\"576\":1}}],[\"70\",{\"1\":{\"138\":1}}],[\"70082302\",{\"1\":{\"138\":1}}],[\"7048980213811642382\",{\"1\":{\"128\":1}}],[\"71333103\",{\"1\":{\"550\":1}}],[\"71aa1\",{\"1\":{\"251\":1}}],[\"71a3a5ac7ee3\",{\"1\":{\"125\":1}}],[\"71513385\",{\"1\":{\"137\":1}}],[\"755\",{\"1\":{\"690\":1}}],[\"75是对空间和时间效率的一个平衡选择\",{\"1\":{\"500\":1}}],[\"75f\",{\"1\":{\"500\":1}}],[\"75\",{\"1\":{\"111\":1,\"501\":1,\"505\":1}}],[\"75009663\",{\"1\":{\"104\":1}}],[\"72975536\",{\"1\":{\"497\":1}}],[\"72947\",{\"1\":{\"351\":1}}],[\"72513985\",{\"1\":{\"137\":1}}],[\"72\",{\"1\":{\"101\":1}}],[\"78074983\",{\"1\":{\"71\":1}}],[\"785\",{\"1\":{\"13\":1}}],[\"765\",{\"1\":{\"13\":1}}],[\"7\",{\"1\":{\"6\":1,\"7\":1,\"101\":3,\"196\":1,\"237\":1,\"247\":1,\"427\":3,\"461\":2,\"490\":1,\"497\":1,\"501\":3,\"508\":2,\"573\":1,\"575\":3,\"577\":1,\"578\":2,\"579\":1,\"690\":1,\"716\":1,\"735\":1,\"801\":1,\"805\":1}}],[\">中\",{\"1\":{\"784\":1}}],[\">包裹在<layout\",{\"1\":{\"784\":1}}],[\">updatestartidletime\",{\"1\":{\"761\":1}}],[\">unregister\",{\"1\":{\"752\":1}}],[\">unit\",{\"1\":{\"621\":2}}],[\">addexitlistener\",{\"1\":{\"759\":1}}],[\">adderrorlistener\",{\"1\":{\"759\":1}}],[\">addresumecapability\",{\"1\":{\"759\":1}}],[\">api\",{\"1\":{\"759\":1}}],[\">alignment\",{\"1\":{\"262\":1}}],[\">zone\",{\"1\":{\"759\":3}}],[\">verify\",{\"1\":{\"753\":1}}],[\">version\",{\"1\":{\"752\":1,\"757\":1}}],[\">lowlevelshutdown\",{\"1\":{\"753\":1}}],[\">message\",{\"1\":{\"753\":3,\"759\":1}}],[\">metric\",{\"1\":{\"753\":1}}],[\">markreadytouse\",{\"1\":{\"753\":1}}],[\">main\",{\"1\":{\"247\":1,\"747\":1,\"753\":2,\"759\":1}}],[\">makerunnable\",{\"1\":{\"759\":1}}],[\">make\",{\"1\":{\"70\":1}}],[\">heap\",{\"1\":{\"753\":3}}],[\">handleinterrupts\",{\"1\":{\"745\":1}}],[\">exit\",{\"1\":{\"761\":2}}],[\">exitapiscope\",{\"1\":{\"753\":1}}],[\">errors\",{\"1\":{\"759\":1}}],[\">enable\",{\"1\":{\"754\":1}}],[\">enter\",{\"1\":{\"761\":2}}],[\">entersafepoint\",{\"1\":{\"753\":1}}],[\">enterapiscope\",{\"1\":{\"753\":1}}],[\">enqueue\",{\"1\":{\"247\":2}}],[\">end\",{\"1\":{\"247\":1}}],[\">kernel\",{\"1\":{\"752\":1,\"753\":2}}],[\">group\",{\"1\":{\"749\":2,\"753\":1,\"754\":2,\"761\":1}}],[\">500\",{\"1\":{\"691\":1}}],[\">1依次返回结果\",{\"1\":{\"485\":1}}],[\">buildmessage\",{\"1\":{\"759\":1}}],[\">buildargs\",{\"1\":{\"759\":1}}],[\">build\",{\"1\":{\"753\":6}}],[\">buildname\",{\"1\":{\"753\":1}}],[\">b\",{\"1\":{\"473\":1}}],[\">workerloop\",{\"1\":{\"247\":1,\"761\":1}}],[\">join\",{\"1\":{\"247\":1}}],[\">on\",{\"1\":{\"759\":2}}],[\">onresume\",{\"1\":{\"30\":1}}],[\">out\",{\"1\":{\"753\":1}}],[\">object\",{\"1\":{\"753\":11,\"754\":1}}],[\">o\",{\"1\":{\"612\":1}}],[\">origin\",{\"1\":{\"248\":2,\"749\":1,\"753\":1,\"759\":2}}],[\">os\",{\"1\":{\"247\":2}}],[\">owning\",{\"1\":{\"247\":2}}],[\">field\",{\"1\":{\"753\":1}}],[\">flags\",{\"1\":{\"753\":1}}],[\">function\",{\"1\":{\"247\":1,\"750\":1,\"756\":1}}],[\">false<\",{\"1\":{\"167\":1}}],[\">closure\",{\"1\":{\"759\":2}}],[\">clone\",{\"1\":{\"753\":1}}],[\">class\",{\"1\":{\"753\":1}}],[\">cleanup\",{\"1\":{\"752\":2}}],[\">createheap\",{\"1\":{\"758\":1}}],[\">create\",{\"1\":{\"752\":1}}],[\">copy\",{\"1\":{\"749\":1,\"754\":1}}],[\">contains\",{\"1\":{\"247\":2}}],[\">c\",{\"1\":{\"473\":2}}],[\">checkaccess\",{\"1\":{\"247\":1}}],[\">nativeargat\",{\"1\":{\"745\":2}}],[\">name\",{\"1\":{\"247\":3,\"753\":2}}],[\">notifyisolatecreated\",{\"1\":{\"753\":1}}],[\">notify\",{\"1\":{\"247\":2,\"760\":2}}],[\">nextuint64\",{\"1\":{\"247\":1,\"753\":2}}],[\">increment\",{\"1\":{\"759\":1}}],[\">incrementspawncount\",{\"1\":{\"750\":1}}],[\">initial\",{\"1\":{\"753\":1}}],[\">initialize\",{\"1\":{\"752\":1}}],[\">init\",{\"1\":{\"753\":2,\"756\":1,\"757\":1}}],[\">initgrowthcontrol\",{\"1\":{\"753\":2}}],[\">insert\",{\"1\":{\"247\":1}}],[\">id\",{\"1\":{\"248\":1}}],[\">idle\",{\"1\":{\"247\":1,\"761\":1}}],[\">isempty\",{\"1\":{\"761\":4}}],[\">is\",{\"1\":{\"759\":2}}],[\">iswellformed\",{\"1\":{\"247\":1}}],[\">isolate\",{\"1\":{\"749\":1,\"750\":1,\"751\":1,\"753\":5,\"754\":2,\"756\":2,\"759\":2}}],[\">isownedbycurrentthread\",{\"1\":{\"247\":1}}],[\">isoob\",{\"1\":{\"247\":1}}],[\">isarray\",{\"1\":{\"247\":1}}],[\">issendport\",{\"1\":{\"247\":1}}],[\">isint32\",{\"1\":{\"247\":2}}],[\">root\",{\"1\":{\"754\":1}}],[\">random\",{\"1\":{\"753\":2}}],[\">resolvefunction\",{\"1\":{\"759\":1}}],[\">registerisolate\",{\"1\":{\"753\":1}}],[\">register\",{\"1\":{\"752\":1}}],[\">renderobject\",{\"1\":{\"251\":2,\"258\":1,\"262\":1}}],[\">retain\",{\"1\":{\"237\":1}}],[\">runfromappsnapshot\",{\"1\":{\"752\":1}}],[\">run<spawnisolatetask>\",{\"1\":{\"749\":1}}],[\">run<messagehandlertask>→threadpool\",{\"1\":{\"761\":1}}],[\">run<messagehandlertask>\",{\"1\":{\"247\":2,\"759\":1}}],[\">run\",{\"1\":{\"247\":3,\"759\":2,\"761\":2}}],[\">print\",{\"1\":{\"753\":1}}],[\">priority\",{\"1\":{\"247\":1,\"761\":1}}],[\">preallocateobjects\",{\"1\":{\"753\":2}}],[\">program\",{\"1\":{\"753\":3}}],[\">parent\",{\"1\":{\"759\":1}}],[\">parameter\",{\"1\":{\"247\":1}}],[\">package\",{\"1\":{\"756\":1}}],[\">paused\",{\"1\":{\"759\":1}}],[\">pause\",{\"1\":{\"747\":1,\"759\":1}}],[\">pool\",{\"1\":{\"247\":2,\"761\":1}}],[\">ports\",{\"1\":{\"247\":1}}],[\">postmessage\",{\"1\":{\"247\":1}}],[\">sticky\",{\"1\":{\"761\":1}}],[\">startthread\",{\"1\":{\"247\":2}}],[\">snapshot\",{\"1\":{\"753\":2,\"757\":1}}],[\">script\",{\"1\":{\"752\":1,\"756\":1}}],[\">shutdown\",{\"1\":{\"752\":1}}],[\">source\",{\"1\":{\"751\":2,\"753\":1}}],[\">size\",{\"1\":{\"247\":2,\"761\":1}}],[\">senddata\",{\"1\":{\"237\":1}}],[\">seterrorsfatal\",{\"1\":{\"759\":1}}],[\">setkernelbuffernewlyowned\",{\"1\":{\"757\":1}}],[\">setkernelbufferalreadyowned\",{\"1\":{\"757\":1}}],[\">set\",{\"1\":{\"237\":1,\"247\":1,\"751\":1,\"753\":15,\"758\":1,\"759\":2}}],[\">dequeue\",{\"1\":{\"761\":2}}],[\">decrementspawncount\",{\"1\":{\"751\":1,\"756\":1}}],[\">debugger\",{\"1\":{\"753\":2}}],[\">debug\",{\"1\":{\"750\":2,\"756\":2}}],[\">dest\",{\"1\":{\"247\":3,\"761\":2}}],[\">dropfinalizers\",{\"1\":{\"247\":1}}],[\">thread\",{\"1\":{\"749\":1,\"754\":1,\"759\":1}}],[\">terminate\",{\"1\":{\"747\":1,\"759\":1}}],[\">textdirection\",{\"1\":{\"262\":1}}],[\">taskcallback\",{\"1\":{\"247\":1,\"761\":1}}],[\">trylookup\",{\"1\":{\"247\":1}}],[\">type\",{\"1\":{\"247\":1}}],[\">的抽象方法的mainfragmentmodule\",{\"1\":{\"217\":1}}],[\">客户端通信\",{\"1\":{\"83\":2}}],[\">服务端通信\",{\"1\":{\"83\":1}}],[\">>>\",{\"1\":{\"500\":1,\"507\":1}}],[\">>\",{\"1\":{\"77\":1,\"507\":1,\"528\":1,\"701\":1}}],[\">\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"6\":5,\"30\":3,\"35\":2,\"39\":1,\"53\":2,\"95\":4,\"104\":4,\"105\":2,\"111\":4,\"115\":5,\"116\":7,\"118\":1,\"123\":1,\"124\":2,\"125\":8,\"140\":7,\"145\":3,\"147\":1,\"167\":13,\"173\":5,\"179\":1,\"186\":2,\"187\":3,\"189\":11,\"193\":2,\"213\":2,\"224\":3,\"225\":1,\"226\":2,\"227\":1,\"228\":2,\"229\":1,\"231\":5,\"232\":2,\"233\":1,\"234\":6,\"235\":3,\"236\":1,\"237\":6,\"238\":5,\"243\":7,\"244\":2,\"246\":2,\"247\":21,\"248\":2,\"251\":8,\"252\":1,\"253\":3,\"254\":1,\"255\":1,\"256\":3,\"258\":1,\"259\":11,\"262\":5,\"263\":7,\"264\":3,\"265\":7,\"308\":1,\"330\":1,\"347\":2,\"348\":1,\"358\":2,\"376\":2,\"383\":1,\"394\":1,\"398\":2,\"405\":2,\"412\":4,\"417\":2,\"418\":4,\"426\":1,\"485\":3,\"486\":2,\"490\":2,\"506\":1,\"525\":1,\"527\":2,\"528\":2,\"532\":1,\"553\":1,\"587\":1,\"591\":1,\"594\":1,\"612\":5,\"618\":5,\"619\":7,\"625\":1,\"629\":3,\"630\":1,\"631\":13,\"633\":2,\"634\":4,\"645\":2,\"646\":4,\"656\":5,\"658\":2,\"662\":3,\"663\":4,\"670\":2,\"671\":2,\"694\":1,\"701\":1,\"745\":5,\"747\":2,\"748\":3,\"749\":1,\"750\":1,\"751\":3,\"752\":5,\"753\":4,\"754\":2,\"756\":2,\"757\":2,\"758\":1,\"759\":8,\"760\":2,\"761\":8,\"783\":7,\"784\":14,\"803\":5,\"810\":2,\"816\":2,\"836\":6,\"847\":1,\"848\":1,\"850\":2,\"858\":2,\"859\":3,\"869\":3,\"875\":4,\"880\":3,\"890\":2,\"896\":1,\"913\":2,\"921\":4,\"927\":2}}],[\">=\",{\"1\":{\"6\":3,\"26\":1,\"87\":2,\"89\":1,\"92\":1,\"93\":1,\"94\":1,\"153\":1,\"196\":1,\"247\":3,\"321\":1,\"325\":1,\"360\":1,\"405\":1,\"534\":2,\"618\":1,\"760\":3,\"859\":1,\"880\":1,\"890\":1}}],[\"<framelayout\",{\"1\":{\"784\":1}}],[\"<fragment\",{\"1\":{\"783\":3}}],[\"<variable\",{\"1\":{\"784\":2}}],[\"<navigation\",{\"1\":{\"783\":1}}],[\"<native\",{\"1\":{\"247\":1}}],[\"<和<<\",{\"1\":{\"701\":1}}],[\"<500\",{\"1\":{\"691\":1}}],[\"<github端分支>\",{\"1\":{\"674\":1}}],[\"<分支名称>\",{\"1\":{\"674\":1}}],[\"<地址>\",{\"1\":{\"674\":1}}],[\"<远程端名字>\",{\"1\":{\"674\":1}}],[\"<新分支名>\",{\"1\":{\"674\":2}}],[\"<新分支名字>\",{\"1\":{\"674\":1}}],[\"<本地仓库名>\",{\"1\":{\"674\":2}}],[\"<本地仓库>\",{\"1\":{\"673\":1}}],[\"<y>\",{\"1\":{\"535\":1}}],[\"<layout\",{\"1\":{\"784\":2}}],[\"<long\",{\"1\":{\"523\":2}}],[\"<linearlayout\",{\"1\":{\"115\":1,\"167\":1,\"189\":2,\"783\":1}}],[\"<widget>\",{\"1\":{\"405\":1,\"444\":1,\"445\":1}}],[\"<>如果图片不是argb\",{\"1\":{\"398\":1}}],[\"<object\",{\"1\":{\"349\":1,\"351\":2}}],[\"<unit>\",{\"1\":{\"646\":1}}],[\"<unnamednativeport>\",{\"1\":{\"247\":1}}],[\"<uses\",{\"1\":{\"186\":2}}],[\"<data>\",{\"1\":{\"784\":2}}],[\"<double>\",{\"1\":{\"418\":1}}],[\"<diagnosticsnode>\",{\"1\":{\"374\":1,\"426\":1}}],[\"<dynamic>\",{\"1\":{\"243\":1,\"244\":1,\"247\":2}}],[\"<declare\",{\"1\":{\"116\":1}}],[\"<=\",{\"1\":{\"232\":1,\"360\":1,\"399\":2,\"400\":1,\"560\":1,\"618\":1,\"633\":1,\"656\":2,\"890\":1,\"927\":1}}],[\"<button\",{\"1\":{\"189\":1}}],[\"<t\",{\"1\":{\"711\":1}}],[\"<type\",{\"1\":{\"415\":2}}],[\"<typename\",{\"1\":{\"247\":1}}],[\"<textview\",{\"1\":{\"189\":2,\"784\":2}}],[\"<t>\",{\"1\":{\"87\":1,\"231\":1,\"619\":1}}],[\"<string\",{\"1\":{\"376\":1,\"384\":1,\"398\":2}}],[\"<style\",{\"1\":{\"167\":1}}],[\"<sendport>\",{\"1\":{\"244\":2}}],[\"<service\",{\"1\":{\"35\":1,\"39\":1}}],[\"<solid\",{\"1\":{\"167\":1}}],[\"<shape\",{\"1\":{\"167\":1}}],[\"<constraintlayout\",{\"1\":{\"784\":1}}],[\"<corners\",{\"1\":{\"167\":1}}],[\"<checkbox\",{\"1\":{\"124\":1}}],[\"<cf\",{\"1\":{\"116\":1,\"118\":1}}],[\"<reified\",{\"1\":{\"621\":1}}],[\"<receiver\",{\"1\":{\"189\":1}}],[\"<resources>\",{\"1\":{\"116\":1}}],[\"<root\",{\"1\":{\"6\":1}}],[\"<extendedimageprovider<dynamic>\",{\"1\":{\"384\":1}}],[\"<external\",{\"1\":{\"6\":1}}],[\"<edittext\",{\"1\":{\"115\":1}}],[\"<int\",{\"1\":{\"748\":1}}],[\"<integer\",{\"1\":{\"523\":4}}],[\"<intent\",{\"1\":{\"35\":1,\"189\":1}}],[\"<inlinespan>\",{\"1\":{\"264\":1}}],[\"<item\",{\"1\":{\"167\":4}}],[\"<imageview\",{\"1\":{\"111\":1,\"115\":2,\"167\":1}}],[\"<<\",{\"1\":{\"92\":2,\"507\":1}}],[\"<argument\",{\"1\":{\"783\":1}}],[\"<activity\",{\"1\":{\"189\":1}}],[\"<action\",{\"1\":{\"35\":1,\"189\":1,\"783\":1}}],[\"<appwidget\",{\"1\":{\"189\":1}}],[\"<application\",{\"1\":{\"105\":1}}],[\"<application>\",{\"1\":{\"6\":1,\"35\":1,\"104\":1,\"189\":1}}],[\"<animation\",{\"1\":{\"167\":1}}],[\"<androidx\",{\"1\":{\"784\":1}}],[\"<android\",{\"1\":{\"111\":5}}],[\"<attr\",{\"1\":{\"116\":2}}],[\"<powerimagerequest>\",{\"1\":{\"398\":1}}],[\"<paths>\",{\"1\":{\"6\":1}}],[\"<provider\",{\"1\":{\"6\":1}}],[\"<\",{\"1\":{\"6\":5,\"35\":3,\"63\":2,\"64\":1,\"87\":1,\"88\":1,\"90\":1,\"92\":2,\"93\":1,\"95\":2,\"104\":2,\"111\":3,\"115\":2,\"116\":6,\"118\":1,\"153\":2,\"159\":1,\"167\":5,\"179\":1,\"189\":9,\"222\":1,\"234\":3,\"237\":1,\"238\":2,\"244\":1,\"265\":1,\"398\":2,\"412\":7,\"417\":2,\"418\":4,\"532\":3,\"533\":4,\"534\":5,\"540\":1,\"557\":3,\"560\":1,\"761\":2,\"783\":4,\"784\":8,\"816\":2,\"836\":2,\"859\":1,\"880\":3,\"890\":3,\"897\":1,\"898\":1,\"913\":5,\"921\":4,\"925\":2,\"927\":5}}],[\"<manifest\",{\"1\":{\"816\":1}}],[\"<manifest>\",{\"1\":{\"6\":1}}],[\"<meta\",{\"1\":{\"6\":1,\"104\":2,\"105\":1,\"189\":1}}],[\"库文件\",{\"1\":{\"686\":1}}],[\"库中的\",{\"1\":{\"384\":1}}],[\"库的\",{\"1\":{\"382\":1}}],[\"库\",{\"1\":{\"6\":1}}],[\"一轮比较完毕后交换他和最后一位的位置\",{\"1\":{\"897\":1}}],[\"一些\",{\"0\":{\"808\":1}}],[\"一些基础知识\",{\"0\":{\"136\":1}}],[\"一路点击确定就可以\",{\"1\":{\"800\":1}}],[\"一路奔忙\",{\"1\":{\"798\":1}}],[\"一直听说\",{\"1\":{\"798\":1}}],[\"一直以来\",{\"1\":{\"798\":1}}],[\"一直取低位值而可能导致的索引一直的重复问题\",{\"1\":{\"500\":1}}],[\"一周从周一开始\",{\"1\":{\"576\":1}}],[\"一周从周日\",{\"1\":{\"576\":1}}],[\"一年第一周所需最小的天数\",{\"1\":{\"575\":1}}],[\"一年中第一个星期四的星期\",{\"1\":{\"575\":1}}],[\"一文读懂\",{\"1\":{\"508\":1}}],[\"一看你就懂\",{\"1\":{\"483\":1}}],[\"一次只能进入一个\",{\"1\":{\"763\":1}}],[\"一次真正的执行\",{\"1\":{\"445\":1}}],[\"一次获取\",{\"1\":{\"445\":1}}],[\"一样可以被\",{\"1\":{\"397\":1}}],[\"一级缓存\",{\"1\":{\"376\":1}}],[\"一致时才去更新数据\",{\"1\":{\"609\":1}}],[\"一致\",{\"1\":{\"340\":2}}],[\"一致的\",{\"1\":{\"71\":1}}],[\"一成不变\",{\"1\":{\"278\":1}}],[\"一节再分析\",{\"1\":{\"256\":1}}],[\"一步步将事件上报\",{\"1\":{\"249\":1}}],[\"一步一步深入理解\",{\"1\":{\"113\":1}}],[\"一旦有子协程失败\",{\"1\":{\"623\":1}}],[\"一旦有一个\",{\"1\":{\"231\":1}}],[\"一旦其有变化就执行\",{\"1\":{\"332\":1}}],[\"一旦某个任务触发异常\",{\"1\":{\"292\":1}}],[\"一旦创建便不会更改\",{\"1\":{\"281\":1}}],[\"一旦生成便\",{\"1\":{\"278\":1}}],[\"一旦\",{\"1\":{\"244\":1}}],[\"一旦成功创建会回调onstartcommand\",{\"1\":{\"36\":1}}],[\"一种compose中屏幕适配的解决方案\",{\"1\":{\"195\":1}}],[\"一种极低成本的\",{\"1\":{\"102\":1,\"197\":1}}],[\"一书的内容\",{\"1\":{\"190\":1}}],[\"一\",{\"1\":{\"180\":1,\"498\":1,\"907\":1}}],[\"一起使用\",{\"1\":{\"664\":1}}],[\"一起决定了\",{\"1\":{\"158\":1}}],[\"一起联动的子\",{\"1\":{\"110\":1}}],[\"一一对应\",{\"1\":{\"123\":1}}],[\"一定已经确定了\",{\"1\":{\"424\":1}}],[\"一定大于\",{\"1\":{\"405\":1}}],[\"一定要调用canvas\",{\"1\":{\"162\":1}}],[\"一定要做这一步\",{\"1\":{\"117\":1}}],[\"一定程度上减轻了\",{\"1\":{\"126\":1}}],[\"一定范围内他比hashmap内存效率高\",{\"1\":{\"92\":1}}],[\"一个元素就是有序的\",{\"1\":{\"925\":1}}],[\"一个常用的间隔序列计算公式\",{\"1\":{\"920\":1}}],[\"一个节点只能有\",{\"1\":{\"833\":1}}],[\"一个天气预报\",{\"1\":{\"777\":1}}],[\"一个实时新闻软件\",{\"1\":{\"776\":1}}],[\"一个共享的lookup\",{\"1\":{\"767\":1}}],[\"一个共享的占位符\",{\"1\":{\"397\":1}}],[\"一个call\",{\"1\":{\"767\":1}}],[\"一个被称为kernel\",{\"1\":{\"765\":1}}],[\"一个例子\",{\"0\":{\"662\":1}}],[\"一个协程的多个子协程抛出异常将会发生什么\",{\"1\":{\"640\":1}}],[\"一个协程在流中开始生产无穷多个元素\",{\"1\":{\"638\":1}}],[\"一个父协程总是等待所有的子协程执行结束\",{\"1\":{\"622\":1}}],[\"一个线程更改了共享变量的值时\",{\"1\":{\"604\":1}}],[\"一个类中只能有一个伴生对象\",{\"1\":{\"612\":1}}],[\"一个类没有实现serializable接口\",{\"1\":{\"581\":1}}],[\"一个类只能有一个构造方法被\",{\"1\":{\"203\":1}}],[\"一个thread可以有多个threadlocal变量\",{\"1\":{\"526\":1}}],[\"一个threadlocal只能保存一个值\",{\"1\":{\"525\":1}}],[\"一个数组对象的引用\",{\"1\":{\"519\":1}}],[\"一个空的\",{\"1\":{\"516\":1}}],[\"一个key对应的索引index是由这个key的hash\",{\"1\":{\"504\":1}}],[\"一个对象具有\",{\"1\":{\"519\":1}}],[\"一个对象调用该对象类的\",{\"1\":{\"497\":1}}],[\"一个对象被映射到虚拟内存的一个区域\",{\"1\":{\"136\":1}}],[\"一个不可达对象在\",{\"1\":{\"475\":1}}],[\"一个将\",{\"1\":{\"445\":1}}],[\"一个个依次排列\",{\"1\":{\"444\":1,\"445\":1}}],[\"一个或多个slivers\",{\"1\":{\"422\":1}}],[\"一个viewport\",{\"1\":{\"422\":1}}],[\"一个scrollwidget\",{\"1\":{\"422\":1}}],[\"一个预制的\",{\"1\":{\"279\":1}}],[\"一个标准的\",{\"1\":{\"279\":1}}],[\"一个重要的概念即是\",{\"1\":{\"278\":1}}],[\"一个重要的原则就是\",{\"1\":{\"126\":1}}],[\"一个持有color\",{\"1\":{\"273\":1}}],[\"一个\",{\"1\":{\"221\":1,\"454\":1,\"516\":1,\"517\":1,\"519\":2,\"645\":2,\"763\":3}}],[\"一个小技巧\",{\"0\":{\"218\":1}}],[\"一个供依赖注入的类\",{\"1\":{\"213\":1}}],[\"一个是值为str的字符串\",{\"1\":{\"461\":1}}],[\"一个是字符串str本身\",{\"1\":{\"461\":1}}],[\"一个是事件\",{\"1\":{\"292\":1}}],[\"一个是微任务\",{\"1\":{\"292\":1}}],[\"一个是系统的\",{\"1\":{\"101\":1}}],[\"一个是\",{\"1\":{\"101\":1}}],[\"一个典型的\",{\"1\":{\"83\":1}}],[\"一个管理类\",{\"1\":{\"62\":1}}],[\"一番比较之后觉得用闹钟alarmmanager实现比较合适\",{\"1\":{\"8\":1}}],[\"一般要求这些增量之间互质\",{\"1\":{\"920\":1}}],[\"一般先以二叉搜索树的规则将数据插入表中\",{\"1\":{\"904\":1}}],[\"一般先恢复\",{\"1\":{\"419\":1}}],[\"一般使用排序优先级\",{\"1\":{\"875\":1}}],[\"一般都是给定中序排序\",{\"1\":{\"666\":1}}],[\"一般都在不同的进程之中\",{\"1\":{\"138\":1}}],[\"一般需要持久化保存数据或在网络间传输时推荐使用serializable或者externalizable\",{\"1\":{\"597\":1}}],[\"一般默认为\",{\"1\":{\"594\":1}}],[\"一般步骤\",{\"1\":{\"486\":1}}],[\"一般子类也只需要重写此方法即可\",{\"1\":{\"429\":1}}],[\"一般子类只需要实现后者即可\",{\"1\":{\"360\":1}}],[\"一般用于\",{\"1\":{\"365\":1}}],[\"一般用来执行\",{\"1\":{\"223\":1}}],[\"一般可以在\",{\"1\":{\"361\":1}}],[\"一般情况下将构造方法私有化既可以实现\",{\"1\":{\"544\":1}}],[\"一般情况下这个animation<double>的值范围是\",{\"1\":{\"357\":1}}],[\"一般情况下是\",{\"1\":{\"258\":1}}],[\"一般会是\",{\"1\":{\"355\":1}}],[\"一般以\",{\"1\":{\"300\":1,\"314\":1,\"358\":1}}],[\"一般是调用自身的代码后面\",{\"1\":{\"614\":1}}],[\"一般是图片\",{\"1\":{\"340\":1}}],[\"一般是\",{\"1\":{\"300\":1,\"314\":1,\"415\":1}}],[\"一般是当前window也就是手机屏幕的逻辑像素size\",{\"1\":{\"258\":1}}],[\"一般来说一个\",{\"1\":{\"710\":1}}],[\"一般来说\",{\"1\":{\"271\":1,\"292\":1,\"311\":1,\"439\":1,\"763\":1}}],[\"一般由\",{\"1\":{\"254\":1}}],[\"一般执行跑完即弃的小任务\",{\"1\":{\"221\":1}}],[\"一般的\",{\"1\":{\"221\":1}}],[\"一般就需要提示用户到设置中开启对应权限\",{\"1\":{\"172\":1}}],[\"一般流程\",{\"0\":{\"172\":1}}],[\"一般只去其后\",{\"1\":{\"690\":1}}],[\"一般只需要重写其\",{\"1\":{\"281\":1}}],[\"一般只需要修改authorities即可\",{\"1\":{\"6\":1}}],[\"一般只会对外暴露一个\",{\"1\":{\"125\":1}}],[\"一般为了效率都会先打包\",{\"1\":{\"695\":1}}],[\"一般为\",{\"1\":{\"122\":1}}],[\"一般为当前\",{\"1\":{\"71\":1}}],[\"一般为存储卡中android\",{\"1\":{\"6\":1}}],[\"一般有两种方式\",{\"1\":{\"65\":1}}],[\"一般在\",{\"1\":{\"41\":1,\"742\":1}}],[\"一般不会使用\",{\"1\":{\"40\":1}}],[\"一般还需要一个outputuri用于保存裁剪之后的图片\",{\"1\":{\"6\":1}}],[\"一不小心立了个\",{\"1\":{\"0\":1}}],[\"要移动的层数\",{\"1\":{\"912\":1}}],[\"要同时更新\",{\"1\":{\"844\":1}}],[\"要删除的节点有两个子节点\",{\"1\":{\"836\":2}}],[\"要删除的节点有且只有一个节点\",{\"1\":{\"836\":2}}],[\"要删除的节点是叶节点\",{\"1\":{\"836\":2}}],[\"要执行的时候再创建并运行可执行代码\",{\"1\":{\"766\":1}}],[\"要执行的任务都是在messagehandler\",{\"1\":{\"761\":1}}],[\"要进入一个\",{\"1\":{\"763\":1}}],[\"要运行的所有东西都准备好\",{\"1\":{\"759\":1}}],[\"要读取文件夹中的内容\",{\"1\":{\"689\":1}}],[\"要获取当前状态时\",{\"1\":{\"645\":1}}],[\"要递增状态时\",{\"1\":{\"645\":1}}],[\"要想使得这些值也可以支持序列化\",{\"1\":{\"585\":1}}],[\"要想实现动态更新其内容\",{\"1\":{\"282\":1}}],[\"要解密的字符串\",{\"1\":{\"584\":2}}],[\"要解决这个问题也很简单\",{\"1\":{\"341\":1}}],[\"要确保该类的所有实例域都为基本类型\",{\"1\":{\"583\":1}}],[\"要不在使用注解时指定\",{\"1\":{\"568\":1}}],[\"要不在定义注解时指定默认值\",{\"1\":{\"568\":1}}],[\"要用\",{\"0\":{\"510\":1}}],[\"要被执行的方法以及通过符号引用的变量\",{\"1\":{\"496\":1}}],[\"要\",{\"1\":{\"472\":1}}],[\"要展示在屏幕上需要经历\",{\"1\":{\"439\":1}}],[\"要么使用自己的\",{\"1\":{\"423\":1}}],[\"要么使用最近的\",{\"1\":{\"423\":1}}],[\"要么是作为私有对象的\",{\"1\":{\"136\":1}}],[\"要么是作为共享对象\",{\"1\":{\"136\":1}}],[\"要跳转的\",{\"1\":{\"341\":1}}],[\"要和下一个页面的\",{\"1\":{\"340\":1}}],[\"要创建的一部分内容和动画无关\",{\"1\":{\"311\":1}}],[\"要在协程中使用\",{\"1\":{\"623\":1}}],[\"要在\",{\"1\":{\"191\":1}}],[\"要在不同的进程中\",{\"1\":{\"39\":1}}],[\"要访问电脑的本地网址则需要访问10\",{\"1\":{\"184\":1}}],[\"要显示\",{\"1\":{\"182\":1}}],[\"要避免这种情况\",{\"1\":{\"159\":1}}],[\"要注意这个周不一定是自然周\",{\"1\":{\"574\":1}}],[\"要注意\",{\"1\":{\"153\":1}}],[\"要有合适的透明区域\",{\"1\":{\"131\":1}}],[\"要能完全覆盖另外一张图片的图形区域\",{\"1\":{\"130\":1}}],[\"要实现可以序列化的单例最简单安全的\",{\"1\":{\"583\":1}}],[\"要实现\",{\"1\":{\"346\":1}}],[\"要实现如上效果\",{\"1\":{\"131\":1}}],[\"要实现的逻为内部方法\",{\"1\":{\"125\":1}}],[\"要实现点击事件监听接口\",{\"1\":{\"117\":1}}],[\"要调用\",{\"1\":{\"125\":1}}],[\"要使得\",{\"1\":{\"100\":1}}],[\"要使用fileprovider可以参考定义\",{\"1\":{\"6\":1}}],[\"要求互质\",{\"1\":{\"921\":1}}],[\"要求的文档\",{\"1\":{\"795\":1}}],[\"要求的配置\",{\"1\":{\"104\":1}}],[\"要求对齐到\",{\"1\":{\"519\":1}}],[\"要求方法是抽象的\",{\"1\":{\"213\":1}}],[\"要求依赖\",{\"1\":{\"105\":1}}],[\"要求\",{\"1\":{\"99\":1}}],[\"要求客户端和服务在同一应用的同一进程内\",{\"1\":{\"38\":1}}],[\"要是排序不生效时可以试一下\",{\"1\":{\"703\":1}}],[\"要是超了范围\",{\"1\":{\"412\":1}}],[\"要是相邻的页面\",{\"1\":{\"340\":1}}],[\"要是\",{\"1\":{\"277\":1}}],[\"要是需要给\",{\"1\":{\"213\":1}}],[\"要是为\",{\"1\":{\"189\":1}}],[\"要是进行耗时操作\",{\"1\":{\"36\":1}}],[\"要是希望将此图片分享给第三方\",{\"1\":{\"6\":1}}],[\"要了解详情\",{\"1\":{\"11\":1}}],[\"v5\",{\"1\":{\"801\":1}}],[\"v=novyi94mjio\",{\"1\":{\"740\":2}}],[\"vcs\",{\"1\":{\"671\":1}}],[\"v类型的对象\",{\"1\":{\"538\":1}}],[\"v对象仍然保存在threadlocals中但是没有办法再访问到\",{\"1\":{\"528\":1}}],[\"ve\",{\"1\":{\"670\":1,\"753\":1}}],[\"vetoable\",{\"1\":{\"619\":2}}],[\"velocity=0\",{\"1\":{\"417\":1}}],[\"velocity\",{\"1\":{\"319\":1,\"417\":15}}],[\"veroable\",{\"1\":{\"619\":1}}],[\"verifybuiltinvtables\",{\"1\":{\"753\":1}}],[\"verifyoriginid\",{\"1\":{\"753\":1}}],[\"verify\",{\"1\":{\"748\":1,\"753\":1}}],[\"verifying\",{\"1\":{\"493\":1}}],[\"verifier\",{\"1\":{\"753\":2}}],[\"verified\",{\"1\":{\"494\":1,\"497\":1}}],[\"verification\",{\"1\":{\"493\":1,\"494\":2}}],[\"very\",{\"1\":{\"448\":1}}],[\"vertical\",{\"1\":{\"112\":1,\"189\":1,\"424\":2,\"439\":3}}],[\"versioncode\",{\"1\":{\"104\":1}}],[\"version=\",{\"1\":{\"6\":1,\"115\":1,\"116\":1,\"167\":1,\"784\":1,\"816\":1}}],[\"version\",{\"1\":{\"6\":4,\"196\":1,\"302\":11,\"309\":7,\"591\":1,\"671\":1,\"710\":1,\"752\":4,\"757\":1,\"805\":1,\"808\":1}}],[\"vsync\",{\"1\":{\"302\":1,\"319\":2,\"322\":2,\"330\":1}}],[\"vs\",{\"0\":{\"275\":1,\"523\":1},\"1\":{\"524\":1,\"828\":2}}],[\"volatile保证\",{\"1\":{\"604\":1}}],[\"volatile修饰的变量则会插入内存屏障\",{\"1\":{\"602\":1}}],[\"volatile修饰的变量执行效率和普通变量差别不大\",{\"1\":{\"602\":1}}],[\"volatile修饰的变量有两个特性\",{\"1\":{\"602\":1}}],[\"volatile和synchronize因此而生\",{\"1\":{\"601\":1}}],[\"volatile\",{\"0\":{\"600\":1,\"602\":1},\"1\":{\"193\":1,\"602\":1}}],[\"voidcallback\",{\"1\":{\"270\":1,\"302\":1,\"333\":2,\"342\":1,\"418\":1}}],[\"void\",{\"0\":{\"87\":1,\"89\":1},\"1\":{\"24\":1,\"30\":1,\"33\":1,\"35\":4,\"36\":1,\"38\":4,\"39\":4,\"48\":1,\"49\":1,\"53\":1,\"62\":14,\"63\":6,\"64\":2,\"70\":1,\"71\":2,\"83\":2,\"86\":1,\"87\":1,\"89\":2,\"90\":1,\"95\":1,\"112\":1,\"117\":3,\"118\":1,\"123\":1,\"138\":4,\"153\":9,\"159\":2,\"161\":1,\"178\":2,\"179\":1,\"186\":1,\"189\":6,\"193\":8,\"224\":6,\"225\":1,\"226\":4,\"227\":6,\"228\":2,\"229\":1,\"231\":4,\"232\":1,\"233\":4,\"234\":12,\"235\":4,\"236\":1,\"237\":7,\"238\":2,\"243\":2,\"244\":2,\"246\":1,\"247\":8,\"252\":1,\"253\":3,\"254\":1,\"256\":4,\"259\":1,\"263\":1,\"264\":1,\"265\":4,\"273\":2,\"282\":1,\"284\":2,\"305\":1,\"306\":1,\"307\":3,\"308\":2,\"310\":4,\"321\":1,\"322\":3,\"330\":1,\"332\":5,\"333\":4,\"334\":1,\"347\":2,\"349\":1,\"350\":1,\"351\":2,\"352\":1,\"367\":1,\"369\":2,\"376\":1,\"384\":1,\"396\":1,\"398\":15,\"405\":2,\"408\":1,\"409\":1,\"411\":1,\"415\":4,\"417\":2,\"418\":1,\"424\":2,\"426\":1,\"437\":1,\"438\":3,\"439\":1,\"440\":2,\"506\":1,\"513\":6,\"517\":2,\"527\":5,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"541\":1,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"550\":1,\"553\":2,\"560\":4,\"569\":1,\"584\":5,\"586\":1,\"587\":5,\"590\":2,\"708\":2,\"712\":6,\"742\":1,\"745\":3,\"748\":4,\"750\":1,\"751\":2,\"752\":2,\"753\":2,\"756\":2,\"757\":2,\"758\":2,\"759\":3,\"761\":3}}],[\"violated\",{\"1\":{\"771\":1}}],[\"via\",{\"0\":{\"764\":1},\"1\":{\"412\":3,\"759\":1,\"763\":1}}],[\"visitisolates\",{\"1\":{\"753\":1}}],[\"visitor\",{\"1\":{\"306\":1,\"307\":2,\"308\":2}}],[\"visiblefortesting\",{\"1\":{\"398\":2}}],[\"visible\",{\"1\":{\"351\":1,\"784\":3}}],[\"visibility\",{\"1\":{\"193\":1,\"784\":1}}],[\"virtual\",{\"0\":{\"459\":1},\"1\":{\"247\":1,\"454\":1,\"493\":1,\"495\":1,\"498\":2,\"761\":1}}],[\"viewid\",{\"1\":{\"569\":3}}],[\"viewinject\",{\"1\":{\"568\":1}}],[\"views\",{\"1\":{\"402\":3,\"424\":1}}],[\"viewstate\",{\"1\":{\"125\":4}}],[\"viewportconstraints\",{\"1\":{\"444\":2,\"445\":4}}],[\"viewportextent\",{\"1\":{\"439\":5}}],[\"viewportelement\",{\"1\":{\"424\":1}}],[\"viewportoffset\",{\"1\":{\"422\":1,\"423\":1,\"424\":1,\"436\":2,\"438\":1}}],[\"viewportmainaxisextent\",{\"1\":{\"405\":1}}],[\"viewportbuilder\",{\"1\":{\"402\":1,\"422\":1,\"423\":1,\"433\":1,\"436\":2}}],[\"viewport\",{\"1\":{\"402\":2,\"405\":16,\"409\":2,\"415\":2,\"420\":1,\"422\":4,\"423\":4,\"424\":9,\"426\":2,\"428\":1,\"429\":2,\"430\":1,\"431\":4,\"433\":2,\"436\":1,\"438\":3,\"439\":3,\"440\":1,\"442\":3,\"445\":1,\"446\":1}}],[\"viewparent\",{\"1\":{\"112\":1}}],[\"viewpager\",{\"1\":{\"111\":3}}],[\"viewtreeobserver\",{\"1\":{\"160\":1}}],[\"viewrootimpl\",{\"1\":{\"157\":1}}],[\"viewmodel通过这个xxxrepository类来操作数据\",{\"1\":{\"786\":1}}],[\"viewmodelprovider\",{\"1\":{\"785\":1}}],[\"viewmodelproviders\",{\"1\":{\"785\":1}}],[\"viewmodel是设计用来以一种可以感知生命周期\",{\"1\":{\"785\":1}}],[\"viewmodel的数据来源\",{\"1\":{\"781\":1}}],[\"viewmodelscope\",{\"1\":{\"125\":1,\"126\":2}}],[\"viewmodel双向数据绑定\",{\"1\":{\"124\":1}}],[\"viewmodel\",{\"0\":{\"785\":1},\"1\":{\"124\":8,\"125\":18,\"126\":12,\"784\":7,\"785\":4}}],[\"viewconfiguration\",{\"1\":{\"74\":1}}],[\"view\",{\"0\":{\"26\":1,\"27\":1,\"73\":1,\"74\":1,\"151\":1,\"152\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"163\":1},\"1\":{\"23\":1,\"24\":4,\"26\":22,\"27\":4,\"28\":1,\"74\":8,\"75\":12,\"78\":1,\"80\":2,\"110\":8,\"111\":13,\"112\":17,\"117\":6,\"122\":5,\"123\":25,\"124\":10,\"125\":11,\"126\":2,\"130\":1,\"131\":2,\"133\":2,\"141\":1,\"145\":1,\"149\":1,\"152\":2,\"153\":5,\"157\":6,\"158\":9,\"159\":6,\"160\":13,\"162\":1,\"167\":6,\"178\":2,\"185\":1,\"189\":1,\"196\":1,\"258\":1,\"278\":2,\"402\":4,\"403\":1,\"404\":1,\"405\":1,\"411\":1,\"415\":6,\"416\":1,\"417\":3,\"418\":8,\"419\":2,\"422\":2,\"423\":1,\"424\":1,\"433\":2,\"662\":4,\"782\":1,\"784\":6}}],[\"viewgroup\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"23\":1,\"25\":1,\"26\":10,\"28\":1,\"110\":1,\"159\":1,\"161\":2}}],[\"vm目录下\",{\"1\":{\"243\":1}}],[\"vmlibraryhooks\",{\"1\":{\"234\":4,\"235\":1,\"237\":3,\"238\":1}}],[\"vm\",{\"0\":{\"763\":1,\"765\":1,\"766\":1},\"1\":{\"125\":6,\"126\":1,\"224\":1,\"227\":3,\"228\":4,\"229\":6,\"231\":2,\"234\":4,\"235\":2,\"236\":1,\"237\":6,\"238\":2,\"243\":4,\"244\":5,\"247\":17,\"248\":2,\"460\":1,\"463\":1,\"740\":3,\"745\":3,\"747\":4,\"748\":5,\"751\":1,\"752\":10,\"753\":14,\"757\":4,\"758\":2,\"759\":8,\"760\":1,\"761\":7,\"763\":7,\"765\":3,\"766\":3,\"767\":2,\"769\":2,\"770\":4,\"771\":2,\"773\":1}}],[\"v4\",{\"1\":{\"111\":1}}],[\"v\",{\"0\":{\"93\":2,\"94\":1,\"95\":1},\"1\":{\"94\":2,\"95\":1,\"123\":3,\"137\":2,\"178\":1,\"247\":44,\"500\":2,\"528\":2,\"538\":3,\"612\":1,\"694\":1,\"695\":1,\"702\":1}}],[\"v>数组\",{\"1\":{\"538\":1}}],[\"v>数组中\",{\"1\":{\"523\":1}}],[\"v>>\",{\"1\":{\"500\":1,\"523\":1}}],[\"v>\",{\"1\":{\"92\":1,\"499\":2,\"500\":4,\"523\":4}}],[\"v>接口\",{\"1\":{\"92\":1}}],[\"vaule\",{\"1\":{\"724\":1}}],[\"variant\",{\"1\":{\"771\":1}}],[\"variables\",{\"1\":{\"285\":1,\"496\":1,\"514\":1}}],[\"variable\",{\"1\":{\"231\":1,\"243\":1,\"244\":1,\"376\":1,\"511\":2,\"565\":1,\"753\":2}}],[\"various\",{\"1\":{\"752\":1}}],[\"var和\",{\"1\":{\"686\":1}}],[\"varying\",{\"1\":{\"418\":1}}],[\"var\",{\"1\":{\"26\":1,\"83\":1,\"105\":3,\"123\":1,\"145\":1,\"147\":2,\"173\":3,\"196\":5,\"199\":1,\"201\":1,\"203\":2,\"204\":1,\"214\":1,\"215\":1,\"226\":2,\"229\":1,\"231\":4,\"233\":1,\"235\":1,\"237\":1,\"238\":5,\"241\":5,\"243\":4,\"273\":5,\"284\":1,\"294\":2,\"330\":2,\"342\":1,\"403\":1,\"486\":10,\"487\":2,\"594\":1,\"612\":8,\"614\":1,\"615\":1,\"619\":7,\"638\":1,\"645\":2,\"662\":3,\"664\":1,\"666\":4,\"742\":6,\"745\":1,\"748\":4,\"817\":3,\"819\":5,\"821\":1,\"822\":2,\"823\":7,\"833\":2,\"836\":4,\"847\":5,\"848\":6,\"850\":5,\"858\":3,\"859\":4,\"880\":3,\"896\":3,\"897\":4,\"898\":3,\"912\":1,\"913\":7,\"921\":4,\"927\":3}}],[\"val$anobj1\",{\"1\":{\"513\":5}}],[\"validatereponse\",{\"1\":{\"712\":1}}],[\"valid\",{\"1\":{\"247\":1,\"351\":2}}],[\"valueof\",{\"1\":{\"521\":1,\"612\":4,\"614\":3}}],[\"value的\",{\"1\":{\"361\":1}}],[\"valuenotifier\",{\"1\":{\"309\":1}}],[\"valuelistenable\",{\"1\":{\"316\":1}}],[\"valuelistenable<t>\",{\"1\":{\"316\":1}}],[\"valuelist\",{\"1\":{\"231\":8}}],[\"valueanimator\",{\"1\":{\"147\":2}}],[\"valueat\",{\"1\":{\"90\":1}}],[\"value=\",{\"1\":{\"104\":2,\"105\":1}}],[\"value保存到了同一个数组\",{\"1\":{\"92\":1}}],[\"values\",{\"1\":{\"90\":4,\"193\":2,\"231\":8,\"232\":1,\"244\":1,\"247\":1,\"351\":1,\"397\":1,\"495\":1,\"521\":1,\"523\":1,\"573\":1,\"574\":1,\"615\":1,\"630\":1,\"636\":1,\"637\":1,\"740\":2,\"748\":1}}],[\"valueifkeynotfound\",{\"1\":{\"88\":2}}],[\"value\",{\"0\":{\"87\":1,\"93\":1},\"1\":{\"39\":1,\"85\":1,\"86\":1,\"87\":4,\"92\":4,\"93\":1,\"101\":7,\"104\":2,\"125\":1,\"187\":2,\"204\":2,\"223\":6,\"230\":4,\"231\":11,\"232\":6,\"235\":1,\"241\":2,\"243\":2,\"247\":3,\"253\":3,\"302\":1,\"305\":1,\"307\":4,\"308\":2,\"310\":1,\"311\":2,\"314\":4,\"315\":2,\"316\":6,\"317\":1,\"319\":3,\"320\":1,\"321\":3,\"327\":1,\"330\":1,\"332\":3,\"350\":6,\"351\":2,\"352\":3,\"355\":2,\"357\":4,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"409\":2,\"415\":4,\"426\":1,\"438\":4,\"500\":1,\"513\":2,\"519\":4,\"525\":1,\"527\":14,\"528\":3,\"560\":1,\"568\":2,\"569\":1,\"573\":1,\"586\":1,\"614\":5,\"615\":1,\"621\":3,\"625\":5,\"629\":6,\"630\":4,\"631\":1,\"633\":4,\"634\":4,\"646\":2,\"656\":8,\"658\":4,\"697\":1,\"749\":1,\"753\":1,\"754\":3}}],[\"val\",{\"1\":{\"19\":3,\"20\":4,\"21\":1,\"75\":1,\"83\":6,\"90\":3,\"123\":2,\"125\":5,\"126\":9,\"131\":1,\"144\":4,\"145\":5,\"146\":3,\"147\":2,\"187\":4,\"196\":8,\"199\":2,\"202\":1,\"204\":1,\"286\":1,\"398\":3,\"399\":1,\"576\":4,\"593\":1,\"612\":3,\"617\":2,\"618\":3,\"619\":4,\"620\":1,\"621\":1,\"622\":1,\"625\":1,\"626\":1,\"630\":1,\"631\":5,\"636\":1,\"638\":4,\"641\":1,\"645\":1,\"663\":1,\"666\":9,\"783\":2,\"784\":1,\"785\":1,\"821\":2,\"833\":2,\"850\":1,\"913\":1,\"921\":1,\"927\":3}}],[\"v7\",{\"1\":{\"2\":1,\"108\":1,\"111\":1}}],[\"为他们生成一个父节点\",{\"1\":{\"837\":1}}],[\"为后面的客户端做准备\",{\"1\":{\"730\":1}}],[\"为你的分支加入一个新的远程端\",{\"1\":{\"674\":1}}],[\"为null\",{\"1\":{\"658\":1}}],[\"为一个流\",{\"1\":{\"631\":1}}],[\"为类添加新的方法\",{\"1\":{\"612\":1}}],[\"为真则执行\",{\"1\":{\"583\":1}}],[\"为注解和使用注解的类搭建一个桥梁\",{\"1\":{\"569\":1}}],[\"为简便起见\",{\"1\":{\"547\":1}}],[\"为何这些代码在访问\",{\"1\":{\"538\":1}}],[\"为空时\",{\"1\":{\"505\":1}}],[\"为空\",{\"1\":{\"439\":1}}],[\"为剩余没有消耗的\",{\"1\":{\"418\":1}}],[\"为正\",{\"1\":{\"412\":1}}],[\"为正值时\",{\"1\":{\"412\":1}}],[\"为正值\",{\"1\":{\"412\":2}}],[\"为负值\",{\"1\":{\"412\":1}}],[\"为负\",{\"1\":{\"412\":1}}],[\"为负时\",{\"1\":{\"412\":2}}],[\"为无限大\",{\"1\":{\"412\":1}}],[\"为这两个\",{\"1\":{\"340\":1}}],[\"为什么不支持泛型数组\",{\"1\":{\"542\":1}}],[\"为什么匿名内部类的参数引用时\",{\"1\":{\"514\":1}}],[\"为什么外部类的全局变量不需要\",{\"0\":{\"512\":1}}],[\"为什么\",{\"0\":{\"510\":1},\"1\":{\"292\":1}}],[\"为renderview创建并绑定了对应的\",{\"1\":{\"266\":1}}],[\"为设计稿中的控件大小\",{\"1\":{\"196\":1}}],[\"为设计稿宽度\",{\"1\":{\"195\":1}}],[\"为按钮绑定事件处理器\",{\"1\":{\"189\":1}}],[\"为任意正数\",{\"1\":{\"144\":1}}],[\"为我们提供了github\",{\"1\":{\"791\":1}}],[\"为我们提供了绘制二阶和三阶贝塞尔曲线的方法\",{\"1\":{\"143\":1}}],[\"为我们预置了很多丰富的\",{\"1\":{\"360\":1}}],[\"为我们注入的\",{\"1\":{\"214\":1}}],[\"为我提供了一个尚且不错的博客\",{\"1\":{\"0\":1}}],[\"为发送方添加了\",{\"1\":{\"138\":1}}],[\"为每个进程维护了一个单独的虚拟地址空间\",{\"1\":{\"136\":1}}],[\"为this\",{\"1\":{\"117\":1}}],[\"为例\",{\"1\":{\"100\":1,\"270\":1,\"307\":1,\"332\":1,\"349\":1,\"360\":1,\"399\":1,\"461\":1,\"463\":1}}],[\"为\",{\"0\":{\"444\":1,\"445\":1},\"1\":{\"100\":2,\"110\":1,\"273\":1,\"324\":1,\"334\":1,\"341\":2,\"346\":1,\"350\":1,\"357\":1,\"360\":1,\"376\":1,\"377\":1,\"393\":1,\"405\":2,\"412\":5,\"417\":1,\"418\":5,\"419\":2,\"420\":1,\"422\":1,\"426\":1,\"427\":2,\"436\":1,\"438\":1,\"444\":1,\"445\":1,\"474\":1,\"519\":1,\"545\":1,\"547\":2,\"584\":1,\"587\":1,\"614\":1,\"711\":1,\"757\":2,\"919\":1,\"921\":1}}],[\"为单位\",{\"1\":{\"100\":1}}],[\"为删除\",{\"1\":{\"43\":1}}],[\"为标题栏\",{\"1\":{\"24\":1}}],[\"为顶层\",{\"1\":{\"24\":1}}],[\"为了有一个合适的在线写字的地方\",{\"1\":{\"798\":1}}],[\"为了满足上述要求\",{\"1\":{\"771\":1}}],[\"为了保证直接从源代码执行\",{\"1\":{\"765\":1}}],[\"为了符合\",{\"1\":{\"737\":1}}],[\"为了优化该问题\",{\"1\":{\"621\":1}}],[\"为了优化性能\",{\"1\":{\"311\":1}}],[\"为了与\",{\"1\":{\"416\":1}}],[\"为了便于分析\",{\"1\":{\"314\":1}}],[\"为了性能\",{\"1\":{\"308\":1}}],[\"为了实现这一点\",{\"1\":{\"539\":1}}],[\"为了实现动画效果\",{\"1\":{\"307\":1}}],[\"为了实现用户空间到用户空间的拷贝\",{\"1\":{\"138\":1}}],[\"为了让文本居中显得更清晰\",{\"1\":{\"251\":1}}],[\"为了让\",{\"1\":{\"147\":1}}],[\"为了确保绘制效果\",{\"1\":{\"146\":1}}],[\"为了解决这个问题\",{\"1\":{\"772\":1}}],[\"为了解决serializable性能问题而推出的\",{\"1\":{\"593\":1}}],[\"为了解决上述问题\",{\"1\":{\"376\":1}}],[\"为了解决多个构造函数导致的问题\",{\"1\":{\"204\":1}}],[\"为了解决第三方依赖的问题\",{\"1\":{\"203\":1}}],[\"为了解决\",{\"1\":{\"145\":1}}],[\"为了解决方法\",{\"1\":{\"145\":1}}],[\"为了使文字高度居中\",{\"1\":{\"33\":1}}],[\"为了定义此fileprovider可以使用的文件目录范围\",{\"1\":{\"6\":1}}],[\"为了避免在某些机型上面无法使用这些方法\",{\"1\":{\"131\":1}}],[\"为了避免每次删除时都需要缩减数组\",{\"1\":{\"86\":1}}],[\"为了避免这种浪费\",{\"1\":{\"85\":1}}],[\"为了避免这种情况\",{\"1\":{\"6\":1,\"587\":1,\"609\":1,\"740\":1}}],[\"为了避免一些启动期间需要的任何类未在主\",{\"1\":{\"30\":1}}],[\"为了避免重复闹钟可能带来的性能消耗\",{\"1\":{\"11\":1}}],[\"为了避免与主工程已有的fileprovider冲突\",{\"1\":{\"6\":1}}],[\"从左到右依次比较max和其他元素\",{\"1\":{\"897\":1}}],[\"从左到右依次遍历中缀表达式\",{\"1\":{\"890\":1}}],[\"从左到右\",{\"1\":{\"896\":1}}],[\"从前端front删除\",{\"1\":{\"888\":1}}],[\"从数组末尾开始依次减小\",{\"1\":{\"860\":1}}],[\"从数据驱动\",{\"1\":{\"126\":1}}],[\"从堆中移除根元素时都会在数组末尾空出一个位置\",{\"1\":{\"860\":1}}],[\"从下向上遍历\",{\"1\":{\"858\":1}}],[\"从图中删除并保存的排序结果中\",{\"1\":{\"850\":1}}],[\"从队列头取出一个顶点\",{\"1\":{\"848\":2}}],[\"从栈中弹出一个顶点\",{\"1\":{\"847\":1}}],[\"从栈中推出\",{\"1\":{\"847\":1}}],[\"从哈夫曼树的根开始\",{\"1\":{\"837\":1}}],[\"从根到任何一个节点有且只有一条路径\",{\"1\":{\"832\":1}}],[\"从其他系统向\",{\"1\":{\"808\":1}}],[\"从其源码可以看出\",{\"1\":{\"360\":1}}],[\"从最初的\",{\"1\":{\"798\":1}}],[\"从官网的表述中我们知道\",{\"1\":{\"784\":1}}],[\"从底层开始依次分为表entity\",{\"1\":{\"781\":1}}],[\"从底层开始依次是\",{\"1\":{\"140\":1}}],[\"从kernel\",{\"1\":{\"766\":1,\"767\":2}}],[\"从线程池中获取\",{\"1\":{\"759\":1}}],[\"从本地删除一个分支\",{\"1\":{\"674\":1}}],[\"从本地上传到\",{\"0\":{\"672\":1}}],[\"从树的最左边的节点开始遍历\",{\"1\":{\"665\":1}}],[\"从两个生产者接收数据\",{\"1\":{\"646\":1}}],[\"从周日到周一\",{\"1\":{\"576\":1}}],[\"从第\",{\"1\":{\"574\":1}}],[\"从获取到的图片生成\",{\"1\":{\"398\":1}}],[\"从powerimageloader\",{\"1\":{\"398\":1}}],[\"从中获取\",{\"1\":{\"370\":1}}],[\"从父类\",{\"1\":{\"349\":1}}],[\"从上向下遍历\",{\"1\":{\"859\":1}}],[\"从上图可以看出\",{\"1\":{\"771\":1}}],[\"从上图可以看到\",{\"1\":{\"314\":1}}],[\"从上述代码我们看到\",{\"1\":{\"418\":1}}],[\"从上述代码分析可知\",{\"1\":{\"415\":1}}],[\"从上述代码可以看到\",{\"1\":{\"383\":1,\"397\":1}}],[\"从上述代码可以看出\",{\"1\":{\"332\":1}}],[\"从上面的代码可以看到\",{\"1\":{\"528\":1}}],[\"从上面的分析我们也可以看出\",{\"1\":{\"438\":1}}],[\"从上面的分析中\",{\"1\":{\"249\":1,\"323\":1}}],[\"从上面代码我们可以看到\",{\"1\":{\"235\":1}}],[\"从mainactivitysubcomponent中查找提供waitforinjectclass的实例方法完成注入\",{\"1\":{\"216\":1}}],[\"从application中的activityinjector\",{\"1\":{\"216\":1}}],[\"从读端流出\",{\"1\":{\"137\":1}}],[\"从管道中读取数据\",{\"1\":{\"137\":1}}],[\"从而回退到未优化的代码\",{\"1\":{\"768\":1}}],[\"从而最终保证了counter++方法是依次执行的\",{\"1\":{\"645\":1}}],[\"从而保证线程安全\",{\"1\":{\"645\":1}}],[\"从而保证性能\",{\"1\":{\"442\":1}}],[\"从而不会阻塞当前协程\",{\"1\":{\"635\":1}}],[\"从而将其与数据的具体实现解耦\",{\"1\":{\"786\":1}}],[\"从而将其插入到\",{\"1\":{\"256\":1}}],[\"从而将对于value赋值给属性\",{\"1\":{\"619\":1}}],[\"从而避免栈溢出\",{\"1\":{\"614\":1}}],[\"从而避免\",{\"1\":{\"614\":1}}],[\"从而避免了上述情况\",{\"1\":{\"376\":1}}],[\"从而让其他线程再去主内存中读取最新的值\",{\"1\":{\"602\":1}}],[\"从而出现了对\",{\"1\":{\"513\":1}}],[\"从而进行对应处理\",{\"1\":{\"438\":1}}],[\"从而展示对应的内容\",{\"1\":{\"434\":1}}],[\"从而分别实现按照父级指定\",{\"1\":{\"431\":1}}],[\"从而优化性能\",{\"1\":{\"431\":1}}],[\"从而无法与\",{\"1\":{\"419\":1}}],[\"从而当用户手势在\",{\"1\":{\"415\":1}}],[\"从而计算出\",{\"1\":{\"405\":1}}],[\"从而影响用户体验\",{\"1\":{\"376\":1}}],[\"从而刷新\",{\"1\":{\"369\":1}}],[\"从而可以从\",{\"1\":{\"355\":1}}],[\"从而可以得到可以随时间变化过渡的\",{\"1\":{\"327\":1}}],[\"从而可以通过\",{\"1\":{\"327\":1}}],[\"从而控制动画播放\",{\"1\":{\"312\":1}}],[\"从而调用此\",{\"1\":{\"310\":1}}],[\"从而触发\",{\"1\":{\"310\":1,\"349\":1}}],[\"从而在不同\",{\"1\":{\"353\":1}}],[\"从而在不同的地方共享一些数据\",{\"1\":{\"205\":1}}],[\"从而在监听到\",{\"1\":{\"303\":1}}],[\"从而间接更新了\",{\"1\":{\"282\":1}}],[\"从而使其被catch捕获\",{\"1\":{\"656\":1}}],[\"从而使得其他\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"从而使得\",{\"1\":{\"357\":1}}],[\"从而使得v\",{\"1\":{\"125\":1}}],[\"从而使\",{\"1\":{\"280\":1,\"282\":1}}],[\"从而会导致错误\",{\"1\":{\"538\":1}}],[\"从而会更新\",{\"1\":{\"273\":1}}],[\"从而会在需要回收内存时杀死进程以及其中的\",{\"1\":{\"139\":1}}],[\"从而更新那些依赖了inheritedwidget的子widget\",{\"1\":{\"271\":1}}],[\"从而更新界面\",{\"1\":{\"269\":1}}],[\"从而完成文件操作的流程\",{\"1\":{\"243\":1}}],[\"从而获取到了mainactivitysubcomponent的实例供activity使用\",{\"1\":{\"217\":1}}],[\"从而支持有多个构造函数的service类的初始化\",{\"1\":{\"204\":1}}],[\"从而达到目的\",{\"1\":{\"179\":1}}],[\"从而实现屏蔽指令重排的效果\",{\"1\":{\"602\":1}}],[\"从而实现跨进程传输\",{\"1\":{\"593\":1}}],[\"从而实现滑动效果\",{\"1\":{\"423\":1,\"440\":1}}],[\"从而实现\",{\"1\":{\"420\":1}}],[\"从而实现了这两处滑动事件的联动\",{\"1\":{\"404\":1}}],[\"从而实现更丰富的动画效果\",{\"1\":{\"342\":1}}],[\"从而实现动画的视觉效果\",{\"1\":{\"314\":1}}],[\"从而实现调用\",{\"1\":{\"282\":1}}],[\"从而实现调用未在\",{\"1\":{\"176\":1}}],[\"从而实现对文件的读写\",{\"1\":{\"241\":1}}],[\"从而实现子\",{\"1\":{\"110\":1}}],[\"从而实现多渠道打包不同项目名\",{\"1\":{\"106\":1}}],[\"从而导致反序列化失败\",{\"1\":{\"582\":1}}],[\"从而导致其懒创建\",{\"1\":{\"446\":1}}],[\"从而导致inheritedwidget的子widget重建\",{\"1\":{\"271\":1}}],[\"从而导致\",{\"1\":{\"30\":1,\"353\":1,\"376\":1}}],[\"从系统获取\",{\"1\":{\"101\":1}}],[\"从系统表中查询指定\",{\"1\":{\"6\":1}}],[\"从当前页面\",{\"1\":{\"353\":1}}],[\"从当前\",{\"1\":{\"101\":1}}],[\"从index开始\",{\"1\":{\"92\":1}}],[\"从客户端\",{\"1\":{\"71\":2}}],[\"从sthreadlocal中取出mlooper\",{\"1\":{\"56\":1}}],[\"从\",{\"0\":{\"198\":1,\"673\":1,\"765\":1,\"780\":1},\"1\":{\"23\":1,\"71\":1,\"127\":1,\"138\":2,\"243\":1,\"315\":1,\"348\":1,\"350\":1,\"358\":1,\"398\":1,\"472\":1,\"521\":1,\"575\":1,\"594\":1,\"638\":2,\"753\":1,\"763\":1}}],[\"从开机后多久\",{\"1\":{\"20\":1}}],[\"从实际运行来看\",{\"1\":{\"13\":1}}],[\"从相册中获取到的图片uri一般如\",{\"1\":{\"6\":1}}],[\"从相册中获取图片\",{\"1\":{\"6\":1}}],[\"f3这三个文件\",{\"1\":{\"684\":1}}],[\"f3和f\",{\"1\":{\"684\":1}}],[\"f2\",{\"1\":{\"684\":2}}],[\"f强制\",{\"1\":{\"682\":1}}],[\"fbknrtu\",{\"1\":{\"703\":1}}],[\"fb\",{\"1\":{\"612\":1}}],[\"fs\",{\"1\":{\"383\":2}}],[\"ffi获取\",{\"1\":{\"398\":1}}],[\"ffi\",{\"1\":{\"250\":1,\"385\":1,\"391\":1,\"393\":1,\"397\":4,\"398\":2,\"400\":5}}],[\"ff00ff\",{\"1\":{\"189\":1}}],[\"fds\",{\"1\":{\"237\":1}}],[\"fdutils\",{\"1\":{\"237\":1}}],[\"full\",{\"1\":{\"528\":1}}],[\"furthest\",{\"1\":{\"412\":2,\"417\":1}}],[\"futrue\",{\"1\":{\"232\":1}}],[\"futurelistener\",{\"1\":{\"232\":2}}],[\"futurelistener<t\",{\"1\":{\"232\":1}}],[\"futureor<powertextureimageinfo>\",{\"1\":{\"396\":1}}],[\"futureor<imageinfo>\",{\"1\":{\"396\":1,\"397\":1}}],[\"futureor<r>\",{\"1\":{\"232\":1}}],[\"futureor<t>\",{\"1\":{\"223\":1,\"224\":1,\"231\":1}}],[\"future<isolate>\",{\"1\":{\"748\":6}}],[\"future<imageinfo>\",{\"1\":{\"395\":1,\"398\":1}}],[\"future<uint8list\",{\"1\":{\"383\":1}}],[\"future<uint8list>\",{\"1\":{\"243\":4}}],[\"future<ui\",{\"1\":{\"374\":2,\"383\":2,\"396\":1}}],[\"future<networkimage>\",{\"1\":{\"374\":1}}],[\"future<void>\",{\"1\":{\"365\":1}}],[\"future<randomaccessfile>\",{\"1\":{\"243\":1}}],[\"future<r>\",{\"1\":{\"232\":3}}],[\"future<list<t>>\",{\"1\":{\"231\":3}}],[\"future<t>\",{\"1\":{\"224\":2,\"231\":3,\"232\":2}}],[\"futures\",{\"1\":{\"231\":7}}],[\"future\",{\"0\":{\"232\":1},\"1\":{\"193\":1,\"221\":2,\"222\":9,\"223\":12,\"224\":3,\"230\":17,\"231\":30,\"232\":15,\"239\":1,\"240\":1,\"243\":9,\"244\":4,\"395\":2,\"396\":1,\"397\":1,\"398\":1,\"742\":2,\"748\":1}}],[\"futuretask\",{\"1\":{\"193\":2}}],[\"futuretask<result>\",{\"1\":{\"193\":1}}],[\"fun0\",{\"1\":{\"726\":1}}],[\"fun2\",{\"1\":{\"614\":2}}],[\"funname\",{\"1\":{\"612\":2}}],[\"fun1\",{\"1\":{\"612\":2,\"614\":2,\"726\":1}}],[\"func1\",{\"1\":{\"621\":1}}],[\"func\",{\"1\":{\"247\":1,\"248\":1,\"621\":1,\"759\":4}}],[\"functions\",{\"1\":{\"662\":1,\"767\":1,\"768\":1,\"771\":1}}],[\"function\",{\"1\":{\"224\":1,\"226\":2,\"228\":2,\"232\":5,\"233\":2,\"234\":2,\"237\":1,\"243\":2,\"246\":1,\"247\":6,\"273\":1,\"282\":1,\"376\":1,\"417\":1,\"742\":1,\"748\":2,\"753\":1,\"759\":5,\"761\":3,\"766\":2,\"768\":1,\"771\":1}}],[\"fun\",{\"1\":{\"15\":1,\"19\":1,\"20\":1,\"26\":1,\"75\":2,\"80\":1,\"83\":4,\"123\":7,\"125\":3,\"126\":7,\"139\":1,\"173\":4,\"187\":1,\"195\":1,\"196\":3,\"202\":1,\"203\":4,\"204\":1,\"205\":3,\"211\":1,\"213\":2,\"214\":2,\"215\":1,\"399\":4,\"486\":2,\"535\":1,\"541\":1,\"594\":4,\"612\":6,\"614\":2,\"616\":1,\"617\":2,\"618\":5,\"619\":7,\"620\":1,\"621\":2,\"625\":2,\"626\":1,\"629\":6,\"630\":2,\"638\":3,\"645\":1,\"646\":2,\"651\":3,\"654\":1,\"656\":2,\"662\":3,\"666\":2,\"726\":6,\"727\":4,\"784\":1,\"823\":1,\"833\":1,\"834\":1,\"836\":1,\"847\":1,\"848\":1,\"850\":2,\"858\":1,\"859\":1,\"880\":2,\"896\":1,\"897\":1,\"898\":1,\"911\":1,\"912\":1,\"913\":2,\"921\":3,\"927\":2}}],[\"f\",{\"1\":{\"142\":1,\"224\":8,\"232\":4,\"234\":4,\"475\":1,\"517\":1,\"554\":1,\"578\":1,\"621\":1,\"665\":1,\"684\":1,\"695\":3,\"703\":1,\"728\":1}}],[\"fens\",{\"1\":{\"813\":1}}],[\"fetch\",{\"1\":{\"618\":4,\"673\":1}}],[\"fernandocejas\",{\"1\":{\"126\":1,\"128\":2}}],[\"feature\",{\"1\":{\"24\":1}}],[\"facilities\",{\"1\":{\"771\":1}}],[\"factor规定的容量\",{\"1\":{\"505\":1}}],[\"factor\",{\"1\":{\"500\":1}}],[\"factory\",{\"1\":{\"213\":2,\"216\":1,\"217\":1,\"224\":1,\"231\":1,\"233\":2,\"234\":11,\"243\":1,\"383\":1,\"785\":2}}],[\"factory<\",{\"1\":{\"213\":2,\"217\":1}}],[\"fact\",{\"1\":{\"229\":1,\"759\":1}}],[\"father\",{\"1\":{\"728\":5,\"858\":5}}],[\"fatal2\",{\"1\":{\"247\":1}}],[\"fatal1\",{\"1\":{\"237\":1,\"247\":1,\"759\":1}}],[\"fatal\",{\"1\":{\"229\":1,\"749\":1,\"754\":1,\"757\":2,\"759\":4}}],[\"fallthrough\",{\"1\":{\"566\":1}}],[\"false\",{\"1\":{\"6\":1,\"26\":6,\"27\":2,\"36\":3,\"63\":2,\"86\":1,\"90\":1,\"112\":1,\"147\":1,\"167\":1,\"172\":3,\"173\":5,\"186\":1,\"222\":1,\"226\":2,\"231\":2,\"234\":2,\"238\":1,\"243\":4,\"247\":5,\"251\":5,\"256\":1,\"258\":6,\"259\":5,\"263\":5,\"264\":2,\"265\":1,\"304\":1,\"308\":1,\"319\":1,\"321\":1,\"325\":1,\"330\":1,\"331\":2,\"333\":2,\"346\":1,\"347\":2,\"351\":2,\"352\":1,\"368\":1,\"375\":1,\"376\":1,\"396\":1,\"399\":1,\"405\":1,\"422\":1,\"423\":1,\"436\":1,\"441\":1,\"442\":1,\"485\":2,\"523\":1,\"583\":1,\"587\":3,\"591\":1,\"619\":2,\"745\":2,\"748\":6,\"751\":3,\"752\":2,\"753\":3,\"754\":1,\"756\":2,\"757\":4,\"758\":1,\"759\":13,\"761\":18}}],[\"fadeinimage\",{\"1\":{\"365\":1}}],[\"fadetransition\",{\"1\":{\"309\":1,\"352\":1}}],[\"fades\",{\"1\":{\"302\":2}}],[\"fail\",{\"1\":{\"395\":1,\"753\":1}}],[\"failedspawn\",{\"1\":{\"751\":3,\"756\":2}}],[\"failed\",{\"1\":{\"243\":2,\"247\":1,\"351\":1,\"383\":1,\"712\":1,\"752\":6,\"753\":1,\"759\":6}}],[\"failure\",{\"1\":{\"126\":2,\"237\":2,\"247\":4,\"753\":1,\"757\":1}}],[\"fastoutslowin\",{\"1\":{\"348\":2}}],[\"fast\",{\"1\":{\"92\":1,\"238\":1,\"767\":1,\"769\":1}}],[\"following\",{\"1\":{\"763\":1}}],[\"folder\",{\"1\":{\"383\":1}}],[\"fold\",{\"1\":{\"126\":1,\"652\":1}}],[\"fout\",{\"1\":{\"737\":10}}],[\"foundation\",{\"1\":{\"253\":1}}],[\"found\",{\"1\":{\"92\":2,\"384\":1,\"485\":2,\"932\":1}}],[\"foo\",{\"1\":{\"629\":5,\"630\":2,\"633\":1,\"634\":2}}],[\"footween\",{\"1\":{\"358\":1}}],[\"footranslation\",{\"1\":{\"300\":1,\"314\":1}}],[\"footransition\",{\"1\":{\"300\":1,\"309\":1,\"310\":1,\"311\":1,\"312\":2,\"314\":1,\"329\":1}}],[\"focusnode\",{\"1\":{\"436\":3}}],[\"focusscope\",{\"1\":{\"423\":4,\"436\":1}}],[\"focusscopenode\",{\"1\":{\"423\":1,\"436\":1}}],[\"focusable\",{\"1\":{\"76\":1}}],[\"fontweight\",{\"1\":{\"264\":2}}],[\"fontsize\",{\"1\":{\"138\":1,\"276\":1,\"295\":1}}],[\"font\",{\"1\":{\"138\":1}}],[\"fontmetrics中存储的文字的各种信息\",{\"1\":{\"33\":1}}],[\"foregroundpaint\",{\"1\":{\"332\":1}}],[\"foregroundpainter\",{\"1\":{\"331\":1,\"332\":5}}],[\"foreachtween\",{\"0\":{\"306\":1},\"1\":{\"304\":3,\"305\":1,\"306\":1,\"307\":1,\"308\":1}}],[\"foreach\",{\"1\":{\"222\":2}}],[\"foreachindexed\",{\"1\":{\"145\":1,\"921\":2}}],[\"forwarding\",{\"1\":{\"745\":1}}],[\"forward\",{\"1\":{\"305\":2,\"308\":1,\"316\":1,\"319\":1,\"320\":2,\"321\":1,\"325\":1,\"327\":1,\"352\":1,\"418\":1}}],[\"forward<args>\",{\"1\":{\"247\":1,\"759\":1}}],[\"format\",{\"1\":{\"576\":2,\"583\":1,\"748\":1,\"769\":1}}],[\"format=\",{\"1\":{\"116\":2}}],[\"formal\",{\"1\":{\"511\":1}}],[\"form\",{\"1\":{\"285\":1,\"586\":1,\"727\":2,\"742\":1}}],[\"force\",{\"1\":{\"757\":1}}],[\"forcepixels\",{\"1\":{\"412\":1,\"413\":1}}],[\"forced\",{\"1\":{\"276\":1,\"412\":1}}],[\"forcelayout\",{\"1\":{\"159\":2}}],[\"forrequestid\",{\"1\":{\"244\":7}}],[\"forgets\",{\"1\":{\"205\":1}}],[\"forname\",{\"1\":{\"179\":4,\"487\":1,\"553\":1,\"710\":1}}],[\"fork\",{\"1\":{\"140\":3}}],[\"for\",{\"1\":{\"6\":1,\"26\":3,\"33\":1,\"49\":1,\"56\":1,\"63\":2,\"64\":1,\"90\":1,\"92\":7,\"125\":1,\"153\":1,\"179\":1,\"189\":1,\"226\":1,\"228\":1,\"231\":6,\"235\":2,\"236\":1,\"237\":1,\"238\":2,\"243\":3,\"244\":1,\"246\":1,\"247\":5,\"265\":1,\"285\":1,\"290\":2,\"309\":1,\"318\":1,\"323\":1,\"332\":2,\"334\":1,\"351\":6,\"352\":1,\"365\":5,\"375\":1,\"398\":3,\"408\":2,\"412\":2,\"413\":1,\"415\":1,\"417\":3,\"418\":4,\"429\":1,\"430\":1,\"448\":1,\"495\":2,\"496\":1,\"516\":1,\"519\":2,\"523\":1,\"524\":1,\"532\":3,\"533\":3,\"534\":4,\"557\":2,\"569\":1,\"574\":1,\"615\":2,\"629\":6,\"630\":2,\"638\":2,\"645\":1,\"646\":1,\"651\":1,\"656\":1,\"725\":1,\"728\":1,\"731\":2,\"737\":3,\"745\":1,\"748\":2,\"752\":1,\"754\":1,\"759\":3,\"761\":4,\"763\":2,\"769\":1,\"770\":1,\"771\":1,\"817\":1,\"890\":4,\"896\":2,\"897\":2,\"898\":2,\"921\":4,\"927\":1}}],[\"frequency\",{\"1\":{\"767\":2,\"768\":1}}],[\"free\",{\"1\":{\"751\":2,\"756\":1}}],[\"freeports\",{\"1\":{\"244\":6}}],[\"freekiteyu\",{\"1\":{\"138\":1}}],[\"front\",{\"1\":{\"763\":1}}],[\"froname\",{\"1\":{\"554\":1}}],[\"fromparts\",{\"1\":{\"426\":1}}],[\"fromaddress\",{\"1\":{\"397\":1}}],[\"fromlist\",{\"1\":{\"396\":1}}],[\"fromsize\",{\"1\":{\"352\":1}}],[\"fromsubtreecontext\",{\"1\":{\"351\":3}}],[\"fromherocontext\",{\"1\":{\"351\":1}}],[\"fromheroentry\",{\"1\":{\"351\":3}}],[\"fromheroes\",{\"1\":{\"351\":2}}],[\"fromherolocation\",{\"1\":{\"348\":1,\"352\":1}}],[\"fromhero\",{\"1\":{\"348\":3,\"351\":6,\"352\":2}}],[\"fromroute\",{\"1\":{\"348\":3,\"350\":4,\"351\":1}}],[\"from正向\",{\"1\":{\"319\":1}}],[\"frome\",{\"1\":{\"243\":1,\"244\":1}}],[\"from\",{\"0\":{\"764\":1,\"769\":1,\"770\":1,\"771\":1},\"1\":{\"117\":1,\"138\":1,\"229\":1,\"231\":6,\"234\":1,\"235\":1,\"236\":1,\"237\":1,\"255\":1,\"285\":1,\"302\":1,\"319\":2,\"342\":1,\"350\":4,\"351\":4,\"365\":5,\"376\":2,\"383\":1,\"405\":1,\"408\":1,\"417\":1,\"424\":1,\"485\":1,\"492\":1,\"499\":1,\"516\":1,\"523\":1,\"574\":2,\"580\":1,\"612\":1,\"615\":1,\"617\":4,\"631\":6,\"727\":1,\"731\":1,\"737\":1,\"740\":1,\"748\":2,\"752\":2,\"753\":2,\"757\":4,\"759\":1,\"761\":1,\"763\":4,\"767\":1,\"771\":1,\"912\":4}}],[\"fromfilepath\",{\"1\":{\"682\":3}}],[\"fromfile\",{\"1\":{\"6\":1}}],[\"fruit>\",{\"1\":{\"540\":1}}],[\"fruits2\",{\"1\":{\"540\":2}}],[\"fruits\",{\"1\":{\"539\":1,\"540\":1}}],[\"fruit\",{\"1\":{\"539\":3,\"540\":1,\"541\":1}}],[\"friction\",{\"1\":{\"413\":1}}],[\"frank\",{\"1\":{\"112\":1,\"113\":1}}],[\"fragment>\",{\"1\":{\"783\":2}}],[\"fragment类过多的时候\",{\"1\":{\"218\":1}}],[\"fragment\",{\"0\":{\"80\":1,\"217\":1},\"1\":{\"122\":5,\"123\":1,\"126\":3,\"783\":13,\"784\":1}}],[\"frameinfo\",{\"1\":{\"374\":3}}],[\"framebuilder\",{\"1\":{\"370\":2,\"392\":2,\"393\":2}}],[\"framenumber\",{\"1\":{\"369\":3,\"370\":1}}],[\"frames\",{\"1\":{\"282\":1}}],[\"frame\",{\"1\":{\"253\":1,\"254\":1,\"257\":1,\"350\":1,\"351\":1,\"376\":1,\"408\":1,\"459\":2,\"496\":2,\"759\":1,\"768\":1}}],[\"framework\",{\"1\":{\"140\":4,\"253\":1,\"256\":2,\"259\":1,\"262\":2,\"263\":1,\"264\":2,\"265\":4,\"266\":1,\"267\":1,\"278\":1,\"320\":1,\"332\":1,\"333\":1,\"335\":2}}],[\"frameworks\",{\"1\":{\"26\":1,\"83\":1}}],[\"framelayout>\",{\"1\":{\"784\":1}}],[\"framelayout\",{\"1\":{\"24\":1,\"25\":2,\"288\":1}}],[\"fizz\",{\"1\":{\"646\":3}}],[\"fixed\",{\"1\":{\"444\":4,\"445\":2,\"638\":2}}],[\"fittedbox\",{\"1\":{\"392\":1}}],[\"fit\",{\"1\":{\"276\":2,\"370\":2,\"392\":4,\"393\":2,\"445\":2}}],[\"fires\",{\"1\":{\"234\":1}}],[\"firstdayofweek有关\",{\"1\":{\"577\":1}}],[\"firstdayofweek\",{\"1\":{\"575\":1,\"576\":2}}],[\"firstvalue\",{\"1\":{\"527\":2}}],[\"firstheropage\",{\"1\":{\"340\":2,\"342\":1}}],[\"firstbuild\",{\"1\":{\"264\":1}}],[\"firstzerotimer\",{\"1\":{\"235\":3,\"237\":1,\"238\":1}}],[\"first\",{\"1\":{\"19\":1,\"25\":1,\"71\":1,\"138\":1,\"145\":2,\"226\":1,\"231\":1,\"237\":1,\"317\":4,\"340\":1,\"351\":1,\"417\":1,\"418\":2,\"448\":1,\"573\":2,\"574\":1,\"652\":1,\"748\":1,\"753\":1}}],[\"fields\",{\"1\":{\"285\":1,\"495\":3,\"552\":2,\"569\":2,\"584\":1,\"585\":1,\"740\":1}}],[\"field\",{\"1\":{\"179\":5,\"204\":2,\"323\":1,\"553\":1,\"565\":1,\"568\":1,\"569\":6,\"574\":1,\"753\":5}}],[\"fifo\",{\"1\":{\"137\":1,\"235\":1,\"872\":1,\"888\":1}}],[\"fingerprints\",{\"1\":{\"753\":1}}],[\"finger\",{\"1\":{\"691\":1}}],[\"finlize\",{\"1\":{\"475\":2}}],[\"findnavcontroller\",{\"1\":{\"783\":2}}],[\"findplatform\",{\"1\":{\"710\":2}}],[\"finding\",{\"1\":{\"492\":1}}],[\"findclass\",{\"1\":{\"485\":3,\"486\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"485\":1}}],[\"findloadedclass\",{\"1\":{\"485\":1}}],[\"find\",{\"1\":{\"351\":1,\"448\":1,\"485\":1,\"737\":3}}],[\"findrenderobject\",{\"1\":{\"347\":1,\"351\":1}}],[\"findancestorwidgetofexacttype<hero>\",{\"1\":{\"347\":1}}],[\"findancestorwidgetofexacttype<appcolor>\",{\"1\":{\"273\":1}}],[\"findancestorwidgetofexacttype<t\",{\"1\":{\"272\":1}}],[\"findancestorparentdataelement\",{\"1\":{\"256\":1,\"265\":1}}],[\"findancestorrenderobjectelement\",{\"1\":{\"256\":1,\"265\":2}}],[\"findviewbyid\",{\"1\":{\"118\":1,\"167\":1,\"178\":1,\"564\":1,\"569\":5}}],[\"finishes\",{\"1\":{\"351\":1}}],[\"finished\",{\"1\":{\"193\":2}}],[\"finishbroadcast\",{\"1\":{\"63\":1}}],[\"finish\",{\"1\":{\"25\":1,\"30\":1,\"173\":1,\"193\":3,\"241\":2,\"243\":1,\"376\":2,\"719\":1,\"742\":2}}],[\"final的\",{\"1\":{\"747\":1}}],[\"finalcallback\",{\"1\":{\"712\":8}}],[\"final要保证可见性的前提是要被安全的构建出来\",{\"1\":{\"604\":1}}],[\"final和volatile保证\",{\"1\":{\"604\":1}}],[\"final对象中以便在需要的地方共享同一个对象\",{\"1\":{\"358\":1}}],[\"finalize\",{\"1\":{\"243\":2,\"244\":2,\"475\":2}}],[\"finally或者其他方法更好的实现\",{\"1\":{\"475\":1}}],[\"finally\",{\"1\":{\"63\":1,\"71\":1,\"138\":1,\"193\":3,\"226\":2,\"238\":1,\"264\":1,\"294\":1,\"395\":1,\"566\":2,\"583\":1,\"629\":2,\"634\":1,\"658\":1,\"712\":1}}],[\"final\",{\"0\":{\"509\":1},\"1\":{\"25\":1,\"26\":5,\"39\":1,\"48\":1,\"49\":2,\"54\":2,\"71\":2,\"83\":3,\"92\":2,\"94\":1,\"95\":2,\"123\":3,\"138\":5,\"159\":2,\"179\":1,\"193\":6,\"227\":1,\"229\":2,\"231\":1,\"234\":2,\"235\":2,\"243\":4,\"244\":6,\"254\":1,\"256\":2,\"259\":1,\"262\":1,\"264\":1,\"265\":5,\"273\":5,\"276\":2,\"282\":1,\"302\":4,\"309\":1,\"310\":3,\"311\":2,\"320\":1,\"321\":1,\"324\":1,\"325\":3,\"330\":1,\"332\":1,\"333\":1,\"342\":3,\"347\":2,\"348\":3,\"349\":2,\"350\":2,\"351\":15,\"352\":5,\"357\":4,\"367\":2,\"374\":3,\"376\":5,\"383\":8,\"384\":2,\"392\":1,\"393\":1,\"395\":1,\"396\":2,\"398\":5,\"399\":1,\"405\":4,\"409\":1,\"412\":8,\"413\":4,\"415\":1,\"416\":2,\"417\":4,\"418\":10,\"423\":6,\"426\":1,\"430\":1,\"436\":3,\"439\":1,\"440\":1,\"490\":1,\"495\":1,\"497\":1,\"500\":4,\"506\":1,\"511\":3,\"513\":5,\"514\":3,\"517\":1,\"519\":1,\"521\":7,\"523\":2,\"527\":1,\"528\":1,\"557\":2,\"560\":2,\"582\":1,\"587\":2,\"594\":1,\"712\":9,\"747\":1,\"748\":6}}],[\"filo\",{\"1\":{\"871\":1,\"887\":1}}],[\"fills\",{\"1\":{\"276\":1}}],[\"filled\",{\"1\":{\"231\":1,\"265\":1,\"396\":1,\"745\":1}}],[\"fill\",{\"1\":{\"138\":1,\"146\":1,\"276\":1}}],[\"filtercheck\",{\"1\":{\"583\":2}}],[\"filterquality\",{\"1\":{\"310\":5,\"370\":2}}],[\"filter\",{\"1\":{\"36\":2,\"583\":1,\"612\":1,\"629\":1,\"653\":1,\"666\":2}}],[\"filter>\",{\"1\":{\"35\":2,\"189\":2}}],[\"filterequals\",{\"1\":{\"21\":1}}],[\"file或者重新登录使其立即生效\",{\"1\":{\"700\":1}}],[\"filename\",{\"1\":{\"684\":1,\"685\":3,\"689\":1,\"694\":1,\"702\":1,\"703\":1,\"704\":1}}],[\"filenotfoundexception\",{\"1\":{\"586\":1,\"587\":1}}],[\"fileoutputstream\",{\"1\":{\"586\":1,\"587\":1}}],[\"fileopen\",{\"1\":{\"243\":1}}],[\"filedescriptor\",{\"1\":{\"594\":1}}],[\"filed=\",{\"1\":{\"586\":2,\"587\":2}}],[\"filed\",{\"1\":{\"586\":9,\"587\":2}}],[\"fileinputstream\",{\"1\":{\"486\":3,\"586\":1,\"587\":1}}],[\"fileimage\",{\"1\":{\"374\":1}}],[\"file等构造函数从网络\",{\"1\":{\"390\":1}}],[\"filemode\",{\"1\":{\"243\":8}}],[\"fileread\",{\"1\":{\"243\":1}}],[\"fileresourceinfo\",{\"1\":{\"243\":2}}],[\"file下面的目录\",{\"1\":{\"6\":1}}],[\"filestat\",{\"1\":{\"383\":1}}],[\"filesystemexception\",{\"1\":{\"243\":3}}],[\"filesystementity\",{\"1\":{\"243\":3}}],[\"files\",{\"0\":{\"452\":1},\"1\":{\"6\":2,\"753\":1,\"763\":2,\"822\":4}}],[\"filepath\",{\"1\":{\"241\":2}}],[\"filepathcolumn\",{\"1\":{\"6\":2}}],[\"fileprovider操作\",{\"1\":{\"6\":1}}],[\"fileprovider是fileprovider的authorities\",{\"1\":{\"6\":1}}],[\"fileprovider\",{\"1\":{\"6\":5,\"7\":2}}],[\"file\",{\"1\":{\"6\":6,\"30\":1,\"71\":2,\"241\":7,\"243\":30,\"247\":32,\"249\":1,\"365\":2,\"382\":1,\"383\":4,\"395\":1,\"398\":2,\"399\":1,\"486\":2,\"586\":5,\"587\":5,\"594\":2,\"612\":1,\"662\":2,\"685\":1,\"694\":3,\"719\":1,\"731\":16,\"742\":2,\"752\":4,\"757\":1,\"759\":1,\"809\":1,\"822\":4}}],[\"fliter\",{\"1\":{\"629\":1}}],[\"flippedcurve\",{\"1\":{\"360\":1}}],[\"flipped\",{\"1\":{\"348\":1,\"360\":1}}],[\"flightdirection\",{\"1\":{\"351\":1}}],[\"flightcontext\",{\"1\":{\"351\":1}}],[\"flighttype\",{\"1\":{\"350\":5,\"351\":2}}],[\"flights\",{\"1\":{\"349\":1,\"351\":5}}],[\"flightshuttlebuilder\",{\"1\":{\"344\":2,\"346\":1,\"351\":3}}],[\"flight\",{\"1\":{\"347\":1,\"348\":1,\"351\":6}}],[\"fling\",{\"1\":{\"112\":1,\"319\":1,\"326\":1,\"327\":1}}],[\"flexfit\",{\"1\":{\"276\":4}}],[\"flex\",{\"1\":{\"275\":1,\"276\":7}}],[\"flexible的\",{\"1\":{\"276\":1}}],[\"flexible\",{\"0\":{\"275\":1},\"1\":{\"276\":12,\"445\":2}}],[\"flush\",{\"1\":{\"247\":1,\"587\":2}}],[\"fluttersingleframeimage\",{\"1\":{\"399\":1}}],[\"flutteractivity\",{\"1\":{\"399\":1}}],[\"flutterassetstream\",{\"1\":{\"286\":1}}],[\"flutterimage\",{\"1\":{\"398\":1}}],[\"flutterpluginbinding\",{\"1\":{\"398\":6}}],[\"flutterplugin\",{\"1\":{\"398\":1}}],[\"flutterpixelformat\",{\"1\":{\"397\":1}}],[\"fluttererror\",{\"1\":{\"296\":2,\"424\":1,\"426\":2}}],[\"fluttererrordetails\",{\"1\":{\"295\":2}}],[\"flutter框架会调用errorwidget\",{\"1\":{\"295\":1}}],[\"flutter中的错误不会导致应用程序奔溃\",{\"1\":{\"292\":1}}],[\"flutter\",{\"0\":{\"251\":1,\"268\":1,\"269\":1,\"275\":1,\"278\":1,\"279\":1,\"291\":1,\"300\":1,\"314\":1,\"329\":1,\"338\":1,\"355\":1,\"363\":1,\"379\":1,\"387\":1,\"389\":1,\"398\":1,\"402\":1,\"422\":1,\"433\":1},\"1\":{\"240\":2,\"243\":1,\"250\":2,\"251\":8,\"253\":2,\"254\":2,\"256\":1,\"257\":2,\"258\":1,\"262\":1,\"266\":3,\"267\":6,\"269\":3,\"270\":1,\"271\":1,\"273\":1,\"274\":3,\"275\":1,\"278\":5,\"279\":4,\"280\":1,\"282\":2,\"284\":3,\"285\":2,\"286\":6,\"287\":1,\"288\":1,\"289\":1,\"290\":4,\"292\":4,\"293\":1,\"296\":1,\"297\":1,\"298\":2,\"300\":10,\"301\":1,\"307\":1,\"311\":1,\"312\":3,\"313\":1,\"314\":15,\"315\":2,\"320\":1,\"327\":3,\"328\":5,\"329\":6,\"332\":4,\"333\":1,\"335\":2,\"336\":6,\"337\":2,\"338\":1,\"340\":1,\"341\":3,\"342\":2,\"344\":1,\"351\":2,\"353\":2,\"355\":2,\"357\":1,\"360\":1,\"362\":5,\"363\":3,\"365\":2,\"376\":4,\"377\":2,\"378\":2,\"379\":2,\"385\":4,\"387\":2,\"388\":9,\"391\":1,\"393\":2,\"394\":2,\"397\":5,\"398\":9,\"399\":2,\"400\":6,\"401\":3,\"402\":1,\"421\":1,\"422\":2,\"427\":1,\"431\":1,\"432\":1,\"433\":1,\"439\":1,\"447\":1,\"740\":1,\"742\":1,\"765\":4},\"2\":{\"299\":1}}],[\"floor\",{\"1\":{\"358\":1}}],[\"floitsch\",{\"1\":{\"229\":1}}],[\"flow则支持挂起函数异步返回多个值\",{\"1\":{\"650\":1}}],[\"flow是\",{\"1\":{\"649\":1}}],[\"flow是用来异步返回多个值\",{\"1\":{\"637\":1}}],[\"flowon\",{\"1\":{\"629\":1,\"654\":1}}],[\"flowof\",{\"1\":{\"629\":1,\"631\":2,\"651\":2}}],[\"flow<int>\",{\"1\":{\"629\":3,\"630\":1,\"651\":4,\"654\":1,\"656\":1}}],[\"flow\",{\"0\":{\"637\":1,\"648\":1,\"651\":1},\"1\":{\"126\":2,\"270\":1,\"271\":1,\"629\":7,\"630\":1,\"631\":4,\"634\":1,\"651\":1,\"652\":1,\"654\":1,\"656\":1,\"657\":1,\"660\":1,\"767\":1,\"771\":1}}],[\"floated\",{\"1\":{\"418\":1}}],[\"floating\",{\"1\":{\"413\":1}}],[\"floatheaderslivers\",{\"1\":{\"405\":1,\"416\":1,\"418\":2,\"419\":1}}],[\"float\",{\"1\":{\"33\":2,\"101\":2,\"116\":1,\"117\":1,\"143\":10,\"147\":1,\"153\":7,\"418\":1,\"500\":1,\"523\":1,\"568\":1,\"590\":1,\"723\":1}}],[\"flattenmerge\",{\"1\":{\"655\":1}}],[\"flattenconcat\",{\"1\":{\"655\":1}}],[\"flattonmerge\",{\"1\":{\"631\":1}}],[\"flatmaplatest\",{\"1\":{\"631\":1,\"655\":1}}],[\"flatmapmerge\",{\"1\":{\"631\":2,\"655\":1}}],[\"flatmapconcat\",{\"1\":{\"631\":1,\"655\":1}}],[\"flatmap\",{\"1\":{\"612\":3,\"664\":2}}],[\"flavordimensions\",{\"1\":{\"104\":1}}],[\"flavor\",{\"1\":{\"104\":3}}],[\"flagsinitialize\",{\"1\":{\"758\":1}}],[\"flags\",{\"1\":{\"36\":2,\"38\":1,\"71\":2,\"76\":1,\"138\":2,\"594\":1,\"749\":1,\"753\":5,\"754\":5,\"756\":5,\"757\":16,\"758\":8}}],[\"flag\",{\"1\":{\"0\":1,\"6\":4,\"26\":3,\"36\":2,\"63\":1,\"76\":4,\"111\":3,\"131\":1,\"146\":1,\"159\":1,\"162\":1,\"247\":6,\"753\":6,\"759\":1,\"761\":5}}],[\"fly\",{\"1\":{\"2\":1}}],[\"=12\",{\"1\":{\"516\":1}}],[\"=overscroll\",{\"1\":{\"418\":1}}],[\"=>load\",{\"1\":{\"374\":1}}],[\"=>\",{\"1\":{\"222\":2,\"223\":2,\"230\":2,\"232\":3,\"255\":2,\"262\":1,\"264\":1,\"270\":3,\"271\":1,\"273\":4,\"276\":1,\"279\":1,\"302\":2,\"307\":1,\"310\":2,\"323\":1,\"330\":1,\"332\":1,\"333\":5,\"357\":2,\"358\":1,\"359\":1,\"360\":2,\"369\":1,\"374\":1,\"384\":3,\"393\":1,\"403\":3,\"405\":3,\"418\":1,\"424\":1,\"430\":1,\"434\":1,\"440\":1,\"747\":1}}],[\"==\",{\"0\":{\"236\":1},\"1\":{\"25\":3,\"26\":5,\"63\":3,\"71\":1,\"87\":1,\"88\":1,\"92\":3,\"112\":1,\"138\":1,\"153\":2,\"159\":2,\"163\":2,\"173\":1,\"179\":1,\"193\":8,\"196\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":8,\"232\":2,\"233\":2,\"234\":3,\"235\":4,\"237\":3,\"238\":5,\"241\":1,\"243\":6,\"244\":4,\"247\":12,\"248\":1,\"253\":1,\"254\":1,\"256\":2,\"263\":3,\"264\":1,\"265\":1,\"270\":2,\"273\":1,\"276\":2,\"320\":1,\"321\":1,\"324\":2,\"332\":5,\"334\":1,\"347\":2,\"348\":2,\"350\":4,\"351\":3,\"352\":5,\"358\":2,\"359\":3,\"360\":2,\"368\":2,\"369\":1,\"376\":1,\"383\":4,\"391\":2,\"392\":1,\"395\":1,\"398\":4,\"412\":1,\"413\":1,\"415\":2,\"417\":1,\"418\":1,\"423\":1,\"426\":1,\"436\":1,\"438\":1,\"439\":2,\"441\":1,\"461\":1,\"485\":2,\"500\":1,\"545\":1,\"546\":1,\"547\":2,\"557\":1,\"560\":5,\"583\":1,\"587\":6,\"591\":1,\"614\":2,\"710\":2,\"711\":1,\"712\":2,\"748\":1,\"750\":2,\"751\":4,\"752\":1,\"753\":4,\"754\":1,\"756\":4,\"757\":9,\"758\":2,\"759\":1,\"761\":12,\"834\":1,\"836\":7,\"848\":1,\"850\":2,\"859\":1,\"880\":3,\"890\":5,\"911\":2,\"912\":1,\"913\":2,\"921\":3}}],[\"=\",{\"1\":{\"6\":5,\"19\":4,\"20\":4,\"21\":1,\"25\":3,\"26\":26,\"33\":6,\"35\":2,\"38\":6,\"39\":10,\"48\":4,\"49\":3,\"52\":4,\"53\":2,\"54\":2,\"57\":1,\"62\":10,\"63\":12,\"64\":3,\"71\":8,\"74\":2,\"75\":1,\"80\":1,\"83\":13,\"86\":1,\"87\":8,\"88\":1,\"89\":4,\"90\":13,\"92\":6,\"93\":4,\"94\":1,\"95\":3,\"100\":12,\"101\":1,\"104\":1,\"105\":7,\"116\":2,\"117\":6,\"118\":1,\"123\":2,\"124\":1,\"125\":11,\"126\":5,\"131\":3,\"138\":19,\"142\":2,\"144\":4,\"145\":6,\"146\":5,\"147\":8,\"153\":17,\"159\":7,\"162\":4,\"163\":5,\"167\":3,\"173\":5,\"179\":28,\"185\":1,\"186\":5,\"187\":6,\"189\":4,\"193\":23,\"195\":2,\"196\":30,\"199\":2,\"202\":1,\"203\":7,\"204\":2,\"205\":3,\"211\":1,\"213\":3,\"214\":1,\"224\":6,\"225\":6,\"226\":12,\"227\":2,\"228\":3,\"229\":4,\"231\":22,\"232\":10,\"233\":1,\"234\":12,\"235\":14,\"237\":19,\"238\":18,\"241\":5,\"243\":32,\"244\":21,\"246\":3,\"247\":79,\"248\":3,\"249\":1,\"253\":11,\"254\":3,\"256\":19,\"259\":6,\"262\":2,\"263\":5,\"264\":13,\"265\":19,\"270\":4,\"271\":3,\"273\":10,\"276\":5,\"284\":6,\"285\":3,\"286\":1,\"294\":2,\"295\":3,\"296\":1,\"302\":3,\"304\":6,\"305\":4,\"307\":1,\"308\":5,\"309\":1,\"310\":3,\"311\":2,\"319\":5,\"320\":6,\"321\":4,\"322\":1,\"323\":1,\"324\":1,\"325\":3,\"330\":5,\"331\":3,\"332\":9,\"333\":1,\"334\":4,\"342\":5,\"343\":1,\"346\":1,\"347\":10,\"348\":3,\"349\":4,\"350\":4,\"351\":20,\"352\":16,\"359\":1,\"360\":1,\"365\":2,\"367\":5,\"368\":5,\"369\":7,\"370\":9,\"374\":4,\"376\":18,\"383\":19,\"384\":7,\"391\":2,\"392\":1,\"393\":3,\"395\":7,\"396\":6,\"397\":10,\"398\":54,\"399\":1,\"403\":1,\"405\":13,\"409\":1,\"412\":13,\"413\":7,\"415\":4,\"417\":8,\"418\":24,\"423\":8,\"426\":1,\"436\":10,\"437\":3,\"438\":2,\"439\":3,\"440\":6,\"441\":1,\"461\":2,\"474\":2,\"478\":1,\"479\":1,\"485\":7,\"486\":11,\"487\":3,\"495\":3,\"500\":1,\"501\":3,\"504\":6,\"506\":2,\"513\":9,\"516\":17,\"517\":1,\"519\":3,\"521\":7,\"523\":2,\"527\":13,\"528\":1,\"532\":6,\"533\":9,\"534\":11,\"538\":6,\"539\":2,\"540\":1,\"545\":1,\"546\":1,\"547\":2,\"548\":1,\"549\":1,\"553\":4,\"557\":24,\"560\":6,\"568\":1,\"569\":8,\"576\":5,\"578\":2,\"582\":1,\"583\":7,\"584\":5,\"586\":11,\"587\":9,\"590\":8,\"594\":3,\"602\":1,\"612\":6,\"614\":3,\"617\":2,\"618\":3,\"619\":8,\"620\":1,\"621\":2,\"622\":1,\"625\":3,\"626\":1,\"629\":6,\"630\":3,\"631\":5,\"634\":1,\"636\":3,\"638\":11,\"641\":1,\"645\":5,\"646\":1,\"651\":3,\"654\":1,\"656\":2,\"662\":4,\"663\":1,\"664\":1,\"666\":15,\"689\":1,\"708\":3,\"710\":3,\"711\":10,\"712\":6,\"718\":5,\"726\":1,\"728\":2,\"731\":19,\"737\":21,\"742\":5,\"745\":8,\"747\":3,\"748\":18,\"749\":1,\"750\":3,\"751\":10,\"752\":32,\"753\":42,\"754\":9,\"756\":9,\"757\":25,\"758\":5,\"759\":63,\"760\":1,\"761\":55,\"783\":2,\"784\":3,\"785\":1,\"817\":4,\"819\":5,\"821\":3,\"822\":2,\"823\":7,\"827\":2,\"833\":2,\"836\":25,\"847\":10,\"848\":10,\"850\":9,\"858\":7,\"859\":13,\"879\":1,\"880\":6,\"890\":12,\"896\":5,\"897\":7,\"898\":5,\"911\":2,\"912\":1,\"913\":14,\"919\":1,\"921\":9,\"927\":9}}],[\"内资源\",{\"0\":{\"820\":1}}],[\"内联缓存的实现主要有\",{\"1\":{\"767\":1}}],[\"内联缓存\",{\"1\":{\"767\":1}}],[\"内联函数会直接被插入到被调用的地方\",{\"1\":{\"621\":1}}],[\"内联函数\",{\"0\":{\"621\":1}}],[\"内是参数\",{\"1\":{\"663\":1}}],[\"内是不是有\",{\"1\":{\"417\":1}}],[\"内建注解\",{\"0\":{\"566\":1}}],[\"内其余\",{\"1\":{\"419\":1}}],[\"内置的动画分为隐式动画和显式动画两种\",{\"1\":{\"336\":1}}],[\"内置的显式动画为\",{\"1\":{\"312\":1}}],[\"内置的隐式动画为\",{\"1\":{\"312\":1}}],[\"内置的以\",{\"1\":{\"311\":1}}],[\"内置的这些类主要以\",{\"1\":{\"300\":1,\"314\":1}}],[\"内置封装好的动画相关的\",{\"1\":{\"300\":1}}],[\"内核层\",{\"1\":{\"140\":1}}],[\"内核\",{\"1\":{\"140\":1}}],[\"内核空间的某些区域被映射到所有进程共享的物理页面\",{\"1\":{\"136\":1}}],[\"内核空间包括内核中的代码和数据结构\",{\"1\":{\"136\":1}}],[\"内容放入目标文件夹\",{\"1\":{\"813\":1}}],[\"内容是纯文本\",{\"1\":{\"697\":1}}],[\"内容超出\",{\"1\":{\"446\":1}}],[\"内容无法完整显示\",{\"1\":{\"445\":1}}],[\"内容尽快\",{\"1\":{\"418\":1}}],[\"内容尺寸如何\",{\"1\":{\"405\":1}}],[\"内容如下\",{\"1\":{\"279\":1}}],[\"内容\",{\"1\":{\"75\":1,\"229\":1,\"403\":1,\"440\":1,\"446\":1}}],[\"内容向右移动\",{\"1\":{\"75\":1}}],[\"内容向左移动\",{\"1\":{\"75\":1}}],[\"内容的大小\",{\"1\":{\"276\":1}}],[\"内容的\",{\"1\":{\"75\":1}}],[\"内容更加完善的文章\",{\"1\":{\"0\":1}}],[\"内存中的状态信息\",{\"1\":{\"686\":1}}],[\"内存中的图片数据创建了对应的\",{\"1\":{\"397\":1}}],[\"内存模型\",{\"1\":{\"601\":1}}],[\"内存泄漏\",{\"0\":{\"528\":1}}],[\"内存优化\",{\"1\":{\"524\":1}}],[\"内存无管\",{\"1\":{\"496\":1}}],[\"内存利用效率低\",{\"1\":{\"471\":1}}],[\"内存一分为二\",{\"1\":{\"471\":1}}],[\"内存溢出\",{\"0\":{\"463\":1},\"1\":{\"464\":1}}],[\"内存划分\",{\"0\":{\"456\":1}}],[\"内存\",{\"0\":{\"455\":1}}],[\"内存分配\",{\"0\":{\"454\":1}}],[\"内存指针创建ui\",{\"1\":{\"400\":1}}],[\"内存管理\",{\"1\":{\"140\":1}}],[\"内存管理单元\",{\"1\":{\"136\":1}}],[\"内存缓存区\",{\"1\":{\"137\":1}}],[\"内存映射提供了共享对象的机制\",{\"1\":{\"136\":1}}],[\"内存再次空闲系统也不会再重新创建服务\",{\"1\":{\"36\":1}}],[\"内存空闲时系统会重新创建\",{\"1\":{\"36\":1}}],[\"内部维持一个\",{\"1\":{\"762\":1}}],[\"内部类访问这个对象时\",{\"1\":{\"604\":1}}],[\"内部类访问外部类的全部变量和局部变量\",{\"1\":{\"513\":1}}],[\"内部类的话\",{\"1\":{\"516\":1}}],[\"内部类中的外部类全局变量都是最新的\",{\"1\":{\"513\":1}}],[\"内部类通过局部变量的备份引用访问的\",{\"1\":{\"513\":1}}],[\"内部能够使用\",{\"1\":{\"445\":1}}],[\"内部通过\",{\"1\":{\"420\":1}}],[\"内部通过imageprovider\",{\"1\":{\"365\":1}}],[\"内部没有\",{\"1\":{\"418\":1}}],[\"内部视觉上出现越界现象\",{\"1\":{\"412\":1}}],[\"内部会调用imageprovider\",{\"1\":{\"374\":1}}],[\"内部其实是使用\",{\"1\":{\"370\":1}}],[\"内部可以通过herocontrollerscope\",{\"1\":{\"349\":1}}],[\"内部并没有太多逻辑\",{\"1\":{\"331\":1}}],[\"内部都是通过\",{\"1\":{\"319\":1}}],[\"内部创建\",{\"1\":{\"404\":1}}],[\"内部创建的\",{\"1\":{\"353\":1}}],[\"内部创建并监听\",{\"1\":{\"312\":1}}],[\"内部创建匿名\",{\"1\":{\"138\":1}}],[\"内部控制\",{\"1\":{\"309\":1}}],[\"内部持有使用者传入的\",{\"1\":{\"308\":1}}],[\"内部根据不同的\",{\"1\":{\"125\":2}}],[\"内部的数据结构序列化为\",{\"1\":{\"770\":1}}],[\"内部的微任务\",{\"1\":{\"221\":1}}],[\"内部的\",{\"1\":{\"101\":2,\"266\":1,\"415\":1}}],[\"内部调用了\",{\"1\":{\"583\":1}}],[\"内部调用scrolldragcontroller\",{\"1\":{\"418\":1}}],[\"内部调用sthreadlocal获取已有的looper对象\",{\"1\":{\"50\":1}}],[\"内部调用getpostmessage\",{\"1\":{\"56\":1}}],[\"内部\",{\"0\":{\"27\":1},\"1\":{\"300\":1,\"314\":1}}],[\"内部要读取其内容的话\",{\"1\":{\"6\":1}}],[\"内有一个\",{\"1\":{\"24\":1}}],[\"c放到节点\",{\"1\":{\"903\":1}}],[\"c→a\",{\"1\":{\"850\":1}}],[\"css\",{\"1\":{\"811\":1}}],[\"csdn\",{\"1\":{\"33\":3,\"43\":1,\"44\":1,\"62\":1,\"71\":1,\"77\":1,\"104\":1,\"105\":2,\"112\":1,\"113\":1,\"137\":2,\"138\":6,\"139\":1,\"149\":1,\"247\":1,\"250\":1,\"483\":1,\"490\":1,\"497\":1,\"498\":2,\"519\":1,\"524\":1,\"528\":2,\"550\":1,\"558\":1,\"816\":1,\"824\":1}}],[\"ctrl+c\",{\"1\":{\"806\":1}}],[\"cthread\",{\"1\":{\"560\":1}}],[\"cmd\",{\"1\":{\"719\":1,\"802\":1}}],[\"cmd脚本内容\",{\"1\":{\"719\":1}}],[\"cmd脚本\",{\"1\":{\"719\":1}}],[\"cmd1\",{\"1\":{\"701\":2}}],[\"cmd0\",{\"1\":{\"701\":2}}],[\"cdtv\",{\"1\":{\"694\":1}}],[\"cd\",{\"1\":{\"683\":5,\"794\":8,\"806\":1}}],[\"cparentnode\",{\"1\":{\"836\":3}}],[\"cp\",{\"1\":{\"682\":1,\"794\":2}}],[\"cp拷贝\",{\"1\":{\"682\":1}}],[\"cpu\",{\"1\":{\"131\":1,\"136\":1,\"137\":1,\"285\":2,\"629\":2,\"654\":1}}],[\"ci\",{\"1\":{\"791\":1,\"794\":1,\"796\":1},\"2\":{\"797\":1}}],[\"cinv\",{\"1\":{\"702\":1}}],[\"city\",{\"1\":{\"612\":6,\"726\":1}}],[\"cipher\",{\"1\":{\"557\":12}}],[\"cycle\",{\"1\":{\"573\":1,\"740\":1}}],[\"c790f8d46bec0975f565e211\",{\"1\":{\"149\":1}}],[\"cup\",{\"1\":{\"545\":1}}],[\"cupertinotabview\",{\"1\":{\"349\":1}}],[\"cupertinoapp\",{\"1\":{\"349\":1,\"353\":1}}],[\"customscrollview\",{\"1\":{\"402\":2,\"404\":2,\"405\":3,\"419\":3,\"420\":1,\"422\":2,\"430\":5,\"431\":1,\"433\":2,\"442\":1,\"446\":1}}],[\"custompaint\",{\"0\":{\"329\":1,\"331\":1},\"1\":{\"329\":3,\"330\":5,\"331\":4,\"332\":2,\"333\":1,\"335\":1,\"336\":1,\"337\":1}}],[\"custompainter\",{\"0\":{\"333\":1},\"1\":{\"300\":1,\"312\":2,\"314\":1,\"329\":1,\"330\":4,\"331\":2,\"332\":17,\"333\":12,\"335\":4}}],[\"customerwidget\",{\"1\":{\"281\":1,\"282\":1}}],[\"custom\",{\"1\":{\"247\":1,\"342\":1,\"384\":1,\"430\":1,\"822\":1}}],[\"cubicto\",{\"1\":{\"143\":2,\"145\":1}}],[\"curvetween\",{\"0\":{\"359\":1},\"1\":{\"314\":1,\"355\":3,\"357\":1,\"359\":6,\"361\":2,\"362\":1}}],[\"curveanimation\",{\"1\":{\"305\":1,\"307\":1,\"361\":1}}],[\"curvedanimation\",{\"1\":{\"302\":2,\"305\":1,\"317\":1,\"348\":1,\"355\":1}}],[\"curves\",{\"1\":{\"302\":1,\"319\":2,\"324\":1,\"348\":2,\"360\":1,\"362\":1}}],[\"curve\",{\"0\":{\"355\":1,\"360\":1},\"1\":{\"300\":1,\"302\":8,\"305\":4,\"309\":1,\"312\":1,\"314\":2,\"317\":1,\"319\":4,\"324\":3,\"325\":1,\"327\":1,\"329\":1,\"336\":1,\"348\":1,\"355\":4,\"359\":11,\"360\":13,\"361\":1,\"362\":1}}],[\"currentisolategroupdata\",{\"1\":{\"752\":1}}],[\"currentisolate是static\",{\"1\":{\"747\":1}}],[\"currentisolate\",{\"1\":{\"747\":2,\"752\":1}}],[\"currentcoroutinecontext\",{\"1\":{\"657\":1}}],[\"currentdrag\",{\"1\":{\"417\":2,\"418\":2}}],[\"currentlayer\",{\"1\":{\"334\":3}}],[\"currently\",{\"1\":{\"225\":1,\"226\":1,\"238\":1,\"243\":1,\"412\":1,\"417\":1}}],[\"current\",{\"1\":{\"224\":3,\"225\":1,\"232\":1,\"233\":8,\"241\":1,\"243\":1,\"247\":5,\"248\":3,\"296\":1,\"302\":1,\"308\":1,\"316\":2,\"496\":1,\"579\":1,\"584\":1,\"731\":2,\"742\":7,\"745\":1,\"747\":4,\"748\":2,\"751\":4,\"752\":2,\"753\":4,\"754\":1,\"756\":1,\"757\":3,\"758\":1,\"759\":4,\"761\":3,\"836\":30,\"848\":3}}],[\"currentzone\",{\"1\":{\"224\":6,\"232\":4}}],[\"currentactivitythread\",{\"1\":{\"179\":4}}],[\"currentsize\",{\"1\":{\"87\":1}}],[\"currenttween\",{\"1\":{\"308\":9}}],[\"currenttimems\",{\"1\":{\"241\":3}}],[\"currenttimemillis\",{\"1\":{\"19\":1,\"560\":2,\"587\":1,\"631\":2}}],[\"currentthread\",{\"1\":{\"48\":1,\"179\":1,\"487\":4,\"527\":4,\"625\":1}}],[\"curry\",{\"1\":{\"75\":1}}],[\"currx\",{\"1\":{\"75\":1}}],[\"cursor\",{\"1\":{\"6\":5}}],[\"c++\",{\"1\":{\"140\":1}}],[\"c\",{\"1\":{\"140\":1,\"153\":2,\"193\":3,\"485\":8,\"602\":1,\"612\":1,\"659\":2,\"670\":1,\"694\":2,\"695\":3,\"702\":1,\"728\":5,\"896\":1}}],[\"cchildnode\",{\"1\":{\"836\":10}}],[\"cc中\",{\"1\":{\"740\":1}}],[\"cc\",{\"1\":{\"138\":2,\"228\":1,\"237\":2,\"246\":1,\"247\":13,\"248\":2,\"528\":1,\"745\":1,\"747\":2,\"749\":1,\"750\":1,\"751\":2,\"752\":4,\"753\":4,\"754\":1,\"757\":2,\"758\":1,\"759\":6,\"760\":1,\"761\":4}}],[\"craw\",{\"1\":{\"731\":2,\"737\":2}}],[\"crash\",{\"1\":{\"244\":1,\"400\":1}}],[\"crossinline\",{\"1\":{\"621\":3}}],[\"cross\",{\"1\":{\"302\":1,\"424\":2}}],[\"creation\",{\"1\":{\"247\":1,\"753\":1,\"759\":1}}],[\"creating\",{\"1\":{\"123\":1,\"492\":1,\"495\":1,\"822\":1}}],[\"creator<aparcelable>\",{\"1\":{\"594\":1}}],[\"creator<book>\",{\"1\":{\"594\":2}}],[\"creator\",{\"1\":{\"138\":1,\"594\":2}}],[\"createandsetupserviceisolate\",{\"1\":{\"757\":1}}],[\"createandsetupdartdevisolate\",{\"1\":{\"757\":1}}],[\"createandsetupkernelisolate\",{\"1\":{\"757\":1}}],[\"creategroupcallback\",{\"0\":{\"757\":1},\"1\":{\"756\":2}}],[\"createwithinexistingisolategroup\",{\"0\":{\"753\":1},\"1\":{\"751\":2,\"753\":1}}],[\"createfromparcel\",{\"1\":{\"594\":1}}],[\"createfile\",{\"1\":{\"243\":1}}],[\"createmap\",{\"1\":{\"527\":3}}],[\"creatematerialherocontroller\",{\"1\":{\"349\":2}}],[\"createballisticsimulation\",{\"1\":{\"417\":3}}],[\"createballisticscrollactivity\",{\"1\":{\"417\":3}}],[\"createisolategroup的过程\",{\"1\":{\"758\":1}}],[\"createisolategroup\",{\"0\":{\"758\":1},\"1\":{\"757\":2,\"758\":1}}],[\"createisolategroupfromkernel\",{\"1\":{\"757\":1}}],[\"createisolategroupandsetuphelper按照是\",{\"1\":{\"757\":1}}],[\"createisolategroupandsetuphelper\",{\"1\":{\"757\":4}}],[\"createisolategroupandsetup\",{\"1\":{\"752\":1,\"757\":1}}],[\"createisolate创建了isolate\",{\"1\":{\"753\":1}}],[\"createisolate\",{\"1\":{\"751\":1,\"753\":5,\"758\":1}}],[\"createinnerballisticscrollactivity\",{\"1\":{\"417\":2}}],[\"createimage\",{\"1\":{\"396\":2}}],[\"createimageinfo\",{\"1\":{\"394\":1,\"395\":1,\"396\":1,\"397\":1,\"398\":1}}],[\"createouterballisticscrollactivity\",{\"1\":{\"417\":2}}],[\"createosthread\",{\"1\":{\"247\":3}}],[\"createlocalimageconfiguration\",{\"1\":{\"365\":1,\"367\":1}}],[\"createlink\",{\"1\":{\"247\":1}}],[\"createherorecttween\",{\"1\":{\"348\":1,\"352\":1}}],[\"createrecttween\",{\"1\":{\"344\":1,\"346\":1,\"348\":6,\"349\":4,\"351\":2}}],[\"createrenderobject\",{\"1\":{\"255\":2,\"256\":1,\"259\":1,\"265\":3,\"331\":1,\"424\":2,\"437\":1}}],[\"createcurve\",{\"1\":{\"302\":2,\"305\":1}}],[\"createelement和\",{\"1\":{\"264\":1}}],[\"createelement方法创建\",{\"1\":{\"259\":1}}],[\"createelement\",{\"1\":{\"255\":1,\"256\":1,\"259\":1,\"262\":1,\"264\":1,\"424\":1}}],[\"createviewconfiguration\",{\"1\":{\"253\":1}}],[\"createpackagecontext\",{\"1\":{\"818\":1}}],[\"createport中\",{\"1\":{\"748\":1}}],[\"createport的实现\",{\"1\":{\"247\":1}}],[\"createport\",{\"1\":{\"247\":2,\"753\":1}}],[\"createperiodictimer\",{\"1\":{\"233\":2,\"234\":5}}],[\"createticker\",{\"1\":{\"319\":1}}],[\"createtimerhandler\",{\"1\":{\"235\":4,\"236\":1,\"237\":1}}],[\"createtimer方法\",{\"1\":{\"234\":1}}],[\"createtimer\",{\"1\":{\"233\":2,\"234\":8}}],[\"createtemp\",{\"1\":{\"247\":1}}],[\"createtypedarraylist\",{\"1\":{\"138\":1}}],[\"createscrollposition\",{\"1\":{\"407\":1,\"415\":1}}],[\"createstate\",{\"1\":{\"273\":3,\"276\":1,\"282\":1,\"302\":2,\"392\":1,\"393\":1,\"405\":1}}],[\"creates\",{\"1\":{\"193\":1,\"234\":2,\"247\":1,\"253\":1,\"255\":1,\"259\":1,\"276\":1,\"278\":1,\"311\":1,\"359\":1,\"417\":1,\"430\":2,\"748\":3,\"757\":2}}],[\"created\",{\"1\":{\"48\":1,\"62\":1,\"63\":1,\"183\":1,\"222\":2,\"223\":3,\"234\":1,\"253\":1,\"662\":1,\"753\":1,\"757\":6,\"767\":1,\"822\":1}}],[\"create\",{\"0\":{\"450\":1},\"1\":{\"35\":1,\"38\":2,\"39\":1,\"62\":1,\"138\":2,\"173\":2,\"202\":1,\"214\":1,\"235\":1,\"243\":2,\"244\":1,\"247\":5,\"383\":2,\"396\":2,\"398\":2,\"424\":1,\"594\":1,\"748\":1,\"751\":1,\"752\":1,\"753\":4,\"756\":4,\"757\":1,\"759\":1,\"822\":1}}],[\"cr8resume\",{\"1\":{\"123\":1}}],[\"cbc\",{\"1\":{\"557\":1}}],[\"cb\",{\"1\":{\"63\":3,\"247\":6}}],[\"cfg\",{\"1\":{\"767\":2}}],[\"cfe\",{\"1\":{\"757\":4,\"763\":1,\"765\":5}}],[\"cfm\",{\"1\":{\"517\":2}}],[\"cf\",{\"1\":{\"35\":1,\"60\":2,\"62\":9,\"63\":4,\"70\":1,\"71\":10,\"77\":1,\"105\":2,\"116\":1,\"118\":1,\"141\":1,\"553\":2,\"816\":2,\"818\":1,\"823\":1}}],[\"c1575636741ehttps\",{\"1\":{\"33\":1}}],[\"centerkey\",{\"1\":{\"880\":3}}],[\"centerindex\",{\"1\":{\"880\":5}}],[\"center等都是\",{\"1\":{\"278\":1}}],[\"center是在创建\",{\"1\":{\"260\":1}}],[\"centerslice\",{\"1\":{\"370\":2}}],[\"centers\",{\"1\":{\"259\":1}}],[\"centerwidget\",{\"1\":{\"256\":1}}],[\"centery\",{\"1\":{\"153\":1}}],[\"centery等\",{\"1\":{\"153\":1}}],[\"centerx\",{\"1\":{\"153\":1}}],[\"center\",{\"0\":{\"259\":1,\"444\":1},\"1\":{\"33\":5,\"138\":1,\"153\":1,\"167\":1,\"251\":13,\"255\":1,\"256\":2,\"259\":19,\"260\":1,\"261\":2,\"262\":7,\"263\":4,\"264\":2,\"265\":2,\"266\":1,\"276\":1,\"284\":1,\"310\":1,\"330\":1,\"342\":2,\"403\":1,\"417\":1,\"424\":2,\"427\":7,\"434\":1,\"444\":2,\"445\":2}}],[\"cls=clear\",{\"1\":{\"698\":1}}],[\"cls\",{\"1\":{\"696\":1}}],[\"cl\",{\"1\":{\"591\":1}}],[\"clazza>则会被擦除为clazza\",{\"1\":{\"536\":1}}],[\"clazz\",{\"1\":{\"486\":3,\"487\":3,\"553\":4,\"554\":2,\"569\":4,\"586\":3,\"587\":4,\"619\":2,\"819\":2}}],[\"clampeddelta\",{\"1\":{\"412\":3,\"418\":1}}],[\"clampingscrollphysics\",{\"1\":{\"405\":3}}],[\"clamp\",{\"1\":{\"146\":1,\"307\":1,\"320\":1,\"321\":1,\"324\":1,\"412\":1}}],[\"classb\",{\"1\":{\"619\":3}}],[\"classa\",{\"1\":{\"619\":1}}],[\"classdesc\",{\"1\":{\"583\":1}}],[\"class打包为sizeof\",{\"1\":{\"517\":1}}],[\"classformaterror\",{\"1\":{\"486\":1}}],[\"classfile\",{\"1\":{\"486\":2}}],[\"classnotfoundexception\",{\"1\":{\"485\":3,\"584\":2,\"586\":1,\"587\":1,\"590\":1,\"710\":1}}],[\"classname\",{\"1\":{\"39\":1,\"485\":3,\"612\":2,\"619\":1}}],[\"classpath\",{\"1\":{\"484\":1,\"486\":2}}],[\"classloader\",{\"0\":{\"483\":1,\"486\":1,\"822\":1},\"1\":{\"483\":1,\"484\":3,\"485\":9,\"486\":2,\"487\":2,\"492\":2,\"593\":1,\"612\":1,\"814\":2,\"819\":3,\"822\":1}}],[\"classkey\",{\"1\":{\"213\":1}}],[\"class<\",{\"1\":{\"179\":1,\"485\":2,\"486\":1,\"553\":1,\"569\":1}}],[\"classes\",{\"1\":{\"30\":1,\"126\":1,\"494\":1,\"496\":1,\"519\":1,\"552\":1,\"615\":2,\"740\":1,\"771\":1}}],[\"class\",{\"0\":{\"615\":1},\"1\":{\"30\":7,\"35\":2,\"38\":4,\"39\":4,\"62\":2,\"63\":1,\"71\":3,\"83\":3,\"86\":1,\"105\":1,\"117\":1,\"122\":1,\"123\":4,\"125\":1,\"126\":6,\"138\":3,\"178\":2,\"179\":12,\"183\":1,\"189\":3,\"193\":3,\"195\":1,\"196\":1,\"199\":3,\"201\":2,\"203\":6,\"204\":1,\"205\":2,\"211\":2,\"212\":1,\"213\":6,\"214\":1,\"215\":2,\"224\":1,\"226\":1,\"227\":2,\"229\":1,\"232\":1,\"234\":3,\"235\":1,\"237\":2,\"243\":5,\"244\":3,\"247\":1,\"253\":2,\"255\":1,\"256\":3,\"259\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":5,\"273\":9,\"276\":3,\"279\":1,\"281\":1,\"282\":2,\"284\":1,\"295\":1,\"302\":2,\"307\":2,\"308\":1,\"309\":1,\"310\":2,\"311\":1,\"316\":1,\"317\":1,\"318\":1,\"323\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"342\":1,\"346\":1,\"348\":1,\"349\":2,\"352\":1,\"354\":2,\"357\":2,\"358\":2,\"359\":1,\"360\":3,\"374\":1,\"375\":1,\"377\":1,\"380\":1,\"383\":2,\"391\":1,\"392\":2,\"393\":2,\"396\":2,\"397\":1,\"398\":8,\"399\":2,\"405\":2,\"409\":2,\"416\":1,\"423\":1,\"424\":2,\"425\":1,\"426\":1,\"427\":1,\"428\":1,\"430\":1,\"436\":1,\"437\":1,\"438\":1,\"467\":1,\"484\":2,\"485\":4,\"486\":5,\"487\":2,\"490\":1,\"492\":5,\"493\":4,\"494\":3,\"495\":1,\"497\":2,\"498\":1,\"511\":3,\"513\":7,\"514\":1,\"516\":3,\"517\":5,\"519\":1,\"521\":3,\"523\":3,\"528\":1,\"535\":1,\"538\":1,\"539\":3,\"545\":1,\"546\":2,\"547\":1,\"548\":1,\"549\":2,\"553\":4,\"554\":3,\"565\":4,\"568\":1,\"569\":2,\"583\":2,\"584\":1,\"586\":3,\"587\":4,\"590\":1,\"594\":3,\"602\":1,\"603\":1,\"612\":6,\"614\":1,\"615\":7,\"616\":1,\"619\":8,\"626\":2,\"662\":1,\"666\":1,\"710\":2,\"728\":3,\"731\":1,\"737\":6,\"750\":1,\"753\":1,\"756\":1,\"759\":2,\"761\":3,\"785\":2,\"819\":1,\"823\":3,\"833\":1}}],[\"clearoobqueue\",{\"1\":{\"761\":1}}],[\"clear\",{\"1\":{\"132\":1,\"696\":1,\"761\":1}}],[\"cleaned\",{\"1\":{\"745\":1}}],[\"cleanupvalue\",{\"1\":{\"231\":2}}],[\"cleanup\",{\"1\":{\"231\":7,\"752\":2}}],[\"cleancoder\",{\"1\":{\"128\":1}}],[\"cleanarchitecture\",{\"1\":{\"126\":1,\"128\":1}}],[\"clean\",{\"0\":{\"126\":1},\"1\":{\"121\":2,\"126\":7,\"127\":1,\"128\":6,\"264\":1,\"517\":2,\"560\":1,\"794\":2}}],[\"cloned\",{\"1\":{\"753\":4}}],[\"clonearray\",{\"1\":{\"583\":1}}],[\"cloneable\",{\"1\":{\"86\":1,\"523\":2}}],[\"clone\",{\"1\":{\"370\":1,\"371\":1,\"377\":1,\"396\":2,\"673\":2,\"753\":1,\"794\":1,\"813\":1}}],[\"cloneresult\",{\"1\":{\"232\":1}}],[\"closure\",{\"1\":{\"227\":8,\"228\":5,\"231\":1,\"749\":2,\"759\":6}}],[\"closefile\",{\"1\":{\"752\":1}}],[\"closeport\",{\"1\":{\"247\":1}}],[\"closed\",{\"1\":{\"243\":4}}],[\"close\",{\"1\":{\"146\":1,\"237\":2,\"243\":1,\"247\":1,\"374\":1,\"395\":1,\"636\":1,\"712\":1,\"742\":1,\"748\":3,\"752\":1}}],[\"closing\",{\"1\":{\"25\":1}}],[\"cli\",{\"1\":{\"805\":1}}],[\"clinit\",{\"1\":{\"497\":6,\"498\":1}}],[\"clipbehavior\",{\"1\":{\"405\":2,\"424\":4,\"436\":2,\"437\":4,\"438\":1,\"440\":3}}],[\"clipoval\",{\"1\":{\"342\":5,\"343\":8}}],[\"clippath\",{\"1\":{\"334\":1}}],[\"cliprrect\",{\"1\":{\"334\":1}}],[\"cliprectlayer\",{\"1\":{\"440\":3}}],[\"cliprectsize\",{\"1\":{\"342\":3,\"343\":3}}],[\"cliprect\",{\"1\":{\"333\":1,\"334\":1,\"342\":5,\"343\":7,\"392\":1}}],[\"clip\",{\"1\":{\"334\":1,\"440\":1}}],[\"clipcontext\",{\"1\":{\"334\":1}}],[\"clicklistener等\",{\"1\":{\"781\":1}}],[\"clicklistener\",{\"1\":{\"662\":3}}],[\"click\",{\"1\":{\"118\":1}}],[\"clickable\",{\"1\":{\"27\":5}}],[\"clients\",{\"1\":{\"247\":1}}],[\"clientmodule\",{\"1\":{\"203\":4,\"205\":2}}],[\"client和service通过clientcomponent联系在一起\",{\"1\":{\"202\":1}}],[\"clientcomponent\",{\"1\":{\"202\":1,\"203\":1,\"205\":1}}],[\"client类的代码只需要这样写成类似下面这样\",{\"1\":{\"199\":1}}],[\"client\",{\"1\":{\"39\":2,\"57\":1,\"71\":2,\"83\":2,\"138\":12,\"199\":3,\"201\":1,\"202\":2,\"203\":2,\"205\":2,\"241\":1}}],[\"chrome\",{\"1\":{\"731\":1}}],[\"chmod\",{\"0\":{\"689\":1},\"1\":{\"689\":2}}],[\"chenguolinhttp\",{\"1\":{\"675\":1}}],[\"chenguolin\",{\"1\":{\"673\":1}}],[\"checkdown\",{\"1\":{\"859\":1}}],[\"checkup\",{\"1\":{\"858\":1}}],[\"checkfunctionfingerprints\",{\"1\":{\"753\":1}}],[\"checked\",{\"1\":{\"748\":4,\"754\":3}}],[\"checked=\",{\"1\":{\"124\":1}}],[\"checkout\",{\"1\":{\"674\":1}}],[\"checkresolve\",{\"1\":{\"583\":1}}],[\"checkavailable\",{\"1\":{\"243\":1}}],[\"checknotnull\",{\"1\":{\"243\":2}}],[\"checkstatuschanged\",{\"1\":{\"320\":1,\"321\":1}}],[\"checks\",{\"1\":{\"232\":1}}],[\"checkselfpermission\",{\"1\":{\"173\":1}}],[\"checkcameradeviceandpremissions\",{\"1\":{\"173\":3}}],[\"check\",{\"1\":{\"26\":2,\"248\":1,\"332\":2,\"376\":1,\"395\":1,\"413\":1,\"448\":1,\"633\":1,\"656\":2,\"748\":1,\"751\":1,\"753\":2,\"757\":1,\"759\":1,\"761\":1}}],[\"china\",{\"1\":{\"612\":2}}],[\"childtype\",{\"1\":{\"426\":3}}],[\"child的赋值过程\",{\"1\":{\"263\":1}}],[\"child是一个\",{\"1\":{\"263\":1}}],[\"child并不是我们预期的text\",{\"1\":{\"261\":1}}],[\"children\",{\"0\":{\"426\":1,\"444\":1,\"445\":1},\"1\":{\"161\":1,\"264\":1,\"265\":8,\"273\":2,\"276\":3,\"302\":1,\"403\":2,\"425\":3,\"427\":1,\"428\":2,\"431\":1,\"434\":1,\"444\":9,\"445\":5}}],[\"childrencount\",{\"1\":{\"26\":1}}],[\"childheight\",{\"1\":{\"153\":6}}],[\"child\",{\"0\":{\"759\":1},\"1\":{\"26\":9,\"110\":1,\"112\":12,\"153\":1,\"251\":2,\"254\":2,\"255\":2,\"256\":8,\"258\":1,\"259\":10,\"261\":3,\"262\":4,\"263\":12,\"264\":5,\"265\":4,\"270\":9,\"271\":5,\"273\":19,\"276\":30,\"277\":4,\"284\":1,\"289\":2,\"295\":4,\"307\":2,\"308\":4,\"310\":4,\"311\":9,\"316\":2,\"327\":1,\"331\":4,\"332\":2,\"335\":3,\"340\":10,\"341\":9,\"342\":10,\"343\":2,\"344\":2,\"346\":1,\"347\":9,\"349\":2,\"351\":2,\"352\":9,\"353\":1,\"370\":1,\"392\":4,\"403\":5,\"405\":7,\"423\":2,\"426\":15,\"434\":4,\"436\":6,\"438\":3,\"439\":21,\"440\":18,\"441\":3,\"442\":2,\"444\":9,\"445\":17,\"446\":3,\"728\":5,\"751\":3,\"752\":2,\"753\":4,\"759\":5,\"811\":2}}],[\"chunkevents\",{\"1\":{\"374\":4,\"383\":9,\"395\":1}}],[\"chunks\",{\"1\":{\"243\":1}}],[\"choose\",{\"1\":{\"205\":1}}],[\"chooseid\",{\"1\":{\"153\":5}}],[\"chapter\",{\"1\":{\"498\":2}}],[\"charsets\",{\"1\":{\"484\":1}}],[\"chart\",{\"1\":{\"270\":1,\"271\":1}}],[\"char\",{\"1\":{\"247\":5,\"519\":2,\"568\":1,\"750\":1,\"751\":4,\"752\":7,\"753\":4,\"754\":4,\"756\":3,\"757\":9,\"758\":4,\"759\":5,\"890\":4}}],[\"character\",{\"1\":{\"243\":5,\"519\":1}}],[\"chacknetwork\",{\"1\":{\"186\":1}}],[\"chang\",{\"1\":{\"586\":1}}],[\"changenotifier\",{\"1\":{\"309\":2}}],[\"changes\",{\"1\":{\"302\":1,\"311\":1,\"332\":2,\"350\":1,\"418\":1,\"496\":1}}],[\"changestatebuttonstate\",{\"1\":{\"273\":4}}],[\"changestatebutton\",{\"1\":{\"273\":2}}],[\"change\",{\"1\":{\"273\":1,\"302\":1,\"408\":1,\"586\":2,\"662\":1}}],[\"changed\",{\"1\":{\"26\":2,\"87\":1,\"310\":1,\"383\":1,\"761\":1}}],[\"chance\",{\"1\":{\"231\":1,\"238\":1,\"395\":2,\"560\":1}}],[\"channel=flutterly\",{\"1\":{\"740\":2}}],[\"channel<int>\",{\"1\":{\"638\":1}}],[\"channels\",{\"1\":{\"638\":1}}],[\"channel\",{\"0\":{\"636\":1,\"637\":1},\"1\":{\"104\":3,\"284\":2,\"286\":2,\"292\":1,\"398\":4,\"636\":5,\"637\":1,\"638\":2,\"645\":1}}],[\"chainsource\",{\"1\":{\"232\":1}}],[\"chaining\",{\"1\":{\"232\":1}}],[\"chainedevaluation\",{\"1\":{\"357\":3}}],[\"chainedevaluation<t>\",{\"1\":{\"357\":2}}],[\"chained\",{\"1\":{\"232\":1}}],[\"chain\",{\"1\":{\"92\":1,\"357\":2}}],[\"capability\",{\"1\":{\"744\":2,\"747\":8,\"753\":2,\"759\":12}}],[\"capabilities\",{\"1\":{\"742\":2,\"748\":6,\"759\":5}}],[\"capacity规定的长度\",{\"1\":{\"505\":1}}],[\"capacity\",{\"1\":{\"501\":1,\"506\":4,\"638\":1}}],[\"cat\",{\"1\":{\"685\":1}}],[\"catch来捕获\",{\"1\":{\"294\":1}}],[\"catch\",{\"0\":{\"633\":1},\"1\":{\"39\":1,\"62\":3,\"63\":2,\"83\":1,\"179\":2,\"193\":1,\"224\":1,\"229\":1,\"231\":2,\"243\":1,\"244\":1,\"256\":1,\"264\":2,\"294\":2,\"376\":1,\"383\":2,\"395\":1,\"485\":1,\"557\":1,\"569\":1,\"584\":3,\"586\":3,\"587\":5,\"632\":2,\"633\":1,\"634\":1,\"640\":1,\"656\":7,\"710\":1,\"712\":1,\"748\":2,\"890\":4}}],[\"cares\",{\"1\":{\"547\":1}}],[\"care\",{\"1\":{\"417\":1}}],[\"card\",{\"1\":{\"295\":1}}],[\"caching\",{\"1\":{\"375\":1,\"767\":2,\"772\":1}}],[\"cacheextent\",{\"1\":{\"424\":2,\"438\":2}}],[\"cacheflie\",{\"1\":{\"383\":6}}],[\"cachemaxage\",{\"1\":{\"383\":3}}],[\"cacherawdata\",{\"1\":{\"383\":1,\"384\":1}}],[\"cachekey\",{\"1\":{\"383\":2}}],[\"cacheimagefoldername\",{\"1\":{\"383\":1}}],[\"cacheimagesdirectory\",{\"1\":{\"383\":5}}],[\"cacheimages\",{\"1\":{\"376\":1}}],[\"cacheindex\",{\"1\":{\"159\":2}}],[\"cache保存\",{\"1\":{\"375\":1}}],[\"cacheheight\",{\"1\":{\"365\":2}}],[\"cachewidth\",{\"1\":{\"365\":2}}],[\"cachednetworkimage\",{\"1\":{\"376\":1}}],[\"cachedimage\",{\"1\":{\"376\":4}}],[\"cachedimagebase\",{\"1\":{\"375\":1}}],[\"cachedimage和\",{\"1\":{\"375\":1}}],[\"cachedimage>\",{\"1\":{\"375\":1}}],[\"cached\",{\"1\":{\"363\":1,\"376\":1,\"379\":1,\"384\":1,\"385\":1,\"387\":1,\"388\":1,\"500\":1}}],[\"cache\",{\"1\":{\"243\":1,\"375\":2,\"376\":16,\"383\":3,\"384\":1,\"385\":1,\"395\":4,\"455\":1,\"519\":1,\"767\":2,\"768\":1}}],[\"cause\",{\"1\":{\"494\":2,\"634\":3,\"761\":1}}],[\"caused\",{\"1\":{\"63\":1}}],[\"caught\",{\"1\":{\"231\":1,\"295\":1,\"633\":1,\"634\":1,\"656\":3}}],[\"came\",{\"1\":{\"231\":1}}],[\"cameraid\",{\"1\":{\"173\":2}}],[\"camera\",{\"1\":{\"6\":2,\"173\":9}}],[\"canonical\",{\"1\":{\"754\":4}}],[\"canonicalizeuri\",{\"1\":{\"754\":1}}],[\"canonicalize\",{\"1\":{\"754\":1}}],[\"canupdate\",{\"1\":{\"263\":1}}],[\"cannot\",{\"1\":{\"193\":2,\"243\":1,\"247\":3,\"285\":1,\"347\":1,\"412\":1,\"586\":2,\"587\":2,\"615\":1,\"756\":1,\"757\":2,\"759\":1}}],[\"canvas\",{\"0\":{\"334\":1},\"1\":{\"131\":5,\"146\":1,\"147\":1,\"148\":1,\"153\":11,\"161\":4,\"162\":6,\"330\":3,\"331\":2,\"332\":9,\"333\":7,\"334\":12,\"335\":1,\"337\":3,\"372\":1,\"398\":1}}],[\"can\",{\"1\":{\"126\":1,\"183\":2,\"193\":1,\"228\":1,\"229\":1,\"238\":1,\"243\":1,\"244\":1,\"262\":1,\"276\":1,\"285\":2,\"302\":1,\"351\":1,\"357\":1,\"360\":1,\"376\":1,\"402\":1,\"412\":3,\"417\":1,\"433\":1,\"448\":2,\"493\":1,\"523\":1,\"586\":1,\"615\":3,\"630\":1,\"636\":1,\"711\":1,\"728\":1,\"740\":3,\"745\":1,\"759\":1,\"761\":2,\"771\":1,\"822\":3}}],[\"cancellable\",{\"1\":{\"657\":1}}],[\"cancellationexception\",{\"1\":{\"640\":2}}],[\"cancellationtoken\",{\"1\":{\"383\":1}}],[\"cancelchildren\",{\"1\":{\"638\":2}}],[\"canceltoken\",{\"1\":{\"383\":1}}],[\"cancelwakeup\",{\"1\":{\"237\":2}}],[\"canceled\",{\"1\":{\"26\":2,\"238\":2,\"321\":1,\"322\":3,\"712\":1}}],[\"cancels\",{\"1\":{\"25\":1}}],[\"cancel\",{\"1\":{\"16\":1,\"21\":1,\"26\":1,\"230\":1,\"237\":1,\"238\":1,\"626\":1,\"630\":2,\"636\":3}}],[\"cas\",{\"1\":{\"607\":1}}],[\"castisolate\",{\"1\":{\"753\":1}}],[\"cast<dart\",{\"1\":{\"753\":2}}],[\"cast<isolategroupdata\",{\"1\":{\"752\":1}}],[\"cast<isolate\",{\"1\":{\"751\":1,\"756\":1}}],[\"cast<int64\",{\"1\":{\"247\":1}}],[\"cast<intptr\",{\"1\":{\"237\":1}}],[\"cast<worker\",{\"1\":{\"247\":1,\"761\":1}}],[\"cast<threadstartdata\",{\"1\":{\"247\":1}}],[\"cast<uword>\",{\"1\":{\"247\":2,\"759\":2}}],[\"cast<objectptr>\",{\"1\":{\"247\":1}}],[\"cast\",{\"1\":{\"71\":1,\"138\":1,\"759\":1}}],[\"cases\",{\"1\":{\"309\":1,\"767\":1}}],[\"case\",{\"1\":{\"26\":2,\"27\":1,\"63\":1,\"71\":2,\"92\":1,\"101\":6,\"117\":2,\"138\":2,\"159\":3,\"193\":4,\"247\":3,\"350\":2,\"352\":5,\"384\":1,\"398\":1,\"412\":1,\"418\":1,\"424\":4,\"439\":6,\"440\":4,\"566\":1,\"583\":1}}],[\"calculated\",{\"1\":{\"574\":1}}],[\"calculatepaintoffset\",{\"1\":{\"405\":1}}],[\"call的enqueue\",{\"1\":{\"712\":1}}],[\"call的封装类requestcall\",{\"1\":{\"711\":1}}],[\"call类的进一步封装\",{\"1\":{\"712\":1}}],[\"callsites\",{\"1\":{\"768\":1}}],[\"calls\",{\"0\":{\"772\":1},\"1\":{\"376\":1,\"395\":1,\"629\":1,\"767\":1,\"772\":1}}],[\"calling\",{\"1\":{\"243\":1,\"244\":1,\"264\":1,\"285\":1,\"384\":1}}],[\"caller\",{\"1\":{\"247\":1}}],[\"callers\",{\"1\":{\"231\":1,\"761\":1}}],[\"called\",{\"1\":{\"225\":2,\"229\":1,\"232\":3,\"253\":1,\"302\":1,\"308\":1,\"311\":1,\"332\":2,\"351\":1,\"376\":1,\"560\":1,\"763\":2}}],[\"callable\",{\"1\":{\"193\":7}}],[\"callable<v>\",{\"1\":{\"193\":2}}],[\"call\",{\"1\":{\"71\":1,\"138\":1,\"192\":1,\"193\":3,\"224\":1,\"227\":2,\"228\":1,\"229\":2,\"231\":3,\"232\":1,\"234\":1,\"237\":2,\"247\":5,\"273\":1,\"285\":1,\"296\":1,\"348\":1,\"351\":2,\"398\":7,\"408\":1,\"708\":5,\"712\":10,\"748\":2,\"749\":1,\"753\":1,\"754\":1,\"757\":1,\"761\":1,\"772\":1}}],[\"callback的基础上增加了\",{\"1\":{\"711\":1}}],[\"callback是在okhttp3\",{\"1\":{\"711\":1}}],[\"callbackdata\",{\"1\":{\"247\":1,\"759\":1,\"761\":1}}],[\"callbacks\",{\"1\":{\"229\":1,\"232\":1,\"237\":1,\"238\":1,\"243\":1,\"244\":1}}],[\"callbacklooper\",{\"1\":{\"193\":8}}],[\"callbacklist\",{\"1\":{\"63\":9}}],[\"callback>\",{\"1\":{\"63\":2}}],[\"callback\",{\"1\":{\"52\":1,\"53\":2,\"54\":2,\"56\":1,\"62\":8,\"63\":14,\"176\":1,\"179\":6,\"224\":5,\"225\":4,\"226\":4,\"227\":3,\"228\":4,\"229\":3,\"231\":2,\"232\":2,\"233\":10,\"234\":20,\"238\":8,\"247\":12,\"248\":1,\"270\":1,\"351\":1,\"352\":1,\"707\":1,\"708\":3,\"711\":6,\"712\":21,\"751\":6,\"752\":2,\"753\":1,\"756\":6,\"757\":5,\"759\":11,\"761\":21}}],[\"calendar\",{\"1\":{\"13\":1,\"19\":7,\"573\":1,\"574\":1,\"575\":1,\"576\":9,\"577\":2}}],[\"cnblogs\",{\"1\":{\"77\":1,\"137\":1,\"138\":2,\"139\":1,\"142\":1,\"243\":1,\"904\":1}}],[\"cn\",{\"1\":{\"7\":1,\"83\":2,\"121\":1,\"126\":1,\"128\":1,\"137\":2,\"139\":2,\"206\":1,\"313\":1,\"328\":1,\"342\":1,\"344\":1,\"522\":1,\"523\":1,\"524\":1,\"538\":1,\"584\":1,\"587\":1,\"594\":1,\"811\":1}}],[\"covertinfixtopostfix\",{\"1\":{\"890\":1}}],[\"covariant\",{\"1\":{\"273\":1,\"330\":1,\"333\":3}}],[\"coding\",{\"1\":{\"722\":1}}],[\"code和普通的snapshot基本一致\",{\"1\":{\"769\":1}}],[\"code主要分为\",{\"1\":{\"767\":1}}],[\"code运行\",{\"1\":{\"766\":1}}],[\"code并运行\",{\"1\":{\"766\":1}}],[\"codec>\",{\"1\":{\"383\":2}}],[\"codec>和\",{\"1\":{\"374\":1}}],[\"codec\",{\"1\":{\"374\":4,\"383\":2}}],[\"code>\",{\"1\":{\"247\":1}}],[\"code\",{\"0\":{\"767\":1,\"768\":1},\"1\":{\"71\":3,\"92\":1,\"138\":3,\"221\":1,\"455\":1,\"490\":1,\"495\":1,\"496\":4,\"519\":1,\"523\":1,\"583\":1,\"629\":3,\"712\":2,\"740\":2,\"742\":2,\"748\":2,\"749\":2,\"752\":1,\"753\":13,\"754\":2,\"757\":9,\"759\":4,\"763\":3,\"767\":2,\"768\":3,\"769\":5,\"770\":1,\"771\":5,\"818\":1}}],[\"codes\",{\"1\":{\"6\":2}}],[\"cobjectsendport\",{\"1\":{\"247\":1}}],[\"cobjectint32\",{\"1\":{\"247\":2}}],[\"cobjectarray\",{\"1\":{\"247\":3}}],[\"cobject\",{\"1\":{\"247\":7}}],[\"co\",{\"1\":{\"241\":1}}],[\"coroutineexceptionhandler\",{\"1\":{\"640\":2}}],[\"coroutinecontext\",{\"1\":{\"638\":2,\"641\":1}}],[\"coroutine\",{\"1\":{\"629\":2,\"636\":3}}],[\"coroutinescope\",{\"1\":{\"623\":1,\"626\":3,\"636\":1,\"638\":2,\"641\":1,\"643\":2,\"645\":1,\"646\":1}}],[\"coroutines\",{\"0\":{\"622\":1},\"1\":{\"622\":2,\"625\":1,\"627\":1,\"629\":1,\"638\":2}}],[\"correct\",{\"1\":{\"494\":1}}],[\"corresponding\",{\"1\":{\"231\":1,\"369\":1}}],[\"core\",{\"1\":{\"6\":1,\"7\":1,\"26\":1,\"83\":1,\"193\":1,\"622\":1,\"752\":1,\"757\":1,\"763\":1}}],[\"copyright\",{\"1\":{\"784\":1}}],[\"copyargument\",{\"1\":{\"753\":1}}],[\"copyarray\",{\"1\":{\"617\":2}}],[\"copyofrange\",{\"1\":{\"666\":4,\"880\":2,\"913\":2}}],[\"copywith\",{\"1\":{\"405\":1}}],[\"copy\",{\"1\":{\"138\":1,\"232\":1,\"243\":1,\"247\":2,\"749\":1,\"754\":1,\"756\":1,\"757\":1}}],[\"copied\",{\"1\":{\"92\":1,\"523\":1}}],[\"counters\",{\"1\":{\"767\":1,\"768\":2}}],[\"counter++\",{\"1\":{\"645\":1}}],[\"counteractor\",{\"1\":{\"645\":1}}],[\"counter\",{\"1\":{\"645\":7,\"767\":1}}],[\"counterparts\",{\"1\":{\"552\":1}}],[\"country\",{\"1\":{\"612\":4}}],[\"count\",{\"0\":{\"462\":1},\"1\":{\"173\":7,\"247\":4,\"276\":3,\"612\":1,\"760\":4}}],[\"couple\",{\"1\":{\"123\":1}}],[\"could\",{\"1\":{\"63\":1,\"247\":1,\"753\":1,\"759\":1,\"771\":2}}],[\"coordinator\",{\"0\":{\"408\":1},\"1\":{\"405\":12,\"407\":3,\"408\":2,\"409\":2,\"415\":1}}],[\"coordinatorlayout>\",{\"1\":{\"111\":2}}],[\"coordinatorlayout\",{\"1\":{\"108\":1,\"110\":3,\"111\":1,\"112\":9,\"113\":4}}],[\"coordinate\",{\"1\":{\"33\":2}}],[\"cookie\",{\"1\":{\"63\":2,\"713\":1}}],[\"column\",{\"0\":{\"444\":1,\"445\":1},\"1\":{\"273\":2,\"275\":1,\"276\":3,\"288\":1,\"434\":3,\"439\":1,\"444\":10,\"445\":10}}],[\"columnindex\",{\"1\":{\"6\":3}}],[\"collect后的代码只有在\",{\"1\":{\"635\":1}}],[\"collected\",{\"1\":{\"630\":2,\"633\":1,\"656\":2}}],[\"collecting\",{\"1\":{\"630\":4}}],[\"collection\",{\"1\":{\"763\":2}}],[\"collections\",{\"1\":{\"538\":2}}],[\"collection<v>\",{\"1\":{\"523\":1}}],[\"collectlatest\",{\"1\":{\"630\":1,\"631\":1,\"652\":1}}],[\"collectlatest可以保证每次都获取最新的值\",{\"1\":{\"630\":1}}],[\"collector\",{\"1\":{\"630\":3}}],[\"collect\",{\"0\":{\"633\":1,\"635\":1},\"1\":{\"629\":8,\"630\":5,\"631\":6,\"633\":1,\"634\":2,\"635\":1,\"652\":1,\"656\":3,\"658\":3,\"731\":1,\"737\":2}}],[\"collects\",{\"1\":{\"231\":1}}],[\"collapsemode\",{\"1\":{\"111\":1}}],[\"collapsemode=\",{\"1\":{\"111\":2}}],[\"collapsingtoolbarlayout>\",{\"1\":{\"111\":1}}],[\"collapsingtoolbarlayout\",{\"1\":{\"108\":1,\"110\":1,\"111\":3}}],[\"colorblendmode\",{\"1\":{\"370\":2}}],[\"colortween\",{\"1\":{\"358\":3}}],[\"colorfilter\",{\"1\":{\"334\":1}}],[\"colorfulcontainerstate\",{\"1\":{\"273\":1}}],[\"colorfulcontainer\",{\"1\":{\"273\":9}}],[\"colors\",{\"1\":{\"273\":3,\"276\":6,\"279\":1,\"295\":2,\"330\":1,\"342\":1}}],[\"color=auto\",{\"1\":{\"702\":1}}],[\"color=\",{\"1\":{\"167\":1}}],[\"colorprimarydark\",{\"1\":{\"116\":1,\"118\":1}}],[\"color\",{\"1\":{\"33\":1,\"116\":2,\"118\":1,\"146\":2,\"153\":1,\"167\":1,\"273\":43,\"276\":6,\"295\":2,\"330\":1,\"342\":1,\"358\":6,\"370\":2,\"444\":4,\"445\":4}}],[\"conan\",{\"1\":{\"813\":1}}],[\"concern\",{\"1\":{\"584\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"500\":1}}],[\"concurrently\",{\"1\":{\"247\":2,\"629\":1}}],[\"concrete\",{\"1\":{\"496\":1}}],[\"converts\",{\"1\":{\"486\":1}}],[\"conflation\",{\"1\":{\"630\":1}}],[\"conflate\",{\"0\":{\"630\":1},\"1\":{\"630\":1,\"659\":1}}],[\"confusion\",{\"1\":{\"274\":1}}],[\"config=\",{\"1\":{\"752\":1}}],[\"configured\",{\"1\":{\"418\":1}}],[\"configuration\",{\"1\":{\"196\":3,\"253\":1,\"374\":2,\"384\":1,\"413\":1,\"823\":1}}],[\"configtask\",{\"1\":{\"398\":1}}],[\"configrequestswitharguments\",{\"1\":{\"398\":3}}],[\"configwithtextureregistry\",{\"1\":{\"398\":1}}],[\"config\",{\"1\":{\"30\":4,\"670\":2,\"730\":1,\"731\":3,\"748\":1,\"749\":1,\"754\":2,\"756\":1,\"757\":9,\"794\":2,\"807\":1,\"808\":2,\"811\":1}}],[\"conditions\",{\"1\":{\"126\":1}}],[\"consider\",{\"1\":{\"761\":1}}],[\"consists\",{\"1\":{\"497\":1}}],[\"consumeeach\",{\"1\":{\"636\":1}}],[\"consumer\",{\"1\":{\"241\":1}}],[\"consumed\",{\"1\":{\"112\":2,\"238\":1}}],[\"constant\",{\"1\":{\"496\":1,\"519\":1,\"615\":1,\"827\":3}}],[\"constrainedbox\",{\"1\":{\"444\":3,\"445\":1}}],[\"constrain\",{\"1\":{\"439\":1}}],[\"constraints\",{\"1\":{\"405\":10,\"439\":8,\"444\":1,\"445\":1,\"787\":1}}],[\"constructtweens\",{\"0\":{\"304\":1},\"1\":{\"303\":1,\"304\":3,\"305\":1}}],[\"constructors\",{\"1\":{\"262\":1,\"360\":1,\"552\":2}}],[\"constructor\",{\"1\":{\"193\":1,\"196\":1,\"201\":1,\"203\":2,\"262\":2,\"304\":2,\"305\":1,\"308\":1,\"360\":1,\"430\":1,\"497\":1,\"553\":1,\"565\":1,\"589\":1,\"594\":1}}],[\"construct\",{\"1\":{\"71\":1,\"138\":1}}],[\"const\",{\"1\":{\"222\":1,\"230\":4,\"243\":1,\"244\":1,\"247\":8,\"251\":1,\"259\":2,\"262\":4,\"264\":3,\"273\":3,\"274\":1,\"276\":3,\"284\":2,\"295\":1,\"302\":1,\"308\":2,\"309\":1,\"310\":1,\"311\":1,\"330\":2,\"331\":1,\"333\":1,\"340\":3,\"342\":3,\"346\":1,\"349\":1,\"351\":2,\"360\":5,\"374\":1,\"392\":1,\"393\":1,\"398\":2,\"405\":3,\"415\":2,\"430\":1,\"444\":4,\"445\":4,\"742\":1,\"745\":1,\"747\":1,\"750\":1,\"751\":3,\"752\":5,\"753\":14,\"754\":5,\"756\":2,\"757\":8,\"758\":5,\"759\":19,\"761\":4}}],[\"connecttimeout\",{\"1\":{\"708\":1}}],[\"connected\",{\"1\":{\"243\":2}}],[\"connectivity\",{\"1\":{\"186\":1}}],[\"connectivitymanager\",{\"1\":{\"186\":2}}],[\"conn\",{\"1\":{\"38\":3}}],[\"cont\",{\"1\":{\"731\":2,\"737\":5}}],[\"continue\",{\"1\":{\"247\":1,\"398\":1,\"417\":2,\"761\":1}}],[\"continues\",{\"1\":{\"26\":2}}],[\"contained\",{\"1\":{\"757\":2}}],[\"containerrenderobjectmixin\",{\"1\":{\"426\":1}}],[\"containerrenderobjectmixin<childtype\",{\"1\":{\"426\":1}}],[\"containerrenderobjectmixin<renderobject\",{\"1\":{\"426\":1}}],[\"containerrenderobjectmixin<rendersliver\",{\"1\":{\"425\":2,\"426\":1}}],[\"containerrenderobjectmixin<renderbox\",{\"1\":{\"265\":1}}],[\"containerparentdatamixin<renderobject>>\",{\"1\":{\"426\":1}}],[\"containerparentdatamixin<rendersliver>>\",{\"1\":{\"425\":1}}],[\"containerparentdatamixin<childtype>>\",{\"1\":{\"426\":1}}],[\"containerlayer\",{\"1\":{\"334\":1}}],[\"container\",{\"1\":{\"254\":1,\"255\":4,\"273\":1,\"276\":7,\"295\":3,\"302\":3,\"311\":1,\"342\":1,\"370\":1,\"403\":1,\"444\":2,\"445\":2}}],[\"containerhelpers\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"523\":1}}],[\"containscompressedpointers\",{\"1\":{\"248\":1}}],[\"containsfordebugging\",{\"1\":{\"247\":1}}],[\"contains\",{\"1\":{\"244\":1,\"496\":1,\"574\":1,\"666\":2}}],[\"containskey\",{\"1\":{\"243\":1,\"244\":2}}],[\"contain\",{\"1\":{\"203\":1,\"392\":1,\"615\":1,\"763\":2,\"771\":1}}],[\"contactslistview\",{\"1\":{\"152\":1,\"153\":4}}],[\"controlport\",{\"1\":{\"742\":3,\"745\":1,\"748\":7}}],[\"controlport``\",{\"1\":{\"742\":1}}],[\"controlpoint2y\",{\"1\":{\"144\":1,\"145\":1}}],[\"controlpoint2x\",{\"1\":{\"144\":1,\"145\":1}}],[\"controlpoint2\",{\"1\":{\"144\":1}}],[\"controlpoint1y\",{\"1\":{\"144\":1,\"145\":1}}],[\"controlpoint1x\",{\"1\":{\"144\":1,\"145\":1}}],[\"controlpoint1\",{\"1\":{\"144\":1}}],[\"control\",{\"1\":{\"671\":1,\"761\":1}}],[\"controller可以在activity等不再需要数据时\",{\"1\":{\"785\":1}}],[\"controller变化并触发\",{\"1\":{\"303\":1}}],[\"controller的状态\",{\"1\":{\"303\":1}}],[\"controller\",{\"1\":{\"122\":5,\"302\":4,\"305\":2,\"307\":1,\"308\":1,\"311\":2,\"318\":1,\"330\":2,\"349\":1,\"352\":1,\"374\":2,\"403\":1,\"405\":8,\"412\":1,\"423\":3,\"436\":2}}],[\"contract\",{\"1\":{\"126\":1}}],[\"contextclassloader\",{\"0\":{\"487\":1},\"1\":{\"487\":5}}],[\"contextwrap\",{\"1\":{\"6\":1}}],[\"context\",{\"0\":{\"818\":1,\"819\":1},\"1\":{\"6\":5,\"15\":3,\"16\":1,\"19\":5,\"20\":5,\"21\":1,\"30\":1,\"35\":1,\"62\":10,\"75\":1,\"101\":1,\"105\":4,\"116\":1,\"117\":5,\"138\":3,\"153\":11,\"167\":1,\"173\":1,\"179\":1,\"183\":6,\"186\":4,\"189\":18,\"196\":13,\"231\":1,\"255\":1,\"259\":4,\"264\":4,\"265\":4,\"270\":1,\"273\":10,\"276\":3,\"279\":1,\"281\":1,\"282\":1,\"284\":1,\"295\":2,\"307\":1,\"308\":3,\"309\":1,\"310\":3,\"311\":3,\"331\":1,\"332\":6,\"340\":3,\"342\":1,\"346\":2,\"347\":4,\"348\":4,\"349\":2,\"351\":1,\"352\":5,\"365\":1,\"367\":2,\"370\":5,\"391\":1,\"392\":2,\"393\":3,\"399\":3,\"403\":2,\"405\":7,\"407\":3,\"415\":2,\"422\":1,\"423\":7,\"424\":6,\"429\":1,\"430\":2,\"436\":5,\"437\":2,\"440\":5,\"444\":1,\"445\":1,\"740\":1,\"814\":1,\"818\":4,\"819\":1,\"822\":2}}],[\"contents\",{\"1\":{\"436\":4,\"445\":1,\"594\":2}}],[\"contentequals\",{\"1\":{\"284\":1}}],[\"contentprovider\",{\"1\":{\"135\":1}}],[\"contentprovider等等之外\",{\"1\":{\"69\":1}}],[\"contentview\",{\"1\":{\"24\":2}}],[\"content\",{\"1\":{\"2\":1,\"6\":2,\"7\":1,\"62\":4,\"63\":1,\"115\":1,\"118\":1,\"158\":1,\"159\":4,\"167\":2,\"189\":2,\"196\":3,\"415\":1,\"437\":1,\"439\":2,\"442\":3,\"444\":2,\"445\":2,\"737\":1}}],[\"come\",{\"1\":{\"761\":2}}],[\"command\",{\"1\":{\"748\":1}}],[\"communicate\",{\"1\":{\"740\":1}}],[\"commit\",{\"1\":{\"672\":1,\"794\":1}}],[\"commonly\",{\"1\":{\"309\":1}}],[\"common\",{\"1\":{\"104\":1,\"237\":1,\"763\":1}}],[\"combine\",{\"1\":{\"631\":3,\"659\":1}}],[\"combined\",{\"1\":{\"417\":1}}],[\"combining\",{\"1\":{\"493\":1}}],[\"combination\",{\"1\":{\"10\":1}}],[\"com关于porterduff\",{\"1\":{\"132\":1}}],[\"compiling\",{\"1\":{\"770\":1}}],[\"compilations\",{\"1\":{\"768\":1}}],[\"compilation\",{\"1\":{\"763\":1,\"767\":1,\"768\":1}}],[\"compiled\",{\"1\":{\"757\":1,\"771\":1}}],[\"compiledebugaidl\",{\"1\":{\"70\":1}}],[\"compiler可以执行任意\",{\"1\":{\"768\":1}}],[\"compiler\",{\"1\":{\"209\":1,\"763\":1,\"767\":1,\"768\":2,\"769\":2}}],[\"compile\",{\"1\":{\"2\":1,\"30\":1,\"104\":2,\"511\":2,\"753\":1,\"766\":1}}],[\"computetimeout\",{\"1\":{\"761\":1}}],[\"computemaxintrinsicheight\",{\"1\":{\"332\":1}}],[\"computeminintrinsicwidth\",{\"1\":{\"332\":1}}],[\"computescrolloffset\",{\"1\":{\"75\":1}}],[\"computescroll\",{\"1\":{\"75\":3}}],[\"computation\",{\"1\":{\"224\":2,\"231\":5}}],[\"comparable<e>\",{\"1\":{\"521\":1}}],[\"companion\",{\"1\":{\"196\":1,\"594\":1,\"612\":3}}],[\"compatible\",{\"1\":{\"10\":1}}],[\"compoundanimation\",{\"1\":{\"317\":2}}],[\"composepx\",{\"1\":{\"196\":1}}],[\"composedp\",{\"1\":{\"195\":2,\"196\":2}}],[\"compose\",{\"0\":{\"194\":1,\"195\":1},\"1\":{\"126\":4,\"196\":6,\"631\":1}}],[\"composable\",{\"1\":{\"125\":1,\"126\":1}}],[\"componentelement\",{\"1\":{\"264\":4}}],[\"component中\",{\"1\":{\"217\":1}}],[\"component并添加androidinjectionmodule\",{\"1\":{\"217\":1}}],[\"component和\",{\"1\":{\"217\":1}}],[\"component接口暴露的公共性的依赖\",{\"1\":{\"205\":1}}],[\"component只能访问在基类\",{\"1\":{\"205\":1}}],[\"component有以上相同的项\",{\"1\":{\"205\":1}}],[\"component可以分别拥有相同名称的\",{\"1\":{\"205\":1}}],[\"component可以有多个\",{\"1\":{\"204\":1}}],[\"component应该和他所包含的\",{\"1\":{\"205\":1}}],[\"component产生了迷失\",{\"1\":{\"203\":1}}],[\"component在产生依赖的时候会先到\",{\"1\":{\"203\":1}}],[\"component关联到了一起\",{\"1\":{\"203\":1}}],[\"component类\",{\"1\":{\"203\":1}}],[\"component类只需要找到\",{\"1\":{\"203\":1}}],[\"component类传入使用该依赖的类的引用即可\",{\"1\":{\"202\":1}}],[\"component标记的类是将一个类和他的依赖联系在一起的桥梁\",{\"1\":{\"202\":1}}],[\"component\",{\"0\":{\"202\":1,\"211\":1},\"1\":{\"202\":2,\"203\":3,\"205\":2,\"206\":1,\"211\":2,\"213\":1,\"217\":2,\"578\":1}}],[\"components\",{\"1\":{\"83\":1,\"139\":1,\"763\":2,\"771\":1}}],[\"componentname\",{\"1\":{\"35\":2,\"38\":2,\"39\":1,\"62\":4,\"83\":2,\"105\":1,\"138\":2}}],[\"completabledeferred\",{\"1\":{\"645\":1}}],[\"completabledeferred<int>\",{\"1\":{\"645\":1}}],[\"completionstatemask\",{\"1\":{\"232\":1}}],[\"complete返回给dart\",{\"1\":{\"244\":1}}],[\"completewithvalue\",{\"1\":{\"231\":2}}],[\"completewitherrorcallback\",{\"1\":{\"224\":1,\"231\":1}}],[\"completes\",{\"1\":{\"231\":1,\"232\":2,\"302\":1,\"350\":1}}],[\"completeerror`\",{\"1\":{\"231\":1}}],[\"completeerror\",{\"1\":{\"231\":4,\"243\":1,\"748\":2}}],[\"completers找出并完成之前的请求\",{\"1\":{\"398\":1}}],[\"completers中并返回给调用者\",{\"1\":{\"398\":1}}],[\"completers\",{\"1\":{\"398\":5}}],[\"completer>\",{\"1\":{\"243\":2,\"244\":2}}],[\"completer<isolate>\",{\"1\":{\"748\":1}}],[\"completer<imageinfo>\",{\"1\":{\"397\":2}}],[\"completer<map>\",{\"1\":{\"398\":1}}],[\"completer<ui\",{\"1\":{\"396\":2}}],[\"completer<uint8list>\",{\"1\":{\"243\":1}}],[\"completer<t>\",{\"1\":{\"231\":1}}],[\"completer\",{\"1\":{\"231\":6,\"243\":10,\"244\":6,\"249\":1,\"376\":5,\"384\":8,\"395\":3,\"396\":3,\"397\":3,\"398\":10,\"748\":5}}],[\"complete\",{\"1\":{\"224\":1,\"231\":3,\"232\":1,\"243\":4,\"244\":3,\"396\":1,\"397\":1,\"398\":1,\"645\":1,\"748\":1}}],[\"completed时回调implicitlyanimatedwidget\",{\"1\":{\"303\":1}}],[\"completed\",{\"1\":{\"17\":1,\"232\":1,\"316\":1,\"319\":1,\"321\":1,\"350\":1,\"352\":2,\"634\":1}}],[\"complex\",{\"1\":{\"101\":6,\"309\":1,\"723\":1}}],[\"com\",{\"0\":{\"734\":1},\"1\":{\"2\":2,\"6\":3,\"26\":1,\"30\":7,\"33\":2,\"62\":1,\"63\":1,\"77\":4,\"104\":2,\"111\":1,\"115\":2,\"121\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":4,\"128\":6,\"131\":1,\"137\":4,\"138\":12,\"139\":2,\"140\":1,\"141\":1,\"142\":1,\"149\":1,\"167\":3,\"189\":3,\"196\":1,\"209\":3,\"221\":1,\"243\":3,\"247\":1,\"285\":1,\"337\":1,\"342\":1,\"351\":1,\"401\":2,\"492\":1,\"500\":1,\"511\":1,\"514\":1,\"516\":5,\"522\":2,\"524\":1,\"538\":1,\"552\":1,\"573\":1,\"578\":1,\"584\":1,\"586\":1,\"587\":1,\"663\":1,\"667\":1,\"670\":2,\"672\":1,\"673\":1,\"675\":1,\"708\":3,\"711\":3,\"712\":2,\"730\":1,\"731\":2,\"732\":1,\"735\":1,\"736\":1,\"737\":2,\"740\":3,\"783\":4,\"784\":6,\"794\":2,\"810\":1,\"811\":1,\"812\":1,\"816\":1,\"904\":1}}],[\"db\",{\"1\":{\"807\":1}}],[\"d展示当前目录本身信息\",{\"1\":{\"688\":1}}],[\"ddata\",{\"1\":{\"833\":1}}],[\"dd\",{\"1\":{\"572\":1,\"576\":4}}],[\"dlmalloc\",{\"1\":{\"516\":1}}],[\"dummy\",{\"1\":{\"392\":1,\"396\":6}}],[\"dumperrortoconsole\",{\"1\":{\"296\":1}}],[\"during\",{\"1\":{\"264\":1,\"331\":1,\"332\":1,\"352\":1,\"408\":1,\"413\":1,\"759\":1,\"761\":3,\"770\":1,\"771\":2}}],[\"durationinseconds\",{\"1\":{\"324\":1}}],[\"duration=\",{\"1\":{\"167\":2}}],[\"duration\",{\"1\":{\"20\":1,\"147\":1,\"222\":1,\"230\":5,\"231\":3,\"233\":9,\"234\":21,\"302\":9,\"305\":4,\"308\":2,\"309\":1,\"312\":1,\"314\":1,\"319\":8,\"320\":1,\"321\":2,\"324\":2,\"325\":1,\"329\":1,\"330\":2,\"336\":1,\"350\":1,\"383\":3,\"408\":1,\"742\":2,\"751\":1,\"757\":1,\"758\":1}}],[\"d437877c500c77d6e08372ba2dbda9c598f5bd8e\",{\"1\":{\"247\":1}}],[\"drafts\",{\"1\":{\"807\":1}}],[\"drain\",{\"1\":{\"745\":1,\"761\":1}}],[\"dragdetails\",{\"1\":{\"423\":1,\"436\":1}}],[\"dragging\",{\"1\":{\"418\":2}}],[\"dragscrollactivity\",{\"1\":{\"418\":2}}],[\"dragstartdetails\",{\"1\":{\"418\":1}}],[\"dragstartbehavior\",{\"1\":{\"405\":2,\"423\":2,\"436\":2}}],[\"dragcancelcallback\",{\"1\":{\"418\":2}}],[\"drag方法创建了scrolldragcontroller\",{\"1\":{\"418\":1}}],[\"drag\",{\"1\":{\"404\":1,\"415\":1,\"417\":1,\"418\":14,\"420\":1}}],[\"drawimagenine绘制图片\",{\"1\":{\"370\":1}}],[\"drawimagerect方法第一个参数\",{\"1\":{\"371\":1}}],[\"drawimagerect或者canvas\",{\"1\":{\"370\":1}}],[\"drawimagerect绘制图片内容\",{\"1\":{\"377\":1}}],[\"drawimagerect绘制图片\",{\"1\":{\"366\":1}}],[\"drawparagraph\",{\"1\":{\"334\":1}}],[\"drawpath\",{\"1\":{\"146\":1,\"147\":1}}],[\"drawline\",{\"1\":{\"334\":1}}],[\"drawcolor\",{\"1\":{\"334\":1}}],[\"drawcircle\",{\"1\":{\"153\":1,\"330\":1}}],[\"drawrrect\",{\"1\":{\"334\":1}}],[\"drawroundrect\",{\"1\":{\"162\":1}}],[\"drawrect\",{\"1\":{\"153\":1,\"162\":1,\"334\":1}}],[\"drawxxx\",{\"1\":{\"131\":1}}],[\"drawbitmap\",{\"1\":{\"131\":2}}],[\"drawableclazz\",{\"1\":{\"823\":2}}],[\"drawable=\",{\"1\":{\"167\":2}}],[\"drawable\",{\"1\":{\"106\":2,\"167\":6,\"398\":2,\"399\":3,\"823\":1}}],[\"drawtext\",{\"1\":{\"33\":2,\"153\":3}}],[\"drawn\",{\"1\":{\"33\":3}}],[\"draw\",{\"0\":{\"161\":1},\"1\":{\"33\":1,\"157\":1,\"161\":3,\"331\":1,\"332\":1}}],[\"driving\",{\"1\":{\"352\":1}}],[\"drive方法中获取一个新的\",{\"1\":{\"359\":1}}],[\"drive<u>\",{\"1\":{\"316\":1,\"327\":1}}],[\"drive\",{\"1\":{\"243\":1,\"316\":1}}],[\"driver\",{\"1\":{\"243\":5}}],[\"dropped\",{\"1\":{\"413\":1}}],[\"drop\",{\"1\":{\"232\":1}}],[\"dfsstacks\",{\"1\":{\"847\":1}}],[\"dfs\",{\"0\":{\"847\":1},\"1\":{\"846\":1,\"847\":2,\"849\":1}}],[\"dfe\",{\"1\":{\"757\":1}}],[\"df\",{\"1\":{\"142\":1}}],[\"dstr\",{\"1\":{\"557\":1}}],[\"dstpath\",{\"1\":{\"147\":3}}],[\"dstpaint\",{\"1\":{\"131\":1}}],[\"dst\",{\"1\":{\"131\":2,\"132\":6}}],[\"dynamicloadapk\",{\"1\":{\"816\":1}}],[\"dynamic>>\",{\"1\":{\"748\":1}}],[\"dynamic>\",{\"1\":{\"376\":1,\"398\":4}}],[\"dynamic\",{\"1\":{\"232\":2,\"304\":2,\"305\":1,\"307\":1,\"308\":1,\"358\":3,\"398\":1,\"496\":2,\"771\":1,\"816\":1}}],[\"dy\",{\"1\":{\"112\":2,\"332\":1}}],[\"dx\",{\"1\":{\"112\":2,\"323\":1,\"332\":1}}],[\"dpheightscale\",{\"1\":{\"196\":3}}],[\"dpwidthscale\",{\"1\":{\"196\":5}}],[\"dpx\",{\"1\":{\"196\":17}}],[\"dpi\",{\"1\":{\"100\":7,\"196\":3}}],[\"dp\",{\"1\":{\"100\":18,\"101\":1,\"196\":16}}],[\"dichotomy\",{\"1\":{\"880\":3}}],[\"dict\",{\"1\":{\"724\":1,\"726\":1,\"737\":1}}],[\"dill\",{\"1\":{\"763\":2}}],[\"div\",{\"1\":{\"620\":2,\"737\":10}}],[\"divert\",{\"1\":{\"351\":2}}],[\"diverted\",{\"1\":{\"348\":1}}],[\"dive\",{\"1\":{\"128\":2}}],[\"diagnosticsproperty<image\",{\"1\":{\"374\":2}}],[\"dialog\",{\"0\":{\"165\":1},\"1\":{\"76\":1,\"166\":1,\"167\":8}}],[\"different\",{\"1\":{\"350\":1,\"573\":1,\"740\":1,\"763\":1}}],[\"differs\",{\"1\":{\"237\":1}}],[\"didoverscrollby\",{\"1\":{\"413\":1}}],[\"didstopusergesture\",{\"1\":{\"349\":1,\"350\":1}}],[\"didstartusergesture\",{\"1\":{\"349\":1}}],[\"didreplace\",{\"1\":{\"349\":1}}],[\"didremove\",{\"1\":{\"349\":1}}],[\"didpop\",{\"1\":{\"349\":1}}],[\"didpush\",{\"1\":{\"349\":1}}],[\"didupdatescrollpositionby\",{\"1\":{\"412\":1,\"413\":1}}],[\"didupdatepainter\",{\"1\":{\"332\":3}}],[\"didupdatetweens\",{\"0\":{\"307\":1},\"1\":{\"305\":1}}],[\"didupdatewidget\",{\"0\":{\"305\":1},\"1\":{\"305\":3,\"310\":2,\"367\":1,\"405\":1}}],[\"didchangeapplifecyclestate\",{\"1\":{\"287\":1}}],[\"didchangedependencies\",{\"1\":{\"270\":1,\"365\":1,\"367\":1,\"405\":1}}],[\"didn\",{\"1\":{\"238\":1}}],[\"died\",{\"1\":{\"759\":1,\"761\":2}}],[\"die\",{\"1\":{\"237\":1}}],[\"di\",{\"1\":{\"126\":1}}],[\"dip\",{\"1\":{\"101\":1}}],[\"dimension\",{\"1\":{\"116\":1,\"159\":1}}],[\"dimensions\",{\"1\":{\"104\":1,\"445\":2}}],[\"dimen\",{\"1\":{\"101\":1}}],[\"diydialog\",{\"1\":{\"167\":1}}],[\"diydialogstyle\",{\"1\":{\"167\":1}}],[\"diycode\",{\"1\":{\"138\":1}}],[\"diy\",{\"1\":{\"77\":1}}],[\"diywidget\",{\"1\":{\"77\":1}}],[\"dirpath\",{\"1\":{\"697\":1}}],[\"dirname\",{\"1\":{\"684\":1}}],[\"direct\",{\"1\":{\"493\":2}}],[\"directly\",{\"1\":{\"371\":1,\"769\":1}}],[\"directionsetter\",{\"1\":{\"325\":3}}],[\"direction\",{\"1\":{\"320\":1,\"321\":1,\"412\":2,\"424\":2,\"437\":1,\"440\":2,\"783\":2}}],[\"directionality\",{\"1\":{\"259\":2,\"264\":1,\"265\":1,\"424\":2}}],[\"directory\",{\"1\":{\"247\":9,\"383\":2,\"822\":3}}],[\"directtargetchild\",{\"1\":{\"112\":1}}],[\"dirtyelements\",{\"1\":{\"270\":1}}],[\"dirty\",{\"1\":{\"123\":1,\"251\":1,\"256\":1,\"258\":1,\"259\":1,\"263\":1,\"264\":1,\"265\":1,\"273\":1}}],[\"dir\",{\"1\":{\"70\":1,\"486\":1,\"718\":4,\"731\":1,\"748\":1}}],[\"disable\",{\"1\":{\"761\":1}}],[\"disableidletimerscope\",{\"1\":{\"761\":1}}],[\"disabled\",{\"1\":{\"376\":2}}],[\"disallow\",{\"1\":{\"26\":3,\"247\":1,\"412\":1}}],[\"disallowintercept\",{\"1\":{\"26\":4}}],[\"dismissed\",{\"1\":{\"316\":1,\"319\":1,\"321\":1}}],[\"disk\",{\"1\":{\"285\":1}}],[\"distinguish\",{\"1\":{\"235\":1,\"236\":1}}],[\"discard\",{\"1\":{\"230\":1}}],[\"dissolve\",{\"1\":{\"138\":1}}],[\"disposed\",{\"1\":{\"370\":1}}],[\"dispose\",{\"1\":{\"305\":1,\"310\":2,\"322\":1,\"369\":1,\"371\":1,\"376\":2,\"396\":2,\"417\":1,\"442\":1}}],[\"displaylist\",{\"1\":{\"850\":3}}],[\"displays\",{\"1\":{\"365\":1,\"371\":1}}],[\"display\",{\"1\":{\"196\":3}}],[\"displaymetrics\",{\"1\":{\"101\":7,\"196\":10,\"823\":1}}],[\"dispatchers\",{\"1\":{\"622\":2,\"624\":2,\"625\":1,\"626\":1,\"629\":1,\"645\":1,\"654\":1}}],[\"dispatched\",{\"1\":{\"247\":1}}],[\"dispatch方法的\",{\"1\":{\"247\":1}}],[\"dispatch方法在不同的机器上面实现不同\",{\"1\":{\"243\":1}}],[\"dispatchwithnamespace\",{\"1\":{\"243\":2}}],[\"dispatchingandroidinjector\",{\"1\":{\"216\":1}}],[\"dispatchingandroidinjector<activity>\",{\"1\":{\"214\":1,\"216\":1}}],[\"dispatchactivityinjector\",{\"1\":{\"214\":3}}],[\"dispatchdraw\",{\"1\":{\"161\":1}}],[\"dispatchmessage\",{\"0\":{\"53\":1},\"1\":{\"49\":2,\"53\":1,\"56\":1}}],[\"dispatchtransformedtouchevent\",{\"1\":{\"26\":5}}],[\"dispatchtouchevent\",{\"1\":{\"25\":2,\"26\":9,\"27\":3}}],[\"dispatch\",{\"1\":{\"26\":1,\"243\":10,\"244\":3,\"247\":3}}],[\"dispatchkeyevent\",{\"1\":{\"25\":2}}],[\"dog>\",{\"1\":{\"618\":1}}],[\"dofinal\",{\"1\":{\"557\":2}}],[\"dosth\",{\"1\":{\"513\":5,\"550\":1}}],[\"dosomething\",{\"1\":{\"38\":2}}],[\"does\",{\"1\":{\"274\":1,\"495\":1,\"584\":1,\"670\":1,\"761\":1,\"770\":1}}],[\"doesn\",{\"1\":{\"231\":1,\"523\":1,\"757\":1,\"761\":1}}],[\"doc\",{\"1\":{\"728\":2}}],[\"documentation\",{\"1\":{\"448\":1}}],[\"documented\",{\"1\":{\"204\":1,\"205\":1,\"565\":1}}],[\"docstring\",{\"1\":{\"731\":1}}],[\"docs\",{\"1\":{\"267\":1,\"492\":1,\"511\":1,\"552\":2,\"573\":2,\"578\":2}}],[\"double=num\",{\"1\":{\"358\":1}}],[\"double\",{\"1\":{\"259\":2,\"276\":1,\"308\":1,\"314\":1,\"316\":1,\"317\":2,\"319\":16,\"321\":1,\"323\":5,\"324\":4,\"325\":7,\"355\":1,\"357\":3,\"358\":5,\"359\":2,\"360\":13,\"361\":2,\"365\":1,\"383\":1,\"403\":1,\"405\":2,\"412\":18,\"413\":6,\"415\":1,\"417\":3,\"418\":9,\"439\":3,\"440\":1,\"445\":1,\"568\":1,\"833\":1}}],[\"dowhile\",{\"1\":{\"222\":2}}],[\"downto\",{\"1\":{\"898\":1,\"921\":1,\"927\":1}}],[\"download2\",{\"1\":{\"731\":1}}],[\"download\",{\"1\":{\"731\":1,\"737\":3}}],[\"downloader\",{\"1\":{\"730\":1,\"731\":2,\"736\":1,\"737\":5}}],[\"down\",{\"1\":{\"25\":1,\"26\":8,\"153\":1,\"234\":1,\"237\":1,\"247\":1,\"412\":1,\"418\":1,\"424\":1,\"427\":1,\"440\":2,\"759\":1,\"761\":3}}],[\"doinbackgroud\",{\"1\":{\"193\":1}}],[\"doinbackground\",{\"1\":{\"190\":1,\"191\":1,\"193\":3}}],[\"doing\",{\"1\":{\"139\":1,\"285\":1,\"376\":1,\"770\":1}}],[\"dorequestcamerapermission\",{\"1\":{\"173\":3}}],[\"dont\",{\"1\":{\"757\":1}}],[\"dontneed\",{\"1\":{\"757\":5}}],[\"done\",{\"1\":{\"193\":1,\"323\":1,\"376\":1,\"630\":2,\"634\":1,\"638\":1,\"658\":2,\"761\":4}}],[\"don\",{\"1\":{\"126\":1,\"231\":5,\"237\":1,\"244\":1,\"285\":1,\"340\":1,\"351\":2,\"376\":3,\"629\":1,\"754\":1,\"761\":2}}],[\"domain\",{\"1\":{\"126\":10}}],[\"do\",{\"1\":{\"39\":2,\"71\":1,\"117\":1,\"187\":1,\"235\":1,\"243\":1,\"244\":1,\"247\":1,\"285\":1,\"370\":1,\"408\":2,\"417\":1,\"748\":1,\"753\":2,\"761\":1}}],[\"d\",{\"1\":{\"35\":5,\"63\":2,\"64\":2,\"142\":1,\"173\":1,\"187\":3,\"215\":1,\"247\":3,\"417\":1,\"578\":2,\"612\":1,\"618\":3,\"665\":1,\"674\":1,\"694\":1,\"700\":2,\"731\":4,\"759\":1}}],[\"deoptimize\",{\"1\":{\"771\":1}}],[\"deoptimization\",{\"1\":{\"768\":3}}],[\"death\",{\"1\":{\"761\":1}}],[\"deathrecipient\",{\"1\":{\"63\":2}}],[\"deadlocks\",{\"1\":{\"761\":1}}],[\"dead\",{\"1\":{\"761\":7}}],[\"deal\",{\"1\":{\"408\":1,\"418\":1}}],[\"denth\",{\"1\":{\"262\":1}}],[\"densitydpi\",{\"1\":{\"196\":3}}],[\"density=2\",{\"1\":{\"101\":3}}],[\"density\",{\"1\":{\"100\":9,\"101\":6,\"196\":19}}],[\"deprecation\",{\"1\":{\"566\":1}}],[\"deprecated\",{\"1\":{\"566\":1,\"748\":1}}],[\"deployment\",{\"1\":{\"453\":1}}],[\"deploy\",{\"0\":{\"453\":1},\"1\":{\"453\":1,\"812\":4}}],[\"depending\",{\"1\":{\"395\":1}}],[\"dependoninheritedwidgetofexacttype<appcolor>\",{\"1\":{\"273\":2}}],[\"dependoninheritedwidgetofexacttype<t\",{\"1\":{\"272\":1}}],[\"dependents\",{\"1\":{\"271\":1,\"273\":3}}],[\"dependency\",{\"1\":{\"110\":1,\"112\":10,\"126\":1,\"206\":1,\"437\":1}}],[\"dependencies\",{\"1\":{\"30\":1,\"104\":1,\"205\":2,\"206\":1,\"251\":1,\"258\":1,\"259\":1,\"263\":1,\"273\":3}}],[\"depth是\",{\"1\":{\"259\":1}}],[\"depth\",{\"1\":{\"251\":1,\"256\":2,\"258\":1,\"259\":1,\"263\":1,\"583\":1,\"587\":2}}],[\"determine\",{\"1\":{\"424\":2}}],[\"detecting\",{\"1\":{\"234\":1}}],[\"detail\",{\"1\":{\"783\":2}}],[\"details\",{\"1\":{\"33\":3,\"62\":1,\"71\":1,\"77\":1,\"104\":1,\"105\":1,\"137\":2,\"138\":4,\"139\":1,\"149\":1,\"247\":1,\"251\":1,\"259\":1,\"262\":1,\"264\":1,\"296\":4,\"418\":3,\"430\":1,\"490\":1,\"497\":1,\"519\":1,\"524\":1,\"528\":1,\"550\":1}}],[\"detach\",{\"1\":{\"332\":2,\"408\":2,\"409\":1,\"438\":3}}],[\"dequeuemessage则是按照优先级\",{\"1\":{\"761\":1}}],[\"dequeuemessage\",{\"1\":{\"761\":3}}],[\"deque\",{\"1\":{\"193\":1}}],[\"de\",{\"1\":{\"142\":1,\"612\":1}}],[\"deepin\",{\"1\":{\"716\":1}}],[\"deeporange\",{\"1\":{\"279\":1}}],[\"deep\",{\"1\":{\"128\":2}}],[\"delat\",{\"1\":{\"412\":2}}],[\"delayed\",{\"1\":{\"222\":1,\"230\":3,\"231\":2,\"742\":2,\"759\":2}}],[\"delay\",{\"1\":{\"123\":1,\"230\":2,\"264\":1,\"560\":3,\"629\":4,\"630\":2,\"631\":2,\"646\":1,\"651\":1}}],[\"delaymillis\",{\"1\":{\"54\":2,\"636\":1,\"638\":1}}],[\"delta\",{\"1\":{\"412\":24,\"413\":6,\"414\":1,\"418\":22,\"420\":1}}],[\"deletion\",{\"1\":{\"247\":1}}],[\"deleteisolategroupdata\",{\"1\":{\"752\":1}}],[\"deleteisolatedata\",{\"1\":{\"752\":1}}],[\"deletesync\",{\"1\":{\"383\":1}}],[\"deletelink\",{\"1\":{\"247\":1}}],[\"delete\",{\"1\":{\"89\":2,\"247\":5,\"753\":2,\"757\":2,\"759\":1,\"761\":7,\"836\":1}}],[\"deleted\",{\"1\":{\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"247\":1,\"523\":1,\"761\":2}}],[\"delegates\",{\"1\":{\"619\":1}}],[\"delegate<t>\",{\"1\":{\"619\":1}}],[\"delegate\",{\"1\":{\"232\":1,\"237\":1,\"411\":1,\"418\":2,\"619\":6}}],[\"deliberately\",{\"1\":{\"231\":1}}],[\"debugging\",{\"1\":{\"763\":1}}],[\"debugger\",{\"1\":{\"753\":1}}],[\"debugname\",{\"1\":{\"742\":6,\"748\":8,\"754\":2}}],[\"debugvalidatechild\",{\"1\":{\"426\":5}}],[\"debugimagelabel\",{\"1\":{\"370\":1}}],[\"debugbuilderrorwidget\",{\"1\":{\"370\":1}}],[\"debugbuiltonce\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"debugpreviouscanvassavecount\",{\"1\":{\"332\":1}}],[\"debugprint\",{\"1\":{\"295\":1}}],[\"debuglabel\",{\"1\":{\"302\":1,\"369\":1,\"370\":1,\"374\":1,\"407\":2}}],[\"debug模式下如onpressed中的未捕获错误等都会被\",{\"1\":{\"296\":1}}],[\"debug模式下\",{\"1\":{\"295\":2}}],[\"debug模式下errorwidget\",{\"1\":{\"295\":1}}],[\"debug模式返回的是红底黄字的错误提示\",{\"1\":{\"295\":1}}],[\"debugcheckhasdirectionality\",{\"1\":{\"265\":1,\"424\":1}}],[\"debugsetallowignoredcallstomarkneedsbuild\",{\"1\":{\"264\":1}}],[\"debugshortdescription\",{\"1\":{\"254\":1,\"255\":1}}],[\"debugallowignoredcallstomarkneedsbuild\",{\"1\":{\"263\":1}}],[\"debuga1lowignoredcallstomarkneedsbuild\",{\"1\":{\"251\":1,\"258\":1,\"259\":1}}],[\"debugdoingbuild\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"debugforgottenchildrenwithglobalkey\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"debugreassembleconfig\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"262\":1,\"263\":1}}],[\"debug\",{\"1\":{\"70\":1,\"247\":2,\"295\":1,\"424\":1,\"749\":1,\"753\":4,\"754\":2,\"757\":1,\"808\":1}}],[\"demo2\",{\"1\":{\"64\":1}}],[\"demo\",{\"1\":{\"62\":2,\"63\":1,\"77\":1,\"120\":1,\"209\":1,\"217\":1,\"335\":1,\"587\":1,\"781\":1}}],[\"decide\",{\"1\":{\"761\":1}}],[\"decrypt\",{\"1\":{\"557\":2}}],[\"decodeimagefrompixels分析\",{\"1\":{\"401\":1}}],[\"decodeimagefrompixels方法从\",{\"1\":{\"400\":1}}],[\"decodeimagefrompixels\",{\"1\":{\"396\":1,\"397\":1}}],[\"decodeimagefromlist\",{\"1\":{\"374\":1}}],[\"decodercallback\",{\"1\":{\"374\":2,\"383\":2,\"395\":1,\"398\":1}}],[\"decoded\",{\"1\":{\"371\":1}}],[\"decode\",{\"1\":{\"285\":1,\"374\":3,\"383\":5,\"395\":1,\"398\":1}}],[\"decoratedbox\",{\"1\":{\"309\":1}}],[\"decoratedboxtransition\",{\"1\":{\"309\":1}}],[\"decoration\",{\"1\":{\"153\":1,\"372\":1}}],[\"decorationn\",{\"1\":{\"153\":1}}],[\"decor\",{\"1\":{\"185\":3}}],[\"decorview\",{\"1\":{\"24\":2,\"25\":2,\"28\":1,\"158\":1}}],[\"declared\",{\"1\":{\"511\":3}}],[\"declare\",{\"1\":{\"60\":1,\"116\":1,\"138\":1}}],[\"deserizlization\",{\"1\":{\"769\":1}}],[\"deserialized\",{\"1\":{\"766\":1}}],[\"deserialize\",{\"1\":{\"759\":3}}],[\"deserializes\",{\"1\":{\"586\":1}}],[\"designator\",{\"1\":{\"578\":1}}],[\"design\",{\"1\":{\"108\":3,\"111\":7}}],[\"desiredpointeridbits\",{\"1\":{\"26\":1}}],[\"destructive\",{\"1\":{\"757\":1}}],[\"destructors\",{\"1\":{\"247\":2}}],[\"destroyed\",{\"1\":{\"247\":1}}],[\"destroy\",{\"1\":{\"123\":2,\"126\":1,\"247\":1,\"560\":1,\"626\":1}}],[\"dest\",{\"1\":{\"247\":1,\"761\":2}}],[\"destination=\",{\"1\":{\"783\":1}}],[\"destination\",{\"1\":{\"246\":1,\"341\":1,\"783\":1}}],[\"desty\",{\"1\":{\"75\":3}}],[\"destx\",{\"1\":{\"75\":3}}],[\"desc\",{\"1\":{\"583\":2,\"591\":6}}],[\"descendant\",{\"1\":{\"347\":1}}],[\"descenter\",{\"1\":{\"33\":1}}],[\"descent的值就是\",{\"1\":{\"33\":1}}],[\"descent\",{\"1\":{\"33\":7}}],[\"describecontents\",{\"1\":{\"594\":1}}],[\"described\",{\"1\":{\"183\":1}}],[\"description\",{\"1\":{\"183\":1,\"196\":1,\"586\":1,\"811\":1}}],[\"descriptor\",{\"1\":{\"71\":10,\"138\":12,\"594\":2}}],[\"dexclassloader\",{\"1\":{\"822\":2,\"823\":1}}],[\"dex\",{\"1\":{\"30\":6,\"822\":1}}],[\"definite\",{\"1\":{\"511\":1}}],[\"definitely\",{\"1\":{\"511\":1}}],[\"definition\",{\"1\":{\"57\":1}}],[\"defining\",{\"1\":{\"485\":1}}],[\"defineclass\",{\"1\":{\"486\":1}}],[\"defined\",{\"1\":{\"247\":2,\"753\":18,\"757\":11,\"761\":4}}],[\"define\",{\"1\":{\"247\":2,\"745\":1,\"747\":2,\"749\":1,\"753\":1,\"754\":1}}],[\"defstyle\",{\"1\":{\"153\":2}}],[\"defstyleattr\",{\"1\":{\"117\":2}}],[\"defaultnavhost=\",{\"1\":{\"783\":1}}],[\"defaultreadobject一起使用\",{\"1\":{\"584\":1}}],[\"defaultreadobject\",{\"1\":{\"584\":1}}],[\"defaultwriteobject\",{\"1\":{\"506\":1,\"584\":1}}],[\"defaultglobalrendertype\",{\"1\":{\"398\":1}}],[\"defaultheroflightshuttlebuilder\",{\"1\":{\"351\":2}}],[\"defaulttag\",{\"1\":{\"753\":1}}],[\"defaulttabcontroller\",{\"1\":{\"403\":1}}],[\"defaulttolerance\",{\"1\":{\"323\":1}}],[\"defaulttextstyletransition\",{\"1\":{\"309\":1}}],[\"defaulttextstyle\",{\"1\":{\"264\":5,\"302\":1,\"309\":1}}],[\"defaultonerror\",{\"1\":{\"296\":2}}],[\"defaultdisplay\",{\"1\":{\"196\":1}}],[\"default\",{\"1\":{\"60\":1,\"71\":1,\"138\":2,\"203\":2,\"204\":1,\"247\":1,\"264\":1,\"495\":1,\"506\":2,\"519\":1,\"538\":1,\"568\":1,\"583\":1,\"625\":1,\"626\":1,\"629\":1,\"645\":1,\"654\":1,\"712\":1,\"753\":3,\"754\":1,\"757\":1}}],[\"defaultconfig\",{\"1\":{\"30\":1}}],[\"def\",{\"1\":{\"20\":2,\"726\":8,\"728\":7,\"731\":4,\"737\":7}}],[\"devidearraybyn1\",{\"1\":{\"927\":2}}],[\"devicu\",{\"1\":{\"805\":1}}],[\"device\",{\"1\":{\"243\":8,\"753\":1}}],[\"devices\",{\"1\":{\"10\":1,\"243\":1}}],[\"devirtualized\",{\"1\":{\"772\":1}}],[\"devirtuablize\",{\"1\":{\"771\":1}}],[\"development\",{\"1\":{\"763\":1}}],[\"developerworks\",{\"1\":{\"137\":2,\"538\":1,\"584\":1,\"587\":1}}],[\"developers\",{\"1\":{\"102\":1,\"786\":1}}],[\"developer\",{\"1\":{\"0\":1,\"7\":1,\"83\":1,\"100\":1,\"121\":1,\"126\":2,\"128\":1,\"139\":1,\"523\":1,\"524\":1,\"594\":1}}],[\"dev京东在\",{\"1\":{\"378\":1}}],[\"dev\",{\"1\":{\"328\":4,\"337\":2,\"362\":5,\"421\":1,\"432\":1,\"447\":1,\"686\":1,\"757\":2,\"763\":1}}],[\"devtools\",{\"1\":{\"251\":1}}],[\"dao进行进一步的封装得到一个xxxrepository类\",{\"1\":{\"786\":1}}],[\"dao\",{\"1\":{\"781\":2,\"786\":2}}],[\"daemon\",{\"1\":{\"560\":1}}],[\"dartanalyzeror\",{\"1\":{\"770\":1}}],[\"dart2js\",{\"1\":{\"763\":1,\"770\":1}}],[\"dartentry\",{\"1\":{\"759\":1}}],[\"dartdev\",{\"1\":{\"757\":1}}],[\"dartinit\",{\"1\":{\"752\":2,\"753\":1,\"756\":1}}],[\"dart获取\",{\"1\":{\"340\":1,\"342\":1}}],[\"dartscope\",{\"1\":{\"248\":1}}],[\"dartworker\",{\"1\":{\"247\":1,\"759\":1}}],[\"dart的\",{\"1\":{\"244\":1}}],[\"dartutils\",{\"1\":{\"228\":2,\"237\":1,\"752\":6}}],[\"dart中的实现\",{\"1\":{\"747\":1}}],[\"dart中的main\",{\"1\":{\"279\":1}}],[\"dart中\",{\"1\":{\"227\":1,\"234\":1,\"748\":2}}],[\"dart\",{\"0\":{\"221\":1,\"241\":1,\"243\":1,\"245\":1,\"247\":1,\"248\":1,\"739\":1,\"758\":1,\"763\":1,\"765\":1},\"1\":{\"221\":9,\"224\":3,\"225\":1,\"226\":2,\"227\":1,\"228\":11,\"229\":1,\"231\":1,\"232\":2,\"233\":1,\"234\":7,\"235\":2,\"236\":1,\"237\":29,\"238\":2,\"239\":1,\"240\":3,\"241\":3,\"243\":11,\"244\":7,\"246\":19,\"247\":58,\"248\":11,\"249\":3,\"250\":1,\"251\":1,\"252\":1,\"253\":3,\"254\":1,\"255\":1,\"256\":3,\"259\":3,\"262\":2,\"263\":1,\"264\":3,\"265\":6,\"267\":1,\"273\":1,\"278\":1,\"279\":5,\"290\":1,\"333\":1,\"342\":1,\"369\":1,\"371\":1,\"372\":1,\"383\":1,\"740\":8,\"742\":5,\"745\":2,\"747\":4,\"748\":7,\"749\":1,\"751\":3,\"752\":34,\"753\":25,\"754\":1,\"756\":5,\"757\":26,\"758\":8,\"759\":12,\"761\":4,\"762\":1,\"763\":16,\"765\":6,\"766\":1,\"767\":1,\"768\":1,\"770\":2,\"771\":1,\"773\":2},\"2\":{\"774\":1}}],[\"darken\",{\"1\":{\"132\":1}}],[\"daggerappcomponent\",{\"1\":{\"214\":1}}],[\"dagger2version\",{\"1\":{\"209\":3}}],[\"dagger2\",{\"1\":{\"206\":1,\"215\":1},\"2\":{\"207\":1,\"220\":1}}],[\"daggerclientcomponent\",{\"1\":{\"202\":2}}],[\"dagger\",{\"0\":{\"198\":1,\"200\":1,\"208\":1},\"1\":{\"199\":2,\"206\":2,\"209\":6,\"214\":1,\"217\":1,\"219\":1}}],[\"datetime\",{\"1\":{\"234\":1,\"241\":1,\"383\":2}}],[\"date\",{\"1\":{\"196\":1,\"576\":2,\"578\":1,\"586\":1}}],[\"data>\",{\"1\":{\"784\":2}}],[\"data>元素的值\",{\"1\":{\"105\":1}}],[\"database\",{\"1\":{\"781\":1,\"786\":1}}],[\"databinding通过标记的形式将数据和组件绑定\",{\"1\":{\"785\":1}}],[\"databindingutil\",{\"1\":{\"784\":1}}],[\"databinding\",{\"0\":{\"784\":1},\"1\":{\"124\":1,\"784\":3}}],[\"data等绑定\",{\"1\":{\"757\":1}}],[\"data创建\",{\"1\":{\"757\":1}}],[\"data=\",{\"1\":{\"751\":1}}],[\"data中\",{\"1\":{\"737\":1}}],[\"dataclass\",{\"1\":{\"612\":1}}],[\"datas\",{\"1\":{\"737\":3}}],[\"datasource\",{\"1\":{\"399\":2}}],[\"datashared\",{\"1\":{\"284\":3}}],[\"dataurl\",{\"1\":{\"285\":2}}],[\"datalayer\",{\"1\":{\"126\":1}}],[\"data\",{\"1\":{\"6\":2,\"71\":10,\"83\":2,\"104\":2,\"105\":6,\"122\":1,\"124\":1,\"125\":1,\"126\":12,\"138\":12,\"153\":1,\"189\":1,\"237\":11,\"243\":23,\"244\":11,\"247\":19,\"262\":1,\"264\":2,\"282\":1,\"284\":3,\"371\":1,\"383\":14,\"384\":1,\"516\":1,\"523\":1,\"591\":1,\"612\":2,\"614\":1,\"731\":3,\"737\":13,\"751\":4,\"752\":14,\"753\":9,\"756\":1,\"757\":29,\"758\":6,\"759\":4,\"761\":5,\"770\":1,\"784\":1,\"786\":1,\"822\":1,\"847\":1,\"848\":2,\"850\":1}}],[\"da15d26d1a\",{\"1\":{\"104\":1}}],[\"dasusu\",{\"1\":{\"77\":1}}],[\"days\",{\"1\":{\"573\":1,\"574\":1}}],[\"daysize\",{\"1\":{\"521\":2}}],[\"day的大小\",{\"1\":{\"521\":1}}],[\"day为例\",{\"1\":{\"521\":1}}],[\"day\",{\"1\":{\"19\":3,\"521\":2,\"574\":1,\"578\":7}}],[\"dcim\",{\"1\":{\"6\":1}}],[\"0zlib\",{\"1\":{\"805\":1}}],[\"0~2\",{\"1\":{\"742\":1,\"833\":1}}],[\"02x\",{\"1\":{\"583\":1}}],[\"02都属于2010年的第52周\",{\"1\":{\"576\":1}}],[\"0022\",{\"1\":{\"690\":1}}],[\"00\",{\"1\":{\"578\":2}}],[\"00ff00\",{\"1\":{\"189\":1}}],[\"04的week\",{\"1\":{\"576\":1}}],[\"04都会得到2020\",{\"1\":{\"576\":1}}],[\"04都属于是2020年的第01周\",{\"1\":{\"576\":1}}],[\"01都被划到了2011年的第一周\",{\"1\":{\"576\":1}}],[\"01所在的周为2020的第一周\",{\"1\":{\"576\":1}}],[\"01\",{\"0\":{\"575\":1},\"1\":{\"492\":1,\"574\":1,\"575\":2,\"576\":8,\"735\":1}}],[\"0x3\",{\"1\":{\"247\":1}}],[\"0xff\",{\"1\":{\"557\":1}}],[\"0xffee0000\",{\"1\":{\"445\":1}}],[\"0xffeeee00\",{\"1\":{\"444\":1,\"445\":1}}],[\"0xff008000\",{\"1\":{\"444\":1}}],[\"0xfffffffffffff\",{\"1\":{\"247\":1}}],[\"0xff152648\",{\"1\":{\"153\":1}}],[\"03\",{\"1\":{\"128\":1,\"675\":2}}],[\"09\",{\"1\":{\"128\":1,\"250\":1,\"578\":1}}],[\"0800\",{\"1\":{\"578\":2}}],[\"08\",{\"1\":{\"128\":1,\"578\":3}}],[\"07\",{\"1\":{\"126\":1,\"128\":1,\"139\":1,\"243\":1,\"578\":1,\"675\":1,\"777\":1,\"778\":1,\"779\":1,\"809\":1}}],[\"05\",{\"1\":{\"126\":1,\"128\":1,\"776\":1,\"809\":2}}],[\"0f\",{\"1\":{\"101\":2,\"131\":6,\"146\":3,\"147\":2,\"196\":4}}],[\"06\",{\"1\":{\"13\":5,\"500\":1}}],[\"0\",{\"0\":{\"198\":1,\"236\":1,\"237\":1},\"1\":{\"6\":5,\"7\":1,\"15\":1,\"19\":1,\"26\":5,\"30\":1,\"36\":1,\"38\":1,\"39\":2,\"43\":1,\"54\":1,\"62\":1,\"63\":3,\"64\":1,\"71\":2,\"74\":3,\"87\":1,\"88\":1,\"89\":1,\"90\":2,\"92\":3,\"93\":2,\"94\":1,\"101\":1,\"115\":1,\"116\":1,\"137\":1,\"138\":8,\"147\":1,\"153\":20,\"159\":1,\"161\":1,\"162\":6,\"167\":1,\"173\":4,\"179\":2,\"182\":3,\"184\":3,\"189\":3,\"193\":1,\"228\":2,\"231\":7,\"232\":1,\"234\":8,\"235\":5,\"236\":1,\"237\":4,\"238\":9,\"243\":10,\"244\":6,\"247\":13,\"251\":1,\"265\":1,\"276\":2,\"289\":1,\"305\":2,\"308\":1,\"310\":1,\"311\":1,\"319\":4,\"320\":2,\"321\":2,\"324\":9,\"325\":3,\"330\":2,\"350\":7,\"352\":4,\"357\":3,\"358\":6,\"359\":3,\"360\":13,\"365\":1,\"369\":2,\"370\":1,\"374\":1,\"376\":2,\"396\":1,\"397\":1,\"398\":2,\"399\":2,\"400\":1,\"403\":1,\"405\":8,\"412\":36,\"413\":10,\"415\":2,\"417\":8,\"418\":31,\"419\":1,\"439\":14,\"440\":10,\"444\":3,\"445\":3,\"474\":2,\"486\":2,\"495\":1,\"500\":3,\"501\":1,\"505\":1,\"506\":1,\"507\":2,\"516\":5,\"517\":1,\"519\":1,\"521\":1,\"527\":1,\"528\":1,\"532\":3,\"533\":4,\"534\":3,\"538\":3,\"557\":3,\"560\":11,\"578\":4,\"587\":2,\"590\":1,\"594\":2,\"614\":2,\"636\":1,\"638\":1,\"645\":1,\"652\":1,\"666\":2,\"689\":1,\"701\":1,\"710\":1,\"723\":1,\"731\":4,\"745\":5,\"747\":6,\"748\":3,\"749\":1,\"753\":3,\"754\":1,\"757\":6,\"759\":6,\"760\":1,\"761\":2,\"784\":1,\"805\":3,\"816\":1,\"827\":1,\"828\":1,\"832\":1,\"837\":1,\"842\":1,\"847\":4,\"848\":4,\"850\":2,\"858\":1,\"879\":1,\"880\":3,\"888\":1,\"890\":6,\"896\":2,\"897\":4,\"898\":3,\"912\":1,\"913\":6,\"921\":6,\"927\":2}}],[\"0的hope主题\",{\"1\":{\"0\":1}}],[\"rf\",{\"1\":{\"794\":4}}],[\"rfc\",{\"1\":{\"578\":1}}],[\"r表示递归\",{\"1\":{\"682\":1}}],[\"rsa\",{\"1\":{\"670\":2}}],[\"rxjava\",{\"1\":{\"612\":2}}],[\"rm删除\",{\"1\":{\"682\":1}}],[\"rm\",{\"1\":{\"517\":1,\"682\":1,\"684\":1,\"794\":2}}],[\"rt\",{\"1\":{\"484\":1}}],[\"rtl\",{\"1\":{\"424\":1}}],[\"rtc\",{\"1\":{\"12\":2,\"13\":1,\"19\":1}}],[\"rgba8888\",{\"1\":{\"396\":1}}],[\"rpc\",{\"1\":{\"286\":1}}],[\"rpx\",{\"1\":{\"196\":1}}],[\"richtext\",{\"0\":{\"265\":1},\"1\":{\"251\":1,\"264\":7,\"265\":8,\"266\":1}}],[\"right指针向左移动查找比c小的值\",{\"1\":{\"924\":1}}],[\"rightindex\",{\"1\":{\"859\":7,\"927\":10}}],[\"rightpreorder\",{\"1\":{\"666\":2}}],[\"righttree\",{\"1\":{\"666\":3}}],[\"right\",{\"1\":{\"74\":2,\"75\":1,\"153\":1,\"352\":2,\"424\":1,\"440\":1,\"666\":2,\"783\":1,\"833\":1,\"834\":1,\"836\":18,\"924\":1,\"927\":8}}],[\"r>\",{\"1\":{\"232\":1}}],[\"rdp\",{\"1\":{\"196\":8}}],[\"raise\",{\"1\":{\"726\":1}}],[\"radial\",{\"0\":{\"342\":1},\"1\":{\"342\":1,\"343\":1,\"354\":1}}],[\"radius\",{\"1\":{\"330\":2}}],[\"radius=\",{\"1\":{\"167\":1}}],[\"raster\",{\"1\":{\"331\":1}}],[\"ratio\",{\"1\":{\"308\":1}}],[\"rather\",{\"1\":{\"126\":1,\"247\":1,\"586\":1}}],[\"range\",{\"1\":{\"360\":1,\"574\":1,\"921\":3}}],[\"rangeerror\",{\"1\":{\"294\":2}}],[\"randomaccessfile中\",{\"1\":{\"243\":1}}],[\"randomaccessfileops\",{\"1\":{\"243\":2}}],[\"randomaccessfile的open\",{\"1\":{\"243\":1}}],[\"randomaccessfile\",{\"1\":{\"243\":6}}],[\"race\",{\"1\":{\"247\":1}}],[\"ram\",{\"1\":{\"140\":2}}],[\"rawcast\",{\"1\":{\"759\":1}}],[\"rawgesturedetector\",{\"1\":{\"402\":1,\"415\":1,\"418\":2,\"422\":1,\"433\":1}}],[\"rawicdata\",{\"1\":{\"767\":1}}],[\"rawiamge\",{\"1\":{\"393\":1}}],[\"rawimagedatamap\",{\"1\":{\"384\":1}}],[\"rawimage\",{\"0\":{\"371\":1},\"1\":{\"366\":1,\"368\":1,\"370\":3,\"371\":2,\"372\":1,\"377\":2,\"393\":2,\"397\":1}}],[\"rawpath\",{\"1\":{\"243\":1}}],[\"rawreceiveport\",{\"1\":{\"229\":1,\"243\":2,\"244\":2,\"748\":6}}],[\"rawreceiveportimpl的static\",{\"1\":{\"748\":1}}],[\"rawreceiveportimpl\",{\"1\":{\"229\":1,\"235\":2}}],[\"rawuseofparameterizedtype\",{\"1\":{\"193\":1}}],[\"rawy\",{\"1\":{\"74\":1}}],[\"rawx\",{\"1\":{\"74\":1}}],[\"raw\",{\"1\":{\"6\":1,\"243\":1,\"248\":2,\"371\":1,\"384\":1,\"766\":1}}],[\"rules\",{\"1\":{\"128\":2}}],[\"rule\",{\"1\":{\"126\":1}}],[\"runloopasync的主要功能是触发\",{\"1\":{\"761\":1}}],[\"runloopasync开始\",{\"1\":{\"759\":1}}],[\"runloopasync方法中正式开始\",{\"1\":{\"759\":1}}],[\"runloopasync\",{\"1\":{\"759\":4,\"761\":1}}],[\"runlightweight\",{\"0\":{\"751\":1},\"1\":{\"750\":1,\"751\":1,\"756\":1}}],[\"run方法中指定的messagehandlertask\",{\"1\":{\"761\":1}}],[\"run方法中\",{\"1\":{\"755\":1}}],[\"run<spawnisolatetask>\",{\"1\":{\"754\":1}}],[\"runheavyweight\",{\"0\":{\"756\":1},\"1\":{\"750\":1,\"751\":1,\"756\":2}}],[\"runblocking<unit>\",{\"1\":{\"625\":1,\"629\":2,\"630\":1,\"656\":1}}],[\"runblocking\",{\"1\":{\"623\":1,\"638\":1,\"640\":1}}],[\"runoob\",{\"1\":{\"514\":1}}],[\"runzonedguarded\",{\"1\":{\"297\":2}}],[\"runapp\",{\"0\":{\"252\":1},\"1\":{\"251\":2,\"252\":2,\"257\":1,\"276\":1,\"279\":2,\"295\":1,\"297\":1,\"398\":1}}],[\"runimpl\",{\"1\":{\"247\":2,\"759\":2,\"761\":3}}],[\"runs\",{\"1\":{\"247\":1,\"285\":1,\"740\":1,\"748\":1,\"759\":1}}],[\"runpendingimmediatecallback则会执行\",{\"1\":{\"229\":1}}],[\"runpendingimmediatecallback\",{\"1\":{\"229\":3,\"238\":1}}],[\"runtimetype\",{\"1\":{\"332\":4,\"351\":1,\"391\":2}}],[\"runtimers方法中执行\",{\"1\":{\"238\":1}}],[\"runtimers中执行\",{\"1\":{\"238\":1}}],[\"runtimers\",{\"1\":{\"238\":2}}],[\"runtime\",{\"1\":{\"204\":2,\"205\":1,\"228\":1,\"237\":2,\"246\":2,\"247\":18,\"248\":2,\"496\":1,\"565\":1,\"568\":1,\"745\":2,\"747\":2,\"749\":1,\"750\":1,\"751\":2,\"752\":4,\"753\":9,\"754\":1,\"757\":7,\"758\":1,\"759\":7,\"760\":1,\"761\":5,\"763\":2,\"766\":3,\"767\":2,\"771\":1,\"772\":1}}],[\"runtimeexception\",{\"1\":{\"48\":1}}],[\"runningtoidlelocked\",{\"1\":{\"761\":1}}],[\"running\",{\"0\":{\"764\":1,\"769\":1,\"770\":1,\"771\":1},\"1\":{\"139\":1,\"193\":3,\"230\":1,\"247\":6,\"745\":1,\"759\":5,\"760\":2,\"761\":10,\"806\":1}}],[\"runnable\",{\"1\":{\"54\":3,\"56\":1,\"160\":2,\"193\":3,\"527\":2,\"621\":1,\"712\":1,\"759\":1}}],[\"run\",{\"0\":{\"451\":1,\"759\":1},\"1\":{\"126\":1,\"167\":1,\"193\":3,\"229\":1,\"230\":8,\"233\":2,\"241\":2,\"247\":7,\"251\":1,\"493\":1,\"496\":1,\"527\":2,\"712\":1,\"740\":1,\"750\":1,\"751\":2,\"752\":2,\"756\":3,\"757\":6,\"759\":8,\"761\":7,\"771\":1}}],[\"robert\",{\"1\":{\"865\":1,\"883\":1}}],[\"ro\",{\"1\":{\"728\":1}}],[\"rocks\",{\"1\":{\"663\":1}}],[\"route\",{\"1\":{\"350\":4,\"351\":2,\"745\":1}}],[\"route<dynamic>\",{\"1\":{\"350\":2}}],[\"routes\",{\"1\":{\"350\":1}}],[\"round\",{\"1\":{\"234\":1,\"358\":1,\"359\":1}}],[\"rotation\",{\"1\":{\"309\":1}}],[\"rotationtransition\",{\"1\":{\"309\":1,\"310\":2}}],[\"rotate\",{\"1\":{\"302\":1,\"310\":1,\"311\":1,\"334\":1,\"340\":1}}],[\"rowbytes\",{\"1\":{\"397\":4}}],[\"row\",{\"1\":{\"275\":1,\"276\":2,\"288\":1,\"289\":2}}],[\"romainguy\",{\"1\":{\"516\":2,\"522\":1,\"524\":1}}],[\"rom\",{\"1\":{\"140\":2}}],[\"roadmap\",{\"1\":{\"121\":1}}],[\"root用户可以更改\",{\"1\":{\"686\":1}}],[\"root用户为\",{\"1\":{\"686\":2}}],[\"roots\",{\"1\":{\"472\":2,\"753\":2}}],[\"rootschedulemicrotask\",{\"1\":{\"224\":4}}],[\"rootchildslot\",{\"1\":{\"256\":1}}],[\"rootrenderobjectelement\",{\"1\":{\"256\":2}}],[\"rootwidget\",{\"1\":{\"254\":5,\"256\":4}}],[\"rootnode\",{\"1\":{\"253\":2}}],[\"rootzone的同名方法\",{\"1\":{\"224\":1}}],[\"rootzone\",{\"0\":{\"225\":1,\"226\":1},\"1\":{\"224\":7,\"225\":1,\"232\":1,\"234\":2}}],[\"root\",{\"1\":{\"117\":2,\"224\":2,\"233\":6,\"243\":1,\"244\":1,\"251\":1,\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"258\":1,\"666\":3,\"686\":1,\"689\":1,\"731\":3,\"737\":4,\"748\":1,\"754\":2,\"757\":2,\"784\":1,\"811\":3,\"836\":2}}],[\"room需要\",{\"1\":{\"786\":1}}],[\"room\",{\"0\":{\"786\":1},\"1\":{\"87\":1,\"745\":1,\"786\":1}}],[\"r\",{\"1\":{\"54\":6,\"116\":2,\"117\":6,\"118\":1,\"153\":2,\"167\":3,\"178\":2,\"189\":4,\"193\":3,\"215\":1,\"241\":1,\"568\":1,\"570\":1,\"682\":3,\"689\":2,\"690\":2,\"691\":1,\"703\":1,\"723\":2,\"737\":2,\"742\":1,\"783\":1,\"784\":2,\"802\":1,\"814\":1,\"819\":2,\"823\":2}}],[\"r3\",{\"1\":{\"26\":1}}],[\"regions\",{\"1\":{\"768\":1}}],[\"registerisolategroup\",{\"1\":{\"758\":1}}],[\"registerimageloader\",{\"1\":{\"398\":2,\"399\":1}}],[\"registerimageloader注册具体的实现\",{\"1\":{\"398\":1}}],[\"registerstaticfield\",{\"1\":{\"753\":1}}],[\"registerglobalkey\",{\"1\":{\"256\":1}}],[\"registereventhandler\",{\"1\":{\"398\":1}}],[\"registererrorhandler\",{\"1\":{\"232\":1}}],[\"registered\",{\"1\":{\"228\":1,\"234\":1,\"243\":1,\"244\":1,\"398\":1,\"753\":1}}],[\"registerunarycallback<futureor<r>\",{\"1\":{\"232\":1}}],[\"register\",{\"1\":{\"63\":2,\"232\":1,\"235\":1,\"237\":1,\"753\":1}}],[\"registercallback\",{\"1\":{\"62\":2,\"63\":2,\"224\":1}}],[\"reevaluate\",{\"1\":{\"761\":1}}],[\"reentrantlock\",{\"1\":{\"606\":1}}],[\"reverted\",{\"1\":{\"759\":1}}],[\"reversed\",{\"1\":{\"850\":1}}],[\"reverseduration\",{\"1\":{\"319\":1}}],[\"reversecurve\",{\"1\":{\"348\":1}}],[\"reverseanimation\",{\"1\":{\"317\":1,\"352\":1}}],[\"reverse\",{\"1\":{\"316\":1,\"319\":2,\"320\":1,\"325\":3,\"327\":1,\"330\":1,\"352\":2,\"405\":2,\"418\":1,\"753\":1}}],[\"reverselookup\",{\"1\":{\"247\":1}}],[\"reusing\",{\"1\":{\"753\":1}}],[\"req\",{\"1\":{\"731\":2}}],[\"require\",{\"1\":{\"398\":2,\"495\":1}}],[\"required\",{\"1\":{\"255\":1,\"273\":5,\"276\":2,\"302\":1,\"309\":1,\"310\":1,\"311\":2,\"342\":3,\"346\":2,\"348\":13,\"359\":1,\"369\":2,\"441\":1,\"759\":1}}],[\"requestbody\",{\"1\":{\"711\":4}}],[\"requestcall对象的execute\",{\"1\":{\"713\":1}}],[\"requestcall类则是对okhttp3\",{\"1\":{\"712\":1}}],[\"requestcall\",{\"1\":{\"707\":1,\"711\":4,\"712\":5}}],[\"requestcode\",{\"1\":{\"15\":2,\"16\":1,\"19\":1,\"20\":1,\"173\":2}}],[\"requestlistener<drawable>\",{\"1\":{\"399\":1}}],[\"requesting\",{\"1\":{\"753\":1}}],[\"requestinfo\",{\"1\":{\"398\":3}}],[\"requestid\",{\"1\":{\"398\":3}}],[\"requests中去除对应的请求并尝试终止任务\",{\"1\":{\"398\":1}}],[\"requests\",{\"1\":{\"243\":1,\"398\":7,\"752\":1,\"753\":1,\"761\":1}}],[\"requested\",{\"1\":{\"237\":1,\"253\":1}}],[\"requestpermissions\",{\"1\":{\"173\":1}}],[\"request\",{\"1\":{\"173\":6,\"243\":12,\"244\":5,\"247\":23,\"398\":18,\"399\":6,\"708\":5,\"711\":10,\"712\":4,\"731\":3,\"745\":1,\"761\":1}}],[\"requestwindowfeature\",{\"1\":{\"24\":1}}],[\"reified\",{\"1\":{\"627\":1,\"647\":1}}],[\"reinterpreting\",{\"1\":{\"247\":1}}],[\"reinterpret\",{\"1\":{\"237\":1,\"247\":3,\"751\":1,\"752\":1,\"753\":2,\"756\":1,\"759\":2,\"761\":1}}],[\"rebuilt\",{\"1\":{\"273\":1,\"303\":1,\"307\":1,\"309\":1,\"310\":4}}],[\"rebuild方法中\",{\"1\":{\"256\":1}}],[\"rebuild\",{\"0\":{\"270\":1,\"271\":1},\"1\":{\"256\":2,\"264\":1,\"270\":2,\"273\":3,\"280\":1,\"282\":1,\"307\":1,\"332\":1,\"347\":2}}],[\"renderxxx\",{\"1\":{\"426\":1}}],[\"renderabstractviewport\",{\"1\":{\"425\":1,\"438\":2}}],[\"renderaligningshiftedbox\",{\"1\":{\"261\":1}}],[\"rendernestedscrollviewviewport\",{\"1\":{\"404\":1,\"405\":1}}],[\"rendersinglechildview\",{\"1\":{\"441\":1}}],[\"rendersinglechildviewport\",{\"0\":{\"438\":1},\"1\":{\"437\":5,\"438\":4,\"440\":1,\"441\":1}}],[\"rendershrinkwrappingviewport\",{\"0\":{\"428\":1},\"1\":{\"424\":4,\"426\":1,\"428\":3}}],[\"rendershiftedbox\",{\"1\":{\"261\":1}}],[\"rendersliverfillremainingwithscrollable\",{\"1\":{\"405\":1}}],[\"rendersliver\",{\"0\":{\"426\":1},\"1\":{\"402\":2,\"403\":1,\"405\":2,\"422\":3,\"425\":1,\"426\":4,\"430\":1,\"431\":1,\"433\":1}}],[\"rendertype\",{\"1\":{\"398\":3}}],[\"renderimage\",{\"0\":{\"372\":1},\"1\":{\"371\":1,\"372\":1,\"377\":1}}],[\"renderingtype表示图片渲染方式\",{\"1\":{\"398\":1}}],[\"renderingtype\",{\"1\":{\"398\":3}}],[\"renderingtype的值\",{\"1\":{\"394\":1}}],[\"renderingtype指定了\",{\"1\":{\"390\":1}}],[\"rendering\",{\"1\":{\"253\":5,\"254\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"265\":6,\"266\":1,\"333\":1}}],[\"render方法中\",{\"1\":{\"334\":1}}],[\"rendercustompainter\",{\"1\":{\"332\":4,\"335\":1}}],[\"rendercustompaint\",{\"0\":{\"332\":1},\"1\":{\"331\":3,\"332\":6,\"333\":4,\"335\":2}}],[\"renderboxcontainerdefaultsmixin<renderbox\",{\"1\":{\"265\":1}}],[\"renderbox\",{\"1\":{\"258\":1,\"261\":1,\"265\":1,\"347\":2,\"351\":1,\"372\":1,\"402\":2,\"403\":1,\"405\":1,\"422\":1,\"425\":3,\"433\":1,\"438\":3,\"446\":1}}],[\"rendered\",{\"1\":{\"253\":1}}],[\"rendererbinding\",{\"1\":{\"253\":3,\"254\":1}}],[\"render\",{\"1\":{\"252\":1,\"253\":1,\"258\":1,\"263\":1,\"270\":1,\"271\":1,\"372\":1,\"398\":2,\"438\":1}}],[\"renderproxybox\",{\"1\":{\"332\":1,\"335\":1}}],[\"renderparagraph\",{\"1\":{\"251\":1,\"261\":1,\"264\":1,\"265\":9}}],[\"renderpositionedbox可以按照给定的alignmentgeometry定位\",{\"1\":{\"261\":1}}],[\"renderpositionedbox是\",{\"1\":{\"261\":1}}],[\"renderpositionedbox\",{\"1\":{\"251\":2,\"256\":1,\"259\":5,\"261\":2,\"262\":1,\"264\":1,\"265\":1}}],[\"renderviewportbase<sliverlogicalcontainerparentdata>\",{\"1\":{\"428\":1}}],[\"renderviewportbase<sliverphysicalcontainerparentdata>\",{\"1\":{\"427\":1}}],[\"renderviewportbase<parentdataclass\",{\"1\":{\"425\":1}}],[\"renderviewportbase\",{\"0\":{\"425\":1},\"1\":{\"424\":1,\"425\":1,\"426\":3}}],[\"renderviewport\",{\"0\":{\"427\":1},\"1\":{\"405\":1,\"424\":4,\"426\":2,\"427\":2}}],[\"renderview和buildowner\",{\"1\":{\"266\":1}}],[\"renderviewelement\",{\"1\":{\"254\":4}}],[\"renderview\",{\"0\":{\"258\":1},\"1\":{\"251\":1,\"252\":2,\"253\":11,\"254\":4,\"255\":3,\"256\":10,\"257\":1,\"258\":4,\"259\":1,\"261\":1,\"264\":1,\"265\":1}}],[\"renderobjects\",{\"1\":{\"267\":1}}],[\"renderobject插入到\",{\"1\":{\"265\":1}}],[\"renderobjectelement\",{\"1\":{\"256\":2,\"262\":1,\"263\":1,\"265\":9,\"426\":1}}],[\"renderobjectwithchildmixin\",{\"1\":{\"438\":1}}],[\"renderobjectwithchildmixin<renderbox>\",{\"1\":{\"438\":2}}],[\"renderobjectwithchildmixin<renderobject>\",{\"1\":{\"265\":2}}],[\"renderobjectwithchildmixin<t>\",{\"1\":{\"255\":1}}],[\"renderobjectwidget\",{\"1\":{\"255\":1,\"256\":2,\"262\":1,\"265\":2,\"445\":1}}],[\"renderobject>\",{\"1\":{\"255\":1,\"256\":2}}],[\"renderobjecttowidgetadapter在attachtorendertree\",{\"1\":{\"256\":1}}],[\"renderobjecttowidgetadapter<t>\",{\"1\":{\"256\":1}}],[\"renderobjecttowidgetadapter<t\",{\"1\":{\"255\":1,\"256\":1}}],[\"renderobjecttowidgetadapter<renderbox>\",{\"1\":{\"254\":1}}],[\"renderobjecttowidgetadapter\",{\"0\":{\"255\":1},\"1\":{\"254\":2,\"255\":3,\"256\":5,\"258\":1,\"264\":1,\"265\":1,\"266\":1}}],[\"renderobjecttowidgetelement<t\",{\"1\":{\"256\":1}}],[\"renderobjecttowidgetelement<t>\",{\"1\":{\"255\":2,\"256\":2}}],[\"renderobjecttowidgetelement<renderbox>\",{\"1\":{\"254\":1}}],[\"renderobjecttowidgetelementmount\",{\"1\":{\"255\":1}}],[\"renderobjecttowidgetelement\",{\"1\":{\"251\":2,\"254\":2,\"256\":6,\"259\":4,\"262\":2,\"264\":1,\"265\":1,\"266\":2}}],[\"renderobject\",{\"1\":{\"251\":4,\"253\":3,\"254\":1,\"255\":3,\"256\":4,\"257\":2,\"258\":1,\"259\":8,\"261\":2,\"264\":6,\"265\":16,\"269\":1,\"332\":2,\"348\":1,\"351\":2,\"405\":1,\"424\":5,\"426\":13,\"437\":4,\"438\":1}}],[\"renderobjet\",{\"1\":{\"251\":1}}],[\"rendermoviedetails\",{\"1\":{\"126\":1}}],[\"renamelink\",{\"1\":{\"247\":1}}],[\"rename\",{\"1\":{\"247\":2}}],[\"re\",{\"1\":{\"238\":2,\"244\":1,\"285\":2,\"350\":1,\"351\":1,\"352\":1,\"376\":2,\"737\":1,\"753\":1,\"761\":2}}],[\"reflect\",{\"1\":{\"552\":1,\"553\":2}}],[\"reflected\",{\"1\":{\"552\":1}}],[\"reflection\",{\"1\":{\"552\":1}}],[\"reflect反射调用类\",{\"1\":{\"497\":1}}],[\"refcount\",{\"1\":{\"237\":1}}],[\"references\",{\"1\":{\"493\":1,\"496\":2,\"519\":1}}],[\"reference\",{\"1\":{\"7\":1,\"496\":1,\"523\":1,\"583\":1,\"587\":1,\"594\":1,\"636\":1}}],[\"remember\",{\"1\":{\"631\":1,\"761\":1}}],[\"remains\",{\"1\":{\"247\":1}}],[\"remainingdelta\",{\"1\":{\"418\":4}}],[\"remainingpaintextent\",{\"1\":{\"405\":2}}],[\"remaining++\",{\"1\":{\"231\":1}}],[\"remaining\",{\"1\":{\"231\":13,\"351\":1}}],[\"removefirst\",{\"1\":{\"761\":1}}],[\"removeonexitlistener这些指令消息都是压入到obb\",{\"1\":{\"745\":1}}],[\"remove操作\",{\"1\":{\"528\":1}}],[\"remove都只是更新了本线程中threadlocal对象对应的值\",{\"1\":{\"527\":1}}],[\"remove方法\",{\"1\":{\"525\":1}}],[\"remove的时候都需要使用二分法\",{\"1\":{\"523\":1}}],[\"removestatuslistener\",{\"1\":{\"316\":1,\"327\":1}}],[\"removelistener\",{\"1\":{\"310\":2,\"316\":1,\"327\":1,\"332\":3,\"333\":3,\"376\":2,\"438\":2}}],[\"removelast\",{\"1\":{\"244\":1}}],[\"removed\",{\"1\":{\"263\":1,\"351\":1,\"376\":1,\"395\":1}}],[\"removeviews\",{\"1\":{\"189\":1}}],[\"removeat\",{\"1\":{\"95\":1}}],[\"remove\",{\"0\":{\"89\":1,\"95\":1},\"1\":{\"63\":1,\"89\":1,\"95\":1,\"243\":4,\"244\":3,\"270\":1,\"351\":2,\"376\":3,\"395\":1,\"398\":1,\"560\":1,\"850\":1}}],[\"removenotification\",{\"1\":{\"43\":1}}],[\"remoteview\",{\"1\":{\"189\":1}}],[\"remoteviews\",{\"1\":{\"189\":9}}],[\"remotecallbacklist<>\",{\"1\":{\"63\":1}}],[\"remotecallbacklist<taskcallback>\",{\"1\":{\"63\":1}}],[\"remotecallbacklist\",{\"1\":{\"63\":5}}],[\"remoteexception\",{\"1\":{\"62\":6,\"63\":7,\"71\":3,\"138\":3,\"616\":1}}],[\"remote\",{\"0\":{\"453\":1},\"1\":{\"36\":3,\"39\":1,\"71\":2,\"138\":2,\"672\":1,\"674\":1}}],[\"releasing\",{\"1\":{\"761\":1}}],[\"released\",{\"1\":{\"761\":1}}],[\"releaserequestswitharguments\",{\"1\":{\"398\":1}}],[\"releaseimagerequests\",{\"1\":{\"398\":4}}],[\"releaseimagerequest\",{\"1\":{\"396\":1,\"397\":1}}],[\"release模式下会\",{\"1\":{\"295\":1}}],[\"release下则不会\",{\"1\":{\"295\":1}}],[\"release\",{\"1\":{\"30\":1,\"241\":1,\"247\":1,\"292\":1,\"295\":2,\"760\":1,\"761\":4}}],[\"reload\",{\"1\":{\"737\":1,\"763\":1}}],[\"reloaded\",{\"1\":{\"126\":1,\"128\":1}}],[\"rely\",{\"1\":{\"523\":1,\"771\":1}}],[\"related\",{\"1\":{\"752\":1}}],[\"relativerect\",{\"1\":{\"352\":2}}],[\"relativepositionedtransition\",{\"1\":{\"309\":1}}],[\"relative\",{\"1\":{\"302\":1,\"309\":1,\"752\":1}}],[\"relationship\",{\"1\":{\"269\":1}}],[\"relayoutwhensystemfontschangemixin\",{\"1\":{\"265\":1}}],[\"relies\",{\"1\":{\"229\":1}}],[\"red\",{\"1\":{\"445\":1}}],[\"redmi\",{\"1\":{\"196\":1}}],[\"reduce\",{\"1\":{\"92\":1,\"412\":1,\"652\":1,\"770\":1}}],[\"redeliver\",{\"1\":{\"36\":2}}],[\"redelivery\",{\"1\":{\"36\":1}}],[\"repo\",{\"1\":{\"812\":1}}],[\"reporterror\",{\"1\":{\"759\":5}}],[\"report\",{\"1\":{\"759\":1}}],[\"reponse\",{\"1\":{\"712\":1}}],[\"repos\",{\"1\":{\"622\":2}}],[\"repository\",{\"1\":{\"125\":1,\"126\":3}}],[\"reposlistheader\",{\"1\":{\"125\":1}}],[\"reposlist\",{\"1\":{\"125\":3}}],[\"repostopbar\",{\"1\":{\"125\":1}}],[\"reposviewmodel\",{\"1\":{\"125\":1}}],[\"reposcontract\",{\"1\":{\"125\":9}}],[\"reposscreen\",{\"1\":{\"125\":1}}],[\"reposscreendestination\",{\"1\":{\"125\":1}}],[\"rep\",{\"1\":{\"583\":11}}],[\"replace\",{\"1\":{\"620\":1}}],[\"replacement\",{\"1\":{\"583\":1}}],[\"replaceimage\",{\"1\":{\"369\":2}}],[\"replyhandler\",{\"1\":{\"83\":1}}],[\"replymessenger\",{\"1\":{\"83\":2}}],[\"replymsg\",{\"1\":{\"39\":3}}],[\"reply\",{\"1\":{\"71\":12,\"138\":10,\"247\":6}}],[\"replytoport发送处理结果\",{\"1\":{\"244\":1}}],[\"replytoport\",{\"1\":{\"243\":7,\"244\":7,\"247\":2,\"249\":1}}],[\"replyto\",{\"1\":{\"39\":3,\"83\":2}}],[\"repaintboundary\",{\"1\":{\"352\":1}}],[\"repaint\",{\"1\":{\"273\":1,\"330\":2,\"332\":1,\"333\":7}}],[\"represented\",{\"1\":{\"583\":1}}],[\"representation\",{\"1\":{\"492\":2,\"494\":1}}],[\"representative\",{\"1\":{\"417\":1}}],[\"representable\",{\"1\":{\"247\":1}}],[\"representing\",{\"1\":{\"412\":1,\"615\":1}}],[\"represent\",{\"1\":{\"126\":1}}],[\"repeatingsimulation\",{\"0\":{\"325\":1},\"1\":{\"325\":1}}],[\"repeating\",{\"1\":{\"234\":5,\"238\":3}}],[\"repeatcounter++\",{\"1\":{\"222\":1}}],[\"repeatcount\",{\"1\":{\"147\":1}}],[\"repeat\",{\"1\":{\"19\":2,\"20\":1,\"222\":1,\"319\":1,\"327\":1,\"330\":1,\"370\":2,\"636\":1}}],[\"retval\",{\"1\":{\"752\":3}}],[\"rethrow\",{\"1\":{\"395\":1,\"748\":1}}],[\"retrofitapi\",{\"1\":{\"622\":1}}],[\"retrofit\",{\"1\":{\"622\":1}}],[\"retries\",{\"1\":{\"383\":1}}],[\"retrieve\",{\"1\":{\"229\":1,\"822\":1}}],[\"retry\",{\"1\":{\"36\":1,\"125\":2}}],[\"retentionpolicy\",{\"1\":{\"565\":1,\"568\":1}}],[\"retention\",{\"1\":{\"204\":2,\"205\":1,\"565\":1,\"568\":1}}],[\"returnaddress\",{\"1\":{\"459\":1}}],[\"returnport\",{\"1\":{\"243\":1,\"244\":2}}],[\"returns\",{\"1\":{\"214\":1,\"246\":2,\"263\":4,\"270\":1,\"412\":1,\"583\":1,\"594\":1,\"636\":1,\"757\":1,\"759\":2,\"761\":1}}],[\"returned\",{\"1\":{\"92\":1,\"183\":1,\"232\":1,\"822\":1}}],[\"return\",{\"1\":{\"6\":2,\"15\":1,\"20\":1,\"25\":5,\"26\":4,\"27\":2,\"35\":1,\"38\":2,\"39\":1,\"50\":1,\"53\":1,\"54\":3,\"62\":1,\"63\":6,\"71\":9,\"80\":1,\"83\":3,\"87\":1,\"88\":3,\"92\":7,\"94\":1,\"101\":8,\"112\":4,\"138\":12,\"159\":3,\"179\":2,\"187\":1,\"193\":4,\"196\":3,\"222\":2,\"224\":3,\"228\":3,\"229\":2,\"230\":4,\"231\":5,\"232\":3,\"233\":4,\"234\":9,\"237\":3,\"238\":1,\"241\":1,\"243\":18,\"244\":3,\"246\":3,\"247\":28,\"248\":4,\"253\":1,\"256\":1,\"259\":2,\"264\":1,\"265\":2,\"270\":3,\"273\":6,\"276\":3,\"279\":1,\"281\":1,\"282\":2,\"284\":1,\"295\":3,\"302\":1,\"304\":3,\"305\":1,\"307\":1,\"308\":3,\"310\":1,\"311\":2,\"316\":1,\"320\":1,\"324\":3,\"325\":2,\"332\":1,\"334\":1,\"340\":1,\"342\":1,\"347\":4,\"348\":2,\"349\":3,\"350\":2,\"351\":3,\"352\":4,\"357\":3,\"358\":4,\"359\":2,\"360\":3,\"368\":1,\"370\":3,\"374\":3,\"376\":4,\"383\":4,\"384\":3,\"391\":4,\"392\":4,\"393\":2,\"395\":1,\"396\":4,\"397\":1,\"398\":7,\"399\":2,\"403\":2,\"405\":3,\"407\":1,\"412\":2,\"413\":3,\"415\":3,\"417\":4,\"418\":1,\"423\":4,\"424\":6,\"426\":2,\"436\":3,\"437\":1,\"438\":1,\"439\":8,\"440\":4,\"441\":3,\"444\":1,\"445\":1,\"485\":1,\"486\":1,\"500\":1,\"506\":1,\"513\":1,\"517\":1,\"527\":3,\"545\":1,\"546\":1,\"547\":1,\"548\":1,\"549\":1,\"553\":1,\"557\":4,\"583\":3,\"586\":1,\"587\":5,\"590\":1,\"594\":3,\"612\":2,\"614\":3,\"619\":3,\"620\":1,\"621\":1,\"666\":1,\"710\":3,\"711\":3,\"712\":3,\"726\":4,\"731\":4,\"737\":5,\"745\":1,\"747\":2,\"748\":4,\"749\":1,\"751\":5,\"752\":8,\"753\":11,\"754\":1,\"756\":2,\"757\":6,\"758\":1,\"759\":15,\"760\":3,\"761\":6,\"823\":1,\"833\":1,\"834\":1,\"836\":3,\"850\":6,\"880\":4,\"890\":2,\"896\":1,\"897\":1,\"898\":1,\"911\":2,\"913\":3,\"921\":5,\"927\":2}}],[\"recreate\",{\"1\":{\"442\":1}}],[\"recreatelistener\",{\"1\":{\"368\":2}}],[\"recursive\",{\"1\":{\"383\":1}}],[\"recently\",{\"1\":{\"376\":1}}],[\"receivechannel<string>\",{\"1\":{\"646\":2}}],[\"receivechannel<int>\",{\"1\":{\"638\":2}}],[\"receivechannel<e>\",{\"1\":{\"636\":1}}],[\"receivechannel\",{\"1\":{\"636\":4}}],[\"receivebroadcaststream\",{\"1\":{\"398\":1}}],[\"received\",{\"1\":{\"243\":1,\"244\":1,\"247\":1,\"426\":1,\"742\":3}}],[\"receiveport监听\",{\"1\":{\"243\":1}}],[\"receiveport的回调\",{\"1\":{\"244\":1}}],[\"receiveport的\",{\"1\":{\"236\":1,\"237\":1,\"244\":1}}],[\"receiveport对应的\",{\"1\":{\"235\":1}}],[\"receiveportactive\",{\"1\":{\"235\":3,\"236\":1,\"237\":1}}],[\"receiveport\",{\"1\":{\"235\":6,\"237\":1,\"243\":8,\"244\":7,\"249\":2,\"740\":1,\"742\":11,\"745\":2}}],[\"receiver>\",{\"1\":{\"189\":1}}],[\"receiver\",{\"1\":{\"105\":1,\"767\":2,\"768\":1}}],[\"receive\",{\"1\":{\"26\":1,\"235\":1,\"237\":2,\"247\":1,\"636\":3,\"638\":3,\"640\":1}}],[\"record\",{\"1\":{\"485\":1}}],[\"recorder\",{\"1\":{\"334\":2}}],[\"recording\",{\"1\":{\"334\":1}}],[\"recognised\",{\"1\":{\"231\":1}}],[\"recognized\",{\"1\":{\"231\":1}}],[\"recttween\",{\"1\":{\"348\":1}}],[\"rectclip\",{\"1\":{\"342\":1,\"354\":1}}],[\"rectf\",{\"1\":{\"162\":4}}],[\"rect\",{\"1\":{\"153\":3,\"348\":7,\"349\":2,\"352\":3,\"353\":1}}],[\"reclaim\",{\"1\":{\"139\":1}}],[\"recycleview的layoutmanager\",{\"1\":{\"781\":1}}],[\"recycleview\",{\"1\":{\"77\":1}}],[\"recycle\",{\"1\":{\"49\":2,\"71\":2,\"138\":2}}],[\"recyclerreplymsghandler\",{\"1\":{\"39\":2}}],[\"recyclerview\",{\"1\":{\"2\":3,\"111\":1,\"152\":1,\"153\":7,\"784\":3}}],[\"reacquire\",{\"1\":{\"761\":2}}],[\"reachable\",{\"1\":{\"771\":2}}],[\"reach\",{\"1\":{\"418\":1}}],[\"realnode\",{\"1\":{\"850\":2}}],[\"real\",{\"1\":{\"770\":1}}],[\"realsize\",{\"1\":{\"521\":1}}],[\"realtime\",{\"1\":{\"12\":2,\"20\":1}}],[\"reassemble\",{\"1\":{\"367\":1}}],[\"reader\",{\"1\":{\"753\":1}}],[\"readexternal\",{\"1\":{\"590\":1}}],[\"readexception\",{\"1\":{\"71\":1,\"138\":1}}],[\"readymessage\",{\"1\":{\"748\":8}}],[\"ready\",{\"1\":{\"748\":3}}],[\"readyport\",{\"1\":{\"748\":15}}],[\"readytoproduceframes\",{\"1\":{\"254\":1}}],[\"readtimeout\",{\"1\":{\"708\":1,\"712\":1}}],[\"readtext\",{\"1\":{\"612\":1}}],[\"readin\",{\"1\":{\"618\":1}}],[\"readint\",{\"1\":{\"590\":1,\"594\":1}}],[\"readinto\",{\"1\":{\"247\":1}}],[\"readparcelable\",{\"1\":{\"593\":1}}],[\"readfile\",{\"1\":{\"752\":1}}],[\"readfields\",{\"1\":{\"584\":4}}],[\"readfloat\",{\"1\":{\"590\":1}}],[\"readlong\",{\"1\":{\"590\":1}}],[\"readandwriteobject2\",{\"1\":{\"587\":1}}],[\"readasbytes\",{\"1\":{\"241\":5,\"243\":8,\"383\":2}}],[\"readout\",{\"1\":{\"618\":1}}],[\"readordinaryobject\",{\"1\":{\"583\":2}}],[\"readobjectgraphcopymessage\",{\"1\":{\"759\":1}}],[\"readobject自己处理这些值的序列化\",{\"1\":{\"585\":1}}],[\"readobjectnodata方法主要用在序列化流和我们要反序列化的类不一致时初始化一些必要的状态\",{\"1\":{\"584\":1}}],[\"readobjectnodata\",{\"1\":{\"584\":2}}],[\"readobject0\",{\"1\":{\"583\":2}}],[\"readobject\",{\"1\":{\"583\":2,\"584\":2,\"586\":1,\"587\":2,\"590\":1}}],[\"readresolve\",{\"0\":{\"583\":1},\"1\":{\"583\":6,\"598\":1}}],[\"reads\",{\"1\":{\"437\":1}}],[\"readsync\",{\"1\":{\"243\":2}}],[\"readbyte\",{\"1\":{\"247\":1}}],[\"readdatachunked\",{\"1\":{\"243\":2}}],[\"readme\",{\"1\":{\"121\":1}}],[\"read\",{\"1\":{\"6\":2,\"243\":12,\"247\":2,\"486\":1,\"586\":1,\"618\":1,\"731\":1,\"737\":1,\"752\":1}}],[\"respositoy\",{\"1\":{\"810\":3}}],[\"respone\",{\"1\":{\"737\":3}}],[\"responsibility\",{\"1\":{\"374\":1}}],[\"responsible\",{\"1\":{\"228\":1}}],[\"responseport\",{\"1\":{\"745\":3}}],[\"response\",{\"1\":{\"243\":10,\"247\":4,\"285\":3,\"398\":2,\"399\":5,\"645\":4,\"708\":2,\"712\":7,\"731\":2,\"745\":5}}],[\"respect\",{\"1\":{\"754\":1}}],[\"restart\",{\"1\":{\"630\":2}}],[\"restricted\",{\"1\":{\"615\":2,\"748\":1}}],[\"restrictions\",{\"1\":{\"552\":1}}],[\"restorationid\",{\"1\":{\"405\":2,\"423\":2,\"436\":2}}],[\"restoring\",{\"1\":{\"351\":1}}],[\"restores\",{\"1\":{\"282\":1}}],[\"restoretocount\",{\"1\":{\"131\":1,\"162\":1}}],[\"restore\",{\"1\":{\"26\":2,\"162\":1,\"332\":1,\"334\":2,\"337\":1}}],[\"resizeifneeded\",{\"1\":{\"365\":1}}],[\"resizeimage\",{\"1\":{\"365\":2}}],[\"resinfolist\",{\"1\":{\"6\":2}}],[\"resync\",{\"1\":{\"322\":1}}],[\"resumecapability多次pause\",{\"1\":{\"744\":1}}],[\"resumecapability\",{\"1\":{\"744\":5}}],[\"resume\",{\"1\":{\"351\":1,\"744\":4,\"745\":1}}],[\"resumed\",{\"1\":{\"287\":1}}],[\"resultarr\",{\"1\":{\"913\":6}}],[\"resulting\",{\"1\":{\"636\":1,\"771\":1}}],[\"results\",{\"1\":{\"398\":8}}],[\"resultorlisteners\",{\"1\":{\"232\":2}}],[\"result>\",{\"1\":{\"193\":3}}],[\"result\",{\"1\":{\"26\":4,\"138\":5,\"159\":4,\"193\":16,\"224\":4,\"231\":5,\"232\":3,\"237\":4,\"241\":1,\"243\":9,\"244\":1,\"247\":28,\"248\":7,\"264\":2,\"284\":3,\"320\":2,\"349\":2,\"370\":9,\"376\":12,\"383\":7,\"393\":4,\"398\":8,\"399\":2,\"408\":1,\"441\":4,\"557\":5,\"583\":1,\"614\":2,\"701\":1,\"747\":5,\"752\":12,\"753\":31,\"759\":16,\"761\":2,\"850\":2,\"890\":2,\"896\":9,\"897\":9,\"898\":8}}],[\"resetinitializing\",{\"1\":{\"752\":1}}],[\"resetactiveapicall\",{\"1\":{\"247\":1}}],[\"reset\",{\"1\":{\"238\":1,\"761\":1}}],[\"res\",{\"1\":{\"106\":2,\"115\":2,\"167\":3,\"189\":5,\"196\":2,\"486\":1,\"737\":3,\"783\":2,\"784\":4,\"816\":1}}],[\"resolution\",{\"1\":{\"493\":2}}],[\"resolved\",{\"1\":{\"497\":1,\"752\":4,\"767\":1}}],[\"resolveclass\",{\"1\":{\"485\":2}}],[\"resolve方法时\",{\"1\":{\"374\":1}}],[\"resolve方法获取\",{\"1\":{\"374\":1}}],[\"resolve方法创建并更新imagestream\",{\"1\":{\"372\":1}}],[\"resolve方法创建并返回\",{\"1\":{\"365\":1}}],[\"resolve\",{\"1\":{\"367\":1,\"376\":1,\"377\":1,\"395\":1,\"485\":2,\"748\":1,\"752\":1,\"759\":2,\"766\":1}}],[\"resolveimage\",{\"0\":{\"367\":1},\"1\":{\"367\":3,\"374\":1}}],[\"resolveinfo\",{\"1\":{\"6\":3}}],[\"resolvescript\",{\"1\":{\"752\":1}}],[\"resolvestreamforkey\",{\"1\":{\"384\":1}}],[\"resolvestreamforkey等一系列通用方法\",{\"1\":{\"383\":1}}],[\"resolvestreamforkey方法以使用指定的\",{\"1\":{\"384\":1}}],[\"resolvestreamforkey方法获取\",{\"1\":{\"375\":1}}],[\"resolvestreamforkey方法\",{\"1\":{\"374\":1}}],[\"resolvestreamforkey方法从\",{\"1\":{\"365\":1}}],[\"resolvesymboliclinks\",{\"1\":{\"247\":1}}],[\"resolver\",{\"1\":{\"365\":1}}],[\"resource\",{\"1\":{\"399\":6,\"557\":1,\"612\":1,\"686\":1,\"823\":1}}],[\"resourceinfo\",{\"1\":{\"243\":4}}],[\"resourceid\",{\"1\":{\"101\":2}}],[\"resources>\",{\"1\":{\"116\":1}}],[\"resources\",{\"1\":{\"101\":12,\"196\":10,\"484\":1,\"745\":1,\"819\":1,\"823\":6}}],[\"resource=\",{\"1\":{\"6\":1,\"189\":1}}],[\"1和\",{\"1\":{\"919\":2}}],[\"1项\",{\"1\":{\"911\":2}}],[\"1+2\",{\"1\":{\"890\":1}}],[\"1~n\",{\"1\":{\"863\":1}}],[\"1~99\",{\"1\":{\"76\":1}}],[\"1modules\",{\"1\":{\"805\":1}}],[\"1v8\",{\"1\":{\"805\":1}}],[\"1os\",{\"1\":{\"805\":1}}],[\"1a\",{\"1\":{\"659\":2}}],[\"1s\",{\"1\":{\"636\":1}}],[\"1这样的语句\",{\"1\":{\"602\":1}}],[\"1l\",{\"1\":{\"582\":1,\"614\":3}}],[\"1d44bcfa\",{\"1\":{\"487\":1}}],[\"1dp\",{\"1\":{\"100\":1}}],[\"1112l\",{\"1\":{\"723\":1}}],[\"11~14则就是步骤\",{\"1\":{\"708\":1}}],[\"11\",{\"1\":{\"247\":1,\"578\":1}}],[\"1176px\",{\"1\":{\"100\":1}}],[\"1176\",{\"1\":{\"100\":1}}],[\"1996\",{\"1\":{\"578\":1}}],[\"19\",{\"1\":{\"196\":1,\"247\":1,\"586\":1}}],[\"1访问本地网址\",{\"1\":{\"184\":1}}],[\"1f\",{\"1\":{\"147\":1}}],[\"17881581\",{\"1\":{\"490\":1}}],[\"17的说法\",{\"1\":{\"400\":1}}],[\"17\",{\"1\":{\"139\":1,\"221\":1,\"247\":1,\"401\":1,\"731\":1,\"740\":1}}],[\"183\",{\"1\":{\"904\":1}}],[\"183008\",{\"1\":{\"6\":1}}],[\"189\",{\"1\":{\"578\":1}}],[\"18b4aac2\",{\"1\":{\"487\":1}}],[\"18\",{\"1\":{\"130\":1,\"247\":1,\"400\":1,\"568\":1,\"619\":2,\"809\":2}}],[\"1px\",{\"1\":{\"100\":1}}],[\"1541\",{\"1\":{\"241\":1}}],[\"150dp\",{\"1\":{\"189\":1}}],[\"15807167\",{\"1\":{\"77\":1}}],[\"15\",{\"1\":{\"30\":1,\"247\":1,\"911\":1}}],[\"15min\",{\"1\":{\"10\":1}}],[\"160\",{\"1\":{\"100\":6,\"196\":2}}],[\"160dpi\",{\"1\":{\"100\":1}}],[\"16\",{\"1\":{\"13\":1,\"195\":1,\"247\":3,\"500\":1,\"505\":1,\"511\":1,\"516\":5,\"519\":1,\"557\":5,\"777\":1}}],[\"137\",{\"1\":{\"904\":2}}],[\"136\",{\"1\":{\"100\":1}}],[\"130fdd755471\",{\"1\":{\"77\":1}}],[\"13\",{\"1\":{\"13\":1,\"116\":1,\"117\":1,\"128\":1,\"247\":1,\"904\":1,\"920\":1}}],[\"14316\",{\"1\":{\"805\":1}}],[\"14j\",{\"1\":{\"723\":1}}],[\"141\",{\"1\":{\"343\":3}}],[\"1440\",{\"1\":{\"100\":1}}],[\"1440px\",{\"1\":{\"100\":1}}],[\"14\",{\"1\":{\"13\":5,\"247\":1,\"723\":1}}],[\"14+\",{\"1\":{\"10\":1}}],[\"12permalink\",{\"1\":{\"809\":1}}],[\"12updated\",{\"1\":{\"809\":1}}],[\"123\",{\"1\":{\"684\":3}}],[\"123456\",{\"1\":{\"557\":1}}],[\"1256\",{\"1\":{\"631\":1}}],[\"128\",{\"1\":{\"521\":1,\"557\":2}}],[\"12193259\",{\"1\":{\"516\":1}}],[\"120\",{\"1\":{\"444\":2,\"445\":1}}],[\"12211553\",{\"1\":{\"138\":1}}],[\"12\",{\"1\":{\"13\":5,\"247\":1,\"492\":1,\"511\":1,\"519\":2,\"572\":2,\"575\":1,\"576\":15,\"578\":2,\"586\":1,\"754\":1}}],[\"1\",{\"0\":{\"38\":1,\"104\":1,\"115\":1,\"144\":1,\"178\":1,\"198\":1,\"222\":1,\"457\":1,\"464\":1,\"471\":1,\"532\":1,\"545\":1,\"612\":1,\"764\":1,\"812\":1},\"1\":{\"6\":2,\"19\":1,\"26\":3,\"30\":3,\"36\":1,\"39\":1,\"66\":1,\"83\":2,\"92\":4,\"100\":3,\"101\":3,\"105\":2,\"112\":2,\"115\":1,\"116\":1,\"124\":2,\"131\":1,\"133\":2,\"137\":4,\"138\":2,\"140\":1,\"143\":1,\"144\":2,\"145\":3,\"147\":1,\"153\":4,\"159\":1,\"167\":3,\"173\":2,\"182\":2,\"190\":1,\"195\":1,\"196\":4,\"222\":2,\"223\":1,\"228\":2,\"230\":7,\"234\":1,\"237\":4,\"238\":1,\"241\":1,\"243\":4,\"244\":2,\"247\":8,\"256\":2,\"258\":1,\"264\":1,\"265\":1,\"270\":1,\"272\":1,\"273\":3,\"276\":3,\"294\":1,\"296\":1,\"308\":1,\"319\":2,\"324\":3,\"325\":1,\"330\":1,\"332\":1,\"350\":3,\"352\":2,\"357\":1,\"358\":2,\"359\":1,\"360\":5,\"365\":1,\"369\":2,\"370\":1,\"374\":1,\"376\":4,\"383\":2,\"396\":2,\"400\":2,\"405\":1,\"412\":5,\"427\":3,\"457\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"486\":2,\"490\":1,\"500\":1,\"501\":2,\"504\":3,\"507\":4,\"508\":2,\"511\":1,\"513\":1,\"516\":2,\"519\":2,\"527\":6,\"530\":1,\"532\":6,\"533\":4,\"534\":8,\"538\":1,\"547\":2,\"557\":4,\"568\":1,\"569\":1,\"574\":1,\"575\":7,\"576\":10,\"577\":2,\"578\":4,\"583\":2,\"587\":1,\"591\":1,\"606\":1,\"612\":3,\"614\":2,\"617\":1,\"618\":1,\"622\":2,\"625\":1,\"626\":1,\"629\":5,\"630\":4,\"631\":5,\"633\":1,\"638\":5,\"645\":1,\"646\":2,\"651\":3,\"656\":3,\"659\":2,\"666\":6,\"674\":2,\"701\":1,\"708\":2,\"723\":3,\"724\":5,\"726\":1,\"731\":3,\"740\":1,\"742\":1,\"744\":1,\"745\":2,\"747\":2,\"748\":3,\"753\":1,\"758\":1,\"759\":4,\"760\":1,\"761\":1,\"766\":2,\"767\":2,\"768\":1,\"784\":1,\"794\":2,\"801\":1,\"805\":6,\"816\":1,\"826\":1,\"827\":4,\"836\":1,\"837\":1,\"842\":1,\"847\":4,\"848\":4,\"849\":1,\"850\":1,\"857\":1,\"858\":2,\"859\":2,\"879\":1,\"880\":5,\"890\":3,\"896\":6,\"897\":7,\"898\":4,\"911\":6,\"912\":7,\"913\":9,\"919\":5,\"920\":1,\"921\":13,\"927\":8}}],[\"10f\",{\"1\":{\"590\":1}}],[\"10l\",{\"1\":{\"590\":1}}],[\"102739636\",{\"1\":{\"519\":1,\"524\":1}}],[\"1024\",{\"1\":{\"243\":1}}],[\"100l\",{\"1\":{\"586\":1}}],[\"100mb\",{\"1\":{\"375\":1}}],[\"100\",{\"1\":{\"163\":1,\"179\":1,\"273\":1,\"276\":1,\"330\":2,\"340\":2,\"342\":1,\"343\":3,\"370\":1,\"403\":1,\"629\":3,\"630\":3,\"638\":1,\"646\":2,\"651\":2}}],[\"10000l\",{\"1\":{\"708\":2}}],[\"100000\",{\"1\":{\"614\":1}}],[\"10000\",{\"1\":{\"147\":1,\"614\":1}}],[\"1000~1999\",{\"1\":{\"76\":1}}],[\"1000\",{\"1\":{\"13\":1,\"20\":1,\"75\":1,\"523\":2,\"629\":1,\"636\":1,\"735\":1}}],[\"10dp\",{\"1\":{\"115\":1}}],[\"1080\",{\"1\":{\"100\":2,\"101\":1}}],[\"1080px\",{\"1\":{\"100\":2}}],[\"10\",{\"1\":{\"5\":1,\"13\":2,\"19\":1,\"247\":1,\"289\":1,\"295\":1,\"494\":1,\"516\":2,\"538\":3,\"578\":1,\"586\":1,\"594\":1,\"596\":1,\"636\":1,\"646\":3,\"651\":1,\"663\":1,\"749\":1,\"805\":2,\"809\":1,\"879\":1,\"911\":1}}],[\"实化类型参数\",{\"1\":{\"627\":1,\"647\":1}}],[\"实践\",{\"1\":{\"250\":1}}],[\"实体\",{\"1\":{\"138\":1}}],[\"实际用到的时候才会去获取完整的信息用来创建对象分配内存等\",{\"1\":{\"766\":1}}],[\"实际应用\",{\"0\":{\"518\":1}}],[\"实际占用大小为\",{\"1\":{\"516\":1}}],[\"实际保存的键值对个数\",{\"1\":{\"500\":1}}],[\"实际保存键值对的数组\",{\"1\":{\"500\":1}}],[\"实际在\",{\"1\":{\"440\":1}}],[\"实际内容一致\",{\"1\":{\"420\":1}}],[\"实际将要产生的变化\",{\"1\":{\"412\":1}}],[\"实际代码可以参考这里\",{\"1\":{\"400\":1}}],[\"实际的执行的类是powerimageplatformchannel\",{\"1\":{\"398\":1}}],[\"实际是\",{\"1\":{\"372\":1}}],[\"实际调用的是\",{\"1\":{\"243\":1}}],[\"实际上要比快速排序稍慢一些\",{\"1\":{\"860\":1}}],[\"实际上就是onisolateinitialize\",{\"1\":{\"752\":1}}],[\"实际上就是通过管理\",{\"1\":{\"254\":1}}],[\"实际上返回的是一个\",{\"1\":{\"726\":1}}],[\"实际上这个类期望\",{\"1\":{\"538\":1}}],[\"实际上图片信息在对应的powertextureimageinfo\",{\"1\":{\"397\":1}}],[\"实际上根据此方式\",{\"1\":{\"342\":1}}],[\"实际上expanded就是flexfit\",{\"1\":{\"276\":1}}],[\"实际上inheritedwidget本身只标记了colorfulcontainer为dirty\",{\"1\":{\"273\":1}}],[\"实际上inheritedelement没有重新创建\",{\"1\":{\"271\":1}}],[\"实际上取了widget的child\",{\"1\":{\"271\":1}}],[\"实际上\",{\"1\":{\"264\":1,\"374\":1}}],[\"实际上不存在\",{\"1\":{\"264\":1}}],[\"实际上并不存在\",{\"1\":{\"254\":1}}],[\"实际上创建的是一个虚假的\",{\"1\":{\"392\":1}}],[\"实际上创建的是\",{\"1\":{\"243\":1}}],[\"实际上是开启了处理消息队列\",{\"1\":{\"759\":1}}],[\"实际上是继承自\",{\"1\":{\"355\":1}}],[\"实际上是将发送指令到\",{\"1\":{\"243\":1}}],[\"实际上是通过\",{\"1\":{\"232\":1}}],[\"实际上是使用\",{\"1\":{\"228\":1}}],[\"实际设备高度为\",{\"1\":{\"196\":2}}],[\"实际处理\",{\"1\":{\"125\":1}}],[\"实际操作\",{\"0\":{\"6\":1}}],[\"实现思路是\",{\"1\":{\"850\":1}}],[\"实现思路如下\",{\"1\":{\"837\":1}}],[\"实现如下\",{\"1\":{\"834\":1,\"911\":1}}],[\"实现爬取其网页内容并生成\",{\"1\":{\"735\":1}}],[\"实现阻塞同步时\",{\"1\":{\"609\":1}}],[\"实现线程安全有以下几种方法\",{\"1\":{\"605\":1}}],[\"实现线程安全\",{\"0\":{\"605\":1}}],[\"实现序列化与反序列化的细节\",{\"1\":{\"589\":1}}],[\"实现可序列化最简单安全的方式是采用枚举的形式\",{\"1\":{\"583\":1}}],[\"实现可折叠\",{\"0\":{\"108\":1}}],[\"实现简单\",{\"1\":{\"580\":1}}],[\"实现注解\",{\"1\":{\"564\":1}}],[\"实现原理\",{\"1\":{\"560\":1,\"598\":1}}],[\"实现接口的方法\",{\"1\":{\"554\":1}}],[\"实现单例\",{\"0\":{\"550\":1}}],[\"实现单例的绝大部分方法\",{\"1\":{\"549\":1}}],[\"实现对同一对象如string的hashcode不一定一致\",{\"1\":{\"506\":1}}],[\"实现其实也就是对\",{\"1\":{\"436\":1}}],[\"实现滑动效果的\",{\"1\":{\"442\":1}}],[\"实现滑动效果的主要逻辑在\",{\"1\":{\"437\":1}}],[\"实现滑动效果\",{\"1\":{\"408\":1,\"436\":1}}],[\"实现协调\",{\"1\":{\"405\":1}}],[\"实现布局\",{\"1\":{\"402\":2,\"422\":2,\"433\":2}}],[\"实现近似线性插值\",{\"1\":{\"358\":1}}],[\"实现绘制的过程\",{\"1\":{\"332\":1}}],[\"实现的思路就是递归\",{\"1\":{\"912\":1}}],[\"实现的\",{\"1\":{\"353\":1,\"402\":2,\"422\":2,\"431\":1,\"433\":2}}],[\"实现的动画\",{\"1\":{\"330\":1}}],[\"实现的方法\",{\"1\":{\"243\":1}}],[\"实现自定义动画的常见用法\",{\"1\":{\"330\":1}}],[\"实现自定义动画\",{\"1\":{\"329\":1,\"336\":1}}],[\"实现非线性变化\",{\"1\":{\"327\":1}}],[\"实现非线性的变化\",{\"1\":{\"314\":1}}],[\"实现widget\",{\"1\":{\"312\":1}}],[\"实现丰富的动画\",{\"1\":{\"311\":1}}],[\"实现逻辑也比较简单\",{\"1\":{\"310\":1}}],[\"实现隐式动画的常用流程\",{\"1\":{\"307\":1}}],[\"实现程度由易到难\",{\"1\":{\"300\":1,\"314\":1}}],[\"实现在同一个\",{\"1\":{\"284\":1}}],[\"实现在操作系统销毁\",{\"1\":{\"126\":1}}],[\"实现具体的逻辑\",{\"1\":{\"232\":1}}],[\"实现之前\",{\"1\":{\"232\":1}}],[\"实现inject注入入口\",{\"1\":{\"211\":1}}],[\"实现启动\",{\"1\":{\"179\":1}}],[\"实现拦截\",{\"1\":{\"179\":1}}],[\"实现动画视觉效果\",{\"1\":{\"315\":1}}],[\"实现动画效果\",{\"1\":{\"303\":1}}],[\"实现动画\",{\"1\":{\"167\":1,\"312\":1,\"329\":1}}],[\"实现联系人列表\",{\"0\":{\"151\":1}}],[\"实现路径绘制\",{\"1\":{\"147\":1}}],[\"实现了的作用\",{\"1\":{\"781\":1}}],[\"实现了方法调用的最快路径\",{\"1\":{\"767\":1}}],[\"实现了\",{\"1\":{\"438\":1}}],[\"实现了不同的子类分别创建\",{\"1\":{\"395\":1}}],[\"实现了跨进程\",{\"1\":{\"138\":1}}],[\"实现了send\",{\"1\":{\"83\":1}}],[\"实现分页\",{\"1\":{\"137\":1}}],[\"实现分析\",{\"0\":{\"85\":1,\"709\":1}}],[\"实现多渠道打包\",{\"0\":{\"105\":1}}],[\"实现\",{\"0\":{\"179\":1,\"555\":1,\"586\":1,\"590\":1,\"594\":1},\"1\":{\"63\":1,\"82\":1,\"83\":1,\"110\":1,\"123\":2,\"146\":1,\"196\":1,\"231\":1,\"244\":1,\"316\":1,\"338\":1,\"340\":1,\"422\":1,\"425\":1,\"549\":1,\"558\":1,\"740\":1,\"791\":1}}],[\"实现该回调方法\",{\"1\":{\"62\":1}}],[\"实现一个简单的读取文件的代码如下\",{\"1\":{\"241\":1}}],[\"实现一个\",{\"1\":{\"39\":1}}],[\"实现客户端和服务端交互\",{\"1\":{\"38\":1}}],[\"实例还是\",{\"1\":{\"83\":1}}],[\"实例化\",{\"1\":{\"39\":1}}],[\"实例\",{\"1\":{\"38\":1,\"454\":1}}],[\"实在没有必要再花费时间在这里了\",{\"1\":{\"0\":1}}],[\"本来按照case\",{\"1\":{\"904\":1}}],[\"本来是希望删除f\",{\"1\":{\"684\":1}}],[\"本类也很重要\",{\"1\":{\"737\":1}}],[\"本路径用于备份\",{\"1\":{\"718\":1}}],[\"本次\",{\"1\":{\"699\":1}}],[\"本线程中\",{\"1\":{\"527\":1}}],[\"本\",{\"1\":{\"500\":1}}],[\"本笔记基于\",{\"1\":{\"454\":1}}],[\"本质是将该节点a向下进一位插入到其右节点b原先的位置\",{\"1\":{\"903\":1}}],[\"本质是线程池和\",{\"1\":{\"190\":1}}],[\"本质上只是将controlport\",{\"1\":{\"748\":1}}],[\"本质上只是对\",{\"1\":{\"710\":1}}],[\"本质上并没有在\",{\"1\":{\"742\":1}}],[\"本质上还是对\",{\"1\":{\"404\":1}}],[\"本质上还是更新了一个可以在多帧之间存活的\",{\"1\":{\"282\":1}}],[\"本质上是一个特殊的\",{\"1\":{\"352\":1}}],[\"本应该会重建\",{\"1\":{\"273\":1}}],[\"本应用正常运行需要相机权限\",{\"1\":{\"173\":1}}],[\"本身没有高度\",{\"1\":{\"445\":1}}],[\"本身在主轴方向上的尺寸是大于\",{\"1\":{\"439\":1}}],[\"本身不是挂起函数\",{\"1\":{\"629\":1}}],[\"本身不持有\",{\"1\":{\"425\":1}}],[\"本身不会出现我们之前在flutter\",{\"1\":{\"397\":1}}],[\"本身还提供了诸如图片缩放拖拽\",{\"1\":{\"385\":1}}],[\"本身的缓存外\",{\"1\":{\"383\":1}}],[\"本身是对\",{\"1\":{\"423\":1}}],[\"本身是\",{\"1\":{\"335\":1}}],[\"本身作为\",{\"1\":{\"265\":1}}],[\"本身并不会产生可以在屏幕上绘制的\",{\"1\":{\"265\":1}}],[\"本身并没有创建\",{\"1\":{\"264\":1}}],[\"本身就是等其子类\",{\"1\":{\"35\":1}}],[\"本例中传入fun2\",{\"1\":{\"614\":1}}],[\"本例中每一个枚举类值占用\",{\"1\":{\"521\":1}}],[\"本例中就是用\",{\"1\":{\"265\":1}}],[\"本例中不涉及\",{\"1\":{\"265\":1}}],[\"本例中\",{\"1\":{\"263\":1,\"264\":1}}],[\"本例中这里实际上获取到的是\",{\"1\":{\"256\":1}}],[\"本方法只在\",{\"1\":{\"176\":1}}],[\"本方法会在服务创建\",{\"1\":{\"138\":1}}],[\"本地hexo项目2的所有文件\",{\"1\":{\"793\":1}}],[\"本地hexo项目1的所有文件\",{\"1\":{\"793\":1}}],[\"本地\",{\"1\":{\"718\":3}}],[\"本地直接内存溢出\",{\"0\":{\"468\":1}}],[\"本地方法栈中\",{\"1\":{\"472\":1}}],[\"本地方\",{\"1\":{\"455\":1}}],[\"本地资源不容易出现是因为从\",{\"1\":{\"376\":1}}],[\"本地资源\",{\"0\":{\"286\":1}}],[\"本地缓存\",{\"1\":{\"126\":1}}],[\"本地文件共享\",{\"1\":{\"69\":1}}],[\"本案例中是一张图片\",{\"1\":{\"110\":1}}],[\"本文汇总了数据结构的优缺点及应用场景\",{\"1\":{\"868\":1}}],[\"本文参考这篇文章\",{\"1\":{\"791\":1}}],[\"本文中的大部分代码\",{\"1\":{\"781\":1}}],[\"本文中代码经二次处理\",{\"1\":{\"738\":1}}],[\"本文涉及源代码已上传\",{\"1\":{\"735\":1}}],[\"本文即上述过程整理\",{\"1\":{\"735\":1}}],[\"本文是对\",{\"1\":{\"763\":1}}],[\"本文是对张鸿洋的\",{\"1\":{\"707\":1}}],[\"本文是对此过程的梳理\",{\"1\":{\"8\":1}}],[\"本文不详细介绍\",{\"1\":{\"580\":1}}],[\"本文来简单分析一下为什么会出现这个情况\",{\"1\":{\"572\":1}}],[\"本文讲述如何自定义注解替换\",{\"1\":{\"564\":1}}],[\"本文只讲述实现部署多个\",{\"1\":{\"791\":1}}],[\"本文只为学术研究\",{\"1\":{\"732\":1}}],[\"本文只对\",{\"1\":{\"402\":1,\"433\":1}}],[\"本文只介绍基于\",{\"1\":{\"126\":1}}],[\"本文对\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"本文对其原理和应用做一简单分析\",{\"1\":{\"338\":1}}],[\"本文对这二者的差异做一分析\",{\"1\":{\"275\":1}}],[\"本文对这两个类的实现进行分析比较\",{\"1\":{\"85\":1}}],[\"本文内容是根据我建立博客时的做法整理而成\",{\"1\":{\"813\":1}}],[\"本文内容\",{\"1\":{\"336\":1}}],[\"本文将着重分析使用\",{\"1\":{\"329\":1}}],[\"本文将对另外一种遵循\",{\"1\":{\"422\":1}}],[\"本文将对\",{\"1\":{\"300\":1}}],[\"本文讨论的正是几种多线程的情况下实现单例的方法\",{\"1\":{\"544\":1}}],[\"本文讨论的\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"本文简单从\",{\"1\":{\"251\":1}}],[\"本文根据\",{\"1\":{\"221\":1}}],[\"本文基于\",{\"1\":{\"221\":1,\"251\":1,\"292\":1,\"735\":1,\"740\":1}}],[\"本文基于android\",{\"1\":{\"140\":1}}],[\"本文有关dagger\",{\"1\":{\"209\":1}}],[\"本文跟随官方文档实践一下dagger\",{\"1\":{\"209\":1}}],[\"本文介绍两种高级排序\",{\"1\":{\"918\":1}}],[\"本文介绍栈\",{\"1\":{\"886\":1}}],[\"本文介绍了递归\",{\"1\":{\"910\":1}}],[\"本文介绍了数组\",{\"1\":{\"878\":1}}],[\"本文介绍了二叉树\",{\"1\":{\"832\":1}}],[\"本文介绍了一个只需要更新\",{\"1\":{\"791\":1}}],[\"本文介绍了\",{\"1\":{\"170\":1,\"489\":1}}],[\"本文介绍使用贝塞尔曲线绘制折线图\",{\"1\":{\"141\":1}}],[\"本文代码链接\",{\"1\":{\"141\":1}}],[\"本文为\",{\"1\":{\"138\":1,\"483\":1,\"528\":1}}],[\"本文为笔记性质\",{\"1\":{\"73\":1,\"628\":1}}],[\"本文实现的多渠道打包可实现不同渠道\",{\"1\":{\"103\":1}}],[\"本文主要参考flow\",{\"1\":{\"649\":1}}],[\"本文主要讨论\",{\"1\":{\"580\":1}}],[\"本文主要介绍\",{\"1\":{\"556\":1}}],[\"本文主要记录\",{\"1\":{\"535\":1}}],[\"本文主要记录一下\",{\"1\":{\"278\":1}}],[\"本文主要对其加载缓存网络图片的流程做一分析\",{\"1\":{\"380\":1}}],[\"本文主要分析\",{\"1\":{\"314\":1}}],[\"本文主要是结合\",{\"1\":{\"781\":1}}],[\"本文主要是简单梳理dagger\",{\"1\":{\"199\":1}}],[\"本文主要是通过\",{\"1\":{\"176\":1}}],[\"本文主要简单分析其适配原理\",{\"1\":{\"99\":1}}],[\"本文主要探索一下\",{\"1\":{\"82\":1}}],[\"本文以从相册中获取图片\",{\"1\":{\"5\":1}}],[\"本博客使用了大约五六年的主题是基于hexo的next主题\",{\"1\":{\"0\":1}}],[\"同一个局部变量\",{\"1\":{\"513\":1}}],[\"同一个页面\",{\"1\":{\"340\":1}}],[\"同一进程不同线程间\",{\"1\":{\"140\":1}}],[\"同名方法逻辑\",{\"1\":{\"264\":1}}],[\"同名方法外\",{\"1\":{\"264\":1}}],[\"同名方法\",{\"1\":{\"259\":1}}],[\"同通信\",{\"1\":{\"246\":1}}],[\"同样这样子比较\",{\"1\":{\"897\":1}}],[\"同样保存了加载中的图片\",{\"1\":{\"397\":1}}],[\"同样是在构造函数中指定并创建\",{\"1\":{\"382\":1}}],[\"同样\",{\"1\":{\"264\":1}}],[\"同样要留出接口以便获取当前置顶的\",{\"1\":{\"152\":1}}],[\"同样先用二分法查找对应位置\",{\"1\":{\"89\":1}}],[\"同级目录还有\",{\"1\":{\"243\":1}}],[\"同级\",{\"1\":{\"106\":1}}],[\"同步的目录下找到上次建好的项目yourname\",{\"1\":{\"813\":1}}],[\"同步的方法很多\",{\"1\":{\"813\":1}}],[\"同步到本地\",{\"1\":{\"813\":1}}],[\"同步到\",{\"1\":{\"674\":1}}],[\"同步工程到\",{\"0\":{\"671\":1}}],[\"同步锁\",{\"0\":{\"546\":1}}],[\"同步读取文件是对文件直接操作\",{\"1\":{\"243\":1}}],[\"同步读取文件\",{\"1\":{\"243\":1}}],[\"同步方法包括普通的方法\",{\"1\":{\"222\":1}}],[\"同步方法\",{\"0\":{\"222\":1}}],[\"同步方法执行完毕后执行\",{\"1\":{\"221\":1}}],[\"同步\",{\"1\":{\"99\":1}}],[\"同时可以访问其他\",{\"1\":{\"816\":1}}],[\"同时可以从\",{\"1\":{\"153\":1}}],[\"同时多了一个数据域<data\",{\"1\":{\"784\":1}}],[\"同时databinding还通过与adapter\",{\"1\":{\"781\":1}}],[\"同时由于初始化过程加锁\",{\"1\":{\"547\":1}}],[\"同时存在两份图片资源造成内存浪费\",{\"1\":{\"388\":1}}],[\"同时计算器过渡到\",{\"1\":{\"341\":1}}],[\"同时维护了\",{\"1\":{\"253\":1}}],[\"同时也是堆的最后一个节点\",{\"1\":{\"859\":1}}],[\"同时也是我的第一款游戏\",{\"1\":{\"778\":1}}],[\"同时也会更新child\",{\"1\":{\"263\":1}}],[\"同时也知道了有一个构造方法来实例化service对象\",{\"1\":{\"201\":1}}],[\"同时也方便之后查阅\",{\"1\":{\"0\":1,\"779\":1}}],[\"同时viewmodel\",{\"1\":{\"124\":1}}],[\"同时为了让\",{\"1\":{\"123\":1}}],[\"同时会开启\",{\"1\":{\"76\":1}}],[\"同时创建messagequeue对象\",{\"1\":{\"48\":1}}],[\"同时\",{\"1\":{\"6\":1,\"83\":1,\"111\":1,\"646\":1,\"785\":1}}],[\"同时如果是开发\",{\"1\":{\"6\":1}}],[\"同理要给其余\",{\"1\":{\"5\":1}}],[\"或需要频繁插入删除元素时使用\",{\"1\":{\"869\":1}}],[\"或等于\",{\"1\":{\"856\":1}}],[\"或对应的左子节点\",{\"1\":{\"836\":2}}],[\"或fragment\",{\"1\":{\"785\":1}}],[\"或其他地方\",{\"1\":{\"783\":1}}],[\"或其子类\",{\"1\":{\"333\":1}}],[\"或可能是单个\",{\"1\":{\"663\":1}}],[\"或已有key相同的值\",{\"1\":{\"501\":1}}],[\"或按照子级计算\",{\"1\":{\"431\":1}}],[\"或子级的\",{\"1\":{\"259\":1}}],[\"或静态方法\",{\"1\":{\"199\":1}}],[\"或setexact\",{\"1\":{\"11\":1}}],[\"或设备本身处于休眠状态\",{\"1\":{\"11\":1}}],[\"或间隔触发\",{\"1\":{\"11\":1}}],[\"或者栈已经空了\",{\"1\":{\"890\":1}}],[\"或者优先级比x高\",{\"1\":{\"890\":1}}],[\"或者数组已经不可再分\",{\"1\":{\"880\":1}}],[\"或者叶子节点\",{\"1\":{\"859\":1}}],[\"或者指向了根节点\",{\"1\":{\"858\":1}}],[\"或者指向了根目录\",{\"1\":{\"858\":1}}],[\"或者邻接点已经被删除\",{\"1\":{\"850\":1}}],[\"或者左子树中最大的\",{\"1\":{\"836\":2}}],[\"或者你也可以直接自己在对应位置新建\",{\"1\":{\"809\":1}}],[\"或者你也可以到这里查看源码\",{\"1\":{\"218\":1}}],[\"或者也可以通过bundle或safe\",{\"1\":{\"783\":1}}],[\"或者也可以在这里找到\",{\"1\":{\"215\":1,\"217\":1}}],[\"或者adderrorlistener之类的监听\",{\"1\":{\"740\":1}}],[\"或者依次输入多个关键词参数\",{\"1\":{\"726\":1}}],[\"或者依次输入多个参数\",{\"1\":{\"726\":1}}],[\"或者直接定义这个变量\",{\"1\":{\"662\":1}}],[\"或者发送到\",{\"1\":{\"646\":1}}],[\"或者发送广播\",{\"1\":{\"189\":1}}],[\"或者将它们暴露给用户\",{\"1\":{\"640\":1}}],[\"或者通过伴生对象\",{\"1\":{\"612\":1}}],[\"或者没有\",{\"1\":{\"612\":1}}],[\"或者没有越界内容\",{\"1\":{\"412\":1}}],[\"或者可以使用writeunshared方法\",{\"1\":{\"587\":1}}],[\"或者可以再订一个结束时间的闹钟\",{\"1\":{\"21\":1}}],[\"或者在当前环境外\",{\"1\":{\"768\":1}}],[\"或者在序列化的时候只处理部分变量\",{\"1\":{\"584\":1}}],[\"或者在gc时删除\",{\"1\":{\"523\":1}}],[\"或者是transient的\",{\"1\":{\"583\":1}}],[\"或者包含没有实现serializable接口的变量\",{\"1\":{\"581\":1}}],[\"或者默认\",{\"1\":{\"568\":1}}],[\"或者notifyall\",{\"1\":{\"560\":1}}],[\"或者setinitialvalue\",{\"1\":{\"527\":1}}],[\"或者当前存储的数据总数size大于阈值threshold时才会扩容resize\",{\"1\":{\"501\":1}}],[\"或者为重写该方法\",{\"1\":{\"475\":1}}],[\"或者应用了\",{\"1\":{\"412\":1}}],[\"或者onloadfailed\",{\"1\":{\"399\":1}}],[\"或者使用powerimage\",{\"1\":{\"390\":1}}],[\"或者使用系统默认操作\",{\"1\":{\"137\":1}}],[\"或者磁盘\",{\"1\":{\"376\":1}}],[\"或者已有缓存被清理\",{\"1\":{\"376\":1}}],[\"或者子类指定的途径\",{\"1\":{\"365\":1}}],[\"或者其他本地资源\",{\"1\":{\"286\":1}}],[\"或者被inheritedwidget外层的widget\",{\"1\":{\"271\":1}}],[\"或者具体数值\",{\"1\":{\"158\":1}}],[\"或者重写了layout\",{\"1\":{\"157\":1}}],[\"或者打成\",{\"1\":{\"57\":1}}],[\"或者如\",{\"1\":{\"35\":1}}],[\"或者控件的上下中心\",{\"1\":{\"33\":1}}],[\"或者\",{\"1\":{\"6\":1,\"66\":1,\"160\":1,\"193\":1,\"230\":1,\"302\":1,\"307\":1,\"316\":2,\"353\":1,\"360\":1,\"365\":1,\"375\":1,\"412\":2,\"415\":1,\"417\":1,\"422\":1,\"424\":1,\"540\":2,\"541\":1,\"657\":1,\"723\":1,\"759\":1,\"783\":1,\"812\":1,\"813\":1,\"898\":1}}],[\"或\",{\"1\":{\"5\":1,\"90\":1,\"122\":2,\"324\":1,\"355\":1,\"528\":1,\"640\":1,\"665\":1,\"719\":2,\"742\":1,\"782\":1,\"784\":1}}],[\"及资源\",{\"1\":{\"814\":1}}],[\"及以上输出true\",{\"1\":{\"461\":1}}],[\"及以上\",{\"1\":{\"461\":1}}],[\"及以下输出false\",{\"1\":{\"461\":1}}],[\"及以下\",{\"1\":{\"461\":1}}],[\"及以后时\",{\"1\":{\"5\":1}}],[\"及部分在线博客整理\",{\"1\":{\"454\":1}}],[\"及占位\",{\"1\":{\"347\":1}}],[\"及其应用\",{\"1\":{\"832\":1}}],[\"及其相关类\",{\"1\":{\"314\":1}}],[\"及其子类实现加载\",{\"1\":{\"431\":1}}],[\"及其子类可以实现对\",{\"1\":{\"431\":1}}],[\"及其子类定义了一个曲线\",{\"1\":{\"360\":1}}],[\"及其子类为代表\",{\"1\":{\"329\":2}}],[\"及其子类\",{\"1\":{\"302\":1,\"309\":1,\"402\":1,\"422\":1,\"433\":1}}],[\"及其\",{\"1\":{\"255\":1}}],[\"及其衍生类对应关系\",{\"0\":{\"91\":1}}],[\"及\",{\"1\":{\"112\":1,\"113\":1}}],[\"及时总结\",{\"1\":{\"0\":1}}],[\"当两个指针都退出时\",{\"1\":{\"924\":1}}],[\"当遇到满足条件的元素则退出\",{\"1\":{\"924\":1}}],[\"当插入137后红黑树如图\",{\"1\":{\"904\":1}}],[\"当图中没有顶点的时候\",{\"1\":{\"850\":1}}],[\"当图的每一条边的权值都相同时\",{\"1\":{\"849\":1}}],[\"当去掉没有后继点的顶点后又会产生新的没有后继点的顶点\",{\"1\":{\"850\":1}}],[\"当规则\",{\"1\":{\"847\":1}}],[\"当装填因子变得很大时\",{\"1\":{\"828\":1}}],[\"当用\",{\"1\":{\"812\":1}}],[\"当用户操作屏幕发生\",{\"1\":{\"418\":1}}],[\"当用户滑动等事件发生\",{\"1\":{\"404\":1}}],[\"当以上内容都配置完成后\",{\"1\":{\"795\":1}}],[\"当livedata的值发生变化时activity等可以及时得到通知\",{\"1\":{\"785\":1}}],[\"当kernel\",{\"1\":{\"766\":1}}],[\"当热更新触发时\",{\"1\":{\"765\":1}}],[\"当执行requestcall的execute方法时\",{\"1\":{\"712\":1}}],[\"当下次同步的时候需要输入\",{\"1\":{\"671\":1}}],[\"当父节点只有一个子节点时\",{\"1\":{\"665\":1}}],[\"当父级指定的最大约束是\",{\"1\":{\"445\":1}}],[\"当父级指定的最小约束\",{\"1\":{\"445\":1}}],[\"当父级尺寸小于\",{\"1\":{\"444\":1}}],[\"当父级尺寸大于\",{\"1\":{\"444\":1}}],[\"当方法只有一个参数时\",{\"1\":{\"662\":1}}],[\"当缓冲区被占满的时候将会引起阻塞\",{\"1\":{\"638\":1}}],[\"当流在一个可取消的挂起函数\",{\"1\":{\"629\":1}}],[\"当泛型即当消费者\",{\"1\":{\"617\":1}}],[\"当线程操作的数据不是共享数据时\",{\"1\":{\"608\":1}}],[\"当第二次再次尝试时\",{\"1\":{\"607\":1}}],[\"当第二个\",{\"1\":{\"317\":1}}],[\"当写入文件的为同一对象时\",{\"1\":{\"587\":1}}],[\"当可序列化的类缺少\",{\"1\":{\"566\":1}}],[\"当某个thread调用某个对象的wait\",{\"1\":{\"561\":1}}],[\"当某个事件出现之后才会执行\",{\"1\":{\"189\":1}}],[\"当判断\",{\"1\":{\"547\":1}}],[\"当我们在\",{\"1\":{\"757\":1}}],[\"当我们新建一个threadlocal并为之赋值时\",{\"1\":{\"527\":1}}],[\"当我们用javap查看其编译后的字节码可以看到\",{\"1\":{\"521\":1}}],[\"当我们仔细查看具体的\",{\"1\":{\"251\":1}}],[\"当table\",{\"1\":{\"505\":2}}],[\"当table为空或者长度超过加载因子default\",{\"1\":{\"505\":1}}],[\"当存储的数据总量超过加载系数loadfactor规定的阈值时则对table进行扩容\",{\"1\":{\"499\":1}}],[\"当中的方法只有\",{\"1\":{\"490\":1}}],[\"当常量过多时会导致\",{\"1\":{\"466\":1}}],[\"当单个线程最大栈内存增加时\",{\"1\":{\"465\":1}}],[\"当内存无法分配时都会导致\",{\"1\":{\"465\":1}}],[\"当child\",{\"1\":{\"445\":1}}],[\"当手指向下滑动的时候\",{\"1\":{\"427\":1}}],[\"当向下滑动时\",{\"1\":{\"419\":1}}],[\"当向上滑动\",{\"1\":{\"403\":1}}],[\"当没有给\",{\"1\":{\"415\":1}}],[\"当其大小接近容量时\",{\"1\":{\"826\":1}}],[\"当其进入之后\",{\"1\":{\"763\":1}}],[\"当其内部所有协程\",{\"1\":{\"623\":1}}],[\"当其再次滑入时再\",{\"1\":{\"442\":1}}],[\"当其变化时执行\",{\"1\":{\"440\":1}}],[\"当其\",{\"1\":{\"412\":1}}],[\"当其是\",{\"1\":{\"110\":1}}],[\"当成功加载图片之后获得imageinfo\",{\"1\":{\"382\":1}}],[\"当依赖变化\",{\"1\":{\"367\":1}}],[\"当上述代码执行的时候\",{\"1\":{\"768\":1}}],[\"当上述条件满足之后\",{\"1\":{\"351\":1}}],[\"当上面\",{\"1\":{\"398\":1}}],[\"当上一步无法满足需求时\",{\"1\":{\"312\":1}}],[\"当刚刚完整切换到页面\",{\"1\":{\"343\":1}}],[\"当从\",{\"1\":{\"340\":1}}],[\"当需要向\",{\"1\":{\"785\":1}}],[\"当需要用到枚举类的特性时\",{\"1\":{\"522\":1}}],[\"当需要绘制时\",{\"1\":{\"335\":1}}],[\"当需要填充容器\",{\"1\":{\"275\":1}}],[\"当使用同一个objectoutputstream对象序列化同一个序列化对象时\",{\"1\":{\"587\":1}}],[\"当使用yyyy格式化时\",{\"1\":{\"576\":1}}],[\"当使用ui\",{\"1\":{\"400\":1}}],[\"当使用\",{\"1\":{\"334\":1,\"393\":1}}],[\"当使用不同的值重新构建\",{\"1\":{\"302\":1}}],[\"当通知\",{\"1\":{\"333\":1}}],[\"当随着时间变化\",{\"1\":{\"314\":1}}],[\"当动画相关的属性变化时\",{\"1\":{\"312\":1}}],[\"当动画执行完毕会调用\",{\"1\":{\"308\":1}}],[\"当然也可以是其他实现\",{\"1\":{\"309\":1}}],[\"当然也不排除有其他更优雅的解决方案\",{\"1\":{\"213\":1}}],[\"当再次切回本协程时\",{\"1\":{\"625\":1}}],[\"当再次返回继续执行该代码时不会影响到其执行结果的代码\",{\"1\":{\"608\":1}}],[\"当再次序列化时保存的只是前一个对象的引用\",{\"1\":{\"587\":1}}],[\"当再次提供一个有新\",{\"1\":{\"308\":1}}],[\"当再次被更新时会触发动画\",{\"1\":{\"305\":1}}],[\"当animationstatus\",{\"1\":{\"303\":1}}],[\"当在\",{\"1\":{\"367\":1,\"782\":1}}],[\"当在widget构建过程中出现错误\",{\"1\":{\"295\":1}}],[\"当在client中想使用这个方法的依赖时\",{\"1\":{\"204\":1}}],[\"当inheritedwidget更新的时候\",{\"1\":{\"273\":1}}],[\"当外层statefulwidget的element执行到updatechild\",{\"1\":{\"271\":1}}],[\"当屏幕刷新的时候\",{\"1\":{\"265\":1}}],[\"当nmh执行完毕回调后\",{\"1\":{\"247\":1}}],[\"当有新的\",{\"1\":{\"228\":1}}],[\"当有多个线程可以访问该实例时\",{\"1\":{\"205\":1}}],[\"当做占位符\",{\"1\":{\"726\":1}}],[\"当做当前线程执行字节码的行号指示器\",{\"1\":{\"462\":1}}],[\"当做\",{\"1\":{\"225\":1}}],[\"当做了他的\",{\"1\":{\"193\":1}}],[\"当按钮被点击的时候触发相应的动作\",{\"1\":{\"189\":1}}],[\"当达到某个特定条件时\",{\"1\":{\"189\":1}}],[\"当滑动字母导航栏时\",{\"1\":{\"152\":1}}],[\"当该进程\",{\"1\":{\"137\":1}}],[\"当一个进程使用\",{\"1\":{\"138\":1}}],[\"当一个被依赖项\",{\"1\":{\"112\":1}}],[\"当一个滚动事件结束\",{\"1\":{\"111\":1}}],[\"当你定义了一个\",{\"1\":{\"111\":1}}],[\"当滚动到顶部的时候展开完\",{\"1\":{\"111\":1}}],[\"当添加item时\",{\"1\":{\"93\":1}}],[\"当要保存的数据量比较小\",{\"1\":{\"85\":1,\"523\":1}}],[\"当要注销时\",{\"1\":{\"63\":1}}],[\"当服务端进程意外死亡时\",{\"1\":{\"65\":1}}],[\"当跨进程通信时传递的是\",{\"1\":{\"62\":1}}],[\"当客户端取消绑定时\",{\"1\":{\"38\":1}}],[\"当前点右子节点的左子节点为\",{\"1\":{\"836\":1}}],[\"当前几次找不到之后就会很恐慌\",{\"1\":{\"827\":1}}],[\"当前被\",{\"1\":{\"745\":1}}],[\"当前爬虫主体功能以及实现\",{\"1\":{\"732\":1}}],[\"当前版本暂不支持中文\",{\"1\":{\"719\":1}}],[\"当前用户主目录\",{\"1\":{\"686\":1}}],[\"当前路径\",{\"1\":{\"683\":1}}],[\"当前线程已经被终止\",{\"1\":{\"560\":1}}],[\"当前线程才会恢复运行\",{\"1\":{\"560\":1}}],[\"当前位于\",{\"1\":{\"349\":1}}],[\"当前值\",{\"1\":{\"319\":1}}],[\"当前\",{\"1\":{\"230\":1,\"759\":1}}],[\"当前的\",{\"1\":{\"160\":1}}],[\"当前主流设计模式是\",{\"1\":{\"121\":1}}],[\"当前服务\",{\"1\":{\"36\":1}}],[\"当前自开机完后的时间\",{\"1\":{\"20\":1}}],[\"当不需要该闹钟时可以根据这个来取消\",{\"1\":{\"15\":1}}],[\"当您设置了使用同一待定\",{\"1\":{\"11\":1,\"15\":1}}],[\"当\",{\"1\":{\"5\":1,\"26\":1,\"30\":2,\"63\":1,\"74\":1,\"112\":2,\"123\":1,\"126\":1,\"160\":2,\"237\":1,\"243\":2,\"244\":2,\"253\":1,\"305\":2,\"307\":2,\"308\":1,\"317\":1,\"319\":1,\"327\":1,\"329\":1,\"332\":1,\"341\":2,\"342\":2,\"344\":1,\"374\":1,\"376\":2,\"377\":1,\"398\":2,\"399\":1,\"412\":4,\"415\":1,\"418\":1,\"439\":1,\"440\":1,\"445\":1,\"545\":1,\"547\":1,\"566\":1,\"575\":1,\"630\":1,\"631\":1,\"763\":1,\"766\":2,\"827\":2}}],[\"说明有环\",{\"1\":{\"850\":1}}],[\"说明注解存活的生命周期\",{\"1\":{\"565\":1}}],[\"说明注解所能修饰的范围\",{\"1\":{\"565\":1}}],[\"说明它就是我们所需要的\",{\"1\":{\"112\":1}}],[\"说明如下\",{\"1\":{\"111\":1}}],[\"说明\",{\"0\":{\"5\":1,\"292\":1,\"675\":1,\"738\":1},\"1\":{\"140\":1,\"317\":1,\"424\":2,\"732\":1}}],[\"h==1\",{\"1\":{\"921\":1}}],[\"h=3\",{\"1\":{\"921\":1}}],[\"h=3h+1\",{\"1\":{\"920\":1}}],[\"h+1\",{\"1\":{\"921\":1}}],[\"hs\",{\"1\":{\"759\":1}}],[\"h以及runtime\",{\"1\":{\"740\":1}}],[\"h2\",{\"1\":{\"737\":1}}],[\"href\",{\"1\":{\"737\":1}}],[\"hist\",{\"1\":{\"697\":1}}],[\"hierarchies\",{\"1\":{\"615\":1}}],[\"high\",{\"1\":{\"557\":2}}],[\"hint\",{\"1\":{\"424\":1}}],[\"hidden\",{\"1\":{\"351\":1,\"506\":1}}],[\"hideprogress\",{\"1\":{\"123\":1}}],[\"hide\",{\"1\":{\"83\":1,\"138\":1,\"193\":1}}],[\"hittest\",{\"0\":{\"441\":1},\"1\":{\"333\":1,\"441\":3}}],[\"hittestself\",{\"1\":{\"332\":1}}],[\"hittestchildren\",{\"1\":{\"332\":1,\"425\":1,\"441\":1}}],[\"hittestable\",{\"1\":{\"253\":1}}],[\"hit\",{\"1\":{\"259\":1,\"425\":1}}],[\"h\",{\"1\":{\"246\":1,\"247\":5,\"500\":3,\"578\":2,\"587\":2,\"665\":1,\"688\":1,\"745\":1,\"759\":1,\"761\":1,\"921\":17}}],[\"husayn\",{\"1\":{\"124\":1}}],[\"hl=zh\",{\"1\":{\"83\":1,\"126\":1,\"139\":1}}],[\"htm\",{\"1\":{\"675\":1}}],[\"htmlparser\",{\"1\":{\"737\":1}}],[\"htmldownloader\",{\"1\":{\"737\":2}}],[\"htmlhttps\",{\"1\":{\"149\":1}}],[\"html\",{\"1\":{\"128\":1,\"137\":2,\"138\":1,\"139\":1,\"142\":2,\"243\":1,\"492\":2,\"500\":1,\"511\":2,\"514\":1,\"538\":1,\"552\":1,\"573\":1,\"578\":1,\"584\":1,\"587\":1,\"594\":1,\"730\":2,\"731\":6,\"736\":3,\"737\":11,\"904\":1}}],[\"html滑动展示删除按钮https\",{\"1\":{\"77\":1}}],[\"https\",{\"1\":{\"7\":1,\"33\":2,\"62\":1,\"71\":1,\"77\":3,\"83\":1,\"105\":1,\"111\":1,\"121\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":4,\"128\":8,\"136\":2,\"137\":6,\"138\":8,\"139\":5,\"141\":1,\"142\":3,\"149\":1,\"221\":1,\"243\":3,\"247\":2,\"285\":1,\"286\":1,\"342\":1,\"351\":1,\"401\":2,\"492\":1,\"500\":1,\"511\":1,\"514\":1,\"516\":4,\"519\":1,\"522\":3,\"523\":1,\"524\":1,\"528\":1,\"538\":1,\"552\":1,\"573\":1,\"575\":1,\"578\":1,\"584\":2,\"586\":1,\"587\":1,\"594\":1,\"667\":1,\"673\":1,\"708\":1,\"740\":3,\"794\":1,\"810\":1,\"812\":1}}],[\"http\",{\"1\":{\"2\":1,\"26\":1,\"104\":1,\"115\":2,\"139\":1,\"167\":3,\"189\":3,\"237\":1,\"285\":2,\"490\":1,\"497\":1,\"550\":1,\"708\":4,\"711\":3,\"712\":2,\"718\":1,\"731\":2,\"737\":3,\"783\":3,\"784\":5,\"806\":2,\"811\":3,\"813\":1,\"816\":1,\"904\":1}}],[\"half\",{\"1\":{\"913\":5}}],[\"had\",{\"1\":{\"376\":1,\"395\":1,\"408\":1}}],[\"hadunsatisfieddependencies\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"happens\",{\"1\":{\"753\":1}}],[\"happen\",{\"1\":{\"351\":1,\"408\":1,\"745\":1,\"748\":1}}],[\"having\",{\"1\":{\"351\":1,\"395\":1}}],[\"havedimensions\",{\"1\":{\"415\":2}}],[\"have\",{\"1\":{\"87\":1,\"92\":1,\"229\":1,\"231\":2,\"238\":1,\"244\":1,\"247\":4,\"256\":1,\"285\":1,\"308\":1,\"350\":1,\"351\":3,\"376\":2,\"395\":1,\"413\":1,\"418\":1,\"573\":2,\"615\":3,\"740\":1,\"748\":1,\"753\":3,\"760\":1,\"761\":9}}],[\"hasplantings\",{\"1\":{\"784\":2}}],[\"hasliveports\",{\"1\":{\"761\":1}}],[\"hasreadresolvemethod\",{\"1\":{\"583\":2}}],[\"hasfocus\",{\"1\":{\"423\":1,\"436\":1}}],[\"hasscrolled\",{\"1\":{\"438\":5}}],[\"hasscrolledbody\",{\"1\":{\"405\":1}}],[\"hassize\",{\"1\":{\"347\":1,\"351\":1,\"439\":3}}],[\"hasvisualoverflow\",{\"1\":{\"405\":1}}],[\"hasn\",{\"1\":{\"376\":1}}],[\"haserrorhandler\",{\"1\":{\"224\":2}}],[\"hasactivityinjector\",{\"1\":{\"214\":1}}],[\"has\",{\"1\":{\"193\":1,\"228\":1,\"238\":1,\"243\":1,\"247\":1,\"282\":1,\"347\":1,\"350\":1,\"351\":1,\"374\":1,\"384\":1,\"398\":1,\"408\":1,\"586\":1,\"731\":1,\"740\":2,\"751\":2,\"753\":2,\"756\":1,\"759\":2,\"761\":1,\"763\":1}}],[\"hash>>n\",{\"1\":{\"504\":1}}],[\"hashset\",{\"1\":{\"247\":1,\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"hash\",{\"0\":{\"825\":1},\"1\":{\"92\":9,\"93\":1,\"500\":4,\"501\":2,\"504\":9,\"519\":3,\"525\":1,\"826\":2,\"827\":6,\"828\":1}}],[\"hashcode\",{\"1\":{\"92\":4,\"273\":7,\"500\":2,\"508\":1}}],[\"hashmap的数据是经过包装后保存在hashmap\",{\"1\":{\"523\":1}}],[\"hashmap的很多变量都被标记为transient\",{\"1\":{\"506\":1}}],[\"hashmap基于hash值保存数据\",{\"1\":{\"506\":1}}],[\"hashmap在writeobject\",{\"1\":{\"506\":1}}],[\"hashmap使用由node<k\",{\"1\":{\"499\":1}}],[\"hashmap<k\",{\"1\":{\"523\":1}}],[\"hashmap<>\",{\"1\":{\"398\":1}}],[\"hashmap<int\",{\"1\":{\"243\":2,\"244\":3}}],[\"hashmap存储键值对会占用比较多的内存控件\",{\"1\":{\"85\":1}}],[\"hashmap\",{\"0\":{\"91\":1,\"499\":1,\"500\":1,\"523\":1},\"1\":{\"59\":1,\"85\":1,\"96\":1,\"500\":6,\"508\":8,\"523\":5,\"524\":2,\"847\":6,\"848\":5,\"850\":6}}],[\"hakeem\",{\"1\":{\"124\":1}}],[\"haniotower\",{\"1\":{\"912\":3}}],[\"haniostepnum++\",{\"1\":{\"912\":2}}],[\"haniostepnum\",{\"1\":{\"912\":1}}],[\"handing\",{\"1\":{\"247\":1}}],[\"hander\",{\"1\":{\"237\":1}}],[\"handed\",{\"1\":{\"183\":1,\"374\":1}}],[\"handling\",{\"1\":{\"237\":1,\"745\":1,\"748\":1,\"761\":2}}],[\"handlingcallbacks\",{\"1\":{\"237\":1,\"238\":2}}],[\"handlescope\",{\"1\":{\"753\":1,\"759\":2}}],[\"handles\",{\"1\":{\"583\":2,\"587\":2,\"753\":1,\"759\":1}}],[\"handlesemanticsaction\",{\"1\":{\"253\":1}}],[\"handlesemanticsenabledchanged\",{\"1\":{\"253\":2}}],[\"handlesemanticsownerdisposed\",{\"1\":{\"253\":1}}],[\"handlesemanticsownercreated\",{\"1\":{\"253\":1}}],[\"handlehasscrolledbodychanged\",{\"1\":{\"405\":1}}],[\"handleimagechunk\",{\"1\":{\"368\":1}}],[\"handleimageframe\",{\"0\":{\"369\":1},\"1\":{\"368\":1,\"369\":2}}],[\"handleflightended\",{\"1\":{\"351\":2}}],[\"handlefailure\",{\"1\":{\"126\":2}}],[\"handlechange\",{\"1\":{\"310\":5}}],[\"handlecallback\",{\"1\":{\"53\":1}}],[\"handleanimationchanged\",{\"1\":{\"307\":2}}],[\"handleuncaughterror\",{\"1\":{\"296\":1}}],[\"handlewebfirstframe\",{\"1\":{\"253\":1}}],[\"handlepersistentframecallback\",{\"1\":{\"253\":1}}],[\"handleplatformbrightnesschanged\",{\"1\":{\"253\":1}}],[\"handletable\",{\"1\":{\"587\":1}}],[\"handletextscalefactorchanged\",{\"1\":{\"253\":1}}],[\"handletimeout\",{\"1\":{\"237\":1}}],[\"handleerror\",{\"1\":{\"231\":3,\"374\":1,\"384\":3}}],[\"handleevents通过\",{\"1\":{\"237\":1}}],[\"handleevents\",{\"1\":{\"125\":1}}],[\"handle\",{\"1\":{\"228\":5,\"229\":1,\"231\":2,\"232\":1,\"237\":8,\"246\":6,\"247\":2,\"248\":2,\"371\":1,\"397\":3,\"405\":2,\"587\":4,\"745\":2,\"747\":4,\"749\":2,\"752\":1,\"753\":9,\"754\":2,\"759\":19,\"761\":3}}],[\"handlelaunchactivity\",{\"1\":{\"179\":2}}],[\"handlebindservice\",{\"1\":{\"138\":2}}],[\"handlemetricschanged\",{\"1\":{\"253\":1}}],[\"handlemessages方法\",{\"1\":{\"761\":1}}],[\"handlemessages\",{\"1\":{\"761\":6}}],[\"handlemessage中按照\",{\"1\":{\"238\":1}}],[\"handlemessage处理消息\",{\"1\":{\"238\":1}}],[\"handlemessage方法在\",{\"1\":{\"238\":1}}],[\"handlemessage方法处理消息\",{\"1\":{\"237\":1}}],[\"handlemessage方法\",{\"1\":{\"235\":1}}],[\"handlemessage方法中\",{\"1\":{\"229\":1}}],[\"handlemessage\",{\"0\":{\"238\":1},\"1\":{\"39\":3,\"53\":4,\"83\":2,\"179\":2,\"193\":1,\"229\":1,\"235\":3,\"236\":1,\"238\":1,\"759\":1,\"761\":1}}],[\"handlemoviedetails\",{\"1\":{\"126\":1}}],[\"handler处理消息分发\",{\"1\":{\"761\":1}}],[\"handlerequest方法内部通过请求的imagetype找到\",{\"1\":{\"399\":1}}],[\"handlerequest方法获取图片\",{\"1\":{\"398\":1}}],[\"handlerequest\",{\"1\":{\"398\":5,\"399\":3}}],[\"handlerimagestreamcompleterhandle\",{\"1\":{\"375\":1}}],[\"handler是当这个dart\",{\"1\":{\"247\":1}}],[\"handler方法中根据当时请求的id找到completer将结果传递回去\",{\"1\":{\"243\":1}}],[\"handler或者关闭timerhandler\",{\"1\":{\"238\":1}}],[\"handler的子线程中通过异步\",{\"1\":{\"237\":1}}],[\"handlers\",{\"1\":{\"231\":1,\"272\":1,\"761\":1}}],[\"handlerthread\",{\"1\":{\"190\":1}}],[\"handler在指定的时间唤起\",{\"1\":{\"237\":1}}],[\"handler在\",{\"1\":{\"56\":1}}],[\"handler\",{\"0\":{\"44\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1},\"1\":{\"39\":7,\"44\":1,\"52\":4,\"53\":3,\"54\":1,\"56\":2,\"82\":2,\"83\":9,\"123\":2,\"140\":3,\"176\":1,\"179\":8,\"190\":1,\"193\":6,\"229\":7,\"231\":1,\"232\":1,\"235\":5,\"236\":1,\"237\":4,\"238\":2,\"243\":3,\"244\":3,\"247\":28,\"249\":1,\"745\":2,\"748\":1,\"753\":10,\"759\":7,\"761\":27}}],[\"handledragupdate\",{\"1\":{\"418\":1}}],[\"handledragstart\",{\"1\":{\"418\":2}}],[\"handled\",{\"1\":{\"26\":3,\"748\":1,\"761\":1,\"763\":1}}],[\"hand\",{\"1\":{\"123\":1,\"756\":1}}],[\"hanlder\",{\"1\":{\"39\":1}}],[\"hanyongbai\",{\"1\":{\"33\":2}}],[\"hot\",{\"1\":{\"763\":1,\"768\":1}}],[\"hotspot\",{\"1\":{\"460\":1,\"463\":1,\"492\":1,\"609\":1}}],[\"host\",{\"1\":{\"757\":1}}],[\"horizontal\",{\"1\":{\"276\":1,\"424\":1,\"439\":3}}],[\"holds\",{\"1\":{\"500\":1}}],[\"holding\",{\"1\":{\"243\":1,\"244\":1,\"761\":1}}],[\"hold\",{\"1\":{\"228\":1,\"243\":1,\"244\":1,\"247\":1,\"404\":1,\"415\":1,\"417\":1}}],[\"holder\",{\"1\":{\"126\":1,\"398\":2}}],[\"holders\",{\"1\":{\"126\":1}}],[\"hookiactivitymanagerservice\",{\"1\":{\"179\":2}}],[\"hooksingleton\",{\"1\":{\"179\":2}}],[\"hookhandle\",{\"1\":{\"178\":1,\"179\":2}}],[\"hookactivitymanagernative\",{\"1\":{\"179\":2}}],[\"hookams\",{\"1\":{\"178\":1,\"179\":2}}],[\"hookapplication\",{\"1\":{\"178\":2}}],[\"hook\",{\"0\":{\"175\":1,\"179\":1},\"1\":{\"176\":3,\"178\":1,\"180\":1,\"247\":2}}],[\"hoyouly\",{\"1\":{\"139\":1}}],[\"how\",{\"1\":{\"128\":2,\"231\":1,\"267\":1,\"627\":1,\"771\":1}}],[\"hour\",{\"1\":{\"19\":1,\"521\":2,\"578\":5}}],[\"home=\",{\"1\":{\"678\":1}}],[\"homescreen\",{\"1\":{\"189\":1}}],[\"home\",{\"1\":{\"3\":1,\"276\":1,\"279\":1,\"295\":1,\"484\":2,\"670\":1,\"686\":1,\"728\":2}}],[\"hexstr\",{\"1\":{\"557\":6}}],[\"hex\",{\"1\":{\"557\":5}}],[\"hexo+github=blog\",{\"0\":{\"798\":1}}],[\"hexo\",{\"0\":{\"715\":1,\"790\":1,\"793\":1,\"804\":1,\"805\":1,\"806\":1,\"808\":1},\"1\":{\"448\":2,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"716\":1,\"718\":10,\"719\":1,\"791\":4,\"793\":5,\"794\":6,\"795\":2,\"796\":1,\"805\":5,\"806\":8,\"807\":1,\"808\":3,\"809\":2,\"811\":1,\"812\":4,\"813\":4}}],[\"heroopacity\",{\"1\":{\"352\":1}}],[\"herorecttween\",{\"1\":{\"352\":2}}],[\"heroflight>\",{\"1\":{\"349\":2}}],[\"heroflightdirection\",{\"1\":{\"348\":1,\"350\":4,\"351\":2,\"352\":5}}],[\"heroflightmanifest\",{\"0\":{\"348\":1},\"1\":{\"347\":1,\"348\":4,\"351\":2,\"352\":1,\"353\":1}}],[\"heroflight\",{\"0\":{\"352\":1},\"1\":{\"347\":1,\"351\":3,\"352\":3,\"353\":3}}],[\"herostate\",{\"0\":{\"347\":1},\"1\":{\"347\":2,\"348\":1,\"351\":3,\"352\":1,\"353\":1}}],[\"herostate>\",{\"1\":{\"346\":1,\"351\":5}}],[\"herocontrollerscope\",{\"1\":{\"349\":3,\"353\":1}}],[\"herocontroller\",{\"0\":{\"349\":1},\"1\":{\"346\":1,\"347\":1,\"349\":16,\"350\":2,\"353\":2}}],[\"heroclippedchildwidget\",{\"1\":{\"342\":4,\"343\":5}}],[\"herochildwidget\",{\"1\":{\"340\":3,\"342\":1}}],[\"herotag\",{\"1\":{\"340\":2}}],[\"heroes\",{\"1\":{\"340\":1,\"350\":1,\"351\":1}}],[\"hero\",{\"0\":{\"338\":1,\"340\":1,\"342\":1,\"346\":1},\"1\":{\"338\":1,\"340\":22,\"341\":18,\"342\":13,\"343\":5,\"344\":6,\"346\":10,\"347\":9,\"348\":2,\"349\":4,\"350\":2,\"351\":10,\"352\":4,\"353\":4,\"354\":3}}],[\"here\",{\"1\":{\"60\":1,\"92\":1,\"138\":1,\"243\":1,\"244\":1,\"247\":2,\"376\":2,\"753\":3,\"761\":3}}],[\"headarray是保存堆元素的数组\",{\"1\":{\"858\":1}}],[\"headarray\",{\"1\":{\"858\":5,\"859\":16}}],[\"heading\",{\"1\":{\"417\":1}}],[\"head\",{\"0\":{\"457\":1},\"1\":{\"376\":1,\"464\":1,\"465\":1}}],[\"header+body\",{\"1\":{\"405\":2}}],[\"headersliverbuilder\",{\"1\":{\"403\":2,\"405\":4,\"420\":1}}],[\"headers\",{\"1\":{\"365\":2,\"374\":1,\"383\":1,\"711\":5}}],[\"header\",{\"1\":{\"125\":1,\"374\":1,\"402\":2,\"403\":6,\"404\":5,\"405\":15,\"415\":2,\"416\":2,\"418\":3,\"419\":4,\"420\":3,\"422\":1,\"731\":2}}],[\"heap中第一个\",{\"1\":{\"237\":1}}],[\"heap中\",{\"1\":{\"235\":1,\"237\":1}}],[\"heap\",{\"1\":{\"221\":1,\"235\":4,\"237\":3,\"238\":1,\"248\":2,\"285\":1,\"455\":4,\"753\":1,\"758\":1,\"762\":1,\"763\":1,\"768\":1,\"769\":4}}],[\"hencoder\",{\"1\":{\"131\":2,\"132\":1,\"133\":2}}],[\"heightconstraints\",{\"1\":{\"439\":1}}],[\"heightfactor\",{\"1\":{\"251\":2,\"259\":9,\"262\":2}}],[\"heightpixels\",{\"1\":{\"196\":2}}],[\"heightmeasurespec\",{\"1\":{\"159\":4,\"163\":1}}],[\"height=\",{\"1\":{\"115\":1,\"118\":1,\"167\":2,\"189\":5,\"783\":1,\"784\":1}}],[\"height=2033\",{\"1\":{\"101\":2}}],[\"height\",{\"1\":{\"101\":1,\"131\":1,\"153\":3,\"159\":1,\"195\":1,\"273\":1,\"276\":2,\"330\":2,\"342\":3,\"347\":4,\"367\":2,\"369\":1,\"370\":2,\"372\":1,\"392\":9,\"393\":2,\"396\":12,\"397\":3,\"399\":2,\"403\":2,\"434\":1,\"439\":3,\"440\":2,\"444\":6,\"445\":4}}],[\"heic\",{\"1\":{\"6\":1}}],[\"held\",{\"1\":{\"761\":1}}],[\"hello\",{\"0\":{\"448\":1},\"1\":{\"83\":1,\"189\":2,\"222\":2,\"223\":4,\"230\":4,\"251\":5,\"262\":1,\"273\":1,\"403\":1,\"461\":1,\"486\":1,\"487\":2,\"570\":1,\"624\":3,\"625\":4,\"742\":1,\"798\":1}}],[\"helper\",{\"1\":{\"757\":1,\"763\":1,\"767\":1}}],[\"help\",{\"1\":{\"10\":1,\"808\":1}}],[\"ect\",{\"1\":{\"700\":1}}],[\"echo\",{\"1\":{\"697\":1}}],[\"eu\",{\"1\":{\"612\":1}}],[\"europe\",{\"1\":{\"267\":1}}],[\"era\",{\"1\":{\"578\":1}}],[\"err\",{\"1\":{\"890\":1}}],[\"errmsg\",{\"1\":{\"399\":1}}],[\"errno\",{\"1\":{\"247\":2}}],[\"errorptr\",{\"1\":{\"753\":1}}],[\"errorcallbacksamplingrate\",{\"1\":{\"398\":2}}],[\"errorcallback\",{\"1\":{\"398\":2}}],[\"errorbuilder\",{\"1\":{\"368\":1,\"370\":2,\"391\":1,\"392\":2,\"393\":2}}],[\"errordetails\",{\"1\":{\"295\":5}}],[\"errorwidgetbuilder\",{\"1\":{\"391\":2}}],[\"errorwidget\",{\"1\":{\"264\":1,\"295\":1}}],[\"errorsarefatal\",{\"1\":{\"748\":8}}],[\"errors\",{\"1\":{\"229\":1,\"231\":2,\"246\":1,\"749\":1,\"754\":1,\"759\":2}}],[\"error\",{\"1\":{\"223\":4,\"228\":1,\"231\":20,\"232\":2,\"237\":1,\"243\":5,\"244\":2,\"246\":1,\"295\":4,\"297\":1,\"368\":1,\"374\":1,\"376\":1,\"383\":1,\"511\":2,\"541\":1,\"726\":1,\"745\":5,\"748\":4,\"749\":1,\"751\":9,\"752\":3,\"753\":28,\"754\":4,\"756\":4,\"757\":11,\"758\":2,\"759\":16,\"761\":8}}],[\"estr\",{\"1\":{\"557\":2}}],[\"estimatedbounds\",{\"1\":{\"334\":1}}],[\"efficient\",{\"1\":{\"523\":1}}],[\"effectively\",{\"1\":{\"511\":2,\"761\":1}}],[\"effectivetextstyle\",{\"1\":{\"264\":5}}],[\"effects\",{\"1\":{\"422\":1,\"430\":1}}],[\"effect>\",{\"1\":{\"125\":1}}],[\"effect\",{\"1\":{\"125\":3}}],[\"effectflow\",{\"1\":{\"125\":1}}],[\"equivalent\",{\"1\":{\"412\":1}}],[\"equals\",{\"1\":{\"92\":3,\"153\":1,\"179\":1,\"398\":4,\"817\":2}}],[\"eden\",{\"1\":{\"455\":1,\"457\":1}}],[\"edge\",{\"1\":{\"384\":1}}],[\"edgeinsetsgeometry\",{\"1\":{\"307\":2}}],[\"edgeinsetsgeometrytween\",{\"1\":{\"307\":3}}],[\"edgeinsets\",{\"1\":{\"289\":1,\"295\":1,\"307\":1}}],[\"edit\",{\"1\":{\"173\":1}}],[\"edittext\",{\"1\":{\"117\":1}}],[\"either\",{\"1\":{\"247\":1,\"351\":1,\"352\":1,\"417\":1,\"511\":1,\"759\":1,\"761\":1}}],[\"either<failure\",{\"1\":{\"126\":3}}],[\"easier\",{\"1\":{\"748\":1}}],[\"easylist\",{\"1\":{\"279\":1}}],[\"ea\",{\"1\":{\"517\":2}}],[\"earlier\",{\"1\":{\"238\":1}}],[\"earliest\",{\"1\":{\"238\":1,\"574\":1}}],[\"early\",{\"1\":{\"234\":1}}],[\"eager\",{\"1\":{\"768\":1}}],[\"eagerly\",{\"1\":{\"231\":1}}],[\"eagererror\",{\"1\":{\"231\":6}}],[\"each\",{\"1\":{\"231\":1,\"235\":1,\"236\":1,\"243\":1,\"244\":1,\"496\":1,\"523\":1,\"615\":1,\"771\":1}}],[\"eab5b5c16e42\",{\"1\":{\"123\":1}}],[\"e4b7058c1165\",{\"1\":{\"128\":1}}],[\"emissions\",{\"1\":{\"629\":1}}],[\"emitted\",{\"1\":{\"630\":1}}],[\"emitter\",{\"1\":{\"630\":1}}],[\"emitting\",{\"1\":{\"629\":1,\"656\":1}}],[\"emit\",{\"1\":{\"629\":5,\"630\":2,\"651\":1,\"656\":2}}],[\"empty\",{\"1\":{\"516\":1,\"759\":1}}],[\"embedder\",{\"1\":{\"228\":1,\"234\":1,\"247\":2,\"751\":1,\"756\":1}}],[\"email\",{\"1\":{\"62\":1,\"63\":1,\"196\":1,\"586\":1,\"670\":3,\"794\":1}}],[\"emulated\",{\"1\":{\"6\":1}}],[\"e\",{\"0\":{\"87\":1,\"88\":1},\"1\":{\"33\":1,\"62\":6,\"63\":4,\"83\":2,\"87\":1,\"88\":4,\"90\":1,\"142\":1,\"179\":4,\"187\":3,\"224\":2,\"231\":5,\"264\":2,\"294\":2,\"302\":1,\"383\":4,\"395\":1,\"399\":3,\"403\":2,\"412\":1,\"485\":1,\"557\":2,\"569\":2,\"578\":1,\"584\":6,\"586\":6,\"587\":6,\"612\":1,\"633\":2,\"656\":3,\"665\":1,\"708\":1,\"712\":4,\"731\":2,\"742\":1,\"745\":1,\"748\":3,\"753\":1,\"763\":1,\"890\":4}}],[\"evict\",{\"1\":{\"395\":2}}],[\"evict方法从缓存中清除指定图片\",{\"1\":{\"375\":1}}],[\"evaluatable\",{\"1\":{\"357\":7}}],[\"evaluatable属性创建了\",{\"1\":{\"357\":1}}],[\"evaluate\",{\"1\":{\"303\":1,\"307\":1,\"308\":1,\"352\":1,\"355\":1,\"357\":3}}],[\"everything\",{\"1\":{\"348\":1,\"598\":1}}],[\"every\",{\"1\":{\"235\":1,\"302\":1,\"311\":1,\"594\":1,\"630\":1,\"631\":2,\"761\":1,\"771\":1}}],[\"even\",{\"1\":{\"226\":1,\"761\":1}}],[\"eventname\",{\"1\":{\"398\":8}}],[\"eventchannel\",{\"1\":{\"397\":1,\"398\":9}}],[\"events\",{\"1\":{\"235\":1,\"247\":5,\"761\":1}}],[\"eventhandlers\",{\"1\":{\"398\":6}}],[\"eventhandlersenddata\",{\"1\":{\"235\":1,\"237\":3}}],[\"eventhandlerimplementation\",{\"1\":{\"237\":2}}],[\"eventhandler\",{\"1\":{\"235\":1,\"236\":1,\"237\":13,\"398\":9}}],[\"event\",{\"0\":{\"221\":1,\"230\":1},\"1\":{\"25\":7,\"26\":9,\"27\":4,\"74\":5,\"125\":10,\"126\":3,\"153\":1,\"221\":12,\"223\":2,\"225\":1,\"226\":2,\"228\":1,\"229\":5,\"230\":6,\"235\":7,\"236\":4,\"237\":6,\"238\":8,\"239\":4,\"240\":1,\"249\":1,\"272\":1,\"285\":1,\"292\":1,\"398\":8,\"740\":1,\"744\":1,\"757\":1,\"759\":3,\"762\":2}}],[\"ev\",{\"1\":{\"25\":5,\"26\":14}}],[\"elf\",{\"1\":{\"757\":2}}],[\"elif\",{\"1\":{\"725\":1,\"757\":1}}],[\"elapse\",{\"1\":{\"241\":1}}],[\"elapsedinseconds\",{\"1\":{\"321\":4}}],[\"elapsedrealtime\",{\"1\":{\"20\":1}}],[\"elapsed\",{\"1\":{\"12\":2,\"20\":1,\"321\":3}}],[\"elye\",{\"1\":{\"206\":1}}],[\"elementtype\",{\"1\":{\"565\":1,\"568\":1}}],[\"element的performrebuild\",{\"1\":{\"270\":1}}],[\"element代表在树中详细的位置\",{\"1\":{\"269\":1}}],[\"elementlifecycle\",{\"1\":{\"251\":1,\"256\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"elements\",{\"1\":{\"126\":2,\"267\":1,\"636\":1}}],[\"element\",{\"1\":{\"87\":2,\"123\":1,\"193\":1,\"222\":1,\"226\":1,\"251\":2,\"254\":5,\"255\":1,\"256\":19,\"259\":8,\"262\":5,\"263\":7,\"264\":10,\"265\":9,\"266\":5,\"269\":1,\"270\":5,\"493\":1,\"784\":1}}],[\"else\",{\"1\":{\"6\":1,\"26\":7,\"27\":1,\"53\":1,\"87\":1,\"88\":1,\"125\":1,\"145\":1,\"153\":2,\"163\":1,\"173\":4,\"187\":2,\"193\":1,\"196\":3,\"224\":1,\"225\":1,\"231\":5,\"232\":2,\"235\":3,\"237\":2,\"238\":2,\"243\":1,\"247\":2,\"256\":1,\"304\":1,\"324\":2,\"325\":1,\"332\":2,\"350\":1,\"351\":2,\"376\":2,\"383\":3,\"384\":1,\"391\":1,\"393\":1,\"398\":7,\"399\":5,\"415\":1,\"417\":1,\"418\":2,\"423\":1,\"439\":1,\"440\":1,\"485\":1,\"486\":1,\"527\":2,\"534\":1,\"560\":1,\"583\":1,\"587\":3,\"591\":5,\"614\":1,\"725\":1,\"748\":2,\"750\":1,\"752\":1,\"753\":5,\"756\":1,\"757\":6,\"759\":1,\"761\":4,\"784\":1,\"836\":9,\"847\":1,\"848\":1,\"850\":1,\"859\":5,\"880\":1,\"890\":8,\"898\":1,\"912\":1,\"913\":3,\"921\":1}}],[\"encounter\",{\"1\":{\"761\":1}}],[\"encounters\",{\"1\":{\"761\":1}}],[\"encountered\",{\"1\":{\"748\":1,\"753\":1,\"761\":1}}],[\"encodedkey\",{\"1\":{\"557\":2}}],[\"encode\",{\"1\":{\"398\":1}}],[\"encoderequests\",{\"1\":{\"398\":2}}],[\"encoding=\",{\"1\":{\"6\":1,\"115\":1,\"116\":1,\"167\":1,\"784\":1,\"816\":1}}],[\"encryption\",{\"1\":{\"584\":3}}],[\"encrypt\",{\"1\":{\"557\":2}}],[\"enmu\",{\"0\":{\"550\":1},\"1\":{\"549\":1}}],[\"enum<\",{\"1\":{\"591\":1}}],[\"enum<e>>\",{\"1\":{\"521\":1}}],[\"enum<e\",{\"1\":{\"521\":1}}],[\"enum<enumclazz>\",{\"1\":{\"521\":1}}],[\"enum类\",{\"1\":{\"521\":1}}],[\"enum类的每个值实际上都继承自java\",{\"1\":{\"521\":1}}],[\"enumclasssize\",{\"1\":{\"521\":2}}],[\"enumclazz\",{\"1\":{\"521\":10}}],[\"enum\",{\"0\":{\"520\":1},\"1\":{\"521\":1,\"522\":1,\"550\":2,\"565\":1,\"568\":1,\"583\":1,\"591\":1,\"612\":5,\"615\":3}}],[\"enableoverride\",{\"1\":{\"587\":1}}],[\"enable\",{\"1\":{\"360\":1}}],[\"enables\",{\"1\":{\"262\":1}}],[\"enabled\",{\"1\":{\"247\":1,\"347\":1,\"376\":1}}],[\"enabled=\",{\"1\":{\"63\":1}}],[\"engine\",{\"1\":{\"243\":1,\"253\":1,\"254\":1,\"266\":1}}],[\"engineering\",{\"1\":{\"128\":1}}],[\"en\",{\"1\":{\"241\":1,\"575\":1,\"849\":1}}],[\"enqueueentrypointinvocationandnotifyspawner\",{\"1\":{\"759\":3}}],[\"enqueued\",{\"1\":{\"235\":1,\"238\":1}}],[\"enqueue方法把\",{\"1\":{\"234\":1}}],[\"enqueue\",{\"0\":{\"235\":1},\"1\":{\"234\":2,\"235\":4,\"236\":1,\"238\":3,\"247\":1,\"708\":1,\"712\":1,\"713\":1,\"759\":2,\"760\":1}}],[\"enqueuemessage\",{\"1\":{\"52\":2}}],[\"ensureisrunnable\",{\"1\":{\"759\":1}}],[\"ensureinitialized方法中\",{\"1\":{\"253\":1}}],[\"ensureinitialized\",{\"0\":{\"253\":1},\"1\":{\"252\":1,\"253\":1}}],[\"ensureinitialize\",{\"1\":{\"243\":2,\"244\":3}}],[\"ensureactive\",{\"1\":{\"657\":1}}],[\"ensures\",{\"1\":{\"494\":1,\"759\":1}}],[\"ensurescheduleimmediate\",{\"1\":{\"227\":1,\"228\":2}}],[\"ensurevisualupdate\",{\"1\":{\"253\":1,\"254\":1}}],[\"ensure\",{\"1\":{\"193\":1,\"231\":2,\"243\":1,\"247\":3,\"745\":1,\"753\":2}}],[\"entire\",{\"1\":{\"822\":1}}],[\"entity中的数据的操作\",{\"1\":{\"786\":1}}],[\"entity\",{\"1\":{\"781\":1,\"786\":1}}],[\"enteranim等指定执行action时的动画\",{\"1\":{\"783\":1}}],[\"enteranim=\",{\"1\":{\"783\":1}}],[\"enteralwayscollapsed\",{\"1\":{\"111\":1}}],[\"enteralways\",{\"1\":{\"111\":2}}],[\"enterisolate\",{\"1\":{\"753\":1,\"756\":1}}],[\"enterscope\",{\"1\":{\"752\":1}}],[\"entered\",{\"1\":{\"412\":1,\"753\":1}}],[\"enter\",{\"1\":{\"412\":1,\"753\":2,\"761\":1}}],[\"entropysource\",{\"1\":{\"752\":1}}],[\"entropy\",{\"1\":{\"752\":1}}],[\"entrant\",{\"1\":{\"376\":1}}],[\"entries\",{\"1\":{\"92\":1,\"351\":2}}],[\"entrypoint\",{\"1\":{\"742\":3,\"748\":6,\"749\":1,\"759\":9}}],[\"entry对threadlocal是弱引用\",{\"1\":{\"528\":1}}],[\"entryset\",{\"1\":{\"500\":2,\"523\":1}}],[\"entry<k\",{\"1\":{\"499\":1,\"500\":2,\"523\":1}}],[\"entry\",{\"1\":{\"92\":2,\"139\":1,\"224\":1,\"226\":5,\"227\":2,\"228\":1,\"229\":3,\"234\":1,\"237\":1,\"243\":2,\"247\":12,\"376\":2,\"508\":1,\"523\":1,\"527\":3,\"528\":2,\"594\":1,\"745\":1,\"747\":2,\"749\":1,\"754\":1,\"759\":6,\"767\":2,\"771\":2}}],[\"endblockdata\",{\"1\":{\"583\":1,\"591\":1}}],[\"ending\",{\"1\":{\"358\":1}}],[\"endif\",{\"1\":{\"247\":2,\"753\":11,\"757\":5,\"761\":2}}],[\"endflight\",{\"1\":{\"347\":3,\"351\":3}}],[\"endrecording方法中使用其创建\",{\"1\":{\"334\":1}}],[\"endcallback\",{\"1\":{\"247\":1,\"759\":1,\"761\":1}}],[\"endpoint之间的贝塞尔曲线首尾点的坐标必定落在起点和终点上\",{\"1\":{\"145\":1}}],[\"endpoint\",{\"1\":{\"144\":5,\"145\":9,\"146\":1}}],[\"end++\",{\"1\":{\"92\":1}}],[\"end\",{\"1\":{\"92\":7,\"193\":1,\"235\":1,\"247\":4,\"302\":1,\"304\":2,\"305\":1,\"308\":11,\"324\":3,\"348\":4,\"349\":3,\"350\":1,\"351\":1,\"352\":1,\"358\":10,\"359\":1,\"412\":1,\"486\":1,\"731\":3,\"757\":2,\"759\":4,\"761\":11,\"763\":1,\"844\":1}}],[\"enforceinterface\",{\"1\":{\"71\":1,\"138\":1}}],[\"environment\",{\"1\":{\"678\":1,\"748\":4,\"821\":1}}],[\"env\",{\"1\":{\"3\":1,\"696\":1}}],[\"ex\",{\"1\":{\"587\":6}}],[\"extractor\",{\"1\":{\"753\":8}}],[\"extra\",{\"1\":{\"486\":1,\"523\":1}}],[\"extclassloader的父加载器为null\",{\"1\":{\"485\":1}}],[\"ext\",{\"1\":{\"484\":1}}],[\"extension\",{\"1\":{\"615\":1}}],[\"extention\",{\"1\":{\"484\":1}}],[\"extent\",{\"1\":{\"405\":5}}],[\"extented\",{\"1\":{\"382\":1}}],[\"extendednetworkimageprovider>\",{\"1\":{\"383\":2}}],[\"extendednetworkimageprovider中\",{\"1\":{\"383\":1}}],[\"extendednetworkimageprovider\",{\"0\":{\"383\":1},\"1\":{\"383\":13}}],[\"extendedimageprovider\",{\"0\":{\"384\":1},\"1\":{\"384\":1}}],[\"extendedimageprovider<t\",{\"1\":{\"384\":1}}],[\"extendedimageprovider<image\",{\"1\":{\"383\":1}}],[\"extendedimageprovider<extendednetworkimageprovider>\",{\"1\":{\"383\":1}}],[\"extendedimagestate\",{\"1\":{\"382\":2}}],[\"extendedimage\",{\"0\":{\"382\":1},\"1\":{\"376\":1,\"382\":6}}],[\"extended\",{\"0\":{\"379\":1,\"380\":1},\"1\":{\"363\":1,\"376\":1,\"379\":2,\"380\":3,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"385\":3,\"386\":2,\"387\":1}}],[\"extends\",{\"1\":{\"25\":1,\"30\":2,\"35\":1,\"38\":3,\"39\":4,\"63\":1,\"71\":2,\"83\":1,\"117\":1,\"138\":2,\"152\":2,\"178\":1,\"189\":2,\"193\":1,\"224\":1,\"234\":1,\"243\":2,\"253\":1,\"255\":2,\"256\":5,\"259\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":5,\"272\":2,\"273\":9,\"276\":3,\"279\":1,\"281\":1,\"282\":2,\"284\":1,\"295\":1,\"302\":3,\"307\":3,\"308\":2,\"309\":1,\"310\":2,\"311\":1,\"316\":1,\"317\":2,\"318\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"342\":1,\"346\":1,\"349\":2,\"357\":2,\"358\":3,\"359\":1,\"360\":2,\"374\":1,\"383\":2,\"384\":1,\"391\":1,\"392\":2,\"393\":2,\"396\":2,\"397\":1,\"398\":1,\"405\":2,\"409\":1,\"423\":1,\"424\":2,\"425\":2,\"426\":3,\"427\":1,\"428\":1,\"430\":1,\"436\":1,\"437\":1,\"438\":1,\"521\":2,\"523\":1,\"528\":1,\"536\":1,\"539\":2,\"540\":4,\"569\":1,\"591\":1,\"711\":1}}],[\"externalizable继承自serializable\",{\"1\":{\"589\":1}}],[\"externalizable\",{\"0\":{\"580\":1,\"589\":1},\"1\":{\"580\":1,\"590\":1,\"591\":4,\"598\":1}}],[\"external\",{\"1\":{\"5\":2,\"6\":1,\"226\":1,\"234\":2,\"237\":4,\"243\":3,\"244\":2,\"247\":1,\"398\":1,\"745\":4,\"747\":2,\"748\":6}}],[\"excludes\",{\"1\":{\"771\":1}}],[\"exclude\",{\"1\":{\"757\":5}}],[\"excludefromsemantics\",{\"1\":{\"370\":1,\"392\":2,\"393\":2}}],[\"exclusive\",{\"1\":{\"748\":1}}],[\"except\",{\"1\":{\"731\":1,\"757\":1}}],[\"exceptionally\",{\"1\":{\"634\":1}}],[\"exceptionfromresponse\",{\"1\":{\"243\":2}}],[\"exceptions\",{\"1\":{\"229\":1,\"711\":1,\"745\":1}}],[\"exception\",{\"1\":{\"83\":1,\"193\":1,\"223\":1,\"229\":1,\"231\":1,\"256\":1,\"296\":1,\"309\":1,\"395\":4,\"511\":1,\"569\":1,\"583\":1,\"634\":1,\"712\":1,\"890\":4}}],[\"experience\",{\"1\":{\"763\":1}}],[\"expected\",{\"1\":{\"426\":1}}],[\"expects\",{\"1\":{\"247\":1,\"763\":1}}],[\"expect\",{\"1\":{\"231\":1}}],[\"exposing\",{\"1\":{\"412\":2}}],[\"exported=true\",{\"1\":{\"36\":1}}],[\"exported=\",{\"1\":{\"6\":1,\"35\":1,\"63\":1}}],[\"export\",{\"1\":{\"3\":1,\"246\":1,\"247\":3,\"248\":1,\"699\":1,\"752\":1,\"758\":1,\"759\":1}}],[\"expression\",{\"1\":{\"663\":1}}],[\"expressions\",{\"1\":{\"262\":1,\"360\":1}}],[\"expressed\",{\"1\":{\"302\":1}}],[\"expanding\",{\"1\":{\"422\":1}}],[\"expands\",{\"1\":{\"276\":1}}],[\"expandedheight\",{\"1\":{\"403\":1}}],[\"expanded和flexible没有差别\",{\"1\":{\"277\":1}}],[\"expanded和flexible默认情况下都会按照flex占据父容器剩余的可用空间\",{\"1\":{\"277\":1}}],[\"expanded会强制\",{\"1\":{\"277\":1}}],[\"expanded\",{\"0\":{\"275\":1,\"445\":1},\"1\":{\"276\":3,\"439\":1,\"445\":5}}],[\"explained\",{\"1\":{\"267\":1,\"598\":1}}],[\"explicitly\",{\"1\":{\"753\":1}}],[\"explicit\",{\"1\":{\"247\":1,\"495\":1,\"761\":1}}],[\"existssync\",{\"1\":{\"383\":2}}],[\"exists\",{\"1\":{\"247\":2,\"615\":1,\"753\":2}}],[\"existingflight\",{\"1\":{\"351\":5}}],[\"existingflights\",{\"1\":{\"351\":1}}],[\"existing\",{\"1\":{\"193\":1,\"244\":1,\"247\":1,\"351\":2,\"376\":1,\"753\":4,\"760\":1}}],[\"exitisolate\",{\"1\":{\"752\":1,\"753\":1,\"759\":1}}],[\"exiting\",{\"1\":{\"247\":1,\"759\":1,\"761\":1}}],[\"exitscope\",{\"1\":{\"752\":2}}],[\"exits\",{\"1\":{\"247\":1,\"560\":1,\"761\":1}}],[\"exit\",{\"1\":{\"238\":1,\"247\":6,\"296\":1,\"560\":1,\"749\":1,\"753\":4,\"754\":1,\"757\":8,\"759\":5,\"761\":2}}],[\"exituntilcollapsed\",{\"1\":{\"111\":1}}],[\"executable\",{\"1\":{\"767\":1,\"771\":2}}],[\"executing\",{\"1\":{\"497\":1,\"748\":1,\"763\":1}}],[\"execution\",{\"1\":{\"285\":2,\"495\":1,\"629\":1,\"740\":1,\"753\":1,\"768\":1,\"770\":2,\"771\":2}}],[\"executr\",{\"1\":{\"193\":1}}],[\"executor\",{\"1\":{\"192\":1,\"193\":10}}],[\"executes\",{\"1\":{\"193\":2}}],[\"executed\",{\"1\":{\"193\":2,\"234\":2,\"493\":1,\"495\":1,\"629\":1}}],[\"executeonexecutor\",{\"1\":{\"193\":2}}],[\"execute\",{\"1\":{\"190\":1,\"191\":1,\"192\":3,\"193\":11,\"228\":1,\"238\":1,\"629\":2,\"708\":1,\"712\":4,\"763\":1}}],[\"exec\",{\"1\":{\"192\":1,\"193\":4}}],[\"exactly\",{\"1\":{\"158\":1,\"159\":1,\"163\":1}}],[\"examples\",{\"1\":{\"578\":1}}],[\"example\",{\"1\":{\"30\":6,\"124\":1,\"138\":10,\"285\":1,\"412\":1,\"598\":1,\"763\":1}}],[\"etc\",{\"1\":{\"3\":1,\"678\":1,\"686\":1,\"700\":4}}],[\"ok\",{\"1\":{\"761\":1}}],[\"okhttp3\",{\"1\":{\"711\":3,\"712\":2}}],[\"okhttpclient\",{\"0\":{\"710\":1},\"1\":{\"708\":11,\"709\":1,\"710\":6}}],[\"okhttp是可以用于\",{\"1\":{\"708\":1}}],[\"okhttprequest类的build方法则只是将其自身传递给okhttp3\",{\"1\":{\"711\":1}}],[\"okhttprequest\",{\"1\":{\"707\":1,\"711\":3,\"712\":1}}],[\"okhttprequestbuilder的build\",{\"1\":{\"713\":1}}],[\"okhttprequestbuilder>的子类来收集\",{\"1\":{\"711\":1}}],[\"okhttprequestbuilder\",{\"1\":{\"707\":1}}],[\"okhttp\",{\"1\":{\"707\":1,\"708\":2,\"711\":3,\"712\":2}}],[\"okhttputils将初始化okhttpclient的动作提取出来\",{\"1\":{\"713\":1}}],[\"okhttputils\",{\"0\":{\"706\":1},\"1\":{\"707\":1,\"708\":3,\"709\":1,\"710\":5,\"712\":2}}],[\"occasionally\",{\"1\":{\"761\":1}}],[\"occur\",{\"1\":{\"761\":1}}],[\"occurred\",{\"1\":{\"759\":1}}],[\"occurs\",{\"1\":{\"246\":1,\"511\":2,\"759\":2}}],[\"o其他\",{\"1\":{\"689\":1}}],[\"oop引用\",{\"1\":{\"521\":1}}],[\"oop指针\",{\"1\":{\"516\":1}}],[\"oop\",{\"1\":{\"516\":1}}],[\"oomerror\",{\"1\":{\"462\":1}}],[\"oomstring\",{\"1\":{\"461\":1}}],[\"oom\",{\"1\":{\"457\":1,\"458\":1,\"460\":1,\"461\":1,\"465\":1,\"466\":1,\"467\":1,\"468\":1,\"478\":1,\"745\":1}}],[\"oob\",{\"1\":{\"247\":1,\"745\":5,\"761\":10}}],[\"oldvalue\",{\"1\":{\"619\":1}}],[\"oldmode\",{\"1\":{\"583\":1}}],[\"oldlayer\",{\"1\":{\"440\":1}}],[\"oldpixels\",{\"1\":{\"412\":2,\"413\":4}}],[\"oldposition\",{\"1\":{\"407\":3}}],[\"oldpainter\",{\"1\":{\"332\":12}}],[\"olddelegate\",{\"1\":{\"330\":1,\"333\":4}}],[\"oldwidget\",{\"1\":{\"271\":2,\"273\":2,\"305\":3,\"310\":4,\"367\":1}}],[\"old\",{\"1\":{\"263\":2,\"270\":3,\"300\":1,\"314\":1}}],[\"oldams\",{\"1\":{\"179\":2}}],[\"otherwise\",{\"1\":{\"246\":1,\"247\":2,\"351\":1,\"759\":1,\"760\":1}}],[\"other\",{\"1\":{\"183\":1,\"225\":1,\"226\":1,\"231\":1,\"243\":2,\"244\":2,\"402\":1,\"411\":2,\"412\":2,\"496\":1,\"615\":1,\"630\":1,\"740\":1,\"752\":1,\"753\":1,\"757\":1,\"761\":3}}],[\"others\",{\"0\":{\"139\":1},\"1\":{\"742\":1}}],[\"our\",{\"1\":{\"237\":1,\"310\":1}}],[\"ourselves\",{\"1\":{\"159\":1}}],[\"outfilename\",{\"1\":{\"695\":1}}],[\"outmethod\",{\"1\":{\"513\":3}}],[\"outclass$1\",{\"1\":{\"513\":3}}],[\"outclass\",{\"1\":{\"513\":10}}],[\"outofmemory\",{\"1\":{\"459\":1}}],[\"outscrollposition\",{\"1\":{\"405\":1}}],[\"outside\",{\"1\":{\"360\":1,\"753\":1}}],[\"outerdelta\",{\"1\":{\"418\":19}}],[\"outerscrollposition\",{\"1\":{\"415\":1}}],[\"outerposition\",{\"1\":{\"405\":3,\"415\":4,\"417\":8,\"418\":9,\"420\":3}}],[\"outer\",{\"1\":{\"404\":2,\"405\":1,\"409\":2,\"415\":1,\"416\":1,\"417\":11,\"418\":13}}],[\"outercontroller\",{\"1\":{\"404\":1,\"405\":5,\"416\":1,\"420\":2}}],[\"outpoint\",{\"1\":{\"196\":4}}],[\"outputpath\",{\"1\":{\"695\":1}}],[\"output\",{\"1\":{\"70\":1,\"221\":1,\"258\":1,\"576\":2,\"586\":1,\"587\":1,\"630\":1,\"631\":2,\"730\":1,\"731\":8,\"737\":7}}],[\"outputuri\",{\"1\":{\"6\":1}}],[\"outrect\",{\"1\":{\"153\":5}}],[\"out目录下生成ibookmanager\",{\"1\":{\"70\":1}}],[\"out\",{\"1\":{\"60\":1,\"131\":1,\"132\":2,\"237\":2,\"247\":1,\"350\":1,\"351\":1,\"418\":1,\"438\":2,\"461\":1,\"506\":1,\"513\":2,\"517\":1,\"527\":4,\"532\":2,\"533\":2,\"534\":2,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"553\":2,\"584\":8,\"586\":1,\"587\":3,\"589\":1,\"590\":5,\"617\":2,\"618\":1,\"663\":1,\"731\":2,\"736\":1,\"753\":3,\"760\":1,\"761\":1,\"890\":2}}],[\"overhead\",{\"1\":{\"516\":1}}],[\"overscrolls\",{\"1\":{\"418\":3}}],[\"overscrollnotification\",{\"1\":{\"413\":2}}],[\"overscrolled\",{\"1\":{\"412\":3,\"417\":1,\"418\":1}}],[\"overscroll\",{\"1\":{\"412\":26,\"413\":13,\"417\":1,\"418\":18,\"419\":2}}],[\"overlap\",{\"1\":{\"405\":2}}],[\"overlayentry\",{\"1\":{\"352\":3}}],[\"overlaystate\",{\"1\":{\"351\":2}}],[\"overlay\",{\"1\":{\"132\":1,\"338\":1,\"340\":1,\"341\":4,\"343\":2,\"348\":1,\"349\":1,\"351\":6,\"352\":4,\"353\":1,\"354\":1}}],[\"overflow\",{\"1\":{\"251\":1,\"262\":1,\"265\":2,\"459\":1,\"464\":1,\"465\":2,\"614\":1,\"761\":1}}],[\"overdue\",{\"1\":{\"238\":3}}],[\"over\",{\"1\":{\"132\":2,\"231\":1,\"302\":2,\"417\":1}}],[\"overrides\",{\"1\":{\"243\":3,\"757\":1}}],[\"override\",{\"1\":{\"25\":1,\"26\":1,\"30\":1,\"35\":5,\"62\":4,\"63\":6,\"64\":2,\"71\":4,\"75\":1,\"80\":1,\"83\":4,\"112\":4,\"117\":1,\"118\":1,\"125\":1,\"126\":3,\"138\":7,\"153\":4,\"173\":1,\"178\":2,\"179\":1,\"189\":6,\"193\":2,\"195\":1,\"214\":2,\"215\":1,\"253\":1,\"255\":2,\"256\":2,\"259\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":5,\"273\":10,\"276\":2,\"279\":1,\"281\":1,\"282\":2,\"284\":3,\"295\":1,\"302\":1,\"307\":3,\"308\":3,\"310\":5,\"311\":1,\"323\":1,\"330\":2,\"332\":3,\"334\":1,\"342\":1,\"349\":2,\"357\":3,\"358\":2,\"359\":2,\"360\":2,\"374\":2,\"383\":1,\"391\":1,\"392\":2,\"393\":3,\"396\":2,\"397\":1,\"398\":7,\"399\":4,\"405\":2,\"411\":1,\"415\":2,\"418\":1,\"424\":5,\"426\":1,\"429\":1,\"430\":1,\"437\":2,\"438\":2,\"440\":1,\"441\":1,\"486\":1,\"527\":1,\"566\":1,\"586\":1,\"590\":3,\"594\":4,\"662\":1,\"708\":2,\"711\":1,\"712\":3,\"750\":1,\"754\":1,\"756\":1,\"833\":1}}],[\"owner\",{\"1\":{\"251\":1,\"254\":1,\"256\":10,\"258\":1,\"259\":1,\"261\":1,\"262\":1,\"263\":1,\"332\":2,\"438\":2}}],[\"ownership\",{\"1\":{\"247\":1,\"256\":1,\"374\":1}}],[\"owning\",{\"1\":{\"247\":1}}],[\"owns\",{\"1\":{\"247\":1}}],[\"own\",{\"1\":{\"126\":1,\"235\":1,\"309\":1,\"740\":5,\"822\":2}}],[\"o++\",{\"1\":{\"90\":1}}],[\"o\",{\"1\":{\"90\":5,\"272\":1,\"285\":1,\"513\":2,\"517\":2,\"569\":2,\"612\":2,\"712\":2,\"826\":1,\"860\":3,\"879\":3,\"880\":3,\"881\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":1}}],[\"obb\",{\"1\":{\"745\":1}}],[\"obecjt\",{\"1\":{\"583\":1}}],[\"observable\",{\"1\":{\"612\":1}}],[\"observatory\",{\"1\":{\"247\":1,\"761\":2}}],[\"observed\",{\"1\":{\"768\":1,\"770\":1}}],[\"observe\",{\"1\":{\"126\":1}}],[\"objarr2\",{\"1\":{\"538\":4}}],[\"objarr1\",{\"1\":{\"538\":5}}],[\"objarr\",{\"1\":{\"538\":3}}],[\"obj\",{\"1\":{\"71\":4,\"138\":4,\"179\":1,\"193\":1,\"583\":7,\"587\":14,\"591\":11,\"753\":3,\"759\":10}}],[\"objectinput\",{\"1\":{\"589\":1,\"590\":1}}],[\"objectinputstream\",{\"1\":{\"583\":1,\"584\":2,\"586\":4,\"587\":5}}],[\"objectinputstream实现具体细节\",{\"1\":{\"581\":1}}],[\"objectoutput\",{\"1\":{\"589\":1,\"590\":1}}],[\"objectoutputfile\",{\"1\":{\"586\":1,\"587\":1}}],[\"objectoutputstream\",{\"1\":{\"506\":1,\"584\":2,\"586\":4,\"587\":9}}],[\"object数组\",{\"1\":{\"538\":1}}],[\"object数组赋给\",{\"1\":{\"538\":1}}],[\"object代替了\",{\"1\":{\"538\":1}}],[\"objectstreamclass\",{\"1\":{\"587\":2}}],[\"objectstreamexception\",{\"1\":{\"583\":1,\"584\":1}}],[\"objects\",{\"1\":{\"519\":1,\"753\":2}}],[\"object>>\",{\"1\":{\"398\":3}}],[\"object>\",{\"1\":{\"384\":1,\"398\":2,\"523\":2}}],[\"objectruntimetype\",{\"1\":{\"323\":1,\"359\":1}}],[\"objectptr\",{\"1\":{\"248\":1}}],[\"object\",{\"0\":{\"94\":1,\"95\":1},\"1\":{\"63\":1,\"71\":1,\"80\":1,\"83\":1,\"86\":1,\"90\":2,\"92\":5,\"94\":1,\"95\":1,\"138\":1,\"179\":14,\"183\":1,\"196\":1,\"231\":3,\"232\":6,\"237\":1,\"247\":3,\"248\":2,\"251\":1,\"253\":1,\"256\":3,\"259\":1,\"262\":1,\"263\":1,\"265\":4,\"272\":1,\"282\":1,\"297\":1,\"308\":1,\"351\":1,\"357\":1,\"358\":1,\"368\":1,\"369\":1,\"370\":1,\"376\":1,\"399\":1,\"438\":1,\"500\":1,\"501\":1,\"503\":1,\"516\":1,\"517\":2,\"523\":4,\"525\":1,\"527\":3,\"528\":2,\"538\":7,\"540\":2,\"561\":1,\"565\":1,\"569\":1,\"583\":9,\"584\":3,\"586\":4,\"587\":7,\"591\":1,\"594\":1,\"612\":5,\"615\":1,\"618\":1,\"636\":1,\"662\":1,\"711\":2,\"712\":4,\"728\":2,\"731\":1,\"737\":4,\"745\":4,\"748\":1,\"749\":1,\"753\":6,\"754\":1,\"759\":6,\"763\":2,\"769\":2,\"786\":1,\"822\":2}}],[\"obtained\",{\"1\":{\"761\":1}}],[\"obtaindeadworkerslocked\",{\"1\":{\"761\":2}}],[\"obtaincachestatus获取图片状态imagecachestatus\",{\"1\":{\"375\":1}}],[\"obtainkey获取图片对应的\",{\"1\":{\"374\":1}}],[\"obtainkey\",{\"1\":{\"374\":2}}],[\"obtaining\",{\"1\":{\"365\":5}}],[\"obtainmessage\",{\"1\":{\"193\":1}}],[\"obtainstyledattributes\",{\"1\":{\"116\":1,\"117\":1,\"153\":1}}],[\"obtain\",{\"1\":{\"26\":1,\"39\":2,\"54\":1,\"55\":1,\"71\":2,\"83\":2,\"138\":2,\"264\":1}}],[\"osthread\",{\"1\":{\"247\":22,\"752\":1,\"759\":2,\"763\":5}}],[\"oserror\",{\"1\":{\"243\":1}}],[\"osize>>1\",{\"1\":{\"95\":2}}],[\"osize\",{\"1\":{\"95\":3}}],[\"os\",{\"1\":{\"62\":2,\"63\":3,\"71\":18,\"83\":3,\"126\":2,\"138\":18,\"196\":1,\"247\":16,\"580\":1,\"594\":1,\"710\":1,\"753\":1,\"757\":1,\"759\":2,\"761\":6}}],[\"or和not运算\",{\"1\":{\"723\":1}}],[\"org\",{\"1\":{\"575\":1,\"622\":2,\"794\":1}}],[\"oracle\",{\"1\":{\"492\":1,\"511\":1,\"542\":1,\"552\":1,\"573\":1,\"578\":1}}],[\"orientation\",{\"1\":{\"196\":2}}],[\"orientation=\",{\"1\":{\"189\":1}}],[\"original\",{\"1\":{\"71\":1,\"399\":2,\"742\":1}}],[\"origin\",{\"1\":{\"33\":3,\"248\":2,\"672\":4,\"673\":3,\"753\":2,\"759\":2}}],[\"or\",{\"1\":{\"126\":1,\"193\":1,\"231\":1,\"232\":1,\"235\":1,\"238\":2,\"243\":1,\"247\":2,\"263\":1,\"270\":1,\"275\":1,\"276\":1,\"284\":1,\"285\":3,\"295\":1,\"309\":1,\"348\":1,\"350\":1,\"351\":5,\"352\":1,\"370\":1,\"374\":1,\"395\":1,\"412\":1,\"417\":1,\"448\":1,\"492\":2,\"493\":4,\"494\":2,\"495\":1,\"497\":2,\"511\":4,\"578\":1,\"584\":1,\"719\":1,\"752\":1,\"757\":1,\"759\":1,\"761\":5,\"763\":1,\"767\":1}}],[\"ordinal\",{\"1\":{\"521\":2}}],[\"ordinary\",{\"1\":{\"26\":1}}],[\"order\",{\"1\":{\"193\":1,\"235\":2,\"247\":1,\"437\":1,\"485\":1}}],[\"ordered值大的\",{\"1\":{\"76\":1}}],[\"ordered\",{\"1\":{\"76\":3,\"235\":1}}],[\"off\",{\"1\":{\"374\":1,\"767\":1}}],[\"offstage\",{\"1\":{\"347\":2,\"350\":2,\"351\":3}}],[\"offsets\",{\"1\":{\"352\":5}}],[\"offset\",{\"1\":{\"314\":1,\"327\":1,\"330\":1,\"332\":11,\"333\":1,\"355\":1,\"402\":1,\"409\":1,\"412\":12,\"418\":1,\"419\":1,\"422\":1,\"423\":4,\"424\":6,\"425\":2,\"427\":1,\"433\":1,\"436\":4,\"437\":8,\"438\":12,\"439\":5,\"440\":25,\"441\":3}}],[\"offer\",{\"1\":{\"193\":2}}],[\"offers\",{\"1\":{\"10\":1}}],[\"offloat\",{\"1\":{\"147\":1}}],[\"of\",{\"0\":{\"574\":1},\"1\":{\"10\":1,\"19\":1,\"33\":4,\"92\":2,\"123\":1,\"126\":3,\"183\":2,\"193\":2,\"214\":1,\"225\":1,\"228\":1,\"231\":3,\"232\":3,\"235\":3,\"236\":1,\"237\":1,\"238\":4,\"243\":2,\"244\":3,\"247\":3,\"253\":1,\"264\":2,\"265\":1,\"273\":2,\"276\":2,\"278\":1,\"285\":1,\"302\":15,\"309\":11,\"316\":3,\"347\":1,\"349\":1,\"351\":2,\"357\":1,\"359\":1,\"360\":1,\"374\":1,\"402\":1,\"405\":1,\"412\":2,\"417\":1,\"418\":1,\"423\":2,\"424\":1,\"426\":2,\"429\":2,\"436\":2,\"486\":3,\"492\":2,\"493\":4,\"494\":1,\"495\":2,\"496\":3,\"497\":2,\"498\":1,\"511\":1,\"516\":1,\"552\":2,\"573\":2,\"574\":2,\"578\":2,\"583\":1,\"584\":1,\"591\":1,\"594\":2,\"615\":4,\"629\":1,\"636\":1,\"637\":1,\"662\":1,\"742\":1,\"748\":3,\"753\":5,\"756\":1,\"759\":2,\"760\":1,\"761\":6,\"763\":3,\"768\":1,\"769\":1,\"771\":4,\"785\":1,\"822\":2}}],[\"opaque\",{\"1\":{\"371\":1}}],[\"opacity\",{\"1\":{\"302\":1,\"309\":1,\"352\":1,\"370\":2}}],[\"optionally\",{\"1\":{\"497\":1}}],[\"optional\",{\"1\":{\"486\":1,\"493\":1,\"759\":1}}],[\"optionaltypeargs\",{\"1\":{\"316\":1}}],[\"options\",{\"1\":{\"395\":1,\"396\":3,\"397\":3,\"398\":13,\"757\":1}}],[\"options生产\",{\"1\":{\"394\":1}}],[\"options等自定义通道获取图片并展示\",{\"1\":{\"390\":1}}],[\"optimizing\",{\"1\":{\"768\":2}}],[\"optimizations\",{\"1\":{\"771\":1}}],[\"optimization\",{\"1\":{\"96\":1,\"226\":1}}],[\"optimized\",{\"0\":{\"768\":1},\"1\":{\"766\":1,\"768\":5,\"769\":1}}],[\"optimize\",{\"1\":{\"2\":1,\"10\":1}}],[\"ops\",{\"1\":{\"243\":3}}],[\"operate\",{\"1\":{\"552\":1}}],[\"operations\",{\"1\":{\"334\":1,\"745\":1}}],[\"operation\",{\"1\":{\"243\":2,\"753\":1,\"761\":1}}],[\"operatorstack\",{\"1\":{\"890\":16}}],[\"operator\",{\"1\":{\"186\":1,\"619\":4,\"630\":1}}],[\"openfile\",{\"1\":{\"752\":1}}],[\"opening\",{\"1\":{\"247\":1}}],[\"openinputstream\",{\"1\":{\"6\":1}}],[\"open\",{\"1\":{\"186\":1,\"243\":4,\"247\":1,\"286\":1,\"718\":1,\"731\":1,\"737\":1,\"752\":1}}],[\"onbefore\",{\"1\":{\"712\":2}}],[\"onbind\",{\"1\":{\"35\":2,\"36\":1,\"38\":2,\"39\":2,\"63\":2,\"66\":1,\"83\":1,\"138\":3}}],[\"onfailure\",{\"1\":{\"708\":1,\"712\":1}}],[\"onafter\",{\"1\":{\"712\":2}}],[\"onawait\",{\"1\":{\"646\":1}}],[\"onattachedtoengine\",{\"1\":{\"398\":1}}],[\"onactionup\",{\"1\":{\"153\":1}}],[\"ongoing\",{\"1\":{\"351\":1}}],[\"ongloballayoutlistener\",{\"1\":{\"160\":1}}],[\"onmethodcall方法\",{\"1\":{\"398\":1,\"399\":1}}],[\"onmethodcall\",{\"1\":{\"284\":1,\"398\":2}}],[\"onmetricschanged\",{\"1\":{\"253\":1}}],[\"onmeasure\",{\"1\":{\"159\":2}}],[\"onvalue\",{\"1\":{\"231\":2,\"232\":1}}],[\"onupdate\",{\"1\":{\"189\":3}}],[\"onuserinteraction\",{\"1\":{\"25\":1}}],[\"onwindowfocuschanged\",{\"1\":{\"160\":1}}],[\"ondrag\",{\"1\":{\"423\":1,\"436\":1}}],[\"ondragcanceled\",{\"1\":{\"418\":1}}],[\"ondrawforeground\",{\"1\":{\"161\":1}}],[\"ondrawover\",{\"1\":{\"153\":1}}],[\"ondraw\",{\"1\":{\"153\":4,\"161\":1}}],[\"ondisabled\",{\"1\":{\"189\":2}}],[\"ondeleted\",{\"1\":{\"189\":2}}],[\"ondependentviewchanged\",{\"1\":{\"112\":3}}],[\"ondestroy\",{\"1\":{\"35\":3,\"123\":1}}],[\"onresponse\",{\"1\":{\"708\":1,\"712\":2}}],[\"onresourceready\",{\"1\":{\"399\":1}}],[\"onresult方法\",{\"1\":{\"399\":1}}],[\"onresult\",{\"1\":{\"398\":1,\"399\":4}}],[\"onresume\",{\"1\":{\"30\":1,\"160\":2}}],[\"onrequestpermissionsresult\",{\"1\":{\"173\":1}}],[\"onreceiveornull\",{\"1\":{\"646\":1}}],[\"onreceiveimageevent\",{\"1\":{\"398\":2}}],[\"onreceive\",{\"1\":{\"139\":1,\"189\":2,\"646\":3}}],[\"onnotification\",{\"1\":{\"423\":1,\"436\":1}}],[\"onneedvisualupdate\",{\"1\":{\"253\":1}}],[\"onnestedprescroll\",{\"1\":{\"112\":2}}],[\"onnavigationrequested\",{\"1\":{\"125\":1}}],[\"onloadfailed\",{\"1\":{\"399\":1}}],[\"onloadfailed返回结果\",{\"1\":{\"398\":1}}],[\"onloadsuccess\",{\"1\":{\"398\":1}}],[\"onloadresult方法也就是powerimageexternalrequest和powerimagetexturerequest的onloadresult\",{\"1\":{\"398\":1}}],[\"onloadresult\",{\"1\":{\"398\":1,\"399\":2}}],[\"onloginfinishedlistener\",{\"1\":{\"123\":2}}],[\"only\",{\"1\":{\"48\":1,\"193\":2,\"203\":1,\"237\":2,\"247\":3,\"256\":1,\"332\":2,\"351\":1,\"376\":1,\"395\":1,\"514\":1,\"615\":1,\"740\":1,\"753\":2,\"757\":1,\"761\":1,\"822\":2}}],[\"onid\",{\"1\":{\"823\":2}}],[\"onisolateshutdown\",{\"1\":{\"752\":1}}],[\"onisolateinitialize\",{\"1\":{\"752\":2}}],[\"onimagecomplete\",{\"1\":{\"398\":3}}],[\"onimgclicklistener\",{\"1\":{\"117\":3,\"118\":1}}],[\"onindexclick\",{\"1\":{\"153\":1}}],[\"onindexclicklistener\",{\"1\":{\"153\":2}}],[\"onintercepttouchevent\",{\"1\":{\"26\":6}}],[\"ontick方法监听处理动画进度\",{\"1\":{\"353\":1}}],[\"ontick\",{\"1\":{\"352\":1}}],[\"ontap\",{\"1\":{\"289\":1,\"340\":2,\"342\":4}}],[\"ontap等等\",{\"1\":{\"289\":1}}],[\"ontextscalefactorchanged\",{\"1\":{\"253\":1}}],[\"onto\",{\"1\":{\"243\":1,\"244\":1}}],[\"ontouchlistener\",{\"1\":{\"27\":1}}],[\"ontouch\",{\"1\":{\"27\":2,\"74\":1}}],[\"ontouchevent\",{\"1\":{\"25\":1,\"26\":2,\"27\":4}}],[\"ontransact\",{\"1\":{\"66\":1,\"71\":3,\"138\":2}}],[\"onplatformbrightnesschanged\",{\"1\":{\"253\":1}}],[\"onpostexecute\",{\"1\":{\"190\":1,\"193\":2}}],[\"onpressed\",{\"1\":{\"273\":2,\"289\":1}}],[\"onpreexecute\",{\"1\":{\"190\":1,\"193\":2}}],[\"onprogressupdate\",{\"1\":{\"190\":1,\"193\":1}}],[\"onpeoplelistchange\",{\"1\":{\"62\":2,\"64\":1}}],[\"onpeoplechange\",{\"1\":{\"62\":2,\"63\":3}}],[\"onpause\",{\"1\":{\"30\":1,\"41\":1,\"160\":1}}],[\"onepng\",{\"1\":{\"823\":2}}],[\"onexit\",{\"1\":{\"748\":8}}],[\"oneach\",{\"0\":{\"633\":2},\"1\":{\"631\":2,\"633\":1,\"656\":1,\"657\":1}}],[\"oneclazz<t>\",{\"1\":{\"535\":1}}],[\"onevent\",{\"1\":{\"398\":2}}],[\"oneventsent\",{\"1\":{\"125\":3}}],[\"onenteridlelocked\",{\"1\":{\"761\":1}}],[\"onend方法\",{\"1\":{\"303\":1}}],[\"onend\",{\"1\":{\"302\":2,\"308\":1}}],[\"onenabled\",{\"1\":{\"189\":2}}],[\"onerror捕获并处理\",{\"1\":{\"292\":1}}],[\"onerror\",{\"1\":{\"223\":1,\"231\":4,\"232\":11,\"243\":1,\"295\":2,\"296\":2,\"297\":1,\"368\":1,\"374\":1,\"376\":1,\"384\":2,\"748\":8}}],[\"oneshot=\",{\"1\":{\"167\":1}}],[\"oneway\",{\"1\":{\"83\":3}}],[\"one\",{\"1\":{\"48\":1,\"193\":2,\"203\":1,\"231\":1,\"232\":3,\"234\":1,\"235\":1,\"236\":1,\"238\":2,\"244\":1,\"247\":1,\"302\":1,\"351\":1,\"412\":1,\"417\":2,\"615\":1,\"630\":1,\"631\":5,\"757\":1,\"760\":1,\"761\":4}}],[\"onstage\",{\"1\":{\"350\":1}}],[\"onstartnestedscroll\",{\"1\":{\"112\":2}}],[\"onstartcommand\",{\"1\":{\"36\":3}}],[\"onstart\",{\"1\":{\"30\":1,\"160\":1}}],[\"onswitchedtrain\",{\"1\":{\"317\":2}}],[\"onsend\",{\"1\":{\"646\":3}}],[\"onsemanticsaction\",{\"1\":{\"253\":1}}],[\"onsemanticsenabledchanged\",{\"1\":{\"253\":1}}],[\"onsemanticsownerdisposed\",{\"1\":{\"253\":1}}],[\"onsemanticsownercreated\",{\"1\":{\"253\":1}}],[\"onservicedisconnected\",{\"1\":{\"35\":2,\"38\":1,\"62\":1,\"65\":1,\"83\":1,\"138\":1}}],[\"onserviceconnected\",{\"1\":{\"35\":2,\"38\":2,\"39\":1,\"62\":1,\"83\":1,\"138\":1}}],[\"oncompletion的可空参数\",{\"1\":{\"658\":1}}],[\"oncompletion\",{\"1\":{\"634\":3,\"658\":1}}],[\"oncolorchanged\",{\"1\":{\"273\":6}}],[\"onchunk\",{\"1\":{\"368\":1}}],[\"oncancelled\",{\"1\":{\"193\":2}}],[\"oncallbackdied\",{\"1\":{\"63\":1}}],[\"oncallback\",{\"1\":{\"62\":2}}],[\"once\",{\"1\":{\"193\":1,\"229\":1,\"237\":1,\"243\":2,\"244\":1,\"247\":1,\"350\":1,\"376\":1}}],[\"onclick等通用的属性可以直接绑定外\",{\"1\":{\"784\":1}}],[\"onclicked\",{\"1\":{\"124\":1}}],[\"onclick=\",{\"1\":{\"124\":1}}],[\"onclick\",{\"1\":{\"27\":3,\"117\":6,\"118\":1,\"178\":1,\"289\":1,\"662\":2}}],[\"onclicklistener\",{\"1\":{\"27\":2,\"117\":1,\"178\":1,\"662\":2}}],[\"oncreate中注册的\",{\"1\":{\"399\":1}}],[\"oncreate方法中\",{\"1\":{\"399\":1}}],[\"oncreate\",{\"1\":{\"24\":1,\"30\":1,\"35\":3,\"36\":1,\"38\":1,\"39\":1,\"62\":2,\"64\":1,\"126\":2,\"173\":1,\"178\":2,\"189\":2,\"195\":2,\"196\":1,\"214\":2,\"215\":2,\"399\":1}}],[\"on\",{\"1\":{\"2\":2,\"10\":1,\"33\":1,\"62\":1,\"63\":1,\"118\":1,\"126\":1,\"183\":1,\"193\":1,\"229\":1,\"231\":2,\"235\":1,\"244\":1,\"247\":8,\"253\":1,\"254\":1,\"294\":1,\"331\":1,\"332\":1,\"351\":1,\"376\":1,\"384\":1,\"395\":3,\"412\":1,\"418\":1,\"426\":1,\"430\":1,\"448\":1,\"523\":1,\"552\":1,\"561\":1,\"574\":1,\"630\":1,\"671\":1,\"745\":1,\"748\":2,\"749\":2,\"753\":7,\"754\":2,\"757\":2,\"759\":9,\"761\":3,\"770\":2,\"771\":1,\"776\":1,\"777\":1,\"778\":1,\"779\":1}}],[\"n∗\",{\"1\":{\"918\":1}}],[\"n∗log\",{\"1\":{\"913\":1}}],[\"n∗logn\",{\"1\":{\"857\":1,\"918\":1}}],[\"n次就可以排序完成\",{\"1\":{\"897\":1}}],[\"n2\",{\"1\":{\"875\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":1}}],[\"n^2\",{\"1\":{\"860\":1}}],[\"nb\",{\"1\":{\"780\":1}}],[\"nindex\",{\"1\":{\"927\":4}}],[\"nicenews\",{\"1\":{\"776\":1}}],[\"niecenews\",{\"1\":{\"776\":1}}],[\"nt\",{\"1\":{\"731\":1,\"805\":1}}],[\"nthreads\",{\"1\":{\"560\":2}}],[\"ngroups\",{\"1\":{\"560\":1}}],[\"ns\",{\"1\":{\"490\":1}}],[\"n$errordetails\",{\"1\":{\"295\":1}}],[\"npm\",{\"1\":{\"803\":1,\"805\":1}}],[\"npm之后\",{\"1\":{\"802\":1}}],[\"np\",{\"1\":{\"247\":2}}],[\"nmh包裹要处理的回调\",{\"1\":{\"247\":2}}],[\"nmh\",{\"1\":{\"247\":5}}],[\"nfile\",{\"1\":{\"241\":1,\"243\":1}}],[\"n请赋予相机权限\",{\"1\":{\"173\":1}}],[\"nanotime\",{\"1\":{\"485\":2}}],[\"naming\",{\"1\":{\"309\":1}}],[\"nameequals\",{\"1\":{\"753\":2}}],[\"name的参数\",{\"1\":{\"731\":1}}],[\"names\",{\"1\":{\"247\":1}}],[\"namespacepointer\",{\"1\":{\"243\":1}}],[\"named实现标识不同注解的作用\",{\"1\":{\"204\":1}}],[\"named完全一致的功能\",{\"1\":{\"204\":1}}],[\"named源码\",{\"1\":{\"204\":1}}],[\"named以及幕后英雄\",{\"1\":{\"204\":1}}],[\"named\",{\"0\":{\"204\":1},\"1\":{\"204\":5}}],[\"name\",{\"1\":{\"35\":2,\"38\":2,\"62\":2,\"83\":2,\"104\":1,\"105\":5,\"138\":2,\"204\":2,\"237\":3,\"244\":1,\"246\":1,\"247\":20,\"285\":1,\"340\":2,\"342\":3,\"485\":6,\"486\":2,\"492\":1,\"521\":2,\"553\":7,\"578\":1,\"612\":1,\"619\":13,\"670\":2,\"719\":1,\"726\":3,\"731\":14,\"745\":1,\"747\":1,\"748\":2,\"749\":1,\"750\":7,\"751\":4,\"753\":12,\"754\":2,\"755\":1,\"756\":9,\"757\":10,\"758\":7,\"759\":5,\"761\":5,\"791\":1,\"793\":1,\"794\":1,\"809\":1}}],[\"name=\",{\"1\":{\"6\":4,\"35\":2,\"36\":1,\"39\":1,\"104\":2,\"105\":1,\"116\":3,\"167\":3,\"186\":2,\"189\":4,\"783\":3,\"784\":2}}],[\"natively\",{\"1\":{\"763\":1}}],[\"nativeasset\",{\"1\":{\"398\":2,\"399\":1}}],[\"nativearguments\",{\"1\":{\"237\":1,\"246\":1}}],[\"nativeresult\",{\"1\":{\"395\":1}}],[\"nativemessagehandler\",{\"1\":{\"247\":5}}],[\"native\",{\"0\":{\"245\":1,\"398\":1,\"399\":1,\"460\":1},\"1\":{\"140\":4,\"237\":1,\"241\":2,\"243\":2,\"244\":6,\"246\":5,\"247\":11,\"249\":1,\"250\":1,\"385\":2,\"388\":1,\"393\":1,\"394\":3,\"397\":5,\"398\":9,\"399\":5,\"400\":2,\"460\":2,\"462\":1,\"740\":2,\"742\":1,\"745\":3,\"747\":4,\"748\":4,\"749\":1,\"754\":1,\"759\":2,\"761\":1,\"763\":1,\"768\":1,\"771\":2}}],[\"navgraph=\",{\"1\":{\"783\":1}}],[\"navhostfragment\",{\"1\":{\"783\":1}}],[\"nav\",{\"1\":{\"783\":3}}],[\"navcontroller\",{\"1\":{\"125\":3,\"783\":1}}],[\"navigate\",{\"1\":{\"783\":1}}],[\"navigatetohome\",{\"1\":{\"123\":1}}],[\"navigatorrenderobject\",{\"1\":{\"351\":5}}],[\"navigatorobserver\",{\"1\":{\"349\":2,\"350\":1}}],[\"navigatorsize\",{\"1\":{\"348\":1,\"351\":1,\"352\":1}}],[\"navigatorstate\",{\"1\":{\"346\":1,\"349\":1,\"351\":1}}],[\"navigator\",{\"1\":{\"284\":2,\"295\":3,\"340\":2,\"341\":2,\"346\":1,\"349\":4,\"351\":9,\"353\":2}}],[\"navigation>\",{\"1\":{\"783\":1}}],[\"navigation可以和appbar\",{\"1\":{\"783\":1}}],[\"navigation\",{\"0\":{\"783\":1},\"1\":{\"125\":2,\"783\":9,\"784\":1,\"788\":1}}],[\"navigationeffect\",{\"1\":{\"125\":2}}],[\"navigationmenuview\",{\"1\":{\"111\":1}}],[\"nunstartedthreads\",{\"1\":{\"560\":1}}],[\"nums\",{\"1\":{\"631\":2}}],[\"num\",{\"1\":{\"612\":1,\"646\":3,\"731\":5,\"911\":5,\"912\":5}}],[\"num>\",{\"1\":{\"317\":2}}],[\"numbers\",{\"1\":{\"629\":3,\"631\":1,\"638\":4}}],[\"number\",{\"1\":{\"92\":1,\"196\":2,\"244\":2,\"247\":3,\"578\":14,\"579\":1,\"625\":1,\"631\":2,\"760\":1}}],[\"nul1\",{\"1\":{\"258\":2,\"262\":1}}],[\"nullelement\",{\"1\":{\"265\":1}}],[\"null的时候需要判断一下\",{\"1\":{\"263\":1}}],[\"null或者child\",{\"1\":{\"263\":1}}],[\"nullptr\",{\"1\":{\"247\":20,\"750\":3,\"751\":8,\"752\":3,\"753\":16,\"754\":1,\"756\":8,\"757\":2,\"758\":4,\"759\":12,\"760\":2,\"761\":8}}],[\"nullpointerexception\",{\"1\":{\"193\":1}}],[\"nullability\",{\"1\":{\"243\":2}}],[\"nullable\",{\"1\":{\"35\":1,\"63\":2,\"117\":1,\"153\":2,\"193\":2,\"231\":1}}],[\"null其内部调用child\",{\"1\":{\"26\":1}}],[\"null\",{\"1\":{\"6\":3,\"25\":1,\"26\":6,\"35\":1,\"36\":1,\"38\":2,\"39\":2,\"48\":1,\"52\":1,\"53\":2,\"63\":5,\"71\":3,\"83\":3,\"88\":1,\"90\":2,\"94\":1,\"117\":2,\"123\":1,\"131\":3,\"138\":3,\"153\":2,\"159\":2,\"162\":1,\"167\":1,\"179\":5,\"186\":1,\"193\":8,\"224\":6,\"225\":1,\"226\":6,\"227\":1,\"228\":2,\"229\":4,\"231\":14,\"232\":3,\"234\":2,\"235\":4,\"237\":3,\"238\":6,\"241\":1,\"243\":6,\"244\":2,\"246\":1,\"247\":13,\"251\":16,\"253\":4,\"254\":1,\"256\":14,\"258\":6,\"259\":6,\"262\":20,\"263\":12,\"264\":7,\"265\":4,\"270\":6,\"284\":2,\"302\":1,\"304\":2,\"308\":3,\"309\":1,\"310\":1,\"311\":3,\"319\":2,\"320\":1,\"331\":1,\"332\":8,\"333\":3,\"334\":3,\"344\":1,\"347\":7,\"348\":1,\"351\":11,\"352\":4,\"358\":2,\"359\":2,\"360\":1,\"367\":4,\"368\":7,\"369\":4,\"370\":5,\"375\":1,\"376\":8,\"383\":7,\"384\":3,\"392\":1,\"393\":2,\"395\":1,\"396\":1,\"398\":7,\"399\":2,\"405\":2,\"417\":3,\"418\":1,\"423\":2,\"436\":3,\"438\":1,\"439\":2,\"440\":3,\"441\":1,\"485\":4,\"500\":1,\"502\":1,\"506\":1,\"519\":1,\"527\":4,\"545\":2,\"546\":1,\"547\":5,\"557\":2,\"560\":2,\"569\":1,\"583\":4,\"586\":1,\"587\":3,\"594\":1,\"634\":1,\"662\":1,\"666\":3,\"710\":2,\"711\":3,\"712\":4,\"745\":4,\"748\":3,\"749\":1,\"752\":5,\"753\":15,\"754\":5,\"757\":15,\"758\":4,\"759\":3,\"761\":10,\"817\":1,\"822\":1,\"833\":2,\"834\":1,\"836\":15,\"850\":4,\"859\":3}}],[\"n+1\",{\"1\":{\"92\":2}}],[\"n+1位为value\",{\"1\":{\"85\":1}}],[\"n位为key\",{\"1\":{\"85\":1}}],[\"nesetedscrollposition\",{\"1\":{\"415\":1}}],[\"nestedballisticscrollactivitymode\",{\"1\":{\"417\":3}}],[\"nested\",{\"1\":{\"402\":1,\"783\":1}}],[\"nestedscrollmetrics\",{\"1\":{\"417\":1}}],[\"nestedscrollactivitygetter\",{\"1\":{\"417\":1}}],[\"nestedscrollcontroller\",{\"0\":{\"406\":1},\"1\":{\"404\":1,\"405\":1,\"406\":1,\"415\":1,\"416\":2}}],[\"nestedscrollcoordinator\",{\"0\":{\"416\":1},\"1\":{\"404\":8,\"405\":6,\"408\":1,\"409\":2,\"415\":6,\"416\":2,\"418\":6,\"420\":9}}],[\"nestedscrollposition>\",{\"1\":{\"418\":1}}],[\"nestedscrollposition\",{\"0\":{\"407\":1,\"409\":1},\"1\":{\"404\":5,\"405\":1,\"407\":2,\"409\":2,\"410\":1,\"415\":3,\"416\":1,\"417\":5,\"418\":6}}],[\"nestedscrollviewviewport\",{\"1\":{\"404\":1,\"405\":3}}],[\"nestedscrollviewstate\",{\"0\":{\"405\":1},\"1\":{\"404\":1,\"405\":8,\"416\":1,\"420\":1}}],[\"nestedscrollviewcustomscrollview\",{\"1\":{\"404\":6,\"405\":9,\"409\":1,\"416\":1,\"420\":3}}],[\"nestedscrollview\",{\"0\":{\"402\":1},\"1\":{\"111\":1,\"402\":3,\"403\":4,\"404\":3,\"405\":8,\"408\":1,\"409\":1,\"415\":2,\"416\":2,\"417\":2,\"418\":3,\"419\":1,\"420\":5,\"421\":1,\"422\":1,\"433\":1}}],[\"nestedscrollingchild\",{\"1\":{\"110\":1,\"111\":1}}],[\"necessary\",{\"1\":{\"234\":1,\"445\":1,\"493\":1}}],[\"nearest\",{\"1\":{\"234\":1}}],[\"never\",{\"1\":{\"226\":1,\"247\":2,\"308\":2,\"753\":1,\"757\":1}}],[\"needscompositing\",{\"1\":{\"440\":1}}],[\"needs\",{\"1\":{\"247\":1,\"376\":1}}],[\"needslayout\",{\"1\":{\"159\":1}}],[\"need\",{\"1\":{\"92\":1,\"224\":1,\"226\":1,\"229\":1,\"233\":2,\"237\":1,\"332\":2,\"376\":1,\"494\":1,\"584\":1,\"598\":1,\"752\":1,\"753\":1,\"757\":2}}],[\"needed\",{\"1\":{\"71\":1,\"138\":1,\"159\":1,\"370\":1,\"376\":1,\"822\":1}}],[\"negativeinfinity\",{\"1\":{\"319\":1}}],[\"negative\",{\"1\":{\"92\":1,\"234\":1,\"412\":3,\"560\":1}}],[\"net高阶函数和\",{\"1\":{\"663\":1}}],[\"networkimage>\",{\"1\":{\"374\":2}}],[\"networkimage对象\",{\"1\":{\"374\":2}}],[\"networkimage\",{\"1\":{\"365\":3,\"374\":7}}],[\"network为例\",{\"1\":{\"365\":1,\"382\":1}}],[\"networkhandler\",{\"1\":{\"126\":2}}],[\"network\",{\"1\":{\"126\":1,\"186\":3,\"285\":1,\"363\":1,\"365\":2,\"374\":1,\"376\":1,\"379\":1,\"382\":1,\"383\":3,\"385\":1,\"387\":1,\"390\":1,\"395\":2,\"398\":1,\"399\":3}}],[\"networkerror\",{\"1\":{\"125\":1}}],[\"net\",{\"1\":{\"33\":3,\"62\":1,\"71\":1,\"77\":1,\"104\":1,\"105\":1,\"137\":2,\"138\":5,\"139\":1,\"149\":1,\"237\":1,\"247\":1,\"490\":1,\"497\":1,\"519\":1,\"522\":1,\"524\":1,\"528\":1,\"550\":1}}],[\"nextid\",{\"1\":{\"234\":1}}],[\"nextlistener\",{\"1\":{\"232\":2}}],[\"nextcallback\",{\"1\":{\"225\":1,\"226\":4}}],[\"next\",{\"1\":{\"26\":1,\"49\":1,\"56\":1,\"225\":1,\"226\":4,\"238\":2,\"253\":1,\"317\":5,\"500\":1,\"630\":1,\"731\":1,\"850\":2}}],[\"nexus\",{\"1\":{\"2\":1}}],[\"newisolate\",{\"1\":{\"742\":4}}],[\"newinstancefactory\",{\"1\":{\"785\":1}}],[\"newinstance\",{\"1\":{\"486\":1,\"487\":1,\"553\":1,\"823\":1}}],[\"newinneractivity\",{\"1\":{\"417\":4}}],[\"newvalue\",{\"1\":{\"619\":1}}],[\"newouteractivity\",{\"1\":{\"417\":3}}],[\"nework\",{\"1\":{\"388\":1}}],[\"newpixels\",{\"1\":{\"412\":11,\"413\":4,\"418\":2}}],[\"newpainter\",{\"1\":{\"332\":8}}],[\"newproxyinstance\",{\"1\":{\"179\":1}}],[\"newcall\",{\"1\":{\"708\":1}}],[\"newcmd\",{\"1\":{\"698\":1}}],[\"newcmd=oldcmd使用newcmd表示oldcmd\",{\"1\":{\"698\":1}}],[\"newclass\",{\"1\":{\"590\":3}}],[\"newcolor\",{\"1\":{\"273\":2}}],[\"newchild\",{\"1\":{\"259\":3,\"265\":3}}],[\"newwidget\",{\"1\":{\"256\":1,\"258\":1,\"259\":2,\"263\":5,\"270\":3}}],[\"newhandle\",{\"1\":{\"248\":1}}],[\"newerror\",{\"1\":{\"248\":1}}],[\"newentry\",{\"1\":{\"225\":4}}],[\"newarray\",{\"1\":{\"247\":1,\"594\":1}}],[\"newnativeport将要处理的事件handler封装起来\",{\"1\":{\"248\":1}}],[\"newnativeport的实现如下\",{\"1\":{\"247\":1}}],[\"newnativeport的调用参数\",{\"1\":{\"247\":1}}],[\"newnativeport总共有\",{\"1\":{\"247\":1}}],[\"newnativeport\",{\"0\":{\"247\":1},\"1\":{\"246\":2,\"247\":6}}],[\"newly\",{\"1\":{\"234\":1,\"757\":1}}],[\"newsinglethreadcontext\",{\"1\":{\"624\":1}}],[\"newstream\",{\"1\":{\"367\":3}}],[\"newstringfromcstring\",{\"1\":{\"752\":1}}],[\"newstring\",{\"1\":{\"228\":2}}],[\"newslot\",{\"1\":{\"256\":10,\"259\":2,\"263\":2,\"265\":9}}],[\"newsendport如何将创建好的dart\",{\"1\":{\"248\":1}}],[\"newsendport将dart\",{\"1\":{\"246\":1}}],[\"newsendport\",{\"0\":{\"248\":1},\"1\":{\"246\":2,\"248\":1}}],[\"newserviceport\",{\"0\":{\"246\":1},\"1\":{\"244\":4,\"246\":5}}],[\"newservice\",{\"1\":{\"199\":1,\"202\":1}}],[\"newtouchtarget\",{\"1\":{\"26\":1}}],[\"new\",{\"0\":{\"450\":1},\"1\":{\"25\":1,\"35\":2,\"38\":3,\"39\":7,\"48\":3,\"54\":1,\"55\":1,\"62\":8,\"63\":6,\"71\":1,\"83\":1,\"92\":1,\"95\":2,\"118\":1,\"123\":1,\"138\":5,\"153\":1,\"162\":4,\"178\":2,\"179\":4,\"186\":1,\"189\":2,\"193\":17,\"224\":1,\"225\":1,\"227\":1,\"231\":8,\"232\":2,\"233\":1,\"234\":5,\"235\":1,\"238\":2,\"243\":17,\"244\":6,\"246\":2,\"247\":20,\"248\":4,\"263\":2,\"270\":2,\"278\":1,\"300\":1,\"307\":1,\"314\":1,\"351\":2,\"365\":1,\"370\":1,\"398\":11,\"408\":1,\"450\":2,\"472\":1,\"478\":1,\"479\":1,\"497\":2,\"513\":7,\"516\":3,\"517\":1,\"523\":1,\"527\":9,\"538\":4,\"539\":1,\"540\":3,\"541\":3,\"545\":1,\"546\":1,\"547\":1,\"548\":1,\"549\":1,\"557\":4,\"560\":1,\"583\":1,\"586\":6,\"587\":5,\"594\":2,\"629\":1,\"630\":1,\"636\":1,\"663\":1,\"708\":5,\"710\":3,\"711\":2,\"712\":4,\"731\":10,\"737\":5,\"740\":1,\"742\":2,\"745\":2,\"747\":5,\"748\":11,\"749\":1,\"751\":1,\"752\":1,\"753\":11,\"754\":2,\"757\":8,\"758\":3,\"759\":18,\"760\":7,\"761\":2,\"809\":1,\"810\":1,\"822\":1,\"879\":1,\"890\":2}}],[\"normally\",{\"1\":{\"759\":1}}],[\"normal\",{\"1\":{\"302\":1,\"309\":1,\"752\":1,\"759\":1,\"761\":8}}],[\"norbert\",{\"1\":{\"267\":1}}],[\"nodes\",{\"1\":{\"737\":4,\"767\":1}}],[\"nodesneedingsemantics\",{\"1\":{\"253\":1}}],[\"nodesneedingpaint\",{\"1\":{\"253\":1}}],[\"nodesneedingcompositingbitsupdate\",{\"1\":{\"253\":1}}],[\"nodesneedinglayout\",{\"1\":{\"253\":1}}],[\"node不为空且key不一致\",{\"1\":{\"502\":1}}],[\"node不为空且key一致\",{\"1\":{\"502\":1}}],[\"node<k\",{\"1\":{\"500\":3,\"523\":2}}],[\"node\",{\"0\":{\"799\":1,\"801\":1},\"1\":{\"256\":1,\"285\":1,\"737\":2,\"799\":1,\"801\":3,\"802\":2,\"803\":1,\"812\":1,\"813\":1,\"834\":4,\"850\":5}}],[\"nosafepointscope\",{\"1\":{\"248\":1}}],[\"nosuchalgorithmexception\",{\"1\":{\"557\":1}}],[\"nosuchmethoderror\",{\"1\":{\"243\":1}}],[\"nosuchfieldexception\",{\"1\":{\"179\":1}}],[\"now\",{\"1\":{\"234\":5,\"238\":2,\"241\":1,\"383\":3,\"412\":1,\"418\":1,\"560\":3,\"753\":1}}],[\"nocameradialog\",{\"1\":{\"173\":2}}],[\"nocamerapermissiondialog\",{\"1\":{\"173\":2}}],[\"noclassdeffounderror的同时\",{\"1\":{\"30\":1}}],[\"noclassdeffounderror\",{\"1\":{\"30\":2}}],[\"nongeneric\",{\"1\":{\"753\":4}}],[\"noname\",{\"1\":{\"273\":13}}],[\"non\",{\"1\":{\"60\":1,\"138\":1,\"229\":1,\"243\":2,\"247\":1,\"256\":1,\"308\":1,\"485\":1,\"584\":2,\"745\":2,\"753\":1,\"758\":4,\"761\":1}}],[\"nonnull\",{\"1\":{\"26\":1,\"33\":2,\"112\":8}}],[\"nonetheless\",{\"1\":{\"412\":1}}],[\"none\",{\"1\":{\"2\":1,\"423\":1,\"436\":1,\"440\":1,\"723\":1,\"726\":1,\"731\":5,\"737\":5}}],[\"notably\",{\"1\":{\"763\":1}}],[\"notable\",{\"1\":{\"309\":1}}],[\"noting>\",{\"1\":{\"618\":1}}],[\"noting\",{\"1\":{\"618\":1}}],[\"notimplemented\",{\"1\":{\"398\":1}}],[\"notified\",{\"1\":{\"235\":1,\"238\":1}}],[\"notificationlistener<scrollupdatenotification>\",{\"1\":{\"423\":1,\"436\":1}}],[\"notifications\",{\"1\":{\"408\":1}}],[\"notificationtree\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"262\":1,\"263\":1}}],[\"notification\",{\"1\":{\"43\":3,\"237\":1,\"247\":1,\"423\":2,\"436\":2,\"761\":1}}],[\"notifyall\",{\"0\":{\"561\":1},\"1\":{\"560\":1,\"561\":1,\"562\":1}}],[\"notifylisteners\",{\"1\":{\"321\":1,\"410\":1}}],[\"notifyclients\",{\"1\":{\"273\":1}}],[\"notifyeventhandler\",{\"1\":{\"235\":3,\"237\":3,\"238\":3}}],[\"notifyzerohandler\",{\"1\":{\"235\":4,\"236\":1}}],[\"notify\",{\"0\":{\"561\":1},\"1\":{\"234\":1,\"237\":1,\"238\":1,\"247\":4,\"561\":1,\"562\":1,\"759\":2,\"760\":1}}],[\"notes\",{\"1\":{\"250\":1}}],[\"note\",{\"1\":{\"196\":1,\"822\":1}}],[\"nothing>\",{\"1\":{\"618\":1}}],[\"nothing\",{\"1\":{\"92\":2,\"376\":1,\"761\":1}}],[\"not\",{\"1\":{\"26\":2,\"36\":1,\"71\":1,\"76\":3,\"92\":1,\"128\":2,\"161\":1,\"227\":1,\"231\":2,\"232\":1,\"234\":3,\"237\":2,\"238\":1,\"243\":1,\"247\":4,\"273\":2,\"285\":1,\"311\":1,\"351\":1,\"359\":1,\"370\":2,\"376\":2,\"395\":1,\"398\":1,\"412\":3,\"418\":1,\"485\":2,\"494\":1,\"495\":2,\"511\":2,\"523\":1,\"584\":1,\"586\":1,\"587\":2,\"629\":2,\"662\":1,\"670\":1,\"711\":1,\"719\":1,\"737\":2,\"748\":3,\"751\":1,\"756\":2,\"759\":2,\"760\":1,\"761\":2,\"767\":1,\"770\":1,\"771\":1,\"822\":1,\"932\":1}}],[\"no\",{\"1\":{\"24\":1,\"26\":3,\"87\":1,\"92\":1,\"173\":1,\"224\":1,\"233\":2,\"237\":2,\"238\":3,\"243\":1,\"246\":1,\"248\":1,\"281\":1,\"284\":1,\"351\":2,\"376\":1,\"408\":1,\"589\":1,\"748\":1,\"751\":1,\"753\":2,\"759\":1,\"761\":6}}],[\"n\",{\"1\":{\"6\":2,\"7\":1,\"90\":2,\"92\":6,\"95\":2,\"145\":3,\"189\":1,\"196\":9,\"247\":17,\"272\":1,\"501\":1,\"532\":2,\"533\":2,\"534\":3,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"614\":8,\"653\":2,\"702\":1,\"703\":1,\"719\":4,\"726\":2,\"751\":1,\"753\":2,\"756\":1,\"759\":2,\"761\":14,\"842\":6,\"850\":2,\"860\":2,\"879\":2,\"880\":5,\"881\":1,\"896\":2,\"897\":2,\"904\":2,\"911\":5,\"912\":3,\"913\":3,\"919\":1,\"925\":1,\"927\":7}}],[\"ndkroot=\",{\"1\":{\"3\":1}}],[\"ndk\",{\"1\":{\"3\":3}}],[\"pclassloader\",{\"1\":{\"819\":1}}],[\"py就行\",{\"1\":{\"718\":1}}],[\"py\",{\"1\":{\"718\":1,\"719\":2,\"722\":1,\"730\":4,\"731\":4,\"736\":6,\"737\":4}}],[\"python2\",{\"1\":{\"735\":1}}],[\"python3\",{\"1\":{\"722\":1}}],[\"python\",{\"0\":{\"715\":1,\"722\":1,\"729\":1,\"734\":1,\"931\":1},\"1\":{\"716\":2,\"719\":2,\"722\":2,\"735\":2,\"931\":2}}],[\"psi\",{\"1\":{\"697\":1}}],[\"pst\",{\"1\":{\"578\":1}}],[\"p2\",{\"1\":{\"615\":1}}],[\"pm\",{\"1\":{\"578\":4}}],[\"pkcs5padding\",{\"1\":{\"557\":1}}],[\"pkg\",{\"1\":{\"243\":1}}],[\"phantomreference\",{\"0\":{\"481\":1}}],[\"phase\",{\"1\":{\"331\":1,\"332\":1}}],[\"physics\",{\"1\":{\"405\":2,\"407\":3,\"412\":4,\"413\":4,\"415\":1,\"417\":3,\"418\":5,\"423\":2,\"436\":2}}],[\"physicalmodel\",{\"1\":{\"302\":1}}],[\"phony\",{\"1\":{\"517\":1}}],[\"phone\",{\"1\":{\"140\":1}}],[\"phonewindow\",{\"1\":{\"24\":1,\"25\":4,\"28\":1}}],[\"photo\",{\"1\":{\"499\":1,\"580\":1}}],[\"photos\",{\"1\":{\"6\":1}}],[\"pd64\",{\"1\":{\"247\":4,\"248\":1,\"761\":2}}],[\"pd\",{\"1\":{\"237\":1,\"247\":2,\"761\":2}}],[\"please\",{\"1\":{\"759\":1}}],[\"plantdetailviewmodelfactory\",{\"1\":{\"785\":1}}],[\"plantdetailfragment\",{\"1\":{\"782\":1}}],[\"planting\",{\"1\":{\"784\":1}}],[\"plantid\",{\"1\":{\"783\":2}}],[\"plant\",{\"1\":{\"783\":2}}],[\"plantlistfragment\",{\"1\":{\"782\":1}}],[\"place\",{\"1\":{\"429\":1,\"430\":1,\"822\":1}}],[\"placeholdersize\",{\"1\":{\"347\":12}}],[\"placeholderbuilder\",{\"1\":{\"344\":2,\"346\":1,\"347\":2}}],[\"platform\",{\"1\":{\"284\":2,\"397\":1,\"710\":3,\"757\":16}}],[\"platformdispatcher\",{\"1\":{\"253\":1}}],[\"play\",{\"1\":{\"615\":1}}],[\"player\",{\"1\":{\"615\":4}}],[\"playground\",{\"1\":{\"142\":2}}],[\"playmovie\",{\"1\":{\"126\":6}}],[\"plugincontext\",{\"1\":{\"819\":4}}],[\"pluginapp\",{\"1\":{\"818\":1,\"823\":1}}],[\"plugin\",{\"1\":{\"209\":1,\"821\":2}}],[\"png\",{\"1\":{\"286\":1,\"365\":1,\"377\":1}}],[\"pn外\",{\"1\":{\"144\":1}}],[\"pn\",{\"1\":{\"144\":1}}],[\"pn的后一个点仍为\",{\"1\":{\"144\":1}}],[\"p0和\",{\"1\":{\"144\":1}}],[\"p0\",{\"1\":{\"144\":1}}],[\"p0的前一个仍然为\",{\"1\":{\"144\":1}}],[\"ptr\",{\"1\":{\"247\":2,\"248\":1,\"747\":1,\"753\":3,\"757\":2,\"759\":2}}],[\"ptr<isolategroupsource>\",{\"1\":{\"758\":1}}],[\"ptr<isolatespawnstate>\",{\"1\":{\"749\":1,\"750\":1,\"754\":1}}],[\"ptr<task>\",{\"1\":{\"247\":3,\"759\":2,\"760\":1,\"761\":3}}],[\"ptr<message>\",{\"1\":{\"247\":3,\"761\":3}}],[\"pthread\",{\"1\":{\"247\":14}}],[\"pt\",{\"1\":{\"101\":1}}],[\"pxheightscale\",{\"1\":{\"196\":2}}],[\"pxwidthscale\",{\"1\":{\"196\":3}}],[\"px\",{\"1\":{\"100\":8,\"101\":1,\"196\":5}}],[\"potentially\",{\"1\":{\"761\":1,\"771\":1}}],[\"potentialouterdelta\",{\"1\":{\"418\":3}}],[\"pony\",{\"1\":{\"528\":1}}],[\"powerexteralstate\",{\"1\":{\"393\":3}}],[\"powerexternalimage\",{\"0\":{\"393\":1},\"1\":{\"391\":1,\"393\":4}}],[\"powerexternalimageprovider或者powertextureimageprovider\",{\"1\":{\"394\":1}}],[\"powerexternalimageprovider类型\",{\"1\":{\"391\":1}}],[\"powerexternalimageprovider\",{\"0\":{\"397\":1},\"1\":{\"391\":2,\"393\":2,\"397\":2}}],[\"powertexturestate\",{\"1\":{\"392\":3}}],[\"powertextureimageinfo\",{\"1\":{\"392\":2,\"396\":5}}],[\"powertextureimage和powerexternalimage\",{\"1\":{\"391\":1,\"393\":1}}],[\"powertextureimage\",{\"0\":{\"392\":1},\"1\":{\"391\":2,\"392\":2,\"393\":2}}],[\"powertextureimageprovider\",{\"0\":{\"396\":1},\"1\":{\"391\":3,\"392\":1,\"396\":2,\"397\":1}}],[\"power\",{\"0\":{\"387\":1,\"388\":1},\"1\":{\"376\":1,\"387\":1,\"388\":2,\"394\":1,\"398\":4,\"399\":1,\"400\":1,\"401\":2}}],[\"powerimagenetworkloader继承自powerimageloaderprotocol\",{\"1\":{\"399\":1}}],[\"powerimagenetworkloader\",{\"1\":{\"399\":2}}],[\"powerimageresult\",{\"1\":{\"398\":3,\"399\":5}}],[\"powerimageresponse\",{\"1\":{\"398\":2,\"399\":1}}],[\"powerimagerequestconfig\",{\"1\":{\"398\":1,\"399\":1}}],[\"powerimagerequestmanager\",{\"1\":{\"398\":6}}],[\"powerimagerequest\",{\"1\":{\"398\":6}}],[\"powerimagerequestoptions\",{\"1\":{\"394\":1,\"396\":1,\"397\":1,\"398\":2}}],[\"powerimagetexturerequest或者powerimageexternalrequest\",{\"1\":{\"399\":1}}],[\"powerimagetexturerequest\",{\"1\":{\"398\":2}}],[\"powerimageexternalrequest和powerimagetexturerequest两个类\",{\"1\":{\"398\":1}}],[\"powerimageexternalrequest\",{\"1\":{\"398\":2}}],[\"powerimageeventsink\",{\"1\":{\"398\":2}}],[\"powerimagebaserequest类内部\",{\"1\":{\"399\":1}}],[\"powerimagebaserequest>\",{\"1\":{\"398\":1}}],[\"powerimagebaserequest\",{\"1\":{\"398\":6,\"399\":1}}],[\"powerimagedispatcher\",{\"1\":{\"398\":1}}],[\"powerimagesetupoptions\",{\"1\":{\"398\":1}}],[\"powerimagestate\",{\"0\":{\"391\":1},\"1\":{\"391\":2}}],[\"powerimageplugin\",{\"1\":{\"398\":3}}],[\"powerimageplatformchannel\",{\"1\":{\"398\":4}}],[\"powerimageprovider\",{\"0\":{\"394\":1},\"1\":{\"394\":3,\"395\":2,\"396\":1,\"397\":3,\"398\":2}}],[\"powerimagechannelimpl\",{\"1\":{\"398\":1}}],[\"powerimagechannel\",{\"1\":{\"398\":3}}],[\"powerimagecompleter>\",{\"1\":{\"398\":2}}],[\"powerimagecompleter\",{\"1\":{\"395\":3,\"398\":8}}],[\"powerimagemonitor\",{\"1\":{\"395\":1,\"398\":2}}],[\"powerimageloadexception\",{\"1\":{\"395\":2}}],[\"powerimageloaderprotocol>\",{\"1\":{\"398\":1}}],[\"powerimageloaderprotocol\",{\"1\":{\"398\":5,\"399\":4}}],[\"powerimageloader\",{\"1\":{\"395\":1,\"396\":1,\"397\":2,\"398\":17,\"399\":2}}],[\"powerimageinfo\",{\"1\":{\"394\":1,\"395\":2,\"396\":1,\"397\":1}}],[\"powerimage使用从powerimageprovider\",{\"1\":{\"393\":1}}],[\"powerimage继承自statefulwidget\",{\"1\":{\"390\":1}}],[\"powerimage\",{\"0\":{\"390\":1},\"1\":{\"376\":1,\"390\":3,\"393\":1,\"397\":2}}],[\"powermanager\",{\"1\":{\"140\":1}}],[\"pop\",{\"1\":{\"284\":1,\"334\":1,\"340\":1,\"348\":1,\"350\":4,\"351\":1,\"352\":3,\"724\":2,\"847\":2,\"848\":2,\"890\":9}}],[\"popbackstack\",{\"1\":{\"125\":1}}],[\"portandcapabilities\",{\"1\":{\"747\":4}}],[\"portion\",{\"1\":{\"412\":1}}],[\"port转变为\",{\"1\":{\"248\":1}}],[\"port转化为dart\",{\"1\":{\"246\":1}}],[\"port收到消息的时候\",{\"1\":{\"247\":1}}],[\"portset<entry>\",{\"1\":{\"247\":2}}],[\"portsetentry\",{\"1\":{\"247\":1}}],[\"ports\",{\"1\":{\"244\":5,\"247\":10,\"740\":1,\"759\":1,\"761\":1}}],[\"port发送消息\",{\"1\":{\"237\":1}}],[\"port\",{\"1\":{\"235\":5,\"237\":22,\"238\":1,\"244\":13,\"246\":21,\"247\":78,\"248\":13,\"745\":3,\"747\":1,\"749\":3,\"753\":3,\"754\":3,\"759\":27,\"761\":5}}],[\"portmap\",{\"1\":{\"229\":1,\"247\":11,\"745\":1,\"748\":1,\"752\":1,\"753\":1,\"759\":1}}],[\"portrait\",{\"1\":{\"196\":1}}],[\"porterduff\",{\"1\":{\"131\":1,\"133\":1,\"162\":1}}],[\"porterduffxfermode\",{\"1\":{\"131\":1,\"162\":1}}],[\"poll\",{\"1\":{\"193\":1}}],[\"pooled\",{\"1\":{\"193\":1}}],[\"pool\",{\"1\":{\"192\":1,\"193\":5,\"247\":30,\"496\":1,\"749\":1,\"754\":1,\"759\":11,\"760\":3,\"761\":6}}],[\"posix\",{\"1\":{\"517\":1}}],[\"positive\",{\"1\":{\"412\":2,\"418\":2}}],[\"positions\",{\"1\":{\"402\":1,\"410\":1,\"418\":1}}],[\"positionedtransition\",{\"1\":{\"309\":1}}],[\"positioneddirectional\",{\"1\":{\"302\":1}}],[\"positioned\",{\"1\":{\"302\":1,\"309\":2,\"352\":2}}],[\"position\",{\"1\":{\"153\":5,\"231\":1,\"247\":1,\"302\":2,\"309\":2,\"333\":1,\"340\":1,\"376\":1,\"408\":4,\"412\":2,\"415\":4,\"417\":17,\"418\":13,\"440\":6,\"441\":5}}],[\"pos\",{\"1\":{\"231\":2}}],[\"possible\",{\"1\":{\"230\":1,\"263\":1,\"270\":1,\"761\":1}}],[\"posted\",{\"1\":{\"776\":1,\"777\":1,\"778\":1,\"779\":1}}],[\"poster\",{\"1\":{\"247\":1}}],[\"post等方法获取并配置相应builder\",{\"1\":{\"708\":1}}],[\"posts\",{\"0\":{\"933\":1},\"1\":{\"285\":1,\"522\":1,\"718\":2,\"807\":1,\"809\":1}}],[\"posting\",{\"1\":{\"247\":2}}],[\"postinvalidate\",{\"1\":{\"75\":2}}],[\"postmessage\",{\"1\":{\"247\":3,\"745\":1,\"759\":1}}],[\"postmessage处理\",{\"1\":{\"236\":1}}],[\"postcobject方法将结果压入消息栈中\",{\"1\":{\"249\":1}}],[\"postcobjecthelper\",{\"1\":{\"247\":2}}],[\"postcobject返回的\",{\"1\":{\"247\":1}}],[\"postcobject\",{\"1\":{\"247\":2}}],[\"postresult\",{\"1\":{\"193\":1}}],[\"postdelayed\",{\"1\":{\"123\":1}}],[\"post\",{\"0\":{\"54\":1,\"450\":1},\"1\":{\"54\":2,\"56\":1,\"128\":1,\"136\":2,\"160\":1,\"193\":3,\"247\":1,\"286\":1,\"448\":1,\"450\":1,\"584\":1,\"718\":2,\"719\":3,\"737\":19}}],[\"points\",{\"1\":{\"771\":1}}],[\"pointing\",{\"1\":{\"753\":1}}],[\"point\",{\"1\":{\"196\":2,\"224\":1,\"227\":2,\"228\":1,\"229\":3,\"234\":1,\"237\":1,\"243\":2,\"351\":1,\"413\":1,\"753\":3,\"759\":4,\"761\":2,\"771\":1}}],[\"pointlist\",{\"1\":{\"145\":5}}],[\"pointer<uint8>\",{\"1\":{\"397\":2}}],[\"pointerscroll\",{\"1\":{\"404\":1,\"415\":1,\"417\":1}}],[\"pointers\",{\"1\":{\"247\":1}}],[\"pointeridbits\",{\"1\":{\"26\":2}}],[\"pointer\",{\"1\":{\"26\":1,\"243\":3,\"247\":1,\"397\":2}}],[\"pojo\",{\"1\":{\"122\":1}}],[\"pull\",{\"1\":{\"673\":1}}],[\"pushcliprect\",{\"1\":{\"440\":1}}],[\"pushes\",{\"1\":{\"370\":1}}],[\"push\",{\"1\":{\"284\":1,\"340\":1,\"348\":2,\"350\":1,\"352\":3,\"672\":1,\"674\":2,\"767\":1,\"794\":1,\"847\":2,\"848\":2}}],[\"purple\",{\"1\":{\"276\":1}}],[\"pubspec\",{\"1\":{\"279\":1}}],[\"publish\",{\"1\":{\"794\":5}}],[\"publishprogress\",{\"1\":{\"191\":1,\"193\":2}}],[\"publishservice\",{\"1\":{\"138\":2}}],[\"public目录下生成的\",{\"1\":{\"813\":1}}],[\"public\",{\"1\":{\"2\":1,\"6\":1,\"24\":1,\"25\":3,\"26\":3,\"27\":3,\"30\":2,\"33\":1,\"35\":6,\"38\":7,\"39\":7,\"48\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":2,\"62\":10,\"63\":9,\"64\":2,\"71\":10,\"83\":3,\"86\":1,\"87\":2,\"88\":2,\"89\":2,\"94\":1,\"95\":1,\"101\":2,\"112\":4,\"117\":6,\"118\":1,\"123\":2,\"138\":13,\"153\":10,\"159\":2,\"161\":1,\"178\":3,\"179\":5,\"189\":7,\"193\":13,\"204\":1,\"205\":1,\"237\":1,\"247\":2,\"284\":1,\"398\":12,\"513\":11,\"517\":5,\"521\":7,\"523\":3,\"527\":3,\"538\":1,\"545\":1,\"546\":1,\"547\":1,\"548\":1,\"549\":2,\"550\":1,\"553\":5,\"557\":3,\"560\":2,\"568\":3,\"569\":2,\"585\":1,\"586\":5,\"587\":2,\"589\":1,\"590\":8,\"591\":1,\"594\":1,\"708\":2,\"710\":1,\"711\":4,\"712\":6,\"718\":2,\"750\":1,\"756\":1,\"761\":2,\"794\":2,\"813\":3,\"890\":1}}],[\"pub\",{\"1\":{\"128\":1,\"670\":1}}],[\"putfield\",{\"1\":{\"584\":1}}],[\"putfields\",{\"1\":{\"584\":6}}],[\"putifabsent方法获取\",{\"1\":{\"376\":1}}],[\"putifabsent方法优先获取image\",{\"1\":{\"375\":1}}],[\"putifabsent\",{\"0\":{\"376\":1},\"1\":{\"374\":1,\"376\":1,\"384\":3,\"397\":1}}],[\"putifabsent优先从\",{\"1\":{\"374\":1}}],[\"putint\",{\"1\":{\"173\":1}}],[\"putting\",{\"1\":{\"350\":1}}],[\"putextra\",{\"1\":{\"179\":2}}],[\"put\",{\"0\":{\"87\":1,\"93\":1},\"1\":{\"63\":1,\"87\":1,\"231\":1,\"398\":3,\"497\":1,\"500\":1,\"584\":3,\"811\":1}}],[\"putstring\",{\"1\":{\"39\":1,\"83\":1}}],[\"p\",{\"1\":{\"33\":1,\"77\":3,\"111\":1,\"123\":2,\"137\":2,\"138\":1,\"139\":2,\"142\":1,\"145\":3,\"478\":1,\"479\":1,\"516\":1,\"629\":1,\"667\":1,\"904\":1}}],[\"pixabay\",{\"1\":{\"499\":1,\"580\":1}}],[\"pixelformat\",{\"1\":{\"396\":1,\"397\":4}}],[\"pixels\",{\"1\":{\"371\":1,\"397\":2,\"412\":44,\"413\":4,\"417\":4,\"418\":3,\"440\":4}}],[\"pi\",{\"1\":{\"310\":1,\"311\":1}}],[\"pick\",{\"1\":{\"417\":3,\"753\":1}}],[\"picture\",{\"1\":{\"334\":1}}],[\"picturelayer\",{\"1\":{\"334\":1}}],[\"picturerecorder\",{\"1\":{\"334\":3}}],[\"picturepath\",{\"1\":{\"6\":1}}],[\"pic002\",{\"1\":{\"137\":1}}],[\"pipelines\",{\"1\":{\"763\":1}}],[\"pipeline\",{\"1\":{\"253\":3,\"258\":1}}],[\"pipelineowner的根节点\",{\"1\":{\"253\":1,\"266\":1}}],[\"pipelineowner\",{\"1\":{\"253\":6,\"261\":1,\"266\":1,\"267\":1,\"332\":1,\"438\":1}}],[\"pipe\",{\"1\":{\"137\":2,\"237\":3}}],[\"ping\",{\"0\":{\"745\":1},\"1\":{\"745\":6}}],[\"pinned\",{\"1\":{\"403\":1}}],[\"pin\",{\"1\":{\"111\":1}}],[\"pintent\",{\"1\":{\"21\":1}}],[\"pid=1\",{\"1\":{\"140\":1}}],[\"pid=2\",{\"1\":{\"140\":1}}],[\"pid=0\",{\"1\":{\"140\":1}}],[\"pid\",{\"1\":{\"66\":1,\"138\":1}}],[\"prng\",{\"1\":{\"247\":1}}],[\"pragma\",{\"1\":{\"224\":1,\"227\":2,\"228\":1,\"229\":3,\"231\":1,\"234\":1,\"237\":3,\"243\":2,\"244\":1,\"745\":1,\"747\":1,\"748\":2}}],[\"press\",{\"1\":{\"806\":1}}],[\"presentation\",{\"1\":{\"578\":1}}],[\"present\",{\"1\":{\"238\":1}}],[\"presenter\",{\"1\":{\"123\":18}}],[\"preorder\",{\"1\":{\"666\":9}}],[\"pretend\",{\"1\":{\"629\":1,\"630\":2}}],[\"premain\",{\"1\":{\"517\":1}}],[\"preparing\",{\"1\":{\"493\":1}}],[\"preparation\",{\"0\":{\"495\":1},\"1\":{\"493\":1,\"495\":2}}],[\"prepared\",{\"1\":{\"494\":1,\"497\":1}}],[\"prepareinitialframe\",{\"1\":{\"253\":1}}],[\"prepareasynclibrary\",{\"1\":{\"228\":2}}],[\"prepare\",{\"1\":{\"48\":1,\"398\":1}}],[\"preconditions\",{\"1\":{\"759\":1}}],[\"precompiled\",{\"1\":{\"753\":6,\"757\":5,\"771\":1}}],[\"precedence\",{\"1\":{\"418\":1}}],[\"precacheimage\",{\"1\":{\"365\":1}}],[\"pre\",{\"1\":{\"400\":1}}],[\"preview\",{\"1\":{\"737\":2}}],[\"previously\",{\"1\":{\"352\":1,\"761\":2}}],[\"previous\",{\"1\":{\"351\":1}}],[\"previouschild\",{\"1\":{\"265\":3}}],[\"prevents\",{\"1\":{\"226\":1}}],[\"prefixes\",{\"1\":{\"753\":1}}],[\"prefix\",{\"1\":{\"241\":1,\"753\":8}}],[\"prio\",{\"1\":{\"247\":1}}],[\"priority\",{\"1\":{\"25\":1,\"247\":8,\"742\":1,\"745\":3,\"761\":14}}],[\"printvalue\",{\"1\":{\"625\":7}}],[\"println\",{\"1\":{\"461\":1,\"487\":2,\"513\":2,\"517\":1,\"527\":4,\"532\":1,\"533\":1,\"534\":1,\"553\":2,\"576\":2,\"584\":3,\"586\":1,\"587\":3,\"619\":5,\"625\":1,\"629\":6,\"630\":3,\"631\":2,\"633\":2,\"634\":5,\"636\":1,\"638\":2,\"645\":1,\"646\":2,\"656\":6,\"658\":4,\"663\":1,\"850\":1,\"890\":3,\"912\":2}}],[\"printerror\",{\"1\":{\"383\":3}}],[\"printerr\",{\"1\":{\"247\":5,\"753\":1,\"759\":1,\"761\":5}}],[\"printcurrenttimems\",{\"1\":{\"241\":4,\"243\":1}}],[\"print\",{\"1\":{\"222\":3,\"223\":4,\"230\":6,\"241\":1,\"273\":6,\"289\":1,\"294\":3,\"295\":1,\"297\":1,\"383\":2,\"486\":1,\"532\":1,\"533\":1,\"534\":1,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"612\":2,\"619\":2,\"621\":1,\"631\":1,\"662\":3,\"664\":4,\"666\":1,\"728\":5,\"731\":1,\"742\":6,\"753\":1,\"834\":1,\"847\":1,\"848\":1,\"850\":1}}],[\"printstacktrace\",{\"1\":{\"62\":3,\"63\":1,\"83\":1,\"179\":2,\"557\":1,\"569\":1,\"584\":3,\"586\":3,\"587\":3}}],[\"principles\",{\"1\":{\"128\":2}}],[\"primaryscrollcontroller\",{\"1\":{\"405\":1,\"423\":3,\"436\":3}}],[\"primaryswatch\",{\"1\":{\"279\":1}}],[\"primary\",{\"1\":{\"26\":1,\"423\":2,\"436\":3}}],[\"private与final\",{\"1\":{\"528\":1}}],[\"private\",{\"1\":{\"15\":1,\"19\":1,\"26\":2,\"38\":1,\"39\":2,\"48\":1,\"54\":1,\"62\":8,\"63\":5,\"71\":3,\"75\":1,\"83\":6,\"86\":4,\"90\":1,\"95\":1,\"117\":1,\"123\":1,\"125\":4,\"126\":7,\"138\":8,\"153\":1,\"173\":4,\"179\":1,\"186\":1,\"193\":5,\"196\":2,\"247\":1,\"398\":7,\"399\":1,\"490\":1,\"506\":1,\"513\":1,\"517\":1,\"519\":2,\"521\":2,\"523\":5,\"527\":3,\"538\":1,\"545\":2,\"546\":2,\"548\":2,\"549\":1,\"553\":2,\"557\":2,\"560\":1,\"570\":1,\"583\":3,\"584\":6,\"586\":1,\"587\":4,\"612\":1,\"626\":1,\"710\":2,\"817\":2,\"822\":1,\"847\":1,\"848\":1,\"858\":1,\"859\":1,\"927\":1}}],[\"profiling\",{\"1\":{\"763\":1}}],[\"profile会执行~\",{\"1\":{\"700\":1}}],[\"profile这三个只要其中一个成功执行了\",{\"1\":{\"700\":1}}],[\"profile\",{\"1\":{\"3\":1,\"700\":4,\"770\":2}}],[\"proc\",{\"1\":{\"686\":1}}],[\"proceed\",{\"1\":{\"351\":1}}],[\"processing\",{\"1\":{\"629\":1,\"630\":2,\"759\":3,\"761\":1}}],[\"processfilter\",{\"1\":{\"247\":1}}],[\"processed\",{\"1\":{\"237\":1,\"761\":2}}],[\"process\",{\"1\":{\"139\":3,\"193\":1,\"247\":1,\"492\":1,\"493\":1,\"630\":1,\"761\":5}}],[\"process=\",{\"1\":{\"36\":1,\"39\":1,\"63\":1}}],[\"programmatic\",{\"1\":{\"552\":1}}],[\"program\",{\"0\":{\"462\":1},\"1\":{\"757\":2,\"771\":1}}],[\"progressrectf\",{\"1\":{\"162\":2}}],[\"progress\",{\"1\":{\"125\":1,\"147\":2,\"167\":4,\"193\":5,\"330\":4,\"711\":1}}],[\"problems\",{\"1\":{\"448\":1}}],[\"producer\",{\"1\":{\"645\":1}}],[\"produce<int>\",{\"1\":{\"638\":1,\"646\":1}}],[\"producenumbers\",{\"1\":{\"638\":2,\"646\":1}}],[\"produced\",{\"1\":{\"636\":1}}],[\"produce\",{\"1\":{\"357\":1,\"636\":2,\"638\":2,\"640\":1,\"645\":1,\"767\":1}}],[\"produces\",{\"1\":{\"247\":1}}],[\"productmanagerstate\",{\"1\":{\"282\":2}}],[\"productmanager\",{\"1\":{\"279\":1,\"282\":1}}],[\"product\",{\"1\":{\"279\":1,\"753\":6,\"761\":4}}],[\"productflavors\",{\"1\":{\"104\":2,\"105\":1}}],[\"proper\",{\"1\":{\"757\":1}}],[\"propertyget\",{\"1\":{\"767\":1}}],[\"property\",{\"1\":{\"302\":1,\"619\":5}}],[\"properties\",{\"1\":{\"104\":1,\"302\":1}}],[\"properly\",{\"1\":{\"247\":1}}],[\"propagateerror\",{\"1\":{\"237\":1,\"745\":1}}],[\"propagatetolisteners\",{\"1\":{\"232\":2}}],[\"propagates\",{\"1\":{\"232\":1}}],[\"propagate\",{\"1\":{\"231\":1,\"237\":1}}],[\"protectiondomain\",{\"1\":{\"486\":1}}],[\"protected\",{\"1\":{\"30\":1,\"38\":1,\"138\":1,\"153\":1,\"159\":3,\"189\":1,\"193\":3,\"247\":1,\"253\":1,\"264\":1,\"309\":1,\"358\":1,\"360\":1,\"415\":1,\"429\":1,\"485\":1,\"527\":1,\"585\":1,\"711\":6}}],[\"protocol\",{\"1\":{\"231\":1,\"402\":2,\"422\":4,\"431\":1,\"433\":3,\"438\":1,\"442\":2,\"446\":1,\"591\":2,\"763\":1}}],[\"provide\",{\"1\":{\"262\":1,\"360\":1,\"405\":1,\"670\":1}}],[\"provided\",{\"1\":{\"246\":1,\"247\":2,\"308\":2,\"756\":1}}],[\"provides而不会被merge\",{\"1\":{\"205\":1}}],[\"provides的\",{\"1\":{\"205\":1}}],[\"provides方法使用另外一个带参构造函数\",{\"1\":{\"203\":1}}],[\"provides方法中查找\",{\"1\":{\"203\":1}}],[\"provides方法的\",{\"1\":{\"203\":1}}],[\"provides提供的方法\",{\"1\":{\"203\":1}}],[\"provides提供的这个方法\",{\"1\":{\"203\":1}}],[\"provides用来提供一个方法\",{\"1\":{\"203\":1}}],[\"provides\",{\"0\":{\"203\":1},\"1\":{\"203\":4,\"204\":1,\"205\":2,\"213\":2,\"331\":1,\"332\":1}}],[\"provider>\",{\"1\":{\"6\":1,\"189\":1}}],[\"provider\",{\"1\":{\"6\":1,\"189\":6,\"367\":2,\"374\":9,\"376\":2,\"383\":6,\"391\":2,\"392\":4,\"393\":3}}],[\"proandroiddev\",{\"1\":{\"125\":1,\"126\":1,\"128\":1}}],[\"project2\",{\"1\":{\"793\":1}}],[\"project1\",{\"1\":{\"793\":1}}],[\"projects\",{\"1\":{\"770\":1}}],[\"projections\",{\"1\":{\"627\":1}}],[\"projection\",{\"1\":{\"618\":1}}],[\"project\",{\"1\":{\"70\":1,\"671\":1}}],[\"proxyclassdesc\",{\"1\":{\"583\":1}}],[\"proxyanimation\",{\"1\":{\"317\":2,\"352\":5}}],[\"proxyactivity\",{\"1\":{\"179\":2}}],[\"proxywidget\",{\"1\":{\"262\":1}}],[\"proxyintent\",{\"1\":{\"176\":2,\"179\":12}}],[\"proxy\",{\"1\":{\"62\":1,\"71\":6,\"83\":1,\"138\":5,\"176\":1,\"179\":5}}],[\"pro\",{\"1\":{\"30\":2}}],[\"peek\",{\"1\":{\"847\":1,\"848\":2,\"890\":6}}],[\"pexels\",{\"1\":{\"499\":1,\"580\":1}}],[\"pendingtasks\",{\"1\":{\"760\":1}}],[\"pendingtimers\",{\"1\":{\"238\":13}}],[\"pendingimage\",{\"1\":{\"376\":8}}],[\"pendingimages\",{\"1\":{\"375\":2,\"376\":10,\"397\":1}}],[\"pendingimage>\",{\"1\":{\"375\":1}}],[\"pendingimmediatecallback的内容\",{\"1\":{\"229\":1}}],[\"pendingimmediatecallback\",{\"0\":{\"229\":1},\"1\":{\"228\":7,\"229\":3}}],[\"pendingintent\",{\"0\":{\"183\":1,\"189\":1},\"1\":{\"11\":2,\"15\":2,\"36\":1,\"183\":3,\"189\":13}}],[\"pending\",{\"1\":{\"193\":1,\"237\":3,\"238\":8,\"243\":1,\"247\":3,\"375\":3,\"760\":3,\"761\":6}}],[\"peoplelist\",{\"1\":{\"62\":5,\"64\":3}}],[\"peoplemanager\",{\"1\":{\"62\":7,\"64\":5}}],[\"peoples\",{\"1\":{\"62\":5,\"63\":2,\"64\":2}}],[\"people\",{\"1\":{\"60\":3,\"62\":9,\"63\":7,\"64\":2,\"478\":2}}],[\"perm\",{\"1\":{\"455\":1}}],[\"permissions\",{\"1\":{\"173\":1}}],[\"permission\",{\"1\":{\"6\":4,\"66\":1,\"173\":9,\"186\":4}}],[\"perror\",{\"1\":{\"237\":1}}],[\"periodinseconds\",{\"1\":{\"325\":2}}],[\"periodic\",{\"1\":{\"230\":2,\"233\":1,\"234\":3}}],[\"period\",{\"1\":{\"234\":1,\"319\":1,\"325\":1,\"574\":1,\"638\":2}}],[\"perfcounter\",{\"1\":{\"485\":3}}],[\"performlayout\",{\"1\":{\"405\":2,\"439\":1}}],[\"performloadimage方法中\",{\"1\":{\"398\":1}}],[\"performloadimage\",{\"1\":{\"398\":1}}],[\"performance\",{\"1\":{\"274\":1}}],[\"performrebuild\",{\"1\":{\"264\":2}}],[\"perform\",{\"1\":{\"183\":2,\"752\":1}}],[\"performclick\",{\"1\":{\"27\":2}}],[\"perfare\",{\"1\":{\"56\":1}}],[\"per\",{\"1\":{\"48\":1,\"244\":1}}],[\"perpare\",{\"1\":{\"48\":1}}],[\"pause\",{\"1\":{\"744\":4,\"745\":5,\"753\":5,\"759\":1,\"761\":1}}],[\"pausecapability\",{\"1\":{\"742\":1,\"747\":1,\"748\":5}}],[\"pausedonexitlocked\",{\"1\":{\"761\":3}}],[\"pausedonstartlocked\",{\"1\":{\"761\":2}}],[\"paused\",{\"1\":{\"247\":1,\"287\":1,\"740\":1,\"748\":8,\"749\":1,\"754\":1,\"759\":1,\"761\":9}}],[\"paeser\",{\"1\":{\"736\":1}}],[\"pacific\",{\"1\":{\"578\":1}}],[\"packageresourcepath\",{\"1\":{\"819\":1}}],[\"packageroot\",{\"1\":{\"748\":2}}],[\"packageinfo\",{\"1\":{\"821\":1}}],[\"packageinfobean\",{\"1\":{\"817\":1}}],[\"packageinfolist\",{\"1\":{\"817\":4}}],[\"packagebeanlist\",{\"1\":{\"817\":2}}],[\"package=\",{\"1\":{\"816\":1}}],[\"packageconfigstring\",{\"1\":{\"748\":2}}],[\"packageconfig\",{\"1\":{\"748\":6,\"754\":2}}],[\"packages\",{\"1\":{\"748\":1,\"752\":1,\"757\":3,\"817\":1}}],[\"package\",{\"1\":{\"30\":1,\"60\":1,\"62\":4,\"63\":1,\"70\":1,\"71\":1,\"83\":1,\"138\":1,\"279\":1,\"552\":1,\"553\":1,\"565\":1,\"585\":1,\"748\":1,\"749\":1,\"754\":2,\"757\":8}}],[\"packagemanager\",{\"1\":{\"6\":1,\"105\":4,\"173\":2,\"817\":3,\"821\":2}}],[\"packagename\",{\"1\":{\"6\":6,\"36\":1,\"105\":1,\"173\":1,\"817\":4,\"819\":1}}],[\"patch\",{\"1\":{\"227\":4,\"228\":1,\"229\":1,\"234\":5,\"237\":4,\"243\":2,\"244\":4,\"247\":1,\"740\":1,\"745\":2,\"747\":4,\"748\":4}}],[\"pathclassloader\",{\"1\":{\"819\":1}}],[\"pathmeasure\",{\"1\":{\"147\":2}}],[\"path=\",{\"1\":{\"6\":2}}],[\"path=ndkroot\",{\"1\":{\"3\":1}}],[\"paths>\",{\"1\":{\"6\":1}}],[\"paths\",{\"1\":{\"6\":3,\"752\":1}}],[\"path\",{\"0\":{\"146\":1,\"147\":1},\"1\":{\"3\":1,\"6\":2,\"143\":2,\"145\":2,\"146\":4,\"147\":7,\"148\":3,\"243\":12,\"383\":3,\"566\":1,\"612\":1,\"700\":1,\"718\":5,\"767\":1,\"803\":1}}],[\"pandingintent\",{\"1\":{\"189\":1}}],[\"padding\",{\"1\":{\"158\":1,\"289\":2,\"295\":1,\"302\":1,\"303\":1,\"307\":8,\"312\":1,\"436\":4,\"516\":1}}],[\"padding=\",{\"1\":{\"115\":1}}],[\"pages\",{\"1\":{\"791\":1,\"810\":2}}],[\"pageview\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"pageroute<dynamic>\",{\"1\":{\"350\":4,\"351\":2}}],[\"page\",{\"1\":{\"137\":1,\"284\":1,\"340\":1,\"341\":6,\"347\":1,\"350\":1,\"731\":2,\"810\":1}}],[\"passhandle\",{\"1\":{\"583\":2}}],[\"passwd\",{\"1\":{\"692\":1}}],[\"passwprd\",{\"1\":{\"557\":2}}],[\"password\",{\"1\":{\"123\":3,\"584\":8}}],[\"passed\",{\"1\":{\"418\":1,\"748\":1,\"754\":1,\"759\":3}}],[\"pass\",{\"1\":{\"311\":1,\"584\":3,\"726\":9,\"728\":2}}],[\"paste\",{\"1\":{\"2\":1}}],[\"pareclable\",{\"1\":{\"598\":1}}],[\"parentusessize\",{\"1\":{\"439\":1}}],[\"parentwidget\",{\"1\":{\"295\":7}}],[\"parent和\",{\"1\":{\"259\":1}}],[\"parentdatatype\",{\"1\":{\"426\":1}}],[\"parentdataclass>的\",{\"1\":{\"426\":1}}],[\"parentdataclass>类\",{\"1\":{\"425\":1}}],[\"parentdataclass>\",{\"1\":{\"425\":1,\"426\":1}}],[\"parentdatawidget<parentdata>\",{\"1\":{\"256\":1,\"265\":1}}],[\"parentdataelement<parentdata>\",{\"1\":{\"256\":1,\"265\":1}}],[\"parentdataelement\",{\"1\":{\"256\":4,\"265\":3}}],[\"parent=\",{\"1\":{\"167\":1}}],[\"parent\",{\"1\":{\"112\":2,\"115\":1,\"118\":1,\"153\":4,\"158\":1,\"159\":1,\"189\":4,\"224\":1,\"251\":1,\"254\":1,\"256\":11,\"258\":1,\"259\":1,\"261\":1,\"262\":1,\"263\":3,\"265\":7,\"302\":1,\"348\":1,\"352\":2,\"355\":1,\"357\":11,\"361\":2,\"409\":5,\"416\":1,\"485\":3,\"486\":1,\"487\":1,\"748\":1,\"749\":2,\"750\":4,\"751\":2,\"754\":2,\"756\":3,\"757\":1,\"759\":3,\"783\":2,\"784\":2,\"836\":18}}],[\"parser\",{\"1\":{\"731\":1,\"737\":4,\"805\":1}}],[\"parsenetworkresponse\",{\"1\":{\"712\":1}}],[\"parse\",{\"1\":{\"612\":1,\"731\":1,\"737\":2}}],[\"parseint\",{\"1\":{\"557\":2}}],[\"parsehexstr2byte\",{\"1\":{\"557\":2}}],[\"parsebyte2hexstr\",{\"1\":{\"557\":2}}],[\"partsortarr\",{\"1\":{\"921\":2}}],[\"parts\",{\"1\":{\"752\":1,\"771\":1}}],[\"participating\",{\"1\":{\"753\":1}}],[\"participate\",{\"1\":{\"351\":1}}],[\"particular\",{\"1\":{\"193\":1,\"492\":1}}],[\"part2\",{\"1\":{\"137\":1}}],[\"part3\",{\"1\":{\"137\":1}}],[\"part\",{\"1\":{\"124\":1,\"225\":1,\"238\":1,\"493\":1,\"495\":1,\"761\":1,\"769\":1}}],[\"parallel\",{\"1\":{\"740\":2}}],[\"parallax\",{\"1\":{\"111\":1}}],[\"paragraph\",{\"1\":{\"265\":1}}],[\"parametric\",{\"1\":{\"360\":1}}],[\"parametriccurve<double>\",{\"1\":{\"360\":2}}],[\"parametriccurve<t>\",{\"1\":{\"360\":1}}],[\"parametriccurve<t>是\",{\"1\":{\"360\":1}}],[\"parametriccurve\",{\"1\":{\"355\":1,\"360\":4}}],[\"parameters\",{\"1\":{\"247\":1,\"302\":2}}],[\"parametersof\",{\"1\":{\"125\":1}}],[\"parameter\",{\"1\":{\"231\":1,\"247\":4,\"511\":2,\"565\":1}}],[\"params>\",{\"1\":{\"126\":2}}],[\"params\",{\"1\":{\"126\":6,\"192\":2,\"193\":6,\"711\":7,\"752\":31}}],[\"param\",{\"1\":{\"33\":4,\"196\":2,\"246\":1,\"890\":1,\"912\":4,\"913\":3}}],[\"parcel\",{\"1\":{\"71\":6,\"138\":6,\"594\":12}}],[\"parcelable接口比serializable接口效率更高\",{\"1\":{\"596\":1}}],[\"parcelable在反序列化时\",{\"1\":{\"593\":1}}],[\"parcelable通过parcel传输到ibinder中\",{\"1\":{\"593\":1}}],[\"parcelable是\",{\"1\":{\"593\":1}}],[\"parcelable\",{\"0\":{\"580\":1,\"593\":1},\"1\":{\"59\":1,\"60\":4,\"62\":1,\"580\":1,\"594\":6,\"598\":4}}],[\"pairs\",{\"1\":{\"351\":1}}],[\"pair<int\",{\"1\":{\"19\":1}}],[\"paintchild\",{\"1\":{\"440\":1}}],[\"paintcontents\",{\"1\":{\"440\":3}}],[\"paintoffsetforposition\",{\"1\":{\"440\":2}}],[\"paintoffset\",{\"1\":{\"440\":9,\"441\":2}}],[\"paintextent\",{\"1\":{\"405\":1}}],[\"paintedchildsize\",{\"1\":{\"405\":5}}],[\"painter\",{\"1\":{\"330\":1,\"331\":1,\"332\":18}}],[\"paint方法中调用系统的paintimage\",{\"1\":{\"377\":1}}],[\"paint方法中\",{\"1\":{\"372\":1}}],[\"paintimage\",{\"1\":{\"372\":1}}],[\"paintimage方法通过canvas\",{\"1\":{\"366\":1}}],[\"paintingcontext\",{\"1\":{\"332\":1,\"334\":2,\"440\":2}}],[\"painting\",{\"1\":{\"259\":1,\"331\":1,\"372\":1}}],[\"paintingbinding\",{\"1\":{\"253\":1,\"374\":2,\"384\":2,\"395\":2}}],[\"paint根据之前获取的信息调用decorationimagepainter\",{\"1\":{\"366\":1}}],[\"paintwithpainter\",{\"1\":{\"332\":3}}],[\"paint\",{\"0\":{\"33\":1,\"440\":1},\"1\":{\"33\":7,\"133\":1,\"146\":3,\"153\":1,\"162\":9,\"330\":6,\"331\":1,\"332\":10,\"333\":10,\"334\":2,\"335\":3,\"365\":1,\"425\":1,\"438\":1,\"439\":1,\"440\":2,\"442\":1}}],[\"i是排序次数\",{\"1\":{\"896\":1,\"897\":1}}],[\"iweather\",{\"1\":{\"777\":2}}],[\"il\",{\"1\":{\"766\":1,\"767\":6,\"768\":9}}],[\"illegalargument\",{\"1\":{\"711\":1}}],[\"illegalargumentexception\",{\"1\":{\"398\":2,\"560\":1}}],[\"illegalargumenterror\",{\"1\":{\"247\":1}}],[\"illegalaccessexception\",{\"1\":{\"179\":1}}],[\"illegal\",{\"1\":{\"237\":1,\"246\":1,\"247\":8,\"248\":3,\"759\":5}}],[\"illegalstateexception\",{\"1\":{\"126\":1,\"193\":2,\"398\":1}}],[\"ic\",{\"1\":{\"753\":1}}],[\"icons\",{\"1\":{\"308\":1}}],[\"iconbutton\",{\"1\":{\"308\":1}}],[\"icon\",{\"1\":{\"103\":1,\"106\":1,\"308\":1}}],[\"ia32\",{\"1\":{\"753\":3}}],[\"iactivitymanagersingleton\",{\"1\":{\"138\":2}}],[\"iactivitymanager\",{\"1\":{\"138\":5,\"179\":1}}],[\"ig\",{\"1\":{\"753\":16}}],[\"ignore\",{\"1\":{\"753\":1,\"759\":1,\"818\":1}}],[\"ignorepointer\",{\"1\":{\"352\":1}}],[\"ignored\",{\"1\":{\"264\":1,\"710\":1}}],[\"ignores\",{\"1\":{\"247\":1}}],[\"iid\",{\"1\":{\"833\":1,\"836\":16}}],[\"ii\",{\"0\":{\"493\":1}}],[\"iin\",{\"1\":{\"71\":4,\"138\":4}}],[\"iinterface\",{\"1\":{\"71\":5,\"138\":2}}],[\"i0jbqkfcma==\",{\"1\":{\"138\":1}}],[\"io上面\",{\"1\":{\"791\":1}}],[\"ioexception\",{\"1\":{\"506\":1,\"583\":3,\"584\":4,\"586\":1,\"587\":7,\"590\":2,\"708\":2,\"712\":3}}],[\"ios\",{\"1\":{\"278\":1,\"279\":1,\"287\":1,\"290\":1}}],[\"ioservice的sendport\",{\"1\":{\"246\":1}}],[\"ioservice的源码后发现这是个external\",{\"1\":{\"243\":1}}],[\"ioservicecallback\",{\"1\":{\"246\":2,\"247\":3}}],[\"ioservice关联起来呢\",{\"1\":{\"244\":1}}],[\"ioservice如何与native层的\",{\"1\":{\"244\":1}}],[\"ioservice立马可以收到并通过completer\",{\"1\":{\"244\":1}}],[\"ioservice在\",{\"1\":{\"244\":1}}],[\"ioservice还在\",{\"1\":{\"244\":1}}],[\"ioservice持有\",{\"1\":{\"244\":1}}],[\"ioservice使用\",{\"1\":{\"243\":1}}],[\"ioserviceports\",{\"1\":{\"243\":2,\"244\":7}}],[\"ioservice\",{\"0\":{\"246\":1},\"1\":{\"243\":12,\"244\":9,\"246\":6,\"247\":8,\"249\":5}}],[\"iothread\",{\"1\":{\"247\":1}}],[\"iooverrides\",{\"1\":{\"243\":2}}],[\"io\",{\"0\":{\"244\":1},\"1\":{\"136\":1,\"142\":1,\"221\":1,\"237\":1,\"238\":1,\"241\":2,\"243\":20,\"244\":16,\"246\":2,\"247\":9,\"249\":4,\"285\":1,\"506\":1,\"580\":2,\"584\":2,\"586\":1,\"591\":1,\"622\":3,\"716\":1,\"718\":3,\"793\":1,\"794\":8,\"810\":1,\"811\":2,\"812\":1,\"813\":4}}],[\"ibm\",{\"1\":{\"137\":2,\"538\":1,\"584\":1,\"587\":1}}],[\"ibookmanager\",{\"1\":{\"70\":2,\"71\":11}}],[\"ibinder\",{\"1\":{\"35\":2,\"36\":1,\"38\":6,\"39\":4,\"41\":2,\"62\":3,\"63\":5,\"71\":9,\"83\":7,\"138\":14}}],[\"i++\",{\"1\":{\"63\":2,\"64\":1,\"90\":1,\"153\":1,\"179\":1,\"189\":1,\"238\":3,\"398\":2,\"532\":2,\"533\":2,\"534\":3,\"557\":2,\"890\":3}}],[\"ipc\",{\"0\":{\"137\":1},\"1\":{\"39\":1,\"57\":1,\"69\":2,\"71\":1,\"82\":1,\"135\":2,\"137\":3,\"138\":2,\"140\":1}}],[\"ideally\",{\"1\":{\"417\":1}}],[\"identify\",{\"1\":{\"243\":1,\"244\":1}}],[\"identifies\",{\"1\":{\"204\":1}}],[\"identical\",{\"1\":{\"224\":3,\"232\":1,\"247\":1,\"384\":1}}],[\"identityhashcode\",{\"1\":{\"92\":4}}],[\"id并返回给\",{\"1\":{\"247\":1}}],[\"idcount\",{\"1\":{\"238\":1}}],[\"idletodeadlocked\",{\"1\":{\"761\":2}}],[\"idletorunninglocked\",{\"1\":{\"761\":1}}],[\"idle\",{\"1\":{\"140\":1,\"247\":7,\"417\":1,\"760\":8,\"761\":9}}],[\"id=\",{\"1\":{\"118\":1,\"124\":1,\"167\":1,\"189\":1,\"783\":3,\"784\":1}}],[\"id=tuijian\",{\"1\":{\"33\":1}}],[\"id\",{\"1\":{\"36\":1,\"43\":3,\"71\":1,\"103\":1,\"117\":2,\"118\":1,\"126\":2,\"167\":1,\"178\":1,\"189\":3,\"229\":2,\"234\":1,\"237\":12,\"238\":1,\"243\":10,\"244\":10,\"246\":3,\"247\":30,\"248\":16,\"516\":1,\"568\":2,\"570\":1,\"670\":1,\"691\":1,\"711\":5,\"712\":11,\"745\":1,\"749\":2,\"753\":5,\"754\":1,\"759\":5,\"783\":2,\"814\":1,\"816\":3,\"819\":2,\"823\":2}}],[\"idbitstoassign\",{\"1\":{\"26\":2}}],[\"ids\",{\"1\":{\"26\":1,\"247\":2}}],[\"i\",{\"0\":{\"492\":1},\"1\":{\"26\":3,\"63\":7,\"64\":3,\"87\":11,\"88\":4,\"89\":4,\"90\":6,\"92\":6,\"123\":1,\"153\":6,\"179\":5,\"189\":3,\"222\":2,\"223\":4,\"230\":8,\"238\":5,\"265\":6,\"285\":1,\"398\":6,\"418\":4,\"495\":1,\"501\":2,\"513\":5,\"527\":1,\"532\":6,\"533\":8,\"534\":11,\"557\":10,\"594\":3,\"629\":7,\"630\":2,\"638\":1,\"651\":2,\"656\":2,\"702\":1,\"728\":3,\"731\":5,\"753\":23,\"779\":1,\"890\":6,\"896\":1,\"897\":1,\"921\":8,\"927\":4}}],[\"isvisited\",{\"1\":{\"847\":2,\"848\":2}}],[\"isvalid\",{\"1\":{\"351\":1}}],[\"isgone=\",{\"1\":{\"784\":1}}],[\"isgone\",{\"1\":{\"784\":1}}],[\"isinstance\",{\"1\":{\"759\":2}}],[\"isinstanceof<string>\",{\"1\":{\"621\":1}}],[\"isinstanceof\",{\"1\":{\"621\":1}}],[\"isincallbackloop\",{\"1\":{\"225\":1,\"226\":3}}],[\"iswhitespace\",{\"1\":{\"612\":1}}],[\"isserviceorkernelisolatename\",{\"1\":{\"758\":1}}],[\"issystemisolate\",{\"1\":{\"753\":1}}],[\"isscrolling\",{\"1\":{\"417\":2}}],[\"isscrollable\",{\"1\":{\"403\":1}}],[\"issuecomment\",{\"1\":{\"740\":1}}],[\"issues\",{\"1\":{\"243\":1,\"351\":1,\"400\":1,\"401\":1,\"740\":1}}],[\"issued\",{\"1\":{\"243\":1}}],[\"ismultiframe\",{\"1\":{\"395\":2}}],[\"islisteningtostream的值执行\",{\"1\":{\"368\":1}}],[\"isdiverted\",{\"1\":{\"348\":2,\"351\":1}}],[\"isdone\",{\"1\":{\"321\":1,\"323\":2,\"325\":1}}],[\"isusergesturetransition\",{\"1\":{\"346\":1,\"348\":1,\"350\":4,\"351\":5,\"352\":1}}],[\"isuserloading\",{\"1\":{\"125\":1}}],[\"isrecording\",{\"1\":{\"334\":1}}],[\"isreposloading\",{\"1\":{\"125\":1}}],[\"isarray\",{\"1\":{\"583\":2,\"591\":1}}],[\"isalive\",{\"1\":{\"560\":2}}],[\"isafter\",{\"1\":{\"383\":1}}],[\"isantialias\",{\"1\":{\"370\":2}}],[\"isanimating\",{\"1\":{\"320\":1}}],[\"isavailable\",{\"1\":{\"186\":1}}],[\"isbootstrapframe\",{\"1\":{\"254\":2}}],[\"isbuttonpressed\",{\"1\":{\"26\":1}}],[\"isnotempty\",{\"1\":{\"398\":1,\"666\":1,\"817\":1}}],[\"isn\",{\"1\":{\"352\":1,\"417\":1,\"748\":1,\"757\":1}}],[\"isnull\",{\"1\":{\"237\":1,\"745\":1,\"753\":4,\"754\":3,\"759\":3}}],[\"isnetavailable\",{\"1\":{\"186\":3}}],[\"isexternalizable\",{\"1\":{\"591\":1}}],[\"isempty\",{\"1\":{\"237\":2,\"238\":1,\"244\":2,\"247\":2,\"398\":2,\"418\":1,\"760\":2,\"761\":6}}],[\"iserrorresponse\",{\"1\":{\"243\":2}}],[\"iserror\",{\"1\":{\"125\":1,\"237\":1,\"752\":5,\"759\":5}}],[\"isfunction\",{\"1\":{\"759\":2}}],[\"isfinite\",{\"1\":{\"405\":1}}],[\"isfirstresource\",{\"1\":{\"399\":2}}],[\"isfirst\",{\"1\":{\"235\":1}}],[\"isfromsource\",{\"1\":{\"26\":1}}],[\"ispre\",{\"1\":{\"890\":2}}],[\"isproxy\",{\"1\":{\"591\":1}}],[\"isplayingreverse\",{\"1\":{\"325\":2}}],[\"ispendingcomplete\",{\"1\":{\"232\":1}}],[\"isportrait\",{\"1\":{\"196\":7}}],[\"isoob\",{\"1\":{\"761\":1}}],[\"isownedbycurrentthread\",{\"1\":{\"761\":1}}],[\"isodd\",{\"1\":{\"325\":1}}],[\"iso\",{\"1\":{\"241\":1,\"575\":2,\"578\":1}}],[\"isolatelibrary\",{\"1\":{\"759\":1}}],[\"isolateleavescope\",{\"1\":{\"247\":4}}],[\"isolate包装isolate\",{\"1\":{\"757\":1}}],[\"isolatename\",{\"1\":{\"753\":1}}],[\"isolatemessagehandler\",{\"1\":{\"753\":1}}],[\"isolateflags\",{\"1\":{\"753\":2,\"754\":1,\"756\":1,\"757\":2,\"758\":2}}],[\"isolate>\",{\"1\":{\"753\":2}}],[\"isolate=\",{\"1\":{\"751\":2,\"756\":1,\"758\":1}}],[\"isolate对应的值\",{\"1\":{\"747\":1}}],[\"isolate共享同一份代码的\",{\"1\":{\"742\":1}}],[\"isolategroupsource\",{\"1\":{\"758\":1}}],[\"isolategroupdata\",{\"1\":{\"757\":1}}],[\"isolategroup\",{\"1\":{\"740\":2,\"742\":1,\"749\":1,\"751\":2,\"752\":1,\"753\":6,\"758\":2,\"762\":2}}],[\"isolatedata\",{\"1\":{\"752\":1,\"757\":5}}],[\"isolated\",{\"1\":{\"740\":1}}],[\"isolate的线程中执行\",{\"1\":{\"248\":1}}],[\"isolatesetuphelper\",{\"1\":{\"757\":1}}],[\"isolatespawnstate\",{\"1\":{\"749\":1,\"754\":1}}],[\"isolatespawnexception\",{\"1\":{\"748\":2}}],[\"isolates\",{\"1\":{\"247\":3,\"285\":2,\"740\":2,\"753\":4,\"756\":1,\"757\":2,\"759\":1,\"761\":3}}],[\"isolatescheduleimmediate\",{\"1\":{\"228\":3}}],[\"isolate\",{\"0\":{\"739\":1,\"740\":1,\"742\":1,\"747\":1,\"748\":1,\"749\":1,\"752\":1,\"754\":1,\"757\":1,\"759\":1},\"1\":{\"221\":3,\"228\":3,\"229\":1,\"235\":1,\"237\":2,\"243\":2,\"244\":2,\"247\":21,\"248\":2,\"740\":23,\"742\":35,\"744\":4,\"745\":15,\"747\":22,\"748\":39,\"749\":13,\"750\":6,\"751\":25,\"752\":32,\"753\":79,\"754\":8,\"756\":17,\"757\":72,\"758\":17,\"759\":51,\"761\":16,\"762\":6,\"763\":8,\"765\":3}}],[\"isonscrollbarthumb\",{\"1\":{\"26\":1}}],[\"iscanceled\",{\"1\":{\"712\":1}}],[\"iscancelled\",{\"1\":{\"193\":2}}],[\"iscomplex\",{\"1\":{\"331\":1}}],[\"iscomplete\",{\"1\":{\"232\":2}}],[\"iscompleted\",{\"1\":{\"231\":2}}],[\"ischained\",{\"1\":{\"232\":1}}],[\"ischecked\",{\"1\":{\"124\":1}}],[\"isclick\",{\"1\":{\"153\":1}}],[\"is\",{\"1\":{\"26\":2,\"33\":1,\"64\":1,\"71\":1,\"87\":1,\"92\":1,\"125\":1,\"183\":1,\"187\":1,\"189\":1,\"193\":3,\"215\":1,\"225\":1,\"228\":1,\"231\":6,\"232\":5,\"234\":4,\"237\":2,\"243\":6,\"244\":1,\"247\":11,\"253\":2,\"256\":3,\"263\":1,\"264\":1,\"265\":1,\"276\":2,\"281\":1,\"285\":1,\"295\":5,\"302\":11,\"308\":1,\"309\":8,\"310\":1,\"316\":1,\"323\":1,\"337\":1,\"350\":2,\"351\":4,\"360\":1,\"370\":3,\"374\":3,\"376\":5,\"384\":1,\"392\":1,\"398\":1,\"399\":2,\"408\":2,\"412\":6,\"417\":3,\"418\":3,\"426\":1,\"448\":1,\"485\":1,\"492\":1,\"493\":3,\"494\":1,\"508\":1,\"511\":1,\"519\":1,\"523\":2,\"560\":2,\"573\":1,\"574\":1,\"575\":2,\"598\":1,\"615\":1,\"621\":2,\"629\":1,\"630\":4,\"645\":2,\"712\":1,\"731\":1,\"737\":3,\"745\":1,\"748\":4,\"749\":1,\"751\":3,\"752\":1,\"753\":11,\"754\":1,\"756\":3,\"757\":11,\"758\":2,\"759\":9,\"761\":6,\"763\":2,\"767\":1,\"769\":1,\"806\":1,\"811\":1}}],[\"iterating\",{\"1\":{\"231\":1}}],[\"iterable<future<t>>\",{\"1\":{\"231\":2}}],[\"itemcount\",{\"1\":{\"276\":1}}],[\"itembuilder\",{\"1\":{\"276\":1}}],[\"item><\",{\"1\":{\"167\":2}}],[\"itemdecoratio\",{\"1\":{\"153\":1}}],[\"itemdecoration\",{\"1\":{\"153\":2}}],[\"item\",{\"1\":{\"152\":2,\"153\":1,\"428\":1,\"431\":1,\"434\":1,\"446\":2,\"523\":1,\"636\":1,\"637\":2,\"784\":1,\"890\":13}}],[\"itemtouchhelper\",{\"1\":{\"77\":1}}],[\"itself\",{\"1\":{\"247\":1,\"302\":1,\"584\":1}}],[\"its\",{\"1\":{\"26\":1,\"231\":1,\"232\":2,\"235\":1,\"243\":2,\"247\":2,\"259\":1,\"302\":2,\"309\":2,\"350\":2,\"351\":1,\"369\":1,\"445\":1,\"493\":3,\"497\":1,\"523\":1,\"584\":1,\"591\":1,\"740\":4,\"761\":1,\"822\":1}}],[\"it\",{\"1\":{\"26\":2,\"71\":1,\"126\":1,\"138\":1,\"139\":1,\"183\":1,\"187\":3,\"205\":2,\"231\":1,\"243\":1,\"247\":7,\"253\":2,\"281\":1,\"282\":1,\"310\":1,\"347\":1,\"351\":2,\"370\":2,\"374\":1,\"376\":3,\"408\":2,\"412\":1,\"413\":1,\"417\":2,\"418\":3,\"493\":3,\"523\":1,\"560\":1,\"586\":2,\"612\":4,\"629\":2,\"630\":2,\"662\":1,\"664\":3,\"666\":2,\"745\":1,\"752\":1,\"753\":3,\"756\":1,\"757\":1,\"759\":3,\"761\":5,\"763\":1,\"769\":1,\"783\":1,\"850\":3}}],[\"if\",{\"1\":{\"6\":3,\"25\":6,\"26\":10,\"27\":2,\"48\":1,\"53\":3,\"63\":5,\"71\":3,\"75\":1,\"83\":1,\"87\":4,\"88\":1,\"89\":2,\"90\":2,\"92\":8,\"95\":1,\"117\":2,\"125\":1,\"138\":3,\"153\":6,\"159\":2,\"163\":2,\"173\":4,\"179\":5,\"186\":2,\"193\":8,\"196\":3,\"222\":1,\"224\":4,\"225\":2,\"226\":4,\"227\":1,\"228\":1,\"229\":2,\"230\":1,\"231\":17,\"232\":8,\"233\":2,\"234\":8,\"235\":6,\"236\":1,\"237\":13,\"238\":12,\"243\":13,\"244\":6,\"246\":2,\"247\":38,\"248\":1,\"253\":2,\"254\":1,\"256\":6,\"263\":1,\"264\":3,\"265\":1,\"270\":1,\"276\":1,\"284\":2,\"285\":1,\"295\":1,\"304\":2,\"305\":2,\"308\":1,\"310\":1,\"321\":1,\"324\":2,\"325\":1,\"332\":12,\"334\":1,\"347\":5,\"350\":5,\"351\":8,\"358\":2,\"359\":1,\"360\":1,\"368\":1,\"370\":6,\"376\":13,\"383\":13,\"384\":3,\"391\":2,\"392\":1,\"393\":1,\"395\":2,\"396\":1,\"398\":11,\"399\":5,\"405\":2,\"412\":10,\"413\":3,\"415\":4,\"417\":7,\"418\":12,\"423\":2,\"424\":1,\"426\":1,\"436\":3,\"438\":3,\"439\":2,\"440\":2,\"441\":1,\"448\":1,\"485\":6,\"486\":1,\"493\":2,\"527\":2,\"532\":1,\"533\":1,\"534\":1,\"545\":1,\"546\":1,\"547\":2,\"557\":2,\"560\":6,\"569\":2,\"583\":5,\"585\":1,\"587\":7,\"591\":6,\"614\":2,\"634\":1,\"666\":1,\"710\":3,\"711\":2,\"712\":6,\"725\":1,\"726\":1,\"731\":1,\"737\":5,\"745\":1,\"748\":3,\"750\":1,\"751\":4,\"752\":11,\"753\":43,\"754\":3,\"756\":4,\"757\":20,\"758\":2,\"759\":25,\"760\":5,\"761\":40,\"784\":1,\"811\":1,\"817\":2,\"822\":1,\"834\":1,\"836\":13,\"847\":1,\"848\":2,\"850\":3,\"859\":6,\"880\":4,\"890\":8,\"896\":1,\"897\":1,\"898\":1,\"911\":1,\"912\":1,\"913\":3,\"921\":6,\"927\":3}}],[\"inprogress等回调能够在\",{\"1\":{\"712\":1}}],[\"input\",{\"1\":{\"357\":1,\"612\":3,\"719\":1}}],[\"inputfilter\",{\"1\":{\"63\":1}}],[\"inputdevice\",{\"1\":{\"26\":1}}],[\"inorder\",{\"1\":{\"666\":7}}],[\"inout\",{\"1\":{\"60\":1}}],[\"inmicroseconds\",{\"1\":{\"321\":1}}],[\"inmilliseconds\",{\"1\":{\"234\":2}}],[\"inheritednestedscrollview\",{\"1\":{\"405\":1}}],[\"inherited\",{\"1\":{\"274\":1,\"565\":1}}],[\"inheritedelement\",{\"1\":{\"270\":2}}],[\"inheritedwidget下面的所有子类\",{\"1\":{\"273\":1}}],[\"inheritedwidget>\",{\"1\":{\"272\":1}}],[\"inheritedwidget持有的状态是final的\",{\"1\":{\"271\":1}}],[\"inheritedwidget是持有状态的widget\",{\"1\":{\"271\":1}}],[\"inheritedwidget→proxywidget\",{\"1\":{\"269\":1}}],[\"inheritedwidget\",{\"0\":{\"268\":1,\"269\":1,\"271\":1,\"272\":1},\"1\":{\"269\":1,\"271\":1,\"273\":4,\"274\":2,\"349\":1}}],[\"inheritedwidgets\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1,\"274\":1}}],[\"inherit\",{\"1\":{\"264\":1,\"748\":1}}],[\"inactive\",{\"1\":{\"238\":1,\"287\":1}}],[\"innerdelta\",{\"1\":{\"418\":12}}],[\"innerposition\",{\"1\":{\"417\":8}}],[\"innerpositions\",{\"1\":{\"415\":1,\"417\":3,\"418\":8,\"420\":2}}],[\"inneractivitygetter\",{\"1\":{\"417\":3}}],[\"innercontroller\",{\"1\":{\"404\":1,\"405\":5,\"416\":1}}],[\"innerscrollposition\",{\"1\":{\"415\":1}}],[\"innerscroll\",{\"1\":{\"403\":1}}],[\"inner\",{\"1\":{\"222\":1,\"230\":1,\"404\":2,\"405\":2,\"409\":2,\"415\":1,\"416\":1,\"417\":12,\"418\":15,\"419\":4,\"511\":3,\"513\":6,\"514\":1}}],[\"innermodule\",{\"1\":{\"213\":2}}],[\"inline修饰的函数的lambda参数如果运行在该函数内部的\",{\"1\":{\"621\":1}}],[\"inline修饰的函数在被调用时将字节码动态插入到被到调用的地方\",{\"1\":{\"621\":1}}],[\"inline\",{\"0\":{\"621\":1},\"1\":{\"196\":2,\"621\":3,\"767\":3,\"768\":1,\"772\":1}}],[\"infilename\",{\"1\":{\"695\":1}}],[\"infix\",{\"1\":{\"620\":2,\"890\":3}}],[\"infinity\",{\"1\":{\"307\":1,\"319\":1,\"403\":1,\"412\":11,\"417\":1,\"418\":1,\"445\":1}}],[\"infinite\",{\"1\":{\"147\":1}}],[\"inf\",{\"1\":{\"517\":2}}],[\"info描述的\",{\"1\":{\"519\":1}}],[\"informationcollector\",{\"1\":{\"374\":1,\"383\":1}}],[\"information\",{\"1\":{\"281\":1,\"384\":1,\"552\":1}}],[\"info\",{\"1\":{\"189\":4,\"369\":3,\"376\":4,\"448\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"519\":1,\"737\":9,\"806\":1,\"821\":1}}],[\"inflatewidget\",{\"1\":{\"259\":1,\"265\":1}}],[\"inflatewidget方法中大概会执行下面几步\",{\"1\":{\"259\":1}}],[\"inflate\",{\"1\":{\"117\":1,\"167\":1}}],[\"in的动画解释\",{\"1\":{\"132\":1}}],[\"injection\",{\"1\":{\"206\":1}}],[\"inject后service类变成如下\",{\"1\":{\"203\":1}}],[\"inject修饰\",{\"1\":{\"203\":1}}],[\"inject修饰其构造函数的\",{\"1\":{\"202\":1}}],[\"inject注解已经没用了\",{\"1\":{\"203\":1}}],[\"inject注解\",{\"1\":{\"203\":1}}],[\"inject构造方法其实是失效了的\",{\"1\":{\"203\":1}}],[\"inject中查找\",{\"1\":{\"203\":1}}],[\"inject标记该对象\",{\"1\":{\"202\":1}}],[\"inject标记其构造方法\",{\"1\":{\"202\":1}}],[\"inject主要做两件事\",{\"1\":{\"201\":1}}],[\"inject\",{\"0\":{\"201\":1},\"1\":{\"126\":1,\"201\":3,\"202\":3,\"203\":3,\"204\":1,\"205\":2,\"211\":1,\"214\":2,\"215\":2,\"216\":1,\"218\":1}}],[\"inccounter\",{\"1\":{\"645\":2}}],[\"inclusive\",{\"1\":{\"573\":1}}],[\"including\",{\"1\":{\"247\":1,\"309\":1}}],[\"include\",{\"1\":{\"246\":1,\"247\":2,\"584\":1,\"818\":1}}],[\"includes\",{\"1\":{\"213\":1,\"763\":1}}],[\"incurred\",{\"1\":{\"408\":1}}],[\"inc\",{\"1\":{\"237\":1}}],[\"incremental\",{\"1\":{\"757\":1}}],[\"incrementandget\",{\"1\":{\"645\":1}}],[\"increment\",{\"1\":{\"231\":2,\"485\":1}}],[\"inch\",{\"1\":{\"100\":1}}],[\"incominghandler\",{\"1\":{\"39\":2}}],[\"incominghanlder\",{\"1\":{\"39\":1}}],[\"incominghanler\",{\"1\":{\"39\":1}}],[\"independent\",{\"1\":{\"417\":1}}],[\"indexc++\",{\"1\":{\"913\":4}}],[\"indexc\",{\"1\":{\"913\":1}}],[\"indexb++\",{\"1\":{\"913\":2}}],[\"indexb\",{\"1\":{\"913\":4}}],[\"indexa++\",{\"1\":{\"913\":2}}],[\"indexa\",{\"1\":{\"913\":4}}],[\"indexactivity\",{\"1\":{\"178\":1}}],[\"indexedslot<element\",{\"1\":{\"265\":1,\"426\":1}}],[\"indexornext\",{\"1\":{\"235\":2,\"238\":1}}],[\"indexofroot\",{\"1\":{\"666\":3}}],[\"indexofkey\",{\"1\":{\"94\":1,\"159\":1}}],[\"indexof\",{\"1\":{\"92\":3,\"93\":1,\"666\":1}}],[\"index1\",{\"1\":{\"137\":1}}],[\"index<<1\",{\"1\":{\"92\":2,\"93\":2,\"94\":1}}],[\"index\",{\"1\":{\"87\":2,\"92\":10,\"93\":4,\"94\":2,\"95\":1,\"137\":1,\"145\":3,\"179\":3,\"276\":3,\"403\":1,\"434\":1,\"504\":2,\"505\":3,\"534\":7,\"584\":1,\"587\":1,\"773\":1,\"847\":5,\"848\":3,\"858\":3,\"859\":2,\"896\":2,\"897\":4,\"898\":5,\"921\":5}}],[\"individual\",{\"1\":{\"822\":1}}],[\"indirpath\",{\"1\":{\"695\":1}}],[\"indirtylist\",{\"1\":{\"251\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"indicates\",{\"1\":{\"759\":1}}],[\"indicate\",{\"1\":{\"247\":1}}],[\"indicating\",{\"1\":{\"92\":1,\"231\":1}}],[\"indices\",{\"1\":{\"87\":1}}],[\"invertcolors\",{\"1\":{\"370\":2}}],[\"inventory\",{\"1\":{\"19\":1,\"20\":3}}],[\"invalid\",{\"1\":{\"243\":1,\"351\":1,\"583\":1,\"752\":1}}],[\"invalidate\",{\"1\":{\"75\":2,\"147\":1,\"153\":1}}],[\"invocation\",{\"1\":{\"759\":2,\"767\":2,\"768\":1}}],[\"invocationhandler\",{\"1\":{\"179\":1}}],[\"invoking\",{\"1\":{\"591\":1}}],[\"invokefunction\",{\"1\":{\"759\":1}}],[\"invokes\",{\"1\":{\"583\":1}}],[\"invokestatic的方法句柄对应的类未被初始化时\",{\"1\":{\"497\":1}}],[\"invokereadresolve\",{\"1\":{\"583\":3}}],[\"invokelistmethod\",{\"1\":{\"398\":2}}],[\"invokemethod\",{\"1\":{\"284\":1}}],[\"invoked\",{\"1\":{\"193\":1,\"224\":1,\"233\":2,\"771\":1}}],[\"invoke\",{\"1\":{\"179\":3,\"228\":2,\"243\":1,\"247\":1,\"485\":1,\"486\":1,\"487\":1,\"497\":1,\"553\":1,\"569\":1,\"662\":1,\"748\":2,\"766\":1,\"823\":1}}],[\"involves\",{\"1\":{\"493\":1,\"495\":1}}],[\"instertval\",{\"1\":{\"534\":3}}],[\"instertvalue\",{\"1\":{\"534\":3}}],[\"instead\",{\"1\":{\"232\":1,\"235\":1,\"236\":1,\"748\":1,\"753\":1,\"761\":1}}],[\"inst\",{\"1\":{\"517\":2}}],[\"instruction\",{\"1\":{\"767\":1}}],[\"instructions\",{\"1\":{\"752\":2,\"753\":3,\"757\":2,\"758\":2,\"769\":1}}],[\"instrumentation\",{\"1\":{\"517\":6}}],[\"instrument\",{\"1\":{\"517\":1}}],[\"instrinsicheight\",{\"1\":{\"445\":3}}],[\"instrinsicwidth\",{\"1\":{\"445\":2}}],[\"instantiateimagecodec\",{\"1\":{\"374\":2,\"383\":4,\"384\":1}}],[\"instance为\",{\"1\":{\"253\":1}}],[\"instance\",{\"1\":{\"237\":1,\"253\":3,\"254\":1,\"265\":1,\"320\":1,\"327\":1,\"350\":1,\"374\":3,\"375\":1,\"384\":2,\"395\":4,\"396\":1,\"397\":1,\"398\":8,\"408\":1,\"486\":1,\"550\":1,\"615\":1,\"753\":1,\"759\":2}}],[\"instancesize\",{\"1\":{\"248\":1}}],[\"instances\",{\"1\":{\"183\":1,\"278\":1,\"615\":1,\"771\":1}}],[\"instanceof\",{\"1\":{\"71\":1,\"112\":2,\"138\":1,\"179\":1,\"398\":2,\"587\":2,\"591\":3}}],[\"installing\",{\"1\":{\"231\":1}}],[\"install\",{\"1\":{\"30\":6,\"231\":1,\"669\":1,\"679\":2,\"805\":1}}],[\"inside\",{\"1\":{\"226\":2,\"402\":1,\"429\":2,\"430\":1}}],[\"insameerrorzone\",{\"1\":{\"224\":2}}],[\"insertpoint\",{\"1\":{\"898\":3}}],[\"insertindex\",{\"1\":{\"880\":7,\"898\":3}}],[\"inserting\",{\"1\":{\"92\":1}}],[\"insertrenderobjectchild\",{\"1\":{\"256\":1,\"265\":2,\"426\":2}}],[\"insertsort\",{\"1\":{\"534\":2,\"880\":1,\"898\":1,\"921\":3}}],[\"inserts\",{\"1\":{\"87\":1,\"193\":1}}],[\"insert\",{\"1\":{\"2\":1,\"87\":3,\"238\":1,\"247\":1,\"352\":1,\"426\":1,\"618\":1,\"724\":1,\"890\":5}}],[\"initforsnapshot\",{\"1\":{\"752\":2}}],[\"initvm\",{\"1\":{\"752\":1}}],[\"init的时候就已经设置了的\",{\"1\":{\"752\":1}}],[\"initbuilder\",{\"1\":{\"711\":1}}],[\"initclient\",{\"1\":{\"708\":1,\"710\":1}}],[\"initkey\",{\"1\":{\"557\":2}}],[\"init是对象构造器方法\",{\"1\":{\"497\":1}}],[\"initstate方法中创建\",{\"1\":{\"353\":1}}],[\"initstate方法中\",{\"1\":{\"303\":1}}],[\"initstate\",{\"0\":{\"303\":1},\"1\":{\"273\":4,\"284\":2,\"307\":2,\"308\":2,\"310\":2,\"349\":3,\"405\":2}}],[\"initserviceextensions\",{\"1\":{\"253\":1}}],[\"initmousetracker\",{\"1\":{\"253\":1}}],[\"initrenderview\",{\"1\":{\"253\":2}}],[\"initinstance\",{\"1\":{\"753\":1}}],[\"initinstances方法创建\",{\"1\":{\"254\":1}}],[\"initinstances\",{\"1\":{\"253\":4,\"254\":1}}],[\"initisolatefromsnapshot\",{\"1\":{\"753\":1}}],[\"initisolate方法中\",{\"1\":{\"753\":1}}],[\"initisolate创建虚拟机对应的\",{\"1\":{\"753\":1}}],[\"initisolate\",{\"1\":{\"753\":3}}],[\"initialdelaymillis\",{\"1\":{\"636\":1,\"638\":1}}],[\"initialization\",{\"1\":{\"495\":1,\"497\":2,\"752\":1}}],[\"initializing\",{\"1\":{\"490\":1,\"495\":1,\"498\":1,\"752\":1}}],[\"initialize中配置的\",{\"1\":{\"757\":1}}],[\"initializeisolate初始化\",{\"1\":{\"753\":1}}],[\"initializeisolate\",{\"1\":{\"753\":5}}],[\"initializeparams\",{\"1\":{\"752\":6}}],[\"initializecallback\",{\"0\":{\"752\":1},\"1\":{\"751\":2,\"752\":2,\"757\":1}}],[\"initialize\",{\"1\":{\"751\":4,\"752\":9,\"753\":2,\"761\":1}}],[\"initializer\",{\"1\":{\"619\":4}}],[\"initializers\",{\"1\":{\"495\":1}}],[\"initialized\",{\"1\":{\"408\":1,\"594\":1,\"752\":2,\"753\":3}}],[\"initializes\",{\"1\":{\"253\":1,\"323\":1}}],[\"initialpixels\",{\"1\":{\"407\":1}}],[\"initialscrolloffset\",{\"1\":{\"405\":1,\"407\":1}}],[\"initialstate\",{\"1\":{\"125\":1}}],[\"initially\",{\"1\":{\"376\":1}}],[\"initiallayout=\",{\"1\":{\"189\":1}}],[\"initialmanifest\",{\"1\":{\"352\":5}}],[\"initialt\",{\"1\":{\"325\":1}}],[\"initialvalue\",{\"1\":{\"325\":1,\"527\":2}}],[\"initial\",{\"1\":{\"26\":2,\"350\":1,\"352\":8,\"506\":2,\"527\":1,\"652\":1,\"742\":1,\"753\":1,\"758\":1}}],[\"init\",{\"1\":{\"62\":1,\"64\":1,\"125\":1,\"126\":2,\"140\":4,\"195\":1,\"196\":3,\"199\":2,\"202\":1,\"247\":1,\"497\":1,\"498\":1,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"553\":2,\"557\":4,\"619\":1,\"672\":1,\"728\":5,\"737\":3,\"751\":1,\"752\":25,\"753\":5,\"806\":1,\"808\":1}}],[\"initwindowdecoractionbar\",{\"1\":{\"24\":1}}],[\"in\",{\"1\":{\"26\":2,\"30\":1,\"33\":1,\"60\":1,\"62\":5,\"83\":1,\"92\":1,\"96\":1,\"101\":1,\"126\":2,\"132\":2,\"139\":2,\"162\":1,\"193\":4,\"224\":1,\"226\":1,\"231\":7,\"232\":1,\"233\":2,\"234\":3,\"235\":3,\"238\":2,\"243\":2,\"247\":6,\"262\":2,\"274\":2,\"285\":1,\"302\":1,\"333\":2,\"350\":1,\"351\":7,\"352\":1,\"360\":1,\"372\":1,\"376\":2,\"395\":1,\"405\":1,\"412\":5,\"415\":1,\"417\":3,\"418\":7,\"433\":1,\"448\":1,\"485\":1,\"493\":1,\"496\":1,\"511\":2,\"514\":1,\"516\":1,\"573\":1,\"578\":13,\"584\":4,\"589\":1,\"590\":5,\"615\":1,\"617\":1,\"618\":1,\"629\":6,\"630\":3,\"638\":2,\"645\":1,\"646\":1,\"651\":1,\"656\":1,\"663\":1,\"725\":1,\"726\":1,\"731\":1,\"737\":4,\"740\":4,\"748\":1,\"753\":6,\"757\":1,\"759\":1,\"761\":7,\"763\":2,\"767\":2,\"783\":1,\"811\":1,\"817\":1,\"822\":2,\"896\":2,\"897\":2,\"898\":2,\"921\":4,\"927\":1}}],[\"intarrb\",{\"1\":{\"913\":8}}],[\"intarra\",{\"1\":{\"913\":8}}],[\"intarrayof\",{\"1\":{\"666\":2}}],[\"intarray\",{\"1\":{\"173\":1,\"666\":2,\"880\":1,\"896\":4,\"897\":4,\"898\":4,\"913\":6,\"921\":19,\"927\":1}}],[\"intarr\",{\"1\":{\"913\":7}}],[\"intraversing\",{\"1\":{\"834\":3}}],[\"introduced\",{\"1\":{\"770\":1}}],[\"introduction\",{\"1\":{\"124\":1}}],[\"intrinsic\",{\"1\":{\"445\":2}}],[\"intrinsicheight\",{\"1\":{\"445\":3}}],[\"intrinsically\",{\"1\":{\"402\":1}}],[\"inttween\",{\"1\":{\"358\":1}}],[\"int64\",{\"1\":{\"237\":4,\"247\":2,\"757\":1,\"761\":1}}],[\"intptr\",{\"1\":{\"237\":5,\"753\":1,\"757\":1,\"761\":1}}],[\"intomap\",{\"1\":{\"213\":1}}],[\"into\",{\"1\":{\"71\":1,\"87\":1,\"128\":2,\"138\":1,\"231\":1,\"486\":1,\"493\":1,\"671\":1,\"753\":4,\"763\":1,\"769\":1}}],[\"int>\",{\"1\":{\"19\":1,\"617\":1}}],[\"integer\",{\"1\":{\"538\":1,\"557\":3}}],[\"integer>数组\",{\"1\":{\"538\":1}}],[\"integer>\",{\"1\":{\"523\":2,\"538\":3}}],[\"integration\",{\"1\":{\"104\":2}}],[\"intended\",{\"1\":{\"523\":1}}],[\"intent中使用bundle\",{\"1\":{\"69\":1}}],[\"intentservice\",{\"1\":{\"35\":1,\"190\":1}}],[\"intent\",{\"0\":{\"15\":1,\"284\":1},\"1\":{\"6\":8,\"11\":3,\"15\":2,\"17\":1,\"35\":8,\"36\":14,\"38\":6,\"39\":2,\"62\":6,\"63\":3,\"66\":2,\"83\":4,\"125\":9,\"138\":5,\"178\":1,\"179\":12,\"183\":10,\"186\":5,\"189\":15,\"284\":2}}],[\"intermediate\",{\"1\":{\"630\":1}}],[\"inter\",{\"1\":{\"247\":1,\"912\":4}}],[\"interrupts\",{\"1\":{\"745\":2}}],[\"interruptedexception\",{\"1\":{\"560\":2}}],[\"interrupt\",{\"1\":{\"237\":3,\"761\":1}}],[\"interruptmessage\",{\"1\":{\"237\":1}}],[\"intern\",{\"1\":{\"461\":3,\"466\":1}}],[\"internalwriteentries\",{\"1\":{\"506\":1}}],[\"internal只是简单创建了\",{\"1\":{\"234\":1}}],[\"internal创建的\",{\"1\":{\"235\":1}}],[\"internal创建\",{\"1\":{\"234\":1}}],[\"internal\",{\"1\":{\"227\":1,\"228\":1,\"229\":1,\"234\":5,\"235\":2,\"236\":1,\"237\":3,\"238\":2,\"243\":2,\"244\":3,\"247\":1,\"740\":1,\"745\":1,\"747\":3,\"748\":2}}],[\"internalhandler\",{\"1\":{\"193\":5}}],[\"internet\",{\"1\":{\"186\":1}}],[\"interpreter\",{\"1\":{\"757\":1,\"763\":1}}],[\"interpreted\",{\"1\":{\"33\":1}}],[\"interpolation\",{\"1\":{\"358\":1}}],[\"interpolationsimulation\",{\"0\":{\"324\":1},\"1\":{\"324\":1,\"355\":1}}],[\"interpolator\",{\"1\":{\"147\":1}}],[\"interactions\",{\"1\":{\"126\":1}}],[\"interfaces\",{\"1\":{\"494\":1}}],[\"interface\",{\"1\":{\"57\":1,\"62\":3,\"70\":1,\"71\":4,\"83\":1,\"117\":1,\"123\":1,\"126\":1,\"138\":5,\"153\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":2,\"211\":1,\"212\":1,\"234\":2,\"333\":1,\"334\":1,\"492\":2,\"493\":4,\"494\":1,\"495\":1,\"497\":2,\"513\":1,\"568\":1,\"591\":1,\"618\":1,\"619\":5,\"662\":1}}],[\"intercept\",{\"1\":{\"26\":5,\"231\":1}}],[\"intercepted\",{\"1\":{\"26\":9}}],[\"interception\",{\"1\":{\"26\":2}}],[\"interval\",{\"1\":{\"14\":1,\"19\":1}}],[\"int\",{\"0\":{\"87\":1,\"88\":1,\"89\":1},\"1\":{\"6\":3,\"11\":2,\"15\":1,\"25\":1,\"26\":3,\"36\":3,\"39\":1,\"43\":1,\"62\":3,\"63\":3,\"64\":1,\"71\":3,\"75\":2,\"86\":2,\"87\":4,\"88\":3,\"89\":3,\"90\":4,\"92\":10,\"94\":1,\"95\":4,\"101\":3,\"112\":6,\"117\":1,\"126\":3,\"138\":3,\"153\":6,\"158\":1,\"159\":13,\"162\":1,\"163\":4,\"173\":1,\"179\":2,\"183\":8,\"189\":3,\"196\":5,\"229\":1,\"231\":2,\"234\":8,\"235\":1,\"237\":3,\"238\":2,\"241\":2,\"243\":11,\"244\":6,\"247\":3,\"265\":1,\"276\":2,\"332\":1,\"358\":3,\"365\":2,\"369\":1,\"376\":1,\"383\":1,\"396\":9,\"397\":5,\"398\":2,\"418\":1,\"495\":1,\"500\":6,\"506\":2,\"513\":4,\"516\":6,\"517\":1,\"519\":2,\"521\":1,\"523\":6,\"532\":5,\"533\":6,\"534\":8,\"553\":3,\"557\":4,\"568\":3,\"569\":2,\"586\":1,\"587\":1,\"590\":1,\"594\":3,\"612\":1,\"614\":2,\"619\":1,\"625\":1,\"663\":2,\"666\":1,\"710\":1,\"711\":2,\"712\":2,\"723\":1,\"726\":1,\"745\":2,\"752\":1,\"757\":2,\"759\":1,\"833\":1,\"836\":1,\"858\":1,\"859\":1,\"879\":2,\"880\":3,\"890\":6,\"911\":2,\"912\":1,\"919\":1,\"921\":3,\"927\":6}}],[\"imissyou\",{\"1\":{\"794\":4}}],[\"immediately\",{\"1\":{\"230\":2,\"232\":1}}],[\"immediatecallback\",{\"1\":{\"228\":1}}],[\"immediate\",{\"1\":{\"228\":4,\"229\":1,\"742\":1,\"745\":3}}],[\"im\",{\"1\":{\"136\":2,\"139\":1,\"286\":1,\"584\":1}}],[\"imessenger\",{\"1\":{\"82\":1,\"83\":7}}],[\"improve\",{\"1\":{\"274\":1}}],[\"implicitstaticclosure\",{\"1\":{\"759\":1}}],[\"implicitclosurefunction\",{\"1\":{\"759\":1}}],[\"implicitly\",{\"1\":{\"302\":12,\"351\":1}}],[\"implicitlyanimatedwidget>\",{\"1\":{\"302\":1,\"307\":1}}],[\"implicitlyanimatedwidgetstate<t>\",{\"1\":{\"307\":1}}],[\"implicitlyanimatedwidgetstate<t\",{\"1\":{\"302\":1}}],[\"implicitlyanimatedwidgetstate<implicitlyanimatedwidget>\",{\"1\":{\"302\":1}}],[\"implicitlyanimatedwidgetstate\",{\"1\":{\"302\":3,\"305\":1,\"307\":2}}],[\"implicitlyanimatedwidgets\",{\"1\":{\"302\":1}}],[\"implicitlyanimatedwidget\",{\"0\":{\"300\":1,\"302\":1},\"1\":{\"300\":1,\"302\":6,\"305\":2,\"307\":3,\"308\":3,\"309\":2,\"310\":1,\"312\":2,\"313\":1,\"314\":2,\"329\":1}}],[\"impl\",{\"1\":{\"232\":2,\"234\":2,\"235\":2,\"236\":1,\"237\":1,\"238\":2,\"243\":5,\"247\":3,\"248\":1,\"398\":1,\"751\":1,\"752\":1,\"753\":1,\"758\":1,\"759\":1}}],[\"implemented\",{\"1\":{\"662\":1}}],[\"implementations\",{\"1\":{\"126\":1}}],[\"implementation\",{\"1\":{\"71\":1,\"138\":1,\"205\":1,\"209\":2,\"224\":2,\"243\":1,\"247\":1,\"622\":2}}],[\"implements\",{\"1\":{\"62\":1,\"63\":1,\"71\":2,\"86\":1,\"117\":1,\"138\":2,\"179\":2,\"193\":1,\"229\":1,\"232\":1,\"235\":1,\"243\":4,\"316\":1,\"374\":1,\"383\":1,\"398\":2,\"409\":1,\"416\":1,\"425\":1,\"438\":1,\"500\":1,\"513\":1,\"521\":1,\"523\":2,\"586\":1,\"590\":1}}],[\"importnew\",{\"1\":{\"571\":1,\"663\":1}}],[\"important\",{\"1\":{\"92\":1}}],[\"import\",{\"1\":{\"60\":3,\"62\":12,\"63\":13,\"83\":1,\"138\":1,\"196\":7,\"241\":1,\"279\":2,\"383\":1,\"517\":1,\"638\":2,\"671\":1,\"727\":4,\"731\":1,\"737\":6}}],[\"imports\",{\"1\":{\"2\":2}}],[\"imooc\",{\"1\":{\"33\":1}}],[\"image默认的\",{\"1\":{\"399\":1}}],[\"imageloader\",{\"1\":{\"398\":4,\"399\":1}}],[\"imageloaders\",{\"1\":{\"398\":4}}],[\"imageleft\",{\"1\":{\"117\":1}}],[\"imagerequestconfig\",{\"1\":{\"398\":1}}],[\"imageright\",{\"1\":{\"117\":1}}],[\"imagetype表示获取图片的方式\",{\"1\":{\"398\":1}}],[\"imagetype\",{\"1\":{\"398\":6}}],[\"imageheight\",{\"1\":{\"398\":2}}],[\"imagewidth\",{\"1\":{\"398\":2}}],[\"image中分析的加载大量高清网图会出现的内存爆炸\",{\"1\":{\"397\":1}}],[\"image展示图片\",{\"1\":{\"395\":1}}],[\"image类型会返回不同的\",{\"1\":{\"391\":1}}],[\"image类的封装\",{\"1\":{\"371\":1}}],[\"imagebuilder\",{\"1\":{\"391\":2,\"392\":1,\"393\":4}}],[\"imageextstate\",{\"1\":{\"393\":2}}],[\"imageext\",{\"1\":{\"391\":1,\"392\":1,\"393\":4,\"394\":1}}],[\"imageerrorwidgetbuilder\",{\"1\":{\"391\":1}}],[\"imageerrorlistener\",{\"1\":{\"376\":1,\"384\":1}}],[\"image属性\",{\"1\":{\"390\":1}}],[\"image可以大体划分为flutter\",{\"1\":{\"388\":1}}],[\"image能够较好的解决上述问题\",{\"1\":{\"388\":1}}],[\"image都是在\",{\"1\":{\"388\":1}}],[\"image则是一款为\",{\"1\":{\"385\":1}}],[\"image则是借助flutter\",{\"1\":{\"385\":1}}],[\"image创建extendedrawimage以展示图片内容\",{\"1\":{\"382\":1}}],[\"image传入\",{\"1\":{\"377\":1}}],[\"image>\",{\"1\":{\"374\":1,\"396\":3}}],[\"image的关键类之一\",{\"1\":{\"394\":1}}],[\"image的封装类\",{\"1\":{\"372\":1}}],[\"image的内容\",{\"1\":{\"371\":1}}],[\"image参数\",{\"1\":{\"372\":1}}],[\"image代表的图片\",{\"1\":{\"372\":1}}],[\"image之后\",{\"1\":{\"372\":1,\"400\":1}}],[\"image对应的\",{\"1\":{\"371\":1}}],[\"image对象传入\",{\"1\":{\"393\":1}}],[\"image对象转化为bytedata\",{\"1\":{\"371\":1}}],[\"image对象\",{\"1\":{\"370\":1}}],[\"image和其对应的scale\",{\"1\":{\"369\":1}}],[\"imageinfo并刷新页面\",{\"1\":{\"382\":1}}],[\"imageinfo类内部持有ui\",{\"1\":{\"369\":1}}],[\"imageinfo\",{\"1\":{\"368\":1,\"369\":10,\"370\":9,\"372\":1,\"376\":1,\"377\":2,\"392\":6,\"393\":7,\"394\":1,\"395\":1,\"397\":7}}],[\"image是阿里巴巴出品的\",{\"1\":{\"388\":1}}],[\"image是基于官方\",{\"1\":{\"380\":1}}],[\"image是\",{\"1\":{\"366\":1,\"391\":2}}],[\"image用于获取图片\",{\"1\":{\"365\":1}}],[\"imageprovider<t>\",{\"1\":{\"384\":1}}],[\"imageprovider<extendednetworkimageprovider>\",{\"1\":{\"383\":1}}],[\"imageprovider<image\",{\"1\":{\"374\":1,\"383\":1}}],[\"imageprovider>\",{\"1\":{\"374\":1}}],[\"imageprovider\",{\"0\":{\"374\":1},\"1\":{\"365\":5,\"367\":4,\"370\":1,\"374\":2,\"375\":1,\"376\":1,\"377\":3,\"382\":5,\"383\":1,\"384\":1,\"394\":2,\"395\":1,\"397\":1}}],[\"imageconfiguration\",{\"1\":{\"365\":3,\"374\":2,\"377\":2,\"384\":1}}],[\"imagecache>\",{\"1\":{\"384\":2}}],[\"imagecaches\",{\"1\":{\"384\":3}}],[\"imagecachestatus处理\",{\"1\":{\"375\":1}}],[\"imagecachename\",{\"1\":{\"383\":1,\"384\":3}}],[\"imagecache\",{\"0\":{\"375\":1},\"1\":{\"363\":1,\"365\":4,\"374\":4,\"375\":5,\"376\":5,\"377\":1,\"379\":1,\"383\":3,\"384\":11,\"385\":2,\"387\":1,\"395\":3,\"396\":1,\"397\":2}}],[\"image等基于混合开发的解决方案\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"image等基于\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"imagestate\",{\"0\":{\"366\":1},\"1\":{\"366\":2,\"367\":1,\"369\":1,\"370\":2,\"371\":1,\"372\":2,\"374\":1,\"377\":2}}],[\"imagestreamcompleters\",{\"1\":{\"375\":1}}],[\"imagestreamcompleter\",{\"1\":{\"374\":1,\"376\":4,\"383\":1,\"384\":2}}],[\"imagestreamlistener\",{\"1\":{\"368\":6,\"376\":2,\"377\":2}}],[\"imagestream\",{\"1\":{\"365\":2,\"367\":5,\"368\":4,\"369\":1,\"370\":2,\"372\":1,\"374\":1,\"375\":2,\"377\":1,\"382\":1,\"384\":1}}],[\"images0\",{\"1\":{\"138\":1}}],[\"images\",{\"1\":{\"137\":1,\"375\":1}}],[\"imageview2\",{\"1\":{\"117\":1}}],[\"imageviewleft\",{\"1\":{\"117\":1}}],[\"imageview\",{\"1\":{\"112\":4,\"117\":1,\"167\":4,\"185\":1,\"781\":1}}],[\"image\",{\"0\":{\"363\":1,\"365\":1,\"379\":1,\"380\":1,\"387\":1,\"388\":1},\"1\":{\"6\":1,\"167\":2,\"363\":2,\"365\":20,\"366\":1,\"367\":2,\"368\":1,\"369\":5,\"370\":12,\"371\":12,\"372\":8,\"374\":13,\"375\":2,\"376\":19,\"377\":7,\"378\":1,\"379\":2,\"380\":5,\"381\":2,\"382\":4,\"383\":8,\"384\":5,\"385\":5,\"386\":2,\"387\":2,\"388\":2,\"391\":7,\"392\":2,\"393\":7,\"394\":1,\"395\":3,\"396\":8,\"397\":9,\"398\":4,\"400\":4,\"401\":2}}],[\"imageuri\",{\"1\":{\"6\":1}}],[\"imgurl\",{\"1\":{\"781\":1}}],[\"imguri\",{\"1\":{\"6\":1}}],[\"img\",{\"1\":{\"6\":1,\"138\":1}}],[\"srv\",{\"1\":{\"686\":1}}],[\"srcstring\",{\"1\":{\"399\":1}}],[\"srcpaint\",{\"1\":{\"131\":3}}],[\"src和dst符合要求\",{\"1\":{\"131\":1}}],[\"src\",{\"1\":{\"57\":2,\"71\":1,\"77\":1,\"106\":2,\"131\":3,\"132\":5,\"141\":1,\"162\":1,\"252\":1,\"253\":3,\"254\":1,\"255\":1,\"256\":3,\"259\":3,\"262\":2,\"263\":1,\"264\":3,\"265\":6,\"365\":2,\"372\":1,\"398\":2,\"486\":1}}],[\"srcdirs\",{\"1\":{\"57\":1}}],[\"sbin\",{\"1\":{\"686\":1}}],[\"s=\",{\"1\":{\"519\":1}}],[\"sf\",{\"1\":{\"479\":1}}],[\"s2\",{\"1\":{\"457\":1,\"461\":3}}],[\"s1\",{\"1\":{\"457\":1}}],[\"sqlite\",{\"1\":{\"786\":2}}],[\"sqrt2\",{\"1\":{\"342\":1,\"343\":1}}],[\"squares\",{\"1\":{\"638\":2}}],[\"square\",{\"1\":{\"340\":2,\"342\":2,\"638\":2}}],[\"skip\",{\"1\":{\"630\":1}}],[\"skimage\",{\"1\":{\"388\":1}}],[\"skew\",{\"1\":{\"334\":1}}],[\"skywang12345\",{\"1\":{\"904\":1}}],[\"sky\",{\"1\":{\"243\":1}}],[\"sky0014\",{\"1\":{\"162\":1}}],[\"skyroben\",{\"1\":{\"137\":2}}],[\"skydoves\",{\"1\":{\"121\":1}}],[\"slow\",{\"1\":{\"630\":3}}],[\"slot\",{\"1\":{\"231\":1,\"251\":1,\"256\":2,\"258\":1,\"259\":1,\"262\":1,\"263\":1,\"264\":2,\"265\":2,\"270\":1,\"271\":1,\"426\":2}}],[\"sleep\",{\"1\":{\"629\":2,\"651\":1,\"731\":2,\"761\":1}}],[\"slide\",{\"1\":{\"783\":1}}],[\"slide=67\",{\"1\":{\"522\":1}}],[\"slide=42\",{\"1\":{\"516\":1}}],[\"slide=34\",{\"1\":{\"516\":1}}],[\"slidetransition\",{\"1\":{\"309\":1}}],[\"sliverchilddelegate\",{\"1\":{\"431\":1}}],[\"sliverconstraints\",{\"1\":{\"405\":1}}],[\"slivermultiboxadaptorwidget\",{\"1\":{\"430\":1,\"431\":2}}],[\"sliverxxx\",{\"1\":{\"422\":1}}],[\"slivergrid\",{\"1\":{\"419\":1}}],[\"slivergeometry\",{\"1\":{\"402\":1,\"405\":1,\"422\":1,\"433\":1}}],[\"sliverlist\",{\"1\":{\"419\":1,\"422\":1,\"430\":1}}],[\"sliveroverlapinjector\",{\"1\":{\"405\":1}}],[\"sliveroverlapabsorber\",{\"1\":{\"405\":1}}],[\"sliveroverlapabsorberhandle\",{\"1\":{\"404\":1,\"405\":2}}],[\"sliverfillremainingwithscrollable\",{\"1\":{\"405\":2}}],[\"sliverfillremaining\",{\"1\":{\"405\":3,\"420\":1}}],[\"sliverfillviewport\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"slivers\",{\"1\":{\"404\":1,\"405\":3,\"419\":1,\"422\":2,\"423\":7,\"424\":6,\"427\":5,\"429\":1,\"430\":4}}],[\"sliverappbar\",{\"1\":{\"403\":1,\"430\":1}}],[\"sliver\",{\"1\":{\"402\":1,\"419\":1,\"420\":1,\"422\":3,\"431\":1,\"433\":1,\"442\":2,\"446\":1}}],[\"snprintf\",{\"1\":{\"247\":1}}],[\"snapshots\",{\"1\":{\"757\":1,\"763\":2,\"770\":1}}],[\"snapshot\",{\"0\":{\"769\":1,\"770\":1,\"771\":1},\"1\":{\"752\":6,\"753\":5,\"757\":14,\"758\":4,\"763\":2,\"769\":8,\"770\":3,\"771\":2}}],[\"snap\",{\"1\":{\"111\":1}}],[\"ssa\",{\"1\":{\"768\":3}}],[\"ssh\",{\"1\":{\"670\":9}}],[\"sslfilter\",{\"1\":{\"247\":2}}],[\"ssot\",{\"1\":{\"126\":2}}],[\"sdpath\",{\"1\":{\"821\":1}}],[\"sdefaultexecutor\",{\"1\":{\"193\":3}}],[\"sdk\",{\"1\":{\"3\":1,\"6\":2,\"104\":3,\"196\":1,\"221\":1,\"224\":3,\"225\":1,\"226\":2,\"227\":1,\"228\":1,\"229\":1,\"231\":1,\"232\":2,\"233\":1,\"234\":6,\"235\":2,\"236\":1,\"237\":3,\"238\":2,\"240\":1,\"243\":9,\"244\":3,\"247\":4,\"710\":1,\"740\":1,\"745\":1,\"747\":4,\"748\":3,\"773\":2}}],[\"swapper\",{\"1\":{\"140\":3}}],[\"swiplerefreshlayout\",{\"1\":{\"111\":1}}],[\"swiperecyclerview\",{\"1\":{\"77\":1}}],[\"switchable\",{\"0\":{\"772\":1},\"1\":{\"772\":1}}],[\"switchablecallmiss\",{\"1\":{\"753\":1}}],[\"switchmap\",{\"1\":{\"187\":2}}],[\"switch\",{\"1\":{\"27\":1,\"71\":1,\"101\":1,\"117\":1,\"138\":1,\"159\":1,\"193\":2,\"247\":1,\"350\":1,\"352\":2,\"424\":1,\"439\":3,\"440\":1,\"566\":1,\"583\":1}}],[\"safari\",{\"1\":{\"731\":1}}],[\"safeargs的支持\",{\"1\":{\"783\":1}}],[\"safely\",{\"1\":{\"285\":1}}],[\"safepointwriterwlocker\",{\"1\":{\"753\":2}}],[\"safepointreadrwlocker\",{\"1\":{\"753\":1}}],[\"safepointing\",{\"1\":{\"753\":1}}],[\"safepoint\",{\"1\":{\"248\":1,\"753\":2,\"759\":1,\"761\":2,\"768\":2}}],[\"safe\",{\"1\":{\"205\":1,\"753\":1,\"757\":5,\"808\":1}}],[\"safeopencamera\",{\"1\":{\"173\":2}}],[\"saferequestcamerapermission\",{\"1\":{\"173\":4}}],[\"saynum\",{\"1\":{\"612\":1}}],[\"say\",{\"1\":{\"486\":3,\"487\":3,\"612\":1,\"728\":3}}],[\"samples\",{\"1\":{\"783\":1}}],[\"samplecustompainter\",{\"1\":{\"330\":3}}],[\"sampleapppagestate\",{\"1\":{\"284\":1}}],[\"same\",{\"1\":{\"235\":1,\"573\":1,\"740\":1,\"745\":1,\"748\":1,\"759\":1,\"761\":1}}],[\"sa\",{\"1\":{\"138\":1,\"528\":1}}],[\"saver\",{\"1\":{\"247\":3}}],[\"saved\",{\"1\":{\"247\":3,\"761\":5}}],[\"savedinstancestate\",{\"1\":{\"126\":2,\"189\":2,\"215\":2,\"399\":1}}],[\"save\",{\"1\":{\"131\":1,\"162\":3,\"332\":1,\"334\":5,\"337\":1}}],[\"savelayer\",{\"1\":{\"131\":1,\"162\":2,\"334\":4}}],[\"savecount\",{\"1\":{\"131\":2}}],[\"smi\",{\"1\":{\"745\":2}}],[\"smallest\",{\"1\":{\"439\":1}}],[\"smaller\",{\"1\":{\"237\":1,\"276\":1}}],[\"small\",{\"1\":{\"413\":1,\"770\":1,\"921\":1}}],[\"smgr\",{\"1\":{\"138\":2}}],[\"smoothscrollby\",{\"1\":{\"75\":1}}],[\"sv+1\",{\"1\":{\"137\":1}}],[\"sv>0\",{\"1\":{\"137\":1}}],[\"sv\",{\"1\":{\"137\":6}}],[\"sudo\",{\"1\":{\"669\":1,\"679\":2}}],[\"sum\",{\"1\":{\"663\":1}}],[\"summary\",{\"1\":{\"552\":1,\"737\":3}}],[\"sunflower则是\",{\"1\":{\"781\":1}}],[\"sunflower\",{\"0\":{\"780\":1},\"1\":{\"781\":3,\"782\":1,\"783\":1,\"784\":1}}],[\"sunday\",{\"1\":{\"575\":1,\"578\":1}}],[\"sun\",{\"1\":{\"460\":1,\"463\":1,\"485\":3,\"487\":1}}],[\"survivor\",{\"1\":{\"455\":1}}],[\"sure\",{\"1\":{\"376\":2,\"745\":1}}],[\"surface\",{\"1\":{\"258\":1}}],[\"succeed\",{\"1\":{\"759\":1}}],[\"successorkey\",{\"1\":{\"850\":4}}],[\"successful\",{\"1\":{\"758\":1}}],[\"successfully\",{\"1\":{\"247\":2,\"670\":1,\"766\":1}}],[\"success\",{\"1\":{\"284\":1,\"395\":3,\"398\":5,\"751\":2,\"753\":3,\"757\":1,\"759\":3}}],[\"successvalue\",{\"1\":{\"231\":1}}],[\"such\",{\"1\":{\"247\":1,\"285\":1,\"370\":1,\"495\":1}}],[\"suffix\",{\"1\":{\"241\":3,\"243\":1}}],[\"subdirectory\",{\"1\":{\"811\":1}}],[\"subgraphs\",{\"1\":{\"783\":1}}],[\"subtitle\",{\"1\":{\"811\":1}}],[\"subt>\",{\"1\":{\"540\":1}}],[\"subtract\",{\"1\":{\"383\":1}}],[\"subtreecontext\",{\"1\":{\"348\":2,\"351\":2}}],[\"subtree\",{\"1\":{\"308\":1}}],[\"submit\",{\"1\":{\"399\":1}}],[\"subset\",{\"1\":{\"742\":1}}],[\"subscribe\",{\"1\":{\"612\":2}}],[\"subscription\",{\"1\":{\"398\":3}}],[\"subs\",{\"1\":{\"587\":1}}],[\"substring\",{\"1\":{\"153\":2,\"557\":2}}],[\"subclasses\",{\"1\":{\"262\":1,\"302\":1,\"309\":1,\"323\":1,\"360\":1,\"429\":1,\"584\":1}}],[\"subclass\",{\"1\":{\"243\":1,\"615\":1}}],[\"subcomponent\",{\"0\":{\"212\":1},\"1\":{\"212\":3,\"217\":1}}],[\"subcomponent从它的父类访问所有依赖\",{\"1\":{\"205\":1}}],[\"subcomponents为刚刚创建的mainactivitysubcomponent\",{\"1\":{\"213\":1}}],[\"subcomponents\",{\"1\":{\"205\":2,\"206\":1,\"213\":1}}],[\"suspending\",{\"1\":{\"287\":1}}],[\"suspend\",{\"1\":{\"126\":1,\"646\":1}}],[\"supplied\",{\"1\":{\"247\":1}}],[\"suppresswarnings\",{\"1\":{\"193\":1,\"566\":1}}],[\"suppresslint\",{\"1\":{\"118\":1}}],[\"supported\",{\"1\":{\"227\":1,\"234\":2,\"748\":1,\"751\":1,\"756\":1}}],[\"support\",{\"1\":{\"2\":2,\"6\":1,\"30\":1,\"63\":1,\"108\":4,\"111\":9,\"209\":1,\"496\":1,\"753\":1}}],[\"supervisorscope\",{\"1\":{\"643\":1}}],[\"supervisor取消的话\",{\"1\":{\"641\":1}}],[\"supervisor\",{\"1\":{\"641\":2}}],[\"supervisorjob\",{\"1\":{\"641\":2,\"642\":2}}],[\"superinterfaces\",{\"1\":{\"493\":1}}],[\"superclasses\",{\"1\":{\"584\":1}}],[\"superclass\",{\"1\":{\"493\":1}}],[\"super\",{\"1\":{\"25\":1,\"26\":1,\"30\":1,\"33\":1,\"35\":2,\"71\":1,\"83\":1,\"112\":1,\"117\":1,\"126\":1,\"138\":1,\"153\":3,\"178\":1,\"189\":6,\"193\":1,\"195\":1,\"214\":1,\"215\":2,\"253\":1,\"255\":1,\"256\":1,\"259\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":2,\"273\":7,\"276\":2,\"284\":1,\"302\":1,\"305\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":4,\"311\":1,\"330\":1,\"331\":1,\"332\":3,\"342\":1,\"346\":1,\"349\":1,\"358\":1,\"360\":1,\"365\":1,\"392\":1,\"393\":1,\"396\":2,\"397\":1,\"405\":1,\"411\":1,\"415\":2,\"430\":1,\"438\":2,\"528\":1,\"541\":2,\"728\":1}}],[\"superdispatchkeyevent\",{\"1\":{\"25\":3}}],[\"superdispatchtouchevent\",{\"1\":{\"25\":4}}],[\"s\",{\"1\":{\"92\":1,\"138\":1,\"205\":1,\"214\":1,\"224\":3,\"231\":2,\"232\":1,\"233\":2,\"247\":7,\"248\":1,\"250\":1,\"276\":1,\"278\":1,\"290\":1,\"310\":1,\"342\":1,\"347\":1,\"348\":1,\"350\":1,\"352\":1,\"374\":2,\"408\":1,\"417\":1,\"461\":1,\"506\":5,\"519\":1,\"561\":1,\"578\":2,\"579\":1,\"612\":6,\"620\":1,\"691\":2,\"712\":1,\"728\":1,\"731\":2,\"745\":1,\"748\":1,\"749\":1,\"753\":2,\"754\":1,\"756\":1,\"759\":2,\"761\":10,\"769\":1,\"784\":1,\"811\":1,\"819\":1}}],[\"spwanuri创建的时候会创建单独的\",{\"1\":{\"740\":1}}],[\"spider1\",{\"1\":{\"733\":1}}],[\"spidermain\",{\"1\":{\"731\":1,\"737\":2}}],[\"spider\",{\"1\":{\"730\":1,\"731\":1,\"736\":1,\"737\":1}}],[\"spin\",{\"1\":{\"238\":1}}],[\"split\",{\"1\":{\"612\":1,\"664\":1,\"890\":1}}],[\"spends\",{\"1\":{\"770\":1}}],[\"spent\",{\"1\":{\"770\":1}}],[\"speed\",{\"1\":{\"630\":1}}],[\"speakerdeck\",{\"1\":{\"516\":3,\"522\":1}}],[\"speculative\",{\"1\":{\"771\":2}}],[\"specs\",{\"1\":{\"492\":1,\"511\":1}}],[\"specsize\",{\"1\":{\"158\":2,\"159\":2}}],[\"special\",{\"1\":{\"243\":1,\"244\":1,\"247\":1,\"771\":1}}],[\"specification\",{\"1\":{\"498\":1}}],[\"specific\",{\"1\":{\"231\":1,\"235\":1,\"237\":1,\"243\":1,\"767\":1}}],[\"specified\",{\"1\":{\"33\":1,\"87\":1,\"193\":1,\"302\":1,\"748\":1}}],[\"specmode\",{\"1\":{\"158\":2,\"159\":3}}],[\"spring\",{\"1\":{\"467\":1}}],[\"springsimulation\",{\"0\":{\"326\":1}}],[\"springdescription\",{\"1\":{\"319\":2}}],[\"spoolworkqueue\",{\"1\":{\"193\":1}}],[\"spawn的entrypoint或者isolate\",{\"1\":{\"759\":1}}],[\"spawn最后调用了\",{\"1\":{\"748\":1,\"749\":1}}],[\"spawncommon\",{\"1\":{\"748\":4}}],[\"spawncreate\",{\"1\":{\"748\":1}}],[\"spawnfunction方法中主要还是解析收到的各种参数\",{\"1\":{\"749\":1}}],[\"spawnfunction方法\",{\"1\":{\"748\":1,\"749\":1}}],[\"spawnfunction\",{\"0\":{\"749\":1},\"1\":{\"748\":4,\"749\":2,\"759\":1}}],[\"spawn和isolate\",{\"1\":{\"748\":1}}],[\"spawn<t>\",{\"1\":{\"748\":2}}],[\"spawns\",{\"1\":{\"748\":4}}],[\"spawnuri的main方法\",{\"1\":{\"759\":1}}],[\"spawnuri的时候\",{\"1\":{\"757\":1}}],[\"spawnuri的实现都在vm下面的isolate\",{\"1\":{\"748\":1}}],[\"spawnuri还是执行了spawnisolatetask\",{\"1\":{\"754\":1}}],[\"spawnuri来创建\",{\"1\":{\"754\":1}}],[\"spawnuri方法\",{\"1\":{\"748\":1}}],[\"spawnuri最后调用了\",{\"1\":{\"748\":1}}],[\"spawnuricreate\",{\"1\":{\"748\":1}}],[\"spawnuri\",{\"0\":{\"754\":1},\"1\":{\"742\":2,\"748\":9,\"754\":3,\"759\":1,\"762\":1}}],[\"spawnisolatetask\",{\"0\":{\"750\":1,\"755\":1},\"1\":{\"750\":2,\"756\":1}}],[\"spawnisolate\",{\"1\":{\"742\":1}}],[\"spawning\",{\"1\":{\"285\":1,\"748\":1,\"751\":3,\"759\":1}}],[\"spawn创建新\",{\"1\":{\"740\":1}}],[\"spawn\",{\"1\":{\"244\":1,\"742\":3,\"748\":5,\"749\":2,\"751\":1,\"753\":1,\"756\":2,\"758\":1,\"759\":7,\"762\":1}}],[\"spawneduri\",{\"1\":{\"748\":1}}],[\"spawned\",{\"1\":{\"139\":1}}],[\"spacer\",{\"1\":{\"445\":1}}],[\"spacearound\",{\"1\":{\"444\":2}}],[\"spacedaround\",{\"0\":{\"444\":1},\"1\":{\"444\":1}}],[\"space\",{\"0\":{\"445\":1},\"1\":{\"238\":1,\"248\":6,\"276\":3,\"417\":3,\"444\":1,\"445\":2,\"455\":2}}],[\"sparselongarray\",{\"1\":{\"523\":1}}],[\"sparseintarray\",{\"1\":{\"523\":1}}],[\"sparsebooleanarray\",{\"1\":{\"523\":1}}],[\"sparsearray在删除时只是将对于的值标记为deleted\",{\"1\":{\"523\":1}}],[\"sparsearray有以下局限性\",{\"1\":{\"523\":1}}],[\"sparsearray类的key要占用更少的内存\",{\"1\":{\"523\":1}}],[\"sparsearray类很明显要比hashmap占用更少的内存\",{\"1\":{\"523\":1}}],[\"sparsearray类\",{\"1\":{\"523\":1}}],[\"sparsearray\",{\"0\":{\"523\":1},\"1\":{\"90\":1,\"96\":3,\"523\":4,\"524\":4}}],[\"sparsearray<e>\",{\"1\":{\"86\":1,\"523\":1}}],[\"sparearray在删除数组时只会将其赋值为deleted\",{\"1\":{\"86\":1}}],[\"sparearray以及他的衍生类主要用于以基本类型为key保存非大量数据的场景\",{\"1\":{\"86\":1}}],[\"sparearray以及他的衍生类都是以基本类型为key\",{\"1\":{\"85\":1}}],[\"sparearray\",{\"0\":{\"85\":1,\"86\":1,\"91\":1}}],[\"sp\",{\"1\":{\"101\":1,\"731\":2,\"737\":2}}],[\"sh\",{\"1\":{\"671\":1,\"680\":1,\"700\":2}}],[\"shellsort\",{\"1\":{\"921\":2}}],[\"shell\",{\"0\":{\"696\":1,\"700\":1},\"1\":{\"670\":1,\"696\":1,\"699\":2}}],[\"shrinkwrappingviewport\",{\"1\":{\"422\":1,\"424\":4,\"426\":1,\"431\":1}}],[\"shrinkwrap\",{\"1\":{\"422\":1,\"424\":4,\"428\":1,\"431\":1,\"442\":1,\"446\":1}}],[\"shift\",{\"1\":{\"405\":1}}],[\"shlould\",{\"1\":{\"273\":1}}],[\"shuttle\",{\"1\":{\"352\":4}}],[\"shuttlebuilder\",{\"1\":{\"348\":1,\"351\":2,\"352\":1}}],[\"shutting\",{\"1\":{\"247\":1,\"759\":1,\"761\":3}}],[\"shutdownisolate\",{\"1\":{\"751\":1,\"753\":2,\"759\":3}}],[\"shutdown\",{\"1\":{\"238\":1,\"752\":1,\"753\":2,\"761\":2}}],[\"shutdowntimerhandler\",{\"1\":{\"237\":1}}],[\"shayn\",{\"1\":{\"619\":1}}],[\"shany\",{\"1\":{\"619\":1}}],[\"shandler\",{\"1\":{\"193\":4}}],[\"shape>\",{\"1\":{\"167\":1}}],[\"shade200\",{\"1\":{\"276\":1}}],[\"shader\",{\"1\":{\"146\":7}}],[\"shadowpath\",{\"1\":{\"146\":6}}],[\"shadowpaint\",{\"1\":{\"146\":4}}],[\"shares\",{\"1\":{\"748\":1}}],[\"share\",{\"1\":{\"285\":2,\"671\":1}}],[\"shareduid\",{\"1\":{\"817\":1}}],[\"shareduserid=\",{\"1\":{\"816\":1}}],[\"shareduserid\",{\"0\":{\"816\":1},\"1\":{\"816\":1,\"817\":3,\"824\":1}}],[\"shareddata\",{\"1\":{\"284\":3}}],[\"sharedtext\",{\"1\":{\"284\":2}}],[\"shared\",{\"1\":{\"284\":2,\"763\":1,\"816\":1}}],[\"sharedpreferences\",{\"1\":{\"20\":1,\"556\":1}}],[\"sharepreferencesutils\",{\"1\":{\"20\":1}}],[\"short\",{\"1\":{\"118\":1,\"186\":1,\"568\":1,\"849\":1}}],[\"shouldpauseonexit\",{\"1\":{\"761\":3}}],[\"shouldpauseonstart\",{\"1\":{\"761\":2}}],[\"shouldclipatpaintoffset\",{\"1\":{\"440\":1}}],[\"shouldacceptuseroffset\",{\"1\":{\"415\":1}}],[\"shouldanimatetween\",{\"1\":{\"304\":3}}],[\"shouldn\",{\"1\":{\"376\":1,\"748\":1}}],[\"shouldincludechildinplaceholder\",{\"1\":{\"352\":4}}],[\"shouldincludechild\",{\"1\":{\"347\":2}}],[\"shouldincludedchildinplaceholder\",{\"1\":{\"347\":2,\"352\":1}}],[\"shouldrebuildsemantics\",{\"1\":{\"332\":1,\"333\":1}}],[\"shouldrepaint\",{\"1\":{\"330\":1,\"332\":1,\"333\":4}}],[\"shouldstartanimation\",{\"1\":{\"304\":4}}],[\"shouldshowrequestpermissionrationale\",{\"1\":{\"172\":2,\"173\":1}}],[\"should\",{\"1\":{\"92\":1,\"159\":1,\"205\":1,\"228\":1,\"247\":1,\"256\":1,\"273\":1,\"332\":2,\"352\":1,\"384\":1,\"412\":2,\"429\":1,\"742\":1,\"753\":2,\"757\":2}}],[\"shouldoverrideurlloading\",{\"1\":{\"80\":1}}],[\"showplaceholder\",{\"1\":{\"347\":5}}],[\"showprogressonmainthread\",{\"1\":{\"622\":1}}],[\"showprogress\",{\"1\":{\"123\":2}}],[\"show\",{\"1\":{\"76\":1,\"118\":1,\"173\":2,\"186\":1}}],[\"scontext\",{\"1\":{\"398\":2}}],[\"scope范围一致\",{\"1\":{\"205\":1}}],[\"scope修饰的类会在实例构造完毕后\",{\"1\":{\"205\":1}}],[\"scope修饰的实例在构造完毕后就会失去控制\",{\"1\":{\"205\":1}}],[\"scope的作用是限定其修饰的类的范围\",{\"1\":{\"205\":1}}],[\"scope在起作用\",{\"1\":{\"205\":1}}],[\"scope\",{\"0\":{\"205\":1},\"1\":{\"205\":2,\"753\":5,\"759\":4}}],[\"scene\",{\"1\":{\"334\":2}}],[\"scenebuilder\",{\"1\":{\"334\":1}}],[\"script\",{\"1\":{\"748\":1,\"749\":1,\"752\":6,\"757\":15,\"758\":2,\"794\":3}}],[\"scripts\",{\"0\":{\"700\":1},\"1\":{\"699\":1,\"807\":1}}],[\"scrapy\",{\"1\":{\"673\":1}}],[\"screen\",{\"1\":{\"132\":1,\"284\":1}}],[\"scrolls\",{\"1\":{\"422\":1}}],[\"scrollviewkeyboarddismissbehavior\",{\"1\":{\"423\":1,\"436\":1}}],[\"scrollview\",{\"0\":{\"422\":1},\"1\":{\"422\":6,\"423\":4,\"424\":1,\"426\":1,\"429\":1,\"430\":4,\"431\":3,\"432\":1,\"433\":1}}],[\"scrolldragcontroller\",{\"1\":{\"418\":3}}],[\"scrolldirection\",{\"1\":{\"276\":1,\"405\":2,\"417\":1,\"418\":2}}],[\"scrollholdcontroller\",{\"1\":{\"416\":1}}],[\"scrollupdatenotification\",{\"1\":{\"412\":1,\"423\":1,\"436\":1}}],[\"scrollbars\",{\"1\":{\"405\":1}}],[\"scrollbehavior\",{\"1\":{\"349\":1,\"405\":3,\"413\":1,\"423\":2}}],[\"scrolloffset\",{\"1\":{\"405\":1}}],[\"scrolled\",{\"1\":{\"433\":1}}],[\"scrollextent+viewport\",{\"1\":{\"405\":1}}],[\"scrollextent\",{\"1\":{\"404\":1,\"405\":9}}],[\"scroller\",{\"1\":{\"75\":2}}],[\"scrollnotification\",{\"1\":{\"402\":1,\"422\":1,\"423\":1,\"433\":1}}],[\"scrollphysics\",{\"1\":{\"402\":1,\"404\":1,\"405\":3,\"407\":1,\"414\":1,\"422\":1,\"433\":1}}],[\"scrollpositionwithsinglecontext\",{\"1\":{\"415\":3}}],[\"scrollposition\",{\"0\":{\"408\":1},\"1\":{\"402\":1,\"404\":2,\"405\":1,\"407\":2,\"408\":4,\"409\":2,\"411\":2,\"412\":6,\"413\":1,\"415\":1,\"418\":2,\"420\":1,\"422\":1,\"423\":2,\"433\":1,\"436\":2,\"437\":2,\"438\":2,\"440\":3,\"441\":1}}],[\"scrollcontext\",{\"1\":{\"407\":1}}],[\"scrollcontroller\",{\"1\":{\"402\":1,\"404\":3,\"405\":3,\"406\":1,\"409\":3,\"410\":3,\"415\":5,\"416\":4,\"420\":1,\"422\":1,\"423\":5,\"433\":1,\"436\":5,\"438\":1}}],[\"scrollconfiguration\",{\"1\":{\"349\":1,\"405\":1}}],[\"scrollab\",{\"1\":{\"438\":1}}],[\"scrollableresult\",{\"1\":{\"423\":3}}],[\"scrollablestate\",{\"1\":{\"413\":1,\"415\":4,\"418\":3}}],[\"scrollable\",{\"1\":{\"402\":5,\"415\":1,\"417\":2,\"418\":4,\"422\":7,\"423\":10,\"431\":2,\"433\":5,\"436\":11,\"437\":2,\"438\":1,\"440\":1,\"441\":1,\"442\":1,\"446\":1}}],[\"scrollactivitydelegate\",{\"1\":{\"409\":1,\"416\":2}}],[\"scrollactivity\",{\"1\":{\"402\":1,\"417\":6,\"422\":1,\"433\":1}}],[\"scrollawarecontext\",{\"1\":{\"367\":1}}],[\"scrollawareimageprovider<object>\",{\"1\":{\"367\":1}}],[\"scrollawareimageprovider\",{\"1\":{\"367\":2}}],[\"scrollflags\",{\"1\":{\"111\":2}}],[\"scrollflags=\",{\"1\":{\"111\":1}}],[\"scroll|exituntilcollapsed\",{\"1\":{\"111\":1}}],[\"scrolling\",{\"1\":{\"110\":1,\"111\":2,\"402\":4,\"403\":1,\"404\":1,\"405\":1,\"409\":1,\"412\":1,\"415\":6,\"416\":1,\"417\":7,\"418\":5,\"422\":2}}],[\"scrollingviewbehavior\",{\"1\":{\"110\":1}}],[\"scroll\",{\"1\":{\"78\":1,\"111\":1,\"112\":2,\"402\":3,\"411\":1,\"412\":4,\"417\":5,\"418\":3,\"422\":2,\"424\":2,\"427\":1,\"430\":1,\"433\":2,\"439\":1}}],[\"scrollto\",{\"1\":{\"75\":2}}],[\"scrolly\",{\"1\":{\"75\":2}}],[\"scrollx<0\",{\"1\":{\"75\":1}}],[\"scrollx>0\",{\"1\":{\"75\":2}}],[\"scrollx\",{\"1\":{\"75\":3}}],[\"scaletransition\",{\"1\":{\"309\":1}}],[\"scale\",{\"1\":{\"302\":1,\"309\":1,\"324\":1,\"334\":1,\"365\":3,\"369\":2,\"370\":2,\"374\":4,\"383\":3}}],[\"scaler\",{\"1\":{\"125\":1}}],[\"scaleddensity\",{\"1\":{\"101\":1}}],[\"scaleddensity=2\",{\"1\":{\"101\":2}}],[\"scaledtouchslop\",{\"1\":{\"74\":1}}],[\"scaffolds\",{\"1\":{\"807\":1}}],[\"scaffold\",{\"1\":{\"125\":1,\"279\":1,\"284\":1,\"295\":4,\"403\":1}}],[\"scheduling\",{\"1\":{\"761\":1}}],[\"scheduleupdateshadow\",{\"1\":{\"408\":6}}],[\"scheduleframecallback\",{\"1\":{\"320\":1,\"327\":1}}],[\"schedulerbinding\",{\"1\":{\"253\":2,\"254\":2,\"327\":1,\"408\":1}}],[\"schedulewarmupframe\",{\"0\":{\"257\":1},\"1\":{\"252\":1}}],[\"schedulewakeup\",{\"1\":{\"235\":1,\"237\":2}}],[\"scheduleattachrootwidget\",{\"0\":{\"254\":1},\"1\":{\"252\":1}}],[\"scheduleasynccallback方法\",{\"1\":{\"225\":1}}],[\"scheduleasynccallback\",{\"0\":{\"225\":1},\"1\":{\"224\":1,\"225\":1}}],[\"scheduletasklocked获取到new\",{\"1\":{\"761\":1}}],[\"scheduletasklocked方法\",{\"1\":{\"760\":1}}],[\"scheduletasklocked方法获取new\",{\"1\":{\"759\":1}}],[\"scheduletasklocked\",{\"1\":{\"247\":2,\"759\":2,\"760\":1}}],[\"scheduleimmediateclosure并保存在\",{\"1\":{\"228\":1}}],[\"scheduleimmediateclosure执行回调事件\",{\"1\":{\"228\":1}}],[\"scheduleimmediateclosure调用的\",{\"1\":{\"228\":1}}],[\"scheduleimmediateclosure\",{\"0\":{\"228\":1},\"1\":{\"227\":3,\"228\":1}}],[\"scheduleimmediate方法的实现在schedule\",{\"1\":{\"227\":1}}],[\"scheduleimmediate方法则是触发处理\",{\"1\":{\"226\":1}}],[\"scheduleimmediate\",{\"0\":{\"227\":1},\"1\":{\"225\":1,\"226\":2,\"227\":5,\"228\":1}}],[\"scheduledwakeuptime\",{\"1\":{\"235\":2,\"237\":3,\"238\":1}}],[\"scheduled\",{\"1\":{\"225\":1,\"232\":1,\"237\":2,\"238\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"10\":1}}],[\"schedules\",{\"1\":{\"225\":1}}],[\"schedule\",{\"1\":{\"224\":1,\"225\":1,\"226\":4,\"227\":1,\"228\":3,\"395\":1}}],[\"schedulemicrotask\",{\"1\":{\"223\":1,\"224\":7,\"232\":1,\"395\":2}}],[\"schedulenext\",{\"1\":{\"193\":3}}],[\"schedulebindservice\",{\"1\":{\"138\":1}}],[\"scheme\",{\"1\":{\"309\":1}}],[\"schemas\",{\"1\":{\"115\":2,\"167\":3,\"189\":3,\"783\":3,\"784\":5,\"816\":1}}],[\"silent\",{\"1\":{\"808\":1}}],[\"sivachandra\",{\"1\":{\"757\":1}}],[\"sitetitle\",{\"1\":{\"811\":1}}],[\"site\",{\"1\":{\"767\":1,\"811\":1}}],[\"sites\",{\"0\":{\"453\":1},\"1\":{\"772\":1}}],[\"situation\",{\"1\":{\"412\":3,\"417\":1}}],[\"simulators\",{\"1\":{\"763\":1}}],[\"simulation\",{\"0\":{\"323\":1},\"1\":{\"315\":2,\"319\":3,\"320\":6,\"321\":4,\"323\":6,\"327\":2}}],[\"simpledateformat\",{\"1\":{\"576\":7,\"578\":1,\"579\":1}}],[\"simple\",{\"1\":{\"340\":1,\"352\":1,\"651\":3,\"654\":1,\"656\":4,\"658\":2}}],[\"since\",{\"1\":{\"231\":2,\"237\":1,\"247\":1,\"285\":1,\"376\":1,\"408\":1,\"748\":2,\"749\":1,\"754\":1,\"761\":2}}],[\"sinyuk\",{\"1\":{\"205\":1,\"206\":1}}],[\"singletickerproviderstatemixin\",{\"1\":{\"319\":1,\"328\":1}}],[\"singletickerproviderstatemixin<t>\",{\"1\":{\"302\":1}}],[\"singletonenum\",{\"1\":{\"550\":1}}],[\"singleton和他的幕后英雄\",{\"1\":{\"205\":1}}],[\"singleton\",{\"0\":{\"205\":1,\"543\":1},\"1\":{\"179\":1,\"205\":4}}],[\"singleton<iactivitymanager>\",{\"1\":{\"138\":2}}],[\"singlechildviewport\",{\"0\":{\"437\":1},\"1\":{\"436\":3,\"437\":2}}],[\"singlechildscrollview\",{\"0\":{\"433\":1,\"436\":1},\"1\":{\"295\":1,\"422\":3,\"433\":3,\"434\":4,\"436\":4,\"438\":1,\"439\":14,\"440\":5,\"441\":1,\"442\":4,\"444\":4,\"445\":4,\"446\":1,\"447\":1}}],[\"singlechildrenderobjectwidget\",{\"1\":{\"259\":1,\"262\":2,\"263\":1,\"331\":2,\"335\":1,\"437\":2}}],[\"singlechildrenderobjectelement\",{\"1\":{\"258\":1,\"259\":1,\"262\":3,\"263\":3,\"264\":1,\"265\":4}}],[\"single\",{\"1\":{\"126\":1,\"285\":1,\"433\":1,\"615\":1,\"631\":1,\"652\":1,\"768\":1}}],[\"signoremeasurecache\",{\"1\":{\"159\":1}}],[\"signal\",{\"1\":{\"137\":2}}],[\"signed\",{\"1\":{\"104\":1}}],[\"side\",{\"1\":{\"71\":1,\"138\":1,\"243\":1,\"244\":1,\"412\":1,\"646\":3}}],[\"size++\",{\"1\":{\"880\":1}}],[\"sizeof\",{\"1\":{\"516\":1,\"517\":11,\"524\":1}}],[\"sizebytes\",{\"1\":{\"369\":1,\"376\":11}}],[\"sizebox\",{\"1\":{\"347\":1,\"445\":1}}],[\"sizetransition\",{\"1\":{\"309\":1}}],[\"sizes\",{\"1\":{\"302\":1}}],[\"sizedbox\",{\"1\":{\"276\":2,\"342\":2,\"347\":2,\"391\":1,\"392\":3,\"403\":1,\"434\":1}}],[\"sizeetx\",{\"1\":{\"195\":1,\"196\":7}}],[\"size<<1\",{\"1\":{\"95\":1}}],[\"size等涉及到数组大小查询\",{\"1\":{\"90\":1}}],[\"size\",{\"1\":{\"33\":1,\"62\":4,\"64\":2,\"95\":8,\"159\":3,\"193\":2,\"195\":1,\"243\":1,\"247\":3,\"276\":1,\"302\":1,\"308\":1,\"309\":1,\"327\":1,\"330\":9,\"331\":4,\"332\":3,\"333\":7,\"340\":5,\"342\":9,\"347\":1,\"351\":1,\"355\":1,\"365\":2,\"367\":2,\"376\":1,\"398\":2,\"399\":2,\"402\":1,\"422\":1,\"428\":1,\"431\":2,\"433\":1,\"439\":12,\"440\":7,\"445\":1,\"486\":1,\"500\":1,\"506\":2,\"516\":2,\"519\":1,\"523\":1,\"538\":1,\"594\":2,\"666\":3,\"753\":3,\"757\":7,\"760\":2,\"847\":2,\"848\":1,\"850\":2,\"859\":2,\"880\":6,\"890\":9,\"896\":4,\"897\":6,\"898\":3,\"913\":13,\"921\":1}}],[\"synthetic\",{\"1\":{\"513\":2}}],[\"synccall\",{\"1\":{\"376\":1}}],[\"synchronize实现的原理是锁定指定的对象\",{\"1\":{\"603\":1}}],[\"synchronize\",{\"0\":{\"600\":1,\"603\":1},\"1\":{\"606\":1}}],[\"synchronized\",{\"1\":{\"63\":2,\"83\":1,\"193\":3,\"485\":1,\"546\":2,\"547\":1,\"560\":2,\"561\":1,\"710\":1}}],[\"synchronously\",{\"1\":{\"408\":1,\"745\":1}}],[\"synchronousfuture<networkimage>\",{\"1\":{\"374\":1}}],[\"synchronouscall\",{\"1\":{\"369\":2}}],[\"sync\",{\"1\":{\"222\":2,\"231\":3,\"247\":1,\"573\":1,\"748\":1}}],[\"symbolic\",{\"1\":{\"493\":1,\"496\":1}}],[\"sys\",{\"1\":{\"727\":4,\"737\":3}}],[\"sysdir\",{\"1\":{\"486\":1}}],[\"syscall\",{\"1\":{\"140\":1}}],[\"systemserver\",{\"1\":{\"140\":2}}],[\"systemclock\",{\"1\":{\"20\":1,\"54\":1}}],[\"system\",{\"1\":{\"19\":1,\"92\":3,\"126\":1,\"139\":1,\"225\":1,\"461\":1,\"485\":2,\"486\":1,\"513\":2,\"517\":1,\"527\":4,\"532\":2,\"533\":2,\"534\":2,\"545\":1,\"546\":1,\"548\":1,\"549\":1,\"553\":2,\"560\":3,\"584\":3,\"586\":1,\"587\":4,\"631\":2,\"663\":1,\"686\":1,\"756\":1,\"763\":1,\"767\":1,\"890\":3}}],[\"sylvanassun\",{\"1\":{\"136\":1}}],[\"syif88\",{\"1\":{\"104\":1}}],[\"sortarr\",{\"1\":{\"880\":6}}],[\"sort\",{\"0\":{\"703\":1},\"1\":{\"703\":1}}],[\"softreference\",{\"0\":{\"479\":1},\"1\":{\"479\":2}}],[\"softwrap\",{\"1\":{\"251\":2,\"262\":1,\"265\":2}}],[\"software\",{\"1\":{\"131\":1}}],[\"solt\",{\"1\":{\"271\":1}}],[\"soup\",{\"1\":{\"737\":6}}],[\"sounds\",{\"1\":{\"281\":1}}],[\"sound\",{\"1\":{\"243\":2}}],[\"sources\",{\"1\":{\"718\":1}}],[\"sourcesets\",{\"1\":{\"57\":1}}],[\"source\",{\"0\":{\"764\":1,\"765\":1},\"1\":{\"26\":1,\"70\":1,\"126\":1,\"232\":9,\"247\":4,\"523\":1,\"557\":3,\"565\":1,\"718\":1,\"742\":1,\"751\":2,\"752\":2,\"753\":10,\"757\":1,\"758\":2,\"763\":3,\"765\":3,\"766\":1,\"807\":3,\"809\":1}}],[\"soon\",{\"1\":{\"230\":1}}],[\"somewhat\",{\"1\":{\"417\":1}}],[\"someone\",{\"1\":{\"384\":1}}],[\"someotherapplication\",{\"1\":{\"30\":1}}],[\"some\",{\"1\":{\"243\":1,\"753\":1,\"761\":1}}],[\"sometime\",{\"1\":{\"193\":1}}],[\"socket\",{\"1\":{\"135\":2,\"137\":1,\"140\":3,\"237\":6,\"247\":4,\"731\":1}}],[\"so\",{\"1\":{\"26\":3,\"139\":2,\"183\":1,\"229\":1,\"234\":1,\"244\":1,\"247\":1,\"253\":1,\"262\":1,\"264\":1,\"276\":1,\"360\":1,\"376\":3,\"408\":1,\"413\":1,\"417\":1,\"493\":1,\"586\":1,\"745\":1,\"761\":2}}],[\"sealed\",{\"0\":{\"615\":1},\"1\":{\"615\":4}}],[\"searchbar\",{\"1\":{\"118\":2}}],[\"search\",{\"1\":{\"87\":1,\"92\":2,\"118\":2}}],[\"sequence多级操作是逐个\",{\"1\":{\"637\":1}}],[\"sequence\",{\"0\":{\"637\":1},\"1\":{\"629\":1,\"637\":1,\"650\":1}}],[\"sequence<int>\",{\"1\":{\"629\":1}}],[\"sequences\",{\"1\":{\"586\":1}}],[\"sequeue\",{\"1\":{\"221\":1}}],[\"seven\",{\"1\":{\"574\":1}}],[\"several\",{\"1\":{\"412\":1}}],[\"se5\",{\"1\":{\"536\":1}}],[\"se13\",{\"1\":{\"511\":1}}],[\"se9\",{\"1\":{\"492\":1}}],[\"selectsort\",{\"1\":{\"897\":1}}],[\"select<unit>\",{\"1\":{\"646\":2}}],[\"selectfizzbuzz\",{\"1\":{\"646\":1}}],[\"select\",{\"0\":{\"646\":1},\"1\":{\"533\":2,\"646\":5}}],[\"selectiverebuildwidgetstate\",{\"1\":{\"273\":2}}],[\"selectiverebuildwidget\",{\"1\":{\"273\":4}}],[\"self\",{\"1\":{\"224\":1,\"247\":1,\"728\":10,\"731\":16,\"737\":15,\"757\":2}}],[\"semanticchildcount\",{\"1\":{\"423\":2}}],[\"semanticlabel\",{\"1\":{\"370\":2,\"392\":2,\"393\":2}}],[\"semanticsbuilder\",{\"1\":{\"333\":1}}],[\"semanticsbuildercallback\",{\"1\":{\"333\":1}}],[\"semanticsbinding\",{\"1\":{\"253\":2,\"254\":1}}],[\"semantics\",{\"1\":{\"332\":1,\"370\":1}}],[\"semanticslabel\",{\"1\":{\"262\":1}}],[\"semaphore\",{\"1\":{\"137\":1}}],[\"secretkey\",{\"1\":{\"557\":1}}],[\"secretkeyspec\",{\"1\":{\"557\":4}}],[\"securerandom\",{\"1\":{\"557\":1}}],[\"securitykey\",{\"1\":{\"557\":2}}],[\"security\",{\"1\":{\"552\":1,\"818\":1}}],[\"section\",{\"1\":{\"237\":1}}],[\"secondheropage\",{\"1\":{\"340\":3,\"342\":1}}],[\"seconds\",{\"1\":{\"123\":1,\"193\":2,\"222\":1,\"230\":5,\"308\":1,\"330\":1,\"742\":2}}],[\"second\",{\"1\":{\"19\":2,\"230\":1,\"340\":1,\"521\":2,\"578\":1}}],[\"see\",{\"1\":{\"237\":1,\"256\":1,\"412\":1,\"430\":1,\"586\":1,\"740\":1}}],[\"sense\",{\"1\":{\"615\":1}}],[\"sentineltimer\",{\"1\":{\"235\":1}}],[\"sendoob\",{\"1\":{\"745\":4}}],[\"sendsuccessresultcallback\",{\"1\":{\"712\":2}}],[\"sendfailresultcallback\",{\"1\":{\"712\":4}}],[\"sendchannel<int>\",{\"1\":{\"646\":1}}],[\"sendchannel\",{\"1\":{\"645\":1}}],[\"sendisolatestartupmessage\",{\"1\":{\"753\":1}}],[\"sendimagestateevent向\",{\"1\":{\"398\":1}}],[\"sending\",{\"1\":{\"237\":1,\"636\":1,\"740\":1,\"761\":1}}],[\"sendinguid\",{\"1\":{\"83\":1}}],[\"sender\",{\"1\":{\"237\":4}}],[\"senddata\",{\"1\":{\"237\":7}}],[\"sendport等绑定\",{\"1\":{\"753\":1}}],[\"sendport等传递数据\",{\"1\":{\"285\":1}}],[\"sendport发送\",{\"1\":{\"745\":1}}],[\"sendportptr\",{\"1\":{\"248\":2}}],[\"sendport>\",{\"1\":{\"244\":2}}],[\"sendport进行跨\",{\"1\":{\"243\":1}}],[\"sendportgetid\",{\"1\":{\"237\":1}}],[\"sendport是由\",{\"1\":{\"246\":1}}],[\"sendport是\",{\"1\":{\"235\":1}}],[\"sendport\",{\"1\":{\"235\":8,\"236\":2,\"237\":4,\"238\":1,\"243\":6,\"244\":16,\"246\":3,\"248\":9,\"249\":1,\"740\":1,\"742\":4,\"745\":4,\"747\":3,\"748\":20,\"759\":6}}],[\"sendtotarget\",{\"1\":{\"193\":1}}],[\"sendmessageattime\",{\"1\":{\"54\":1}}],[\"sendmessagedelayed\",{\"1\":{\"54\":2}}],[\"sendmessage\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"56\":1,\"83\":1}}],[\"send\",{\"1\":{\"39\":3,\"83\":4,\"235\":2,\"236\":3,\"237\":5,\"238\":1,\"243\":2,\"244\":2,\"246\":4,\"247\":3,\"636\":1,\"638\":2,\"645\":3,\"742\":1,\"745\":1,\"752\":1,\"759\":3}}],[\"separate\",{\"1\":{\"226\":1,\"285\":1,\"629\":1}}],[\"serialized\",{\"1\":{\"586\":3,\"587\":2,\"763\":2}}],[\"serializableclass1\",{\"1\":{\"587\":5}}],[\"serializableclass\",{\"1\":{\"583\":3,\"586\":10,\"587\":12}}],[\"serializable接口没有任何方法\",{\"1\":{\"581\":1}}],[\"serializable\",{\"0\":{\"580\":1,\"581\":1,\"585\":1},\"1\":{\"521\":1,\"523\":1,\"580\":1,\"583\":1,\"586\":1,\"591\":3,\"598\":1}}],[\"serialization\",{\"1\":{\"193\":1,\"598\":2}}],[\"serialversionuid\",{\"0\":{\"582\":1},\"1\":{\"566\":1,\"582\":1}}],[\"serial\",{\"1\":{\"193\":3,\"566\":1,\"580\":1,\"584\":1,\"587\":1}}],[\"serialexecutor\",{\"1\":{\"192\":1,\"193\":4}}],[\"servermanager\",{\"1\":{\"138\":13}}],[\"server\",{\"0\":{\"451\":1},\"1\":{\"71\":2,\"138\":5,\"395\":1,\"451\":2,\"806\":1}}],[\"service的\",{\"1\":{\"765\":1}}],[\"serviceisolate\",{\"1\":{\"753\":5}}],[\"servicesbinding\",{\"1\":{\"253\":2,\"254\":1}}],[\"serviceport时\",{\"1\":{\"247\":1}}],[\"serviceport之后\",{\"1\":{\"246\":1}}],[\"serviceport的获取过程\",{\"1\":{\"244\":1}}],[\"serviceport和\",{\"1\":{\"244\":1}}],[\"serviceport\",{\"1\":{\"243\":2,\"244\":2,\"247\":2,\"249\":1}}],[\"serviceports以便获取sendport\",{\"1\":{\"244\":1}}],[\"serviceports对\",{\"1\":{\"243\":1}}],[\"serviceports\",{\"1\":{\"243\":4,\"244\":5,\"247\":1}}],[\"service通信\",{\"1\":{\"243\":1}}],[\"servicemanager\",{\"1\":{\"138\":1,\"140\":1}}],[\"serviceconnection\",{\"1\":{\"35\":2,\"38\":2,\"39\":1,\"62\":5,\"83\":1,\"138\":3}}],[\"service>\",{\"1\":{\"35\":1}}],[\"service\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"42\":1,\"244\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"35\":12,\"36\":10,\"38\":8,\"39\":9,\"42\":4,\"43\":1,\"57\":1,\"62\":2,\"63\":2,\"83\":3,\"105\":1,\"126\":1,\"138\":9,\"186\":1,\"196\":1,\"199\":10,\"201\":3,\"202\":1,\"203\":5,\"204\":3,\"205\":2,\"241\":1,\"243\":10,\"244\":12,\"246\":7,\"247\":9,\"248\":1,\"752\":1,\"757\":5,\"761\":2,\"763\":1,\"765\":2}}],[\"setkernelisolate\",{\"1\":{\"753\":1}}],[\"setgroupcleanupcallback\",{\"1\":{\"752\":1}}],[\"setvalue\",{\"1\":{\"619\":2}}],[\"set方法放到一个地方实现\",{\"1\":{\"619\":1}}],[\"setobject\",{\"1\":{\"583\":1}}],[\"setonclickpendingintent\",{\"1\":{\"189\":1}}],[\"setonclicklistener\",{\"1\":{\"117\":1,\"126\":1,\"178\":1,\"662\":3}}],[\"setonindexclicklistener\",{\"1\":{\"153\":1}}],[\"setblockdatamode\",{\"1\":{\"583\":1,\"591\":2}}],[\"setbackgroundresource\",{\"1\":{\"167\":1}}],[\"setinitializecallback\",{\"1\":{\"752\":1}}],[\"setinitialized\",{\"1\":{\"752\":1}}],[\"setinitializing\",{\"1\":{\"752\":1}}],[\"setinitialvalue\",{\"1\":{\"527\":1}}],[\"setimagebitmap\",{\"1\":{\"185\":1}}],[\"setimgleftonclicklistener\",{\"1\":{\"117\":1,\"118\":1}}],[\"set<k>\",{\"1\":{\"523\":1}}],[\"set<map\",{\"1\":{\"500\":1,\"523\":1}}],[\"setrastercachehints\",{\"1\":{\"332\":2}}],[\"setregisterkernelblobcallback\",{\"1\":{\"752\":1}}],[\"setreturnvalue\",{\"1\":{\"246\":2}}],[\"setrepeating\",{\"1\":{\"13\":1,\"14\":1,\"19\":1,\"20\":1}}],[\"setnumarguments\",{\"1\":{\"753\":1}}],[\"setnewonclicklistener\",{\"1\":{\"662\":2}}],[\"setnegativebutton\",{\"1\":{\"173\":1}}],[\"setname\",{\"1\":{\"247\":2}}],[\"setlastmodified\",{\"1\":{\"247\":1}}],[\"setlastaccessed\",{\"1\":{\"247\":1}}],[\"setlayertype\",{\"1\":{\"131\":1}}],[\"setat\",{\"1\":{\"247\":2,\"745\":1,\"747\":3,\"759\":8}}],[\"setactiveapicall\",{\"1\":{\"247\":1}}],[\"setactive\",{\"1\":{\"235\":1}}],[\"setaction\",{\"1\":{\"26\":2,\"186\":1}}],[\"setaccessible\",{\"1\":{\"179\":6,\"553\":2,\"554\":1,\"569\":2}}],[\"setserviceisolate\",{\"1\":{\"753\":1}}],[\"setshutdowncallback\",{\"1\":{\"752\":1}}],[\"setshader\",{\"1\":{\"146\":1}}],[\"sets\",{\"1\":{\"417\":1,\"761\":1}}],[\"setstreamhandler\",{\"1\":{\"398\":1}}],[\"setstate\",{\"1\":{\"271\":1,\"273\":4,\"282\":1,\"284\":1,\"285\":2,\"307\":3,\"310\":2,\"347\":2,\"369\":1,\"408\":1}}],[\"setstacksize\",{\"1\":{\"247\":1}}],[\"setscheduleimmediateclosure返回\",{\"1\":{\"228\":1}}],[\"setscheduleimmediateclosure\",{\"1\":{\"227\":1,\"228\":3}}],[\"setdefaultencoding\",{\"1\":{\"737\":1}}],[\"setdrawingcacheenabled\",{\"1\":{\"185\":1}}],[\"setdata\",{\"1\":{\"39\":1}}],[\"setdataandtype\",{\"1\":{\"6\":1}}],[\"setparent\",{\"0\":{\"410\":1},\"1\":{\"405\":2,\"409\":1,\"410\":1}}],[\"setpassworderror\",{\"1\":{\"123\":1}}],[\"setpriority\",{\"1\":{\"247\":1}}],[\"setportstate\",{\"1\":{\"247\":1}}],[\"setposition\",{\"1\":{\"247\":1}}],[\"setpositivebutton\",{\"1\":{\"173\":2}}],[\"setpendingintent\",{\"1\":{\"189\":1}}],[\"setmethodcallhandler\",{\"1\":{\"284\":1,\"398\":1}}],[\"setmessage\",{\"1\":{\"173\":2}}],[\"setmeasureddimension\",{\"1\":{\"159\":1}}],[\"setxfermode\",{\"1\":{\"162\":2}}],[\"setflags\",{\"1\":{\"161\":1}}],[\"setwillnotdraw\",{\"1\":{\"161\":2}}],[\"setwindow\",{\"1\":{\"11\":1}}],[\"setcleanupcallback\",{\"1\":{\"752\":1}}],[\"setcreategroupcallback\",{\"1\":{\"752\":1}}],[\"setcandrag\",{\"1\":{\"415\":4}}],[\"setcancelable\",{\"1\":{\"173\":2}}],[\"setchildparentdata\",{\"1\":{\"405\":1}}],[\"setchooseid\",{\"1\":{\"153\":1}}],[\"setcurrent\",{\"1\":{\"247\":1}}],[\"setcompleter\",{\"1\":{\"384\":1}}],[\"setcomponent\",{\"1\":{\"62\":1,\"179\":1}}],[\"setcolor\",{\"1\":{\"153\":4,\"162\":2}}],[\"setcontentview\",{\"1\":{\"24\":3,\"167\":1,\"189\":1,\"215\":1,\"279\":1,\"784\":2}}],[\"seteffect\",{\"1\":{\"125\":1}}],[\"setevent\",{\"1\":{\"125\":2}}],[\"setunregisterkernelblobcallback\",{\"1\":{\"752\":1}}],[\"setusernameerror\",{\"1\":{\"123\":1}}],[\"setupcorelibraries\",{\"1\":{\"752\":1}}],[\"setup注册\",{\"1\":{\"398\":1}}],[\"setup\",{\"1\":{\"398\":3,\"753\":1}}],[\"setuphooks\",{\"1\":{\"234\":1,\"237\":1}}],[\"setuprepeatalarmclock\",{\"1\":{\"20\":1}}],[\"setupdailyalarmclock\",{\"1\":{\"19\":1}}],[\"setter\",{\"1\":{\"437\":1}}],[\"settext\",{\"1\":{\"570\":1}}],[\"settextalign\",{\"1\":{\"153\":1}}],[\"settextsize\",{\"1\":{\"117\":1,\"153\":1}}],[\"settitle\",{\"1\":{\"173\":2}}],[\"settings\",{\"1\":{\"186\":2,\"662\":1,\"670\":1,\"748\":1,\"810\":1}}],[\"setting\",{\"1\":{\"33\":1,\"247\":1}}],[\"set\",{\"1\":{\"3\":1,\"19\":4,\"48\":1,\"138\":1,\"153\":3,\"159\":1,\"179\":2,\"193\":1,\"231\":3,\"238\":1,\"243\":1,\"247\":2,\"253\":1,\"285\":1,\"332\":1,\"376\":1,\"412\":1,\"438\":1,\"527\":8,\"553\":1,\"569\":1,\"576\":2,\"615\":2,\"617\":1,\"619\":2,\"625\":2,\"697\":3,\"724\":3,\"748\":2,\"753\":2,\"759\":2,\"771\":1,\"811\":1,\"822\":1}}],[\"stepsize\",{\"1\":{\"827\":2}}],[\"step\",{\"1\":{\"759\":3}}],[\"steptween\",{\"1\":{\"358\":1}}],[\"stw\",{\"1\":{\"471\":1}}],[\"still\",{\"1\":{\"352\":1,\"384\":1,\"445\":1,\"485\":1,\"753\":1,\"761\":4}}],[\"sticky\",{\"1\":{\"36\":2}}],[\"stderr\",{\"1\":{\"701\":1}}],[\"stdout\",{\"1\":{\"701\":1}}],[\"stdin\",{\"1\":{\"701\":1}}],[\"std\",{\"1\":{\"247\":12,\"749\":2,\"750\":2,\"754\":2,\"757\":1,\"758\":2,\"759\":4,\"760\":1,\"761\":7}}],[\"st\",{\"1\":{\"231\":3,\"748\":2}}],[\"strcmp\",{\"1\":{\"753\":1,\"757\":3}}],[\"strdup\",{\"1\":{\"752\":4,\"753\":2,\"759\":2}}],[\"strs\",{\"1\":{\"631\":4}}],[\"strongreference\",{\"0\":{\"478\":1}}],[\"str\",{\"1\":{\"461\":1,\"731\":2,\"737\":1}}],[\"structurally\",{\"1\":{\"494\":1}}],[\"structure\",{\"1\":{\"234\":1,\"377\":1,\"380\":1,\"498\":1,\"523\":1,\"753\":1}}],[\"strutstyle\",{\"1\":{\"262\":1,\"265\":2}}],[\"streamcorruptedexception\",{\"1\":{\"583\":1}}],[\"streamcontroller<imagechunkevent>\",{\"1\":{\"374\":2,\"383\":4}}],[\"streamsubscription\",{\"1\":{\"398\":2}}],[\"streamlistener\",{\"1\":{\"376\":4}}],[\"stream\",{\"1\":{\"221\":1,\"370\":1,\"374\":2,\"383\":1,\"384\":5,\"587\":1,\"636\":1,\"637\":1}}],[\"stringbuilder\",{\"1\":{\"890\":8}}],[\"stringbuffer\",{\"1\":{\"557\":5}}],[\"stringtocstring\",{\"1\":{\"752\":1}}],[\"stringtag\",{\"1\":{\"138\":1}}],[\"string2utf8\",{\"1\":{\"749\":1,\"754\":2}}],[\"strings\",{\"1\":{\"631\":1}}],[\"string=\",{\"1\":{\"590\":1}}],[\"string数组\",{\"1\":{\"538\":1}}],[\"string>\",{\"1\":{\"173\":1,\"383\":1,\"711\":4,\"748\":2}}],[\"string\",{\"1\":{\"6\":2,\"15\":1,\"33\":1,\"71\":3,\"80\":1,\"110\":1,\"111\":2,\"123\":4,\"125\":2,\"126\":1,\"138\":3,\"153\":3,\"179\":1,\"187\":2,\"203\":4,\"204\":2,\"241\":2,\"243\":2,\"264\":1,\"284\":1,\"285\":1,\"323\":1,\"342\":1,\"359\":1,\"365\":1,\"383\":5,\"384\":1,\"398\":9,\"399\":1,\"457\":1,\"461\":4,\"466\":1,\"485\":2,\"486\":2,\"487\":1,\"513\":1,\"517\":2,\"519\":7,\"521\":2,\"538\":2,\"553\":5,\"557\":7,\"568\":1,\"583\":2,\"584\":1,\"586\":4,\"590\":8,\"591\":2,\"612\":4,\"615\":1,\"619\":11,\"620\":5,\"622\":1,\"631\":1,\"662\":3,\"711\":2,\"726\":1,\"748\":11,\"754\":3,\"759\":2,\"783\":2,\"823\":1,\"833\":1,\"890\":3,\"912\":3}}],[\"stuff\",{\"1\":{\"412\":2,\"506\":1}}],[\"stubcode\",{\"1\":{\"753\":3}}],[\"stub\",{\"1\":{\"62\":4,\"63\":2,\"71\":8,\"83\":5,\"138\":12,\"189\":5,\"553\":2,\"767\":2}}],[\"studio\",{\"0\":{\"2\":1,\"105\":1,\"671\":1,\"680\":1},\"1\":{\"103\":1,\"593\":1,\"668\":1,\"671\":4,\"680\":3}}],[\"sthreadfactory\",{\"1\":{\"193\":1}}],[\"sthreadlocal\",{\"1\":{\"48\":2,\"50\":1}}],[\"sth\",{\"1\":{\"39\":2,\"117\":1,\"187\":1}}],[\"store\",{\"1\":{\"384\":1,\"604\":1,\"753\":15,\"754\":1}}],[\"stores\",{\"1\":{\"282\":1}}],[\"storenonpointer\",{\"1\":{\"248\":2}}],[\"storage\",{\"1\":{\"5\":2,\"6\":1,\"519\":1,\"753\":1}}],[\"stopping\",{\"1\":{\"761\":2}}],[\"stopped\",{\"1\":{\"753\":1}}],[\"stoptheworld\",{\"1\":{\"472\":1,\"473\":1}}],[\"stopimagerequests\",{\"1\":{\"398\":1}}],[\"stop\",{\"1\":{\"321\":1,\"322\":1,\"327\":1,\"615\":1,\"806\":1}}],[\"stopwatch\",{\"1\":{\"234\":1}}],[\"stopd\",{\"1\":{\"147\":2}}],[\"stopforeground\",{\"1\":{\"43\":1}}],[\"stopself\",{\"1\":{\"36\":1}}],[\"style>\",{\"1\":{\"167\":1}}],[\"styleable>\",{\"1\":{\"116\":1}}],[\"styleable\",{\"1\":{\"116\":3,\"117\":2,\"153\":2}}],[\"style\",{\"1\":{\"33\":1,\"146\":2,\"166\":2,\"167\":2,\"262\":1,\"264\":6,\"276\":1,\"295\":1}}],[\"stage\",{\"1\":{\"352\":1}}],[\"standard\",{\"0\":{\"340\":1},\"1\":{\"578\":1}}],[\"stable\",{\"1\":{\"292\":1}}],[\"stacks\",{\"1\":{\"847\":6}}],[\"stackzone\",{\"1\":{\"753\":2,\"759\":2}}],[\"stackoverflow\",{\"1\":{\"337\":1,\"458\":1,\"460\":1,\"514\":1,\"516\":1,\"522\":1}}],[\"stack\",{\"0\":{\"458\":1,\"459\":1,\"460\":1},\"1\":{\"231\":3,\"256\":1,\"264\":2,\"288\":1,\"296\":1,\"297\":1,\"334\":2,\"340\":1,\"341\":1,\"352\":1,\"455\":1,\"459\":3,\"460\":1,\"465\":2,\"614\":1,\"761\":1,\"767\":3,\"768\":1}}],[\"stacktrace\",{\"1\":{\"223\":1,\"231\":10,\"232\":3,\"297\":1,\"368\":2,\"376\":1}}],[\"star\",{\"1\":{\"111\":1,\"618\":1,\"627\":1}}],[\"startdestination定义了在这个导航图中首次启动展示的界面\",{\"1\":{\"783\":1}}],[\"startdestination=\",{\"1\":{\"783\":1}}],[\"start方法中创建了一个新的系统线程\",{\"1\":{\"761\":1}}],[\"start中使用\",{\"1\":{\"759\":1}}],[\"start=\",{\"1\":{\"752\":1}}],[\"startup\",{\"0\":{\"700\":1},\"1\":{\"699\":1,\"769\":1}}],[\"startloadingwitharguments执行刚刚上一步创建的请求\",{\"1\":{\"399\":1}}],[\"startloadingwitharguments\",{\"1\":{\"398\":2}}],[\"startloading\",{\"1\":{\"398\":2,\"399\":1}}],[\"startlistening\",{\"1\":{\"398\":2}}],[\"start执行动画\",{\"1\":{\"353\":1}}],[\"startherotransition方法中通过hero\",{\"1\":{\"353\":1}}],[\"startherotransition\",{\"0\":{\"351\":1},\"1\":{\"350\":2,\"351\":1}}],[\"startfunction\",{\"1\":{\"759\":1}}],[\"startflight\",{\"1\":{\"347\":3,\"352\":3}}],[\"startforeground\",{\"1\":{\"43\":2}}],[\"startrecording\",{\"1\":{\"334\":2}}],[\"started\",{\"1\":{\"247\":3,\"348\":1,\"761\":1}}],[\"startisolatescope\",{\"1\":{\"761\":2}}],[\"startisolate\",{\"1\":{\"748\":2,\"759\":1}}],[\"startimagerequests的情况\",{\"1\":{\"398\":1}}],[\"startimagerequests\",{\"1\":{\"398\":6}}],[\"starting\",{\"1\":{\"247\":1,\"352\":1,\"574\":1,\"748\":1,\"753\":1,\"759\":1}}],[\"startid\",{\"1\":{\"36\":1}}],[\"startcallback\",{\"1\":{\"247\":1,\"759\":1}}],[\"startmicrotaskloop触发的实际是通过\",{\"1\":{\"228\":1}}],[\"startmicrotaskloop方法在\",{\"1\":{\"228\":1}}],[\"startmicrotaskloop方法是实际上处理\",{\"1\":{\"226\":1}}],[\"startmicrotaskloop\",{\"0\":{\"226\":1},\"1\":{\"225\":1,\"226\":2,\"227\":1,\"228\":1,\"229\":1}}],[\"startactivity\",{\"1\":{\"176\":1,\"178\":1,\"179\":2,\"186\":1}}],[\"startpoint\",{\"1\":{\"144\":4,\"145\":7,\"146\":3}}],[\"starts\",{\"1\":{\"376\":1,\"748\":1,\"757\":1}}],[\"startsimulation\",{\"0\":{\"320\":1},\"1\":{\"319\":2,\"320\":2}}],[\"startscroll\",{\"1\":{\"75\":3}}],[\"startservice\",{\"1\":{\"35\":2,\"36\":1}}],[\"start后检测到已经超时或其他满足取消条件的情况\",{\"1\":{\"21\":1}}],[\"start后去开启任务\",{\"1\":{\"20\":1}}],[\"startthread\",{\"1\":{\"247\":1,\"759\":2,\"761\":2}}],[\"startt\",{\"1\":{\"20\":1}}],[\"starttime\",{\"1\":{\"19\":3,\"20\":1,\"241\":2,\"243\":1,\"631\":2}}],[\"start\",{\"0\":{\"449\":1},\"1\":{\"19\":2,\"20\":2,\"36\":6,\"90\":1,\"147\":1,\"241\":1,\"247\":18,\"264\":1,\"320\":2,\"350\":1,\"351\":3,\"352\":1,\"527\":2,\"631\":7,\"663\":1,\"719\":1,\"731\":3,\"753\":2,\"757\":1,\"759\":7,\"760\":2,\"761\":11,\"844\":1}}],[\"stats\",{\"1\":{\"485\":1}}],[\"statsync\",{\"1\":{\"383\":1}}],[\"statck\",{\"1\":{\"455\":1}}],[\"stat\",{\"1\":{\"247\":1}}],[\"states\",{\"1\":{\"418\":1}}],[\"stateerror\",{\"1\":{\"308\":1,\"383\":1}}],[\"statewidget\",{\"1\":{\"282\":1}}],[\"state<nestedscrollview>\",{\"1\":{\"405\":1}}],[\"state<powerexternalimage>\",{\"1\":{\"393\":1}}],[\"state<powertextureimage>\",{\"1\":{\"392\":1}}],[\"state<powerimage>\",{\"1\":{\"391\":1}}],[\"state<productmanager>\",{\"1\":{\"282\":1}}],[\"state<materialapp>\",{\"1\":{\"349\":1}}],[\"state<animatedwidget>\",{\"1\":{\"310\":1}}],[\"state<alwaysrebuildwidget>\",{\"1\":{\"273\":2}}],[\"state<t>\",{\"1\":{\"302\":1}}],[\"state<bodywidget>\",{\"1\":{\"276\":1}}],[\"state<sampleapppage>\",{\"1\":{\"284\":1}}],[\"state<statefulwidget>\",{\"1\":{\"276\":1,\"282\":1}}],[\"state<selectiverebuildwidget>\",{\"1\":{\"273\":2}}],[\"state<changestatebutton>\",{\"1\":{\"273\":2}}],[\"state<uistate>\",{\"1\":{\"125\":1}}],[\"state之类的持有\",{\"1\":{\"271\":1}}],[\"statefulelement\",{\"1\":{\"270\":2}}],[\"statefulwidget\",{\"0\":{\"280\":1,\"282\":1},\"1\":{\"270\":1,\"273\":3,\"274\":1,\"276\":1,\"278\":1,\"280\":1,\"282\":10,\"302\":2,\"309\":1,\"346\":2,\"366\":1,\"392\":1,\"393\":1,\"405\":2}}],[\"stateflow\",{\"1\":{\"124\":1}}],[\"stateless\",{\"1\":{\"370\":1}}],[\"statelesswidget和statefulwidget在创建之后就不会再变化\",{\"1\":{\"269\":1}}],[\"statelesswidget\",{\"0\":{\"280\":1,\"281\":1},\"1\":{\"264\":9,\"265\":2,\"273\":2,\"278\":1,\"279\":1,\"280\":1,\"281\":4,\"282\":8,\"295\":1,\"342\":1,\"423\":2,\"436\":2}}],[\"statelesselement\",{\"1\":{\"251\":1,\"259\":2,\"263\":3,\"264\":8,\"265\":1,\"270\":2}}],[\"stateignoreerror\",{\"1\":{\"232\":1}}],[\"stateincomplete\",{\"1\":{\"232\":1}}],[\"statependingcomplete\",{\"1\":{\"232\":2}}],[\"state\",{\"1\":{\"125\":10,\"126\":4,\"153\":7,\"186\":1,\"193\":2,\"232\":3,\"247\":1,\"248\":1,\"270\":1,\"273\":1,\"274\":1,\"278\":1,\"280\":1,\"281\":1,\"282\":7,\"285\":1,\"310\":2,\"319\":2,\"349\":1,\"358\":1,\"365\":1,\"370\":1,\"405\":2,\"416\":1,\"493\":1,\"584\":1,\"615\":1,\"749\":3,\"750\":7,\"751\":1,\"752\":4,\"753\":2,\"754\":5,\"756\":8,\"759\":17,\"761\":1,\"768\":1}}],[\"statements\",{\"1\":{\"60\":1,\"138\":1}}],[\"statusforkey或者imageprovider\",{\"1\":{\"375\":1}}],[\"status\",{\"1\":{\"101\":1,\"193\":3,\"316\":4,\"320\":1,\"321\":1,\"325\":1,\"327\":1,\"352\":3,\"761\":28}}],[\"static\",{\"0\":{\"452\":1},\"1\":{\"6\":1,\"39\":2,\"48\":1,\"49\":1,\"50\":1,\"54\":1,\"62\":2,\"63\":1,\"71\":5,\"87\":1,\"92\":4,\"101\":2,\"138\":7,\"159\":1,\"179\":1,\"193\":5,\"226\":1,\"227\":2,\"229\":1,\"231\":2,\"233\":1,\"234\":6,\"235\":8,\"236\":1,\"237\":4,\"238\":2,\"243\":10,\"244\":11,\"247\":7,\"253\":1,\"273\":1,\"284\":1,\"285\":1,\"346\":1,\"348\":1,\"349\":1,\"396\":2,\"398\":5,\"490\":1,\"495\":3,\"500\":1,\"513\":1,\"517\":4,\"521\":7,\"523\":1,\"528\":3,\"545\":2,\"546\":2,\"547\":1,\"548\":2,\"549\":3,\"553\":1,\"557\":5,\"569\":1,\"582\":1,\"584\":1,\"586\":11,\"587\":5,\"590\":1,\"594\":1,\"710\":2,\"745\":1,\"747\":4,\"748\":7,\"752\":1,\"753\":3,\"757\":2,\"768\":1,\"890\":1}}],[\"gh\",{\"1\":{\"794\":1}}],[\"garden\",{\"1\":{\"783\":8,\"784\":2}}],[\"gardenfragmentdirections\",{\"1\":{\"783\":1}}],[\"gardenfragment\",{\"1\":{\"782\":1,\"783\":1}}],[\"gardenactivity\",{\"1\":{\"782\":1}}],[\"gardenplantinglistviewmodel\",{\"1\":{\"785\":1}}],[\"gardenplantingrepository\",{\"1\":{\"781\":1}}],[\"gardenplantingdao\",{\"1\":{\"781\":1}}],[\"gardenplanting\",{\"1\":{\"781\":1}}],[\"garbage\",{\"1\":{\"763\":1}}],[\"gat\",{\"1\":{\"669\":1}}],[\"gzip\",{\"0\":{\"694\":1},\"1\":{\"694\":4,\"695\":1}}],[\"gz先打包后压缩的格式\",{\"1\":{\"693\":1}}],[\"gz\",{\"1\":{\"693\":1,\"694\":3,\"695\":1}}],[\"g群组\",{\"1\":{\"689\":1}}],[\"gdafemhz\",{\"1\":{\"665\":1}}],[\"gdefault\",{\"1\":{\"179\":5}}],[\"gf\",{\"1\":{\"612\":1}}],[\"gmt\",{\"1\":{\"578\":1}}],[\"gmail\",{\"1\":{\"62\":1,\"63\":1,\"196\":1,\"586\":1,\"794\":1}}],[\"guy的计算\",{\"1\":{\"523\":1}}],[\"guy在speakerdeck中的说法\",{\"1\":{\"516\":1}}],[\"guarded\",{\"1\":{\"247\":1}}],[\"guide\",{\"1\":{\"83\":1,\"128\":1,\"139\":1}}],[\"glidemultiframeimage\",{\"1\":{\"399\":1}}],[\"glideexception\",{\"1\":{\"399\":1}}],[\"glide\",{\"1\":{\"399\":2}}],[\"globalscope\",{\"1\":{\"640\":1}}],[\"globalrendertype\",{\"1\":{\"398\":2}}],[\"globalkey\",{\"1\":{\"256\":1}}],[\"globalobjectkey\",{\"1\":{\"255\":2,\"256\":1}}],[\"global\",{\"1\":{\"193\":1,\"229\":1,\"670\":2,\"740\":1}}],[\"glue\",{\"1\":{\"126\":1,\"253\":1,\"254\":1}}],[\"gpu\",{\"1\":{\"131\":1,\"334\":1}}],[\"gone\",{\"1\":{\"784\":1}}],[\"goneunless=\",{\"1\":{\"784\":1}}],[\"goneunless的解析\",{\"1\":{\"784\":1}}],[\"goneunless\",{\"1\":{\"784\":2}}],[\"goto\",{\"1\":{\"752\":5}}],[\"goballistic\",{\"1\":{\"417\":2}}],[\"goidle\",{\"1\":{\"417\":1}}],[\"going\",{\"1\":{\"350\":1,\"412\":4,\"629\":1}}],[\"good\",{\"1\":{\"226\":1,\"351\":1,\"417\":1}}],[\"google3\",{\"1\":{\"757\":1}}],[\"google\",{\"1\":{\"7\":1,\"83\":1,\"128\":1,\"139\":1,\"199\":1,\"209\":4,\"219\":1,\"278\":1,\"290\":1,\"523\":1,\"524\":1,\"594\":1,\"780\":1,\"781\":3,\"783\":1,\"784\":1}}],[\"go\",{\"1\":{\"92\":1,\"350\":1,\"418\":1,\"728\":4}}],[\"gc\",{\"0\":{\"90\":1,\"469\":1},\"1\":{\"86\":3,\"87\":1,\"90\":2,\"457\":3,\"469\":1,\"471\":1,\"472\":2,\"478\":1,\"479\":2,\"480\":1,\"481\":1,\"523\":1,\"528\":3,\"753\":2,\"762\":1,\"763\":2}}],[\"gecko\",{\"1\":{\"731\":1}}],[\"geometry\",{\"1\":{\"405\":2}}],[\"generic\",{\"1\":{\"753\":4}}],[\"general\",{\"1\":{\"578\":1}}],[\"generator\",{\"1\":{\"810\":1}}],[\"generaterequest\",{\"1\":{\"711\":1,\"712\":1}}],[\"generatekey\",{\"1\":{\"557\":1}}],[\"generate\",{\"0\":{\"452\":1},\"1\":{\"403\":1,\"434\":1,\"452\":1,\"794\":2,\"813\":1}}],[\"generated\",{\"1\":{\"70\":1,\"71\":1,\"189\":5,\"553\":2,\"767\":1}}],[\"generating\",{\"1\":{\"71\":1,\"138\":1,\"452\":1}}],[\"gen\",{\"1\":{\"455\":2}}],[\"gensucret\",{\"1\":{\"399\":2}}],[\"genfailret\",{\"1\":{\"399\":2}}],[\"gesturerecognizers\",{\"1\":{\"415\":6}}],[\"gesturerecognizerfactory>\",{\"1\":{\"415\":3}}],[\"gestures\",{\"1\":{\"415\":1}}],[\"gesture\",{\"1\":{\"350\":1,\"352\":1}}],[\"gesturedetector\",{\"1\":{\"289\":1,\"342\":1}}],[\"gesturebinding\",{\"1\":{\"253\":2,\"254\":1}}],[\"getokhttprequest\",{\"1\":{\"712\":2}}],[\"getobjectsize\",{\"1\":{\"517\":1}}],[\"getvalue\",{\"1\":{\"619\":2}}],[\"getviewadapterposition\",{\"1\":{\"153\":1}}],[\"getviewmodel<reposviewmodel>\",{\"1\":{\"125\":1}}],[\"getexternalstoragedirectory\",{\"1\":{\"821\":1}}],[\"getexternalfilesdir\",{\"1\":{\"6\":1}}],[\"geterror\",{\"1\":{\"752\":1}}],[\"getencoded\",{\"1\":{\"557\":1}}],[\"getfield\",{\"1\":{\"584\":1,\"819\":1}}],[\"getfirstdayofweek\",{\"1\":{\"574\":1,\"575\":2}}],[\"getfindclasses\",{\"1\":{\"485\":1}}],[\"getfindclasstime\",{\"1\":{\"485\":1}}],[\"getflutterview\",{\"1\":{\"284\":1}}],[\"getlength\",{\"1\":{\"583\":1}}],[\"getlistener\",{\"1\":{\"368\":2}}],[\"getlayoutparams\",{\"1\":{\"153\":1}}],[\"gettextureregistry\",{\"1\":{\"398\":1}}],[\"gettextbounds\",{\"1\":{\"153\":1}}],[\"gettemporarydirectory\",{\"1\":{\"383\":1}}],[\"gettid\",{\"1\":{\"247\":1}}],[\"getting\",{\"1\":{\"247\":1,\"384\":1}}],[\"getzone\",{\"1\":{\"247\":1}}],[\"getnextframe\",{\"1\":{\"374\":1}}],[\"getnextid\",{\"1\":{\"243\":1,\"244\":1}}],[\"getnativeargument\",{\"1\":{\"237\":3}}],[\"getname\",{\"1\":{\"179\":1,\"527\":2}}],[\"gethandler\",{\"1\":{\"193\":1}}],[\"getheight\",{\"1\":{\"153\":1}}],[\"getminimaldaysinfirstweek\",{\"1\":{\"574\":1,\"575\":2}}],[\"getminimumheight\",{\"1\":{\"159\":1}}],[\"getminimumwidth\",{\"1\":{\"159\":1}}],[\"getmethod\",{\"1\":{\"569\":2,\"823\":1}}],[\"getmetrics\",{\"1\":{\"417\":2}}],[\"getmap\",{\"1\":{\"527\":3}}],[\"getmaxstacksize\",{\"1\":{\"247\":1}}],[\"getmainhandler\",{\"1\":{\"193\":3}}],[\"getmainlooper\",{\"1\":{\"193\":3}}],[\"getmode\",{\"1\":{\"159\":1,\"163\":1}}],[\"getmoviedetails\",{\"1\":{\"126\":4}}],[\"getdrawable\",{\"1\":{\"819\":1,\"823\":1}}],[\"getdrawingcache\",{\"1\":{\"185\":1}}],[\"getdecorview\",{\"1\":{\"185\":1}}],[\"getdeclaredxxx\",{\"1\":{\"554\":1}}],[\"getdeclaredmethod\",{\"1\":{\"179\":1,\"486\":1,\"487\":1,\"553\":1}}],[\"getdeclaredfields\",{\"1\":{\"569\":1}}],[\"getdeclaredfield\",{\"1\":{\"179\":5,\"553\":1,\"823\":1}}],[\"getdefaultsize\",{\"1\":{\"159\":3}}],[\"getdir\",{\"1\":{\"822\":3}}],[\"getdirection\",{\"1\":{\"423\":1,\"424\":1,\"436\":1}}],[\"getdimension\",{\"1\":{\"116\":1,\"117\":1}}],[\"getdimensionpixelsize\",{\"1\":{\"101\":1}}],[\"getdisplaymetrics\",{\"1\":{\"100\":1}}],[\"getwidth\",{\"1\":{\"153\":1}}],[\"getwindow\",{\"1\":{\"24\":1,\"25\":2,\"185\":1}}],[\"getrequest\",{\"1\":{\"711\":1}}],[\"getrealsize\",{\"1\":{\"196\":1}}],[\"getrepos\",{\"1\":{\"125\":1,\"622\":1}}],[\"getresources\",{\"1\":{\"100\":1}}],[\"getuninstallapkresource\",{\"1\":{\"823\":2}}],[\"getuser\",{\"1\":{\"125\":1}}],[\"geturiforfile\",{\"1\":{\"6\":2}}],[\"getcurrentmonotonicmicros\",{\"1\":{\"761\":1}}],[\"getcurrentisolate\",{\"1\":{\"747\":3}}],[\"getcurrentthreadjoinid\",{\"1\":{\"247\":1}}],[\"getcall\",{\"1\":{\"712\":1}}],[\"getcallinguid\",{\"1\":{\"83\":1}}],[\"getclassloadinglock\",{\"1\":{\"485\":1}}],[\"getclass\",{\"1\":{\"179\":1,\"569\":1,\"583\":4}}],[\"getcode\",{\"1\":{\"737\":1}}],[\"getcounter\",{\"1\":{\"645\":2}}],[\"getcomponent\",{\"1\":{\"179\":1}}],[\"getcontextclassloader\",{\"1\":{\"179\":1}}],[\"getcontentresolver\",{\"1\":{\"6\":2}}],[\"getcolor\",{\"1\":{\"153\":1}}],[\"getcolumnindex\",{\"1\":{\"6\":1}}],[\"getisolatestream\",{\"1\":{\"753\":1}}],[\"getisolatescheduleimmediateclosure方法创建了schedule\",{\"1\":{\"228\":1}}],[\"getisolatescheduleimmediateclosure\",{\"1\":{\"228\":2}}],[\"geti\",{\"1\":{\"513\":6}}],[\"getitemoffsets\",{\"1\":{\"153\":2}}],[\"getid\",{\"1\":{\"117\":1,\"712\":2}}],[\"getidentifier\",{\"1\":{\"101\":1}}],[\"getimessenger\",{\"1\":{\"83\":2}}],[\"getinstalledpackages\",{\"1\":{\"817\":1}}],[\"getinstance\",{\"1\":{\"19\":1,\"398\":12,\"399\":3,\"545\":1,\"546\":1,\"547\":1,\"548\":1,\"549\":1,\"557\":3,\"576\":2,\"712\":1}}],[\"getinnerconstraints\",{\"1\":{\"439\":2}}],[\"getintegervalue\",{\"1\":{\"237\":1}}],[\"getinterfacedescriptor\",{\"1\":{\"71\":1,\"138\":1}}],[\"getint\",{\"1\":{\"173\":3,\"819\":1,\"823\":1}}],[\"get\",{\"0\":{\"88\":1,\"94\":1},\"1\":{\"48\":1,\"50\":1,\"64\":1,\"74\":1,\"88\":3,\"94\":2,\"105\":2,\"138\":1,\"153\":2,\"179\":4,\"196\":2,\"228\":1,\"232\":3,\"237\":2,\"238\":1,\"285\":1,\"302\":2,\"310\":1,\"316\":2,\"317\":1,\"332\":1,\"333\":1,\"334\":1,\"348\":1,\"357\":1,\"360\":1,\"369\":1,\"376\":1,\"384\":3,\"398\":7,\"405\":2,\"439\":3,\"440\":1,\"448\":1,\"497\":1,\"523\":1,\"525\":1,\"527\":5,\"528\":1,\"584\":1,\"617\":1,\"619\":2,\"625\":1,\"708\":1,\"731\":3,\"737\":2,\"745\":2,\"747\":2,\"761\":1,\"785\":1,\"817\":1,\"821\":1}}],[\"getbuildnongenericmethodextractorstub\",{\"1\":{\"753\":1}}],[\"getbuildgenericmethodextractorstub\",{\"1\":{\"753\":1}}],[\"getbuilder\",{\"1\":{\"711\":1}}],[\"getbooklist\",{\"1\":{\"616\":1}}],[\"getbytes\",{\"1\":{\"557\":2}}],[\"getbinarymessenger\",{\"1\":{\"398\":2}}],[\"getbinder\",{\"1\":{\"39\":1}}],[\"getbackground\",{\"1\":{\"167\":1}}],[\"getbroadcastitem\",{\"1\":{\"63\":1}}],[\"getbroadcast\",{\"1\":{\"15\":1,\"183\":1}}],[\"getavailablenode\",{\"1\":{\"847\":1,\"848\":1}}],[\"getavailablepointtags\",{\"1\":{\"138\":1}}],[\"getannotation\",{\"1\":{\"569\":1}}],[\"getage\",{\"1\":{\"553\":2}}],[\"getallstringtags\",{\"1\":{\"138\":5}}],[\"getall\",{\"1\":{\"125\":3}}],[\"getapplicationlabel\",{\"1\":{\"817\":1}}],[\"getapplicationcontext\",{\"1\":{\"398\":1}}],[\"getapplicationinfo\",{\"1\":{\"105\":1}}],[\"getapplication\",{\"1\":{\"30\":1}}],[\"getactivenetworkinfo\",{\"1\":{\"186\":2}}],[\"getactivities\",{\"1\":{\"183\":1}}],[\"getactivity\",{\"1\":{\"6\":1,\"183\":1,\"189\":1}}],[\"getaction\",{\"1\":{\"25\":2,\"26\":1}}],[\"gety\",{\"1\":{\"26\":1}}],[\"getxxx\",{\"1\":{\"554\":1}}],[\"getx\",{\"1\":{\"26\":1}}],[\"getkeycode\",{\"1\":{\"25\":1}}],[\"getshellsorth\",{\"1\":{\"921\":1}}],[\"getsharedtext\",{\"1\":{\"284\":4}}],[\"getsharedpreferences\",{\"1\":{\"173\":1}}],[\"getsuccessornode\",{\"1\":{\"850\":2}}],[\"getsuggestedminimumxxx\",{\"1\":{\"159\":1}}],[\"getsuggestedminimumheight\",{\"1\":{\"159\":2}}],[\"getsuggestedminimumwidth\",{\"1\":{\"159\":3}}],[\"getscrollphysics\",{\"1\":{\"405\":1}}],[\"getscreenrealheight\",{\"1\":{\"196\":1}}],[\"getscreenrealheightpx\",{\"1\":{\"196\":3}}],[\"getsocketidnativefield\",{\"1\":{\"237\":1}}],[\"gets\",{\"1\":{\"235\":1,\"753\":1}}],[\"getsize\",{\"1\":{\"159\":1,\"163\":1,\"196\":1}}],[\"getsegment\",{\"1\":{\"147\":1}}],[\"getserviceport\",{\"1\":{\"246\":2}}],[\"getservicewithargs\",{\"1\":{\"203\":1,\"204\":1,\"205\":1}}],[\"getserviceinfo\",{\"1\":{\"105\":1}}],[\"getservice\",{\"1\":{\"38\":2,\"138\":4,\"183\":1,\"203\":2,\"205\":1}}],[\"getsystemclassloader\",{\"1\":{\"819\":1,\"822\":1}}],[\"getsystemresource\",{\"1\":{\"612\":1}}],[\"getsystem\",{\"1\":{\"101\":2,\"196\":9}}],[\"getsystemservice\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"186\":1,\"196\":1}}],[\"getstatusbarheight\",{\"1\":{\"101\":3}}],[\"getsth\",{\"1\":{\"70\":1,\"71\":8}}],[\"getstring\",{\"1\":{\"6\":1,\"20\":1,\"105\":1}}],[\"getproperty\",{\"1\":{\"486\":1}}],[\"getportandcapabilitiesofcurrentisolate\",{\"1\":{\"747\":6}}],[\"getport\",{\"1\":{\"243\":1,\"244\":2,\"247\":1}}],[\"getpostmessage\",{\"1\":{\"54\":2}}],[\"getparentdelegationtime\",{\"1\":{\"485\":1}}],[\"getparcelableextra\",{\"1\":{\"179\":1}}],[\"getpackagearchiveinfo\",{\"1\":{\"821\":1}}],[\"getpackagename\",{\"1\":{\"189\":1}}],[\"getpackagemanager\",{\"1\":{\"6\":1}}],[\"getpaddingbottom\",{\"1\":{\"153\":1}}],[\"getpaddingtop\",{\"1\":{\"153\":1}}],[\"getpeoplelist\",{\"1\":{\"62\":3,\"63\":1,\"64\":1}}],[\"getpendingintent\",{\"1\":{\"15\":1,\"16\":1,\"19\":1,\"20\":1}}],[\"g\",{\"1\":{\"33\":1,\"241\":1,\"302\":1,\"412\":1,\"578\":1,\"665\":1,\"745\":1,\"753\":1,\"763\":1,\"805\":2,\"849\":1}}],[\"gizp\",{\"1\":{\"694\":1}}],[\"gid\",{\"1\":{\"691\":2}}],[\"giving\",{\"1\":{\"231\":1}}],[\"given\",{\"1\":{\"193\":1,\"226\":1,\"237\":1,\"247\":1,\"302\":2,\"323\":1,\"357\":1,\"587\":1,\"591\":1,\"748\":1,\"763\":1}}],[\"give\",{\"1\":{\"25\":1,\"231\":1,\"395\":1,\"560\":1}}],[\"gist\",{\"1\":{\"221\":1}}],[\"gifdrawable\",{\"1\":{\"399\":2}}],[\"gif\",{\"1\":{\"155\":1,\"365\":2}}],[\"git\",{\"0\":{\"669\":1,\"670\":1,\"672\":1,\"799\":1,\"800\":1},\"1\":{\"668\":1,\"669\":1,\"670\":3,\"672\":8,\"673\":5,\"674\":7,\"675\":2,\"718\":3,\"794\":7,\"799\":1,\"800\":3,\"802\":2,\"803\":2,\"812\":3,\"813\":1}}],[\"gityuanurls\",{\"1\":{\"731\":3}}],[\"gityuan\",{\"0\":{\"729\":1,\"734\":1},\"1\":{\"137\":1,\"140\":2,\"498\":1,\"571\":1,\"730\":2,\"731\":9,\"732\":2,\"735\":1,\"736\":1,\"737\":2}}],[\"github项目\",{\"1\":{\"793\":1}}],[\"githubbrowsersample\",{\"1\":{\"219\":1}}],[\"githubrepository\",{\"1\":{\"125\":2}}],[\"github\",{\"0\":{\"670\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1,\"715\":1,\"790\":1,\"810\":1},\"1\":{\"0\":1,\"77\":1,\"111\":1,\"120\":2,\"121\":1,\"125\":1,\"128\":1,\"141\":1,\"142\":1,\"154\":1,\"168\":1,\"174\":1,\"180\":1,\"206\":1,\"221\":1,\"243\":2,\"247\":1,\"342\":1,\"351\":1,\"401\":2,\"448\":1,\"517\":1,\"558\":1,\"586\":1,\"612\":1,\"668\":2,\"670\":6,\"671\":3,\"672\":4,\"673\":2,\"674\":2,\"675\":2,\"716\":1,\"718\":4,\"721\":1,\"733\":1,\"735\":1,\"740\":1,\"791\":9,\"793\":2,\"794\":10,\"795\":1,\"798\":5,\"799\":1,\"800\":3,\"810\":5,\"811\":2,\"812\":4,\"813\":10,\"931\":1}}],[\"grids\",{\"1\":{\"422\":1}}],[\"gridview\",{\"1\":{\"402\":1,\"422\":1,\"431\":1,\"433\":1,\"442\":1,\"446\":1}}],[\"grep\",{\"0\":{\"702\":1},\"1\":{\"697\":2,\"702\":1}}],[\"gregoriancalenda\",{\"1\":{\"579\":1}}],[\"gregoriancalendar\",{\"1\":{\"573\":1}}],[\"grey\",{\"1\":{\"276\":1}}],[\"green\",{\"1\":{\"146\":1,\"295\":1,\"444\":1}}],[\"grow\",{\"1\":{\"445\":1}}],[\"growableobjectarray\",{\"1\":{\"753\":2}}],[\"growable\",{\"1\":{\"396\":1}}],[\"growingarrayutils\",{\"1\":{\"87\":2,\"96\":1}}],[\"growing\",{\"1\":{\"87\":1}}],[\"group创建了新的\",{\"1\":{\"753\":1}}],[\"group=nullptr\",{\"1\":{\"754\":1}}],[\"group=\",{\"1\":{\"751\":1,\"754\":1,\"758\":1}}],[\"groupmod\",{\"1\":{\"691\":1}}],[\"groupadd\",{\"1\":{\"691\":1}}],[\"group群组管理也类似\",{\"1\":{\"691\":1}}],[\"group<t\",{\"1\":{\"618\":1}}],[\"group<\",{\"1\":{\"618\":2}}],[\"group<out\",{\"1\":{\"618\":2}}],[\"group<in\",{\"1\":{\"618\":2}}],[\"groupby\",{\"1\":{\"612\":1}}],[\"group\",{\"1\":{\"26\":2,\"117\":2,\"560\":3,\"618\":6,\"745\":1,\"750\":3,\"751\":8,\"752\":10,\"753\":24,\"756\":7,\"757\":13,\"758\":11,\"759\":2}}],[\"groups\",{\"1\":{\"2\":1,\"691\":1}}],[\"graphs\",{\"1\":{\"783\":2}}],[\"graph\",{\"1\":{\"767\":1,\"769\":1}}],[\"graphicnode<t>\",{\"1\":{\"850\":1}}],[\"graphical\",{\"1\":{\"334\":1}}],[\"graphics\",{\"1\":{\"196\":1}}],[\"gracefully\",{\"1\":{\"231\":1}}],[\"gravity=\",{\"1\":{\"167\":1}}],[\"gravity\",{\"1\":{\"138\":1}}],[\"gradle\",{\"1\":{\"30\":2,\"57\":1,\"103\":1,\"104\":3,\"105\":1}}],[\"grantresults\",{\"1\":{\"173\":2}}],[\"granted\",{\"1\":{\"173\":2}}],[\"granturipermission\",{\"1\":{\"6\":1}}],[\"granturipermissions=\",{\"1\":{\"6\":1}}],[\"grant\",{\"1\":{\"6\":4}}],[\"在划分好的两个数组中\",{\"1\":{\"927\":1}}],[\"在数组首\",{\"1\":{\"926\":1,\"927\":1}}],[\"在数据左右两端各有一个指针指向当前元素\",{\"1\":{\"924\":1}}],[\"在数据存储结构中最快\",{\"1\":{\"869\":1}}],[\"在数据从发送方向接收方拷贝时\",{\"1\":{\"138\":1}}],[\"在所有排序中可以优先使用\",{\"1\":{\"918\":1}}],[\"在所指定的空间内居中\",{\"1\":{\"33\":1}}],[\"在满足一定条件后可以退出递归\",{\"1\":{\"911\":1}}],[\"在节点中保存一个标志位\",{\"1\":{\"905\":1}}],[\"在插入\",{\"1\":{\"857\":1}}],[\"在序列中排在\",{\"1\":{\"850\":1}}],[\"在装填因子小于\",{\"1\":{\"828\":1}}],[\"在小型哈希表中\",{\"1\":{\"828\":1}}],[\"在填充质数很大时就会很耗时\",{\"1\":{\"827\":1}}],[\"在确定容量\",{\"1\":{\"826\":1}}],[\"在当前应用中加载已安装的其他应用资源\",{\"1\":{\"816\":1}}],[\"在当天下午\",{\"1\":{\"12\":1}}],[\"在blog\",{\"1\":{\"813\":1}}],[\"在安装完\",{\"1\":{\"802\":1}}],[\"在安装的时候需要从网上下载资料\",{\"1\":{\"800\":1}}],[\"在页面activity\",{\"1\":{\"785\":1}}],[\"在中指定这些databinding与之间以及viewmodel与数据库之间的逻辑关系\",{\"1\":{\"781\":1}}],[\"在优化完成后\",{\"1\":{\"768\":1}}],[\"在发生调用时通过\",{\"1\":{\"767\":1}}],[\"在发送消息是需要将接收服务端回复的\",{\"1\":{\"39\":1}}],[\"在自己单独的线程运行\",{\"1\":{\"762\":1}}],[\"在获取到\",{\"1\":{\"759\":1}}],[\"在同一个\",{\"1\":{\"742\":1}}],[\"在同一个类加载器中\",{\"1\":{\"497\":1}}],[\"在craw\",{\"1\":{\"737\":1}}],[\"在具体的实现中\",{\"1\":{\"713\":1}}],[\"在具体分析整个过程之前\",{\"1\":{\"235\":1}}],[\"在本文中\",{\"1\":{\"713\":1}}],[\"在本例中是\",{\"1\":{\"265\":1}}],[\"在本例中\",{\"1\":{\"261\":1,\"265\":1,\"781\":1}}],[\"在子类中使用\",{\"1\":{\"711\":1}}],[\"在okhttprequest中\",{\"1\":{\"711\":1}}],[\"在okhttputils中使用的是okhttprequestbuilder\",{\"1\":{\"711\":1}}],[\"在oncreate\",{\"1\":{\"214\":1}}],[\"在onmeasure\",{\"1\":{\"159\":1,\"163\":1}}],[\"在开机\",{\"1\":{\"699\":1}}],[\"在压缩\",{\"1\":{\"695\":1}}],[\"在压缩文件夹时\",{\"1\":{\"695\":1}}],[\"在遍历的时候\",{\"1\":{\"665\":1}}],[\"在新系统线程开启\",{\"1\":{\"759\":1}}],[\"在新流发出的时候\",{\"1\":{\"655\":1}}],[\"在新的系统线程运行\",{\"1\":{\"759\":1}}],[\"在新的协程中生产并返回了一个receivechannel<t>对象\",{\"1\":{\"636\":1}}],[\"在新的图层按照xfermode规则绘制\",{\"1\":{\"131\":1}}],[\"在新的图层绘制\",{\"1\":{\"131\":1}}],[\"在初始化的时初始化\",{\"1\":{\"662\":1}}],[\"在初始值initial的基础上求和\",{\"1\":{\"652\":1}}],[\"在初次创建服务时调用\",{\"1\":{\"36\":1}}],[\"在被分配到内存后可以立即成为\",{\"1\":{\"769\":1}}],[\"在被调用时会尽快返回且不等待\",{\"1\":{\"651\":1}}],[\"在被选中的字后面画一个圆\",{\"1\":{\"153\":1}}],[\"在高负载下比锁更有效\",{\"1\":{\"645\":1}}],[\"在协程的整个层次结构之间传播\",{\"1\":{\"641\":1}}],[\"在流构建器中改变消耗\",{\"1\":{\"629\":1,\"654\":1}}],[\"在流触及相应限制的时候会将它的执行取消\",{\"1\":{\"629\":1}}],[\"在流转换操作符中\",{\"1\":{\"629\":1}}],[\"在无竞争的情况下消除同步\",{\"1\":{\"609\":1}}],[\"在升级为互斥锁\",{\"1\":{\"609\":1}}],[\"在冲突发生的时候不断尝试执行所需操作\",{\"1\":{\"607\":1}}],[\"在操作时进行\",{\"1\":{\"607\":1}}],[\"在构造函数中生成内部类\",{\"1\":{\"604\":1}}],[\"在构造方法等地方设置监听事件\",{\"1\":{\"117\":1}}],[\"在保存同一个对象时要注意使用不同的objectoutputstream对象\",{\"1\":{\"587\":1}}],[\"在线操作红黑树\",{\"1\":{\"907\":1}}],[\"在线显示本周是一年第几周的网站\",{\"1\":{\"579\":1}}],[\"在线程复杂的情况下很容易出现问题\",{\"1\":{\"547\":1}}],[\"在线程中执行\",{\"1\":{\"247\":1}}],[\"在国内可以简单理解为一年\",{\"1\":{\"577\":1}}],[\"在2019\",{\"1\":{\"572\":1}}],[\"在类的定义\",{\"1\":{\"612\":1}}],[\"在类中通过\",{\"1\":{\"570\":1}}],[\"在类中创建一个实现了\",{\"1\":{\"38\":1}}],[\"在类路径\",{\"1\":{\"566\":1}}],[\"在查找该注解时\",{\"1\":{\"565\":1}}],[\"在查看\",{\"1\":{\"365\":1}}],[\"在考虑多线程时\",{\"1\":{\"545\":1}}],[\"在编码中常常会用到单例\",{\"1\":{\"544\":1}}],[\"在编译的时候由于\",{\"1\":{\"538\":1}}],[\"在编译期最多可以有\",{\"1\":{\"519\":1}}],[\"在编译期完成内存分配\",{\"1\":{\"459\":1}}],[\"在编译之后\",{\"1\":{\"513\":1}}],[\"在接下来一轮的排序中\",{\"1\":{\"532\":1}}],[\"在接受函数或事件时更新数据\",{\"1\":{\"126\":1}}],[\"在threadpool\",{\"1\":{\"761\":2}}],[\"在threadlocal\",{\"1\":{\"528\":1}}],[\"在thread有一个threadlocals\",{\"1\":{\"525\":1}}],[\"在table中保存数据时根据key的hashcode计算到一个随机保存位置\",{\"1\":{\"499\":1}}],[\"在容纳数百个项目时性能会比\",{\"1\":{\"523\":1}}],[\"在添加和删除\",{\"1\":{\"523\":1}}],[\"在运行时有效\",{\"1\":{\"565\":1}}],[\"在运行时根据具体对象的类型进行绑定\",{\"1\":{\"490\":1}}],[\"在运行的时候\",{\"1\":{\"538\":1}}],[\"在运行期\",{\"1\":{\"519\":1}}],[\"在运行期有没有限制呢\",{\"1\":{\"519\":1}}],[\"在虚拟机中的状态\",{\"1\":{\"516\":1}}],[\"在第一节我们可以看到\",{\"1\":{\"506\":1}}],[\"在第一次申请该权限时会返回\",{\"1\":{\"172\":1}}],[\"在length为\",{\"1\":{\"504\":1}}],[\"在移除数据时\",{\"1\":{\"501\":1}}],[\"在堆中生成一个代表该类的\",{\"1\":{\"492\":1}}],[\"在程序执行前方法已经被绑定\",{\"1\":{\"490\":1}}],[\"在实际中有可能从其中间某一步开始\",{\"1\":{\"490\":1}}],[\"在实际开发中\",{\"1\":{\"205\":1}}],[\"在加载类时\",{\"1\":{\"485\":1}}],[\"在一些场景下\",{\"1\":{\"445\":1}}],[\"在一个简单的应用程序中\",{\"1\":{\"122\":1}}],[\"在父级约束内就直接应用\",{\"1\":{\"439\":1}}],[\"在父级约束范围内尽可能满足\",{\"1\":{\"439\":1}}],[\"在修改了以上文件后\",{\"1\":{\"700\":1}}],[\"在修改\",{\"1\":{\"438\":2}}],[\"在用户创建新的文件时\",{\"1\":{\"691\":1}}],[\"在用户滑动屏幕时\",{\"1\":{\"418\":1}}],[\"在用户看起来好像是当前页面的\",{\"1\":{\"338\":1}}],[\"在默认的\",{\"1\":{\"415\":1}}],[\"在范围内\",{\"1\":{\"412\":1}}],[\"在分析\",{\"1\":{\"404\":1,\"439\":1}}],[\"在分辨率为\",{\"1\":{\"100\":1}}],[\"在模拟器上显示图片\",{\"1\":{\"400\":1}}],[\"在他们的onloadresult\",{\"1\":{\"398\":1}}],[\"在他们对应的\",{\"1\":{\"349\":1}}],[\"在从网络加载图片这部分内容来看\",{\"1\":{\"382\":1}}],[\"在从\",{\"1\":{\"372\":1}}],[\"在从定往下数第三层也就是\",{\"1\":{\"264\":1}}],[\"在二者的过渡阶段\",{\"1\":{\"343\":1}}],[\"在powerimagebaserequest\",{\"1\":{\"398\":1}}],[\"在picturerecorder\",{\"1\":{\"334\":1}}],[\"在performrebuild\",{\"1\":{\"271\":1}}],[\"在isolate\",{\"1\":{\"753\":1}}],[\"在image中\",{\"1\":{\"372\":1}}],[\"在implicitlyanimatedwidgetstate\",{\"1\":{\"303\":1}}],[\"在ioservicecallback方法中\",{\"1\":{\"247\":1}}],[\"在要写动画的时候\",{\"1\":{\"300\":1,\"314\":1}}],[\"在findclass\",{\"1\":{\"486\":1}}],[\"在flutter\",{\"1\":{\"296\":1}}],[\"在fragment中我们也可以这样处理\",{\"1\":{\"217\":1}}],[\"在导致widget\",{\"1\":{\"292\":1}}],[\"在进行网络请求\",{\"1\":{\"285\":1}}],[\"在res\",{\"1\":{\"783\":1}}],[\"在readobject中只能获取到该类型的默认值\",{\"1\":{\"584\":1}}],[\"在release模式下则会调用fluttererror\",{\"1\":{\"296\":1}}],[\"在renderobjecttowidgetelement的mount方法执行时\",{\"1\":{\"256\":1}}],[\"在runapp方法中\",{\"1\":{\"266\":1}}],[\"在前面的\",{\"1\":{\"265\":1}}],[\"在前台运行\",{\"1\":{\"10\":1}}],[\"在sunflower中navigation是怎么控制界面切换的呢\",{\"1\":{\"783\":1}}],[\"在spawnisolatetask\",{\"1\":{\"755\":1}}],[\"在schedulewarmupframe方法中安排在下一次屏幕刷新的时候将我们的内容展示在屏幕上面\",{\"1\":{\"266\":1}}],[\"在scheduleattachrootwidget方法中\",{\"1\":{\"266\":1}}],[\"在singlechildrenderobjectwidget\",{\"1\":{\"261\":1}}],[\"在sdk\",{\"1\":{\"243\":1}}],[\"在element\",{\"1\":{\"259\":1}}],[\"在ensureinitialized方法中创建了\",{\"1\":{\"266\":1}}],[\"在ensureinitialized方法中\",{\"1\":{\"253\":1}}],[\"在updatechild中\",{\"1\":{\"259\":1}}],[\"在ui\",{\"1\":{\"126\":1,\"191\":1}}],[\"在widgetsbinding\",{\"1\":{\"254\":1,\"256\":1}}],[\"在之前学习\",{\"1\":{\"775\":1}}],[\"在之前的文章中\",{\"1\":{\"300\":1}}],[\"在之前的代码分析中\",{\"1\":{\"244\":1}}],[\"在之前调用本方法的环境\",{\"1\":{\"247\":1}}],[\"在于dart层的\",{\"1\":{\"244\":1}}],[\"在方法区对类变量分配内存\",{\"1\":{\"495\":1}}],[\"在方法执行的时候\",{\"1\":{\"239\":1}}],[\"在方法数大于\",{\"1\":{\"30\":1}}],[\"在执行删除操作时真正删除该点\",{\"1\":{\"905\":1}}],[\"在执行hashmap\",{\"1\":{\"500\":1}}],[\"在执行完耗时操作后\",{\"1\":{\"285\":1}}],[\"在执行完毕或者遇到错误时\",{\"1\":{\"238\":1}}],[\"在执行\",{\"1\":{\"252\":1}}],[\"在执行耗时任务时可能导致内存泄露\",{\"1\":{\"123\":1}}],[\"在创建了新的系统线程后\",{\"1\":{\"247\":1}}],[\"在创建根据需要创建好\",{\"1\":{\"234\":1}}],[\"在创建\",{\"1\":{\"234\":1,\"740\":1}}],[\"在创建时分配一个\",{\"1\":{\"137\":1}}],[\"在后文处理结果的时候\",{\"1\":{\"232\":1}}],[\"在后台更新进度\",{\"1\":{\"193\":1}}],[\"在后台可靠的通过multidex\",{\"1\":{\"30\":1}}],[\"在下次更新该key对于的值时直接覆盖\",{\"1\":{\"523\":1}}],[\"在下次\",{\"1\":{\"480\":1}}],[\"在下次调用其private\",{\"1\":{\"86\":1}}],[\"在下一次\",{\"1\":{\"282\":1}}],[\"在下一次更新界面时依据\",{\"1\":{\"282\":1}}],[\"在下一帧更新控件\",{\"1\":{\"282\":1}}],[\"在下面的分析中\",{\"1\":{\"229\":1}}],[\"在代码执行的过程中\",{\"1\":{\"221\":1}}],[\"在官方文档有\",{\"1\":{\"217\":1}}],[\"在需要网络请求的时候\",{\"1\":{\"708\":1}}],[\"在需要用到方法时\",{\"1\":{\"662\":1}}],[\"在需要使用该对象的地方通过\",{\"1\":{\"202\":1}}],[\"在需要根据渠道不同而变化的地方使用$\",{\"1\":{\"105\":1}}],[\"在桌面上显示的样式\",{\"1\":{\"189\":1}}],[\"在对应地方通过反射获取到对应变量\",{\"1\":{\"179\":1}}],[\"在对比了几种屏幕适配方案之后\",{\"1\":{\"99\":1}}],[\"在调用\",{\"1\":{\"176\":1}}],[\"在调用第三方\",{\"1\":{\"6\":1}}],[\"在attachrenderobject方法中插入的方式很简单\",{\"1\":{\"265\":1}}],[\"在attachtorendertree方法中创建\",{\"1\":{\"254\":1}}],[\"在application\",{\"1\":{\"217\":1}}],[\"在android程序运行时\",{\"1\":{\"216\":1}}],[\"在android中的使用\",{\"1\":{\"209\":1}}],[\"在androidmanifest\",{\"1\":{\"172\":1,\"178\":1}}],[\"在addtouchtarget\",{\"1\":{\"26\":1}}],[\"在里面专门指定\",{\"1\":{\"159\":1}}],[\"在里面替换对应的资源文件\",{\"1\":{\"106\":1}}],[\"在拼接贝塞尔曲线的\",{\"1\":{\"148\":1}}],[\"在绘制\",{\"1\":{\"145\":1,\"146\":1}}],[\"在绘制三阶贝塞尔曲线时\",{\"1\":{\"143\":1}}],[\"在绘制折线图时\",{\"1\":{\"143\":1}}],[\"在通信时\",{\"1\":{\"138\":1}}],[\"在内联检查的时候\",{\"1\":{\"768\":1}}],[\"在内部类中仍然是通过外部类的引用\",{\"1\":{\"513\":1}}],[\"在内部类和内部类外部分别有不同值的问题\",{\"1\":{\"513\":1}}],[\"在内部通过监听imagestream获得imageinfo并最终在\",{\"1\":{\"366\":1}}],[\"在内部通过notifyclients\",{\"1\":{\"271\":1}}],[\"在内核空间创建对应实体节点及其引用\",{\"1\":{\"138\":1}}],[\"在内存不足被杀死后\",{\"1\":{\"36\":1}}],[\"在dart\",{\"1\":{\"759\":1}}],[\"在dagger\",{\"1\":{\"201\":1}}],[\"在data\",{\"1\":{\"126\":1}}],[\"在domain\",{\"1\":{\"126\":1}}],[\"在这种情况下\",{\"1\":{\"548\":1}}],[\"在这一步只会进行到i\",{\"1\":{\"495\":1}}],[\"在这过程中涉及到复制和交换\",{\"1\":{\"857\":1}}],[\"在这过程中\",{\"1\":{\"397\":1,\"601\":1}}],[\"在这两个构造方法内部\",{\"1\":{\"319\":1}}],[\"在这其中\",{\"1\":{\"374\":1}}],[\"在这其中build\",{\"1\":{\"270\":1}}],[\"在这其中我们用到了两个涉及到\",{\"1\":{\"138\":1}}],[\"在这个过程中他使用的数据则是来自于viewmodel的\",{\"1\":{\"785\":1}}],[\"在这个过程中事件和数据是单向的\",{\"1\":{\"125\":1}}],[\"在这个阶段不会进行优化\",{\"1\":{\"767\":1}}],[\"在这个阶段\",{\"1\":{\"766\":1,\"767\":2}}],[\"在这个例子中\",{\"1\":{\"403\":1,\"434\":1}}],[\"在这个文件中都是我们自己定义的方法\",{\"1\":{\"138\":1}}],[\"在这里再拉取\",{\"1\":{\"794\":1}}],[\"在这里主要是开始处理\",{\"1\":{\"759\":1}}],[\"在这里正式启动了\",{\"1\":{\"759\":1}}],[\"在这里绑定了\",{\"1\":{\"753\":1}}],[\"在这里执行了真正的网络请求\",{\"1\":{\"712\":1}}],[\"在这里配置网络超时等全局配置\",{\"1\":{\"708\":1}}],[\"在这里仍然可以知道\",{\"1\":{\"621\":1}}],[\"在这里修改了部分属性\",{\"1\":{\"587\":1}}],[\"在这里会检测是否存在\",{\"1\":{\"583\":1}}],[\"在这里可以看出\",{\"1\":{\"513\":1}}],[\"在这里可以对错误进行处理\",{\"1\":{\"296\":1}}],[\"在这里创建\",{\"1\":{\"423\":1}}],[\"在这里创建了一个新的与给定的\",{\"1\":{\"83\":1}}],[\"在这里也消耗不了\",{\"1\":{\"418\":1}}],[\"在这里传入\",{\"1\":{\"403\":1}}],[\"在这里刷新\",{\"1\":{\"369\":1}}],[\"在这里调用\",{\"1\":{\"357\":1}}],[\"在这里调用了\",{\"1\":{\"26\":1}}],[\"在这里实现真正的绘制逻辑\",{\"1\":{\"330\":1}}],[\"在这里构建一个页面并返回\",{\"1\":{\"281\":1}}],[\"在这里加上\",{\"1\":{\"273\":1}}],[\"在这里被传入了\",{\"1\":{\"256\":1}}],[\"在这里分析可知\",{\"1\":{\"256\":1}}],[\"在这里\",{\"1\":{\"247\":1}}],[\"在这里处理\",{\"1\":{\"243\":1,\"244\":1}}],[\"在这里处理后台线程发过来的消息\",{\"1\":{\"193\":1}}],[\"在这里遍历处理所有的\",{\"1\":{\"238\":1}}],[\"在这里依次执行\",{\"1\":{\"231\":1}}],[\"在这里面才是真正的执行线程的内容\",{\"1\":{\"193\":1}}],[\"在这里将\",{\"1\":{\"179\":1}}],[\"在这里定义服务需要提供的方法\",{\"1\":{\"138\":1}}],[\"在这里定义要使用的控件组布局\",{\"1\":{\"115\":1}}],[\"在布局文件\",{\"1\":{\"118\":1}}],[\"在最后再将要临时保存的值复制到目的下标\",{\"1\":{\"857\":1}}],[\"在最终会被调用的构造方法里面将\",{\"1\":{\"117\":1}}],[\"在最外层\",{\"1\":{\"111\":1}}],[\"在values\",{\"1\":{\"116\":1}}],[\"在打包时自动替换对应资源\",{\"1\":{\"106\":1}}],[\"在该段代码编译为汇编语言时\",{\"1\":{\"547\":1}}],[\"在该类中\",{\"1\":{\"711\":1}}],[\"在该类中build\",{\"1\":{\"282\":1}}],[\"在该类的\",{\"1\":{\"189\":1}}],[\"在该自定义控件的类\",{\"1\":{\"116\":1}}],[\"在该渠道目录下新建对应的资源目录\",{\"1\":{\"106\":1}}],[\"在该方法中将自身\",{\"1\":{\"475\":1}}],[\"在该方法中\",{\"1\":{\"25\":1}}],[\"在友盟统计平台上统计各个渠道的\",{\"1\":{\"104\":1}}],[\"在使用该方法时也类似\",{\"1\":{\"662\":1}}],[\"在使用\",{\"1\":{\"312\":1}}],[\"在使用它之后\",{\"1\":{\"199\":1}}],[\"在使用到本工具的所有地方\",{\"1\":{\"196\":1}}],[\"在使用到项目中之后\",{\"1\":{\"101\":1}}],[\"在使用之前检查是否有该权限checkselfpermission\",{\"1\":{\"172\":1}}],[\"在使用时可以通过country的对象调用syanum\",{\"1\":{\"612\":1}}],[\"在使用时先新建一个\",{\"1\":{\"517\":1}}],[\"在使用时只需要将client的引用传入即可\",{\"1\":{\"202\":1}}],[\"在使用时\",{\"1\":{\"92\":1,\"358\":1,\"645\":1}}],[\"在屏幕上可见的信息\",{\"1\":{\"438\":1}}],[\"在屏幕上面\",{\"1\":{\"347\":1}}],[\"在屏幕上实际对应的像素\",{\"1\":{\"100\":1}}],[\"在屏幕宽度上的比例一致性\",{\"1\":{\"100\":1}}],[\"在不同的线程中进行set\",{\"1\":{\"527\":1}}],[\"在不同屏幕上对应的像素等比例变化\",{\"1\":{\"100\":1}}],[\"在不同手机上展示效果和设计稿保持\",{\"1\":{\"99\":1}}],[\"在每轮比较完毕后max就是这轮比较出来的最大值位置\",{\"1\":{\"897\":1}}],[\"在每次插入的时候对元素进行排序\",{\"1\":{\"880\":1}}],[\"在每次移除数据时进行向下遍历\",{\"1\":{\"860\":1}}],[\"在每次符合条件时只复制参与对比的值\",{\"1\":{\"857\":1}}],[\"在每次put\",{\"1\":{\"523\":1}}],[\"在每次设置\",{\"1\":{\"438\":1}}],[\"在每个设备上都是固定的\",{\"1\":{\"100\":1,\"196\":2}}],[\"在每天指定时间到了之后\",{\"1\":{\"19\":1}}],[\"在有序数组要找到某个元素\",{\"1\":{\"880\":1}}],[\"在有的屏幕上会无法占满全屏或超出屏幕范围\",{\"1\":{\"100\":1}}],[\"在有些屏幕上刚好占满全屏\",{\"1\":{\"100\":1}}],[\"在现实生活中面对千变万化的\",{\"1\":{\"100\":1}}],[\"在mainactivity\",{\"1\":{\"399\":2}}],[\"在mamsinvocationhandler\",{\"1\":{\"179\":1}}],[\"在mount的时候\",{\"1\":{\"263\":1}}],[\"在mhashes中进行二分法查找对应的index\",{\"1\":{\"92\":1}}],[\"在multidex\",{\"1\":{\"30\":1}}],[\"在上面例子中\",{\"1\":{\"445\":1}}],[\"在上面分析powerimageprovider\",{\"1\":{\"398\":1}}],[\"在上面方分析\",{\"1\":{\"375\":1}}],[\"在上面的分析中\",{\"1\":{\"264\":1,\"395\":1,\"759\":1}}],[\"在上面的\",{\"1\":{\"247\":1}}],[\"在上篇文章中\",{\"1\":{\"355\":1}}],[\"在上述widgetsbinding\",{\"1\":{\"262\":1}}],[\"在上图中\",{\"1\":{\"126\":1}}],[\"在上文中我们看到\",{\"1\":{\"90\":1}}],[\"在上个服务被杀死之前调用\",{\"1\":{\"36\":1}}],[\"在删除数据时需要缩减数组\",{\"1\":{\"86\":1}}],[\"在日常编程中使用binder的主要有aidl和messenger两种方式\",{\"1\":{\"69\":1}}],[\"在客户端\",{\"1\":{\"65\":1}}],[\"在客户端终止后自动调用该方法\",{\"1\":{\"63\":1}}],[\"在客户端的\",{\"1\":{\"38\":1,\"65\":1}}],[\"在服务端实现接口各个方法\",{\"1\":{\"63\":1}}],[\"在服务端调用这些方法时执行对应操作\",{\"1\":{\"62\":1}}],[\"在连接上服务端后\",{\"1\":{\"62\":1}}],[\"在其子类中按照不同的需要实现生成request的方法\",{\"1\":{\"713\":1}}],[\"在其变化时执行\",{\"1\":{\"425\":1}}],[\"在其\",{\"1\":{\"419\":1}}],[\"在其内部判断类对象是否已经存在\",{\"1\":{\"545\":1}}],[\"在其内部使用\",{\"1\":{\"446\":1}}],[\"在其内部也只能有一个box\",{\"1\":{\"433\":1}}],[\"在其内部会执行\",{\"1\":{\"374\":1}}],[\"在其内部调用\",{\"1\":{\"372\":1}}],[\"在其内部调用了element的performrebuild\",{\"1\":{\"270\":1}}],[\"在其内部调用enqueuemessage\",{\"1\":{\"52\":1}}],[\"在其他的某个方法里面响用户操作\",{\"1\":{\"123\":1}}],[\"在其中调用sizeof\",{\"1\":{\"517\":1}}],[\"在其中后台进行\",{\"1\":{\"30\":1}}],[\"在其中加载一个\",{\"1\":{\"30\":1}}],[\"在绑定服务是才会被调用\",{\"1\":{\"36\":1}}],[\"在应用自己的进程里面运行\",{\"1\":{\"36\":1}}],[\"在此进行希尔排序\",{\"1\":{\"921\":1}}],[\"在此进行插入排序\",{\"1\":{\"919\":1}}],[\"在此和新的top比较\",{\"1\":{\"890\":1}}],[\"在此时会判断是否需要扩容\",{\"1\":{\"501\":1}}],[\"在此处\",{\"1\":{\"418\":1}}],[\"在此方法内部根据当前时间和\",{\"1\":{\"321\":1}}],[\"在此方法中创建\",{\"1\":{\"418\":1}}],[\"在此方法中\",{\"1\":{\"305\":1,\"357\":1,\"368\":1,\"418\":1}}],[\"在此之后\",{\"1\":{\"271\":1}}],[\"在此之前\",{\"1\":{\"0\":1}}],[\"在此创建或者使用已有的\",{\"1\":{\"254\":1}}],[\"在此后\",{\"1\":{\"35\":1}}],[\"在\",{\"0\":{\"80\":1,\"210\":1,\"215\":1,\"217\":1,\"408\":1,\"626\":1,\"633\":1,\"766\":1,\"790\":1},\"1\":{\"30\":1,\"35\":1,\"36\":2,\"38\":1,\"39\":1,\"56\":2,\"63\":2,\"69\":1,\"74\":1,\"100\":2,\"105\":1,\"106\":1,\"117\":1,\"118\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":4,\"138\":1,\"140\":2,\"153\":1,\"160\":1,\"167\":1,\"179\":1,\"189\":3,\"192\":1,\"193\":1,\"196\":1,\"204\":1,\"215\":1,\"228\":1,\"229\":3,\"232\":1,\"238\":1,\"243\":1,\"244\":1,\"246\":1,\"247\":4,\"249\":1,\"254\":1,\"255\":1,\"256\":2,\"257\":1,\"263\":1,\"265\":3,\"273\":2,\"275\":1,\"279\":1,\"289\":1,\"292\":1,\"295\":2,\"309\":1,\"323\":2,\"332\":3,\"341\":3,\"346\":1,\"347\":1,\"349\":1,\"352\":1,\"357\":1,\"358\":1,\"360\":1,\"368\":1,\"372\":1,\"377\":2,\"382\":2,\"385\":1,\"391\":1,\"398\":1,\"399\":2,\"400\":1,\"405\":2,\"408\":2,\"409\":1,\"411\":1,\"412\":2,\"415\":1,\"417\":2,\"418\":1,\"420\":1,\"423\":1,\"424\":2,\"426\":2,\"438\":1,\"439\":2,\"442\":2,\"461\":2,\"490\":1,\"501\":1,\"508\":1,\"519\":2,\"538\":1,\"553\":1,\"565\":2,\"577\":1,\"594\":1,\"597\":1,\"609\":1,\"622\":1,\"658\":1,\"663\":1,\"670\":1,\"719\":1,\"737\":1,\"745\":1,\"748\":2,\"751\":1,\"753\":1,\"756\":2,\"766\":1,\"784\":2,\"813\":1}}],[\"在主页点击\",{\"1\":{\"810\":1}}],[\"在主轴方向的尺寸无限制\",{\"1\":{\"445\":1}}],[\"在主轴方向尽可能大的进行\",{\"1\":{\"440\":1}}],[\"在主轴方向尽可能自由布局\",{\"1\":{\"439\":1}}],[\"在主线程调用\",{\"1\":{\"193\":1}}],[\"在主线程中更新工作进度\",{\"1\":{\"36\":1}}],[\"在主\",{\"1\":{\"30\":1}}],[\"在看一下\",{\"1\":{\"193\":1}}],[\"在看\",{\"1\":{\"27\":1,\"232\":1,\"418\":1}}],[\"在收到broadcast\",{\"1\":{\"21\":1}}],[\"在广播接收器中收听到broadcast\",{\"1\":{\"20\":1}}],[\"在重启时恢复闹钟\",{\"0\":{\"17\":1}}],[\"在指定时间触发闹钟\",{\"1\":{\"12\":1}}],[\"在指定的时间触发闹钟\",{\"1\":{\"12\":1}}],[\"在系统休眠时也会唤醒系统\",{\"1\":{\"12\":1}}],[\"在时间范围内一直循环\",{\"1\":{\"9\":1}}],[\"在我们创建file时\",{\"1\":{\"243\":1}}],[\"在我对编程尚且懵懂之际\",{\"1\":{\"0\":1}}],[\"在我学习的过程中\",{\"1\":{\"0\":1}}],[\"2之间的增量是\",{\"1\":{\"919\":1}}],[\"2序列\",{\"1\":{\"913\":1}}],[\"2k\",{\"1\":{\"862\":1}}],[\"2g\",{\"1\":{\"805\":1}}],[\"2a\",{\"1\":{\"659\":1}}],[\"2b\",{\"1\":{\"659\":2}}],[\"2node\",{\"1\":{\"805\":1}}],[\"2n\",{\"1\":{\"504\":9,\"507\":2}}],[\"237\",{\"1\":{\"904\":1}}],[\"23\",{\"1\":{\"247\":1,\"400\":1,\"576\":1,\"578\":1,\"723\":1,\"903\":1}}],[\"23+\",{\"1\":{\"10\":1}}],[\"22\",{\"1\":{\"247\":1,\"576\":1}}],[\"27到2011\",{\"1\":{\"576\":1}}],[\"27\",{\"1\":{\"243\":1,\"247\":1,\"576\":1,\"578\":1,\"735\":1}}],[\"277490\",{\"1\":{\"33\":1}}],[\"21\",{\"1\":{\"247\":1,\"576\":1,\"778\":1,\"911\":1,\"920\":1}}],[\"2118406\",{\"1\":{\"243\":1}}],[\"210529\",{\"1\":{\"241\":1}}],[\"21996\",{\"1\":{\"241\":1}}],[\"2160\",{\"1\":{\"100\":1,\"101\":1,\"196\":3}}],[\"2已经替我们做了好多事情\",{\"1\":{\"218\":1}}],[\"2已经可以自动为我们注入dispatchingandroidinjector依赖\",{\"1\":{\"214\":1}}],[\"2在fragment的使用和在activity中的使用十分相似\",{\"1\":{\"217\":1}}],[\"2的逻辑放到一份代码里面\",{\"1\":{\"209\":1}}],[\"2的使用分为activity和fragment两部分\",{\"1\":{\"209\":1}}],[\"2中\",{\"1\":{\"201\":1}}],[\"2中各个注解的作用\",{\"1\":{\"199\":1}}],[\"2到底是如何实现的呢\",{\"1\":{\"199\":1}}],[\"2是\",{\"1\":{\"199\":1}}],[\"2是中线\",{\"1\":{\"33\":1}}],[\"2f1eb7f26402\",{\"1\":{\"128\":1}}],[\"250dp\",{\"1\":{\"167\":2}}],[\"25dp\",{\"1\":{\"101\":1}}],[\"25\",{\"1\":{\"101\":1,\"111\":1,\"247\":1,\"576\":1}}],[\"2582\",{\"1\":{\"26\":1}}],[\"2px\",{\"1\":{\"100\":1}}],[\"28\",{\"1\":{\"30\":1,\"247\":1,\"576\":1}}],[\"24dp\",{\"1\":{\"101\":1}}],[\"2400\",{\"1\":{\"100\":1}}],[\"24\",{\"1\":{\"13\":1,\"247\":1,\"500\":1,\"516\":1,\"519\":2,\"521\":2,\"576\":1,\"578\":2,\"586\":1,\"779\":1}}],[\"2623\",{\"1\":{\"731\":1}}],[\"26属于2010年的51周\",{\"1\":{\"576\":1}}],[\"26到2011\",{\"1\":{\"576\":1}}],[\"26\",{\"1\":{\"13\":3,\"152\":1,\"247\":1,\"576\":3}}],[\"26+\",{\"1\":{\"2\":1}}],[\"2048\",{\"1\":{\"778\":2}}],[\"2033\",{\"1\":{\"196\":1}}],[\"2009\",{\"1\":{\"578\":1}}],[\"200\",{\"1\":{\"340\":2,\"342\":1,\"343\":3,\"403\":1,\"737\":1}}],[\"200dp\",{\"1\":{\"189\":4}}],[\"2000\",{\"1\":{\"123\":1}}],[\"2000~2999\",{\"1\":{\"76\":1}}],[\"20\",{\"1\":{\"63\":1,\"247\":1,\"276\":1,\"295\":1,\"434\":1,\"516\":1,\"521\":1,\"576\":1}}],[\"2010\",{\"1\":{\"576\":1}}],[\"2016\",{\"1\":{\"500\":1,\"776\":1,\"777\":1,\"778\":1,\"779\":1}}],[\"20160719100800917\",{\"1\":{\"138\":1}}],[\"2011\",{\"1\":{\"243\":1,\"576\":1}}],[\"201307\",{\"1\":{\"138\":1}}],[\"2014\",{\"1\":{\"128\":1,\"675\":2,\"809\":2}}],[\"2012110216160766\",{\"1\":{\"137\":1}}],[\"2012\",{\"1\":{\"128\":1,\"137\":1}}],[\"2018\",{\"1\":{\"62\":1,\"63\":1,\"126\":1,\"128\":1,\"721\":1,\"735\":1,\"784\":1}}],[\"2019\",{\"1\":{\"13\":5,\"139\":1,\"492\":1,\"576\":9}}],[\"2020\",{\"1\":{\"576\":3}}],[\"20200422115253\",{\"1\":{\"138\":1}}],[\"20200429160005\",{\"1\":{\"45\":1}}],[\"2021\",{\"1\":{\"196\":1}}],[\"20210531\",{\"1\":{\"6\":1}}],[\"29到2020\",{\"1\":{\"576\":3}}],[\"29972028\",{\"1\":{\"522\":1}}],[\"29868235\",{\"1\":{\"105\":1}}],[\"29\",{\"1\":{\"5\":1,\"247\":1,\"575\":1,\"576\":8}}],[\"2\",{\"0\":{\"39\":1,\"105\":1,\"116\":1,\"145\":1,\"179\":1,\"198\":1,\"200\":1,\"208\":1,\"223\":1,\"458\":1,\"465\":1,\"472\":1,\"533\":1,\"546\":1,\"613\":1,\"769\":1,\"813\":1},\"1\":{\"0\":1,\"6\":1,\"26\":2,\"30\":3,\"33\":5,\"36\":1,\"66\":1,\"83\":2,\"95\":6,\"100\":2,\"101\":3,\"112\":2,\"124\":1,\"133\":1,\"137\":6,\"138\":2,\"140\":1,\"143\":1,\"144\":1,\"145\":4,\"153\":6,\"158\":1,\"167\":2,\"173\":1,\"182\":2,\"184\":2,\"190\":1,\"195\":1,\"196\":2,\"199\":1,\"201\":1,\"206\":2,\"209\":2,\"214\":1,\"219\":1,\"221\":1,\"222\":1,\"230\":5,\"237\":2,\"239\":1,\"243\":1,\"244\":1,\"246\":1,\"247\":6,\"251\":1,\"253\":1,\"259\":2,\"262\":1,\"264\":1,\"265\":1,\"270\":2,\"273\":1,\"286\":1,\"292\":2,\"294\":1,\"296\":2,\"297\":1,\"302\":1,\"309\":1,\"310\":1,\"311\":1,\"319\":1,\"330\":3,\"332\":1,\"342\":4,\"343\":3,\"376\":2,\"383\":3,\"400\":1,\"405\":1,\"412\":5,\"427\":3,\"457\":1,\"471\":1,\"472\":1,\"490\":1,\"495\":2,\"496\":2,\"498\":1,\"501\":1,\"519\":1,\"527\":4,\"547\":2,\"557\":7,\"568\":1,\"575\":1,\"576\":3,\"578\":2,\"583\":1,\"606\":1,\"612\":2,\"617\":1,\"618\":1,\"622\":2,\"625\":1,\"626\":1,\"629\":2,\"630\":3,\"631\":3,\"638\":1,\"645\":2,\"651\":1,\"659\":2,\"666\":3,\"674\":2,\"701\":1,\"708\":3,\"716\":1,\"721\":2,\"723\":1,\"724\":3,\"728\":1,\"740\":1,\"742\":1,\"744\":2,\"745\":2,\"747\":2,\"748\":4,\"751\":1,\"759\":4,\"761\":1,\"766\":2,\"767\":2,\"768\":2,\"794\":1,\"805\":2,\"827\":3,\"836\":3,\"847\":2,\"848\":2,\"857\":3,\"858\":2,\"859\":4,\"880\":3,\"890\":9,\"896\":3,\"897\":2,\"911\":1,\"912\":1,\"913\":12,\"918\":1,\"919\":2,\"921\":4,\"927\":3}}],[\"基本思路是将根节点推出\",{\"1\":{\"859\":1}}],[\"基本上都只能定义动画的\",{\"1\":{\"309\":1}}],[\"基本数据类型\",{\"1\":{\"59\":1,\"459\":1}}],[\"基础\",{\"0\":{\"708\":1}}],[\"基础知识\",{\"0\":{\"279\":1}}],[\"基础教程之类的文章\",{\"1\":{\"0\":1}}],[\"基于底层实现\",{\"1\":{\"314\":1}}],[\"基于\",{\"1\":{\"126\":1,\"251\":1,\"402\":3,\"422\":3,\"433\":3,\"441\":1,\"612\":1,\"722\":1}}],[\"基于vuepress\",{\"1\":{\"0\":1}}],[\"基准\",{\"1\":{\"100\":1}}],[\"基线\",{\"1\":{\"33\":1}}],[\"基线到中线的距离\",{\"1\":{\"33\":2}}],[\"这句话也可以不修改\",{\"1\":{\"812\":1}}],[\"这句话存疑\",{\"1\":{\"492\":1}}],[\"这行语句是使用\",{\"1\":{\"812\":1}}],[\"这并不是安排\",{\"1\":{\"765\":1}}],[\"这其中的isolate\",{\"1\":{\"752\":1}}],[\"这才是真正创建后的结果\",{\"1\":{\"690\":1}}],[\"这篇文章基于我在慕课网上面学习\",{\"1\":{\"735\":1}}],[\"这篇文章是我今天在\",{\"1\":{\"675\":1}}],[\"这篇文章介绍了如何在\",{\"1\":{\"668\":1}}],[\"这篇文章主要想总结一下aidl具体为我们做了什么工作\",{\"1\":{\"69\":1}}],[\"这相当于首先执行一个顺序映射\",{\"1\":{\"631\":1}}],[\"这类操作符本身不是挂起函数\",{\"1\":{\"653\":1}}],[\"这类操作符\",{\"1\":{\"629\":1}}],[\"这类文章在我的学习过程中对我有很大的帮助\",{\"1\":{\"0\":1}}],[\"这段示例代码来自\",{\"1\":{\"584\":1}}],[\"这次我们用到的时静态内部类\",{\"1\":{\"549\":1}}],[\"这意味着每次插入或弹出时要进行排序\",{\"1\":{\"873\":1}}],[\"这意味着\",{\"1\":{\"538\":1}}],[\"这当然也包括字符串的定义\",{\"1\":{\"519\":1}}],[\"这表示在serializable序列化时不主动去序列化这些值\",{\"1\":{\"506\":1}}],[\"这导致我们在使用\",{\"1\":{\"430\":1}}],[\"这实际上与\",{\"1\":{\"393\":1}}],[\"这部分与\",{\"1\":{\"393\":1}}],[\"这部分见仁见智\",{\"1\":{\"385\":1}}],[\"这部分内容的代码在extended\",{\"1\":{\"383\":1}}],[\"这部分的实现可以自由切换\",{\"1\":{\"126\":1}}],[\"这部分的代码与\",{\"1\":{\"126\":1}}],[\"这会导致一个问题\",{\"1\":{\"587\":1}}],[\"这会导致多图列表的时候图片被频繁的回收\",{\"1\":{\"376\":1}}],[\"这会触发\",{\"1\":{\"249\":1}}],[\"这两种构造方法主要会初始化以下变量\",{\"1\":{\"319\":1}}],[\"这两个本地值的影响\",{\"1\":{\"575\":1}}],[\"这两个分别传入\",{\"1\":{\"404\":1}}],[\"这两个值可以随时修改\",{\"1\":{\"358\":1}}],[\"这两个\",{\"1\":{\"251\":1,\"254\":1,\"340\":1}}],[\"这取决于我们想要给fragment绑定的依赖\",{\"1\":{\"217\":1}}],[\"这时又可以细分为以下三种情况\",{\"1\":{\"904\":1}}],[\"这时\",{\"1\":{\"584\":1}}],[\"这时如果该thread还在运行\",{\"1\":{\"528\":1}}],[\"这时就可以用到我在google\",{\"1\":{\"218\":1}}],[\"这时就需要第五个主角\",{\"1\":{\"204\":1}}],[\"这时候可以找该子节点的右子树中最小的\",{\"1\":{\"836\":2}}],[\"这时候执行方法有两个阶段\",{\"1\":{\"766\":1}}],[\"这时候就需要用到\",{\"1\":{\"355\":1}}],[\"这时候\",{\"1\":{\"203\":1}}],[\"这时service的实例化过程被移到了client的外部某处\",{\"1\":{\"199\":1}}],[\"这就涉及到和\",{\"1\":{\"375\":1}}],[\"这就要提到第二个主角\",{\"1\":{\"202\":1}}],[\"这就是我们当前activity对应的mainactivitysubcomponent\",{\"1\":{\"216\":1}}],[\"这就是\",{\"1\":{\"138\":1}}],[\"这就是那只预先造好的鸡\",{\"1\":{\"138\":1}}],[\"这些增量的集合称为间隔序列\",{\"1\":{\"920\":1}}],[\"这些继承自listadapter的\",{\"1\":{\"781\":1}}],[\"这些组件可帮助您遵循最佳做法\",{\"1\":{\"781\":1}}],[\"这些数据结构使用关键字的值存储\",{\"1\":{\"869\":1}}],[\"这些数据与操作都受着的影响\",{\"1\":{\"781\":1}}],[\"这些数据模型独立于\",{\"1\":{\"126\":1}}],[\"这些数\",{\"1\":{\"630\":1}}],[\"这些操作符也是冷操作符\",{\"1\":{\"629\":1}}],[\"这些滑动布局会内部消耗掉滑动事件\",{\"1\":{\"419\":1}}],[\"这些都需要使用者在\",{\"1\":{\"399\":1}}],[\"这些方案会在\",{\"1\":{\"388\":1}}],[\"这些方案对一般纯\",{\"1\":{\"388\":1}}],[\"这些\",{\"1\":{\"329\":1}}],[\"这些控件会自动从之前的状态切换到新状态\",{\"1\":{\"300\":1,\"314\":1}}],[\"这些异常可以使用runzonedguarded捕获并处理\",{\"1\":{\"292\":1}}],[\"这些内容便绘制在屏幕上面\",{\"1\":{\"265\":1}}],[\"这些图片除了要绘制的图形有着色之外\",{\"1\":{\"130\":1}}],[\"这一范围\",{\"1\":{\"300\":1,\"314\":1,\"329\":1}}],[\"这一切是怎么实现的呢\",{\"0\":{\"216\":1}}],[\"这一点尤为重要\",{\"1\":{\"126\":1}}],[\"这一层负责实现上一层调用的抽象接口\",{\"1\":{\"126\":1}}],[\"这一层一般使用\",{\"1\":{\"123\":1}}],[\"这二者组合实现了在屏幕上展示应用数据\",{\"1\":{\"126\":1}}],[\"这也告诉我们\",{\"1\":{\"439\":1}}],[\"这也就是为什么我们之前说\",{\"1\":{\"438\":1}}],[\"这也就要求\",{\"1\":{\"358\":1}}],[\"这也就证明了我们之前说的\",{\"1\":{\"229\":1}}],[\"这也就解释了在服务端和客户端可以通过两个不同的构造方法获取到有同样功能的\",{\"1\":{\"83\":1}}],[\"这也就解释了在服务的onbind\",{\"1\":{\"83\":1}}],[\"这也称为对象泄露\",{\"1\":{\"126\":1}}],[\"这也是创建\",{\"1\":{\"405\":1}}],[\"这也是为什么在上一步我们简单的\",{\"1\":{\"341\":1}}],[\"这也是\",{\"1\":{\"126\":1,\"426\":1}}],[\"这三者的切换逻辑通过实现\",{\"1\":{\"781\":1}}],[\"这三者的着重点各有不同\",{\"1\":{\"121\":1}}],[\"这三个\",{\"1\":{\"251\":1}}],[\"这三个主要方法关系如下\",{\"1\":{\"26\":1}}],[\"这三个可以看这里\",{\"1\":{\"10\":1}}],[\"这几天学习\",{\"1\":{\"189\":1}}],[\"这几天的工作中用到了控件组来实现复杂布局\",{\"1\":{\"114\":1}}],[\"这几个方案中\",{\"1\":{\"10\":1}}],[\"这是一篇使用\",{\"1\":{\"931\":1}}],[\"这是一个\",{\"1\":{\"716\":1}}],[\"这是一个external方法\",{\"1\":{\"244\":1,\"246\":1}}],[\"这是一个托管在\",{\"1\":{\"0\":1}}],[\"这是爬虫功能的重点之一\",{\"1\":{\"737\":1}}],[\"这是第二个\",{\"1\":{\"646\":1}}],[\"这是第一个\",{\"1\":{\"646\":1}}],[\"这是非常容易从示例中观察到的\",{\"1\":{\"642\":1}}],[\"这是我在学习\",{\"1\":{\"612\":1}}],[\"这是为什么呢\",{\"1\":{\"587\":1}}],[\"这是\",{\"1\":{\"190\":1}}],[\"这是由于使用了androidautosize适配方案后\",{\"1\":{\"101\":1}}],[\"这是因为堆中每个节点的左右子节点的位置和大小无关\",{\"1\":{\"856\":1}}],[\"这是因为按照拓扑排序条件2没有后继点的顶点必然排在后面\",{\"1\":{\"850\":1}}],[\"这是因为虽然在\",{\"1\":{\"397\":1}}],[\"这是因为虽然两个\",{\"1\":{\"63\":1}}],[\"这是因为overlay\",{\"1\":{\"341\":1}}],[\"这是因为该方法的注解\",{\"1\":{\"213\":1}}],[\"这是因为\",{\"1\":{\"159\":1,\"273\":1,\"439\":1,\"538\":1}}],[\"这是因为xfermode的效果\",{\"1\":{\"131\":1}}],[\"这是因为他在注册的同时也对\",{\"1\":{\"63\":1}}],[\"这里面\",{\"1\":{\"911\":1}}],[\"这里面的u2\",{\"1\":{\"519\":1}}],[\"这里面的各个\",{\"1\":{\"398\":1}}],[\"这里面的\",{\"1\":{\"226\":1}}],[\"这里并没有交换\",{\"1\":{\"897\":1}}],[\"这里并没有对应的对象\",{\"1\":{\"264\":1}}],[\"这里我选择的是使用\",{\"1\":{\"813\":1}}],[\"这里我们注意到他的\",{\"1\":{\"261\":1}}],[\"这里我们可以看到getimessenger\",{\"1\":{\"83\":1}}],[\"这里消息处理的步骤也启动了\",{\"1\":{\"761\":1}}],[\"这里执行了messagehandler\",{\"1\":{\"761\":1}}],[\"这里通过threadpool\",{\"1\":{\"759\":1}}],[\"这里只是做了一些环境准备\",{\"1\":{\"759\":1}}],[\"这里分析一下\",{\"1\":{\"758\":1}}],[\"这里分析一下后面两种方式\",{\"1\":{\"748\":1}}],[\"这里也调用了\",{\"1\":{\"756\":1}}],[\"这里也只需要使用当时\",{\"1\":{\"744\":1}}],[\"这里匹配了\",{\"1\":{\"583\":1}}],[\"这里提供一个实例\",{\"1\":{\"517\":1}}],[\"这里有一份\",{\"1\":{\"517\":1}}],[\"这里有一个知识点\",{\"1\":{\"104\":1}}],[\"这里原始\",{\"1\":{\"500\":1}}],[\"这里一次只读取一个字节\",{\"1\":{\"486\":1}}],[\"这里指定最小高度为父级高度\",{\"1\":{\"444\":1,\"445\":1}}],[\"这里处理了滑动时键盘隐藏的问题\",{\"1\":{\"436\":1}}],[\"这里创建\",{\"1\":{\"423\":1,\"757\":1}}],[\"这里创建了\",{\"1\":{\"253\":1}}],[\"这里吧剩下的\",{\"1\":{\"418\":1}}],[\"这里表示\",{\"1\":{\"417\":1}}],[\"这里表示只有\",{\"1\":{\"417\":1}}],[\"这里使用\",{\"1\":{\"444\":1}}],[\"这里使用了自定义的\",{\"1\":{\"436\":1}}],[\"这里使用的是\",{\"1\":{\"405\":1}}],[\"这里使用该方法在\",{\"1\":{\"189\":1}}],[\"这里需要注意\",{\"1\":{\"397\":1}}],[\"这里需要时\",{\"1\":{\"209\":1}}],[\"这里会执行的是createisolategroupandsetuphelper\",{\"1\":{\"757\":1}}],[\"这里会有一个有意思的现象\",{\"1\":{\"587\":1}}],[\"这里会发生\",{\"1\":{\"762\":1}}],[\"这里会发生一次内存拷贝\",{\"1\":{\"400\":1}}],[\"这里会发生内存拷贝\",{\"1\":{\"397\":1}}],[\"这里会创建一个封装的\",{\"1\":{\"392\":1}}],[\"这里会在\",{\"1\":{\"370\":1}}],[\"这里当\",{\"1\":{\"360\":1}}],[\"这里要注意\",{\"1\":{\"340\":1}}],[\"这里要处理特殊情况\",{\"1\":{\"144\":1}}],[\"这里对\",{\"1\":{\"332\":1}}],[\"这里因为\",{\"1\":{\"256\":1}}],[\"这里是主线程\",{\"1\":{\"622\":2}}],[\"这里是主要创建\",{\"1\":{\"423\":1}}],[\"这里是处理当\",{\"1\":{\"423\":1}}],[\"这里是使用\",{\"1\":{\"398\":1}}],[\"这里是无论如何都会执行的代码\",{\"1\":{\"294\":1}}],[\"这里是兜底的捕获异常\",{\"1\":{\"294\":1}}],[\"这里是捕获\",{\"1\":{\"294\":1}}],[\"这里是自定义的控件\",{\"1\":{\"279\":1}}],[\"这里是\",{\"1\":{\"256\":1,\"622\":1}}],[\"这里是请求后台提供登录相关数据\",{\"1\":{\"123\":1}}],[\"这里最终会通过\",{\"1\":{\"256\":1}}],[\"这里切换了\",{\"1\":{\"247\":1}}],[\"这里解析完收到的参数后\",{\"1\":{\"247\":1}}],[\"这里真正负责执行的方法\",{\"1\":{\"247\":1}}],[\"这里真正实现\",{\"1\":{\"126\":1}}],[\"这里根据动画的进度更改\",{\"1\":{\"352\":1}}],[\"这里根据\",{\"1\":{\"246\":1,\"310\":1,\"424\":1}}],[\"这里依次遍历传入的\",{\"1\":{\"238\":1}}],[\"这里可以被取消\",{\"1\":{\"629\":1}}],[\"这里可以看到\",{\"1\":{\"238\":1,\"265\":1,\"757\":1}}],[\"这里可能会用到\",{\"1\":{\"123\":1}}],[\"这里主要触发了\",{\"1\":{\"761\":1}}],[\"这里主要是对\",{\"1\":{\"753\":1}}],[\"这里主要进行了\",{\"1\":{\"751\":1}}],[\"这里主要做了\",{\"1\":{\"253\":1,\"759\":1}}],[\"这里主要有两步\",{\"1\":{\"753\":1}}],[\"这里主要有\",{\"1\":{\"246\":1,\"254\":1,\"265\":1}}],[\"这里主要的实现是vmlibraryhooks\",{\"1\":{\"237\":1}}],[\"这里主要调用了\",{\"1\":{\"228\":1}}],[\"这里就不再赘述了\",{\"1\":{\"217\":1}}],[\"这里就需要用到0\",{\"1\":{\"138\":1}}],[\"这里调用对应的\",{\"1\":{\"265\":1}}],[\"这里调用\",{\"1\":{\"264\":1}}],[\"这里调用了\",{\"1\":{\"225\":1}}],[\"这里调用了常用方法之一\",{\"1\":{\"193\":1}}],[\"这里调用方法如下\",{\"1\":{\"193\":1}}],[\"这里调用的是\",{\"1\":{\"71\":1,\"263\":1}}],[\"这里将renderobjecttowidgetelement\",{\"1\":{\"256\":1}}],[\"这里将\",{\"1\":{\"193\":1,\"256\":1,\"405\":1}}],[\"这里才是处理申请权限的相关代码\",{\"1\":{\"173\":1}}],[\"这里实现我们服务能够提供的方法\",{\"1\":{\"138\":1}}],[\"这里实际处理各种读\",{\"1\":{\"125\":1}}],[\"这里实际上是调用了远程的\",{\"1\":{\"71\":1}}],[\"这里简要分析一下\",{\"1\":{\"126\":1}}],[\"这里\",{\"1\":{\"126\":1,\"259\":1,\"273\":1,\"412\":1,\"418\":1,\"436\":1,\"761\":1}}],[\"这里传入的两个参数都是\",{\"1\":{\"126\":1}}],[\"这里写的是app\",{\"1\":{\"116\":1}}],[\"这里的activitymainbinding类是databinding根据\",{\"1\":{\"784\":1}}],[\"这里的参数分别是\",{\"1\":{\"747\":1}}],[\"这里的参数顺序\",{\"1\":{\"247\":1}}],[\"这里的抽象方法wraprequestbody\",{\"1\":{\"711\":1}}],[\"这里的逻辑是\",{\"1\":{\"412\":1,\"760\":1}}],[\"这里的列表滑动和\",{\"1\":{\"403\":1}}],[\"这里的主要有两个步骤\",{\"1\":{\"264\":1}}],[\"这里的过程我们下面\",{\"1\":{\"256\":1}}],[\"这里的实现可以参考\",{\"1\":{\"247\":1}}],[\"这里的\",{\"1\":{\"125\":1,\"132\":1,\"228\":1,\"254\":1,\"256\":1,\"262\":2,\"264\":1,\"273\":1,\"319\":1,\"340\":1,\"392\":2,\"418\":1,\"617\":1,\"673\":1,\"757\":1,\"761\":1}}],[\"这里的布局决定了布局显示的样子\",{\"1\":{\"115\":1}}],[\"这里的操作只是将没有被删除的数据移动到了数组的前面\",{\"1\":{\"90\":1}}],[\"这里用来注册监听的类是\",{\"1\":{\"63\":1}}],[\"这里时在服务端调用回调方法的写法\",{\"1\":{\"63\":1}}],[\"这个枢纽的取法很关键\",{\"1\":{\"927\":1}}],[\"这个问题显然很好解决\",{\"1\":{\"912\":1}}],[\"这个算法要求如下\",{\"1\":{\"827\":1}}],[\"这个文件夹内所有的内容就是处理好的网站\",{\"1\":{\"813\":1}}],[\"这个平台的各种优点\",{\"1\":{\"798\":1}}],[\"这个阶段使用的\",{\"1\":{\"767\":1}}],[\"这个阶段\",{\"1\":{\"767\":1}}],[\"这个在不同的\",{\"1\":{\"753\":1}}],[\"这个我们在后面回调网络请求状态的时候会用到\",{\"1\":{\"710\":1}}],[\"这个命令可以拉去最新版本并自动合并\",{\"1\":{\"673\":1}}],[\"这个例子来自\",{\"1\":{\"663\":1}}],[\"这个函数启动一个新的计数器\",{\"1\":{\"645\":1}}],[\"这个异常会被所有的处理者忽略\",{\"1\":{\"640\":1}}],[\"这个时候就会调用set\",{\"1\":{\"527\":1}}],[\"这个值约等于\",{\"1\":{\"519\":1}}],[\"这个值可以大于\",{\"1\":{\"500\":1}}],[\"这个引用指向局部变量引用指向的内存空间\",{\"1\":{\"513\":1}}],[\"这个接口表示\",{\"1\":{\"438\":1}}],[\"这个类处理了\",{\"1\":{\"436\":1}}],[\"这个类是用来为相应的activity提供一个androidinjector\",{\"1\":{\"214\":1}}],[\"这个也是\",{\"1\":{\"405\":1}}],[\"这个imageinfo是对ui\",{\"1\":{\"372\":1}}],[\"这个和\",{\"1\":{\"292\":1}}],[\"这个和我们最初的分析一致\",{\"1\":{\"259\":1}}],[\"这个过程会完成自动向上转型\",{\"1\":{\"540\":1}}],[\"这个过程与普通widget一致\",{\"1\":{\"271\":1}}],[\"这个过程称为内存映射\",{\"1\":{\"136\":1}}],[\"这个原因我们后面再分析\",{\"1\":{\"261\":1}}],[\"这个对象全局唯一\",{\"1\":{\"254\":1}}],[\"这个线程会在合适的时间唤起\",{\"1\":{\"235\":1}}],[\"这个线程池\",{\"1\":{\"193\":1}}],[\"这个构造函数\",{\"1\":{\"193\":1}}],[\"这个布局文件是\",{\"1\":{\"189\":2}}],[\"这个步骤十分重要\",{\"1\":{\"162\":1}}],[\"这个架构满足了以下常见架构原则\",{\"1\":{\"126\":1}}],[\"这个层单纯处理业务逻辑\",{\"1\":{\"126\":1}}],[\"这个是外部类的引用\",{\"1\":{\"513\":1}}],[\"这个是系统实现的一个\",{\"1\":{\"111\":1}}],[\"这个是我们在\",{\"1\":{\"71\":2}}],[\"这个\",{\"1\":{\"111\":1,\"138\":1,\"229\":1,\"243\":1,\"244\":2,\"265\":2,\"437\":1}}],[\"这个center\",{\"1\":{\"33\":1}}],[\"这个方法就会被交给一个后台优化编译器\",{\"1\":{\"768\":1}}],[\"这个方法的主要作用使用new\",{\"1\":{\"761\":1}}],[\"这个方法的主要逻辑都在他的子类中\",{\"1\":{\"253\":1}}],[\"这个方法的定义在sdk\",{\"1\":{\"748\":1}}],[\"这个方法在其子类中的实现一般是调用okhttprequest子类的build方法\",{\"1\":{\"711\":1}}],[\"这个方法最终以threadlocal对象为\",{\"1\":{\"527\":1}}],[\"这个方法内部会调用updated\",{\"1\":{\"271\":1}}],[\"这个方法内部是实际上是通过\",{\"1\":{\"231\":1}}],[\"这个方法会遍历\",{\"1\":{\"270\":1}}],[\"这个方法会将传递进来的callback赋值给\",{\"1\":{\"228\":1}}],[\"这个方法除了调用\",{\"1\":{\"264\":1}}],[\"这个方法则是尽快安排一个\",{\"1\":{\"257\":1}}],[\"这个方法\",{\"1\":{\"25\":1}}],[\"这种方式创建一种能力受限的\",{\"1\":{\"742\":1}}],[\"这种方法很慢\",{\"1\":{\"800\":1}}],[\"这种方法会在inheritedwidget更新的时候\",{\"1\":{\"273\":1}}],[\"这种方法在主进程启动时\",{\"1\":{\"30\":1}}],[\"这种差异来自于子作业的执行失败不会传播给它的父作业的事实\",{\"1\":{\"644\":1}}],[\"这种行为不能被覆盖\",{\"1\":{\"640\":1}}],[\"这种代码一般没有用到堆中的公用资源\",{\"1\":{\"608\":1}}],[\"这种字面值方式定义的时候才会有的限制\",{\"1\":{\"519\":1}}],[\"这种类型的传参一般都需传入\",{\"1\":{\"431\":1}}],[\"这种属于图片刚下载完\",{\"1\":{\"376\":1}}],[\"这种写法\",{\"1\":{\"273\":2}}],[\"这种情况可能出现在接收方使用了一个与发送方不同版本的类\",{\"1\":{\"584\":1}}],[\"这种情况\",{\"1\":{\"412\":1}}],[\"这种情况就需要另外一个角色\",{\"1\":{\"205\":1}}],[\"这种情况又该怎么处理呢\",{\"1\":{\"203\":1}}],[\"这种情况下\",{\"1\":{\"126\":1,\"767\":1}}],[\"这种情况下服务端可以执行耗时操作而无需另建线程\",{\"1\":{\"63\":1}}],[\"这种情况下在部分低端机上\",{\"1\":{\"30\":1}}],[\"这种将虚拟内存系统集成到文件系统的方法可以简单而高效地把程序和数据加载到内存中\",{\"1\":{\"136\":1}}],[\"这种做法为内核提供了一种便利的方法来访问物理内存中任何特定的位置\",{\"1\":{\"136\":1}}],[\"这样比较\",{\"1\":{\"928\":1}}],[\"这样排序数组要>3\",{\"1\":{\"927\":1}}],[\"这样排序数组大小要>3\",{\"1\":{\"926\":1}}],[\"这样重复步骤\",{\"1\":{\"897\":1}}],[\"这样等完全插入\",{\"1\":{\"860\":1}}],[\"这样需要有两倍与待排序数组大小的空间\",{\"1\":{\"860\":1}}],[\"这样需要使用\",{\"1\":{\"315\":1}}],[\"这样依次循环\",{\"1\":{\"850\":1}}],[\"这样一个简单的利用\",{\"1\":{\"813\":1}}],[\"这样viewmodel只需要关心他要的操作而不必关系数据来源的具体实现\",{\"1\":{\"781\":1}}],[\"这样下次调用就不用再走\",{\"1\":{\"767\":1}}],[\"这样下载中且还未完全下载的图片所占用的内存会逐渐累计\",{\"1\":{\"376\":1}}],[\"这样只需要更改main\",{\"1\":{\"718\":1}}],[\"这样同一个应用只需要在最开始的时候配置一下诸如网络超时\",{\"1\":{\"713\":1}}],[\"这样保证了在\",{\"1\":{\"712\":1}}],[\"这样保证数据一致性\",{\"1\":{\"126\":1}}],[\"这样我们在第一次使用okhttputils的时候初始化的okhttpclient便会被保存到这里\",{\"1\":{\"710\":1}}],[\"这样我们的\",{\"1\":{\"257\":1}}],[\"这样循环直到整个树的每个节点都被遍历完毕\",{\"1\":{\"666\":1}}],[\"这样可以在关闭通道时执行特定操作\",{\"1\":{\"646\":1}}],[\"这样可以一起处理它们\",{\"1\":{\"384\":1}}],[\"这样实现单例的原理是类的静态变量全局唯一\",{\"1\":{\"548\":1}}],[\"这样累计下来必然影响效率\",{\"1\":{\"546\":1}}],[\"这样原本定义的是\",{\"1\":{\"538\":1}}],[\"这样内部类和外部类持有的是同一个全部变量\",{\"1\":{\"512\":1}}],[\"这样他就可以被运行\",{\"1\":{\"493\":1}}],[\"这样在枢纽c两边的数组满足\",{\"1\":{\"925\":1}}],[\"这样在activity等地方对livedata进行订阅后\",{\"1\":{\"785\":1}}],[\"这样在同一个\",{\"1\":{\"753\":1}}],[\"这样在第二次标记时会被移出即将回收集合\",{\"1\":{\"475\":1}}],[\"这样在startpoint\",{\"1\":{\"145\":1}}],[\"这样如果\",{\"1\":{\"442\":1}}],[\"这样如果service构造方法有更新时\",{\"1\":{\"199\":1}}],[\"这样每次生成的\",{\"1\":{\"557\":1}}],[\"这样每次\",{\"1\":{\"440\":1}}],[\"这样也为我们后续通过监听\",{\"1\":{\"439\":1}}],[\"这样最终的效果就是我们的\",{\"1\":{\"439\":1}}],[\"这样其接管了外层的滑动事件\",{\"1\":{\"405\":1}}],[\"这样会创建\",{\"1\":{\"405\":1}}],[\"这样监听的便是这个实现类对象本身\",{\"1\":{\"333\":1}}],[\"这样便可以在\",{\"1\":{\"247\":1}}],[\"这样的数组本身就是有序的\",{\"1\":{\"913\":1}}],[\"这样的提示\",{\"1\":{\"802\":1}}],[\"这样的步骤繁琐且没有意义\",{\"1\":{\"791\":1}}],[\"这样的重复性工作仍然是个不小的工作量\",{\"1\":{\"218\":1}}],[\"这样的代码就可以了\",{\"1\":{\"218\":1}}],[\"这样的需求\",{\"1\":{\"12\":1}}],[\"这样子这个问题就成了如何将一个bottom从一个柱子\",{\"1\":{\"912\":1}}],[\"这样子避免每次比较都要交换\",{\"1\":{\"897\":1}}],[\"这样子比较n次就可以完成排序\",{\"1\":{\"896\":1,\"897\":1}}],[\"这样子一轮比赛完毕最大的就在后面了\",{\"1\":{\"896\":1}}],[\"这样子一个\",{\"1\":{\"806\":1}}],[\"这样子在网站上显示的时候\",{\"1\":{\"813\":1}}],[\"这样子颠颠撞撞大概也有五六年的时间了\",{\"1\":{\"798\":1}}],[\"这样子\",{\"1\":{\"547\":1,\"803\":1}}],[\"这样子保证了每个类都是先经过最顶端的类加载器bootstrap\",{\"1\":{\"485\":1}}],[\"这样子当用到service的时候\",{\"1\":{\"203\":1}}],[\"这样子可以在子线程工作\",{\"1\":{\"36\":1}}],[\"这样dagger\",{\"1\":{\"201\":1}}],[\"这样深耦合的代码显然不是我们需要的\",{\"1\":{\"199\":1}}],[\"这样绘制出来的曲线比较符合我们的要求\",{\"1\":{\"145\":1}}],[\"这样就完成了整个快速排序\",{\"1\":{\"925\":1}}],[\"这样就完成了一次\",{\"1\":{\"270\":1}}],[\"这样就不会对已经排序的数组再次排序\",{\"1\":{\"920\":1}}],[\"这样就得到了一个有序数组\",{\"1\":{\"913\":1}}],[\"这样就能保证这个树的结构不会出错\",{\"1\":{\"836\":2}}],[\"这样就获取到未安装\",{\"1\":{\"823\":1}}],[\"这样就可以立即继续进一步执行代码\",{\"1\":{\"652\":1}}],[\"这样就可以避免多个线程因为操作的数据值不一致而产生错误\",{\"1\":{\"601\":1}}],[\"这样就可以在初始化一个\",{\"1\":{\"557\":1}}],[\"这样就同时存在多个类的对象\",{\"1\":{\"545\":1}}],[\"这样就会产生问题\",{\"1\":{\"510\":1}}],[\"这样就将\",{\"1\":{\"415\":1}}],[\"这样就实现了进程间通信\",{\"1\":{\"137\":1}}],[\"这样就保证了单例\",{\"1\":{\"546\":1}}],[\"这样就保证了\",{\"1\":{\"100\":1}}],[\"这样对\",{\"1\":{\"126\":1}}],[\"这样将得到的每个子数组都划分为两个子数组\",{\"1\":{\"925\":1}}],[\"这样将对数据修改集中到一个地方\",{\"1\":{\"126\":1}}],[\"这样将\",{\"1\":{\"123\":1,\"629\":1}}],[\"这样编译完之后\",{\"1\":{\"104\":1}}],[\"这样\",{\"1\":{\"100\":1,\"256\":1,\"265\":1,\"333\":1,\"340\":1,\"399\":1,\"619\":1,\"816\":1}}],[\"这样当连续遍历\",{\"1\":{\"896\":1}}],[\"这样当数据更新时\",{\"1\":{\"784\":1}}],[\"这样当线程\",{\"1\":{\"546\":1}}],[\"这样当路由变化时\",{\"1\":{\"353\":1}}],[\"这样当时我们在\",{\"1\":{\"243\":1}}],[\"这样当下一次进行put\",{\"1\":{\"90\":1}}],[\"这样当\",{\"1\":{\"71\":1,\"244\":1,\"349\":1,\"438\":1,\"440\":1,\"545\":1}}],[\"这样当用户点击\",{\"1\":{\"30\":1}}],[\"这样主\",{\"1\":{\"30\":1}}],[\"这样不管是分享出去的原图\",{\"1\":{\"6\":1}}],[\"但插入慢\",{\"1\":{\"880\":1}}],[\"但下图不是完全二叉树\",{\"1\":{\"863\":1}}],[\"但却找不到\",{\"1\":{\"850\":1}}],[\"但边数最少的连通子图\",{\"1\":{\"849\":1}}],[\"但链地址法只是线性下降\",{\"1\":{\"828\":1}}],[\"但误打误撞竟然也成功的搭建好了博客\",{\"1\":{\"798\":1}}],[\"但并不是所有的方法都有对应的dart\",{\"1\":{\"767\":1}}],[\"但同时图中顶点数不为0的情况\",{\"1\":{\"850\":1}}],[\"但同时也比上述两者难度高一些\",{\"1\":{\"329\":1}}],[\"但同一时刻最多只能有一个\",{\"1\":{\"763\":1}}],[\"但思路如此\",{\"1\":{\"738\":1}}],[\"但仍然存在以下问题\",{\"1\":{\"732\":1}}],[\"但仍然希望以安全的方式使用它\",{\"1\":{\"618\":1}}],[\"但每次新的emit到来时\",{\"1\":{\"652\":1}}],[\"但他的取消只会向下传播\",{\"1\":{\"641\":1}}],[\"但他的操作是挂起的\",{\"1\":{\"636\":1}}],[\"但他的父类没有实现序列化\",{\"1\":{\"585\":1}}],[\"但他在添加数据时需要扩展数组\",{\"1\":{\"86\":1}}],[\"但如果容量充足\",{\"1\":{\"828\":1}}],[\"但如果存在锁竞争\",{\"1\":{\"609\":1}}],[\"但如果按照iso\",{\"1\":{\"576\":1}}],[\"但如果threadlocal本身保存的都是同一个对象\",{\"1\":{\"529\":1}}],[\"但其他线程都在等待池无法竞争锁\",{\"1\":{\"561\":1}}],[\"但其实还有一张更加简洁的方法\",{\"1\":{\"549\":1}}],[\"但可能会导致死锁\",{\"1\":{\"561\":1}}],[\"但还没获取到该对象的锁时\",{\"1\":{\"561\":1}}],[\"但还是建议子类只需要实现\",{\"1\":{\"360\":1}}],[\"但当考虑到多线程时事情会变得有些复杂\",{\"1\":{\"544\":1}}],[\"但当使用\",{\"1\":{\"101\":1}}],[\"但都在table数组的大小范围内\",{\"1\":{\"499\":1}}],[\"但解析可以在初始化之后开始\",{\"1\":{\"490\":1}}],[\"但会对标记进行压缩\",{\"1\":{\"473\":1}}],[\"但特殊情况下可能无法完整显示因而需要支持滚动的情况\",{\"1\":{\"446\":1}}],[\"但提供了在\",{\"1\":{\"425\":1}}],[\"但最后还是使用imageinfo\",{\"1\":{\"382\":1}}],[\"但不管哪种方式\",{\"1\":{\"757\":1}}],[\"但不保证执行完该方法\",{\"1\":{\"475\":1}}],[\"但不适合对象过多的情况\",{\"1\":{\"471\":1}}],[\"但不会\",{\"1\":{\"375\":1}}],[\"但不可否认的是\",{\"1\":{\"0\":1}}],[\"但有时候并不能满足使用需求\",{\"1\":{\"363\":1,\"379\":1,\"387\":1}}],[\"但在实际开始动画之前\",{\"1\":{\"319\":1}}],[\"但\",{\"1\":{\"318\":1,\"333\":1}}],[\"但这里的\",{\"1\":{\"513\":1}}],[\"但这时如何将二者联系起来呢\",{\"1\":{\"201\":1}}],[\"但这种情况绘制出来的贝塞尔曲线如下\",{\"1\":{\"144\":1}}],[\"但这只是一种障眼法\",{\"1\":{\"30\":1}}],[\"但进程间的同步问题操作系统无法实现\",{\"1\":{\"137\":1}}],[\"但是组节点\",{\"1\":{\"904\":1}}],[\"但是简单\",{\"1\":{\"896\":1}}],[\"但是插入和读取比较耗时\",{\"1\":{\"888\":1}}],[\"但是查找慢\",{\"1\":{\"879\":1}}],[\"但是需要有额外的空间\",{\"1\":{\"869\":1}}],[\"但是需要注意的是\",{\"1\":{\"445\":1}}],[\"但是堆排序堆数据初始分布不敏感一直都是\",{\"1\":{\"860\":1}}],[\"但是没法保证这个值是这个堆中的最小值\",{\"1\":{\"856\":1}}],[\"但是没有同步互斥机制\",{\"1\":{\"137\":1}}],[\"但是我的电脑\",{\"1\":{\"812\":1}}],[\"但是之前多次尝试不得其道\",{\"1\":{\"798\":1}}],[\"但是受\",{\"1\":{\"791\":1}}],[\"但是作为初入编程的一点点小纪念\",{\"1\":{\"775\":1}}],[\"但是太慢了\",{\"1\":{\"768\":1}}],[\"但是具体的方法体此时依旧还没有被反序列\",{\"1\":{\"766\":1}}],[\"但是依然可以往里面加入消息\",{\"1\":{\"744\":1}}],[\"但是可能在执行添加代码的时候isolate\",{\"1\":{\"740\":1}}],[\"但是可以通过flowon\",{\"1\":{\"654\":1}}],[\"但是可以调用挂起函数suspend\",{\"1\":{\"629\":1}}],[\"但是教程中爬虫截止\",{\"1\":{\"735\":1}}],[\"但是为了符合语法规范\",{\"1\":{\"726\":1}}],[\"但是为了便于理解径向动画的原理\",{\"1\":{\"342\":1}}],[\"但是一旦初始化就不能再修改\",{\"1\":{\"724\":1}}],[\"但是尽量不要用正则表达式之类的符号\",{\"1\":{\"684\":1}}],[\"但是会阻塞当前线程\",{\"1\":{\"651\":1}}],[\"但是会有相互循环引用的问题\",{\"1\":{\"474\":1}}],[\"但是主协程也总是会被取消的\",{\"1\":{\"640\":1}}],[\"但是只是判断\",{\"1\":{\"634\":1}}],[\"但是同时收集结果流\",{\"1\":{\"631\":1}}],[\"但是有一个逻辑漏洞\",{\"1\":{\"607\":1}}],[\"但是并发下并不线程安全\",{\"1\":{\"602\":1}}],[\"但是并非固定的\",{\"1\":{\"490\":1}}],[\"但是根据下面的说法\",{\"1\":{\"583\":1}}],[\"但是编译器不知道这个类具体是什么\",{\"1\":{\"540\":1}}],[\"但是编译器要进行额外的类型检查\",{\"1\":{\"538\":1}}],[\"但是能保存\",{\"1\":{\"539\":1}}],[\"但是object\",{\"1\":{\"528\":1}}],[\"但是慢并且最好不要用来存储大容量的数据\",{\"1\":{\"523\":1}}],[\"但是再看外部类的全局变量\",{\"1\":{\"513\":1}}],[\"但是数组类的元素类型要通过类加载器创建\",{\"1\":{\"492\":1}}],[\"但是当拓展时无法申请到足够内存时会导致\",{\"1\":{\"459\":1}}],[\"但是当\",{\"1\":{\"445\":1}}],[\"但是实际这些图片加载过程中的内存由\",{\"1\":{\"397\":1}}],[\"但是实际开发时\",{\"1\":{\"122\":1}}],[\"但是必须在初始化之前完成\",{\"1\":{\"495\":1}}],[\"但是必须在实际使用到之前赋非\",{\"1\":{\"358\":1}}],[\"但是必须注意要在\",{\"1\":{\"24\":1}}],[\"但是也可能超出此范围\",{\"1\":{\"357\":1}}],[\"但是默认情况下其只能产生线性变化的\",{\"1\":{\"355\":1}}],[\"但是样式看起来和页面中的文字样式不一样\",{\"1\":{\"341\":1}}],[\"但是执行以后\",{\"1\":{\"334\":1}}],[\"但是release模式下不会\",{\"1\":{\"295\":1}}],[\"但是这样仍然有个问题\",{\"1\":{\"548\":1}}],[\"但是这样也存在一个问题\",{\"1\":{\"546\":1}}],[\"但是这样就不能和主线程共享数据\",{\"1\":{\"285\":1}}],[\"但是这种方法从子进程返回主进程涉及到进程间通信\",{\"1\":{\"30\":1}}],[\"但是这种只适用于主动分享出去的文件\",{\"1\":{\"6\":1}}],[\"但是两者都会在每一帧被\",{\"1\":{\"280\":1}}],[\"但是不包括父类的\",{\"1\":{\"554\":1}}],[\"但是不同的是\",{\"1\":{\"277\":1}}],[\"但是不需要再单独开一个进程\",{\"1\":{\"30\":1}}],[\"但是重新绘制了\",{\"1\":{\"273\":1}}],[\"但是因为没有监听\",{\"1\":{\"307\":1}}],[\"但是因为\",{\"1\":{\"273\":1,\"747\":1}}],[\"但是对于大多数混合开发的\",{\"1\":{\"388\":1}}],[\"但是对于\",{\"1\":{\"256\":1}}],[\"但是很显然实际开发中\",{\"1\":{\"202\":1}}],[\"但是如果遇到数据是逆序的时候\",{\"1\":{\"869\":1}}],[\"但是如果\",{\"1\":{\"527\":1}}],[\"但是如果是\",{\"1\":{\"495\":1}}],[\"但是如果是另外一个沙盒中的错误则无法处理\",{\"1\":{\"297\":1}}],[\"但是如果要联动处理在\",{\"1\":{\"405\":1}}],[\"但是如果只是想解决图片缓存问题的话\",{\"1\":{\"385\":1}}],[\"但是如果想要实现更复杂的效果\",{\"1\":{\"311\":1}}],[\"但是如果有特殊的动画效果需要实现\",{\"1\":{\"308\":1}}],[\"但是如果activity\",{\"1\":{\"218\":1}}],[\"但是如果每个依赖都这样写的话\",{\"1\":{\"199\":1}}],[\"但是如果用户选择了不再提醒\",{\"1\":{\"172\":1}}],[\"但是如果保存大量数据\",{\"1\":{\"92\":1}}],[\"但是由于向上\",{\"1\":{\"860\":1}}],[\"但是由于正则匹配\",{\"1\":{\"684\":1}}],[\"但是由于\",{\"1\":{\"474\":1,\"475\":1,\"547\":1}}],[\"但是由于直接子widget要重建\",{\"1\":{\"271\":1}}],[\"但是由于硬件加速不支持canvas\",{\"1\":{\"131\":1}}],[\"但是由于没有对数据再包装\",{\"1\":{\"92\":1}}],[\"但是在实际使用的时候\",{\"1\":{\"708\":1}}],[\"但是在实际运行中\",{\"1\":{\"30\":1}}],[\"但是在运行时会被检查出\",{\"1\":{\"538\":1}}],[\"但是在某些特殊场景\",{\"1\":{\"442\":1}}],[\"但是在此期间\",{\"1\":{\"247\":1}}],[\"但是在后续使用到状态栏相关代码的时候发现获取到的状态栏高度和实际高度不一致\",{\"1\":{\"101\":1}}],[\"但是在客户端中被回调的方法却是和客户端中主动调用服务端方法的线程一致\",{\"1\":{\"63\":1}}],[\"但是他们底层的\",{\"1\":{\"63\":1}}],[\"但是\",{\"1\":{\"43\":1,\"100\":1,\"123\":1,\"276\":1,\"286\":1,\"397\":1,\"419\":1,\"442\":1,\"523\":1,\"538\":1,\"545\":1,\"550\":1,\"649\":1,\"690\":1}}],[\"但是宿主死后仍按照启动\",{\"1\":{\"42\":1}}],[\"但是无法确保在精确的时间得到执行\",{\"1\":{\"10\":1}}],[\"但是仍然无法正常使用\",{\"1\":{\"2\":1}}],[\"但网络上已经有很多步骤更加具体\",{\"1\":{\"0\":1}}],[\"▽\",{\"1\":{\"0\":1}}],[\"☆╰╮\",{\"1\":{\"0\":1}}],[\"ε\",{\"1\":{\"0\":1}}],[\"￣\",{\"1\":{\"0\":4}}],[\"千万不要打脸\",{\"1\":{\"0\":1}}],[\"哎呀\",{\"1\":{\"0\":1}}],[\"也需要执行权限x\",{\"1\":{\"689\":1}}],[\"也需要调用onintercepttouchevent\",{\"1\":{\"26\":1}}],[\"也存在\",{\"1\":{\"621\":1}}],[\"也保证了只能创建一个单例\",{\"1\":{\"547\":1}}],[\"也开始执行\",{\"1\":{\"545\":1}}],[\"也有人说在方法区\",{\"1\":{\"492\":1}}],[\"也叫运行时绑定\",{\"1\":{\"490\":1}}],[\"也无法区分\",{\"1\":{\"538\":1}}],[\"也无法通过虚引用获取其实例\",{\"1\":{\"481\":1}}],[\"也无法隐式调用\",{\"1\":{\"36\":1}}],[\"也支持在同一个页面内嵌套多个滑动列表并关联\",{\"1\":{\"419\":1}}],[\"也计入\",{\"1\":{\"417\":1}}],[\"也实现了\",{\"1\":{\"416\":1}}],[\"也是通过反射获取到\",{\"1\":{\"823\":1}}],[\"也是通过在post\",{\"1\":{\"56\":1}}],[\"也是okhttprequest各个子类主要的不同点\",{\"1\":{\"711\":1}}],[\"也是合法的\",{\"1\":{\"538\":1}}],[\"也是如此\",{\"1\":{\"485\":1}}],[\"也是\",{\"1\":{\"418\":1}}],[\"也是body\",{\"1\":{\"415\":1}}],[\"也一并传入\",{\"1\":{\"407\":1}}],[\"也创建有自己的\",{\"1\":{\"349\":1}}],[\"也正常显示\",{\"1\":{\"341\":1}}],[\"也要\",{\"1\":{\"473\":1}}],[\"也要把异常向上抛\",{\"1\":{\"296\":1}}],[\"也要慢慢的修正\",{\"1\":{\"0\":1}}],[\"也不是可运行的程序或批处理文件\",{\"1\":{\"802\":1}}],[\"也不用实时修改\",{\"1\":{\"618\":1}}],[\"也不行\",{\"1\":{\"540\":1}}],[\"也不会被\",{\"1\":{\"478\":1}}],[\"也不全是刚刚包裹\",{\"1\":{\"276\":1}}],[\"也不能乱写瞎写\",{\"1\":{\"0\":1}}],[\"也重新绘制\",{\"1\":{\"273\":1}}],[\"也只需要分别使用\",{\"1\":{\"744\":1}}],[\"也只是更新该线程本身的\",{\"1\":{\"527\":1}}],[\"也只有\",{\"1\":{\"273\":1}}],[\"也只用到了基本的类\",{\"1\":{\"30\":1}}],[\"也即这里的\",{\"1\":{\"436\":1}}],[\"也即\",{\"1\":{\"335\":1}}],[\"也即我们示例中的centerwidget\",{\"1\":{\"256\":1}}],[\"也即系统线程下进行的\",{\"1\":{\"247\":1}}],[\"也没有被重新\",{\"1\":{\"273\":1}}],[\"也没有普通的\",{\"1\":{\"239\":1}}],[\"也没有hash计算\",{\"1\":{\"86\":1}}],[\"也将一组连续的虚拟页面\",{\"1\":{\"136\":1}}],[\"也包括一些之前使用工具类实现的方法\",{\"1\":{\"126\":1}}],[\"也定义了\",{\"1\":{\"111\":1}}],[\"也就会执行containerrenderobjectmixin<rendersliver\",{\"1\":{\"426\":1}}],[\"也就意味着他在\",{\"1\":{\"259\":1}}],[\"也就可以推导出\",{\"1\":{\"196\":1}}],[\"也就解决屏幕适配的问题\",{\"1\":{\"100\":1}}],[\"也就是一个工具模板\",{\"1\":{\"807\":1}}],[\"也就是isolate\",{\"1\":{\"751\":1}}],[\"也就是使用string\",{\"1\":{\"519\":1}}],[\"也就是恢复原位\",{\"1\":{\"418\":1}}],[\"也就是恢复到初始位置\",{\"1\":{\"412\":1}}],[\"也就是不存在\",{\"1\":{\"412\":2}}],[\"也就是存在\",{\"1\":{\"412\":2}}],[\"也就是导致这个任务后续代码无法执行\",{\"1\":{\"292\":1}}],[\"也就是本例中的\",{\"1\":{\"266\":1}}],[\"也就是singlechildrenderobjectelement\",{\"1\":{\"262\":1}}],[\"也就是sendport\",{\"1\":{\"246\":1}}],[\"也就是这里先执行了center\",{\"1\":{\"259\":1}}],[\"也就是我们可以滑动的范围\",{\"1\":{\"439\":1}}],[\"也就是我们这里的\",{\"1\":{\"438\":1}}],[\"也就是我们的\",{\"1\":{\"255\":1}}],[\"也就是我们最开始写的\",{\"1\":{\"255\":1}}],[\"也就是我们\",{\"1\":{\"253\":1}}],[\"也就是我们通过\",{\"1\":{\"247\":1}}],[\"也就是之前widgetsflutterbinding混合的几个\",{\"1\":{\"253\":1}}],[\"也就是\",{\"1\":{\"237\":1,\"246\":1,\"247\":1,\"255\":1,\"256\":2,\"264\":1,\"343\":3,\"351\":1,\"405\":1,\"412\":1,\"418\":1,\"439\":2,\"749\":1}}],[\"也就是在\",{\"1\":{\"236\":1,\"497\":1}}],[\"也就是前面的\",{\"1\":{\"229\":1}}],[\"也就是说videmodule的数据生命周期可能要比他附着的activity或fragment的生命周期长\",{\"1\":{\"785\":1}}],[\"也就是说将完全相同一个对象保存了两次\",{\"1\":{\"587\":1}}],[\"也就是说在程序执行\",{\"1\":{\"497\":1}}],[\"也就是说会将所有内容全部加载\",{\"1\":{\"442\":1}}],[\"也就是说其内部\",{\"1\":{\"438\":1}}],[\"也就是说其将\",{\"1\":{\"357\":1}}],[\"也就是说要么不能超范围\",{\"1\":{\"412\":1}}],[\"也就是说无论\",{\"1\":{\"405\":1}}],[\"也就是说imagecache\",{\"1\":{\"376\":1}}],[\"也就是说网络图片加载的\",{\"1\":{\"374\":1}}],[\"也就是说它只能产生\",{\"1\":{\"360\":1}}],[\"也就是说实际上还是上一个执行完毕\",{\"1\":{\"221\":1}}],[\"也就是说\",{\"1\":{\"203\":1,\"247\":1,\"264\":1,\"276\":1,\"305\":1,\"310\":1,\"316\":1,\"412\":3,\"445\":1,\"484\":1,\"521\":1,\"538\":1,\"712\":1,\"752\":1}}],[\"也就是说不能有两个同名的方法\",{\"1\":{\"60\":1}}],[\"也就是把自己要执行的\",{\"1\":{\"183\":1}}],[\"也就是用来确定图形绘制到目标图形的时候\",{\"1\":{\"130\":1}}],[\"也就是需要我们在使用该\",{\"1\":{\"71\":1}}],[\"也证实了我们之前的一个观点\",{\"1\":{\"83\":1}}],[\"也会调用dart\",{\"1\":{\"753\":1}}],[\"也会执行\",{\"1\":{\"745\":1}}],[\"也会删除用户对应的主目录home\",{\"1\":{\"691\":1}}],[\"也会反序列化\",{\"1\":{\"582\":1}}],[\"也会被相同大小的\",{\"1\":{\"341\":1}}],[\"也会被销毁\",{\"1\":{\"35\":1}}],[\"也会消耗点击事件\",{\"1\":{\"27\":1}}],[\"也可能超出范围\",{\"1\":{\"412\":1}}],[\"也可能是\",{\"1\":{\"375\":1}}],[\"也可能不是\",{\"1\":{\"360\":1}}],[\"也可能会被回调\",{\"1\":{\"333\":1}}],[\"也可以配置成运行成不同的进程\",{\"1\":{\"816\":1}}],[\"也可以被处理\",{\"1\":{\"745\":1}}],[\"也可以被传入\",{\"1\":{\"355\":1}}],[\"也可以正常发送\",{\"1\":{\"745\":1}}],[\"也可以省略\",{\"1\":{\"662\":1}}],[\"也可以用\",{\"1\":{\"651\":1}}],[\"也可以随机数\",{\"1\":{\"582\":1}}],[\"也可以随时触发新动画\",{\"1\":{\"308\":1}}],[\"也可以替换为\",{\"1\":{\"557\":1}}],[\"也可以\",{\"1\":{\"557\":1}}],[\"也可以安全的保存t\",{\"1\":{\"541\":1}}],[\"也可以使用powerimage\",{\"1\":{\"390\":1}}],[\"也可以使用自定义\",{\"1\":{\"279\":1}}],[\"也可以当做接口实现所有方法\",{\"1\":{\"335\":1}}],[\"也可以按照\",{\"1\":{\"277\":1}}],[\"也可以交给其他fragment或者activity的\",{\"1\":{\"217\":1}}],[\"也可以将\",{\"1\":{\"57\":1}}],[\"也可以类比得到\",{\"1\":{\"33\":1}}],[\"也可以不做改动\",{\"1\":{\"30\":1}}],[\"也可参考官方文档或者android\",{\"1\":{\"6\":1}}],[\"宁可少写\",{\"1\":{\"0\":1}}],[\"务必每个观点都有对应的参考依据\",{\"1\":{\"0\":1}}],[\"今天重新学习类三种排序方法\",{\"1\":{\"531\":1}}],[\"今天对\",{\"1\":{\"189\":1}}],[\"今天就因为这种问题\",{\"1\":{\"0\":1}}],[\"今日头条适配方案\",{\"1\":{\"102\":1}}],[\"今日头条屏幕适配方案的原理梳理\",{\"0\":{\"98\":1}}],[\"今日起\",{\"1\":{\"0\":1}}],[\"今后写博客\",{\"1\":{\"0\":1}}],[\"的算法减小\",{\"1\":{\"921\":1}}],[\"的小数组进行排序\",{\"1\":{\"921\":1}}],[\"的小数组\",{\"1\":{\"921\":1}}],[\"的下标\",{\"1\":{\"858\":1}}],[\"的下层\",{\"1\":{\"257\":1}}],[\"的有向图\",{\"1\":{\"850\":1}}],[\"的路径\",{\"1\":{\"850\":1}}],[\"的前面\",{\"1\":{\"850\":1}}],[\"的思想是\",{\"1\":{\"847\":1,\"848\":1}}],[\"的思路\",{\"1\":{\"564\":1}}],[\"的数组可以用插入排序法进行排序\",{\"1\":{\"927\":1}}],[\"的数组保存图中所有的顶点\",{\"1\":{\"842\":1}}],[\"的数据目录下的数据库和文件\",{\"1\":{\"816\":1}}],[\"的数据处理为\",{\"1\":{\"123\":1}}],[\"的多个\",{\"1\":{\"816\":1}}],[\"的相关配置\",{\"1\":{\"811\":1}}],[\"的版本\",{\"1\":{\"808\":1}}],[\"的版本号要和当前工程中其他\",{\"1\":{\"2\":1}}],[\"的安装路径\",{\"1\":{\"803\":1}}],[\"的限制\",{\"1\":{\"791\":1}}],[\"的限制只接受创建\",{\"1\":{\"431\":1}}],[\"的整体分析\",{\"1\":{\"781\":1}}],[\"的整型\",{\"1\":{\"43\":1}}],[\"的介绍图\",{\"1\":{\"781\":1}}],[\"的介绍的总结摘要\",{\"1\":{\"763\":1}}],[\"的失效\",{\"1\":{\"775\":1}}],[\"的出现\",{\"1\":{\"769\":1}}],[\"的含义是\",{\"1\":{\"768\":1}}],[\"的虚拟机\",{\"1\":{\"767\":1}}],[\"的唯一方式\",{\"1\":{\"765\":1}}],[\"的唯一标识\",{\"1\":{\"71\":1}}],[\"的辅助\",{\"1\":{\"765\":1}}],[\"的便利性\",{\"1\":{\"765\":1}}],[\"的message\",{\"1\":{\"761\":1}}],[\"的mount方法中\",{\"1\":{\"265\":1}}],[\"的编译方式\",{\"1\":{\"757\":1}}],[\"的来源一致\",{\"1\":{\"757\":1}}],[\"的resumecapability\",{\"1\":{\"744\":1}}],[\"的result实例保存了计算结果\",{\"1\":{\"614\":1}}],[\"的环境就配置好了\",{\"1\":{\"679\":1}}],[\"的分享\",{\"1\":{\"813\":1}}],[\"的分支管理\",{\"0\":{\"674\":1}}],[\"的分析基础上进行对比分析\",{\"1\":{\"380\":1}}],[\"的仓库\",{\"1\":{\"672\":1}}],[\"的用户名\",{\"1\":{\"672\":1}}],[\"的用法做了一些简单的整理\",{\"1\":{\"189\":1}}],[\"的账号和密码\",{\"1\":{\"671\":1}}],[\"的形式如下\",{\"1\":{\"663\":1}}],[\"的后缀\",{\"1\":{\"695\":1}}],[\"的后面\",{\"1\":{\"662\":1}}],[\"的后台线程进行\",{\"1\":{\"30\":1}}],[\"的单个值\",{\"1\":{\"645\":1}}],[\"的单例加载图片\",{\"1\":{\"398\":1}}],[\"的取消只会向下传播\",{\"1\":{\"642\":1}}],[\"的取值限定了他们的范围\",{\"1\":{\"412\":1}}],[\"的构建\",{\"1\":{\"629\":1}}],[\"的构造方法或者\",{\"1\":{\"361\":1}}],[\"的构造方法中它被赋值给\",{\"1\":{\"332\":1}}],[\"的生产和收集很消耗时间时\",{\"1\":{\"629\":1}}],[\"的生命周期不同步\",{\"1\":{\"160\":1}}],[\"的生命周期也不会受影响\",{\"1\":{\"30\":1}}],[\"的协程上下文一致\",{\"1\":{\"629\":1}}],[\"的独门秘籍\",{\"1\":{\"627\":1,\"647\":1}}],[\"的t需要与实际的group的t保持一致\",{\"1\":{\"618\":1}}],[\"的textspan和children都是null\",{\"1\":{\"265\":1}}],[\"的fetch\",{\"1\":{\"618\":1}}],[\"的foreachtween\",{\"1\":{\"307\":1}}],[\"的阶乘时会溢出\",{\"1\":{\"614\":1}}],[\"的设计是围绕着原子性\",{\"1\":{\"604\":1}}],[\"的线程实现是映射到系统线程的\",{\"1\":{\"603\":1}}],[\"的线程池中执行spawnisolatetask\",{\"1\":{\"749\":1}}],[\"的线程池中执行\",{\"1\":{\"247\":1}}],[\"的第二个参数\",{\"1\":{\"761\":1}}],[\"的第二个闹钟时\",{\"1\":{\"11\":1,\"15\":1}}],[\"的第一周\",{\"1\":{\"575\":1}}],[\"的加密\",{\"1\":{\"556\":1}}],[\"的变量\",{\"1\":{\"554\":1}}],[\"的变化实现\",{\"1\":{\"439\":1}}],[\"的变化展示不同部分的\",{\"1\":{\"424\":1}}],[\"的变化来重新绘制\",{\"1\":{\"423\":1}}],[\"的变化并自动触发\",{\"1\":{\"307\":1}}],[\"的变化\",{\"1\":{\"307\":1,\"405\":1}}],[\"的变化值\",{\"1\":{\"147\":1}}],[\"的初始化进行同步锁呢\",{\"1\":{\"547\":1}}],[\"的回答\",{\"1\":{\"542\":1}}],[\"的回调\",{\"1\":{\"243\":1,\"244\":1}}],[\"的某个仓库\",{\"1\":{\"673\":1}}],[\"的某个父类\",{\"1\":{\"541\":1}}],[\"的某个子类\",{\"1\":{\"540\":1}}],[\"的超类型为t\",{\"1\":{\"541\":1}}],[\"的向上转型\",{\"1\":{\"539\":1}}],[\"的容器应该也要能安全的保存\",{\"1\":{\"539\":1}}],[\"的删除涉及到数组\",{\"1\":{\"523\":1}}],[\"的键值对等信息\",{\"1\":{\"523\":1}}],[\"的倍数\",{\"1\":{\"519\":1}}],[\"的长度超过这个范围\",{\"1\":{\"519\":1}}],[\"的这个回答\",{\"1\":{\"517\":1}}],[\"的意义存疑\",{\"1\":{\"516\":1}}],[\"的疑惑\",{\"1\":{\"508\":1}}],[\"的hash值\",{\"1\":{\"502\":1}}],[\"的高位和地位进行按位异或\",{\"1\":{\"500\":1}}],[\"的高度无法在屏幕中完全展示\",{\"1\":{\"434\":1}}],[\"的静态变量\",{\"1\":{\"497\":1}}],[\"的静态方法\",{\"1\":{\"349\":1}}],[\"的动态链接\",{\"1\":{\"496\":1}}],[\"的所有类\",{\"1\":{\"484\":1}}],[\"的所有子\",{\"1\":{\"26\":1}}],[\"的区域\",{\"1\":{\"462\":1}}],[\"的区别如下\",{\"1\":{\"761\":1}}],[\"的区别\",{\"0\":{\"623\":1,\"637\":1},\"1\":{\"579\":1}}],[\"的区别区别\",{\"0\":{\"561\":1}}],[\"的区别以及优缺点\",{\"1\":{\"124\":1}}],[\"的区别在于\",{\"1\":{\"35\":1}}],[\"的压力\",{\"1\":{\"445\":1}}],[\"的关键在于\",{\"1\":{\"445\":1}}],[\"的关系如下\",{\"1\":{\"374\":1}}],[\"的关系\",{\"1\":{\"251\":1}}],[\"的关系前文已经描述了\",{\"1\":{\"193\":1}}],[\"的部分比较多就会非常耗费性能\",{\"1\":{\"442\":1}}],[\"的部分方法\",{\"1\":{\"131\":1}}],[\"的偏移\",{\"1\":{\"440\":1}}],[\"的范围\",{\"1\":{\"439\":1}}],[\"的范围时\",{\"1\":{\"415\":1}}],[\"的父节点设置为黑色\",{\"1\":{\"904\":1}}],[\"的父\",{\"1\":{\"759\":2}}],[\"的父级需要指定指定主轴方向约束\",{\"1\":{\"439\":1}}],[\"的父类\",{\"1\":{\"360\":1,\"431\":1}}],[\"的父类可以创建自己的\",{\"1\":{\"259\":1}}],[\"的模式\",{\"1\":{\"438\":1}}],[\"的简单使用\",{\"1\":{\"434\":1}}],[\"的懒加载从而避免创建无法通过\",{\"1\":{\"431\":1}}],[\"的反方向展示\",{\"1\":{\"427\":1}}],[\"的center为锚点\",{\"1\":{\"427\":1}}],[\"的child是\",{\"1\":{\"263\":1}}],[\"的child\",{\"1\":{\"259\":1}}],[\"的child中\",{\"1\":{\"256\":1}}],[\"的原理和使用方法\",{\"1\":{\"598\":1}}],[\"的原因\",{\"1\":{\"426\":1}}],[\"的原创文章\",{\"1\":{\"138\":1,\"528\":1}}],[\"的文件\",{\"1\":{\"806\":1}}],[\"的文本方向\",{\"1\":{\"424\":1}}],[\"的文章可知由于每种屏幕宽\",{\"1\":{\"100\":1}}],[\"的文章\",{\"1\":{\"0\":1}}],[\"的list<widget>\",{\"1\":{\"422\":1}}],[\"的创建工作已经完成\",{\"1\":{\"759\":1}}],[\"的创建的\",{\"1\":{\"420\":1}}],[\"的创建实际上是\",{\"1\":{\"234\":1}}],[\"的滚动事件进行组合\",{\"1\":{\"418\":1}}],[\"的通知\",{\"1\":{\"418\":2}}],[\"的重点\",{\"1\":{\"418\":1}}],[\"的手势事件都会由\",{\"1\":{\"415\":1}}],[\"的影响\",{\"1\":{\"414\":1}}],[\"的不同分别创建\",{\"1\":{\"424\":1}}],[\"的不同分别创建两种\",{\"1\":{\"424\":1}}],[\"的不同创建两种\",{\"1\":{\"424\":1}}],[\"的不同\",{\"1\":{\"412\":1,\"431\":1}}],[\"的不同状态分别更新\",{\"1\":{\"368\":1}}],[\"的配合\",{\"1\":{\"405\":1}}],[\"的nestedscrollview\",{\"1\":{\"405\":1}}],[\"的尺寸之和\",{\"1\":{\"444\":1}}],[\"的尺寸为\",{\"1\":{\"444\":1}}],[\"的尺寸变化之后会调用其\",{\"1\":{\"415\":1}}],[\"的尺寸\",{\"1\":{\"405\":1,\"439\":3}}],[\"的尺寸多出一个\",{\"1\":{\"405\":1}}],[\"的尺寸如何\",{\"1\":{\"405\":1}}],[\"的尺寸和位置参数\",{\"1\":{\"112\":1}}],[\"的主轴方向尺寸\",{\"1\":{\"405\":1}}],[\"的主轴尺寸\",{\"1\":{\"405\":3,\"420\":1}}],[\"的主轴尺寸为\",{\"1\":{\"405\":1}}],[\"的主要作用是借助rawimagedatamap提供了缓存图片原始数据的功能\",{\"1\":{\"384\":1}}],[\"的主要作用是根据传入的\",{\"1\":{\"357\":1}}],[\"的主要不同在于extendednetworkimageprovider的实现\",{\"1\":{\"382\":1}}],[\"的主要区别在于\",{\"1\":{\"359\":1}}],[\"的主要子类之一\",{\"1\":{\"358\":1}}],[\"的主要逻辑放到\",{\"0\":{\"633\":1}}],[\"的主要逻辑在他的build\",{\"1\":{\"436\":1}}],[\"的主要逻辑在\",{\"1\":{\"366\":1}}],[\"的主要逻辑在对应的\",{\"1\":{\"310\":1}}],[\"的主要逻辑也在继承自\",{\"1\":{\"308\":1}}],[\"的主要业务逻辑\",{\"1\":{\"126\":1}}],[\"的进一步封装\",{\"1\":{\"404\":1}}],[\"的话会使用上级最近的\",{\"1\":{\"436\":1}}],[\"的话\",{\"1\":{\"403\":1,\"440\":1,\"587\":1,\"753\":1,\"754\":1,\"757\":1}}],[\"的滑动效果\",{\"1\":{\"441\":1}}],[\"的滑动事件都会通过\",{\"1\":{\"420\":1}}],[\"的滑动事件都归集到\",{\"1\":{\"415\":1}}],[\"的滑动事件组合起来\",{\"1\":{\"419\":1}}],[\"的滑动事件绑定在一起\",{\"1\":{\"112\":1}}],[\"的滑动是独立的两个事件\",{\"1\":{\"403\":1}}],[\"的滑动联动\",{\"1\":{\"403\":1,\"420\":1}}],[\"的滑动\",{\"1\":{\"402\":1,\"405\":1}}],[\"的物理属性\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"的封装\",{\"1\":{\"402\":1,\"422\":1,\"423\":1,\"433\":1}}],[\"的build\",{\"1\":{\"391\":1}}],[\"的build方法\",{\"1\":{\"264\":1}}],[\"的功能\",{\"1\":{\"385\":1,\"731\":1,\"807\":1}}],[\"的架构图如下\",{\"1\":{\"380\":1}}],[\"的架构依次有\",{\"1\":{\"121\":1}}],[\"的拓展版\",{\"1\":{\"381\":1}}],[\"的拓展\",{\"1\":{\"380\":1}}],[\"的拓展组件\",{\"1\":{\"380\":1}}],[\"的二次开发\",{\"1\":{\"376\":1}}],[\"的网络图片\",{\"1\":{\"376\":1}}],[\"的sunflower\",{\"1\":{\"781\":1}}],[\"的send\",{\"1\":{\"759\":1}}],[\"的sendport的\",{\"1\":{\"248\":1}}],[\"的sizebytes可能为\",{\"1\":{\"375\":1}}],[\"的全部顶点\",{\"1\":{\"849\":1}}],[\"的全局方法\",{\"1\":{\"372\":1}}],[\"的全过程\",{\"1\":{\"179\":1}}],[\"的处理\",{\"1\":{\"360\":1}}],[\"的视觉效果\",{\"1\":{\"353\":1}}],[\"的呢\",{\"1\":{\"347\":1}}],[\"的显示\",{\"1\":{\"368\":1}}],[\"的显示与否\",{\"1\":{\"347\":1}}],[\"的显示效果\",{\"1\":{\"347\":1}}],[\"的正方形\",{\"1\":{\"343\":1}}],[\"的圆\",{\"1\":{\"343\":1}}],[\"的示意图\",{\"1\":{\"343\":1}}],[\"的示例\",{\"1\":{\"282\":1}}],[\"的组合效果\",{\"1\":{\"343\":1}}],[\"的组织下\",{\"1\":{\"265\":1}}],[\"的样式\",{\"1\":{\"343\":1,\"352\":1}}],[\"的上层有一个叠加层\",{\"1\":{\"341\":1}}],[\"的属性\",{\"1\":{\"340\":1}}],[\"的作用于\",{\"1\":{\"357\":1}}],[\"的作用\",{\"1\":{\"327\":1}}],[\"的帧刷新\",{\"1\":{\"320\":1,\"335\":1}}],[\"的各个构造方法创建指定的\",{\"1\":{\"377\":1}}],[\"的各个子类也只需要实现transform方法即可\",{\"1\":{\"357\":1}}],[\"的各个\",{\"1\":{\"315\":1}}],[\"的各个属性\",{\"1\":{\"314\":1}}],[\"的各个方法执行业务逻辑\",{\"1\":{\"125\":1}}],[\"的工作\",{\"1\":{\"310\":1}}],[\"的其他子类\",{\"1\":{\"309\":1}}],[\"的消息循环机制有关\",{\"1\":{\"292\":1}}],[\"的消息队列尾部\",{\"1\":{\"160\":1}}],[\"的onloadresult方法中对获取到的powerimageresult进行处理之后回调powerimagebaserequest的onloadsuccess\",{\"1\":{\"399\":1}}],[\"的onstop\",{\"1\":{\"287\":1}}],[\"的onpostresume\",{\"1\":{\"287\":1}}],[\"的onpause\",{\"1\":{\"287\":1}}],[\"的对比\",{\"0\":{\"283\":1}}],[\"的对象头+引用\",{\"1\":{\"519\":1}}],[\"的对象未被标记而出错\",{\"1\":{\"472\":1}}],[\"的对象\",{\"1\":{\"25\":1}}],[\"的界面有我的花园\",{\"1\":{\"781\":1}}],[\"的界面\",{\"1\":{\"279\":1}}],[\"的规则比较\",{\"1\":{\"896\":1}}],[\"的规则处理\",{\"1\":{\"836\":2}}],[\"的规则\",{\"1\":{\"273\":1,\"413\":1}}],[\"的机制导致的\",{\"1\":{\"273\":1}}],[\"的渲染流程如图\",{\"1\":{\"269\":1}}],[\"的渲染树中\",{\"1\":{\"256\":1}}],[\"的widget分为statefulwidget和statelesswidget\",{\"1\":{\"269\":1}}],[\"的粘合剂\",{\"1\":{\"266\":1}}],[\"的intent或线程间通信中\",{\"1\":{\"593\":1}}],[\"的inheritedwidget\",{\"1\":{\"273\":1}}],[\"的insertrenderobjectchild方法中先是查找当前\",{\"1\":{\"265\":1}}],[\"的id\",{\"1\":{\"189\":1}}],[\"的步骤一样\",{\"1\":{\"263\":1}}],[\"的updatechild方法\",{\"1\":{\"263\":1}}],[\"的updatechild方法被创建并被buildowner\",{\"1\":{\"262\":1}}],[\"的定义是\",{\"1\":{\"422\":1}}],[\"的定义\",{\"1\":{\"262\":1}}],[\"的定位是官方\",{\"1\":{\"381\":1}}],[\"的定位\",{\"1\":{\"75\":2}}],[\"的继承关系\",{\"1\":{\"261\":1,\"438\":1}}],[\"的源码实现做一简单分析\",{\"1\":{\"402\":1,\"433\":1}}],[\"的源码可以发现\",{\"1\":{\"393\":1}}],[\"的源码可以看到\",{\"1\":{\"358\":1}}],[\"的源码\",{\"1\":{\"259\":1,\"357\":1,\"383\":1}}],[\"的根\",{\"1\":{\"258\":1}}],[\"的根节点renderview绑定\",{\"1\":{\"256\":1}}],[\"的根节点renderview\",{\"1\":{\"253\":1}}],[\"的根节点\",{\"1\":{\"252\":1,\"253\":1,\"257\":1}}],[\"的performrebuild\",{\"1\":{\"270\":1}}],[\"的pipelineowner\",{\"1\":{\"254\":1}}],[\"的prepare\",{\"1\":{\"50\":1}}],[\"的插入\",{\"1\":{\"254\":1}}],[\"的博客\",{\"1\":{\"250\":1}}],[\"的参数\",{\"1\":{\"247\":1}}],[\"的名称\",{\"1\":{\"246\":1}}],[\"的名字发给\",{\"1\":{\"138\":1}}],[\"的指令\",{\"0\":{\"245\":1}}],[\"的情况下\",{\"1\":{\"442\":1}}],[\"的情况外\",{\"1\":{\"324\":1}}],[\"的情况\",{\"1\":{\"236\":1,\"319\":2,\"604\":1,\"850\":1}}],[\"的唤醒时间wakeuptime\",{\"1\":{\"234\":1}}],[\"的返回类型不是\",{\"1\":{\"663\":1}}],[\"的返回值\",{\"1\":{\"430\":1}}],[\"的返回\",{\"1\":{\"231\":1}}],[\"的地方\",{\"1\":{\"226\":1,\"423\":1,\"474\":1}}],[\"的力量之源\",{\"1\":{\"204\":1}}],[\"的测试数据\",{\"1\":{\"196\":1}}],[\"的测量宽\",{\"1\":{\"157\":1}}],[\"的包装类\",{\"1\":{\"190\":1,\"372\":1}}],[\"的信息不同影响到绘制\",{\"1\":{\"333\":1}}],[\"的信息\",{\"1\":{\"189\":1}}],[\"的布局文件中添加一个\",{\"1\":{\"189\":2}}],[\"的宽度为\",{\"1\":{\"182\":1}}],[\"的宽高\",{\"0\":{\"160\":1},\"1\":{\"158\":1,\"160\":2}}],[\"的启动过程拦截\",{\"1\":{\"180\":1}}],[\"的转换\",{\"1\":{\"179\":1}}],[\"的过程中\",{\"1\":{\"775\":1}}],[\"的过程在isolate\",{\"1\":{\"756\":1}}],[\"的过程叫做注入\",{\"1\":{\"199\":1}}],[\"的过程\",{\"0\":{\"270\":1},\"1\":{\"176\":1,\"343\":1,\"360\":1,\"766\":1}}],[\"的过程是通过反射\",{\"1\":{\"176\":1}}],[\"的getchildmeasurespec\",{\"1\":{\"159\":1}}],[\"的getbinder\",{\"1\":{\"83\":1}}],[\"的控件必须重写onmeasure\",{\"1\":{\"159\":1}}],[\"的大小范围\",{\"1\":{\"439\":1}}],[\"的大小则随着\",{\"1\":{\"343\":1}}],[\"的大小固定为var\",{\"1\":{\"343\":1}}],[\"的大小为固有高度\",{\"1\":{\"445\":1}}],[\"的大小为准\",{\"1\":{\"335\":1}}],[\"的大小为\",{\"1\":{\"333\":1}}],[\"的大小显示\",{\"1\":{\"277\":1}}],[\"的大小比这个maxszie要小的话\",{\"1\":{\"276\":1}}],[\"的大小\",{\"1\":{\"159\":1,\"300\":1,\"314\":1,\"329\":1,\"342\":1,\"343\":4,\"521\":1}}],[\"的具体方法\",{\"1\":{\"753\":1}}],[\"的具体大小\",{\"1\":{\"158\":1}}],[\"的具体显示内容\",{\"1\":{\"157\":1}}],[\"的具体值并执行\",{\"1\":{\"75\":1}}],[\"的四个顶点坐标和实际的宽\",{\"1\":{\"157\":1}}],[\"的最大固有高度时\",{\"1\":{\"445\":1}}],[\"的最大尺寸\",{\"1\":{\"440\":1}}],[\"的最大滑动范围\",{\"1\":{\"405\":1}}],[\"的最大可滑动范围\",{\"1\":{\"405\":1}}],[\"的最大个数和总大小限制都不会管理这部分图片\",{\"1\":{\"376\":1}}],[\"的最大区别在于\",{\"1\":{\"125\":1}}],[\"的最小高\",{\"1\":{\"189\":1}}],[\"的最终大小就是这个值\",{\"1\":{\"158\":1}}],[\"的最终宽\",{\"1\":{\"157\":1}}],[\"的绘制过程\",{\"1\":{\"251\":1}}],[\"的绘制和\",{\"1\":{\"160\":1}}],[\"的绘制分为\",{\"1\":{\"157\":1}}],[\"的绘制\",{\"0\":{\"157\":1},\"1\":{\"332\":1}}],[\"的自定义属性\",{\"1\":{\"153\":1}}],[\"的总长度\",{\"1\":{\"147\":1}}],[\"的学习笔记整理\",{\"1\":{\"140\":1}}],[\"的结构\",{\"1\":{\"508\":1}}],[\"的结构示意\",{\"1\":{\"266\":1}}],[\"的结果是\",{\"1\":{\"418\":1}}],[\"的结果输入到less中\",{\"1\":{\"137\":1}}],[\"的结合\",{\"1\":{\"30\":1}}],[\"的图可以很形象的解释\",{\"1\":{\"131\":1}}],[\"的中心\",{\"1\":{\"126\":1}}],[\"的也是一个抽象类\",{\"1\":{\"126\":1}}],[\"的代码\",{\"1\":{\"126\":1}}],[\"的代码实现\",{\"1\":{\"123\":1}}],[\"的负担\",{\"1\":{\"126\":1}}],[\"的基本使用\",{\"1\":{\"209\":1}}],[\"的基本信息如最小高度\",{\"1\":{\"189\":1}}],[\"的基本上会立即\",{\"1\":{\"13\":1}}],[\"的基础之上\",{\"1\":{\"126\":1}}],[\"的事件转发给\",{\"1\":{\"405\":1}}],[\"的事件\",{\"1\":{\"125\":1}}],[\"的耦合降低\",{\"1\":{\"125\":1}}],[\"的耦合问题\",{\"1\":{\"125\":1}}],[\"的抽象类与\",{\"1\":{\"126\":1}}],[\"的抽象类\",{\"1\":{\"123\":1}}],[\"的抽象接口和\",{\"1\":{\"123\":1}}],[\"的交互设计\",{\"1\":{\"422\":1}}],[\"的交互\",{\"1\":{\"123\":1}}],[\"的逻辑比较简单\",{\"1\":{\"407\":1}}],[\"的逻辑要简单的多\",{\"1\":{\"310\":1}}],[\"的逻辑\",{\"1\":{\"123\":1,\"126\":1}}],[\"的展示\",{\"1\":{\"122\":1}}],[\"的内存\",{\"1\":{\"516\":1}}],[\"的内存也在\",{\"1\":{\"397\":1}}],[\"的内容的话\",{\"1\":{\"444\":1}}],[\"的内容实现滑动效果提供了可能\",{\"1\":{\"439\":1}}],[\"的内容大于父级约束时\",{\"1\":{\"439\":1}}],[\"的内容绘制在屏幕上面\",{\"1\":{\"372\":1}}],[\"的内容只会突然变化为\",{\"1\":{\"308\":1}}],[\"的内容\",{\"1\":{\"173\":1,\"257\":1,\"300\":1,\"314\":1,\"439\":2,\"440\":1,\"631\":1,\"735\":1}}],[\"的内容滑动的效果\",{\"1\":{\"75\":1}}],[\"的内部类\",{\"1\":{\"122\":1}}],[\"的专栏\",{\"1\":{\"112\":1,\"113\":1}}],[\"的一部分\",{\"1\":{\"769\":1}}],[\"的一部分内容来实现滑动的视觉设计效果\",{\"1\":{\"422\":1}}],[\"的一下变量\",{\"0\":{\"718\":1}}],[\"的一些按位与计算的问题\",{\"1\":{\"508\":1}}],[\"的一些通用方法\",{\"1\":{\"425\":1}}],[\"的一些知识点\",{\"0\":{\"156\":1}}],[\"的一个句柄\",{\"1\":{\"371\":1}}],[\"的一次细节较真\",{\"1\":{\"112\":1,\"113\":1}}],[\"的一系列过程\",{\"1\":{\"23\":1}}],[\"的注解\",{\"1\":{\"112\":1}}],[\"的状态不同而被调用对应方法\",{\"1\":{\"138\":1}}],[\"的状态\",{\"1\":{\"112\":1,\"126\":1,\"282\":1,\"317\":2,\"419\":1}}],[\"的行为改变\",{\"1\":{\"112\":1}}],[\"的行为和另一个子\",{\"1\":{\"110\":1}}],[\"的效果是一样的\",{\"1\":{\"159\":1}}],[\"的效果和\",{\"1\":{\"159\":1}}],[\"的效果\",{\"1\":{\"110\":1,\"357\":1}}],[\"的实现在\",{\"1\":{\"759\":1}}],[\"的实现比较简单\",{\"1\":{\"430\":1}}],[\"的实现做了简单分析\",{\"1\":{\"422\":1}}],[\"的实现也比较简单\",{\"1\":{\"311\":1}}],[\"的实现和用法进行简单分析\",{\"1\":{\"300\":1}}],[\"的实现方法\",{\"1\":{\"138\":1}}],[\"的实现可参考\",{\"1\":{\"126\":1}}],[\"的实现\",{\"1\":{\"126\":1,\"221\":1,\"233\":1,\"265\":1,\"391\":1,\"405\":1,\"640\":1,\"711\":1,\"749\":1}}],[\"的实现类\",{\"1\":{\"110\":1,\"111\":1,\"243\":1}}],[\"的实例\",{\"1\":{\"110\":1,\"112\":1,\"199\":1}}],[\"的子节点\",{\"1\":{\"266\":1}}],[\"的子\",{\"1\":{\"110\":1,\"111\":2}}],[\"的子类继承\",{\"1\":{\"565\":1}}],[\"的子类的\",{\"1\":{\"540\":1}}],[\"的子类借助\",{\"1\":{\"431\":1}}],[\"的子类只需要按照要求提供\",{\"1\":{\"423\":1}}],[\"的子类只需要重写\",{\"1\":{\"358\":1}}],[\"的子类可以满足基本的需求\",{\"1\":{\"311\":1}}],[\"的子类一样\",{\"1\":{\"308\":1}}],[\"的子类主要实现\",{\"1\":{\"307\":1}}],[\"的子类\",{\"1\":{\"62\":1,\"264\":1,\"308\":1,\"335\":1,\"357\":1,\"360\":1,\"404\":1,\"431\":1,\"540\":2,\"541\":1,\"787\":1}}],[\"的活动联结起来\",{\"1\":{\"110\":1}}],[\"的活动和\",{\"1\":{\"35\":1}}],[\"的产品\",{\"1\":{\"104\":1}}],[\"的在不同\",{\"1\":{\"100\":1}}],[\"的屏幕上占\",{\"1\":{\"100\":1}}],[\"的屏幕上\",{\"1\":{\"100\":1}}],[\"的key与要查询的key\",{\"1\":{\"92\":1}}],[\"的两倍\",{\"1\":{\"92\":1}}],[\"的方式存储和管理与\",{\"1\":{\"785\":1}}],[\"的方式\",{\"0\":{\"742\":1}}],[\"的方式进行计算\",{\"1\":{\"629\":1}}],[\"的方式之一\",{\"1\":{\"82\":1}}],[\"的方向展示\",{\"1\":{\"427\":1}}],[\"的方法只能调取无参构造函数\",{\"1\":{\"785\":1}}],[\"的方法进行了一次封装\",{\"1\":{\"710\":1}}],[\"的方法来达到这个目的\",{\"1\":{\"612\":1}}],[\"的方法中\",{\"1\":{\"415\":1}}],[\"的方法是放到了另外一个抽象类里面然后再导入\",{\"1\":{\"213\":1}}],[\"的方法传递用户\",{\"1\":{\"126\":1}}],[\"的方法\",{\"1\":{\"62\":1,\"223\":1,\"226\":1,\"256\":1,\"264\":1,\"357\":1,\"404\":1,\"415\":1,\"417\":2,\"425\":2,\"662\":1}}],[\"的类匹配\",{\"1\":{\"767\":1}}],[\"的类的序列化\",{\"0\":{\"585\":1}}],[\"的类\",{\"1\":{\"309\":1}}],[\"的类型只能是\",{\"1\":{\"438\":1}}],[\"的类型是否为指定的\",{\"1\":{\"426\":1}}],[\"的类型取出对应的pendingtimers然后再\",{\"1\":{\"238\":1}}],[\"的类型\",{\"1\":{\"76\":1,\"358\":1,\"426\":2}}],[\"的类目\",{\"1\":{\"71\":1}}],[\"的位置和大小\",{\"1\":{\"352\":1}}],[\"的位置信息\",{\"1\":{\"348\":1}}],[\"的位置\",{\"1\":{\"74\":1,\"112\":2,\"896\":1}}],[\"的左上角在\",{\"1\":{\"440\":1}}],[\"的左上角坐标\",{\"1\":{\"74\":1}}],[\"的左上角顶点为原点\",{\"1\":{\"74\":1}}],[\"的坐标系以左上角为原点\",{\"1\":{\"333\":1}}],[\"的坐标原点位于屏幕左上角\",{\"1\":{\"148\":1}}],[\"的坐标满足\",{\"1\":{\"144\":1}}],[\"的坐标信息有以下几种\",{\"1\":{\"74\":1}}],[\"的坐标\",{\"0\":{\"74\":1}}],[\"的引用不为\",{\"1\":{\"474\":1}}],[\"的引用进行操作\",{\"1\":{\"138\":1}}],[\"的引用在所有\",{\"1\":{\"138\":1}}],[\"的引用来操作数据\",{\"1\":{\"123\":1}}],[\"的引用产生耦合\",{\"1\":{\"122\":1}}],[\"的引用\",{\"1\":{\"71\":1,\"124\":1,\"138\":2,\"273\":1,\"496\":1}}],[\"的流程创建\",{\"1\":{\"417\":1}}],[\"的流程\",{\"1\":{\"71\":1}}],[\"的语言\",{\"1\":{\"69\":1}}],[\"的权限验证\",{\"0\":{\"66\":1}}],[\"的死亡事件\",{\"1\":{\"63\":1}}],[\"的死亡就行了监听\",{\"1\":{\"63\":1}}],[\"的android\",{\"1\":{\"57\":1,\"159\":1}}],[\"的请求\",{\"1\":{\"57\":1}}],[\"的使用之\",{\"0\":{\"189\":1}}],[\"的使用及实现原理\",{\"1\":{\"96\":1,\"523\":1,\"524\":1}}],[\"的使用可以参考这篇文章\",{\"1\":{\"82\":1}}],[\"的使用\",{\"0\":{\"57\":1},\"1\":{\"166\":1,\"781\":1}}],[\"的获取方式\",{\"0\":{\"272\":1}}],[\"的获取\",{\"0\":{\"55\":1}}],[\"的dispatchmessage\",{\"1\":{\"53\":1}}],[\"的dispatchtouchevent\",{\"1\":{\"26\":2}}],[\"的私有进程中进行\",{\"1\":{\"36\":1}}],[\"的距离\",{\"1\":{\"33\":1}}],[\"的值不会越界\",{\"1\":{\"412\":1}}],[\"的值时自动切换到第二个并回调\",{\"1\":{\"317\":1}}],[\"的值超过第一个\",{\"1\":{\"317\":1}}],[\"的值从\",{\"1\":{\"316\":1}}],[\"的值计算当前的角度\",{\"1\":{\"310\":1}}],[\"的值变化时\",{\"1\":{\"329\":1}}],[\"的值变化\",{\"1\":{\"310\":2}}],[\"的值并计算设置\",{\"1\":{\"312\":1}}],[\"的值并刷新\",{\"1\":{\"300\":1,\"314\":1}}],[\"的值并不会变化\",{\"1\":{\"74\":1}}],[\"的值如果是正的话\",{\"1\":{\"75\":1}}],[\"的值便可以更改view\",{\"1\":{\"74\":1}}],[\"的值\",{\"1\":{\"33\":1,\"75\":1,\"159\":1,\"347\":1,\"420\":1,\"425\":1,\"445\":1,\"500\":1,\"690\":1}}],[\"的应用\",{\"1\":{\"31\":1,\"467\":1}}],[\"的背景为透明色\",{\"1\":{\"30\":1}}],[\"的系统会在\",{\"1\":{\"30\":1}}],[\"的时候一直提示有问题\",{\"1\":{\"812\":1}}],[\"的时候指定他的状态为\",{\"1\":{\"740\":1}}],[\"的时候可以添加addonexitlistener\",{\"1\":{\"740\":1}}],[\"的时候使用\",{\"1\":{\"740\":1}}],[\"的时候使其支持滑动\",{\"1\":{\"442\":1}}],[\"的时候不需要else\",{\"1\":{\"615\":1}}],[\"的时候都需要在数组中增删条目\",{\"1\":{\"523\":1}}],[\"的时候都会调用\",{\"1\":{\"333\":1}}],[\"的时候都会增加一个唯一的\",{\"1\":{\"189\":1}}],[\"的时候都会被调用\",{\"1\":{\"36\":1}}],[\"的时候添加\",{\"1\":{\"438\":1}}],[\"的时候才会被\",{\"1\":{\"418\":1}}],[\"的时候将从\",{\"1\":{\"371\":1}}],[\"的时候直接返回\",{\"1\":{\"360\":1}}],[\"的时候就会触发动画从\",{\"1\":{\"308\":1}}],[\"的时候更新\",{\"1\":{\"282\":1}}],[\"的时候修改了\",{\"1\":{\"273\":1}}],[\"的时候会判断\",{\"1\":{\"273\":1}}],[\"的时候会用到\",{\"1\":{\"255\":1}}],[\"的时候调用的是child\",{\"1\":{\"270\":1}}],[\"的时候调用monclicklistener\",{\"1\":{\"27\":1}}],[\"的时候创建\",{\"1\":{\"261\":1}}],[\"的时候默认设置的对齐方式\",{\"1\":{\"260\":1}}],[\"的时候主要执行了三步\",{\"1\":{\"252\":1}}],[\"的时候绘制渐变背景\",{\"1\":{\"146\":1}}],[\"的时候\",{\"1\":{\"85\":1,\"234\":1,\"237\":1,\"238\":2,\"302\":1,\"340\":1,\"375\":1,\"404\":1,\"417\":1,\"430\":1,\"438\":2,\"523\":1,\"528\":1,\"545\":1,\"753\":1,\"757\":1,\"763\":1}}],[\"的时间分发始于\",{\"1\":{\"28\":1}}],[\"的点击事件分发主要涉及到两个方法\",{\"1\":{\"27\":1}}],[\"的\",{\"0\":{\"212\":1,\"213\":1,\"271\":1,\"444\":1,\"445\":1,\"818\":1},\"1\":{\"24\":1,\"25\":1,\"27\":1,\"30\":1,\"33\":1,\"39\":1,\"50\":1,\"53\":1,\"57\":1,\"63\":2,\"71\":2,\"75\":3,\"92\":2,\"101\":1,\"111\":1,\"120\":1,\"126\":2,\"138\":1,\"139\":1,\"143\":1,\"158\":3,\"167\":1,\"183\":1,\"189\":1,\"190\":1,\"193\":2,\"205\":1,\"206\":1,\"231\":1,\"232\":1,\"235\":3,\"238\":2,\"243\":1,\"247\":2,\"249\":1,\"254\":1,\"256\":6,\"257\":1,\"258\":1,\"259\":5,\"263\":1,\"264\":3,\"265\":3,\"273\":6,\"279\":3,\"284\":1,\"285\":1,\"286\":1,\"297\":1,\"308\":3,\"316\":1,\"317\":1,\"327\":1,\"332\":1,\"336\":1,\"341\":1,\"342\":1,\"343\":2,\"346\":2,\"347\":1,\"355\":1,\"361\":1,\"368\":1,\"371\":1,\"375\":4,\"393\":1,\"398\":1,\"402\":6,\"403\":2,\"404\":10,\"405\":11,\"408\":1,\"409\":1,\"411\":1,\"412\":2,\"413\":2,\"415\":2,\"416\":3,\"417\":1,\"418\":4,\"419\":1,\"420\":5,\"422\":11,\"424\":4,\"425\":1,\"426\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"433\":6,\"434\":1,\"436\":1,\"437\":2,\"438\":2,\"439\":3,\"440\":2,\"442\":1,\"444\":6,\"445\":1,\"446\":3,\"501\":1,\"513\":1,\"523\":1,\"562\":1,\"583\":1,\"587\":1,\"612\":2,\"636\":1,\"640\":1,\"645\":1,\"646\":1,\"708\":1,\"724\":2,\"740\":1,\"744\":1,\"747\":1,\"753\":1,\"759\":3,\"760\":1,\"763\":2,\"770\":1,\"772\":1,\"810\":1,\"813\":1,\"819\":1,\"821\":1,\"822\":1}}],[\"的条件\",{\"1\":{\"21\":1}}],[\"的资料\",{\"1\":{\"0\":1}}],[\"拿来主义\",{\"1\":{\"0\":1}}],[\"其元素先进先出\",{\"1\":{\"888\":1}}],[\"其元素先进后出\",{\"1\":{\"887\":1}}],[\"其思路是\",{\"1\":{\"913\":1}}],[\"其思路主要是获取到对应的\",{\"1\":{\"814\":1}}],[\"其思想是\",{\"1\":{\"880\":1,\"896\":1,\"897\":1}}],[\"其速度如下\",{\"1\":{\"869\":1}}],[\"其过程如下图所示\",{\"1\":{\"837\":1}}],[\"其访问节点的顺序如下\",{\"1\":{\"834\":1}}],[\"其置顶文章每页都有\",{\"1\":{\"732\":1}}],[\"其craw\",{\"1\":{\"731\":1}}],[\"其后可以包含aa\",{\"1\":{\"723\":1}}],[\"其所用的\",{\"1\":{\"712\":1}}],[\"其之后的异常不会被处理\",{\"1\":{\"656\":1}}],[\"其它操作\",{\"1\":{\"619\":1}}],[\"其写操作因为要插入内存屏障\",{\"1\":{\"602\":1}}],[\"其大体过程与get\",{\"1\":{\"503\":1}}],[\"其先让\",{\"1\":{\"440\":1}}],[\"其会创建\",{\"1\":{\"426\":1}}],[\"其创建了\",{\"1\":{\"420\":1}}],[\"其创建的\",{\"1\":{\"365\":1}}],[\"其范围是\",{\"1\":{\"412\":4}}],[\"其范围\",{\"1\":{\"412\":1}}],[\"其值一般为\",{\"1\":{\"565\":2}}],[\"其值都只会增大\",{\"1\":{\"412\":1}}],[\"其值等于\",{\"1\":{\"405\":1}}],[\"其逻辑比较简单\",{\"1\":{\"406\":1}}],[\"其在内部更新和维护\",{\"1\":{\"405\":1}}],[\"其只接受可以创建\",{\"1\":{\"405\":1}}],[\"其尺寸为所处的\",{\"1\":{\"405\":1}}],[\"其最大滑动范围为内部滑动视图最大滑动范围之和\",{\"1\":{\"404\":1}}],[\"其最大滑动范围为\",{\"1\":{\"404\":1}}],[\"其底层逻辑依然是对\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"其startloading方法会调用performloadimage方法\",{\"1\":{\"398\":1,\"399\":1}}],[\"其整体架构如下\",{\"1\":{\"388\":1}}],[\"其子类则通过\",{\"1\":{\"431\":1}}],[\"其子类一般只需要重写imageprovider的imagestreamcompleter\",{\"1\":{\"374\":1}}],[\"其子类中一般会监听\",{\"1\":{\"312\":1}}],[\"其混入了widgetsbindingobserver以便监听系统生命周期\",{\"1\":{\"366\":1}}],[\"其提供\",{\"1\":{\"360\":1}}],[\"其主要由三部分组成\",{\"1\":{\"422\":1}}],[\"其主要逻辑都在创建的\",{\"1\":{\"405\":1}}],[\"其主要逻辑在\",{\"1\":{\"360\":1}}],[\"其主要的子类有\",{\"1\":{\"357\":1}}],[\"其主要作用是将rootwidget\",{\"1\":{\"255\":1}}],[\"其evaluate方法内部通过其唯一的抽象方法transform方法实现\",{\"1\":{\"357\":1}}],[\"其效果如图\",{\"1\":{\"342\":1}}],[\"其为\",{\"1\":{\"331\":1}}],[\"其\",{\"1\":{\"324\":1,\"325\":1,\"335\":1,\"355\":1,\"446\":1}}],[\"其有三个子类\",{\"1\":{\"317\":1}}],[\"其接受一个\",{\"1\":{\"309\":1}}],[\"其同样也分为\",{\"1\":{\"309\":1}}],[\"其状态只和构造函数中的参数有关\",{\"1\":{\"281\":1}}],[\"其工程基本的结构如下\",{\"1\":{\"279\":1}}],[\"其继承关系\",{\"1\":{\"262\":1,\"264\":2}}],[\"其本身并不在屏幕上绘制肉眼可见的内容\",{\"1\":{\"261\":1}}],[\"其内部操作可以挂起\",{\"1\":{\"637\":1}}],[\"其内部处理了\",{\"1\":{\"402\":1,\"422\":1,\"433\":1}}],[\"其内部维持有三个\",{\"1\":{\"375\":1}}],[\"其内部的\",{\"1\":{\"341\":1}}],[\"其内部持有一个双向的\",{\"1\":{\"427\":1}}],[\"其内部持有imagestreamcompleter\",{\"1\":{\"375\":1}}],[\"其内部持有\",{\"1\":{\"331\":1}}],[\"其内部持有我们的\",{\"1\":{\"253\":1}}],[\"其内部主要是开启了\",{\"1\":{\"320\":1}}],[\"其内部有方法提供androidinjector\",{\"1\":{\"217\":1}}],[\"其内部先调用了getwindow\",{\"1\":{\"25\":1}}],[\"其基本的原理依旧是利用\",{\"1\":{\"217\":1}}],[\"其宽高等于specsize\",{\"1\":{\"159\":1}}],[\"其次这个\",{\"1\":{\"138\":1}}],[\"其实\",{\"1\":{\"748\":1}}],[\"其实已经被其他线程访问过了\",{\"1\":{\"607\":1}}],[\"其实上述方法也可分为这两个模式\",{\"1\":{\"547\":1}}],[\"其实在后面我们可以看到\",{\"1\":{\"506\":1}}],[\"其实就是使用ui\",{\"1\":{\"371\":1}}],[\"其实通过上述的分析\",{\"1\":{\"262\":1}}],[\"其实是容纳\",{\"1\":{\"404\":1}}],[\"其实是他的\",{\"1\":{\"404\":1}}],[\"其实是\",{\"1\":{\"262\":1}}],[\"其实是一个singlechildrenderobjectwidget\",{\"1\":{\"259\":1}}],[\"其实是通过\",{\"1\":{\"249\":1}}],[\"其实严格来说\",{\"1\":{\"259\":1}}],[\"其实现都是依赖于\",{\"1\":{\"355\":1}}],[\"其实现如下\",{\"1\":{\"224\":1}}],[\"其实现类是\",{\"1\":{\"24\":1}}],[\"其实只要掌握原理\",{\"1\":{\"217\":1}}],[\"其实也包括了各个图形的透明部分\",{\"1\":{\"132\":1}}],[\"其实际对应于\",{\"1\":{\"111\":1}}],[\"其实我们也可以自己实现多渠道打包\",{\"1\":{\"105\":1}}],[\"其余数据仍然无序\",{\"1\":{\"860\":1}}],[\"其余是次要群组\",{\"1\":{\"691\":1}}],[\"其余操作\",{\"0\":{\"659\":1}}],[\"其余\",{\"1\":{\"534\":1}}],[\"其余线程能够立即得知这个更改\",{\"1\":{\"604\":1}}],[\"其余线程中的threadlocal对象也会访问到obj的最新值\",{\"1\":{\"526\":1}}],[\"其余线程阻塞等待\",{\"1\":{\"497\":1}}],[\"其余不会触发初始化\",{\"1\":{\"497\":1}}],[\"其余时候只会触发重新\",{\"1\":{\"438\":1}}],[\"其余时候依靠\",{\"1\":{\"324\":1}}],[\"其余辅助类\",{\"1\":{\"404\":1}}],[\"其余的步骤和我们之前分析的官方\",{\"1\":{\"382\":1}}],[\"其余四种构造方法也都是在此方法的基础上分别指定了各自的\",{\"1\":{\"365\":1}}],[\"其余与父类componentelement\",{\"1\":{\"270\":1}}],[\"其余情况都比较简单\",{\"1\":{\"263\":1}}],[\"其余情况都需要拦截\",{\"1\":{\"26\":1}}],[\"其余为\",{\"1\":{\"190\":1}}],[\"其余属性可选\",{\"1\":{\"111\":1}}],[\"其余内容基本上都完美还原了设计稿的内容\",{\"1\":{\"101\":1}}],[\"其坐标都是以父\",{\"1\":{\"74\":1}}],[\"其点击事件分发用伪代码表示如下\",{\"1\":{\"27\":1}}],[\"其他流如果需要取消\",{\"1\":{\"657\":1}}],[\"其他环境\",{\"1\":{\"621\":2}}],[\"其他线程对齐进行了操作但是该数据最终没有被变化\",{\"1\":{\"607\":1}}],[\"其他线程对\",{\"1\":{\"527\":1}}],[\"其他逻辑\",{\"1\":{\"527\":1}}],[\"其他两个场景都只有\",{\"1\":{\"418\":1}}],[\"其他类型\",{\"1\":{\"391\":1}}],[\"其他类可以调用imageprovider\",{\"1\":{\"374\":1}}],[\"其他类可以通过\",{\"1\":{\"316\":1}}],[\"其他属性\",{\"0\":{\"344\":1}}],[\"其他方法\",{\"0\":{\"322\":1},\"1\":{\"415\":1}}],[\"其他子类\",{\"0\":{\"317\":1}}],[\"其他地方可以使用\",{\"1\":{\"243\":1,\"244\":1}}],[\"其他用法的完全可以触类旁通\",{\"1\":{\"217\":1}}],[\"其他点的曲线坐标和对应的点坐标不一致\",{\"1\":{\"144\":1}}],[\"其他由\",{\"1\":{\"140\":1}}],[\"其他进程也访问该资源\",{\"1\":{\"137\":1}}],[\"其他进行不可访问\",{\"1\":{\"36\":1}}],[\"其他部分要为透明\",{\"1\":{\"130\":1}}],[\"其他代码\",{\"1\":{\"95\":4,\"560\":1}}],[\"其他回调方法\",{\"1\":{\"64\":1}}],[\"其他的参数必须标记方向\",{\"1\":{\"60\":1}}],[\"其他\",{\"1\":{\"26\":1,\"104\":1,\"183\":1,\"239\":1}}],[\"其他没有发现的更是不知几多\",{\"1\":{\"0\":1}}],[\"其中一棵柱子上面有若干个半径依次递减的空心圆盘\",{\"1\":{\"912\":1}}],[\"其中涉及到的第三方网站及其所有资源均属原主所有\",{\"1\":{\"732\":1}}],[\"其中9~10行相当于\",{\"1\":{\"708\":1}}],[\"其中第一个是主要群组\",{\"1\":{\"691\":1}}],[\"其中userdel\",{\"1\":{\"691\":1}}],[\"其中需要注意的有\",{\"1\":{\"554\":1}}],[\"其中引用类型对象大小只计算为\",{\"1\":{\"516\":1}}],[\"其中加载\",{\"1\":{\"490\":1}}],[\"其中的代码出错\",{\"1\":{\"297\":1}}],[\"其中defaultonerror\",{\"1\":{\"296\":1}}],[\"其中file\",{\"1\":{\"243\":1}}],[\"其中较为完整的一篇如下\",{\"1\":{\"180\":1}}],[\"其中activitythreadhandlercallback\",{\"1\":{\"179\":1}}],[\"其中通过\",{\"1\":{\"157\":1}}],[\"其中this\",{\"1\":{\"117\":1}}],[\"其中执行顺序是\",{\"1\":{\"53\":1}}],[\"其中\",{\"1\":{\"43\":1,\"100\":1,\"126\":1,\"144\":1,\"179\":1,\"189\":1,\"196\":3,\"270\":1,\"342\":1,\"398\":2,\"400\":1,\"417\":1,\"516\":1,\"575\":1,\"584\":1,\"618\":1,\"697\":1,\"726\":1,\"827\":1}}],[\"其中onstartcommand\",{\"1\":{\"36\":1}}],[\"其中y是文字\",{\"1\":{\"33\":1}}],[\"其中有部分内容是参考网上的教程\",{\"1\":{\"813\":1}}],[\"其中有\",{\"1\":{\"24\":1}}],[\"其中com\",{\"1\":{\"6\":1}}],[\"其中不可避免有很多未经查实的资料\",{\"1\":{\"0\":1}}],[\"其危害不小\",{\"1\":{\"0\":1}}],[\"我选择的是将博客放在子目录\",{\"1\":{\"813\":1}}],[\"我\",{\"1\":{\"809\":1}}],[\"我使用的版本是\",{\"1\":{\"801\":1}}],[\"我使用到的\",{\"1\":{\"101\":1}}],[\"我就是使用后一种方法\",{\"1\":{\"800\":1}}],[\"我尝试过许多种工具\",{\"1\":{\"798\":1}}],[\"我的花园\",{\"1\":{\"782\":2}}],[\"我的第五个\",{\"1\":{\"779\":1}}],[\"我的第四个\",{\"1\":{\"778\":1}}],[\"我的第三个\",{\"1\":{\"777\":1}}],[\"我的邮箱是\",{\"1\":{\"0\":1}}],[\"我制作的第二款\",{\"1\":{\"776\":1}}],[\"我们还可以通过自定义binding\",{\"1\":{\"784\":1}}],[\"我们还可以注意到\",{\"1\":{\"367\":1}}],[\"我们拿到的\",{\"1\":{\"748\":1}}],[\"我们先来看第一部分\",{\"1\":{\"710\":1}}],[\"我们先看一下他是如何实现\",{\"1\":{\"439\":1}}],[\"我们先看一下几个属性的创建过程\",{\"1\":{\"235\":1}}],[\"我们写个简单的\",{\"1\":{\"587\":1}}],[\"我们写的内容也能正常显示到屏幕上\",{\"1\":{\"257\":1}}],[\"我们得知\",{\"1\":{\"395\":1}}],[\"我们通过networkimage\",{\"1\":{\"374\":1}}],[\"我们通过得到的这个\",{\"1\":{\"138\":1}}],[\"我们大体梳理了图片展示的这部分流程\",{\"1\":{\"373\":1}}],[\"我们以下面这个二叉树为例\",{\"1\":{\"666\":1}}],[\"我们以\",{\"1\":{\"360\":1}}],[\"我们主要关注\",{\"1\":{\"759\":1}}],[\"我们主要关注两件事\",{\"1\":{\"253\":1}}],[\"我们主要将\",{\"1\":{\"342\":1}}],[\"我们分析了\",{\"1\":{\"336\":1,\"355\":1,\"397\":1}}],[\"我们首先来看一下\",{\"1\":{\"316\":1}}],[\"我们简单分析一下\",{\"1\":{\"302\":1}}],[\"我们看一下multichildrenderobjectwidget\",{\"1\":{\"265\":1}}],[\"我们看到threadlocal出现内存泄漏条件还是很苛刻的\",{\"1\":{\"528\":1}}],[\"我们看到\",{\"1\":{\"83\":1,\"323\":1,\"575\":1}}],[\"我们在看一下保存的部分\",{\"1\":{\"587\":1}}],[\"我们在之前的\",{\"1\":{\"342\":1}}],[\"我们在\",{\"1\":{\"262\":1}}],[\"我们应该已经知道\",{\"1\":{\"262\":1}}],[\"我们接下来主要关注一下几个属性\",{\"1\":{\"259\":1}}],[\"我们再看看2019\",{\"1\":{\"576\":1}}],[\"我们再看一下每个枚举类的值\",{\"1\":{\"521\":1}}],[\"我们再看一下\",{\"1\":{\"233\":1}}],[\"我们再\",{\"1\":{\"340\":1}}],[\"我们再来看一下刚刚提到的几个类\",{\"1\":{\"257\":1}}],[\"我们再来看一下renderobjecttowidgetelement调用的父类renderobjectelement\",{\"1\":{\"256\":1}}],[\"我们关注和屏幕渲染有关的\",{\"1\":{\"253\":1}}],[\"我们关注initinstances\",{\"1\":{\"253\":1}}],[\"我们选择\",{\"1\":{\"247\":1}}],[\"我们注意到在\",{\"1\":{\"436\":1}}],[\"我们注意到其中使用了\",{\"1\":{\"398\":1}}],[\"我们注意到给只给richtext\",{\"1\":{\"265\":1}}],[\"我们注意到\",{\"1\":{\"247\":1,\"375\":1,\"759\":1}}],[\"我们已经知道\",{\"1\":{\"244\":1}}],[\"我们依次看一下上述几个方法的具体实现\",{\"1\":{\"231\":1}}],[\"我们也可以监听\",{\"1\":{\"342\":1}}],[\"我们也可以自定义基于\",{\"1\":{\"204\":1}}],[\"我们也看到了\",{\"1\":{\"264\":1}}],[\"我们也还可以看到\",{\"1\":{\"229\":1}}],[\"我们能确定的是\",{\"1\":{\"228\":1}}],[\"我们发现虽然这dagger\",{\"1\":{\"218\":1}}],[\"我们需要有的类只能有一个实例\",{\"1\":{\"205\":1}}],[\"我们需要分别这两个构造方法\",{\"1\":{\"203\":1}}],[\"我们需要在对应的\",{\"1\":{\"784\":1}}],[\"我们需要在\",{\"1\":{\"146\":1}}],[\"我们使用的绝大多数类肯定不止一个构造方法\",{\"1\":{\"203\":1}}],[\"我们要引入另外两个主角\",{\"1\":{\"203\":1}}],[\"我们要绘制的图形\",{\"1\":{\"131\":1}}],[\"我们只要在\",{\"1\":{\"784\":1}}],[\"我们只要计算出center到baseline之间的偏移量\",{\"1\":{\"33\":1}}],[\"我们只关注\",{\"1\":{\"753\":1}}],[\"我们只看和\",{\"1\":{\"243\":1}}],[\"我们只需要在需要使用依赖注入的类中使用诸如androidinjection\",{\"1\":{\"218\":1}}],[\"我们只需要在activity中添加如下代码就可以实现自动注入\",{\"1\":{\"215\":1}}],[\"我们只需要使用\",{\"1\":{\"202\":1}}],[\"我们只需要统一去修改magicfun\",{\"1\":{\"199\":1}}],[\"我们知道此时的specsize是父容器目前可以用的大小\",{\"1\":{\"159\":1}}],[\"我们知道\",{\"1\":{\"159\":1}}],[\"我们知道跨进程的两个\",{\"1\":{\"63\":1}}],[\"我们指定的\",{\"1\":{\"158\":1}}],[\"我们人为的在两个点之间加入两个控制点\",{\"1\":{\"145\":1}}],[\"我们获取的数据可以当做贝塞尔曲线的端点\",{\"1\":{\"143\":1}}],[\"我们会调用\",{\"1\":{\"587\":1}}],[\"我们会发现mibinder的对象会在\",{\"1\":{\"138\":1}}],[\"我们会先创建一个\",{\"1\":{\"138\":1}}],[\"我们将\",{\"1\":{\"126\":1,\"300\":1}}],[\"我们不难发现\",{\"1\":{\"126\":1}}],[\"我们可以处理这两者之间的关系\",{\"1\":{\"785\":1}}],[\"我们可以\",{\"1\":{\"629\":1}}],[\"我们可以将网络请求简化如下\",{\"1\":{\"622\":1}}],[\"我们可以通过修改minimaldaysinfirstweek和firstdayofweek来更改yyyy格式化的值\",{\"1\":{\"577\":1}}],[\"我们可以计算enumclazz\",{\"1\":{\"521\":1}}],[\"我们可以得出以下结论\",{\"1\":{\"440\":1}}],[\"我们可以得知\",{\"1\":{\"257\":1}}],[\"我们可以验证之前的判断\",{\"1\":{\"423\":1}}],[\"我们可以看到\",{\"1\":{\"256\":1,\"372\":1,\"577\":1}}],[\"我们可以看到使用\",{\"1\":{\"83\":1}}],[\"我们可以知道\",{\"1\":{\"249\":1,\"361\":1}}],[\"我们可以在其中定义一些变量<variable\",{\"1\":{\"784\":1}}],[\"我们可以在其内部实例化并返回service类\",{\"1\":{\"203\":1}}],[\"我们可以在编译器的可视化界面中\",{\"1\":{\"783\":1}}],[\"我们可以在源码中看到原因\",{\"1\":{\"587\":1}}],[\"我们可以在过渡页面将\",{\"1\":{\"30\":1}}],[\"我们可以推导出\",{\"1\":{\"196\":1}}],[\"我们可以先计算\",{\"1\":{\"147\":1}}],[\"我们可以使用paint\",{\"1\":{\"146\":1}}],[\"我们可以直接使用messenger\",{\"1\":{\"83\":1}}],[\"我们可以从下面的代码中得到证实\",{\"1\":{\"276\":1}}],[\"我们可以从\",{\"1\":{\"74\":1}}],[\"我们可以选择重新连接服务\",{\"1\":{\"65\":1}}],[\"我们没法直接获取到baseline的坐标\",{\"1\":{\"33\":1}}],[\"我们的操作已经结束了\",{\"1\":{\"638\":1}}],[\"我们的所有\",{\"1\":{\"265\":1}}],[\"我们的\",{\"1\":{\"30\":1,\"251\":1,\"264\":1,\"307\":1,\"405\":1,\"440\":1}}],[\"我们完全可以将其当做主进程的第一个\",{\"1\":{\"30\":1}}],[\"我自己也写过不少这样欠缺思考\",{\"1\":{\"0\":1}}],[\"我会把平时学习的心得体会\",{\"1\":{\"0\":1,\"779\":1}}],[\"累积\",{\"1\":{\"0\":1}}],[\"l1371\",{\"1\":{\"758\":1}}],[\"lwm\",{\"1\":{\"704\":1}}],[\"l展示目录下的文件列表\",{\"1\":{\"688\":1}}],[\"lru\",{\"1\":{\"375\":1,\"384\":1}}],[\"llc\",{\"1\":{\"784\":1}}],[\"ll\",{\"1\":{\"350\":1}}],[\"ltr\",{\"1\":{\"251\":3,\"424\":1}}],[\"l\",{\"1\":{\"137\":4,\"688\":1,\"704\":1}}],[\"ls\",{\"0\":{\"688\":1},\"1\":{\"137\":1,\"688\":2,\"701\":1}}],[\"laforce\",{\"1\":{\"883\":1}}],[\"lafore\",{\"1\":{\"865\":1}}],[\"landscape\",{\"1\":{\"807\":1}}],[\"language\",{\"1\":{\"57\":1,\"767\":2,\"811\":1}}],[\"languages\",{\"1\":{\"0\":1}}],[\"lang\",{\"1\":{\"30\":3,\"71\":3,\"138\":3,\"243\":2,\"247\":1,\"486\":1,\"492\":1,\"497\":2,\"517\":1,\"521\":3,\"552\":1,\"740\":1,\"773\":1,\"849\":1}}],[\"lazy\",{\"1\":{\"629\":1,\"766\":1,\"768\":1}}],[\"lambda1\",{\"1\":{\"621\":2}}],[\"lambda2\",{\"1\":{\"621\":3}}],[\"lambda\",{\"0\":{\"661\":1,\"663\":1},\"1\":{\"514\":1,\"621\":3,\"662\":3,\"663\":9}}],[\"lag\",{\"1\":{\"408\":1}}],[\"laid\",{\"1\":{\"350\":1,\"351\":1}}],[\"laizuling\",{\"1\":{\"149\":1}}],[\"large\",{\"1\":{\"276\":1,\"770\":1}}],[\"lastaxisdirection\",{\"1\":{\"415\":1}}],[\"lastaccessed\",{\"1\":{\"247\":1}}],[\"lastcandrag\",{\"1\":{\"415\":1}}],[\"lastcallback\",{\"1\":{\"225\":6,\"226\":1}}],[\"lasthasscrolledbody\",{\"1\":{\"405\":2}}],[\"laststack\",{\"1\":{\"368\":1,\"369\":1,\"370\":1}}],[\"lastexception\",{\"1\":{\"368\":1,\"369\":1,\"370\":3}}],[\"lastelapsedduration\",{\"1\":{\"320\":1,\"321\":1}}],[\"lastmodified\",{\"1\":{\"247\":1}}],[\"lasttimems\",{\"1\":{\"241\":4,\"243\":1}}],[\"last\",{\"1\":{\"238\":1,\"243\":1,\"244\":1,\"395\":1,\"573\":2,\"761\":2}}],[\"lastzerotimer中\",{\"1\":{\"235\":1}}],[\"lastzerotimer\",{\"1\":{\"235\":4}}],[\"lastprioritycallback\",{\"1\":{\"226\":2}}],[\"lastindex\",{\"1\":{\"145\":1}}],[\"lay\",{\"1\":{\"438\":2}}],[\"layer中\",{\"1\":{\"126\":1}}],[\"layer这三者的层级关系\",{\"1\":{\"126\":1}}],[\"layer和data\",{\"1\":{\"126\":1}}],[\"layer相当于将一些常用\",{\"1\":{\"126\":1}}],[\"layer\",{\"1\":{\"126\":22,\"131\":1,\"254\":1,\"334\":3,\"440\":3}}],[\"layoutmanager=\",{\"1\":{\"784\":1}}],[\"layout>\",{\"1\":{\"784\":2}}],[\"layout=\",{\"1\":{\"783\":1}}],[\"layoutbuilder\",{\"1\":{\"444\":2,\"445\":1}}],[\"layoutinflater\",{\"1\":{\"117\":1}}],[\"layoutparam\",{\"1\":{\"112\":1}}],[\"layoutparams\",{\"1\":{\"76\":5,\"78\":1,\"153\":1,\"158\":1}}],[\"layoutdependson\",{\"1\":{\"112\":3}}],[\"layout\",{\"0\":{\"115\":1,\"182\":1,\"439\":1},\"1\":{\"110\":1,\"111\":8,\"115\":2,\"117\":4,\"118\":2,\"157\":1,\"159\":1,\"167\":6,\"178\":1,\"182\":2,\"189\":14,\"215\":1,\"259\":1,\"332\":1,\"335\":1,\"350\":2,\"405\":1,\"425\":1,\"438\":1,\"439\":4,\"440\":1,\"442\":1,\"445\":2,\"783\":3,\"784\":6}}],[\"launchin\",{\"0\":{\"635\":1},\"1\":{\"652\":1}}],[\"launches\",{\"1\":{\"636\":1}}],[\"launched\",{\"1\":{\"247\":2}}],[\"launcher$appclassloader\",{\"1\":{\"487\":1}}],[\"launcher\",{\"1\":{\"140\":1}}],[\"launch\",{\"1\":{\"125\":1,\"622\":1,\"624\":1,\"625\":3,\"629\":1,\"640\":1,\"810\":1}}],[\"late\",{\"1\":{\"231\":2,\"232\":1,\"243\":2,\"244\":1,\"273\":2,\"302\":2,\"330\":2,\"332\":1,\"348\":2,\"349\":1,\"408\":1,\"416\":2,\"496\":1}}],[\"later\",{\"1\":{\"183\":1,\"232\":1,\"238\":1,\"395\":1,\"753\":1}}],[\"latest\",{\"1\":{\"104\":2,\"630\":1}}],[\"lateinit\",{\"1\":{\"83\":1,\"199\":1,\"201\":1,\"204\":1,\"214\":1,\"215\":1,\"927\":1}}],[\"label=\",{\"1\":{\"105\":1,\"783\":1}}],[\"label\",{\"1\":{\"103\":1,\"370\":1}}],[\"lee0oo0\",{\"1\":{\"824\":1}}],[\"leetcode\",{\"0\":{\"665\":1},\"1\":{\"667\":1}}],[\"lerp\",{\"1\":{\"358\":8}}],[\"lerpdouble\",{\"1\":{\"325\":2}}],[\"less\",{\"1\":{\"137\":1,\"412\":1,\"496\":1,\"685\":1}}],[\"lets\",{\"1\":{\"759\":1}}],[\"letter\",{\"1\":{\"153\":1,\"578\":1}}],[\"letterindex\",{\"1\":{\"152\":1,\"153\":1}}],[\"let\",{\"1\":{\"125\":1,\"237\":1}}],[\"left指针向右移动查找比c大的值\",{\"1\":{\"924\":1}}],[\"leftindex\",{\"1\":{\"859\":9,\"927\":6}}],[\"leftpreorder\",{\"1\":{\"666\":2}}],[\"lefttree\",{\"1\":{\"666\":3}}],[\"leftover\",{\"1\":{\"418\":1}}],[\"left\",{\"1\":{\"74\":3,\"75\":1,\"118\":1,\"153\":1,\"237\":1,\"352\":2,\"424\":1,\"440\":1,\"666\":2,\"833\":1,\"834\":1,\"836\":17,\"924\":1,\"927\":6}}],[\"leafrenderobjectwidget\",{\"1\":{\"377\":1}}],[\"leafrenderwidget\",{\"1\":{\"371\":1}}],[\"least\",{\"1\":{\"376\":1,\"445\":1,\"574\":1}}],[\"leak\",{\"1\":{\"63\":1,\"376\":1,\"464\":1}}],[\"leading\",{\"1\":{\"33\":1}}],[\"length表明了该类型存储数据的长度\",{\"1\":{\"519\":1}}],[\"lengthfrompath\",{\"1\":{\"247\":1}}],[\"length\",{\"1\":{\"87\":1,\"95\":4,\"118\":1,\"147\":1,\"153\":4,\"179\":1,\"186\":1,\"189\":1,\"238\":4,\"241\":1,\"243\":11,\"244\":4,\"247\":2,\"265\":2,\"397\":3,\"403\":2,\"418\":1,\"501\":4,\"504\":2,\"506\":1,\"519\":2,\"532\":3,\"533\":5,\"534\":3,\"557\":5,\"748\":1}}],[\"len\",{\"1\":{\"63\":2,\"486\":3,\"761\":3}}],[\"leveraging\",{\"1\":{\"10\":1}}],[\"level\",{\"1\":{\"10\":2,\"748\":1,\"753\":1,\"769\":1}}],[\"lose\",{\"1\":{\"761\":1}}],[\"lo\",{\"1\":{\"584\":1,\"587\":1}}],[\"loadplatform\",{\"1\":{\"757\":1}}],[\"loadfactor\",{\"1\":{\"500\":2,\"501\":1,\"506\":1,\"523\":1}}],[\"loadclass\",{\"1\":{\"485\":3,\"486\":1,\"819\":1,\"823\":1}}],[\"loadcache尝试从本地文件中读取缓存\",{\"1\":{\"383\":1}}],[\"loadcache\",{\"1\":{\"383\":3}}],[\"loadimage向\",{\"1\":{\"398\":1}}],[\"loadimage\",{\"1\":{\"395\":1,\"398\":3}}],[\"loadingprogress\",{\"1\":{\"369\":1,\"370\":1}}],[\"loading\",{\"0\":{\"492\":1},\"1\":{\"368\":1,\"490\":1,\"492\":1,\"498\":1,\"752\":2,\"771\":1}}],[\"loadingbuilder\",{\"1\":{\"368\":1,\"370\":3}}],[\"loadnetwork\",{\"1\":{\"383\":3}}],[\"loaded\",{\"1\":{\"374\":1,\"376\":1,\"494\":1,\"552\":1,\"753\":1,\"766\":2}}],[\"loader\",{\"1\":{\"140\":4,\"376\":3,\"398\":2,\"485\":2,\"490\":1,\"752\":4}}],[\"loadasync方法时\",{\"1\":{\"398\":1}}],[\"loadasync方法\",{\"1\":{\"394\":1,\"395\":1}}],[\"loadasync\",{\"0\":{\"395\":1},\"1\":{\"374\":4,\"383\":3,\"395\":1,\"397\":1,\"398\":2}}],[\"load方法获取图片\",{\"1\":{\"374\":1}}],[\"load方法获取并缓存到\",{\"1\":{\"374\":1}}],[\"load\",{\"1\":{\"374\":2,\"376\":1,\"383\":3,\"384\":2,\"399\":1,\"500\":1,\"505\":1,\"604\":1,\"757\":1}}],[\"loaddata\",{\"1\":{\"285\":1}}],[\"loadmoviedetails\",{\"1\":{\"126\":1}}],[\"loadurl\",{\"1\":{\"80\":1}}],[\"lowlevelcleanup\",{\"1\":{\"753\":1}}],[\"low\",{\"1\":{\"126\":1,\"557\":2,\"753\":1,\"769\":1}}],[\"lowerbound\",{\"1\":{\"319\":3,\"320\":1,\"321\":1,\"327\":1}}],[\"lower\",{\"1\":{\"10\":1}}],[\"loose\",{\"1\":{\"276\":3}}],[\"lookuplocalfunction\",{\"1\":{\"759\":1}}],[\"lookupexception\",{\"1\":{\"583\":1}}],[\"lookup\",{\"1\":{\"247\":1,\"587\":2,\"767\":1}}],[\"look\",{\"1\":{\"92\":1}}],[\"loop\",{\"0\":{\"221\":1},\"1\":{\"49\":2,\"53\":1,\"56\":1,\"221\":5,\"223\":1,\"226\":4,\"228\":1,\"229\":3,\"230\":3,\"240\":1,\"249\":1,\"285\":1,\"351\":1,\"740\":1,\"744\":1,\"759\":1,\"761\":1,\"762\":2}}],[\"looper在\",{\"1\":{\"56\":1}}],[\"looper\",{\"0\":{\"44\":1,\"47\":1},\"1\":{\"44\":1,\"48\":4,\"49\":2,\"50\":2,\"52\":2,\"193\":10}}],[\"location\",{\"1\":{\"262\":4,\"340\":1,\"496\":1}}],[\"localizations\",{\"1\":{\"265\":1}}],[\"locale\",{\"1\":{\"251\":1,\"262\":1,\"265\":2}}],[\"localhost\",{\"0\":{\"184\":1},\"1\":{\"806\":2}}],[\"local\",{\"1\":{\"71\":1,\"138\":1,\"455\":1,\"511\":2,\"565\":1,\"625\":1,\"686\":1}}],[\"localbinder\",{\"1\":{\"38\":5}}],[\"localservice\",{\"1\":{\"38\":7}}],[\"lockstate\",{\"1\":{\"256\":1}}],[\"lock\",{\"1\":{\"237\":1,\"247\":6,\"645\":1,\"753\":3}}],[\"locked\",{\"1\":{\"76\":1}}],[\"log2​n\",{\"1\":{\"902\":1}}],[\"logn\",{\"1\":{\"855\":1,\"857\":1,\"860\":2,\"880\":1,\"913\":1,\"918\":1}}],[\"logo\",{\"1\":{\"779\":1}}],[\"logout\",{\"1\":{\"700\":1}}],[\"logic\",{\"1\":{\"412\":1}}],[\"loginpresenter\",{\"1\":{\"123\":2}}],[\"loginactivity\",{\"1\":{\"123\":2}}],[\"loginview\",{\"1\":{\"123\":9}}],[\"login\",{\"1\":{\"123\":5,\"700\":1}}],[\"logininteractor\",{\"1\":{\"123\":7}}],[\"logd\",{\"1\":{\"196\":4}}],[\"logexcessivecallbacks\",{\"1\":{\"63\":1}}],[\"log\",{\"1\":{\"35\":5,\"62\":1,\"63\":3,\"64\":2,\"90\":1,\"173\":1,\"215\":1,\"629\":1}}],[\"longstring\",{\"1\":{\"583\":1}}],[\"longsparselongarray\",{\"1\":{\"523\":1}}],[\"longsparsearray\",{\"1\":{\"523\":1}}],[\"long>\",{\"1\":{\"523\":2}}],[\"longcatislooong\",{\"1\":{\"351\":1}}],[\"longer\",{\"1\":{\"351\":2,\"759\":1,\"761\":1}}],[\"long\",{\"1\":{\"11\":3,\"27\":3,\"54\":1,\"247\":1,\"485\":2,\"517\":1,\"560\":5,\"568\":1,\"582\":1,\"586\":1,\"590\":1,\"723\":1}}],[\"love\",{\"1\":{\"0\":1}}],[\"liaohuqiu\",{\"1\":{\"522\":1}}],[\"liangxanhai\",{\"1\":{\"247\":1}}],[\"lifo\",{\"1\":{\"458\":1}}],[\"lifetime\",{\"1\":{\"247\":1}}],[\"lifecyclestate\",{\"1\":{\"251\":1,\"256\":1,\"258\":1,\"259\":1,\"263\":1}}],[\"lifecycle\",{\"1\":{\"139\":1,\"785\":1}}],[\"life\",{\"1\":{\"10\":1}}],[\"lightweight\",{\"1\":{\"751\":1}}],[\"lightgreen\",{\"1\":{\"276\":1}}],[\"lighten\",{\"1\":{\"132\":1}}],[\"limited\",{\"1\":{\"615\":1}}],[\"limit\",{\"1\":{\"244\":1,\"247\":1}}],[\"libraries\",{\"1\":{\"757\":1,\"763\":1}}],[\"library中\",{\"1\":{\"383\":1}}],[\"library\",{\"1\":{\"57\":1,\"141\":2,\"234\":1,\"295\":1,\"333\":2,\"386\":1,\"742\":1,\"745\":1,\"748\":2,\"752\":1,\"753\":2,\"754\":3,\"759\":2}}],[\"lib\",{\"1\":{\"224\":3,\"225\":1,\"226\":2,\"227\":2,\"228\":6,\"229\":2,\"231\":1,\"232\":2,\"233\":1,\"234\":9,\"235\":4,\"236\":2,\"237\":4,\"238\":4,\"243\":9,\"244\":4,\"247\":2,\"252\":1,\"253\":3,\"254\":1,\"255\":1,\"256\":3,\"259\":3,\"262\":2,\"263\":1,\"264\":3,\"265\":6,\"279\":2,\"342\":1,\"372\":1,\"484\":2,\"686\":3,\"740\":3,\"742\":1,\"745\":4,\"747\":9,\"748\":5,\"749\":1,\"750\":1,\"751\":1,\"754\":3,\"759\":4}}],[\"liveimage都继承自\",{\"1\":{\"375\":1}}],[\"liveimages中\",{\"1\":{\"375\":1}}],[\"liveimages\",{\"1\":{\"375\":1,\"376\":8}}],[\"liveimage>\",{\"1\":{\"375\":1}}],[\"liveimage\",{\"1\":{\"375\":2,\"376\":7}}],[\"live\",{\"1\":{\"187\":3,\"375\":2,\"376\":3,\"740\":1,\"753\":1,\"759\":1,\"761\":1}}],[\"livedata的子类mediatorlivedata可以添加多个监听项\",{\"1\":{\"187\":1}}],[\"livedata<string>\",{\"1\":{\"187\":1}}],[\"livedata<moviedetailsview>\",{\"1\":{\"126\":1}}],[\"livedata可以在数据有变化的时候调用订阅者并执行指定方法\",{\"1\":{\"187\":1}}],[\"livedata\",{\"0\":{\"187\":1},\"1\":{\"124\":1,\"125\":1,\"188\":1,\"784\":1}}],[\"likely\",{\"1\":{\"496\":1}}],[\"like\",{\"1\":{\"126\":1,\"234\":1,\"281\":1,\"285\":1,\"731\":1,\"770\":1,\"771\":1}}],[\"listindex++\",{\"1\":{\"921\":1}}],[\"listindex\",{\"1\":{\"921\":1}}],[\"listinterfaces\",{\"1\":{\"247\":1}}],[\"listitem=\",{\"1\":{\"784\":1}}],[\"listen\",{\"1\":{\"376\":1,\"398\":1,\"742\":2}}],[\"listenedonce\",{\"1\":{\"376\":2}}],[\"listenertask\",{\"1\":{\"376\":1}}],[\"listeners\",{\"1\":{\"232\":3,\"376\":1,\"753\":1}}],[\"listenerr\",{\"1\":{\"117\":2}}],[\"listenerl\",{\"1\":{\"117\":4}}],[\"listener\",{\"1\":{\"62\":9,\"63\":8,\"117\":2,\"123\":1,\"153\":2,\"232\":11,\"310\":1,\"315\":1,\"317\":1,\"333\":6,\"335\":1,\"368\":1,\"375\":2,\"376\":3,\"377\":1,\"395\":1,\"399\":1,\"662\":10}}],[\"listenable通常是\",{\"1\":{\"309\":1}}],[\"listenable\",{\"1\":{\"309\":6,\"310\":14,\"311\":2,\"312\":3,\"316\":2,\"329\":1,\"330\":1,\"333\":8,\"335\":2}}],[\"listview\",{\"1\":{\"276\":1,\"402\":1,\"403\":2,\"419\":1,\"422\":1,\"431\":1,\"433\":1,\"442\":1,\"446\":2}}],[\"liststop\",{\"1\":{\"247\":1}}],[\"liststart\",{\"1\":{\"247\":1}}],[\"listnext\",{\"1\":{\"247\":1}}],[\"list根据解析到的参数执行对应的方法\",{\"1\":{\"247\":1}}],[\"list中\",{\"1\":{\"235\":1}}],[\"list>\",{\"1\":{\"167\":1}}],[\"list<object\",{\"1\":{\"745\":1}}],[\"list<book>\",{\"1\":{\"616\":1}}],[\"list<fruit>\",{\"1\":{\"539\":1}}],[\"list<clazz>\",{\"1\":{\"539\":1}}],[\"list<double>\",{\"1\":{\"418\":1}}],[\"list<widget>\",{\"0\":{\"429\":1},\"1\":{\"405\":1,\"423\":1,\"424\":1,\"429\":1,\"430\":2}}],[\"list<map<string\",{\"1\":{\"398\":3}}],[\"list<movie>>\",{\"1\":{\"126\":2}}],[\"list<powerimagerequest>\",{\"1\":{\"398\":2}}],[\"list<people>\",{\"1\":{\"62\":6,\"63\":3,\"64\":1}}],[\"list<int>\",{\"1\":{\"396\":1}}],[\"list<element>\",{\"1\":{\"265\":2}}],[\"list<sendport>\",{\"1\":{\"244\":2}}],[\"list<stringtags>\",{\"1\":{\"138\":1}}],[\"list<stringtag>\",{\"1\":{\"138\":2}}],[\"list<string>\",{\"1\":{\"138\":1,\"153\":1,\"742\":1,\"748\":3}}],[\"list<\",{\"1\":{\"238\":2,\"418\":1,\"540\":2,\"541\":2}}],[\"list<t>\",{\"1\":{\"231\":1}}],[\"list<t\",{\"1\":{\"231\":4}}],[\"list<resolveinfo>\",{\"1\":{\"6\":1}}],[\"list\",{\"1\":{\"59\":1,\"62\":1,\"63\":1,\"64\":1,\"167\":1,\"231\":3,\"235\":2,\"238\":1,\"243\":5,\"244\":2,\"247\":9,\"294\":2,\"376\":1,\"398\":16,\"403\":1,\"422\":1,\"429\":1,\"434\":1,\"540\":1,\"541\":2,\"724\":4,\"726\":1,\"747\":2,\"748\":3,\"753\":2,\"761\":1,\"784\":2,\"921\":3}}],[\"linking\",{\"0\":{\"493\":1},\"1\":{\"490\":1,\"493\":3,\"496\":2,\"498\":1}}],[\"linked\",{\"1\":{\"402\":1,\"497\":1}}],[\"linktarget\",{\"1\":{\"247\":1}}],[\"linktodeath\",{\"1\":{\"63\":1}}],[\"link\",{\"1\":{\"193\":1,\"214\":2}}],[\"line\",{\"1\":{\"629\":1,\"748\":1}}],[\"lineto\",{\"1\":{\"146\":3}}],[\"linear\",{\"1\":{\"302\":1,\"319\":2,\"324\":1,\"358\":1,\"360\":3}}],[\"lineargradient\",{\"1\":{\"146\":1}}],[\"linearlayoutmanager\",{\"1\":{\"784\":1}}],[\"linearlayout\",{\"1\":{\"117\":2}}],[\"linearlayout>\",{\"1\":{\"115\":1,\"167\":1,\"189\":2,\"783\":1}}],[\"line2567\",{\"1\":{\"26\":1}}],[\"linux常用命令\",{\"0\":{\"681\":1}}],[\"linuxidc\",{\"1\":{\"675\":1}}],[\"linux下配置git\",{\"0\":{\"668\":1}}],[\"linux\",{\"0\":{\"3\":1,\"137\":1,\"676\":1},\"1\":{\"135\":1,\"136\":3,\"137\":3,\"140\":2,\"237\":1,\"668\":1,\"675\":4,\"683\":1,\"684\":1,\"690\":1,\"716\":1,\"719\":1,\"757\":2,\"816\":1},\"2\":{\"705\":1}}],[\"mnt\",{\"1\":{\"686\":1}}],[\"mname\",{\"1\":{\"553\":3}}],[\"m说明这次的提交\",{\"1\":{\"672\":1}}],[\"mbp\",{\"1\":{\"697\":1}}],[\"mb\",{\"1\":{\"376\":1}}],[\"mbackgroundcolor\",{\"1\":{\"162\":1}}],[\"mbackground\",{\"1\":{\"159\":4}}],[\"mbasecachesize\",{\"1\":{\"92\":1}}],[\"mbasecache\",{\"1\":{\"92\":1}}],[\"mworker\",{\"1\":{\"192\":1,\"193\":8}}],[\"mwidth\",{\"1\":{\"162\":3,\"163\":4}}],[\"mwindow\",{\"1\":{\"25\":2}}],[\"mf\",{\"1\":{\"517\":2}}],[\"mfuture\",{\"1\":{\"192\":1,\"193\":6}}],[\"mforwardcolor\",{\"1\":{\"162\":1}}],[\"mfirsttouchtarget\",{\"1\":{\"26\":7}}],[\"mhandler\",{\"1\":{\"179\":1,\"193\":3}}],[\"mhashes\",{\"1\":{\"92\":5,\"93\":1,\"95\":4}}],[\"mh\",{\"1\":{\"179\":4}}],[\"mheight\",{\"1\":{\"162\":3}}],[\"much\",{\"1\":{\"770\":1}}],[\"mutator\",{\"1\":{\"761\":1,\"763\":3,\"768\":1}}],[\"mutablelivedata<string>\",{\"1\":{\"187\":2}}],[\"mutablelivedata<moviedetailsview>\",{\"1\":{\"126\":1}}],[\"mutablelivedata\",{\"1\":{\"126\":1,\"187\":2}}],[\"mutablestateof\",{\"1\":{\"125\":1}}],[\"mutablestate<uistate>\",{\"1\":{\"125\":1}}],[\"mutually\",{\"1\":{\"748\":1}}],[\"mutex\",{\"1\":{\"247\":5,\"645\":2}}],[\"mutexlocker\",{\"1\":{\"247\":3}}],[\"mustcallsuper\",{\"1\":{\"253\":1}}],[\"mustbedocumented\",{\"1\":{\"204\":1}}],[\"must\",{\"1\":{\"193\":1,\"231\":1,\"232\":1,\"247\":1,\"308\":1,\"311\":1,\"359\":1,\"413\":1,\"417\":1,\"511\":2,\"759\":1,\"761\":1,\"771\":2}}],[\"multiframe\",{\"1\":{\"395\":2}}],[\"multiframeimagestreamcompleter\",{\"1\":{\"374\":1,\"383\":1}}],[\"multi\",{\"1\":{\"376\":1}}],[\"multiple\",{\"1\":{\"376\":1,\"418\":1,\"615\":1,\"752\":1,\"761\":3,\"763\":1}}],[\"multiply\",{\"1\":{\"132\":1}}],[\"multichildrenderobjectwidget\",{\"1\":{\"265\":6,\"424\":3,\"426\":1}}],[\"multichildrenderobjectelement\",{\"1\":{\"263\":1,\"264\":1,\"265\":4,\"424\":1,\"426\":4}}],[\"multidexopt\",{\"1\":{\"30\":7}}],[\"multidexkeepproguard\",{\"1\":{\"30\":1}}],[\"multidexkeepfile\",{\"1\":{\"30\":1}}],[\"multidexapplication\",{\"1\":{\"30\":1}}],[\"multidexenabled\",{\"1\":{\"30\":1}}],[\"multidex\",{\"0\":{\"30\":1},\"1\":{\"30\":7,\"31\":2}}],[\"md5key\",{\"1\":{\"383\":5}}],[\"mdata\",{\"1\":{\"193\":2}}],[\"mdatas\",{\"1\":{\"153\":2}}],[\"md\",{\"1\":{\"121\":1,\"719\":1,\"773\":1,\"809\":3}}],[\"mdecor\",{\"1\":{\"25\":1}}],[\"mv\",{\"1\":{\"682\":1}}],[\"mv移动\",{\"1\":{\"682\":1}}],[\"mvalueanimator\",{\"1\":{\"147\":6}}],[\"mvalues\",{\"1\":{\"86\":1,\"87\":5,\"88\":2,\"89\":2,\"90\":1,\"523\":1}}],[\"mvi\",{\"0\":{\"125\":1},\"1\":{\"121\":2,\"125\":6,\"126\":3,\"127\":1,\"128\":1}}],[\"mvvm\",{\"0\":{\"124\":1},\"1\":{\"121\":2,\"124\":5,\"125\":3,\"126\":3,\"127\":1,\"781\":1}}],[\"mvp应运而生\",{\"1\":{\"123\":1}}],[\"mvp\",{\"0\":{\"123\":1},\"1\":{\"121\":1,\"123\":4,\"124\":1,\"126\":1,\"127\":1}}],[\"mvc\",{\"0\":{\"122\":1},\"1\":{\"121\":1,\"122\":2,\"123\":1,\"124\":1,\"127\":1}}],[\"mminheight\",{\"1\":{\"159\":2}}],[\"mminwidth\",{\"1\":{\"159\":2}}],[\"mmeasurecache\",{\"1\":{\"159\":1}}],[\"mmessenger\",{\"1\":{\"83\":4}}],[\"mmap\",{\"1\":{\"138\":1}}],[\"mmu\",{\"1\":{\"136\":1}}],[\"mm\",{\"1\":{\"101\":1,\"572\":1,\"576\":4}}],[\"mkdir\",{\"1\":{\"684\":1,\"731\":3,\"794\":1}}],[\"mkeys\",{\"1\":{\"86\":1,\"87\":6,\"88\":1,\"89\":1,\"90\":1,\"523\":2}}],[\"mkilled\",{\"1\":{\"63\":1}}],[\"mgr\",{\"1\":{\"138\":1}}],[\"mgroupflags\",{\"1\":{\"26\":2}}],[\"mgarbage被标记为true\",{\"1\":{\"90\":1}}],[\"mgarbage\",{\"1\":{\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"523\":1}}],[\"mtask\",{\"1\":{\"193\":2}}],[\"mtasks\",{\"1\":{\"193\":3}}],[\"mtarget对象\",{\"1\":{\"83\":1}}],[\"mtarget\",{\"1\":{\"83\":3}}],[\"mtitleheight\",{\"1\":{\"153\":2}}],[\"mtypearray\",{\"1\":{\"153\":2}}],[\"mtwicebasecachesize\",{\"1\":{\"92\":1}}],[\"mtwicebasecache\",{\"1\":{\"92\":1}}],[\"mthread\",{\"1\":{\"48\":1}}],[\"mplatform\",{\"1\":{\"710\":1,\"712\":1}}],[\"mprogress\",{\"1\":{\"162\":1}}],[\"mprivateflags3\",{\"1\":{\"159\":1}}],[\"mprimaryactionmode\",{\"1\":{\"25\":2}}],[\"mparams\",{\"1\":{\"193\":2}}],[\"mpaint\",{\"1\":{\"153\":11}}],[\"mpathmeasure\",{\"1\":{\"147\":3}}],[\"mpeoplelist\",{\"1\":{\"63\":7}}],[\"mpeoplemanager\",{\"1\":{\"62\":3,\"64\":1}}],[\"m\",{\"1\":{\"54\":3,\"123\":2,\"196\":7,\"532\":2,\"578\":2,\"614\":6,\"629\":1,\"665\":1,\"703\":1,\"704\":1,\"794\":1,\"842\":2}}],[\"mclasloader\",{\"1\":{\"486\":3,\"487\":2}}],[\"mclicklistener\",{\"1\":{\"153\":1}}],[\"mcancelled\",{\"1\":{\"193\":1}}],[\"mcallbacks\",{\"1\":{\"63\":5}}],[\"mcallback\",{\"1\":{\"52\":1,\"53\":3,\"63\":5,\"179\":1}}],[\"mchooseid\",{\"1\":{\"153\":2}}],[\"mcolorchoosetext\",{\"1\":{\"153\":1}}],[\"mcolorchoosetextbg\",{\"1\":{\"153\":1}}],[\"mcolortext\",{\"1\":{\"153\":1}}],[\"mcolorindexbg\",{\"1\":{\"153\":1}}],[\"mcolorlettertext\",{\"1\":{\"153\":1}}],[\"mcollections\",{\"1\":{\"92\":1}}],[\"mcookie\",{\"1\":{\"63\":1}}],[\"mcontext\",{\"1\":{\"62\":2,\"153\":1,\"178\":2,\"179\":1}}],[\"mconnection\",{\"1\":{\"35\":3,\"39\":1,\"138\":3}}],[\"mls\",{\"1\":{\"761\":1}}],[\"ml\",{\"1\":{\"247\":12,\"753\":2,\"759\":3,\"760\":3,\"761\":21}}],[\"mlistener\",{\"1\":{\"62\":5}}],[\"mlistenerinfo\",{\"1\":{\"27\":2}}],[\"mlooper\",{\"1\":{\"52\":2}}],[\"mipmap\",{\"1\":{\"819\":1}}],[\"migrate\",{\"1\":{\"808\":1}}],[\"might\",{\"1\":{\"49\":1,\"350\":1,\"351\":1,\"376\":1,\"412\":1}}],[\"millis\",{\"1\":{\"560\":5}}],[\"millisecond\",{\"1\":{\"234\":1,\"578\":1}}],[\"millisecondssinceepoch\",{\"1\":{\"241\":1}}],[\"milliseconds为\",{\"1\":{\"235\":1,\"236\":1}}],[\"milliseconds\",{\"0\":{\"236\":1,\"237\":1},\"1\":{\"234\":23,\"235\":1,\"237\":1,\"238\":5,\"708\":2}}],[\"miss\",{\"1\":{\"753\":1,\"761\":1}}],[\"missedticks\",{\"1\":{\"238\":3}}],[\"misc\",{\"1\":{\"485\":3,\"487\":1}}],[\"mixin\",{\"1\":{\"253\":1,\"254\":1,\"384\":1,\"426\":1}}],[\"micros\",{\"1\":{\"761\":1}}],[\"microsecondspersecond\",{\"1\":{\"321\":1}}],[\"microsecond\",{\"1\":{\"234\":1}}],[\"microtaskloop\",{\"1\":{\"226\":2,\"228\":1}}],[\"microtasks\",{\"1\":{\"225\":1,\"227\":1}}],[\"microtask本质还是调用schedulemicrotask实现的\",{\"1\":{\"224\":1}}],[\"microtask\",{\"1\":{\"221\":3,\"223\":7,\"224\":2,\"225\":4,\"226\":4,\"227\":2,\"228\":3,\"229\":2,\"232\":1,\"292\":1,\"395\":1}}],[\"micro\",{\"0\":{\"223\":1},\"1\":{\"221\":1,\"223\":1,\"229\":2,\"230\":4,\"232\":1,\"238\":3,\"239\":3}}],[\"midentityhashcode\",{\"1\":{\"92\":2}}],[\"mibinder\",{\"1\":{\"63\":3,\"138\":4}}],[\"minimum\",{\"1\":{\"761\":1}}],[\"minimaldaysinfirstweek和simpledateformat\",{\"1\":{\"577\":1}}],[\"minimaldaysinfirstweek\",{\"1\":{\"575\":1,\"576\":3}}],[\"minit\",{\"1\":{\"553\":2}}],[\"minit=\",{\"1\":{\"553\":1}}],[\"miniwidth指定的值中最大的一个值\",{\"1\":{\"159\":1}}],[\"miniwidth指定的值\",{\"1\":{\"159\":1}}],[\"minor\",{\"1\":{\"528\":1}}],[\"minextent\",{\"1\":{\"405\":1}}],[\"minclipovaldiameter\",{\"1\":{\"342\":2,\"343\":1}}],[\"minwidth=\",{\"1\":{\"189\":1}}],[\"minscrollextent~double\",{\"1\":{\"412\":1,\"418\":1}}],[\"minscrollextent\",{\"1\":{\"412\":10,\"415\":1,\"418\":2,\"439\":4}}],[\"minsize\",{\"1\":{\"330\":2}}],[\"minstance\",{\"1\":{\"179\":5,\"710\":4}}],[\"minsdkversion\",{\"1\":{\"30\":2}}],[\"min\",{\"1\":{\"163\":1,\"319\":1,\"325\":3,\"405\":1,\"412\":8,\"444\":1,\"761\":6}}],[\"mindextexts\",{\"1\":{\"153\":4}}],[\"mind\",{\"1\":{\"126\":1}}],[\"minheight=\",{\"1\":{\"189\":1}}],[\"minheight\",{\"1\":{\"111\":2,\"444\":1,\"445\":3}}],[\"minute\",{\"1\":{\"19\":1,\"521\":2,\"578\":2}}],[\"mradius\",{\"1\":{\"162\":2}}],[\"mremote\",{\"1\":{\"71\":4,\"138\":7}}],[\"mrecevierreplymsg\",{\"1\":{\"39\":2}}],[\"mrun\",{\"1\":{\"48\":1}}],[\"mqueue\",{\"1\":{\"48\":1,\"49\":1,\"52\":3,\"83\":1}}],[\"mst源码\",{\"1\":{\"851\":1}}],[\"mst\",{\"0\":{\"849\":1}}],[\"mstatus\",{\"1\":{\"193\":4}}],[\"ms\",{\"1\":{\"238\":4,\"241\":1,\"629\":1,\"630\":4,\"631\":8}}],[\"msharedpreferences\",{\"1\":{\"173\":5}}],[\"msearchbar>\",{\"1\":{\"116\":1,\"118\":1}}],[\"msearchbar\",{\"1\":{\"116\":4,\"117\":4,\"118\":4}}],[\"msearchbar表明是给该控件使用的自定义属性\",{\"1\":{\"116\":1}}],[\"mserviceinterface\",{\"1\":{\"138\":3}}],[\"mserviceconnection\",{\"1\":{\"83\":1}}],[\"mservice\",{\"1\":{\"38\":4,\"39\":2,\"62\":1,\"63\":4,\"105\":1}}],[\"msizetext\",{\"1\":{\"153\":2}}],[\"msize++\",{\"1\":{\"87\":1}}],[\"msize\",{\"1\":{\"86\":1,\"87\":6,\"88\":1,\"89\":1,\"90\":3,\"92\":2,\"95\":2,\"523\":2}}],[\"mscroller\",{\"1\":{\"75\":8}}],[\"msg\",{\"0\":{\"55\":1},\"1\":{\"39\":15,\"49\":7,\"52\":5,\"53\":7,\"54\":4,\"83\":8,\"179\":6,\"193\":4,\"236\":1,\"237\":6,\"238\":4,\"243\":2,\"247\":3,\"645\":3,\"742\":3,\"745\":6,\"754\":2,\"759\":3}}],[\"mywidget\",{\"1\":{\"281\":1}}],[\"my\",{\"1\":{\"189\":1,\"286\":1,\"450\":1,\"783\":1}}],[\"myapp\",{\"1\":{\"279\":2,\"784\":1}}],[\"myappwidget\",{\"1\":{\"189\":6}}],[\"myapplication\",{\"1\":{\"30\":3,\"70\":1,\"71\":10}}],[\"myrecyclerdecoration\",{\"1\":{\"153\":2}}],[\"mycheckbox\",{\"1\":{\"124\":1}}],[\"myclass1\",{\"1\":{\"619\":5}}],[\"myclasstoo\",{\"1\":{\"30\":1}}],[\"myclass\",{\"1\":{\"30\":2}}],[\"mykotlin\",{\"1\":{\"105\":2}}],[\"mylooper\",{\"1\":{\"49\":1,\"50\":2,\"52\":1,\"56\":1}}],[\"myservice\",{\"1\":{\"36\":1}}],[\"myservices\",{\"1\":{\"35\":6}}],[\"myotherclass\",{\"1\":{\"30\":1}}],[\"mydomain\",{\"1\":{\"6\":1}}],[\"mozilla\",{\"1\":{\"731\":1}}],[\"mounted\",{\"1\":{\"347\":3,\"351\":1}}],[\"mount方法主要逻辑在\",{\"1\":{\"264\":1}}],[\"mount方法将\",{\"1\":{\"259\":1}}],[\"mount方法\",{\"1\":{\"256\":2,\"264\":1,\"266\":1}}],[\"mount\",{\"1\":{\"256\":5,\"259\":1,\"261\":1,\"263\":2,\"265\":5}}],[\"mouse\",{\"1\":{\"26\":1}}],[\"moment\",{\"1\":{\"247\":1}}],[\"moldams\",{\"1\":{\"179\":1}}],[\"most\",{\"1\":{\"158\":1,\"159\":2,\"163\":1,\"276\":1}}],[\"moving\",{\"1\":{\"376\":1}}],[\"moviesservice\",{\"1\":{\"126\":1}}],[\"movies\",{\"1\":{\"126\":2}}],[\"moviesrepository\",{\"1\":{\"126\":7}}],[\"movieid\",{\"1\":{\"126\":3}}],[\"movieplay\",{\"1\":{\"126\":1}}],[\"moviedetails>\",{\"1\":{\"126\":1}}],[\"moviedetails\",{\"1\":{\"126\":6}}],[\"moviedetailsviewmodel\",{\"1\":{\"126\":5}}],[\"moviedetailsfragment\",{\"1\":{\"126\":1}}],[\"moved\",{\"1\":{\"226\":1,\"351\":1}}],[\"move\",{\"1\":{\"153\":1,\"247\":5,\"376\":1,\"749\":1,\"750\":1,\"754\":1,\"757\":1,\"758\":1,\"759\":1,\"761\":1,\"912\":2}}],[\"moveto\",{\"1\":{\"145\":1,\"148\":1}}],[\"movetofirst\",{\"1\":{\"6\":1}}],[\"mock\",{\"1\":{\"123\":1}}],[\"more\",{\"0\":{\"107\":1},\"1\":{\"87\":1,\"238\":1,\"243\":1,\"430\":1,\"448\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"523\":1,\"761\":4}}],[\"modifier\",{\"1\":{\"582\":1}}],[\"modify\",{\"1\":{\"71\":1}}],[\"modcount\",{\"1\":{\"500\":1,\"523\":1}}],[\"module不仅可以交给application的\",{\"1\":{\"217\":1}}],[\"module之间的关联关系将application和activity等的依赖注入通过androidinjector关联起来的\",{\"1\":{\"217\":1}}],[\"module的\",{\"1\":{\"205\":1}}],[\"module中添加另外一个\",{\"1\":{\"203\":1}}],[\"module类中的\",{\"1\":{\"203\":1}}],[\"modules\",{\"1\":{\"203\":2,\"205\":1,\"211\":1}}],[\"module则是提供一个类\",{\"1\":{\"203\":1}}],[\"module和\",{\"1\":{\"203\":2}}],[\"module\",{\"0\":{\"203\":1,\"213\":1},\"1\":{\"203\":3,\"204\":1,\"205\":2,\"213\":3}}],[\"mode组成如下\",{\"1\":{\"689\":1}}],[\"mode\",{\"1\":{\"131\":1,\"132\":1,\"133\":1,\"162\":1,\"173\":1,\"243\":10,\"417\":3,\"557\":2,\"638\":2,\"689\":1,\"753\":1,\"754\":1,\"822\":2}}],[\"model在这里的实现是一个数据库\",{\"1\":{\"781\":1}}],[\"models\",{\"1\":{\"126\":1}}],[\"model\",{\"1\":{\"122\":4,\"123\":11,\"124\":3,\"125\":1,\"399\":2,\"763\":1}}],[\"modes\",{\"1\":{\"25\":2}}],[\"modalbarrier\",{\"1\":{\"309\":1}}],[\"modal\",{\"1\":{\"76\":2}}],[\"month\",{\"1\":{\"578\":6}}],[\"montouchlistener\",{\"1\":{\"27\":1}}],[\"monday\",{\"1\":{\"575\":1,\"578\":1}}],[\"monitorleavescope\",{\"1\":{\"761\":1}}],[\"monitorlocker\",{\"1\":{\"247\":5,\"759\":2,\"760\":1,\"761\":3}}],[\"monitor\",{\"1\":{\"247\":4,\"561\":1,\"759\":2,\"761\":14}}],[\"monclicklistener\",{\"1\":{\"27\":1}}],[\"motionevent\",{\"1\":{\"25\":2,\"26\":11,\"27\":3,\"153\":1}}],[\"madvise\",{\"1\":{\"757\":1}}],[\"machine\",{\"0\":{\"459\":1},\"1\":{\"454\":1,\"493\":1,\"495\":1,\"498\":2,\"767\":2,\"768\":1,\"769\":3}}],[\"macro\",{\"1\":{\"262\":1}}],[\"mactive\",{\"1\":{\"192\":1,\"193\":4}}],[\"magicfun\",{\"1\":{\"199\":1}}],[\"mamsinvocationhandler\",{\"1\":{\"179\":4}}],[\"materialscrollbehavior\",{\"1\":{\"349\":1}}],[\"materialpointarctween\",{\"1\":{\"344\":1}}],[\"materialpageroute\",{\"1\":{\"340\":1}}],[\"materialrectcenterarctween\",{\"1\":{\"344\":1}}],[\"materialrectarctween\",{\"1\":{\"344\":1,\"349\":1}}],[\"material\",{\"1\":{\"276\":1,\"279\":3,\"341\":1}}],[\"materialappstate\",{\"1\":{\"349\":2}}],[\"materialapp\",{\"1\":{\"276\":1,\"279\":1,\"295\":1,\"344\":1,\"349\":5,\"353\":1}}],[\"materialbutton\",{\"1\":{\"273\":1}}],[\"math\",{\"1\":{\"163\":1,\"310\":1,\"311\":1,\"342\":1,\"343\":1,\"405\":1,\"412\":2,\"415\":1,\"418\":2,\"439\":2}}],[\"matchtextdirection\",{\"1\":{\"370\":2}}],[\"matching\",{\"1\":{\"92\":2,\"351\":1}}],[\"matches\",{\"1\":{\"92\":1}}],[\"match\",{\"1\":{\"6\":1,\"115\":1,\"118\":1,\"158\":1,\"159\":1,\"189\":4,\"770\":1,\"783\":2,\"784\":2}}],[\"mask\",{\"1\":{\"161\":1}}],[\"master\",{\"1\":{\"77\":1,\"141\":1,\"342\":1,\"672\":1,\"673\":2,\"794\":2,\"813\":1}}],[\"maxheight\",{\"1\":{\"444\":1,\"445\":3}}],[\"maxindex\",{\"1\":{\"533\":5}}],[\"maxinnerextent\",{\"1\":{\"415\":4}}],[\"maximumsizebytes\",{\"1\":{\"375\":1,\"376\":1}}],[\"maximumsize\",{\"1\":{\"375\":1,\"376\":1}}],[\"maximum\",{\"1\":{\"193\":1}}],[\"maxscrollextent\",{\"1\":{\"405\":4,\"412\":11,\"415\":1,\"418\":3,\"420\":2,\"439\":5}}],[\"maxpaintextent\",{\"1\":{\"405\":1}}],[\"maxports\",{\"1\":{\"244\":3}}],[\"maxextent\",{\"1\":{\"405\":1}}],[\"maxed\",{\"1\":{\"247\":1,\"760\":1}}],[\"maxclipovaldiameter\",{\"1\":{\"342\":3,\"343\":2}}],[\"maxlines\",{\"1\":{\"251\":2,\"262\":1,\"265\":2}}],[\"max\",{\"1\":{\"159\":2,\"244\":1,\"247\":2,\"276\":2,\"319\":1,\"325\":3,\"412\":11,\"415\":1,\"418\":2,\"439\":2,\"519\":1,\"760\":2,\"761\":5,\"897\":6}}],[\"malloc\",{\"1\":{\"136\":1}}],[\"makefile文件\",{\"1\":{\"517\":1}}],[\"makefile\",{\"1\":{\"517\":1}}],[\"makes\",{\"1\":{\"496\":1}}],[\"make\",{\"1\":{\"123\":1,\"376\":2,\"745\":2,\"748\":1,\"756\":1}}],[\"maketext\",{\"1\":{\"118\":1,\"186\":1}}],[\"markdown\",{\"0\":{\"790\":1},\"1\":{\"791\":3}}],[\"markneedpaint\",{\"1\":{\"440\":1}}],[\"markneedslayout\",{\"1\":{\"425\":1,\"438\":2}}],[\"markneedssemanticsupdate\",{\"1\":{\"332\":2,\"438\":2}}],[\"markneedspaint\",{\"1\":{\"332\":13,\"333\":1,\"438\":2}}],[\"markneedsbuild\",{\"1\":{\"256\":1,\"264\":1}}],[\"marking\",{\"1\":{\"264\":1}}],[\"marker\",{\"1\":{\"247\":1,\"578\":1}}],[\"markclosed\",{\"1\":{\"243\":2}}],[\"mark\",{\"1\":{\"238\":1}}],[\"marray\",{\"1\":{\"92\":5,\"93\":2,\"94\":1,\"95\":1}}],[\"margin\",{\"1\":{\"75\":1,\"158\":1}}],[\"mapped\",{\"1\":{\"769\":1}}],[\"mappings\",{\"1\":{\"757\":1}}],[\"mapping\",{\"1\":{\"136\":1,\"523\":1}}],[\"mapof\",{\"1\":{\"619\":1}}],[\"mapentry<object\",{\"1\":{\"351\":1}}],[\"map<double\",{\"1\":{\"538\":1}}],[\"map<dynamic\",{\"1\":{\"398\":4}}],[\"map<k\",{\"1\":{\"523\":1,\"538\":1}}],[\"map<type\",{\"1\":{\"415\":1}}],[\"map<extendedimageprovider<dynamic>\",{\"1\":{\"384\":1}}],[\"map<string\",{\"1\":{\"383\":1,\"384\":1,\"398\":6,\"538\":3,\"619\":1,\"711\":4,\"748\":3}}],[\"map<object\",{\"1\":{\"346\":1,\"349\":1,\"351\":2,\"375\":3}}],[\"map<int\",{\"1\":{\"244\":1}}],[\"mapcollections<k\",{\"1\":{\"92\":1}}],[\"map\",{\"1\":{\"59\":1,\"63\":1,\"187\":3,\"243\":1,\"244\":1,\"346\":1,\"375\":1,\"376\":1,\"395\":6,\"396\":5,\"397\":8,\"398\":8,\"403\":2,\"500\":1,\"525\":1,\"527\":6,\"538\":2,\"587\":1,\"612\":4,\"619\":6,\"629\":2,\"653\":1,\"664\":5,\"724\":1,\"850\":2}}],[\"mainscope\",{\"1\":{\"626\":4}}],[\"maintainstate\",{\"1\":{\"350\":2}}],[\"mainthread\",{\"1\":{\"193\":2,\"527\":2}}],[\"mainerrorwidget的一种实现方式\",{\"1\":{\"295\":1}}],[\"mainerrorwidget\",{\"1\":{\"295\":3}}],[\"mainaxisextent\",{\"1\":{\"405\":6}}],[\"mainaxissize\",{\"1\":{\"276\":4,\"444\":2}}],[\"mainaxisalignment\",{\"1\":{\"276\":2,\"444\":3}}],[\"mainapplication\",{\"1\":{\"211\":1,\"214\":1}}],[\"mainapp\",{\"1\":{\"195\":1}}],[\"mainactivitysubcomponent通过将mainactivitymodule加入到appcomponent之中\",{\"1\":{\"217\":1}}],[\"mainactivitysubcomponent\",{\"1\":{\"212\":1,\"213\":2}}],[\"mainactivitymodule\",{\"1\":{\"211\":1,\"213\":4}}],[\"mainactivity\",{\"1\":{\"35\":1,\"118\":1,\"173\":2,\"185\":1,\"213\":1,\"215\":1,\"399\":1}}],[\"main\",{\"1\":{\"57\":3,\"71\":1,\"77\":1,\"106\":2,\"118\":1,\"121\":1,\"141\":1,\"215\":1,\"241\":1,\"243\":1,\"247\":3,\"251\":1,\"276\":2,\"279\":5,\"285\":2,\"486\":2,\"513\":1,\"517\":4,\"527\":9,\"553\":1,\"586\":1,\"617\":1,\"619\":1,\"622\":1,\"624\":1,\"625\":4,\"629\":2,\"630\":1,\"638\":1,\"656\":1,\"666\":1,\"719\":2,\"730\":1,\"731\":1,\"736\":1,\"737\":1,\"740\":1,\"752\":3,\"753\":1,\"757\":12,\"759\":4,\"761\":4,\"762\":1,\"765\":1,\"766\":1,\"773\":1,\"784\":2}}],[\"maybemakeserviceisolate\",{\"1\":{\"753\":1}}],[\"maybestartherotransition\",{\"0\":{\"350\":1},\"1\":{\"350\":2}}],[\"maybelocaleof\",{\"1\":{\"265\":1}}],[\"maybeof\",{\"1\":{\"259\":2}}],[\"maybeconnecthandler\",{\"1\":{\"243\":1}}],[\"mayaddlistener\",{\"1\":{\"232\":2}}],[\"maycomplete\",{\"1\":{\"232\":1}}],[\"may\",{\"1\":{\"48\":1,\"87\":1,\"139\":1,\"193\":1,\"203\":1,\"243\":1,\"350\":1,\"351\":1,\"395\":2,\"494\":1,\"573\":1,\"753\":1,\"761\":7}}],[\"maven\",{\"1\":{\"2\":2}}],[\"mandatory\",{\"1\":{\"751\":1,\"756\":1}}],[\"management\",{\"1\":{\"285\":1}}],[\"manager实现缓存网络图片的功能\",{\"1\":{\"385\":1}}],[\"manager\",{\"1\":{\"186\":3,\"279\":1,\"736\":2}}],[\"manageraidl\",{\"1\":{\"62\":10,\"63\":3}}],[\"managing\",{\"1\":{\"274\":1}}],[\"many\",{\"1\":{\"231\":1,\"244\":1}}],[\"manifest\",{\"1\":{\"105\":1,\"173\":3,\"351\":8,\"352\":17,\"517\":2}}],[\"manifestplaceholders\",{\"1\":{\"104\":1,\"105\":2}}],[\"manifest>\",{\"1\":{\"6\":1,\"816\":1}}],[\"man\",{\"1\":{\"0\":1,\"237\":1}}],[\"mesage\",{\"1\":{\"745\":1}}],[\"messgae\",{\"1\":{\"759\":2}}],[\"messagechannel\",{\"1\":{\"286\":1}}],[\"messagenotify\",{\"1\":{\"247\":1}}],[\"messagehandlertask\",{\"1\":{\"247\":3,\"759\":1,\"761\":3}}],[\"messagehandler\",{\"1\":{\"247\":10,\"745\":1,\"753\":2,\"759\":2,\"761\":8}}],[\"messagemap\",{\"1\":{\"243\":7,\"244\":7}}],[\"messagemessage\",{\"1\":{\"55\":1}}],[\"messagestatusstring\",{\"1\":{\"761\":3}}],[\"messagestatus\",{\"1\":{\"761\":4}}],[\"messages\",{\"1\":{\"235\":1,\"236\":1,\"247\":3,\"759\":1,\"761\":16}}],[\"messageservice\",{\"1\":{\"39\":1}}],[\"messagequeue\",{\"1\":{\"48\":1,\"49\":1,\"52\":1,\"54\":1,\"56\":1,\"247\":1,\"745\":3,\"761\":2}}],[\"message\",{\"0\":{\"44\":1},\"1\":{\"39\":10,\"44\":1,\"49\":1,\"53\":1,\"54\":4,\"55\":2,\"56\":1,\"83\":9,\"137\":1,\"179\":2,\"193\":4,\"229\":3,\"235\":2,\"236\":1,\"237\":3,\"243\":2,\"244\":2,\"247\":33,\"399\":1,\"742\":9,\"745\":5,\"748\":11,\"749\":1,\"753\":3,\"754\":1,\"759\":18,\"761\":54}}],[\"messengerimpl\",{\"1\":{\"83\":4}}],[\"messengerhandler\",{\"1\":{\"83\":2}}],[\"messengerservice\",{\"1\":{\"39\":3,\"83\":1}}],[\"messenger\",{\"0\":{\"39\":1,\"81\":1},\"1\":{\"39\":15,\"82\":6,\"83\":26,\"135\":1}}],[\"members\",{\"1\":{\"766\":1}}],[\"member\",{\"1\":{\"618\":1}}],[\"memories\",{\"1\":{\"516\":4,\"522\":1,\"524\":1}}],[\"memoryimage\",{\"1\":{\"374\":1}}],[\"memory\",{\"1\":{\"126\":1,\"136\":1,\"139\":1,\"285\":3,\"365\":1,\"382\":1,\"464\":2,\"522\":1,\"523\":1,\"740\":1,\"753\":4,\"757\":1,\"769\":1}}],[\"meituan\",{\"1\":{\"500\":1}}],[\"means\",{\"1\":{\"285\":1,\"412\":2,\"753\":1,\"761\":1}}],[\"measuretimemillis\",{\"1\":{\"630\":1}}],[\"measured\",{\"1\":{\"159\":1}}],[\"measurespec\",{\"0\":{\"158\":1},\"1\":{\"158\":3,\"159\":8,\"163\":4}}],[\"measure\",{\"1\":{\"157\":2,\"159\":3,\"160\":1,\"351\":1}}],[\"mergesort\",{\"1\":{\"913\":3}}],[\"merge\",{\"1\":{\"264\":2,\"673\":1,\"913\":2}}],[\"mechanism\",{\"1\":{\"243\":1,\"351\":1}}],[\"media\",{\"1\":{\"686\":1}}],[\"mediaquery\",{\"1\":{\"264\":1,\"276\":1}}],[\"mediatorlivedata<string>\",{\"1\":{\"187\":1}}],[\"mediatorlivedata\",{\"1\":{\"187\":3}}],[\"mediaserver\",{\"1\":{\"140\":2}}],[\"medium\",{\"1\":{\"123\":1,\"124\":1}}],[\"met\",{\"1\":{\"759\":1}}],[\"metric\",{\"1\":{\"753\":5}}],[\"metrics\",{\"1\":{\"101\":6,\"417\":4,\"753\":1}}],[\"methodinvocation\",{\"1\":{\"767\":1}}],[\"methodhandle实例最后解析结果ref\",{\"1\":{\"497\":1}}],[\"methods\",{\"1\":{\"496\":1,\"552\":2,\"763\":1,\"766\":1}}],[\"methodarea\",{\"1\":{\"465\":1}}],[\"methodcall\",{\"1\":{\"284\":3,\"398\":1}}],[\"methodcallhandler\",{\"1\":{\"284\":1,\"398\":1}}],[\"methodchannel\",{\"1\":{\"284\":4,\"286\":1,\"397\":1,\"398\":9}}],[\"method\",{\"0\":{\"460\":1,\"461\":1},\"1\":{\"142\":1,\"179\":5,\"189\":5,\"231\":1,\"247\":3,\"284\":1,\"374\":1,\"384\":1,\"398\":4,\"429\":1,\"455\":1,\"460\":1,\"496\":6,\"497\":1,\"553\":2,\"560\":1,\"565\":1,\"569\":1,\"583\":1,\"584\":1,\"591\":1,\"753\":8,\"761\":1,\"767\":1,\"771\":1}}],[\"metadata\",{\"1\":{\"105\":1}}],[\"meta\",{\"1\":{\"105\":4,\"517\":2}}],[\"me\",{\"1\":{\"0\":1,\"49\":2,\"247\":2,\"448\":1,\"759\":1,\"761\":6,\"813\":1}}],[\"tfa\",{\"1\":{\"771\":1}}],[\"tbes\",{\"1\":{\"753\":3}}],[\"tclass\",{\"1\":{\"618\":1}}],[\"tc\",{\"1\":{\"583\":16,\"587\":1,\"591\":1}}],[\"t7\",{\"1\":{\"550\":1}}],[\"t2\",{\"1\":{\"545\":4,\"546\":1,\"547\":4}}],[\"t1\",{\"1\":{\"485\":3,\"545\":4,\"546\":2,\"547\":2}}],[\"t0\",{\"1\":{\"485\":2}}],[\"turnidge\",{\"1\":{\"761\":1}}],[\"turns\",{\"1\":{\"310\":7}}],[\"tuple\",{\"1\":{\"724\":1,\"726\":2,\"749\":2,\"759\":2}}],[\"tue\",{\"1\":{\"578\":1}}],[\"tuesday\",{\"1\":{\"578\":1}}],[\"tutorial\",{\"1\":{\"290\":1}}],[\"twitter\",{\"1\":{\"580\":2}}],[\"tween<color\",{\"1\":{\"358\":1}}],[\"tween<t\",{\"1\":{\"358\":1}}],[\"tween<t>\",{\"1\":{\"308\":2,\"358\":1}}],[\"tween<t>的evaluate\",{\"1\":{\"307\":1}}],[\"tween<rect\",{\"1\":{\"348\":1}}],[\"tween<double>的值\",{\"1\":{\"358\":1}}],[\"tween<double>\",{\"1\":{\"308\":1}}],[\"tween<dynamic>\",{\"1\":{\"304\":2,\"305\":1}}],[\"tweenvisitor<dynamic>\",{\"1\":{\"306\":1,\"307\":1,\"308\":1}}],[\"tweenvisitor<dynamic>并传给子类\",{\"1\":{\"304\":1}}],[\"tweenvisitor\",{\"1\":{\"306\":1}}],[\"tweenconstructor<dynamic>\",{\"1\":{\"304\":1,\"305\":1}}],[\"tweensequence\",{\"1\":{\"357\":2}}],[\"tweens\",{\"1\":{\"303\":1}}],[\"tweenanimationbuilderstate<t\",{\"1\":{\"308\":1}}],[\"tweenanimationbuilderstate\",{\"1\":{\"308\":1}}],[\"tweenanimationbuilder<double>\",{\"1\":{\"308\":1}}],[\"tweenanimationbuilder\",{\"0\":{\"308\":1},\"1\":{\"300\":1,\"302\":2,\"308\":7,\"309\":1,\"312\":2,\"314\":1,\"329\":1}}],[\"tween\",{\"0\":{\"355\":1,\"358\":1},\"1\":{\"300\":2,\"302\":1,\"303\":2,\"304\":11,\"305\":5,\"306\":1,\"307\":3,\"308\":15,\"309\":1,\"312\":1,\"314\":3,\"329\":1,\"336\":1,\"353\":1,\"355\":4,\"357\":1,\"358\":8,\"359\":3,\"361\":1,\"362\":1}}],[\"two\",{\"1\":{\"247\":1,\"302\":1,\"629\":1,\"631\":5}}],[\"typicode\",{\"1\":{\"285\":1}}],[\"type=\",{\"1\":{\"784\":2}}],[\"typeerror\",{\"1\":{\"726\":2}}],[\"typename\",{\"1\":{\"247\":1}}],[\"typeacceptsnull<t>\",{\"1\":{\"231\":1}}],[\"typedef\",{\"1\":{\"227\":1,\"247\":1}}],[\"typedarray\",{\"1\":{\"116\":1,\"117\":1}}],[\"typedvalue\",{\"1\":{\"101\":1}}],[\"type\",{\"1\":{\"76\":1,\"112\":3,\"126\":2,\"131\":1,\"231\":1,\"232\":1,\"247\":4,\"316\":1,\"348\":2,\"351\":2,\"352\":6,\"357\":1,\"390\":1,\"398\":2,\"426\":2,\"492\":1,\"493\":2,\"496\":1,\"565\":1,\"583\":1,\"615\":2,\"696\":1,\"731\":1,\"745\":1,\"748\":1,\"753\":1,\"812\":1}}],[\"types\",{\"1\":{\"60\":1,\"138\":1,\"203\":1,\"615\":1,\"768\":1,\"771\":1,\"783\":1}}],[\"tls\",{\"1\":{\"247\":3}}],[\"tlen\",{\"1\":{\"247\":2,\"761\":2}}],[\"tport\",{\"1\":{\"247\":1,\"761\":2}}],[\"tdest\",{\"1\":{\"247\":4}}],[\"tsource\",{\"1\":{\"247\":2}}],[\"t>主动声明通配符\",{\"1\":{\"541\":1}}],[\"t>表示的是\",{\"1\":{\"540\":1}}],[\"t>\",{\"1\":{\"232\":1,\"237\":1,\"247\":1,\"540\":2,\"621\":1}}],[\"t\",{\"1\":{\"87\":3,\"92\":1,\"112\":2,\"126\":1,\"231\":11,\"232\":1,\"237\":10,\"238\":1,\"244\":1,\"247\":6,\"248\":2,\"272\":2,\"285\":2,\"305\":1,\"316\":2,\"324\":5,\"325\":3,\"340\":1,\"351\":2,\"352\":1,\"355\":1,\"357\":11,\"358\":19,\"359\":8,\"360\":24,\"361\":2,\"374\":1,\"376\":5,\"384\":1,\"417\":2,\"523\":1,\"527\":14,\"535\":2,\"540\":5,\"541\":1,\"560\":3,\"618\":2,\"619\":8,\"621\":3,\"629\":1,\"662\":1,\"670\":2,\"694\":1,\"695\":1,\"703\":1,\"742\":2,\"748\":6,\"753\":22,\"754\":1,\"757\":5,\"758\":2,\"759\":1,\"761\":5,\"850\":2,\"880\":1}}],[\"tar\",{\"0\":{\"695\":1},\"1\":{\"693\":2,\"695\":5}}],[\"target<drawable>\",{\"1\":{\"399\":2}}],[\"target开始动画\",{\"1\":{\"319\":1}}],[\"targetvalue\",{\"1\":{\"304\":7,\"305\":2,\"308\":1}}],[\"targetactivity\",{\"1\":{\"178\":2,\"179\":1,\"189\":8}}],[\"targetintent\",{\"1\":{\"176\":2,\"179\":16}}],[\"target\",{\"1\":{\"26\":4,\"49\":2,\"52\":2,\"56\":1,\"83\":7,\"112\":3,\"179\":4,\"183\":1,\"189\":3,\"302\":1,\"319\":2,\"399\":4,\"565\":1,\"568\":1,\"753\":3}}],[\"targetsdkversion\",{\"1\":{\"30\":1}}],[\"targets\",{\"1\":{\"26\":4}}],[\"tailrec\",{\"1\":{\"614\":3}}],[\"taking\",{\"1\":{\"493\":1}}],[\"take\",{\"1\":{\"629\":2,\"653\":1}}],[\"takes\",{\"1\":{\"418\":1}}],[\"takebytes\",{\"1\":{\"243\":1}}],[\"tables\",{\"1\":{\"745\":1}}],[\"table\",{\"1\":{\"500\":1,\"501\":3,\"506\":5,\"523\":1,\"527\":2,\"753\":8}}],[\"tab$e\",{\"1\":{\"403\":1}}],[\"tab\",{\"1\":{\"403\":1,\"527\":2,\"703\":1}}],[\"tabs\",{\"1\":{\"403\":4}}],[\"tabbar\",{\"1\":{\"403\":5}}],[\"tabbarview\",{\"1\":{\"402\":1,\"403\":4,\"422\":1,\"433\":1}}],[\"tapped\",{\"1\":{\"289\":1}}],[\"tasks\",{\"1\":{\"193\":1,\"238\":1,\"247\":4,\"752\":1,\"760\":5,\"761\":11}}],[\"task\",{\"0\":{\"223\":1},\"1\":{\"193\":8,\"221\":1,\"223\":1,\"229\":2,\"230\":4,\"232\":1,\"238\":2,\"239\":3,\"247\":12,\"750\":1,\"756\":1,\"759\":6,\"760\":3,\"761\":20,\"763\":1}}],[\"taskcallback\",{\"1\":{\"62\":11,\"63\":4,\"761\":2}}],[\"tag为gityuan\",{\"1\":{\"733\":1}}],[\"tag2\",{\"1\":{\"545\":5,\"547\":2}}],[\"tag1\",{\"1\":{\"545\":4,\"547\":1}}],[\"tag\",{\"1\":{\"35\":5,\"63\":2,\"64\":2,\"152\":1,\"173\":1,\"215\":1,\"340\":8,\"346\":4,\"348\":2,\"349\":1,\"351\":6,\"519\":1,\"711\":5,\"753\":6}}],[\"tear\",{\"1\":{\"767\":1}}],[\"teal\",{\"1\":{\"273\":2,\"276\":1}}],[\"terror\",{\"1\":{\"761\":1}}],[\"termination\",{\"1\":{\"759\":2}}],[\"terminated\",{\"1\":{\"759\":1}}],[\"terminate\",{\"1\":{\"753\":1}}],[\"terminatecapability\",{\"1\":{\"742\":1,\"747\":1,\"748\":5}}],[\"terminates\",{\"1\":{\"139\":1,\"759\":1}}],[\"tech\",{\"1\":{\"500\":1}}],[\"tenured\",{\"1\":{\"455\":1}}],[\"tenminutes\",{\"1\":{\"20\":2}}],[\"temp\",{\"1\":{\"532\":3,\"533\":3,\"686\":1,\"896\":2,\"897\":2,\"921\":2,\"927\":2}}],[\"temporarily\",{\"1\":{\"395\":1,\"761\":2}}],[\"templates\",{\"1\":{\"662\":1}}],[\"template\",{\"1\":{\"247\":1,\"849\":1}}],[\"tempview\",{\"1\":{\"112\":2}}],[\"tell\",{\"1\":{\"235\":1,\"237\":1,\"347\":1}}],[\"testinterface\",{\"1\":{\"662\":7}}],[\"testreflect\",{\"1\":{\"553\":1}}],[\"testclass\",{\"1\":{\"486\":2,\"487\":1}}],[\"test\",{\"1\":{\"221\":2,\"259\":1,\"279\":1,\"425\":1,\"513\":1,\"931\":1}}],[\"textrue\",{\"1\":{\"400\":1}}],[\"texture不相上下了\",{\"1\":{\"400\":1}}],[\"texture使用\",{\"1\":{\"398\":1}}],[\"textureregistrywrf\",{\"1\":{\"398\":2}}],[\"texture和ffi方案分别使用\",{\"1\":{\"395\":1}}],[\"textureid中\",{\"1\":{\"397\":1}}],[\"textureid和ui\",{\"1\":{\"395\":1}}],[\"textureid\",{\"1\":{\"392\":3,\"393\":1,\"396\":10}}],[\"textureimageinfo\",{\"1\":{\"392\":4}}],[\"texture\",{\"1\":{\"385\":1,\"391\":1,\"392\":2,\"393\":4,\"396\":1,\"397\":3,\"398\":3,\"400\":4}}],[\"textpainter\",{\"1\":{\"334\":1}}],[\"textparentdata>\",{\"1\":{\"265\":2}}],[\"text赋值了\",{\"1\":{\"265\":1}}],[\"textheightbehavior\",{\"1\":{\"251\":1,\"262\":1,\"265\":2}}],[\"textwidthbasis\",{\"1\":{\"251\":1,\"262\":1,\"265\":2}}],[\"textstyle\",{\"1\":{\"264\":2,\"276\":1,\"295\":1}}],[\"textspan\",{\"1\":{\"262\":1,\"264\":4}}],[\"textscalefactor\",{\"1\":{\"251\":1,\"262\":1,\"265\":2}}],[\"textsize=\",{\"1\":{\"189\":1}}],[\"textsize\",{\"1\":{\"116\":3,\"117\":3}}],[\"textalign\",{\"1\":{\"251\":1,\"262\":1,\"264\":4,\"265\":2}}],[\"textdirection\",{\"1\":{\"251\":4,\"259\":2,\"262\":1,\"264\":2,\"265\":3,\"424\":2}}],[\"text=character\",{\"1\":{\"243\":1}}],[\"text=\",{\"1\":{\"189\":3,\"784\":2}}],[\"textview\",{\"1\":{\"189\":1,\"570\":3}}],[\"textcolor=\",{\"1\":{\"116\":1,\"118\":1}}],[\"textcolor\",{\"1\":{\"116\":1}}],[\"text\",{\"0\":{\"33\":1,\"264\":1},\"1\":{\"33\":8,\"63\":1,\"105\":4,\"138\":1,\"153\":10,\"251\":9,\"262\":3,\"263\":4,\"264\":15,\"265\":6,\"266\":2,\"273\":4,\"276\":10,\"279\":1,\"284\":1,\"289\":1,\"295\":1,\"342\":1,\"403\":2,\"434\":1,\"444\":2,\"445\":2,\"570\":1,\"578\":4,\"737\":2,\"784\":1}}],[\"txt文件中\",{\"1\":{\"701\":1}}],[\"txt将ls的内容追加输出到result\",{\"1\":{\"701\":1}}],[\"txt\",{\"1\":{\"30\":2}}],[\"trianglenum\",{\"1\":{\"911\":2}}],[\"trigger\",{\"1\":{\"238\":1,\"302\":1,\"376\":1,\"761\":1}}],[\"troubleshooting\",{\"1\":{\"448\":1}}],[\"treenode\",{\"1\":{\"666\":6}}],[\"treeify\",{\"1\":{\"505\":1}}],[\"tree\",{\"1\":{\"251\":2,\"252\":1,\"253\":4,\"254\":7,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":3,\"262\":3,\"263\":2,\"264\":4,\"265\":6,\"266\":5,\"274\":1,\"278\":1,\"305\":1,\"332\":1,\"372\":1,\"666\":7}}],[\"treated\",{\"1\":{\"234\":1}}],[\"treat\",{\"1\":{\"26\":1}}],[\"tr\",{\"1\":{\"193\":2}}],[\"travis\",{\"0\":{\"790\":1,\"794\":1},\"1\":{\"794\":2,\"795\":1,\"796\":1}}],[\"traverse\",{\"1\":{\"753\":1}}],[\"tracing\",{\"1\":{\"376\":1}}],[\"track\",{\"1\":{\"395\":1}}],[\"trackliveimage\",{\"1\":{\"376\":3}}],[\"tracking\",{\"1\":{\"376\":2}}],[\"trace\",{\"1\":{\"247\":3,\"376\":1,\"753\":1,\"759\":1,\"761\":4}}],[\"training\",{\"1\":{\"770\":1}}],[\"trainhoppinganimation\",{\"1\":{\"317\":1}}],[\"trailer\",{\"1\":{\"126\":1}}],[\"trampoline\",{\"1\":{\"247\":1}}],[\"transfer\",{\"1\":{\"637\":1}}],[\"transformed\",{\"1\":{\"441\":3}}],[\"transforminternal\",{\"1\":{\"360\":5}}],[\"transforming\",{\"1\":{\"359\":1}}],[\"transformation\",{\"1\":{\"342\":1}}],[\"transformations有两个转化livedata的方法\",{\"1\":{\"187\":1}}],[\"transform\",{\"1\":{\"302\":2,\"310\":1,\"311\":1,\"316\":1,\"324\":1,\"334\":2,\"357\":9,\"358\":3,\"359\":3,\"360\":7,\"361\":2,\"629\":2}}],[\"transient\",{\"1\":{\"500\":4,\"508\":2,\"523\":6,\"583\":1,\"584\":1,\"586\":2,\"590\":1}}],[\"transitioned\",{\"1\":{\"761\":1}}],[\"transitionnativetovm\",{\"1\":{\"759\":3}}],[\"transitionxxx\",{\"1\":{\"753\":1}}],[\"transition\",{\"1\":{\"350\":1,\"351\":2,\"352\":1,\"753\":2,\"759\":3}}],[\"transitioning\",{\"1\":{\"350\":1}}],[\"transitiononusergestures\",{\"1\":{\"346\":1}}],[\"transitionbuilder\",{\"1\":{\"311\":1}}],[\"transitions\",{\"1\":{\"302\":1,\"352\":1}}],[\"translating\",{\"1\":{\"763\":1}}],[\"translation\",{\"1\":{\"78\":1}}],[\"translationy\",{\"1\":{\"74\":2}}],[\"translationx\",{\"1\":{\"74\":3,\"75\":1}}],[\"translate\",{\"1\":{\"332\":1,\"334\":1}}],[\"transparent<\",{\"1\":{\"167\":1}}],[\"transparent\",{\"1\":{\"146\":1,\"358\":1}}],[\"transaction\",{\"1\":{\"71\":5,\"138\":5}}],[\"transact\",{\"1\":{\"71\":3,\"138\":3}}],[\"truncating\",{\"1\":{\"247\":1}}],[\"truncated\",{\"1\":{\"247\":4}}],[\"truncate\",{\"1\":{\"247\":1}}],[\"truth\",{\"1\":{\"126\":1}}],[\"true\",{\"1\":{\"6\":1,\"25\":2,\"26\":4,\"27\":2,\"30\":1,\"35\":1,\"36\":1,\"43\":1,\"48\":2,\"63\":3,\"71\":2,\"80\":1,\"89\":1,\"112\":5,\"117\":2,\"138\":2,\"147\":1,\"172\":1,\"173\":1,\"179\":7,\"185\":1,\"193\":2,\"222\":1,\"226\":1,\"234\":2,\"235\":2,\"238\":1,\"243\":3,\"246\":2,\"247\":5,\"251\":1,\"254\":1,\"259\":1,\"263\":1,\"285\":1,\"304\":1,\"322\":1,\"330\":1,\"333\":1,\"350\":1,\"352\":1,\"370\":1,\"376\":1,\"383\":1,\"395\":2,\"399\":2,\"403\":2,\"415\":1,\"418\":1,\"419\":1,\"422\":1,\"424\":3,\"426\":2,\"436\":1,\"439\":1,\"486\":1,\"487\":1,\"545\":2,\"553\":2,\"554\":1,\"569\":2,\"587\":2,\"591\":1,\"619\":1,\"621\":1,\"638\":1,\"723\":1,\"748\":4,\"749\":1,\"752\":1,\"753\":3,\"757\":3,\"758\":1,\"759\":7,\"761\":5,\"783\":1,\"847\":2,\"848\":2}}],[\"trymarkisolateready\",{\"1\":{\"753\":1}}],[\"try\",{\"1\":{\"39\":1,\"62\":3,\"63\":2,\"71\":1,\"83\":1,\"138\":1,\"179\":1,\"193\":3,\"224\":1,\"226\":2,\"231\":3,\"238\":1,\"243\":2,\"244\":1,\"256\":1,\"264\":2,\"294\":1,\"376\":2,\"383\":2,\"395\":1,\"398\":1,\"424\":1,\"485\":1,\"557\":1,\"569\":1,\"583\":1,\"584\":2,\"586\":1,\"587\":3,\"629\":1,\"632\":1,\"634\":1,\"656\":2,\"658\":1,\"710\":1,\"712\":1,\"731\":1,\"742\":2,\"748\":2,\"890\":4}}],[\"thin\",{\"1\":{\"767\":1}}],[\"thisisinitialvalue\",{\"1\":{\"619\":1}}],[\"this$0来引用\",{\"1\":{\"513\":1}}],[\"this$0\",{\"1\":{\"513\":5}}],[\"this赋值给其他变量\",{\"1\":{\"475\":1}}],[\"this及navigatorstate\",{\"1\":{\"349\":1}}],[\"this\",{\"0\":{\"635\":1},\"1\":{\"25\":1,\"26\":5,\"27\":3,\"30\":5,\"38\":2,\"52\":1,\"64\":2,\"71\":5,\"74\":1,\"83\":1,\"92\":2,\"117\":3,\"118\":1,\"123\":2,\"138\":4,\"153\":3,\"159\":1,\"173\":3,\"178\":1,\"183\":1,\"185\":1,\"186\":1,\"187\":1,\"189\":1,\"193\":8,\"195\":1,\"196\":3,\"202\":2,\"214\":1,\"215\":1,\"218\":1,\"224\":1,\"228\":1,\"229\":1,\"231\":2,\"232\":6,\"234\":7,\"235\":7,\"237\":1,\"243\":4,\"247\":11,\"253\":1,\"255\":4,\"256\":3,\"259\":4,\"262\":4,\"264\":3,\"265\":2,\"270\":2,\"273\":8,\"276\":2,\"282\":1,\"285\":1,\"295\":2,\"302\":7,\"309\":1,\"310\":3,\"311\":2,\"316\":3,\"323\":2,\"324\":3,\"325\":4,\"330\":2,\"331\":5,\"342\":3,\"346\":6,\"348\":12,\"349\":1,\"350\":1,\"351\":5,\"357\":6,\"358\":2,\"359\":2,\"360\":1,\"369\":3,\"370\":1,\"374\":6,\"376\":2,\"383\":1,\"384\":2,\"398\":3,\"399\":2,\"405\":3,\"408\":1,\"409\":2,\"411\":1,\"412\":1,\"413\":2,\"415\":1,\"417\":2,\"418\":3,\"424\":1,\"426\":2,\"429\":1,\"439\":1,\"448\":1,\"485\":1,\"495\":1,\"496\":2,\"513\":9,\"523\":1,\"527\":3,\"528\":1,\"553\":2,\"560\":3,\"561\":1,\"570\":1,\"583\":1,\"591\":2,\"594\":1,\"604\":2,\"610\":1,\"612\":2,\"620\":1,\"629\":2,\"636\":2,\"662\":1,\"711\":6,\"712\":1,\"728\":1,\"742\":3,\"745\":1,\"748\":10,\"749\":1,\"751\":1,\"752\":2,\"753\":9,\"754\":1,\"756\":1,\"757\":1,\"759\":5,\"760\":1,\"761\":12,\"783\":1,\"784\":1,\"785\":1,\"822\":1}}],[\"though\",{\"1\":{\"753\":1}}],[\"those\",{\"1\":{\"351\":1,\"408\":1}}],[\"thandler\",{\"1\":{\"247\":2,\"759\":1,\"761\":4}}],[\"than\",{\"1\":{\"237\":1,\"247\":1,\"412\":1,\"523\":1}}],[\"that\",{\"1\":{\"63\":1,\"92\":2,\"126\":2,\"183\":1,\"193\":1,\"224\":1,\"228\":2,\"229\":2,\"231\":5,\"232\":2,\"233\":2,\"234\":2,\"237\":1,\"243\":2,\"244\":1,\"247\":6,\"253\":1,\"259\":1,\"262\":1,\"264\":1,\"276\":2,\"282\":1,\"285\":1,\"331\":1,\"348\":1,\"357\":1,\"360\":1,\"365\":1,\"371\":1,\"374\":1,\"376\":3,\"384\":1,\"408\":1,\"412\":1,\"417\":5,\"422\":1,\"424\":1,\"430\":1,\"445\":1,\"492\":1,\"493\":2,\"494\":1,\"496\":1,\"574\":2,\"629\":1,\"742\":1,\"748\":4,\"752\":1,\"753\":3,\"757\":2,\"759\":3,\"761\":2,\"767\":1,\"771\":2,\"822\":1}}],[\"thus\",{\"1\":{\"231\":1}}],[\"threshold\",{\"1\":{\"500\":1,\"501\":1,\"506\":5,\"523\":1}}],[\"three\",{\"1\":{\"294\":1,\"631\":4}}],[\"threadcontextelement\",{\"1\":{\"625\":1}}],[\"threadgroup\",{\"1\":{\"560\":2}}],[\"threadterminated\",{\"1\":{\"560\":3}}],[\"threadlocal<string\",{\"1\":{\"625\":1}}],[\"threadlocal<\",{\"1\":{\"527\":2,\"528\":1}}],[\"threadlocals\",{\"1\":{\"527\":4}}],[\"threadlocal2\",{\"1\":{\"527\":1}}],[\"threadlocalmap中\",{\"1\":{\"528\":1}}],[\"threadlocalmap\",{\"1\":{\"525\":1,\"527\":4}}],[\"threadlocal是thread中用来保存线程私有变量的数据结构\",{\"1\":{\"525\":1}}],[\"threadlocal\",{\"0\":{\"525\":1},\"1\":{\"525\":1,\"527\":17,\"528\":2,\"530\":2,\"608\":1,\"625\":6}}],[\"threaded\",{\"1\":{\"285\":1}}],[\"threadexitcallback\",{\"1\":{\"247\":1}}],[\"threadpool\",{\"1\":{\"247\":15,\"750\":1,\"756\":1,\"759\":4,\"760\":2,\"761\":4}}],[\"threadpoolexector\",{\"1\":{\"193\":1}}],[\"threadpoolexecutor\",{\"1\":{\"193\":5}}],[\"threadstartcallback\",{\"1\":{\"247\":1}}],[\"threadstart\",{\"1\":{\"247\":4}}],[\"threadstartdata\",{\"1\":{\"247\":4}}],[\"threadstartfunction\",{\"1\":{\"247\":2}}],[\"threads\",{\"1\":{\"244\":1,\"247\":1,\"285\":3,\"752\":1,\"753\":1,\"760\":1,\"761\":1}}],[\"thread\",{\"0\":{\"560\":1},\"1\":{\"48\":2,\"139\":2,\"179\":1,\"190\":1,\"192\":1,\"193\":6,\"205\":1,\"237\":2,\"247\":51,\"248\":1,\"285\":2,\"297\":1,\"487\":4,\"527\":23,\"560\":3,\"562\":1,\"622\":1,\"624\":3,\"625\":2,\"629\":2,\"640\":1,\"651\":1,\"663\":1,\"740\":1,\"745\":1,\"751\":1,\"752\":2,\"753\":9,\"754\":1,\"758\":1,\"759\":30,\"760\":1,\"761\":6,\"763\":5,\"768\":3}}],[\"through\",{\"1\":{\"228\":1,\"740\":1,\"771\":1,\"822\":1}}],[\"throwisolatespawnexception\",{\"1\":{\"754\":1}}],[\"thrown\",{\"1\":{\"231\":1,\"374\":1,\"395\":1,\"485\":1}}],[\"throwable\",{\"1\":{\"179\":1,\"193\":1,\"656\":1,\"658\":1}}],[\"throws\",{\"1\":{\"62\":2,\"63\":4,\"71\":3,\"138\":3,\"179\":1,\"193\":1,\"231\":1,\"485\":1,\"506\":1,\"560\":2,\"583\":4,\"584\":3,\"587\":4,\"590\":2,\"616\":1,\"708\":1}}],[\"throw\",{\"1\":{\"48\":1,\"193\":4,\"227\":1,\"231\":2,\"232\":1,\"234\":2,\"243\":4,\"308\":1,\"360\":1,\"395\":1,\"398\":3,\"426\":1,\"560\":1,\"583\":1,\"587\":2,\"748\":1}}],[\"their\",{\"1\":{\"285\":1,\"302\":3,\"402\":1,\"424\":1,\"495\":1,\"552\":1,\"740\":1}}],[\"thestacktrace\",{\"1\":{\"231\":3}}],[\"these\",{\"1\":{\"126\":1,\"430\":1,\"767\":1,\"770\":2}}],[\"theerror\",{\"1\":{\"231\":3}}],[\"they\",{\"1\":{\"183\":1,\"247\":1,\"262\":1,\"302\":1,\"360\":1,\"384\":1,\"615\":1,\"627\":1,\"753\":1,\"770\":1}}],[\"themes\",{\"1\":{\"807\":2}}],[\"themedata\",{\"1\":{\"279\":1}}],[\"theme\",{\"1\":{\"167\":1,\"279\":1,\"302\":1}}],[\"them\",{\"1\":{\"126\":1,\"494\":1,\"630\":1,\"636\":1}}],[\"then只是对传入的回调的进行了包装\",{\"1\":{\"232\":1}}],[\"then<r>\",{\"1\":{\"232\":1}}],[\"then的实现\",{\"1\":{\"232\":1}}],[\"then\",{\"0\":{\"232\":1},\"1\":{\"92\":1,\"205\":1,\"223\":1,\"230\":2,\"231\":4,\"232\":2,\"241\":1,\"243\":6,\"247\":1,\"285\":1,\"351\":2,\"412\":4,\"485\":1,\"754\":1,\"761\":1,\"771\":2}}],[\"therefore\",{\"1\":{\"573\":1,\"753\":1}}],[\"thereof\",{\"1\":{\"243\":1}}],[\"there\",{\"1\":{\"26\":2,\"87\":1,\"193\":1,\"231\":1,\"237\":1,\"238\":1,\"247\":2,\"417\":1,\"418\":1,\"759\":1}}],[\"the\",{\"1\":{\"0\":1,\"2\":1,\"19\":1,\"30\":1,\"33\":14,\"71\":2,\"87\":3,\"92\":8,\"123\":1,\"126\":3,\"128\":5,\"138\":2,\"139\":4,\"159\":1,\"183\":2,\"193\":8,\"204\":2,\"215\":1,\"224\":3,\"225\":2,\"226\":5,\"228\":5,\"229\":5,\"231\":22,\"232\":6,\"233\":6,\"234\":7,\"235\":5,\"237\":12,\"238\":13,\"240\":1,\"243\":8,\"244\":10,\"246\":3,\"247\":33,\"253\":7,\"254\":3,\"255\":2,\"256\":3,\"262\":2,\"264\":1,\"274\":1,\"276\":7,\"285\":3,\"302\":7,\"307\":1,\"309\":4,\"310\":1,\"311\":4,\"316\":3,\"323\":3,\"331\":1,\"332\":1,\"333\":3,\"347\":2,\"350\":6,\"351\":9,\"352\":6,\"359\":4,\"370\":3,\"372\":1,\"374\":2,\"376\":14,\"384\":4,\"395\":10,\"408\":4,\"412\":19,\"417\":10,\"418\":7,\"424\":3,\"429\":5,\"430\":3,\"437\":2,\"445\":1,\"448\":1,\"485\":4,\"486\":1,\"492\":2,\"493\":4,\"494\":1,\"495\":2,\"496\":5,\"498\":2,\"506\":1,\"511\":3,\"519\":3,\"528\":1,\"552\":2,\"560\":1,\"573\":3,\"574\":3,\"579\":1,\"583\":4,\"584\":3,\"586\":7,\"587\":1,\"594\":2,\"615\":2,\"629\":2,\"630\":3,\"631\":1,\"636\":1,\"740\":3,\"742\":5,\"745\":2,\"748\":21,\"749\":1,\"751\":1,\"752\":4,\"753\":19,\"754\":4,\"756\":3,\"757\":11,\"759\":22,\"760\":2,\"761\":30,\"763\":4,\"767\":1,\"768\":2,\"769\":1,\"770\":1,\"771\":4,\"822\":4}}],[\"tisolate\",{\"1\":{\"753\":1}}],[\"tight模式的flexible\",{\"1\":{\"276\":1}}],[\"tight的话\",{\"1\":{\"276\":1,\"277\":1}}],[\"tight\",{\"1\":{\"276\":2}}],[\"tid\",{\"1\":{\"247\":3}}],[\"tickerchannel\",{\"1\":{\"636\":4,\"638\":2}}],[\"tickermode\",{\"1\":{\"347\":1,\"638\":2}}],[\"tickerfuture\",{\"1\":{\"319\":7,\"320\":2}}],[\"tickerproviderstatemixin\",{\"1\":{\"319\":1}}],[\"tickerprovider\",{\"1\":{\"319\":2,\"322\":1,\"327\":1,\"328\":1}}],[\"ticker\",{\"1\":{\"307\":1,\"314\":3,\"315\":1,\"319\":5,\"320\":4,\"322\":1,\"327\":3,\"336\":1,\"636\":1,\"638\":1}}],[\"ticked\",{\"1\":{\"307\":1}}],[\"tick\",{\"0\":{\"321\":1},\"1\":{\"230\":2,\"238\":2,\"319\":2,\"320\":1,\"321\":1,\"327\":2}}],[\"tilemode\",{\"1\":{\"146\":1}}],[\"title\",{\"1\":{\"24\":1,\"152\":1,\"279\":1,\"737\":3,\"783\":1,\"809\":1}}],[\"titleview\",{\"1\":{\"24\":3}}],[\"timezone\",{\"1\":{\"811\":1}}],[\"timelineevent\",{\"1\":{\"757\":1}}],[\"timelinegetmicros\",{\"1\":{\"757\":1}}],[\"timelinebeginendscope\",{\"1\":{\"753\":1}}],[\"timeline\",{\"1\":{\"751\":1,\"753\":2,\"757\":1,\"758\":1}}],[\"timelinetask\",{\"1\":{\"376\":2}}],[\"timelimit\",{\"1\":{\"383\":1}}],[\"timestamp\",{\"1\":{\"408\":1}}],[\"times\",{\"1\":{\"376\":1,\"614\":3}}],[\"timeinseconds\",{\"1\":{\"324\":2,\"325\":4}}],[\"timeinmillis\",{\"1\":{\"13\":1,\"19\":2}}],[\"timeelapsestring\",{\"1\":{\"241\":1}}],[\"timeout=300\",{\"1\":{\"737\":1}}],[\"timeout\",{\"1\":{\"234\":1,\"235\":3,\"236\":1,\"238\":2,\"560\":1,\"731\":1,\"761\":1}}],[\"timeouts\",{\"1\":{\"234\":1}}],[\"timeunit\",{\"1\":{\"193\":1,\"708\":2}}],[\"time\",{\"1\":{\"20\":2,\"126\":1,\"139\":1,\"183\":1,\"193\":1,\"231\":1,\"234\":1,\"235\":3,\"237\":3,\"241\":2,\"302\":1,\"311\":1,\"323\":4,\"351\":1,\"408\":2,\"493\":1,\"496\":1,\"511\":2,\"576\":2,\"578\":8,\"630\":2,\"631\":1,\"731\":6,\"761\":8,\"763\":2,\"770\":2}}],[\"timeretry\",{\"1\":{\"383\":1}}],[\"timer>\",{\"1\":{\"238\":2}}],[\"timerheap\",{\"1\":{\"235\":2}}],[\"timermillisecondclock\",{\"1\":{\"234\":1,\"237\":4,\"238\":1}}],[\"timers\",{\"1\":{\"234\":1,\"235\":4,\"237\":4,\"238\":10}}],[\"timerfactory创建的\",{\"1\":{\"234\":1}}],[\"timerfactory\",{\"1\":{\"234\":3}}],[\"timer\",{\"0\":{\"233\":1,\"234\":1,\"235\":1},\"1\":{\"10\":1,\"229\":1,\"230\":12,\"231\":2,\"232\":1,\"233\":10,\"234\":64,\"235\":23,\"236\":2,\"237\":2,\"238\":26,\"239\":1,\"240\":1,\"761\":1}}],[\"toindex\",{\"1\":{\"858\":7,\"859\":11}}],[\"tointarray\",{\"1\":{\"666\":2,\"847\":1,\"848\":1,\"921\":1}}],[\"toint\",{\"1\":{\"196\":1}}],[\"tocstring\",{\"1\":{\"761\":1}}],[\"tochararray\",{\"1\":{\"612\":1,\"890\":1}}],[\"toerrorcstring\",{\"1\":{\"753\":1}}],[\"tobiginteger\",{\"1\":{\"614\":2}}],[\"tobytearray\",{\"1\":{\"486\":1}}],[\"tobytedata\",{\"1\":{\"371\":1,\"372\":1,\"384\":1}}],[\"tohexstring\",{\"1\":{\"557\":1}}],[\"toherocontext\",{\"1\":{\"351\":2}}],[\"toheroes\",{\"1\":{\"351\":7}}],[\"toherolocation\",{\"1\":{\"348\":1,\"352\":1}}],[\"tohero\",{\"1\":{\"348\":4,\"351\":11,\"352\":3}}],[\"tohero两个\",{\"1\":{\"348\":1}}],[\"towards\",{\"1\":{\"412\":2,\"417\":1}}],[\"tolist\",{\"1\":{\"403\":2,\"418\":1,\"652\":1}}],[\"told\",{\"1\":{\"384\":1}}],[\"tolerance\",{\"1\":{\"323\":5}}],[\"toset\",{\"1\":{\"652\":1}}],[\"tosubtreecontext\",{\"1\":{\"351\":3}}],[\"tostringshort\",{\"1\":{\"302\":1}}],[\"tostring\",{\"1\":{\"295\":1,\"323\":1,\"359\":1,\"557\":1,\"584\":1,\"586\":1,\"590\":1,\"748\":3,\"817\":1,\"833\":1,\"890\":1}}],[\"toroute\",{\"1\":{\"348\":3,\"350\":5,\"351\":1}}],[\"total\",{\"1\":{\"516\":2,\"731\":1}}],[\"totaltimeinseconds\",{\"1\":{\"325\":3}}],[\"totalpathlength\",{\"1\":{\"147\":2}}],[\"too\",{\"1\":{\"231\":1,\"244\":1,\"247\":1,\"408\":1,\"630\":1}}],[\"toolbar等组合起来控制\",{\"1\":{\"783\":1}}],[\"toolbarheight\",{\"1\":{\"403\":1}}],[\"toolbar\",{\"0\":{\"108\":1},\"1\":{\"108\":1,\"110\":5,\"111\":3}}],[\"tools=\",{\"1\":{\"783\":1,\"784\":1}}],[\"tools\",{\"1\":{\"0\":1,\"763\":1,\"770\":1,\"783\":2,\"784\":2}}],[\"touppercase\",{\"1\":{\"153\":2,\"557\":1,\"612\":4,\"664\":1}}],[\"touchslop\",{\"1\":{\"74\":1}}],[\"touchtarget\",{\"1\":{\"26\":4}}],[\"touches\",{\"1\":{\"26\":2}}],[\"touch\",{\"1\":{\"0\":1,\"26\":5,\"76\":2,\"376\":4,\"684\":1}}],[\"token\",{\"1\":{\"138\":1,\"794\":1}}],[\"tofilepath\",{\"1\":{\"682\":3}}],[\"tofloat\",{\"1\":{\"131\":2,\"196\":6}}],[\"toformattime\",{\"1\":{\"20\":1}}],[\"todouble\",{\"1\":{\"321\":1,\"392\":2}}],[\"todo\",{\"0\":{\"77\":1},\"1\":{\"173\":1,\"189\":5,\"199\":1,\"229\":1,\"243\":2,\"351\":1,\"398\":2,\"553\":2,\"662\":1,\"757\":1,\"761\":1,\"836\":1}}],[\"toast\",{\"1\":{\"76\":1,\"118\":2,\"186\":2}}],[\"topologicalsort\",{\"1\":{\"850\":1}}],[\"toplevelfunction\",{\"1\":{\"748\":1}}],[\"topcenter\",{\"1\":{\"340\":2}}],[\"topic\",{\"1\":{\"126\":2,\"128\":1}}],[\"topics\",{\"1\":{\"125\":1,\"138\":1}}],[\"topbar\",{\"1\":{\"125\":1}}],[\"top\",{\"1\":{\"33\":1,\"74\":3,\"75\":1,\"352\":2,\"748\":1,\"759\":1,\"761\":1,\"859\":5}}],[\"to\",{\"0\":{\"453\":1},\"1\":{\"10\":1,\"19\":1,\"25\":1,\"26\":4,\"33\":1,\"71\":1,\"92\":3,\"123\":1,\"128\":2,\"138\":1,\"139\":1,\"162\":1,\"183\":2,\"189\":1,\"193\":1,\"224\":1,\"225\":1,\"226\":2,\"228\":1,\"229\":2,\"231\":6,\"232\":4,\"233\":2,\"234\":2,\"235\":4,\"236\":2,\"237\":5,\"238\":3,\"243\":8,\"244\":2,\"247\":13,\"253\":1,\"255\":3,\"262\":1,\"264\":2,\"276\":2,\"285\":2,\"302\":6,\"308\":1,\"309\":2,\"311\":2,\"331\":1,\"332\":3,\"342\":1,\"347\":1,\"348\":1,\"350\":10,\"351\":8,\"359\":1,\"360\":2,\"371\":1,\"374\":2,\"376\":7,\"383\":1,\"384\":2,\"395\":5,\"405\":4,\"408\":2,\"412\":1,\"417\":1,\"418\":4,\"424\":2,\"429\":2,\"430\":1,\"445\":2,\"448\":1,\"485\":1,\"494\":2,\"495\":1,\"496\":3,\"519\":1,\"523\":1,\"552\":2,\"560\":2,\"574\":1,\"584\":2,\"586\":3,\"587\":4,\"594\":1,\"598\":1,\"617\":3,\"619\":2,\"629\":1,\"630\":4,\"636\":4,\"662\":1,\"700\":1,\"728\":1,\"742\":2,\"745\":2,\"748\":2,\"749\":1,\"752\":4,\"753\":10,\"754\":2,\"756\":1,\"757\":2,\"759\":14,\"761\":16,\"763\":3,\"765\":1,\"768\":1,\"770\":1,\"771\":1,\"783\":1,\"806\":1,\"822\":1,\"912\":6}}],[\"wc\",{\"0\":{\"704\":1},\"1\":{\"704\":1}}],[\"w可以查看用户相关信息\",{\"1\":{\"691\":1}}],[\"w\",{\"1\":{\"578\":2,\"689\":1,\"690\":2,\"704\":1,\"731\":1,\"737\":1}}],[\"w3cnote\",{\"1\":{\"514\":1}}],[\"wbmp\",{\"1\":{\"365\":1}}],[\"w4lle\",{\"1\":{\"250\":1}}],[\"wpx\",{\"1\":{\"196\":8}}],[\"wjtaigwh\",{\"1\":{\"142\":1}}],[\"writing\",{\"1\":{\"450\":1}}],[\"written\",{\"1\":{\"247\":1,\"763\":1}}],[\"writemessage\",{\"1\":{\"745\":1,\"759\":1}}],[\"writer\",{\"1\":{\"745\":1}}],[\"write操作和synchronize\",{\"1\":{\"604\":1}}],[\"writeenum\",{\"1\":{\"591\":1}}],[\"writeexternaldata\",{\"1\":{\"591\":2}}],[\"writeexternal\",{\"1\":{\"590\":1,\"591\":3}}],[\"writelong\",{\"1\":{\"590\":1}}],[\"writeunshared\",{\"1\":{\"587\":1}}],[\"writeserialdata\",{\"1\":{\"591\":1}}],[\"writes\",{\"1\":{\"587\":2,\"591\":1}}],[\"writestring\",{\"1\":{\"71\":1,\"138\":1,\"591\":1}}],[\"writeclassdesc\",{\"1\":{\"587\":1}}],[\"writeclass\",{\"1\":{\"587\":1}}],[\"writehandle\",{\"1\":{\"587\":2}}],[\"writenull\",{\"1\":{\"587\":1}}],[\"writenoexception\",{\"1\":{\"71\":1,\"138\":1}}],[\"writefile\",{\"1\":{\"752\":1}}],[\"writefields\",{\"1\":{\"584\":2}}],[\"writefloat\",{\"1\":{\"590\":1}}],[\"writefatalexception\",{\"1\":{\"587\":2}}],[\"writefrom\",{\"1\":{\"247\":1}}],[\"writeint\",{\"1\":{\"506\":2,\"587\":1,\"590\":1,\"594\":1}}],[\"writeinterfacetoken\",{\"1\":{\"71\":1,\"138\":1}}],[\"writeordinaryobject\",{\"1\":{\"591\":2}}],[\"writeobject0\",{\"1\":{\"587\":3,\"591\":1}}],[\"writeobjectoverride\",{\"1\":{\"587\":1}}],[\"writeobject\",{\"1\":{\"506\":1,\"584\":3,\"586\":1,\"587\":4,\"590\":1}}],[\"writeonlyappend\",{\"1\":{\"243\":1}}],[\"writeonly\",{\"1\":{\"243\":1}}],[\"writearray\",{\"1\":{\"591\":1}}],[\"writeasbytes\",{\"1\":{\"383\":1}}],[\"writeapimessage\",{\"1\":{\"247\":1}}],[\"writebyte\",{\"1\":{\"247\":1,\"587\":1,\"591\":1}}],[\"writetoparcel\",{\"1\":{\"594\":2}}],[\"writetoblocking\",{\"1\":{\"237\":2}}],[\"writetypedlist\",{\"1\":{\"138\":1}}],[\"write\",{\"1\":{\"5\":1,\"6\":2,\"237\":1,\"243\":1,\"486\":1,\"506\":1,\"586\":1,\"731\":1,\"737\":9,\"752\":1}}],[\"wrote\",{\"1\":{\"237\":1}}],[\"wrongconstant\",{\"1\":{\"118\":1}}],[\"wraprequestbody\",{\"1\":{\"711\":1}}],[\"wrappedrequestbody\",{\"1\":{\"711\":2}}],[\"wrapper\",{\"1\":{\"370\":1,\"519\":1}}],[\"wrapping\",{\"1\":{\"251\":1}}],[\"wrap\",{\"1\":{\"115\":1,\"118\":1,\"158\":1,\"159\":4,\"167\":2,\"189\":2}}],[\"were\",{\"1\":{\"748\":1,\"754\":1,\"767\":1,\"770\":1}}],[\"weak\",{\"0\":{\"574\":1}}],[\"weakreference<threadlocal<\",{\"1\":{\"528\":1}}],[\"weakreference<textureregistry>\",{\"1\":{\"398\":1}}],[\"weakreference\",{\"0\":{\"480\":1}}],[\"weeks\",{\"1\":{\"573\":2}}],[\"week\",{\"0\":{\"573\":1},\"1\":{\"573\":6,\"574\":2,\"578\":6,\"579\":1}}],[\"website\",{\"1\":{\"586\":1}}],[\"webp\",{\"1\":{\"365\":2}}],[\"webviewclient\",{\"1\":{\"80\":2}}],[\"webview\",{\"0\":{\"79\":1,\"80\":1},\"1\":{\"80\":3}}],[\"welcome\",{\"1\":{\"189\":1,\"448\":1}}],[\"wenku\",{\"1\":{\"149\":1}}],[\"weight\",{\"0\":{\"182\":1},\"1\":{\"116\":2,\"117\":2,\"118\":2,\"182\":2,\"357\":1}}],[\"weightgroup\",{\"1\":{\"116\":2,\"118\":2}}],[\"we\",{\"1\":{\"92\":3,\"224\":1,\"226\":3,\"229\":3,\"231\":4,\"233\":2,\"235\":1,\"236\":1,\"237\":4,\"238\":2,\"243\":1,\"244\":4,\"247\":5,\"264\":1,\"332\":4,\"350\":3,\"351\":3,\"352\":1,\"376\":8,\"384\":2,\"408\":2,\"412\":10,\"413\":1,\"417\":5,\"418\":1,\"629\":1,\"630\":2,\"748\":3,\"752\":1,\"753\":10,\"754\":1,\"756\":1,\"759\":2,\"760\":2,\"761\":25}}],[\"wow64\",{\"1\":{\"731\":1}}],[\"woker\",{\"1\":{\"247\":1}}],[\"would\",{\"1\":{\"231\":1,\"376\":1,\"753\":1,\"757\":1}}],[\"woshiwoshiyu\",{\"1\":{\"62\":1}}],[\"words\",{\"1\":{\"412\":1}}],[\"worry\",{\"1\":{\"285\":1,\"351\":1}}],[\"workrequest\",{\"1\":{\"787\":3}}],[\"working\",{\"1\":{\"740\":1}}],[\"work\",{\"1\":{\"285\":1,\"627\":1,\"752\":1,\"770\":1}}],[\"workspace\",{\"1\":{\"742\":1}}],[\"works\",{\"1\":{\"267\":1}}],[\"worker从线程池中的取出任务执行\",{\"1\":{\"761\":1}}],[\"worker有两种情况\",{\"1\":{\"761\":1}}],[\"worker调用threadpool\",{\"1\":{\"761\":1}}],[\"workerlist\",{\"1\":{\"761\":1}}],[\"workerloop\",{\"1\":{\"761\":1}}],[\"worker的threadpool\",{\"1\":{\"760\":1}}],[\"workers\",{\"1\":{\"247\":4,\"760\":3,\"761\":8}}],[\"worker\",{\"1\":{\"247\":40,\"759\":17,\"760\":12,\"761\":22,\"787\":3}}],[\"workerthread\",{\"1\":{\"193\":1}}],[\"workerrunnable<params\",{\"1\":{\"193\":1}}],[\"workmanager用来管理即时或定时任务\",{\"1\":{\"787\":1}}],[\"workmanager主要倾向于保证任务在\",{\"1\":{\"10\":1}}],[\"workmanager和alarmmanager则在\",{\"1\":{\"10\":1}}],[\"workmanager\",{\"0\":{\"787\":1},\"1\":{\"10\":1,\"787\":1}}],[\"world\",{\"0\":{\"448\":1},\"1\":{\"0\":1,\"83\":1,\"189\":1,\"223\":1,\"486\":1,\"487\":2,\"798\":1}}],[\"why\",{\"1\":{\"424\":1,\"508\":1,\"514\":1}}],[\"white\",{\"1\":{\"295\":1}}],[\"which\",{\"1\":{\"238\":1,\"244\":1,\"247\":2,\"302\":17,\"309\":12,\"331\":1,\"332\":1,\"376\":1,\"402\":1,\"412\":1,\"433\":1,\"615\":1,\"696\":1,\"753\":2,\"761\":3,\"763\":2,\"771\":3,\"822\":1}}],[\"while\",{\"1\":{\"231\":2,\"237\":1,\"243\":1,\"244\":1,\"247\":2,\"265\":1,\"486\":1,\"534\":1,\"560\":2,\"638\":1,\"725\":1,\"731\":1,\"748\":1,\"761\":7,\"836\":2,\"847\":1,\"848\":1,\"850\":2,\"858\":1,\"859\":1,\"880\":1,\"913\":3,\"921\":1,\"927\":3}}],[\"whether\",{\"1\":{\"226\":1,\"323\":1}}],[\"whereas\",{\"1\":{\"615\":1}}],[\"wherever\",{\"1\":{\"412\":1}}],[\"where\",{\"1\":{\"92\":1,\"126\":1,\"234\":2,\"350\":1,\"384\":1,\"395\":1,\"408\":1,\"511\":1,\"728\":2,\"753\":1}}],[\"whenever\",{\"1\":{\"302\":1,\"761\":1}}],[\"whencomplete\",{\"1\":{\"243\":2}}],[\"when\",{\"1\":{\"76\":1,\"92\":1,\"125\":2,\"145\":1,\"173\":1,\"187\":1,\"228\":1,\"232\":2,\"247\":1,\"253\":2,\"302\":1,\"351\":2,\"359\":1,\"370\":3,\"374\":1,\"376\":1,\"448\":1,\"586\":1,\"612\":1,\"615\":1,\"630\":2,\"645\":1,\"753\":1,\"757\":1,\"759\":4,\"761\":2,\"770\":1,\"880\":1}}],[\"what\",{\"1\":{\"39\":3,\"92\":1,\"179\":1,\"193\":1,\"267\":1,\"281\":1,\"337\":1,\"351\":1,\"579\":1,\"598\":1}}],[\"who\",{\"1\":{\"0\":1,\"547\":1,\"691\":1}}],[\"wzhttps\",{\"1\":{\"33\":1}}],[\"www\",{\"1\":{\"33\":2,\"77\":3,\"111\":1,\"125\":1,\"137\":3,\"138\":2,\"139\":2,\"142\":1,\"243\":1,\"514\":1,\"516\":1,\"522\":1,\"538\":1,\"584\":1,\"587\":1,\"667\":1,\"675\":1,\"708\":2,\"731\":2,\"737\":1,\"740\":2,\"794\":1,\"904\":1}}],[\"warm\",{\"1\":{\"770\":1}}],[\"watch\",{\"1\":{\"740\":2}}],[\"watermark\",{\"1\":{\"138\":1}}],[\"wake\",{\"1\":{\"235\":1,\"237\":1}}],[\"wakeuphandler\",{\"1\":{\"237\":2}}],[\"wakeups\",{\"1\":{\"237\":1}}],[\"wakeuptime\",{\"1\":{\"234\":3,\"235\":3,\"237\":7,\"238\":2}}],[\"wakeup\",{\"1\":{\"12\":2,\"13\":1,\"19\":1,\"20\":1,\"235\":2,\"237\":2,\"238\":1}}],[\"waitmicros\",{\"1\":{\"761\":1}}],[\"wait和future\",{\"1\":{\"231\":1}}],[\"waiting\",{\"1\":{\"231\":1,\"561\":1,\"630\":1}}],[\"wait<t>\",{\"1\":{\"231\":1}}],[\"wait\",{\"1\":{\"230\":3,\"560\":2,\"629\":1,\"753\":1}}],[\"waitforinjectclass\",{\"1\":{\"213\":2,\"215\":2}}],[\"ways\",{\"1\":{\"763\":1}}],[\"way\",{\"1\":{\"128\":2,\"417\":1,\"630\":2}}],[\"want\",{\"1\":{\"92\":1,\"384\":1,\"761\":2}}],[\"wants\",{\"1\":{\"26\":1}}],[\"wassynchronouslyloaded\",{\"1\":{\"369\":2,\"370\":1}}],[\"wasn\",{\"1\":{\"92\":1}}],[\"was\",{\"1\":{\"26\":2,\"231\":1,\"247\":1,\"351\":5,\"376\":2,\"395\":1,\"412\":1,\"753\":4,\"761\":1,\"769\":1}}],[\"win32\",{\"1\":{\"805\":1}}],[\"windows\",{\"1\":{\"244\":1,\"719\":1,\"731\":1,\"799\":1,\"802\":1,\"805\":1,\"813\":1}}],[\"windowbackground\",{\"1\":{\"167\":1}}],[\"windowbackground使背景透明\",{\"1\":{\"167\":1}}],[\"windowmanager\",{\"0\":{\"76\":1},\"1\":{\"76\":5,\"196\":4}}],[\"window\",{\"0\":{\"76\":1},\"1\":{\"24\":2,\"25\":1,\"76\":11,\"160\":1,\"196\":1,\"253\":2}}],[\"wire\",{\"1\":{\"587\":1}}],[\"wiki\",{\"1\":{\"498\":1,\"575\":1}}],[\"wikipedia\",{\"1\":{\"206\":1,\"575\":1}}],[\"widthconstraints\",{\"1\":{\"439\":1}}],[\"widthfactor\",{\"1\":{\"251\":2,\"259\":9,\"262\":2}}],[\"widthpixels\",{\"1\":{\"196\":1}}],[\"widthsize\",{\"1\":{\"163\":3}}],[\"widthmode\",{\"1\":{\"163\":3}}],[\"widthmeasurespec\",{\"1\":{\"159\":4,\"163\":3}}],[\"width\",{\"1\":{\"131\":1,\"153\":4,\"195\":1,\"196\":1,\"251\":1,\"276\":7,\"330\":2,\"342\":4,\"343\":1,\"347\":4,\"367\":2,\"369\":1,\"370\":2,\"372\":1,\"392\":9,\"393\":2,\"396\":12,\"397\":3,\"399\":2,\"439\":3,\"440\":2}}],[\"width=\",{\"1\":{\"115\":1,\"118\":1,\"167\":2,\"189\":5,\"783\":1,\"784\":1}}],[\"width=1080\",{\"1\":{\"101\":2}}],[\"widget的原因\",{\"1\":{\"405\":1}}],[\"widgetbuilder\",{\"1\":{\"352\":1}}],[\"widget等出错会打印exception\",{\"1\":{\"295\":1}}],[\"widget$\",{\"1\":{\"295\":1}}],[\"widget>\",{\"1\":{\"272\":1}}],[\"widget都重建了\",{\"1\":{\"271\":1}}],[\"widget是配置信息\",{\"1\":{\"269\":1}}],[\"widgetrootwidget\",{\"1\":{\"266\":1}}],[\"widget才真正对应着我们在runapp里面传入的\",{\"1\":{\"262\":1}}],[\"widgetsapp\",{\"1\":{\"349\":2,\"353\":1}}],[\"widgetsbinding的scheduleattachrootwidget\",{\"1\":{\"254\":1}}],[\"widgetsbinding\",{\"1\":{\"253\":4,\"254\":2,\"255\":1,\"350\":1}}],[\"widgetsflutterbinding\",{\"0\":{\"253\":1},\"1\":{\"252\":1,\"253\":2,\"266\":1}}],[\"widgets\",{\"1\":{\"252\":1,\"253\":1,\"254\":2,\"255\":1,\"256\":3,\"259\":3,\"262\":3,\"263\":1,\"264\":3,\"265\":5,\"267\":2,\"285\":1,\"295\":1,\"300\":1,\"314\":1,\"333\":1,\"342\":1,\"424\":1,\"429\":1}}],[\"widget\",{\"0\":{\"270\":1,\"278\":1,\"424\":1},\"1\":{\"77\":1,\"108\":4,\"111\":8,\"189\":8,\"251\":8,\"252\":2,\"254\":7,\"255\":3,\"256\":7,\"257\":1,\"258\":1,\"259\":9,\"261\":1,\"262\":14,\"263\":7,\"264\":14,\"265\":8,\"266\":4,\"269\":1,\"270\":2,\"271\":1,\"273\":17,\"274\":3,\"276\":5,\"278\":6,\"279\":3,\"281\":2,\"282\":1,\"284\":1,\"288\":1,\"289\":1,\"295\":8,\"296\":1,\"300\":10,\"301\":1,\"302\":6,\"305\":4,\"307\":4,\"308\":9,\"309\":6,\"310\":14,\"311\":4,\"312\":2,\"314\":10,\"315\":1,\"329\":4,\"331\":2,\"335\":2,\"336\":2,\"338\":2,\"340\":2,\"341\":5,\"342\":2,\"344\":2,\"346\":4,\"347\":14,\"348\":4,\"349\":3,\"351\":5,\"352\":3,\"353\":2,\"355\":1,\"365\":2,\"367\":6,\"368\":2,\"370\":23,\"371\":1,\"377\":1,\"391\":9,\"392\":19,\"393\":14,\"402\":7,\"403\":3,\"405\":17,\"409\":1,\"415\":1,\"422\":12,\"423\":2,\"424\":5,\"426\":2,\"430\":2,\"431\":4,\"433\":7,\"436\":3,\"438\":1,\"439\":1,\"441\":1,\"442\":2,\"445\":1,\"446\":2,\"784\":2}}],[\"willchange\",{\"1\":{\"331\":1}}],[\"willnotdraw\",{\"1\":{\"161\":2}}],[\"will\",{\"1\":{\"92\":1,\"161\":1,\"224\":1,\"230\":3,\"232\":3,\"233\":2,\"237\":4,\"238\":2,\"243\":2,\"244\":1,\"247\":4,\"253\":1,\"264\":1,\"308\":1,\"350\":1,\"370\":1,\"376\":2,\"395\":1,\"417\":1,\"418\":2,\"445\":1,\"629\":3,\"748\":2,\"752\":1,\"753\":6,\"759\":1,\"760\":1,\"761\":4,\"822\":1}}],[\"withcontext\",{\"1\":{\"622\":1,\"624\":1,\"645\":1}}],[\"without\",{\"1\":{\"247\":1,\"771\":1}}],[\"within\",{\"1\":{\"26\":1,\"552\":1,\"768\":1}}],[\"with\",{\"1\":{\"0\":1,\"33\":1,\"39\":1,\"60\":1,\"90\":1,\"96\":1,\"123\":1,\"126\":1,\"138\":1,\"183\":2,\"230\":2,\"231\":1,\"232\":2,\"234\":1,\"235\":3,\"237\":1,\"243\":1,\"244\":1,\"246\":1,\"247\":2,\"253\":1,\"265\":1,\"271\":1,\"274\":1,\"281\":1,\"285\":1,\"290\":1,\"302\":1,\"307\":1,\"316\":1,\"318\":1,\"350\":1,\"351\":1,\"352\":1,\"357\":1,\"369\":1,\"383\":2,\"384\":1,\"399\":1,\"402\":1,\"418\":1,\"425\":1,\"438\":1,\"486\":1,\"492\":1,\"528\":1,\"573\":1,\"584\":1,\"594\":1,\"598\":1,\"629\":1,\"631\":1,\"641\":1,\"740\":2,\"748\":4,\"754\":1,\"757\":2,\"769\":3}}],[\"a的左子节点c的右子节点d\",{\"1\":{\"903\":1}}],[\"a`原先的位置\",{\"1\":{\"903\":1}}],[\"a→b\",{\"1\":{\"841\":1,\"850\":1}}],[\"ahead\",{\"1\":{\"763\":1}}],[\"ahr0cdovl2jsb2cuy3nkbi5uzxqv\",{\"1\":{\"138\":1}}],[\"aot\",{\"1\":{\"757\":4,\"763\":3,\"769\":2,\"771\":8,\"772\":2}}],[\"a以上所有\",{\"1\":{\"689\":1}}],[\"aefdhzmg\",{\"1\":{\"665\":1}}],[\"aes\",{\"0\":{\"555\":1},\"1\":{\"556\":2,\"557\":8,\"558\":1}}],[\"air\",{\"1\":{\"767\":1}}],[\"ainitname\",{\"1\":{\"553\":1}}],[\"aidlbinderinterface\",{\"1\":{\"138\":16}}],[\"aidl是\",{\"1\":{\"69\":1}}],[\"aidl\",{\"0\":{\"40\":1,\"57\":1,\"58\":1,\"61\":1,\"62\":1,\"66\":1,\"68\":1},\"1\":{\"57\":9,\"59\":1,\"60\":7,\"62\":4,\"63\":2,\"70\":3,\"71\":6,\"72\":1,\"82\":3,\"83\":3,\"84\":1,\"135\":1,\"138\":15,\"139\":1}}],[\"agrs\",{\"1\":{\"662\":1}}],[\"agent\",{\"1\":{\"731\":1}}],[\"age\",{\"1\":{\"553\":6,\"568\":1,\"612\":1,\"619\":4,\"726\":3}}],[\"against\",{\"1\":{\"748\":1}}],[\"again\",{\"1\":{\"87\":1,\"376\":1,\"384\":1,\"395\":1}}],[\"a<b\",{\"1\":{\"534\":1}}],[\"away\",{\"1\":{\"417\":1}}],[\"await\",{\"1\":{\"222\":1,\"284\":1,\"285\":3,\"374\":2,\"383\":11,\"395\":1,\"396\":1,\"398\":3,\"625\":1,\"640\":1,\"645\":1,\"742\":1,\"748\":3}}],[\"avoids\",{\"1\":{\"523\":1}}],[\"avoid\",{\"1\":{\"384\":1,\"395\":1,\"761\":2}}],[\"availablekey\",{\"1\":{\"847\":4,\"848\":3}}],[\"available\",{\"1\":{\"247\":1,\"276\":3,\"742\":1,\"760\":1}}],[\"afloat=\",{\"1\":{\"590\":1}}],[\"afloat\",{\"1\":{\"590\":4}}],[\"afun\",{\"1\":{\"282\":5,\"728\":2}}],[\"afterpoint\",{\"1\":{\"144\":2}}],[\"after\",{\"1\":{\"92\":1,\"225\":1,\"230\":1,\"231\":1,\"247\":1,\"264\":1,\"350\":1,\"418\":1,\"426\":1,\"527\":2,\"742\":1,\"753\":2,\"761\":1,\"769\":1,\"794\":1}}],[\"a00a5\",{\"1\":{\"251\":1,\"258\":1}}],[\"acquired\",{\"1\":{\"761\":2}}],[\"account\",{\"1\":{\"670\":1}}],[\"accept\",{\"1\":{\"232\":1}}],[\"access则说明成功连接\",{\"1\":{\"670\":1}}],[\"accessible\",{\"1\":{\"514\":1,\"585\":1,\"763\":1,\"822\":1}}],[\"accessed\",{\"1\":{\"247\":1}}],[\"access\",{\"1\":{\"186\":1,\"285\":2,\"552\":1,\"582\":1,\"740\":1,\"786\":1,\"822\":1}}],[\"acceleratedecelerateinterpolator\",{\"1\":{\"147\":1}}],[\"aclass\",{\"1\":{\"662\":1,\"728\":4}}],[\"across\",{\"1\":{\"282\":1}}],[\"actor<countermsg>\",{\"1\":{\"645\":1}}],[\"actors\",{\"1\":{\"645\":1}}],[\"actor\",{\"1\":{\"640\":1,\"645\":8}}],[\"actualnewpixels\",{\"1\":{\"412\":4,\"413\":6}}],[\"actually\",{\"1\":{\"351\":1,\"560\":1}}],[\"actual\",{\"1\":{\"247\":1,\"770\":1}}],[\"active\",{\"1\":{\"247\":1,\"256\":1,\"759\":1}}],[\"activities\",{\"1\":{\"139\":1,\"409\":1,\"821\":1}}],[\"activitymainbinding\",{\"1\":{\"784\":1}}],[\"activitymanagernative\",{\"1\":{\"179\":1}}],[\"activitymanagerservice\",{\"1\":{\"138\":1,\"176\":1,\"179\":1}}],[\"activitymanager\",{\"1\":{\"138\":3,\"140\":1}}],[\"activityinjector\",{\"1\":{\"214\":2}}],[\"activityinfo\",{\"1\":{\"6\":1}}],[\"activity>\",{\"1\":{\"189\":1,\"569\":1}}],[\"activitycompat\",{\"1\":{\"173\":1}}],[\"activityconfigcallback\",{\"1\":{\"25\":1}}],[\"activitythreadhandlercallback\",{\"1\":{\"179\":3}}],[\"activitythreadcls\",{\"1\":{\"179\":3}}],[\"activitythread\",{\"1\":{\"138\":2,\"179\":3}}],[\"activity\",{\"0\":{\"25\":1,\"175\":1,\"178\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1},\"1\":{\"15\":1,\"23\":1,\"24\":2,\"25\":1,\"28\":1,\"30\":21,\"35\":3,\"38\":1,\"41\":1,\"50\":1,\"76\":1,\"101\":1,\"116\":1,\"118\":1,\"122\":6,\"123\":3,\"124\":1,\"125\":1,\"126\":3,\"138\":1,\"160\":3,\"176\":3,\"178\":2,\"179\":3,\"180\":1,\"183\":2,\"189\":5,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"284\":3,\"411\":3,\"417\":7,\"569\":5,\"626\":2,\"782\":1,\"783\":4,\"784\":3,\"818\":1,\"824\":1}}],[\"actiongardenfragmenttoplantdetailfragment\",{\"1\":{\"783\":1}}],[\"action定义了在各个界面的切换关系\",{\"1\":{\"783\":1}}],[\"actions\",{\"1\":{\"302\":1}}],[\"actionmasked\",{\"1\":{\"26\":2}}],[\"action\",{\"1\":{\"15\":2,\"16\":1,\"17\":1,\"19\":1,\"20\":3,\"21\":1,\"25\":6,\"26\":12,\"27\":3,\"153\":3,\"183\":2,\"186\":1,\"189\":1,\"636\":1,\"783\":1}}],[\"ac811902db42a51cf97e3290788ade4a\",{\"1\":{\"221\":1}}],[\"ac\",{\"1\":{\"142\":1}}],[\"aalong=100\",{\"1\":{\"587\":2}}],[\"aaaaaaaty\",{\"1\":{\"142\":1}}],[\"aar\",{\"1\":{\"57\":1}}],[\"ambient\",{\"1\":{\"424\":1}}],[\"amount\",{\"1\":{\"412\":1}}],[\"ams\",{\"1\":{\"138\":1}}],[\"am\",{\"1\":{\"138\":2,\"222\":2,\"223\":4,\"230\":6,\"578\":3,\"728\":3}}],[\"aml4awfvew9uzze5otvaz21hawwuy29tcg==\",{\"1\":{\"0\":1}}],[\"a3\",{\"1\":{\"117\":2}}],[\"a284628487\",{\"1\":{\"138\":1,\"139\":1}}],[\"a2\",{\"1\":{\"117\":2}}],[\"a1\",{\"1\":{\"117\":2,\"904\":1}}],[\"axisdirection\",{\"1\":{\"423\":5,\"424\":13,\"427\":4,\"436\":6,\"437\":4,\"438\":2,\"440\":6}}],[\"axis\",{\"1\":{\"112\":1,\"276\":2,\"415\":1,\"424\":6,\"437\":1,\"439\":9,\"440\":2}}],[\"axes\",{\"1\":{\"112\":2}}],[\"abnormal\",{\"1\":{\"759\":1}}],[\"abnormally\",{\"1\":{\"759\":2}}],[\"abctags\",{\"1\":{\"809\":1}}],[\"abc\",{\"1\":{\"723\":4,\"819\":2,\"823\":1}}],[\"absolutepath\",{\"1\":{\"821\":1,\"822\":1}}],[\"absorb\",{\"0\":{\"411\":1},\"1\":{\"411\":3}}],[\"absorberhandle\",{\"1\":{\"405\":1}}],[\"abstractmap\",{\"1\":{\"523\":1}}],[\"abstractmap<k\",{\"1\":{\"523\":1}}],[\"abstract\",{\"1\":{\"71\":1,\"126\":1,\"138\":1,\"212\":1,\"213\":2,\"234\":1,\"243\":1,\"253\":1,\"256\":1,\"262\":2,\"264\":1,\"265\":1,\"302\":2,\"307\":1,\"309\":1,\"316\":1,\"323\":1,\"333\":1,\"360\":3,\"383\":1,\"398\":1,\"423\":1,\"425\":1,\"521\":1,\"711\":1}}],[\"able\",{\"1\":{\"235\":1,\"236\":1}}],[\"aborted\",{\"1\":{\"351\":1,\"352\":1}}],[\"abort\",{\"1\":{\"351\":3}}],[\"aborts\",{\"1\":{\"229\":1}}],[\"about\",{\"1\":{\"285\":1,\"348\":1,\"351\":1,\"417\":1,\"552\":1,\"598\":1,\"759\":1}}],[\"above\",{\"1\":{\"10\":1,\"228\":1,\"231\":1,\"412\":1,\"418\":1,\"753\":1}}],[\"ab\",{\"1\":{\"142\":1,\"740\":2}}],[\"adt\",{\"1\":{\"870\":1}}],[\"adapters支持更多形式的属性绑定\",{\"1\":{\"784\":1}}],[\"adapter\",{\"1\":{\"781\":1}}],[\"adapter等等\",{\"1\":{\"781\":1}}],[\"adefghmz\",{\"1\":{\"665\":1}}],[\"advanced\",{\"1\":{\"342\":1}}],[\"advancewakeuptime\",{\"1\":{\"238\":1}}],[\"ad\",{\"1\":{\"142\":1,\"578\":1}}],[\"adil\",{\"1\":{\"57\":1}}],[\"addassetpath\",{\"1\":{\"823\":4}}],[\"addonexitlistener\",{\"1\":{\"742\":1,\"745\":1}}],[\"addonlastlistenerremovedcallback\",{\"1\":{\"395\":1}}],[\"adderrorlistener\",{\"1\":{\"742\":1}}],[\"addelapsedtimefrom\",{\"1\":{\"485\":1}}],[\"added\",{\"1\":{\"238\":1,\"395\":1,\"759\":2}}],[\"addwithpaintoffset\",{\"1\":{\"441\":1}}],[\"addition\",{\"1\":{\"413\":1}}],[\"additional\",{\"1\":{\"302\":1,\"494\":1,\"761\":1}}],[\"adding\",{\"1\":{\"226\":1}}],[\"addpostframecallback\",{\"1\":{\"253\":1,\"350\":1,\"408\":1}}],[\"addpersistentframecallback\",{\"1\":{\"253\":1}}],[\"addpeople\",{\"1\":{\"62\":3,\"63\":1}}],[\"addtime\",{\"1\":{\"485\":1}}],[\"addthreadtolistlocked\",{\"1\":{\"247\":1}}],[\"addtouchtarget\",{\"1\":{\"26\":3}}],[\"addread\",{\"1\":{\"243\":2}}],[\"addstatuslistener\",{\"1\":{\"316\":1,\"327\":1}}],[\"adds\",{\"1\":{\"235\":1}}],[\"addsource\",{\"1\":{\"187\":2}}],[\"addlistener\",{\"1\":{\"232\":5,\"307\":1,\"310\":2,\"316\":1,\"327\":1,\"332\":3,\"333\":3,\"352\":1,\"368\":1,\"376\":1,\"438\":2}}],[\"addupdatelistener\",{\"1\":{\"147\":1}}],[\"add\",{\"1\":{\"63\":2,\"132\":1,\"234\":1,\"235\":1,\"243\":1,\"244\":3,\"395\":1,\"398\":1,\"418\":1,\"540\":2,\"541\":3,\"670\":1,\"672\":3,\"674\":1,\"731\":1,\"753\":2,\"761\":1,\"794\":1,\"817\":1,\"850\":1,\"921\":1}}],[\"addflags\",{\"1\":{\"6\":2}}],[\"authenticated\",{\"1\":{\"670\":1}}],[\"author\",{\"1\":{\"196\":1,\"586\":1,\"811\":1}}],[\"authorities=\",{\"1\":{\"6\":1}}],[\"automatic\",{\"1\":{\"810\":1}}],[\"automaticpackageresolution\",{\"1\":{\"748\":2}}],[\"automatically\",{\"1\":{\"253\":1,\"302\":2}}],[\"auto\",{\"1\":{\"35\":1,\"38\":2,\"62\":1,\"71\":1,\"115\":1,\"138\":1,\"189\":5,\"247\":2,\"523\":1,\"553\":2,\"750\":1,\"751\":4,\"752\":3,\"753\":3,\"756\":2,\"757\":1,\"758\":1,\"759\":22,\"760\":1,\"761\":2,\"783\":1,\"784\":2,\"794\":1}}],[\"arm\",{\"1\":{\"763\":1}}],[\"arch\",{\"1\":{\"753\":3}}],[\"archive\",{\"1\":{\"243\":1}}],[\"architect\",{\"1\":{\"128\":2}}],[\"architectur\",{\"1\":{\"128\":1}}],[\"architecture模式\",{\"1\":{\"126\":1}}],[\"architecture\",{\"0\":{\"126\":1},\"1\":{\"121\":2,\"125\":2,\"126\":8,\"127\":1,\"128\":4}}],[\"architecting\",{\"1\":{\"126\":1,\"128\":3}}],[\"arr2\",{\"1\":{\"913\":2}}],[\"arr\",{\"1\":{\"532\":11,\"533\":13,\"534\":15,\"539\":1,\"612\":2,\"842\":1,\"919\":1}}],[\"arra10\",{\"1\":{\"516\":1}}],[\"arraystoreexception呢\",{\"1\":{\"538\":1}}],[\"array<int>\",{\"1\":{\"631\":1}}],[\"array<in\",{\"1\":{\"617\":1}}],[\"array<aparcelable\",{\"1\":{\"594\":1}}],[\"array<string>\",{\"1\":{\"486\":1,\"617\":1,\"664\":1}}],[\"array<out\",{\"1\":{\"173\":1,\"617\":1}}],[\"arraydeque<runnable>\",{\"1\":{\"193\":2}}],[\"arrayofnulls\",{\"1\":{\"594\":1}}],[\"arrayof\",{\"1\":{\"173\":1,\"617\":2,\"664\":1}}],[\"array\",{\"1\":{\"87\":3,\"92\":1,\"116\":2,\"117\":2,\"247\":1,\"486\":1,\"493\":1,\"583\":2,\"594\":2,\"745\":1,\"747\":3,\"759\":7,\"879\":1,\"880\":7}}],[\"arraymap其特性与sparsearray类似\",{\"1\":{\"523\":1}}],[\"arraymap特殊之处在于将key\",{\"1\":{\"92\":1}}],[\"arraymap实现了map<k\",{\"1\":{\"92\":1}}],[\"arraymap则支持所有类型的\",{\"1\":{\"85\":1}}],[\"arraymap\",{\"0\":{\"85\":1,\"92\":1,\"523\":1},\"1\":{\"96\":2,\"524\":1}}],[\"arraymap<ibinder\",{\"1\":{\"63\":2}}],[\"arraylistof<int>\",{\"1\":{\"921\":1}}],[\"arraylistof<string>\",{\"1\":{\"612\":1}}],[\"arraylistof\",{\"1\":{\"817\":2}}],[\"arraylist<t\",{\"1\":{\"850\":1}}],[\"arraylist<packageinfo>\",{\"1\":{\"817\":2}}],[\"arraylist<packageinfobean>\",{\"1\":{\"817\":1}}],[\"arraylist<apple>\",{\"1\":{\"539\":1,\"540\":1}}],[\"arraylist<v>\",{\"1\":{\"538\":1}}],[\"arraylist<>\",{\"1\":{\"62\":1,\"63\":1,\"398\":1}}],[\"arraylist具体实现的构造函数如下\",{\"1\":{\"538\":1}}],[\"arraylist\",{\"1\":{\"59\":1,\"62\":1,\"63\":1,\"538\":1}}],[\"arr1\",{\"1\":{\"516\":3,\"913\":2}}],[\"arr0\",{\"1\":{\"516\":2}}],[\"arbitrarily\",{\"1\":{\"417\":1}}],[\"arbitrary\",{\"1\":{\"417\":1}}],[\"artificially\",{\"1\":{\"412\":1}}],[\"article\",{\"1\":{\"33\":4,\"62\":1,\"71\":1,\"77\":1,\"104\":1,\"105\":1,\"137\":2,\"138\":4,\"139\":1,\"149\":1,\"247\":1,\"490\":1,\"497\":1,\"519\":1,\"524\":1,\"528\":1,\"550\":1}}],[\"argtype=\",{\"1\":{\"783\":1}}],[\"argv\",{\"1\":{\"752\":1}}],[\"argc\",{\"1\":{\"752\":1}}],[\"arg1\",{\"1\":{\"726\":1}}],[\"arg0\",{\"1\":{\"726\":1}}],[\"arg\",{\"1\":{\"398\":2,\"589\":1,\"615\":1,\"726\":4}}],[\"argument定义了在切换界面时需要带的参数\",{\"1\":{\"783\":1}}],[\"argument\",{\"1\":{\"247\":1,\"359\":1,\"745\":2,\"748\":1}}],[\"arguments\",{\"1\":{\"232\":1,\"311\":1,\"376\":1,\"398\":20,\"430\":1,\"745\":2,\"748\":1,\"754\":1,\"759\":2}}],[\"argumenterror\",{\"1\":{\"231\":1,\"232\":1,\"243\":3,\"748\":1}}],[\"args在两个fragment之间传递数据\",{\"1\":{\"783\":1}}],[\"args>\",{\"1\":{\"247\":1}}],[\"args\",{\"1\":{\"179\":6,\"203\":1,\"204\":4,\"205\":2,\"228\":3,\"237\":7,\"246\":3,\"247\":6,\"486\":1,\"513\":1,\"517\":2,\"553\":1,\"586\":1,\"617\":1,\"664\":4,\"726\":4,\"742\":2,\"748\":4,\"759\":15,\"761\":2,\"785\":1}}],[\"arhictecture\",{\"1\":{\"126\":1}}],[\"areflect\",{\"1\":{\"553\":1}}],[\"area\",{\"0\":{\"461\":1}}],[\"are\",{\"1\":{\"26\":2,\"126\":1,\"183\":1,\"226\":2,\"227\":1,\"231\":3,\"234\":1,\"235\":3,\"237\":4,\"238\":2,\"247\":5,\"267\":1,\"285\":2,\"350\":1,\"351\":1,\"412\":7,\"417\":1,\"418\":1,\"495\":1,\"514\":1,\"615\":2,\"629\":1,\"630\":3,\"719\":1,\"742\":1,\"745\":1,\"753\":2,\"759\":4,\"761\":2,\"770\":1,\"771\":3}}],[\"analysis\",{\"1\":{\"742\":1}}],[\"analytics\",{\"1\":{\"104\":1}}],[\"aname\",{\"1\":{\"612\":1}}],[\"anint=10\",{\"1\":{\"586\":1,\"587\":2}}],[\"anint=\",{\"1\":{\"586\":1,\"590\":1}}],[\"anint\",{\"1\":{\"586\":2,\"590\":4}}],[\"animal>\",{\"1\":{\"618\":1}}],[\"animatable<double>\",{\"1\":{\"357\":2,\"359\":2}}],[\"animatable<t>的子类\",{\"1\":{\"357\":1}}],[\"animatable<t>\",{\"1\":{\"357\":4,\"358\":1}}],[\"animatable<u>从\",{\"1\":{\"327\":1}}],[\"animatable<u>\",{\"1\":{\"316\":1,\"327\":1}}],[\"animatable\",{\"0\":{\"357\":1},\"1\":{\"316\":2,\"355\":3,\"357\":13,\"358\":3,\"361\":2,\"362\":1}}],[\"animating\",{\"1\":{\"302\":1}}],[\"animationwithparentmixin<double>\",{\"1\":{\"357\":1}}],[\"animation和createherorecttween方法\",{\"1\":{\"348\":1}}],[\"animations\",{\"0\":{\"340\":1,\"342\":1},\"1\":{\"343\":1,\"354\":1}}],[\"animationstatus\",{\"1\":{\"316\":1,\"320\":2,\"321\":2,\"352\":3}}],[\"animationdirection\",{\"1\":{\"320\":1,\"321\":1,\"325\":2}}],[\"animationdrawable\",{\"1\":{\"166\":2,\"167\":4}}],[\"animationbehavior\",{\"1\":{\"319\":2}}],[\"animationbuilder\",{\"1\":{\"312\":1,\"329\":1,\"336\":1}}],[\"animationlocalstatuslistenersmixin\",{\"1\":{\"318\":1}}],[\"animationlocallistenersmixin\",{\"1\":{\"318\":1}}],[\"animationeagerlistenermixin\",{\"1\":{\"318\":1}}],[\"animationmin<t\",{\"1\":{\"317\":1}}],[\"animationmax<t\",{\"1\":{\"317\":1}}],[\"animationmean\",{\"1\":{\"317\":1}}],[\"animation<u>\",{\"1\":{\"316\":2}}],[\"animation<t>的接口\",{\"1\":{\"317\":1}}],[\"animation<t>\",{\"1\":{\"316\":1,\"317\":2,\"355\":2,\"357\":2,\"361\":1}}],[\"animation<double>创建\",{\"1\":{\"359\":1}}],[\"animation<double>对象作为parent\",{\"1\":{\"357\":1}}],[\"animation<double>生产\",{\"1\":{\"355\":1}}],[\"animation<double>的\",{\"1\":{\"327\":1}}],[\"animation<double>继承的animation<u>\",{\"1\":{\"327\":1}}],[\"animation<double>\",{\"1\":{\"302\":3,\"310\":3,\"316\":3,\"317\":1,\"318\":1,\"330\":1,\"348\":1,\"351\":1,\"352\":1,\"355\":3,\"357\":4,\"359\":1,\"361\":1}}],[\"animationcontroller\",{\"0\":{\"314\":1,\"318\":1},\"1\":{\"300\":3,\"302\":6,\"305\":1,\"307\":5,\"309\":1,\"310\":1,\"312\":3,\"314\":8,\"315\":1,\"317\":1,\"318\":2,\"319\":8,\"320\":2,\"323\":2,\"327\":4,\"328\":1,\"329\":3,\"330\":3,\"335\":1,\"355\":7,\"358\":1,\"361\":1}}],[\"animation\",{\"0\":{\"316\":1},\"1\":{\"147\":2,\"167\":1,\"300\":1,\"302\":7,\"305\":2,\"307\":4,\"308\":1,\"309\":2,\"311\":6,\"314\":3,\"315\":3,\"316\":11,\"317\":13,\"318\":2,\"319\":2,\"327\":2,\"328\":1,\"340\":2,\"342\":3,\"348\":4,\"350\":5,\"351\":2,\"352\":7,\"353\":1,\"354\":1,\"355\":3,\"357\":8,\"358\":1,\"359\":1}}],[\"animatee\",{\"1\":{\"361\":1}}],[\"animatewith\",{\"1\":{\"319\":1,\"327\":1}}],[\"animateback\",{\"1\":{\"319\":1,\"327\":2,\"355\":1,\"361\":1}}],[\"animatetointernal\",{\"1\":{\"319\":1}}],[\"animateto\",{\"1\":{\"319\":1,\"327\":2,\"355\":1,\"361\":1,\"404\":1,\"415\":1,\"417\":1,\"438\":1}}],[\"animates\",{\"1\":{\"302\":3,\"309\":4}}],[\"animate\",{\"1\":{\"302\":2,\"316\":1,\"342\":1,\"354\":1,\"355\":1,\"357\":2}}],[\"animatedevaluation<t>\",{\"1\":{\"357\":2}}],[\"animatedevaluation\",{\"1\":{\"355\":1,\"357\":2}}],[\"animatedmodalbarrier\",{\"1\":{\"309\":1}}],[\"animatedcrossfade\",{\"1\":{\"302\":1}}],[\"animatedcontainer\",{\"1\":{\"302\":1}}],[\"animatedtheme\",{\"1\":{\"302\":1}}],[\"animatedpositioneddirectional\",{\"1\":{\"302\":1}}],[\"animatedpositioned\",{\"1\":{\"302\":1}}],[\"animatedphysicalmodel\",{\"1\":{\"302\":1}}],[\"animatedpaddingstate\",{\"1\":{\"307\":2}}],[\"animatedpadding\",{\"1\":{\"302\":1,\"307\":1}}],[\"animatedopacity\",{\"1\":{\"302\":1}}],[\"animatedstate\",{\"0\":{\"310\":1},\"1\":{\"309\":1,\"310\":2}}],[\"animatedswitcher\",{\"1\":{\"302\":1}}],[\"animatedsize\",{\"1\":{\"302\":1}}],[\"animatedslide\",{\"1\":{\"302\":1}}],[\"animatedscale\",{\"1\":{\"302\":1}}],[\"animatedrotation\",{\"1\":{\"302\":1}}],[\"animateddefaulttextstyle\",{\"1\":{\"302\":1}}],[\"animatedalign\",{\"1\":{\"302\":1}}],[\"animated\",{\"1\":{\"300\":1,\"302\":11,\"309\":7,\"311\":1,\"314\":1,\"365\":2,\"408\":1}}],[\"animatedbuilder\",{\"0\":{\"311\":1},\"1\":{\"300\":2,\"309\":1,\"311\":6,\"312\":1,\"314\":2,\"352\":1}}],[\"animatedfoo\",{\"1\":{\"300\":3,\"302\":1,\"307\":1,\"308\":1,\"312\":2,\"314\":3,\"329\":1}}],[\"animatedwidgetbasestate<animatedpadding>\",{\"1\":{\"307\":2}}],[\"animatedwidgetbasestate<tweenanimationbuilder<t>>\",{\"1\":{\"308\":1}}],[\"animatedwidgetbasestate<t\",{\"1\":{\"307\":1}}],[\"animatedwidgetbasestate\",{\"1\":{\"302\":1,\"307\":2,\"308\":1}}],[\"animatedwidget\",{\"0\":{\"300\":1,\"309\":1},\"1\":{\"300\":4,\"302\":1,\"309\":6,\"310\":6,\"311\":3,\"312\":2,\"313\":1,\"314\":5,\"329\":2}}],[\"animatedvalue\",{\"1\":{\"147\":1}}],[\"anim\",{\"1\":{\"147\":1,\"783\":1}}],[\"anonymous\",{\"1\":{\"514\":1}}],[\"anobj1\",{\"1\":{\"513\":2}}],[\"anobj\",{\"1\":{\"513\":20}}],[\"another\",{\"1\":{\"302\":2,\"347\":1,\"444\":1,\"742\":3,\"761\":1}}],[\"anchor\",{\"1\":{\"424\":2}}],[\"ancestorcontext\",{\"1\":{\"348\":2}}],[\"ancestor\",{\"1\":{\"265\":6}}],[\"ancestorrenderobjectelement是\",{\"1\":{\"259\":1}}],[\"ancestorrenderobjectelement\",{\"1\":{\"251\":1,\"256\":4,\"258\":1,\"259\":1,\"265\":3}}],[\"anerroroccurred\",{\"1\":{\"395\":1}}],[\"angle\",{\"1\":{\"310\":1,\"311\":1}}],[\"anti\",{\"1\":{\"146\":1}}],[\"answer\",{\"1\":{\"123\":1,\"137\":1,\"448\":1}}],[\"anzhi\",{\"1\":{\"104\":1}}],[\"annotationutils\",{\"1\":{\"570\":1}}],[\"annotationretention\",{\"1\":{\"204\":1}}],[\"annotations\",{\"1\":{\"204\":1}}],[\"annotation\",{\"1\":{\"63\":1,\"204\":2,\"564\":1,\"565\":1,\"568\":1,\"570\":1}}],[\"any>\",{\"1\":{\"617\":1,\"619\":1}}],[\"anymore\",{\"1\":{\"370\":1}}],[\"any这两个处理\",{\"1\":{\"231\":1}}],[\"any<t>\",{\"1\":{\"231\":1}}],[\"any\",{\"1\":{\"60\":1,\"126\":2,\"138\":1,\"139\":1,\"226\":1,\"229\":1,\"230\":3,\"231\":2,\"237\":1,\"247\":1,\"285\":1,\"302\":1,\"351\":1,\"399\":2,\"418\":2,\"448\":1,\"495\":1,\"506\":1,\"511\":2,\"582\":1,\"615\":1,\"617\":1,\"618\":2,\"619\":2,\"621\":1,\"745\":2,\"753\":2,\"757\":1,\"759\":2,\"761\":3,\"767\":1,\"771\":2,\"785\":1}}],[\"anr\",{\"1\":{\"30\":1}}],[\"an\",{\"1\":{\"26\":3,\"71\":2,\"87\":1,\"138\":2,\"183\":1,\"193\":2,\"214\":1,\"231\":2,\"237\":1,\"243\":4,\"244\":1,\"246\":1,\"247\":2,\"255\":1,\"285\":1,\"302\":12,\"309\":8,\"311\":1,\"316\":1,\"318\":1,\"334\":1,\"351\":2,\"357\":2,\"365\":8,\"372\":1,\"374\":1,\"376\":1,\"384\":1,\"405\":1,\"412\":3,\"486\":3,\"493\":2,\"511\":2,\"523\":1,\"587\":1,\"594\":1,\"615\":2,\"726\":1,\"740\":3,\"748\":6,\"753\":2,\"757\":1,\"759\":3,\"761\":4}}],[\"andorid\",{\"1\":{\"126\":1}}],[\"android可以再添加这个依赖\",{\"1\":{\"622\":1}}],[\"androidinjection\",{\"1\":{\"215\":1,\"216\":1}}],[\"androidinjectionmodule\",{\"1\":{\"211\":1}}],[\"androidinjector<activity>\",{\"1\":{\"214\":1}}],[\"androidinjector<mainactivity>\",{\"1\":{\"212\":1}}],[\"androidinjector\",{\"1\":{\"212\":1,\"213\":1,\"214\":1,\"216\":1}}],[\"android6\",{\"1\":{\"170\":1}}],[\"android666\",{\"1\":{\"35\":1,\"60\":2,\"62\":9,\"63\":4,\"70\":1,\"71\":10,\"77\":1,\"105\":2,\"116\":2,\"118\":2,\"141\":1,\"553\":2,\"816\":2,\"818\":1,\"823\":1}}],[\"android10\",{\"1\":{\"128\":1}}],[\"android11\",{\"0\":{\"4\":1}}],[\"android=\",{\"1\":{\"115\":1,\"167\":3,\"189\":3,\"783\":1,\"784\":2,\"816\":1}}],[\"androidautosize等\",{\"1\":{\"195\":1}}],[\"androidautosize\",{\"1\":{\"102\":1,\"197\":1}}],[\"androidstudio\",{\"0\":{\"676\":1},\"1\":{\"70\":1}}],[\"androidservice\",{\"0\":{\"34\":1}}],[\"android5\",{\"1\":{\"62\":1}}],[\"androidlib\",{\"1\":{\"60\":2,\"62\":7,\"63\":3}}],[\"androidmanife\",{\"1\":{\"63\":1}}],[\"androidmanifest\",{\"1\":{\"35\":1,\"36\":1,\"103\":1,\"104\":1,\"105\":1,\"170\":1,\"176\":1,\"178\":1,\"189\":2}}],[\"androidminafast\",{\"1\":{\"39\":1}}],[\"androidxref\",{\"1\":{\"26\":1}}],[\"androidx\",{\"1\":{\"6\":1,\"7\":1,\"196\":1,\"783\":1,\"784\":1}}],[\"androiddev\",{\"1\":{\"3\":1}}],[\"android\",{\"0\":{\"1\":1,\"2\":1,\"8\":1,\"23\":1,\"30\":1,\"33\":1,\"44\":1,\"57\":1,\"68\":1,\"73\":1,\"79\":1,\"81\":1,\"85\":1,\"98\":1,\"103\":1,\"105\":1,\"108\":1,\"114\":1,\"121\":1,\"130\":1,\"135\":1,\"140\":1,\"141\":1,\"151\":1,\"156\":1,\"165\":1,\"169\":1,\"175\":1,\"181\":1,\"184\":1,\"208\":1,\"283\":1,\"522\":1,\"626\":1,\"671\":1,\"680\":1},\"1\":{\"2\":2,\"5\":2,\"6\":8,\"7\":2,\"10\":2,\"11\":4,\"17\":1,\"22\":2,\"23\":1,\"24\":2,\"26\":2,\"28\":1,\"29\":2,\"30\":5,\"31\":1,\"33\":2,\"35\":3,\"36\":3,\"39\":2,\"43\":1,\"44\":1,\"50\":1,\"57\":4,\"62\":7,\"63\":11,\"67\":1,\"69\":3,\"71\":18,\"72\":2,\"74\":1,\"82\":1,\"83\":4,\"84\":2,\"85\":1,\"96\":1,\"100\":5,\"101\":3,\"102\":3,\"103\":4,\"104\":5,\"105\":4,\"107\":1,\"108\":4,\"111\":4,\"115\":6,\"118\":3,\"121\":2,\"122\":2,\"123\":1,\"124\":5,\"125\":3,\"126\":14,\"127\":1,\"128\":11,\"130\":1,\"131\":1,\"133\":2,\"135\":1,\"138\":18,\"139\":3,\"140\":7,\"141\":1,\"143\":1,\"148\":1,\"162\":1,\"164\":1,\"167\":24,\"170\":2,\"176\":1,\"179\":4,\"180\":1,\"186\":4,\"189\":34,\"190\":2,\"196\":6,\"197\":1,\"206\":2,\"209\":2,\"215\":1,\"219\":1,\"237\":2,\"247\":2,\"278\":2,\"279\":2,\"284\":5,\"285\":2,\"286\":3,\"287\":4,\"290\":2,\"297\":1,\"398\":2,\"399\":1,\"400\":1,\"413\":1,\"418\":2,\"480\":1,\"516\":3,\"522\":4,\"523\":4,\"524\":3,\"530\":1,\"550\":2,\"564\":1,\"580\":4,\"593\":3,\"594\":2,\"597\":1,\"598\":2,\"622\":2,\"668\":1,\"671\":2,\"680\":2,\"708\":1,\"710\":4,\"712\":1,\"759\":2,\"775\":1,\"777\":1,\"778\":1,\"779\":1,\"781\":3,\"783\":14,\"784\":13,\"786\":1,\"788\":2,\"798\":1,\"816\":6,\"824\":4},\"2\":{\"32\":1,\"97\":1,\"129\":1,\"134\":1,\"150\":1,\"714\":1,\"789\":1}}],[\"and\",{\"1\":{\"0\":1,\"10\":3,\"26\":2,\"126\":2,\"139\":1,\"183\":2,\"229\":1,\"231\":4,\"232\":3,\"234\":1,\"235\":2,\"237\":3,\"238\":1,\"240\":1,\"247\":4,\"253\":2,\"254\":1,\"267\":1,\"282\":1,\"285\":3,\"290\":1,\"302\":2,\"309\":2,\"310\":1,\"311\":1,\"333\":1,\"337\":1,\"350\":1,\"351\":5,\"358\":1,\"365\":1,\"405\":1,\"408\":2,\"417\":2,\"492\":1,\"493\":3,\"494\":1,\"495\":1,\"496\":1,\"497\":1,\"498\":1,\"506\":1,\"519\":1,\"523\":1,\"552\":3,\"573\":2,\"575\":1,\"583\":1,\"584\":1,\"585\":1,\"627\":1,\"629\":1,\"630\":2,\"631\":1,\"636\":1,\"740\":4,\"745\":1,\"748\":5,\"752\":1,\"753\":1,\"756\":1,\"757\":4,\"759\":2,\"761\":2,\"763\":2,\"766\":1,\"769\":1,\"771\":3,\"811\":1,\"822\":1}}],[\"atransient=\",{\"1\":{\"586\":2,\"587\":2}}],[\"atransient\",{\"1\":{\"586\":2}}],[\"atestclsobj\",{\"1\":{\"553\":5}}],[\"atestclsobj=\",{\"1\":{\"553\":1}}],[\"atestclass\",{\"1\":{\"553\":6}}],[\"ationcontext\",{\"1\":{\"399\":1}}],[\"atomicinteger\",{\"1\":{\"645\":1}}],[\"atomically\",{\"1\":{\"237\":1}}],[\"atop\",{\"1\":{\"132\":2}}],[\"attempted\",{\"1\":{\"511\":1}}],[\"attempts\",{\"1\":{\"264\":1}}],[\"attempting\",{\"1\":{\"243\":1}}],[\"attributeset\",{\"1\":{\"117\":1,\"153\":2}}],[\"attrs\",{\"1\":{\"116\":1,\"117\":3,\"153\":5}}],[\"attr\",{\"0\":{\"116\":1},\"1\":{\"116\":1,\"247\":10}}],[\"attaches\",{\"1\":{\"768\":1}}],[\"attached\",{\"1\":{\"332\":2,\"438\":2}}],[\"attachnotificationtree\",{\"1\":{\"256\":1}}],[\"attachrenderobject方法将\",{\"1\":{\"265\":1}}],[\"attachrenderobject\",{\"1\":{\"256\":3,\"265\":3}}],[\"attachrootwidget步骤中通过一系列操作\",{\"1\":{\"262\":1}}],[\"attachrootwidget方法中给\",{\"1\":{\"256\":1}}],[\"attachrootwidget\",{\"1\":{\"254\":1}}],[\"attachtorendertree\",{\"0\":{\"256\":1},\"1\":{\"254\":1,\"256\":1}}],[\"attachinterface\",{\"1\":{\"71\":1,\"138\":1}}],[\"attach\",{\"1\":{\"71\":1,\"138\":1,\"255\":1,\"332\":4,\"408\":2,\"409\":1,\"438\":3}}],[\"attachbasecontext\",{\"1\":{\"30\":2}}],[\"at\",{\"1\":{\"19\":1,\"33\":1,\"71\":1,\"87\":1,\"92\":1,\"126\":1,\"138\":1,\"139\":1,\"158\":1,\"159\":2,\"163\":1,\"183\":1,\"193\":2,\"235\":1,\"237\":1,\"238\":1,\"244\":1,\"247\":2,\"251\":1,\"276\":1,\"302\":1,\"323\":1,\"350\":1,\"351\":1,\"352\":1,\"376\":1,\"395\":1,\"408\":1,\"445\":1,\"486\":1,\"574\":1,\"631\":6,\"759\":2,\"761\":3,\"768\":1,\"773\":1,\"806\":1}}],[\"asflow\",{\"1\":{\"629\":1,\"631\":2,\"651\":2}}],[\"ascontextelement\",{\"1\":{\"625\":2}}],[\"ascenter\",{\"1\":{\"33\":1}}],[\"ascent\",{\"1\":{\"33\":6}}],[\"asiterable\",{\"1\":{\"612\":1}}],[\"asinleton\",{\"1\":{\"545\":1,\"546\":1,\"548\":1,\"549\":1}}],[\"asingletonfactory\",{\"1\":{\"549\":1}}],[\"asingleton\",{\"1\":{\"545\":5,\"546\":6,\"547\":5,\"548\":6,\"549\":6}}],[\"asinterface\",{\"1\":{\"62\":1,\"71\":1,\"83\":2,\"138\":5}}],[\"asampleactivity\",{\"1\":{\"570\":1}}],[\"asapicobject\",{\"1\":{\"247\":1}}],[\"as有了初始化的值\",{\"1\":{\"547\":1}}],[\"ask\",{\"1\":{\"448\":1}}],[\"asboxconstraints\",{\"1\":{\"405\":1}}],[\"asbinder\",{\"1\":{\"63\":2,\"71\":2,\"138\":2}}],[\"asdrawable\",{\"1\":{\"399\":1}}],[\"ast\",{\"1\":{\"763\":1,\"767\":2}}],[\"asts\",{\"1\":{\"763\":2}}],[\"astypedlist\",{\"1\":{\"397\":1}}],[\"astatelesswidget\",{\"1\":{\"282\":2}}],[\"aspect\",{\"1\":{\"272\":1,\"308\":1}}],[\"assumptions\",{\"1\":{\"771\":1}}],[\"assumes\",{\"1\":{\"417\":1}}],[\"assumed\",{\"1\":{\"234\":1}}],[\"associated\",{\"1\":{\"528\":1,\"753\":1}}],[\"asset等\",{\"1\":{\"398\":1}}],[\"assetbundleimageprovider\",{\"1\":{\"374\":1}}],[\"assetbundle\",{\"1\":{\"365\":1}}],[\"asset\",{\"1\":{\"286\":1,\"365\":1,\"376\":1,\"382\":1,\"398\":1,\"399\":1}}],[\"assetmanager\",{\"1\":{\"286\":1,\"823\":6}}],[\"assets\",{\"1\":{\"286\":4}}],[\"asserts\",{\"1\":{\"754\":1}}],[\"assert\",{\"1\":{\"228\":1,\"232\":2,\"235\":1,\"237\":2,\"238\":2,\"243\":1,\"244\":2,\"247\":18,\"248\":1,\"253\":2,\"256\":3,\"262\":1,\"264\":2,\"265\":2,\"308\":2,\"309\":1,\"310\":1,\"311\":2,\"316\":1,\"320\":2,\"321\":1,\"325\":1,\"332\":2,\"334\":2,\"347\":3,\"348\":1,\"351\":2,\"352\":6,\"359\":2,\"360\":2,\"367\":1,\"383\":1,\"384\":1,\"398\":2,\"405\":2,\"412\":1,\"413\":1,\"417\":1,\"418\":2,\"424\":1,\"426\":3,\"438\":1,\"439\":3,\"440\":1,\"441\":1,\"750\":1,\"751\":1,\"752\":1,\"753\":8,\"756\":1,\"757\":3,\"759\":8,\"760\":2,\"761\":15}}],[\"assignment\",{\"1\":{\"511\":1,\"768\":1}}],[\"assigned\",{\"1\":{\"256\":1,\"511\":1}}],[\"assignowner\",{\"1\":{\"256\":2}}],[\"assign\",{\"1\":{\"247\":1,\"256\":1,\"604\":1}}],[\"assignable\",{\"1\":{\"232\":1}}],[\"asyncdispatched\",{\"1\":{\"243\":4}}],[\"asynccompleteerror`\",{\"1\":{\"231\":1}}],[\"asynccallbackentry\",{\"1\":{\"225\":3}}],[\"asynccallback\",{\"1\":{\"225\":1}}],[\"asyncrun\",{\"0\":{\"227\":1},\"1\":{\"225\":1,\"226\":3,\"227\":3,\"228\":1}}],[\"async\",{\"1\":{\"222\":1,\"224\":3,\"225\":1,\"226\":2,\"228\":2,\"231\":1,\"232\":2,\"233\":1,\"234\":4,\"243\":2,\"284\":1,\"285\":2,\"297\":1,\"374\":1,\"383\":2,\"395\":1,\"396\":2,\"398\":4,\"625\":1,\"640\":2,\"748\":2}}],[\"asynchronously\",{\"1\":{\"230\":2,\"232\":1,\"408\":2,\"630\":1}}],[\"asynchronous\",{\"1\":{\"193\":1}}],[\"asynctaskresult<progress>\",{\"1\":{\"193\":1}}],[\"asynctaskresult<\",{\"1\":{\"193\":2}}],[\"asynctask<params\",{\"1\":{\"193\":2}}],[\"asynctask\",{\"0\":{\"190\":1},\"1\":{\"190\":7,\"191\":2,\"193\":7}}],[\"as\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"26\":1,\"30\":1,\"147\":1,\"196\":1,\"225\":2,\"228\":1,\"230\":2,\"231\":2,\"232\":1,\"234\":1,\"238\":2,\"247\":4,\"254\":1,\"256\":3,\"263\":1,\"264\":1,\"265\":5,\"276\":2,\"285\":1,\"305\":1,\"307\":2,\"308\":2,\"310\":1,\"316\":1,\"347\":1,\"351\":1,\"357\":1,\"358\":6,\"370\":1,\"374\":1,\"376\":1,\"383\":2,\"391\":2,\"399\":2,\"445\":2,\"495\":1,\"545\":5,\"546\":5,\"547\":8,\"548\":2,\"549\":2,\"615\":1,\"636\":1,\"731\":1,\"742\":1,\"748\":2,\"753\":3,\"761\":1,\"770\":2,\"811\":2,\"817\":1}}],[\"al\",{\"1\":{\"701\":1}}],[\"alhd\",{\"1\":{\"688\":1}}],[\"alternatives\",{\"0\":{\"679\":1},\"1\":{\"679\":2}}],[\"always\",{\"1\":{\"759\":1}}],[\"alwaysstoppedanimation\",{\"1\":{\"317\":1}}],[\"alwaysrebuildwidgetstate\",{\"1\":{\"273\":2}}],[\"alwaysrebuildwidget\",{\"1\":{\"273\":4}}],[\"along=100\",{\"1\":{\"586\":1,\"587\":2}}],[\"along=\",{\"1\":{\"586\":1,\"590\":1}}],[\"along\",{\"1\":{\"276\":1,\"586\":3,\"587\":1,\"590\":4}}],[\"also\",{\"1\":{\"231\":2,\"232\":1,\"412\":1,\"615\":1,\"757\":1,\"761\":1,\"763\":2}}],[\"already\",{\"1\":{\"193\":2,\"232\":1,\"237\":2,\"244\":1,\"247\":2,\"256\":1,\"310\":1,\"347\":1,\"350\":1,\"412\":2,\"752\":1}}],[\"alreadydispatchedtonewtouchtarget\",{\"1\":{\"26\":1}}],[\"alertdialog\",{\"1\":{\"173\":2}}],[\"alpha\",{\"1\":{\"130\":1}}],[\"alibaba\",{\"1\":{\"387\":1,\"401\":2}}],[\"alive\",{\"1\":{\"193\":1,\"351\":1}}],[\"alias\",{\"1\":{\"146\":1,\"698\":3}}],[\"aligned后\",{\"1\":{\"516\":1}}],[\"aligntransition\",{\"1\":{\"309\":1}}],[\"alignment\",{\"1\":{\"251\":4,\"259\":11,\"260\":1,\"261\":2,\"262\":3,\"310\":6,\"312\":1,\"340\":6,\"370\":2,\"392\":4,\"393\":2,\"444\":4,\"445\":4}}],[\"align\",{\"1\":{\"33\":1,\"153\":1,\"259\":5,\"302\":1,\"309\":1,\"340\":2}}],[\"aliyun\",{\"1\":{\"2\":1}}],[\"alarm\",{\"1\":{\"19\":2,\"20\":1,\"21\":1}}],[\"alarmintent\",{\"1\":{\"13\":1,\"19\":2,\"20\":2}}],[\"alarmmgr\",{\"1\":{\"13\":1,\"19\":2,\"20\":2}}],[\"alarmmanager可以确保任务在指定时间\",{\"1\":{\"10\":1}}],[\"alarmmanager\",{\"0\":{\"8\":1},\"1\":{\"10\":1,\"13\":1,\"14\":1,\"16\":1,\"19\":3,\"20\":2,\"21\":3}}],[\"allheroesfor方法获取到当前页和目标页面的\",{\"1\":{\"353\":1}}],[\"allheroesfor\",{\"1\":{\"346\":2,\"351\":2}}],[\"alloconlystackzone\",{\"1\":{\"247\":1}}],[\"allocation\",{\"1\":{\"516\":1}}],[\"allocateport\",{\"1\":{\"247\":2}}],[\"allocate\",{\"1\":{\"231\":1,\"248\":1}}],[\"allocated\",{\"1\":{\"231\":1,\"244\":1,\"753\":1,\"771\":1}}],[\"allocarrays\",{\"1\":{\"95\":2}}],[\"allowable\",{\"1\":{\"761\":1}}],[\"allow\",{\"1\":{\"412\":1,\"761\":7}}],[\"allowed\",{\"1\":{\"276\":1}}],[\"allows\",{\"1\":{\"234\":1,\"552\":1,\"761\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"193\":1}}],[\"all\",{\"1\":{\"6\":1,\"26\":1,\"30\":1,\"104\":1,\"131\":1,\"162\":1,\"225\":1,\"237\":1,\"238\":1,\"244\":1,\"285\":1,\"289\":1,\"295\":1,\"351\":1,\"395\":1,\"517\":2,\"566\":1,\"573\":1,\"584\":1,\"737\":1,\"740\":1,\"757\":1,\"759\":1,\"761\":2,\"771\":1}}],[\"apt\",{\"1\":{\"669\":1}}],[\"aparcelable\",{\"1\":{\"594\":3}}],[\"apkpath\",{\"1\":{\"821\":2,\"822\":1,\"823\":2}}],[\"apk\",{\"0\":{\"814\":1,\"820\":1,\"821\":1},\"1\":{\"104\":2,\"115\":2,\"140\":1,\"167\":3,\"189\":3,\"783\":2,\"784\":4,\"814\":1,\"816\":3,\"821\":2,\"823\":2,\"824\":1}}],[\"api>26\",{\"1\":{\"179\":1}}],[\"api<26\",{\"1\":{\"176\":1}}],[\"api\",{\"1\":{\"5\":1,\"10\":4,\"92\":1,\"123\":1,\"126\":3,\"246\":1,\"247\":6,\"248\":3,\"250\":1,\"251\":1,\"267\":1,\"328\":4,\"337\":2,\"362\":5,\"365\":1,\"378\":1,\"421\":1,\"432\":1,\"447\":1,\"523\":1,\"552\":1,\"565\":1,\"566\":1,\"573\":1,\"578\":1,\"606\":1,\"751\":2,\"752\":1,\"753\":10,\"756\":3,\"758\":5,\"759\":2,\"775\":1}}],[\"appdatabase\",{\"1\":{\"781\":1}}],[\"appjit\",{\"1\":{\"763\":1,\"770\":4}}],[\"apparently\",{\"1\":{\"757\":1}}],[\"approaches\",{\"1\":{\"618\":1}}],[\"appropriate\",{\"1\":{\"234\":1}}],[\"appclassloader的父加载器是extclassloader\",{\"1\":{\"485\":1}}],[\"appclassloader和extclassloader都继承自urlclassloader\",{\"1\":{\"485\":1}}],[\"appcolor\",{\"1\":{\"273\":40}}],[\"appcomponent中\",{\"1\":{\"213\":1}}],[\"appcomponent的范围是整个应用程序都有效\",{\"1\":{\"211\":1}}],[\"appcomponent\",{\"1\":{\"211\":1}}],[\"appcompatactivity\",{\"1\":{\"123\":2,\"215\":1}}],[\"app内存暴增\",{\"1\":{\"376\":1}}],[\"appwidgetids\",{\"1\":{\"189\":7}}],[\"appwidgetmanager\",{\"1\":{\"189\":4}}],[\"appwidgetprovider\",{\"1\":{\"189\":2}}],[\"appwidget\",{\"0\":{\"189\":1},\"1\":{\"189\":26}}],[\"apps\",{\"1\":{\"128\":2,\"290\":1,\"770\":1,\"783\":1}}],[\"app=\",{\"1\":{\"115\":1,\"783\":1,\"784\":2}}],[\"appbar\",{\"1\":{\"110\":1,\"111\":2,\"279\":2,\"295\":2}}],[\"appbarlayout$scrollingviewbehavior\",{\"1\":{\"111\":1}}],[\"appbarlayout>\",{\"1\":{\"111\":2}}],[\"appbarlayout\",{\"1\":{\"108\":1,\"110\":2}}],[\"appname\",{\"1\":{\"105\":1}}],[\"appinfo\",{\"1\":{\"105\":3}}],[\"appkey\",{\"1\":{\"104\":1}}],[\"appendparams\",{\"1\":{\"711\":1}}],[\"append\",{\"1\":{\"90\":1,\"243\":1,\"247\":2,\"334\":1,\"557\":1,\"731\":2,\"737\":2,\"760\":2,\"890\":4}}],[\"applewebkit\",{\"1\":{\"731\":1}}],[\"apples\",{\"1\":{\"541\":4}}],[\"apple>\",{\"1\":{\"541\":1}}],[\"apple\",{\"1\":{\"539\":4,\"540\":1,\"541\":1}}],[\"applic\",{\"1\":{\"399\":1}}],[\"applicationinfo\",{\"1\":{\"817\":1}}],[\"applicationid\",{\"1\":{\"103\":1,\"105\":2}}],[\"applications\",{\"1\":{\"183\":1,\"770\":1}}],[\"application\",{\"0\":{\"211\":1},\"1\":{\"30\":2,\"105\":1,\"178\":2,\"195\":1,\"196\":1,\"211\":1,\"214\":1,\"274\":1,\"757\":1,\"770\":1,\"771\":2,\"822\":2}}],[\"application>\",{\"1\":{\"6\":1,\"35\":1,\"104\":1,\"189\":1}}],[\"applicable\",{\"1\":{\"25\":1}}],[\"applibrary\",{\"1\":{\"77\":1,\"141\":1}}],[\"applycontentdimensions\",{\"1\":{\"439\":1}}],[\"applyclampedpointersignalupdate\",{\"0\":{\"414\":1},\"1\":{\"414\":1}}],[\"applyclampeddragupdate\",{\"0\":{\"412\":1},\"1\":{\"412\":2,\"418\":11}}],[\"applyviewportdimension\",{\"1\":{\"439\":1}}],[\"applynewdimensions\",{\"0\":{\"415\":1},\"1\":{\"415\":6}}],[\"applyphysicstouseroffset\",{\"1\":{\"413\":1}}],[\"applyboundaryconditions\",{\"1\":{\"412\":1,\"413\":1}}],[\"applyfulldragupdate\",{\"0\":{\"413\":1},\"1\":{\"412\":1,\"413\":1,\"418\":5}}],[\"applyto\",{\"1\":{\"405\":2}}],[\"applyuseroffset方法\",{\"1\":{\"418\":1}}],[\"applyuseroffset\",{\"0\":{\"418\":1},\"1\":{\"404\":1,\"418\":4,\"420\":2}}],[\"applydimension\",{\"1\":{\"101\":1}}],[\"apply\",{\"1\":{\"19\":1,\"173\":1,\"209\":1,\"302\":1,\"413\":1,\"418\":2}}],[\"app\",{\"0\":{\"251\":1,\"254\":1,\"775\":1,\"818\":1,\"819\":1},\"1\":{\"5\":4,\"6\":12,\"8\":1,\"10\":3,\"11\":2,\"30\":7,\"31\":1,\"57\":1,\"63\":1,\"71\":1,\"96\":1,\"99\":1,\"101\":3,\"103\":2,\"104\":6,\"105\":10,\"106\":1,\"110\":1,\"111\":5,\"116\":1,\"118\":1,\"123\":1,\"126\":6,\"140\":6,\"179\":3,\"189\":6,\"196\":2,\"221\":1,\"230\":1,\"239\":2,\"243\":1,\"251\":5,\"252\":3,\"253\":1,\"257\":5,\"265\":1,\"266\":1,\"279\":3,\"284\":3,\"296\":2,\"385\":1,\"388\":2,\"484\":1,\"485\":1,\"710\":1,\"740\":1,\"748\":1,\"752\":2,\"757\":7,\"775\":1,\"776\":1,\"777\":1,\"778\":1,\"781\":1,\"783\":8,\"784\":5,\"816\":1,\"817\":4,\"819\":1}}],[\"a\",{\"0\":{\"450\":1},\"1\":{\"0\":2,\"10\":2,\"63\":1,\"71\":1,\"92\":3,\"105\":1,\"123\":2,\"128\":2,\"138\":1,\"144\":3,\"182\":2,\"183\":2,\"187\":3,\"193\":5,\"223\":1,\"225\":2,\"226\":1,\"229\":1,\"231\":7,\"232\":4,\"234\":2,\"235\":9,\"236\":2,\"237\":7,\"238\":1,\"243\":4,\"244\":3,\"246\":3,\"247\":14,\"253\":1,\"255\":2,\"259\":1,\"264\":1,\"276\":3,\"278\":1,\"281\":2,\"282\":1,\"285\":1,\"302\":4,\"309\":5,\"316\":1,\"318\":1,\"331\":2,\"332\":1,\"341\":11,\"343\":2,\"344\":2,\"347\":1,\"348\":1,\"350\":3,\"351\":8,\"352\":3,\"357\":1,\"358\":2,\"359\":1,\"365\":5,\"369\":1,\"370\":2,\"371\":2,\"376\":2,\"395\":3,\"402\":1,\"405\":3,\"408\":2,\"417\":5,\"422\":1,\"426\":3,\"430\":1,\"433\":2,\"444\":1,\"445\":2,\"473\":2,\"474\":4,\"492\":3,\"493\":2,\"494\":1,\"495\":1,\"496\":2,\"497\":1,\"511\":2,\"516\":1,\"522\":1,\"523\":2,\"532\":1,\"534\":4,\"560\":2,\"573\":3,\"574\":1,\"578\":1,\"586\":6,\"587\":2,\"594\":1,\"612\":1,\"615\":6,\"619\":4,\"620\":1,\"629\":2,\"630\":3,\"631\":3,\"636\":4,\"637\":1,\"659\":2,\"665\":1,\"688\":1,\"728\":2,\"737\":1,\"744\":2,\"748\":2,\"749\":1,\"753\":7,\"754\":2,\"756\":1,\"757\":4,\"759\":4,\"760\":2,\"761\":6,\"763\":1,\"766\":2,\"771\":1,\"811\":1,\"822\":2,\"850\":2,\"879\":1,\"896\":3,\"913\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
